system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given two strings s and t consisting of lowercase Latin letters. The length of t is 2 (i.e. this string consists only of two characters).

In one move, you can choose any character of s and replace it with any lowercase Latin letter. More formally, you choose some i and replace s_i (the character at the position i) with some character from 'a' to 'z'.

You want to do no more than k replacements in such a way that maximizes the number of occurrences of t in s as a subsequence.

Recall that a subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements.

Input

The first line of the input contains two integers n and k (2 ≤ n ≤ 200; 0 ≤ k ≤ n) — the length of s and the maximum number of moves you can make. The second line of the input contains the string s consisting of n lowercase Latin letters. The third line of the input contains the string t consisting of two lowercase Latin letters.

Output

Print one integer — the maximum possible number of occurrences of t in s as a subsequence if you replace no more than k characters in s optimally.

Examples

Input


4 2
bbaa
ab


Output


3


Input


7 3
asddsaf
sd


Output


10


Input


15 6
qwertyhgfdsazxc
qa


Output


16


Input


7 2
abacaba
aa


Output


15

Note

In the first example, you can obtain the string "abab" replacing s_1 with 'a' and s_4 with 'b'. Then the answer is 3.

In the second example, you can obtain the string "ssddsdd" and get the answer 10.

In the fourth example, you can obtain the string "aaacaaa" and get the answer 15.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, k;
long long dp[202][202][202];
string s, t;
long long fun(int pos, int mov, long long ase) {
  if (pos < 0) {
    return 0;
  }
  if (dp[pos][mov][ase] != -1) {
    return dp[pos][mov][ase];
  }
  long long res = 0;
  if (s[pos] == t[0]) {
    if (t[0] == t[1]) {
      res = max(res, ase + fun(pos - 1, mov, ase + 1));
    } else
      res = max(res, ase + fun(pos - 1, mov, ase));
  }
  if (s[pos] == t[1]) {
    if (t[0] == t[1]) {
      res = max(res, ase + fun(pos - 1, mov, ase + 1));
    } else
      res = max(res, fun(pos - 1, mov, ase + 1));
  }
  if ((mov - 1) >= 0) {
    if (t[0] == t[1]) {
      res = max(res, ase + fun(pos - 1, mov - 1, ase + 1));
    }
    res = max(res, ase + fun(pos - 1, mov - 1, ase));
    res = max(res, fun(pos - 1, mov - 1, ase + 1));
    if (s[pos] == t[1]) {
      if (t[0] == t[1])
        res = max(res, ase + fun(pos - 1, mov, ase + 1));
      else
        res = max(res, fun(pos - 1, mov, ase + 1));
    } else {
      res = max(res, fun(pos - 1, mov, ase));
    }
  } else {
    if (s[pos] == t[1]) {
      if (t[0] == t[1])
        res = max(res, ase + fun(pos - 1, mov, ase + 1));
      else
        res = max(res, fun(pos - 1, mov, ase + 1));
    } else {
      res = max(res, fun(pos - 1, mov, ase));
    }
  }
  return dp[pos][mov][ase] = res;
}
int main() {
  while (cin >> n >> k) {
    cin >> s >> t;
    memset(dp, -1, sizeof dp);
    cout << fun(n - 1, k, 0) << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

200 200
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aa


(G.2) Fast Input

200 0
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aa


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[202][202][202]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
string s, t; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long fun(int pos, int mov, long long ase) { /* line 6 slow_hit_count: 8120401, fast_hit_count: 601 */
  if (pos < 0) { /* line 7 slow_hit_count: 8120401, fast_hit_count: 601 */
    return 0; /* line 8 slow_hit_count: 120600, fast_hit_count: 3 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[pos][mov][ase] != -1) { /* line 10 slow_hit_count: 7999801, fast_hit_count: 598 */
    return dp[pos][mov][ase]; /* line 11 slow_hit_count: 6646401, fast_hit_count: 398 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  long long res = 0; /* line 13 slow_hit_count: 1353400, fast_hit_count: 200 */
  if (s[pos] == t[0]) { /* line 14 slow_hit_count: 1353400, fast_hit_count: 200 */
    if (t[0] == t[1]) { /* line 15 slow_hit_count: 1353400, fast_hit_count: 200 */
      res = max(res, ase + fun(pos - 1, mov, ase + 1)); /* line 16 slow_hit_count: 1353400, fast_hit_count: 200 */
    } else /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
      res = max(res, ase + fun(pos - 1, mov, ase)); /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  if (s[pos] == t[1]) { /* line 20 slow_hit_count: 1353400, fast_hit_count: 200 */
    if (t[0] == t[1]) { /* line 21 slow_hit_count: 1353400, fast_hit_count: 200 */
      res = max(res, ase + fun(pos - 1, mov, ase + 1)); /* line 22 slow_hit_count: 1353400, fast_hit_count: 200 */
    } else /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      res = max(res, fun(pos - 1, mov, ase + 1)); /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  if ((mov - 1) >= 0) { /* line 26 slow_hit_count: 1353400, fast_hit_count: 200 */
    if (t[0] == t[1]) { /* line 27 slow_hit_count: 1353400, fast_hit_count: 0 */
      res = max(res, ase + fun(pos - 1, mov - 1, ase + 1)); /* line 28 slow_hit_count: 1353400, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    res = max(res, ase + fun(pos - 1, mov - 1, ase)); /* line 30 slow_hit_count: 1353400, fast_hit_count: 0 */
    res = max(res, fun(pos - 1, mov - 1, ase + 1)); /* line 31 slow_hit_count: 1353400, fast_hit_count: 0 */
    if (s[pos] == t[1]) { /* line 32 slow_hit_count: 1353400, fast_hit_count: 0 */
      if (t[0] == t[1]) /* line 33 slow_hit_count: 1353400, fast_hit_count: 0 */
        res = max(res, ase + fun(pos - 1, mov, ase + 1)); /* line 34 slow_hit_count: 1353400, fast_hit_count: 0 */
      else /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
        res = max(res, fun(pos - 1, mov, ase + 1)); /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      res = max(res, fun(pos - 1, mov, ase)); /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    if (s[pos] == t[1]) { /* line 41 slow_hit_count: 0, fast_hit_count: 200 */
      if (t[0] == t[1]) /* line 42 slow_hit_count: 0, fast_hit_count: 200 */
        res = max(res, ase + fun(pos - 1, mov, ase + 1)); /* line 43 slow_hit_count: 0, fast_hit_count: 200 */
      else /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
        res = max(res, fun(pos - 1, mov, ase + 1)); /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
      res = max(res, fun(pos - 1, mov, ase)); /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  return dp[pos][mov][ase] = res; /* line 50 slow_hit_count: 1353400, fast_hit_count: 200 */
} /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 52 slow_hit_count: 2, fast_hit_count: 2 */
  while (cin >> n >> k) { /* line 53 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> s >> t; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
    memset(dp, -1, sizeof dp); /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
    cout << fun(n - 1, k, 0) << endl; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 59 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the given problem, let's proceed with analyzing the C code to identify performance bottlenecks and then derive performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts**: Examining the hit counts provided for both slow and fast runs, we observe that the function `fun` is called an extensive number of times in the slow input case compared to the fast one. Specifically, lines within the `fun` function show significantly higher hit counts in the slow scenario.

2. **Pinpointing of Lines/Functions**:
   - **Dynamic Programming (DP) Table Check**: The line `if (dp[pos][mov][ase] != -1)` is hit a very high number of times (7,999,801 for slow vs. 598 for fast). This indicates frequent DP table lookups.
   - **Recursive Calls**: The recursive calls to `fun` (e.g., `fun(pos - 1, mov, ase + 1)`) are also triggered multiple times, which suggests deep recursion and re-evaluation of subproblems, especially when `mov > 0`.
   - **Conditionally Expensive Evaluation**: Based on the hit counts, sections of code with multiple recursive calls within conditions (e.g., lines 16, 22, 28, 30, 31) are expensive.

3. **Interaction with Input Constraints**:
   - The code attempts to maximize subsequences by using the maximum allowed replacements `k`. When `k` is large, such as in the slow input, the number of recursive evaluations increases significantly.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the natural language performance invariants describing conditions likely causing slow execution:

1. **Large Allowed Replacements**:
   - _Invariant_: "If `k` is large and close to `n`, the number of potential subsequences to evaluate grows, leading to a significant increase in recursive function calls."
   - This condition arises as the program tries to explore many configurations when `k` is large, causing multiple recursive evaluations that burden the DP table.

2. **String with Repeated Characters**:
   - _Invariant_: "When the string `s` consists mainly of repeated characters that are equal to `t[0]` or `t[1]`, and `t[0] == t[1]`, the number of subsequences can increase exponentially, leading to performance degradation."
   - This invariant captures the scenario where overlapping subsequences cause exponential growth in the number of valid paths to evaluate.

3. **Recursive Depth and Overlapping Subproblems**:
   - _Invariant_: "If many overlapping subproblems need to be solved due to a high recursion depth and large `k`, performance can degrade due to repeated evaluations."
   - Excessive recursion depth combined with subproblem overlap results in redundant computations, even with memoization.

These invariants highlight conditions where the code is likely to slow down due to intense recursive evaluations and a large number of branching paths created by the dynamic programming strategy employed to solve the problem with large `k` values and specific character distributions in `s`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given two strings s and t consisting of lowercase Latin letters. The length of t is 2 (i.e. this string consists only of two characters).

In one move, you can choose any character of s and replace it with any lowercase Latin letter. More formally, you choose some i and replace s_i (the character at the position i) with some character from 'a' to 'z'.

You want to do no more than k replacements in such a way that maximizes the number of occurrences of t in s as a subsequence.

Recall that a subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements.

Input

The first line of the input contains two integers n and k (2 ≤ n ≤ 200; 0 ≤ k ≤ n) — the length of s and the maximum number of moves you can make. The second line of the input contains the string s consisting of n lowercase Latin letters. The third line of the input contains the string t consisting of two lowercase Latin letters.

Output

Print one integer — the maximum possible number of occurrences of t in s as a subsequence if you replace no more than k characters in s optimally.

Examples

Input


4 2
bbaa
ab


Output


3


Input


7 3
asddsaf
sd


Output


10


Input


15 6
qwertyhgfdsazxc
qa


Output


16


Input


7 2
abacaba
aa


Output


15

Note

In the first example, you can obtain the string "abab" replacing s_1 with 'a' and s_4 with 'b'. Then the answer is 3.

In the second example, you can obtain the string "ssddsdd" and get the answer 10.

In the fourth example, you can obtain the string "aaacaaa" and get the answer 15.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Let's implement the performance-characterizing invariants derived previously into runtime checks. These checks will help detect when the program might enter a performance bottleneck.

1. **Large Allowed Replacements**:
   - Condition: If `k` is large and close to `n`, the recursion may expand significantly.
   
2. **String with Repeated Characters**:
   - Condition: If `s` mainly consists of characters equal to `t[0]` or `t[1]`, and `t[0] == t[1]`, the subsequences may grow exponentially.
   
3. **Recursive Depth and Overlapping Subproblems**:
   - Condition: If many overlapping subproblems need to be solved, performance can degrade due to redundant evaluations.

Here are C++ implementations for these conditions:

```cpp
void check_large_replacements_invariant(int n, int k) {
    if (k > n - 10) {  // Assuming "close to n" means within 10 characters
        cerr << "Warning: Large replacements invariant triggered - k is close to n" << endl;
        abort();
    }
}

void check_repeated_characters_invariant(const string &s, const string &t) {
    if (t[0] == t[1]) {
        int count_t0 = count(s.begin(), s.end(), t[0]);
        if (count_t0 > s.size() / 2) {  // Majority of string consists of t[0]
            cerr << "Warning: Repeated characters invariant triggered - s consists mainly of t[0]" << endl;
            abort();
        }
    }
}

void check_recursive_depth_invariant(int n, int k) {
    int max_recursion_depth = n + k;  // Approximate maximum depth
    if (max_recursion_depth > 180) {  // Threshold based on problem constraints
        cerr << "Warning: Recursive depth invariant triggered - potential high depth" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original C++ Program

Now, we'll integrate these checker functions into the original C++ program, placing the checks at appropriate points in the code to avoid impacting performance adversely.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, k;
long long dp[202][202][202];
string s, t;

void check_large_replacements_invariant(int n, int k) {
    if (k > n - 10) {  // Assuming "close to n" means within 10 characters
        cerr << "Warning: Large replacements invariant triggered - k is close to n" << endl;
        abort();
    }
}

void check_repeated_characters_invariant(const string &s, const string &t) {
    if (t[0] == t[1]) {
        int count_t0 = count(s.begin(), s.end(), t[0]);
        if (count_t0 > s.size() / 2) {  // Majority of string consists of t[0]
            cerr << "Warning: Repeated characters invariant triggered - s consists mainly of t[0]" << endl;
            abort();
        }
    }
}

void check_recursive_depth_invariant(int n, int k) {
    int max_recursion_depth = n + k;  // Approximate maximum depth
    if (max_recursion_depth > 180) {  // Threshold based on problem constraints
        cerr << "Warning: Recursive depth invariant triggered - potential high depth" << endl;
        abort();
    }
}

long long fun(int pos, int mov, long long ase) {
    if (pos < 0) {
        return 0;
    }
    if (dp[pos][mov][ase] != -1) {
        return dp[pos][mov][ase];
    }
    long long res = 0;
    if (s[pos] == t[0]) {
        if (t[0] == t[1]) {
            res = max(res, ase + fun(pos - 1, mov, ase + 1));
        } else {
            res = max(res, ase + fun(pos - 1, mov, ase));
        }
    }
    if (s[pos] == t[1]) {
        if (t[0] == t[1]) {
            res = max(res, ase + fun(pos - 1, mov, ase + 1));
        } else {
            res = max(res, fun(pos - 1, mov, ase + 1));
        }
    }
    if ((mov - 1) >= 0) {
        if (t[0] == t[1]) {
            res = max(res, ase + fun(pos - 1, mov - 1, ase + 1));
        }
        res = max(res, ase + fun(pos - 1, mov - 1, ase));
        res = max(res, fun(pos - 1, mov - 1, ase + 1));
        if (s[pos] == t[1]) {
            if (t[0] == t[1]) {
                res = max(res, ase + fun(pos - 1, mov, ase + 1));
            } else {
                res = max(res, fun(pos - 1, mov, ase + 1));
            }
        } else {
            res = max(res, fun(pos - 1, mov, ase));
        }
    } else {
        if (s[pos] == t[1]) {
            if (t[0] == t[1]) {
                res = max(res, ase + fun(pos - 1, mov, ase + 1));
            } else {
                res = max(res, fun(pos - 1, mov, ase + 1));
            }
        } else {
            res = max(res, fun(pos - 1, mov, ase));
        }
    }
    return dp[pos][mov][ase] = res;
}

int main() {
    while (cin >> n >> k) {
        cin >> s >> t;
        
        // Check invariants after reading inputs
        check_large_replacements_invariant(n, k);
        check_repeated_characters_invariant(s, t);
        check_recursive_depth_invariant(n, k);
        
        memset(dp, -1, sizeof dp);
        cout << fun(n - 1, k, 0) << endl;
    }
    return 0;
}
```

**Explanation of Inserted Checks**:
- **Large Replacements Check**: After input reading, checks if `k` is too close to `n`, potentially leading to expanded recursion.
- **Repeated Characters Check**: Validates if the string `s` primarily consists of the character `t[0]`, which might boost subsequences if `t[0] == t[1]`.
- **Recursive Depth Check**: Evaluates the expected recursion depth to ensure it remains manageable given the problem constraints.

