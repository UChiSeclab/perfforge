system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given two strings s and t consisting of lowercase Latin letters. The length of t is 2 (i.e. this string consists only of two characters).

In one move, you can choose any character of s and replace it with any lowercase Latin letter. More formally, you choose some i and replace s_i (the character at the position i) with some character from 'a' to 'z'.

You want to do no more than k replacements in such a way that maximizes the number of occurrences of t in s as a subsequence.

Recall that a subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements.

Input

The first line of the input contains two integers n and k (2 ≤ n ≤ 200; 0 ≤ k ≤ n) — the length of s and the maximum number of moves you can make. The second line of the input contains the string s consisting of n lowercase Latin letters. The third line of the input contains the string t consisting of two lowercase Latin letters.

Output

Print one integer — the maximum possible number of occurrences of t in s as a subsequence if you replace no more than k characters in s optimally.

Examples

Input


4 2
bbaa
ab


Output


3


Input


7 3
asddsaf
sd


Output


10


Input


15 6
qwertyhgfdsazxc
qa


Output


16


Input


7 2
abacaba
aa


Output


15

Note

In the first example, you can obtain the string "abab" replacing s_1 with 'a' and s_4 with 'b'. Then the answer is 3.

In the second example, you can obtain the string "ssddsdd" and get the answer 10.

In the fourth example, you can obtain the string "aaacaaa" and get the answer 15.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <typename T>
void read(T &x) {
  x = 0;
  int f = 1;
  char ch = getchar();
  while (!isdigit(ch)) {
    if (ch == '-') f = -1;
    ch = getchar();
  }
  while (isdigit(ch)) {
    x = x * 10 + (ch ^ 48);
    ch = getchar();
  }
  return x *= f, void();
}
template <typename T>
void ckmax(T &a, T b) {
  a = b > a ? b : a;
}
template <typename T>
void ckmin(T &a, T b) {
  a = b < a ? b : a;
}
const int N = 200 + 5;
int n, k, f[N][N][N], ans;
char s[N], t[N];
int main() {
  read(n), read(k);
  scanf("%s%s", s + 1, t + 1);
  memset(f, 0xcf, sizeof(f));
  f[0][0][0] = 0;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j <= i; j++) {
      for (int l = 0; l <= min(k, i); l++) {
        for (char c = 'a'; c <= 'z'; c++) {
          if (l + (c != s[i + 1]) <= min(k, i + 1)) {
            ckmax(f[i + 1][j + (c == t[1])][l + (c != s[i + 1])],
                  f[i][j][l] + (c == t[2]) * j);
          }
        }
      }
    }
  }
  for (int i = 0; i <= n; i++) {
    for (int j = 0; j <= min(n, k); j++) {
      ckmax(ans, f[n][i][j]);
    }
  }
  printf("%d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

200 200
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aa


(G.2) Fast Input

200 0
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aa


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void read(T &x) { /* line 4 slow_hit_count: 2, fast_hit_count: 2 */
  x = 0; /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
  int f = 1; /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  char ch = getchar(); /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  while (!isdigit(ch)) { /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
    if (ch == '-') f = -1; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    ch = getchar(); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  while (isdigit(ch)) { /* line 12 slow_hit_count: 8, fast_hit_count: 6 */
    x = x * 10 + (ch ^ 48); /* line 13 slow_hit_count: 6, fast_hit_count: 4 */
    ch = getchar(); /* line 14 slow_hit_count: 6, fast_hit_count: 4 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return x *= f, void(); /* line 16 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
void ckmax(T &a, T b) { /* line 19 slow_hit_count: 69894601, fast_hit_count: 20301 */
  a = b > a ? b : a; /* line 20 slow_hit_count: 69894601, fast_hit_count: 20301 */
} /* line 21 slow_hit_count: 69894601, fast_hit_count: 20301 */
template <typename T> /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
void ckmin(T &a, T b) { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  a = b < a ? b : a; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 200 + 5; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, f[N][N][N], ans; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
char s[N], t[N]; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  read(n), read(k); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%s%s", s + 1, t + 1); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  memset(f, 0xcf, sizeof(f)); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  f[0][0][0] = 0; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 34 slow_hit_count: 201, fast_hit_count: 201 */
    for (int j = 0; j <= i; j++) { /* line 35 slow_hit_count: 20300, fast_hit_count: 20300 */
      for (int l = 0; l <= min(k, i); l++) { /* line 36 slow_hit_count: 2706800, fast_hit_count: 40200 */
        for (char c = 'a'; c <= 'z'; c++) { /* line 37 slow_hit_count: 72540900, fast_hit_count: 542700 */
          if (l + (c != s[i + 1]) <= min(k, i + 1)) { /* line 38 slow_hit_count: 69854200, fast_hit_count: 522600 */
            ckmax(f[i + 1][j + (c == t[1])][l + (c != s[i + 1])], /* line 39 slow_hit_count: 69854200, fast_hit_count: 20100 */
                  f[i][j][l] + (c == t[2]) * j); /* line 40 slow_hit_count: 69854200, fast_hit_count: 20100 */
          } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= n; i++) { /* line 46 slow_hit_count: 202, fast_hit_count: 202 */
    for (int j = 0; j <= min(n, k); j++) { /* line 47 slow_hit_count: 40602, fast_hit_count: 402 */
      ckmax(ans, f[n][i][j]); /* line 48 slow_hit_count: 40401, fast_hit_count: 201 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance analysis of the given C program, let's proceed with the task of identifying expensive or inefficient code segments and deriving performance-characterizing invariants based on the slow and fast input scenarios.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The critical difference between the fast and slow input scenarios is in the number of hits on certain lines within the nested loops, particularly lines 36 to 40. The slow input has significantly higher hit counts compared to the fast input.

2. **Pinpoint Lines with Significant Hits:**
   - Line 36 (`for (int l = 0; l <= min(k, i); l++)`) has a hit count of 2,706,800 for slow input versus 40,200 for fast input.
   - Line 37 (`for (char c = 'a'; c <= 'z'; c++)`) has a hit count of 72,540,900 for slow input versus 542,700 for fast input.
   - The `ckmax` function (lines 19-21) is also hit more frequently in the slow input scenario due to these nested loops.

3. **Interaction with Data Structures and Loops:**
   - The program employs a dynamic programming approach using a 3D array `f` to store intermediate results.
   - The inefficient part is the nested loop structure that iterates over possible replacements (`c` from 'a' to 'z') for each character in `s`, bounded by `k` and current index `i`.
   - The critical point is when `k` is large relative to `n`, allowing for extensive exploration of possibilities.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above observations, here are potential performance-characterizing invariants expressed in natural language:

1. **High Replacement Capacity:**
   - **Invariant:** "If the number of allowed replacements `k` is close to the length of string `s` (`n`), the program may enter a slow path due to the large number of possible transformations for each character in `s`."
   - **Explanation:** When `k` approaches `n`, the nested loops iterate extensively over potential character replacements, significantly increasing computation time.

2. **Repetitive Character Scenarios:**
   - **Invariant:** "If the string `s` consists predominantly of a single character and `k` is large, the program may slow down due to the repetitive checking of potential substitutions."
   - **Explanation:** In cases where `s` is largely uniform (e.g., all 'a's), and many replacements are allowed, the program explores a vast space of possible configurations inefficiently.

3. **Nested Loop Complexity:**
   - **Invariant:** "If both `n` and `k` are at their maximum constraint (200), combined with a pattern in `s` that matches or is close to `t`, the program may exhibit slower performance due to compounded nested loop iterations over all characters and replacement possibilities."
   - **Explanation:** The combination of maximum values for `n` and `k` with a favorable initial string setup maximizes the iteration depth through nested loops, impacting performance.

These invariants help identify conditions under which the algorithm's performance may degrade, allowing for targeted testing and potential optimization in similar scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given two strings s and t consisting of lowercase Latin letters. The length of t is 2 (i.e. this string consists only of two characters).

In one move, you can choose any character of s and replace it with any lowercase Latin letter. More formally, you choose some i and replace s_i (the character at the position i) with some character from 'a' to 'z'.

You want to do no more than k replacements in such a way that maximizes the number of occurrences of t in s as a subsequence.

Recall that a subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements.

Input

The first line of the input contains two integers n and k (2 ≤ n ≤ 200; 0 ≤ k ≤ n) — the length of s and the maximum number of moves you can make. The second line of the input contains the string s consisting of n lowercase Latin letters. The third line of the input contains the string t consisting of two lowercase Latin letters.

Output

Print one integer — the maximum possible number of occurrences of t in s as a subsequence if you replace no more than k characters in s optimally.

Examples

Input


4 2
bbaa
ab


Output


3


Input


7 3
asddsaf
sd


Output


10


Input


15 6
qwertyhgfdsazxc
qa


Output


16


Input


7 2
abacaba
aa


Output


15

Note

In the first example, you can obtain the string "abab" replacing s_1 with 'a' and s_4 with 'b'. Then the answer is 3.

In the second example, you can obtain the string "ssddsdd" and get the answer 10.

In the fourth example, you can obtain the string "aaacaaa" and get the answer 15.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's implement each of the performance-characterizing invariants derived earlier as C++ runtime checks:

1. **High Replacement Capacity Invariant:**
   - **Invariant:** "If the number of allowed replacements `k` is close to the length of string `s` (`n`), the program may enter a slow path."
   
   ```cpp
   void check_high_replacement_capacity(int n, int k) {
       if (k >= n - 1) {
           cerr << "Warning: Performance bottleneck condition triggered - high replacement capacity!" << endl;
           abort();
       }
   }
   ```

2. **Repetitive Character Scenario Invariant:**
   - **Invariant:** "If the string `s` consists predominantly of a single character and `k` is large, the program may slow down."
   
   ```cpp
   void check_repetitive_character_scenario(const string& s, int n, int k) {
       int max_char_count = 0;
       vector<int> char_count(26, 0);
       for (char c : s) {
           char_count[c - 'a']++;
           max_char_count = max(max_char_count, char_count[c - 'a']);
       }
       if (max_char_count / static_cast<double>(n) > 0.8 && k > n / 2) {
           cerr << "Warning: Performance bottleneck condition triggered - repetitive character scenario!" << endl;
           abort();
       }
   }
   ```

3. **Nested Loop Complexity Invariant:**
   - **Invariant:** "If both `n` and `k` are at their maximum constraint (200), the program may exhibit slower performance."
   
   ```cpp
   void check_nested_loop_complexity(int n, int k) {
       if (n == 200 && k == 200) {
           cerr << "Warning: Performance bottleneck condition triggered - maximum constraints reached!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Invariants into the Original Program

Now, let's integrate these checks into the original C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;

template <typename T>
void read(T &x) {
    x = 0;
    int f = 1;
    char ch = getchar();
    while (!isdigit(ch)) {
        if (ch == '-') f = -1;
        ch = getchar();
    }
    while (isdigit(ch)) {
        x = x * 10 + (ch ^ 48);
        ch = getchar();
    }
    return x *= f, void();
}

template <typename T>
void ckmax(T &a, T b) {
    a = b > a ? b : a;
}

template <typename T>
void ckmin(T &a, T b) {
    a = b < a ? b : a;
}

const int N = 200 + 5;
int n, k, f[N][N][N], ans;
char s[N], t[N];

// Check functions to detect performance bottlenecks
void check_high_replacement_capacity(int n, int k) {
    if (k >= n - 1) {
        cerr << "Warning: Performance bottleneck condition triggered - high replacement capacity!" << endl;
        abort();
    }
}

void check_repetitive_character_scenario(const string& s, int n, int k) {
    int max_char_count = 0;
    vector<int> char_count(26, 0);
    for (char c : s) {
        char_count[c - 'a']++;
        max_char_count = max(max_char_count, char_count[c - 'a']);
    }
    if (max_char_count / static_cast<double>(n) > 0.8 && k > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - repetitive character scenario!" << endl;
        abort();
    }
}

void check_nested_loop_complexity(int n, int k) {
    if (n == 200 && k == 200) {
        cerr << "Warning: Performance bottleneck condition triggered - maximum constraints reached!" << endl;
        abort();
    }
}

int main() {
    read(n), read(k);
    scanf("%s%s", s + 1, t + 1);

    // Convert char array to string for checker use
    string s_str(s + 1);

    // Check for potential performance bottlenecks
    check_high_replacement_capacity(n, k);
    check_repetitive_character_scenario(s_str, n, k);
    check_nested_loop_complexity(n, k);

    memset(f, 0xcf, sizeof(f));
    f[0][0][0] = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j <= i; j++) {
            for (int l = 0; l <= min(k, i); l++) {
                for (char c = 'a'; c <= 'z'; c++) {
                    if (l + (c != s[i + 1]) <= min(k, i + 1)) {
                        ckmax(f[i + 1][j + (c == t[1])][l + (c != s[i + 1])],
                              f[i][j][l] + (c == t[2]) * j);
                    }
                }
            }
        }
    }
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= min(n, k); j++) {
            ckmax(ans, f[n][i][j]);
        }
    }
    printf("%d\n", ans);
    return 0;
}
```

In this code, I have added runtime checks that correspond to the identified performance bottlenecks. These checks are placed after reading the inputs and before the main computation to detect conditions under which the program might run slowly.

