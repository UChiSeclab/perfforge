system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given two strings s and t consisting of lowercase Latin letters. The length of t is 2 (i.e. this string consists only of two characters).

In one move, you can choose any character of s and replace it with any lowercase Latin letter. More formally, you choose some i and replace s_i (the character at the position i) with some character from 'a' to 'z'.

You want to do no more than k replacements in such a way that maximizes the number of occurrences of t in s as a subsequence.

Recall that a subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements.

Input

The first line of the input contains two integers n and k (2 ≤ n ≤ 200; 0 ≤ k ≤ n) — the length of s and the maximum number of moves you can make. The second line of the input contains the string s consisting of n lowercase Latin letters. The third line of the input contains the string t consisting of two lowercase Latin letters.

Output

Print one integer — the maximum possible number of occurrences of t in s as a subsequence if you replace no more than k characters in s optimally.

Examples

Input


4 2
bbaa
ab


Output


3


Input


7 3
asddsaf
sd


Output


10


Input


15 6
qwertyhgfdsazxc
qa


Output


16


Input


7 2
abacaba
aa


Output


15

Note

In the first example, you can obtain the string "abab" replacing s_1 with 'a' and s_4 with 'b'. Then the answer is 3.

In the second example, you can obtain the string "ssddsdd" and get the answer 10.

In the fourth example, you can obtain the string "aaacaaa" and get the answer 15.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <typename T>
void read(T &x) {
  x = 0;
  char ch = getchar();
  long long f = 1;
  while (!isdigit(ch)) {
    if (ch == '-') f *= -1;
    ch = getchar();
  }
  while (isdigit(ch)) {
    x = x * 10 + ch - 48;
    ch = getchar();
  }
  x *= f;
}
template <typename T, typename... Args>
void read(T &first, Args &...args) {
  read(first);
  read(args...);
}
template <typename T>
void write(T arg) {
  T x = arg;
  if (x < 0) {
    putchar('-');
    x = -x;
  }
  if (x > 9) {
    write(x / 10);
  }
  putchar(x % 10 + '0');
}
template <typename T, typename... Ts>
void write(T arg, Ts... args) {
  write(arg);
  if (sizeof...(args) != 0) {
    putchar(' ');
    write(args...);
  }
}
const long long mod = 1e9 + 7;
const int N = 250;
int n, k, f[N][N][N];
char s[N], t[N];
int main() {
  read(n, k);
  scanf("%s", s);
  scanf("%s", t);
  memset((f), -0x3f3f3f3f, sizeof(f));
  f[0][0][0] = 0;
  for (register int i = 0; i < n; ++i) {
    for (register int j = 0; j <= k; ++j) {
      for (register int l = 0; l <= n; ++l) {
        if (f[i][j][l] == -0x3f3f3f3f) {
          continue;
        }
        int e0 = s[i] == t[0];
        int e1 = s[i] == t[1];
        int e10 = t[0] == t[1];
        f[i + 1][j][l + e0] =
            max(f[i + 1][j][l + e0], f[i][j][l] + (e1 ? l : 0));
        if (j < k) {
          f[i + 1][j + 1][l + 1] =
              max(f[i + 1][j + 1][l + 1], f[i][j][l] + (e10 ? l : 0));
          f[i + 1][j + 1][l + e10] =
              max(f[i + 1][j + 1][l + e10], f[i][j][l] + l);
        }
      }
    }
  }
  int ans = 0;
  for (register int i = 0; i <= k; ++i) {
    for (register int j = 0; j <= n; ++j) {
      ans = max(ans, f[n][i][j]);
    }
  }
  write(ans), putchar('\n');
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

200 200
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aa


(G.2) Fast Input

200 0
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
aa


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void read(T &x) { /* line 4 slow_hit_count: 2, fast_hit_count: 2 */
  x = 0; /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
  char ch = getchar(); /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  long long f = 1; /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  while (!isdigit(ch)) { /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
    if (ch == '-') f *= -1; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    ch = getchar(); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  while (isdigit(ch)) { /* line 12 slow_hit_count: 8, fast_hit_count: 6 */
    x = x * 10 + ch - 48; /* line 13 slow_hit_count: 6, fast_hit_count: 4 */
    ch = getchar(); /* line 14 slow_hit_count: 6, fast_hit_count: 4 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  x *= f; /* line 16 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 17 slow_hit_count: 2, fast_hit_count: 2 */
template <typename T, typename... Args> /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
void read(T &first, Args &...args) { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  read(first); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  read(args...); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
template <typename T> /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
void write(T arg) { /* line 24 slow_hit_count: 5, fast_hit_count: 5 */
  T x = arg; /* line 25 slow_hit_count: 5, fast_hit_count: 5 */
  if (x < 0) { /* line 26 slow_hit_count: 5, fast_hit_count: 5 */
    putchar('-'); /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    x = -x; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  if (x > 9) { /* line 30 slow_hit_count: 5, fast_hit_count: 5 */
    write(x / 10); /* line 31 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  putchar(x % 10 + '0'); /* line 33 slow_hit_count: 5, fast_hit_count: 5 */
} /* line 34 slow_hit_count: 5, fast_hit_count: 5 */
template <typename T, typename... Ts> /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
void write(T arg, Ts... args) { /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  write(arg); /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  if (sizeof...(args) != 0) { /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    putchar(' '); /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    write(args...); /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1e9 + 7; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 250; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, f[N][N][N]; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
char s[N], t[N]; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  read(n, k); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%s", s); /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%s", t); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  memset((f), -0x3f3f3f3f, sizeof(f)); /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  f[0][0][0] = 0; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  for (register int i = 0; i < n; ++i) { /* line 53 slow_hit_count: 201, fast_hit_count: 201 */
    for (register int j = 0; j <= k; ++j) { /* line 54 slow_hit_count: 40400, fast_hit_count: 400 */
      for (register int l = 0; l <= n; ++l) { /* line 55 slow_hit_count: 8120400, fast_hit_count: 40400 */
        if (f[i][j][l] == -0x3f3f3f3f) { /* line 56 slow_hit_count: 8080200, fast_hit_count: 40200 */
          continue; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
        int e0 = s[i] == t[0]; /* line 59 slow_hit_count: 8080200, fast_hit_count: 40200 */
        int e1 = s[i] == t[1]; /* line 60 slow_hit_count: 8080200, fast_hit_count: 40200 */
        int e10 = t[0] == t[1]; /* line 61 slow_hit_count: 8080200, fast_hit_count: 40200 */
        f[i + 1][j][l + e0] = /* line 62 slow_hit_count: 8080200, fast_hit_count: 40200 */
            max(f[i + 1][j][l + e0], f[i][j][l] + (e1 ? l : 0)); /* line 63 slow_hit_count: 8080200, fast_hit_count: 40200 */
        if (j < k) { /* line 64 slow_hit_count: 8080200, fast_hit_count: 40200 */
          f[i + 1][j + 1][l + 1] = /* line 65 slow_hit_count: 8040000, fast_hit_count: 0 */
              max(f[i + 1][j + 1][l + 1], f[i][j][l] + (e10 ? l : 0)); /* line 66 slow_hit_count: 8040000, fast_hit_count: 0 */
          f[i + 1][j + 1][l + e10] = /* line 67 slow_hit_count: 8040000, fast_hit_count: 0 */
              max(f[i + 1][j + 1][l + e10], f[i][j][l] + l); /* line 68 slow_hit_count: 8040000, fast_hit_count: 0 */
        } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  for (register int i = 0; i <= k; ++i) { /* line 74 slow_hit_count: 202, fast_hit_count: 2 */
    for (register int j = 0; j <= n; ++j) { /* line 75 slow_hit_count: 40602, fast_hit_count: 202 */
      ans = max(ans, f[n][i][j]); /* line 76 slow_hit_count: 40401, fast_hit_count: 201 */
    } /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
  write(ans), putchar('\n'); /* line 79 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 81 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the tasks outlined, let's systematically analyze the provided C code to identify performance bottlenecks and then derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Hit Counts:**

- **Lines with Significant Hit Differences:**
  - The hit counts for the slow input are notably higher in the nested loops at lines 54 (`for (register int j = 0; j <= k; ++j)`) and 55 (`for (register int l = 0; l <= n; ++l)`). The hit count difference between slow and fast is drastic: `40400` vs. `400` for line 54 and `8120400` vs. `40400` for line 55.
  - The subsequent lines within these loops (lines 56 to 68) also show similar excessive hits for the slow input.

**Inference:**

- The nested loops are iterating extensively due to the values of `n` and `k` both being high (200 each for the slow input). The number of operations scales with the product of `n`, `k`, and `n` again from the third loop, leading to potentially millions of iterations.
- The usage of the dynamic programming table `f[i][j][l]`, which has dimensions `[N][N][N]`, exacerbates the issue by processing many elements in each iteration.

### Phase 2: Derive Performance-Characterizing Invariants

**Performance Invariants:**

1. **High `k` with Maximum `n`:**
   - **Natural Language Description:** "If `k` is large and close to `n`, the nested loops iterate excessively, leading to a significant increase in computation time."
   - **Reasoning:** The maximum number of replacements (`k`) equal to the length of `s` (`n`) implies every character can be replaced, which drastically increases possible combinations and hence iterations.

2. **Nested Loops with Large Dimensions:**
   - **Natural Language Description:** "When `n` is near its upper limit and the three-dimensional dynamic programming table is fully engaged, the number of operations increases cubically, causing slowdowns."
   - **Reasoning:** The three nested loops across all possibilities of `j` and `l` for each `i` create a cubic time complexity situation when `n` and `k` are large.

3. **Repeated Use of MAX Function within Loops:**
   - **Natural Language Description:** "Frequent evaluations of maximum values within loops over large indices can lead to performance degradation, especially when the loop bounds are large."
   - **Reasoning:** The repeated computation of `max` over large dimensions inside deeply nested loops can itself become a bottleneck.

### Conclusions and Recommendations:

- The identified invariants suggest that the algorithm's complexity is particularly sensitive to the upper limits of `n` and `k` due to the nature of nested loops and the dynamic programming table.
- To mitigate these issues, consider optimizing the loop bounds or finding ways to reduce redundant computations, potentially by leveraging more efficient data structures or algorithms.

These performance invariants aim to generalize the conditions under which the given C code may experience slowdowns, focusing on high-level patterns rather than specific inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given two strings s and t consisting of lowercase Latin letters. The length of t is 2 (i.e. this string consists only of two characters).

In one move, you can choose any character of s and replace it with any lowercase Latin letter. More formally, you choose some i and replace s_i (the character at the position i) with some character from 'a' to 'z'.

You want to do no more than k replacements in such a way that maximizes the number of occurrences of t in s as a subsequence.

Recall that a subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements.

Input

The first line of the input contains two integers n and k (2 ≤ n ≤ 200; 0 ≤ k ≤ n) — the length of s and the maximum number of moves you can make. The second line of the input contains the string s consisting of n lowercase Latin letters. The third line of the input contains the string t consisting of two lowercase Latin letters.

Output

Print one integer — the maximum possible number of occurrences of t in s as a subsequence if you replace no more than k characters in s optimally.

Examples

Input


4 2
bbaa
ab


Output


3


Input


7 3
asddsaf
sd


Output


10


Input


15 6
qwertyhgfdsazxc
qa


Output


16


Input


7 2
abacaba
aa


Output


15

Note

In the first example, you can obtain the string "abab" replacing s_1 with 'a' and s_4 with 'b'. Then the answer is 3.

In the second example, you can obtain the string "ssddsdd" and get the answer 10.

In the fourth example, you can obtain the string "aaacaaa" and get the answer 15.

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 and Phase 4 as outlined.

### Phase 3: Implementing Invariants as C++ Checks

For each invariant derived in the previous task, we'll implement corresponding checker code in C++.

#### Invariant 1: High `k` with Maximum `n`

```cpp
void check_high_k_invariant(int n, int k) {
    if (k > n * 0.9) { // Example threshold where k is close to n
        cerr << "Warning: Performance bottleneck condition triggered - high `k` near maximum `n`." << endl;
        abort();
    }
}
```

#### Invariant 2: Nested Loops with Large Dimensions

```cpp
void check_large_nested_loops_invariant(int n, int k) {
    if (n > 190 && k > 190) { // Example threshold when n and k are both large
        cerr << "Warning: Nested loops with large dimensions - potential performance bottleneck." << endl;
        abort();
    }
}
```

#### Invariant 3: Repeated Use of MAX Function Within Loops

```cpp
void check_max_function_usage_invariant(int n, int k) {
    if (n * k > 10000) { // Example threshold for the product of n and k
        cerr << "Warning: Excessive max function evaluations in loops - performance bottleneck." << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original Program

Let's integrate the checks into the given C++ program, ensuring they are placed at effective points without adding overhead inside tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Check functions for performance invariants
void check_high_k_invariant(int n, int k) {
    if (k > n * 0.9) { // Example threshold where k is close to n
        cerr << "Warning: Performance bottleneck condition triggered - high `k` near maximum `n`." << endl;
        abort();
    }
}

void check_large_nested_loops_invariant(int n, int k) {
    if (n > 190 && k > 190) { // Example threshold when n and k are both large
        cerr << "Warning: Nested loops with large dimensions - potential performance bottleneck." << endl;
        abort();
    }
}

void check_max_function_usage_invariant(int n, int k) {
    if (n * k > 10000) { // Example threshold for the product of n and k
        cerr << "Warning: Excessive max function evaluations in loops - performance bottleneck." << endl;
        abort();
    }
}

template <typename T>
void read(T &x) {
    x = 0;
    char ch = getchar();
    long long f = 1;
    while (!isdigit(ch)) {
        if (ch == '-') f *= -1;
        ch = getchar();
    }
    while (isdigit(ch)) {
        x = x * 10 + ch - 48;
        ch = getchar();
    }
    x *= f;
}

template <typename T, typename... Args>
void read(T &first, Args &...args) {
    read(first);
    read(args...);
}

template <typename T>
void write(T arg) {
    T x = arg;
    if (x < 0) {
        putchar('-');
        x = -x;
    }
    if (x > 9) {
        write(x / 10);
    }
    putchar(x % 10 + '0');
}

template <typename T, typename... Ts>
void write(T arg, Ts... args) {
    write(arg);
    if (sizeof...(args) != 0) {
        putchar(' ');
        write(args...);
    }
}

const long long mod = 1e9 + 7;
const int N = 250;
int n, k, f[N][N][N];
char s[N], t[N];

int main() {
    read(n, k);
    scanf("%s", s);
    scanf("%s", t);

    // Applying performance checks before the main computation
    check_high_k_invariant(n, k);
    check_large_nested_loops_invariant(n, k);
    check_max_function_usage_invariant(n, k);

    memset((f), -0x3f3f3f3f, sizeof(f));
    f[0][0][0] = 0;

    for (register int i = 0; i < n; ++i) {
        for (register int j = 0; j <= k; ++j) {
            for (register int l = 0; l <= n; ++l) {
                if (f[i][j][l] == -0x3f3f3f3f) {
                    continue;
                }
                int e0 = s[i] == t[0];
                int e1 = s[i] == t[1];
                int e10 = t[0] == t[1];
                f[i + 1][j][l + e0] =
                    max(f[i + 1][j][l + e0], f[i][j][l] + (e1 ? l : 0));
                if (j < k) {
                    f[i + 1][j + 1][l + 1] =
                        max(f[i + 1][j + 1][l + 1], f[i][j][l] + (e10 ? l : 0));
                    f[i + 1][j + 1][l + e10] =
                        max(f[i + 1][j + 1][l + e10], f[i][j][l] + l);
                }
            }
        }
    }

    int ans = 0;
    for (register int i = 0; i <= k; ++i) {
        for (register int j = 0; j <= n; ++j) {
            ans = max(ans, f[n][i][j]);
        }
    }
    write(ans), putchar('\n');
    return 0;
}
```

### Explanations for Checker Placement:

- **Check Placement:** The checks are placed after reading input values but before entering the main computation loops. This ensures they do not degrade performance by being inside tight loops.
- **Functionality:** The checks are designed to catch conditions known to cause performance bottlenecks, providing warnings and aborting execution when such conditions are met. This helps in identifying problematic inputs early in the computation process.

