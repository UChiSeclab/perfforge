system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is the length of the string.

You are given a string s and a string t, both consisting only of lowercase Latin letters. It is guaranteed that t can be obtained from s by removing some (possibly, zero) number of characters (not necessary contiguous) from s without changing order of remaining characters (in other words, it is guaranteed that t is a subsequence of s).

For example, the strings "test", "tst", "tt", "et" and "" are subsequences of the string "test". But the strings "tset", "se", "contest" are not subsequences of the string "test".

You want to remove some substring (contiguous subsequence) from s of maximum possible length such that after removing this substring t will remain a subsequence of s.

If you want to remove the substring s[l;r] then the string s will be transformed to s_1 s_2 ... s_{l-1} s_{r+1} s_{r+2} ... s_{|s|-1} s_{|s|} (where |s| is the length of s).

Your task is to find the maximum possible length of the substring you can remove so that t is still a subsequence of s.

Input

The first line of the input contains one string s consisting of at least 1 and at most 200 lowercase Latin letters.

The second line of the input contains one string t consisting of at least 1 and at most 200 lowercase Latin letters.

It is guaranteed that t is a subsequence of s.

Output

Print one integer — the maximum possible length of the substring you can remove so that t is still a subsequence of s.

Examples

Input


bbaba
bb


Output


3


Input


baaba
ab


Output


2


Input


abcde
abcde


Output


0


Input


asdfasdf
fasd


Output


3

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long int expo(long long int n) {
  long long int t;
  if (n == 0)
    return 1;
  else if (n == 1)
    return 2;
  t = expo(n / 2);
  if (n % 2) {
    return t * t * 2;
  } else
    return t * t;
}
long long int exponentMod(long long int A, long long int B, long long int C) {
  if (A == 0) return 0;
  if (B == 0) return 1;
  long long int y;
  if (B % 2 == 0) {
    y = exponentMod(A, B / 2, C);
    y = (y * y) % C;
  } else {
    y = A % C;
    y = (y * exponentMod(A, B - 1, C) % C) % C;
  }
  return (long long int)((y + C) % C);
}
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  ;
  long long int q = 1;
  while (q--) {
    string s, t;
    cin >> s >> t;
    long long int mx = 0;
    for (int i = 0; i < s.length(); i++) {
      for (int j = 0; j < s.length(); j++) {
        long long int pos = 0;
        for (int p = 0; p < s.length(); p++) {
          if (i <= p && p <= j) continue;
          if (pos <= t.length() && s[p] == t[pos]) pos++;
        }
        if (pos == t.length()) {
          mx = max(mx, (long long int)j - i + 1);
        }
      }
    }
    cout << mx << "\n";
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

mejfmlmclpqwopscpxxtkamtodhogweqtpigxgsbmsdvhcvyenqwsqpuxegugrgkopjwulnuqbqwqsarnymoursenotgeakbslepaacvwiydnqgnetsjaazblnriaqcmolxplvqtfdqtcmwduwrnmemtvlkgbbzkvaplprscuaqfvjlftkblwddcgwsqsfecoqibpncs
m


(G.2) Fast Input

m
m


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long int expo(long long int n) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  long long int t; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  if (n == 0) /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
    return 1; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  else if (n == 1) /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    return 2; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  t = expo(n / 2); /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  if (n % 2) { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    return t * t * 2; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  } else /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    return t * t; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
long long int exponentMod(long long int A, long long int B, long long int C) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  if (A == 0) return 0; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  if (B == 0) return 1; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  long long int y; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  if (B % 2 == 0) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    y = exponentMod(A, B / 2, C); /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    y = (y * y) % C; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    y = A % C; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    y = (y * exponentMod(A, B - 1, C) % C) % C; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  return (long long int)((y + C) % C); /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  long long int q = 1; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  while (q--) { /* line 34 slow_hit_count: 2, fast_hit_count: 2 */
    string s, t; /* line 35 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> s >> t; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
    long long int mx = 0; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i < s.length(); i++) { /* line 38 slow_hit_count: 201, fast_hit_count: 2 */
      for (int j = 0; j < s.length(); j++) { /* line 39 slow_hit_count: 40200, fast_hit_count: 2 */
        long long int pos = 0; /* line 40 slow_hit_count: 40000, fast_hit_count: 1 */
        for (int p = 0; p < s.length(); p++) { /* line 41 slow_hit_count: 8040000, fast_hit_count: 2 */
          if (i <= p && p <= j) continue; /* line 42 slow_hit_count: 8000000, fast_hit_count: 1 */
          if (pos <= t.length() && s[p] == t[pos]) pos++; /* line 43 slow_hit_count: 6646600, fast_hit_count: 0 */
        } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
        if (pos == t.length()) { /* line 45 slow_hit_count: 40000, fast_hit_count: 1 */
          mx = max(mx, (long long int)j - i + 1); /* line 46 slow_hit_count: 39950, fast_hit_count: 0 */
        } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    cout << mx << "\n"; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 52 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the provided C code for performance bottlenecks, we need to focus on the difference in execution between the slow and fast inputs. Based on the hit count information, we can diagnose the performance issues and derive conditions that lead to slower execution.

### Phase 1: Identify Expensive or Inefficient Code Segments
1. **Loop Analysis**:
   - The nested loops starting at lines 38 and 39 are executed significantly more times for the slow input compared to the fast input.
   - Line 41, which contains another loop, is hit extensively (8,040,000 times) for the slow input, indicating a potential performance bottleneck.

2. **Conditional Logic Inside Loops**:
   - Line 42 checks a condition and continues the loop if certain conditions are met. This line is hit 8,000,000 times for the slow input, showing heavy usage.
   - Line 43 updates the `pos` variable, which directly affects how long inner loops continue execution.

### Phase 2: Derive Performance-Characterizing Invariants
1. **Invariant: High Nested Loop Iterations**  
   Natural language: "When both strings `s` and `t` are long, especially when `s` is close to its maximum length (200), and `t` is short, the nested loops perform excessive iterations over the characters, leading to slow execution."
   
2. **Invariant: Excessive Continuation in Inner Loops**  
   Natural language: "If the conditions in the loop that skip iterations (e.g., `continue`) are frequently met, particularly when `s` is considerably longer than `t`, the program may perform redundant checks, slowing down execution."

3. **Invariant: Inefficient Subsequence Checking**  
   Natural language: "The inefficiency arises when checking subsequences if the structure of `s` leads to frequent matches and skips, causing the inner loop to iterate unnecessarily across nearly the entire length of `s` for most iterations."

These invariants focus on the general conditions that lead to performance degradation, rather than relying on specific input values. They abstract out the root causes like excessive loop iterations and inefficient checks, which align with the constraints given (e.g., `n <= 200`). By addressing these inefficiencies, you can guide optimizations to reduce computational overhead and enhance performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is the length of the string.

You are given a string s and a string t, both consisting only of lowercase Latin letters. It is guaranteed that t can be obtained from s by removing some (possibly, zero) number of characters (not necessary contiguous) from s without changing order of remaining characters (in other words, it is guaranteed that t is a subsequence of s).

For example, the strings "test", "tst", "tt", "et" and "" are subsequences of the string "test". But the strings "tset", "se", "contest" are not subsequences of the string "test".

You want to remove some substring (contiguous subsequence) from s of maximum possible length such that after removing this substring t will remain a subsequence of s.

If you want to remove the substring s[l;r] then the string s will be transformed to s_1 s_2 ... s_{l-1} s_{r+1} s_{r+2} ... s_{|s|-1} s_{|s|} (where |s| is the length of s).

Your task is to find the maximum possible length of the substring you can remove so that t is still a subsequence of s.

Input

The first line of the input contains one string s consisting of at least 1 and at most 200 lowercase Latin letters.

The second line of the input contains one string t consisting of at least 1 and at most 200 lowercase Latin letters.

It is guaranteed that t is a subsequence of s.

Output

Print one integer — the maximum possible length of the substring you can remove so that t is still a subsequence of s.

Examples

Input


bbaba
bb


Output


3


Input


baaba
ab


Output


2


Input


abcde
abcde


Output


0


Input


asdfasdf
fasd


Output


3

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Here are the C++ snippets implementing the performance-characterizing invariants:

1. **High Nested Loop Iterations**

```cpp
void check_high_nested_iterations(size_t s_length, size_t t_length) {
    if (s_length >= 200 && t_length <= 1) {
        cerr << "Warning: Performance bottleneck triggered - excessive nested loop iterations with long s and short t!" << endl;
        abort();
    }
}
```

2. **Excessive Continuation in Inner Loops**

```cpp
void check_excessive_continuation(size_t s_length, size_t t_length) {
    if (s_length > 100 && t_length < s_length / 2) {
        cerr << "Warning: Performance bottleneck triggered - frequent continuation in inner loops due to structure of s!" << endl;
        abort();
    }
}
```

3. **Inefficient Subsequence Checking**

```cpp
void check_inefficient_subsequence(size_t s_length, size_t t_length) {
    if (s_length >= 150 && t_length <= 10) {
        cerr << "Warning: Performance bottleneck triggered - inefficient subsequence checking with large s and small t!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Original Program

Here is the updated C++ program with the performance checks integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Check for excessive nested loop iterations
void check_high_nested_iterations(size_t s_length, size_t t_length) {
    if (s_length >= 200 && t_length <= 1) {
        cerr << "Warning: Performance bottleneck triggered - excessive nested loop iterations with long s and short t!" << endl;
        abort();
    }
}

// Check for excessive continuation in inner loops
void check_excessive_continuation(size_t s_length, size_t t_length) {
    if (s_length > 100 && t_length < s_length / 2) {
        cerr << "Warning: Performance bottleneck triggered - frequent continuation in inner loops due to structure of s!" << endl;
        abort();
    }
}

// Check for inefficient subsequence checking
void check_inefficient_subsequence(size_t s_length, size_t t_length) {
    if (s_length >= 150 && t_length <= 10) {
        cerr << "Warning: Performance bottleneck triggered - inefficient subsequence checking with large s and small t!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    
    long long int q = 1;
    while (q--) {
        string s, t;
        cin >> s >> t;

        // Invoke performance checks after reading inputs
        check_high_nested_iterations(s.length(), t.length());
        check_excessive_continuation(s.length(), t.length());
        check_inefficient_subsequence(s.length(), t.length());
        
        long long int mx = 0;
        for (int i = 0; i < s.length(); i++) {
            for (int j = 0; j < s.length(); j++) {
                long long int pos = 0;
                for (int p = 0; p < s.length(); p++) {
                    if (i <= p && p <= j) continue;
                    if (pos <= t.length() && s[p] == t[pos]) pos++;
                }
                if (pos == t.length()) {
                    mx = max(mx, (long long int)j - i + 1);
                }
            }
        }
        cout << mx << "\n";
    }
}
```

**Comments on the Integration**:
- The checks are placed right after input reading, ensuring they do not add overhead within any loops.
- Each checker function is designed to abort execution if a performance bottleneck condition is met, which helps detect slow performance triggers during testing or fuzzing.

