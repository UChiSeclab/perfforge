system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is the length of the string.

You are given a string s and a string t, both consisting only of lowercase Latin letters. It is guaranteed that t can be obtained from s by removing some (possibly, zero) number of characters (not necessary contiguous) from s without changing order of remaining characters (in other words, it is guaranteed that t is a subsequence of s).

For example, the strings "test", "tst", "tt", "et" and "" are subsequences of the string "test". But the strings "tset", "se", "contest" are not subsequences of the string "test".

You want to remove some substring (contiguous subsequence) from s of maximum possible length such that after removing this substring t will remain a subsequence of s.

If you want to remove the substring s[l;r] then the string s will be transformed to s_1 s_2 ... s_{l-1} s_{r+1} s_{r+2} ... s_{|s|-1} s_{|s|} (where |s| is the length of s).

Your task is to find the maximum possible length of the substring you can remove so that t is still a subsequence of s.

Input

The first line of the input contains one string s consisting of at least 1 and at most 200 lowercase Latin letters.

The second line of the input contains one string t consisting of at least 1 and at most 200 lowercase Latin letters.

It is guaranteed that t is a subsequence of s.

Output

Print one integer — the maximum possible length of the substring you can remove so that t is still a subsequence of s.

Examples

Input


bbaba
bb


Output


3


Input


baaba
ab


Output


2


Input


abcde
abcde


Output


0


Input


asdfasdf
fasd


Output


3

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
bool check(string txt, string pat) {
  long long int n = txt.length(), m = pat.length();
  long long int i = 0, j = 0;
  while (i < n && j < m) {
    if (txt[i] == pat[j]) {
      j++;
    }
    i++;
  }
  if (j < m) return false;
  return true;
}
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  string txt, pat;
  cin >> txt >> pat;
  long long int ans = 0;
  for (long long int(i) = (0); (i) < (txt.length()); (i)++) {
    string pre = txt.substr(0, i);
    for (long long int len = 1; len <= txt.length() - i; len++) {
      string sub = txt.substr(i, len);
      string suff = txt.substr(i + len, txt.length() - i - len);
      string tmp = pre + suff;
      if (tmp.length() >= pat.length()) {
        if (check(tmp, pat)) {
          ans = max(ans, len);
        }
      }
    }
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

scnpbiqocefsqswgcddwlbktfljvfqaucsrplpavkzbbgkyvtmemnrwudwmctqdftqvlpxlomcqairnlbzaajstengqndyiwvcaapelsbkaegtonesruomynrasqwqbquoluwjpokgrgugexupqswqnelvchvdsmbsgxgiptqewgohdotmaktxxocspowqplcmlmfjem
m


(G.2) Fast Input

m
m


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
bool check(string txt, string pat) { /* line 3 slow_hit_count: 20099, fast_hit_count: 0 */
  long long int n = txt.length(), m = pat.length(); /* line 4 slow_hit_count: 20099, fast_hit_count: 0 */
  long long int i = 0, j = 0; /* line 5 slow_hit_count: 20099, fast_hit_count: 0 */
  while (i < n && j < m) { /* line 6 slow_hit_count: 931449, fast_hit_count: 0 */
    if (txt[i] == pat[j]) { /* line 7 slow_hit_count: 911350, fast_hit_count: 0 */
      j++; /* line 8 slow_hit_count: 20050, fast_hit_count: 0 */
    } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    i++; /* line 10 slow_hit_count: 911350, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  if (j < m) return false; /* line 12 slow_hit_count: 20099, fast_hit_count: 0 */
  return true; /* line 13 slow_hit_count: 20050, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  string txt, pat; /* line 19 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> txt >> pat; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  long long int ans = 0; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long int(i) = (0); (i) < (txt.length()); (i)++) { /* line 22 slow_hit_count: 201, fast_hit_count: 2 */
    string pre = txt.substr(0, i); /* line 23 slow_hit_count: 400, fast_hit_count: 2 */
    for (long long int len = 1; len <= txt.length() - i; len++) { /* line 24 slow_hit_count: 20300, fast_hit_count: 2 */
      string sub = txt.substr(i, len); /* line 25 slow_hit_count: 40200, fast_hit_count: 2 */
      string suff = txt.substr(i + len, txt.length() - i - len); /* line 26 slow_hit_count: 40200, fast_hit_count: 2 */
      string tmp = pre + suff; /* line 27 slow_hit_count: 40200, fast_hit_count: 2 */
      if (tmp.length() >= pat.length()) { /* line 28 slow_hit_count: 20100, fast_hit_count: 1 */
        if (check(tmp, pat)) { /* line 29 slow_hit_count: 20099, fast_hit_count: 0 */
          ans = max(ans, len); /* line 30 slow_hit_count: 20050, fast_hit_count: 0 */
        } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze and derive performance-characterizing invariants for the given C program, let's break down the tasks into two phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The major difference between the fast and slow runs is evident in the line-level hit counts. Specifically, the slow input results in the `check` function being called 20,099 times, while it isn't invoked for the fast input at all.

2. **Identify Lines with Significant Hits:**
   - The lines within the `check` function (lines 3-13) have significantly higher hit counts during the slow input run. In particular, the while loop in the `check` function (line 6) and the associated operations (lines 7, 8, and 10) are executed extensively.

3. **Interactions with Data Structures and Control Constructs:**
   - The outer loop (line 22) iterates over each character in the `txt` string, and the inner loop (line 24) attempts to form every possible substring starting from each character. This results in a quadratic number of checks relative to the length of `txt`.
   - The `check` function verifies whether a modified version of `txt` still meets the subsequence constraints of `pat`, which contributes to extensive iterations over `txt`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following performance-characterizing invariants can be formulated in natural language:

1. **Invariant 1: Heavy Substring Generation**
   - **Description:** "If the length of the string `s` is relatively large and the number of possible substrings is excessively high, the program may slow down significantly due to repeated calls to the substring generation and checking functions."
   - **Contextual Insight:** The performance bottleneck occurs when `s` is long, leading to numerous iterations for generating substrings and checking them, especially when `t` is very short and appears frequently.

2. **Invariant 2: Extensive Subsequence Checking**
   - **Description:** "When the target string `t` is much shorter than `s`, and `t` can fit in many positions within `s` after removing a substring, the extensive checks to confirm `t` as a subsequence can degrade performance."
   - **Contextual Insight:** Since `t` is short and a subsequence of `s`, many substrings of `s` will still allow `t` to be a subsequence, leading to a large number of checks.

3. **Invariant 3: Quadratic Complexity in String Length**
   - **Description:** "The algorithm exhibits quadratic complexity with respect to the length of `s`, particularly when iterating to form all possible substrings. This results in performance issues when `s` approaches the maximum length."
   - **Contextual Insight:** The nested loops for generating and checking substrings contribute to the quadratic behavior, which is exacerbated when `s` is near its maximum allowed length.

These invariants help in understanding the conditions under which the given program experiences a slowdown, enabling targeted optimizations or redesigns to improve performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is the length of the string.

You are given a string s and a string t, both consisting only of lowercase Latin letters. It is guaranteed that t can be obtained from s by removing some (possibly, zero) number of characters (not necessary contiguous) from s without changing order of remaining characters (in other words, it is guaranteed that t is a subsequence of s).

For example, the strings "test", "tst", "tt", "et" and "" are subsequences of the string "test". But the strings "tset", "se", "contest" are not subsequences of the string "test".

You want to remove some substring (contiguous subsequence) from s of maximum possible length such that after removing this substring t will remain a subsequence of s.

If you want to remove the substring s[l;r] then the string s will be transformed to s_1 s_2 ... s_{l-1} s_{r+1} s_{r+2} ... s_{|s|-1} s_{|s|} (where |s| is the length of s).

Your task is to find the maximum possible length of the substring you can remove so that t is still a subsequence of s.

Input

The first line of the input contains one string s consisting of at least 1 and at most 200 lowercase Latin letters.

The second line of the input contains one string t consisting of at least 1 and at most 200 lowercase Latin letters.

It is guaranteed that t is a subsequence of s.

Output

Print one integer — the maximum possible length of the substring you can remove so that t is still a subsequence of s.

Examples

Input


bbaba
bb


Output


3


Input


baaba
ab


Output


2


Input


abcde
abcde


Output


0


Input


asdfasdf
fasd


Output


3

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, let's implement the corresponding C++ checker code:

#### Invariant 1: Heavy Substring Generation

```cpp
void check_heavy_substring_invariant(int txtLength, int patLength) {
    // If the length of txt is large compared to pat, leading to many substrings
    if (txtLength > 150 && patLength < 5) { // Thresholds chosen based on constraints
        cerr << "Warning: Heavy substring generation detected!" << endl;
        abort();
    }
}
```

#### Invariant 2: Extensive Subsequence Checking

```cpp
void check_extensive_subsequence_invariant(int txtLength, int patLength) {
    // If txt is significantly longer than pat, leading to extensive subsequence checks
    if (txtLength > 150 && patLength < 5) { // Thresholds chosen based on constraints
        cerr << "Warning: Extensive subsequence checking detected!" << endl;
        abort();
    }
}
```

#### Invariant 3: Quadratic Complexity in String Length

```cpp
void check_quadratic_complexity_invariant(int txtLength) {
    // If txt is near the maximum allowed length, leading to quadratic behavior
    if (txtLength > 180) { // Close to the upper constraint of 200
        cerr << "Warning: Quadratic complexity slowdown detected!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Now let's integrate these checker functions into the C++ solution provided to detect the performance bottlenecks effectively. 

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions based on the performance invariants
void check_heavy_substring_invariant(int txtLength, int patLength) {
    if (txtLength > 150 && patLength < 5) {
        cerr << "Warning: Heavy substring generation detected!" << endl;
        abort();
    }
}

void check_extensive_subsequence_invariant(int txtLength, int patLength) {
    if (txtLength > 150 && patLength < 5) {
        cerr << "Warning: Extensive subsequence checking detected!" << endl;
        abort();
    }
}

void check_quadratic_complexity_invariant(int txtLength) {
    if (txtLength > 180) {
        cerr << "Warning: Quadratic complexity slowdown detected!" << endl;
        abort();
    }
}

bool check(string txt, string pat) {
    long long int n = txt.length(), m = pat.length();
    long long int i = 0, j = 0;
    while (i < n && j < m) {
        if (txt[i] == pat[j]) {
            j++;
        }
        i++;
    }
    if (j < m) return false;
    return true;
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    
    string txt, pat;
    cin >> txt >> pat;
    
    // Place checks after reading inputs
    check_heavy_substring_invariant(txt.length(), pat.length());
    check_extensive_subsequence_invariant(txt.length(), pat.length());
    check_quadratic_complexity_invariant(txt.length());
    
    long long int ans = 0;
    for (long long int(i) = (0); (i) < (txt.length()); (i)++) {
        string pre = txt.substr(0, i);
        for (long long int len = 1; len <= txt.length() - i; len++) {
            string sub = txt.substr(i, len);
            string suff = txt.substr(i + len, txt.length() - i - len);
            string tmp = pre + suff;
            if (tmp.length() >= pat.length()) {
                if (check(tmp, pat)) {
                    ans = max(ans, len);
                }
            }
        }
    }
    cout << ans;
    return 0;
}
```

### Explanation

- **Checker Functions:** The checker functions are designed to detect potential performance bottlenecks based on the characteristics of the input strings and their processing within the algorithm.
- **Effective Placement:** The checks are placed immediately after reading the inputs. This ensures that we detect potential performance issues without adding overhead within the tight loops of the algorithm.
- **Threshold Values:** The thresholds are chosen based on the constraints provided (`n <= 200`) and the nature of the problem, serving as preventive measures against known slow paths.

