system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is the length of the string.

You are given a string s and a string t, both consisting only of lowercase Latin letters. It is guaranteed that t can be obtained from s by removing some (possibly, zero) number of characters (not necessary contiguous) from s without changing order of remaining characters (in other words, it is guaranteed that t is a subsequence of s).

For example, the strings "test", "tst", "tt", "et" and "" are subsequences of the string "test". But the strings "tset", "se", "contest" are not subsequences of the string "test".

You want to remove some substring (contiguous subsequence) from s of maximum possible length such that after removing this substring t will remain a subsequence of s.

If you want to remove the substring s[l;r] then the string s will be transformed to s_1 s_2 ... s_{l-1} s_{r+1} s_{r+2} ... s_{|s|-1} s_{|s|} (where |s| is the length of s).

Your task is to find the maximum possible length of the substring you can remove so that t is still a subsequence of s.

Input

The first line of the input contains one string s consisting of at least 1 and at most 200 lowercase Latin letters.

The second line of the input contains one string t consisting of at least 1 and at most 200 lowercase Latin letters.

It is guaranteed that t is a subsequence of s.

Output

Print one integer — the maximum possible length of the substring you can remove so that t is still a subsequence of s.

Examples

Input


bbaba
bb


Output


3


Input


baaba
ab


Output


2


Input


abcde
abcde


Output


0


Input


asdfasdf
fasd


Output


3

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 2e5 + 5;
const int maxm = 5000 + 5;
const int MOD = 1e9 + 7;
char s[maxn], t[maxn], ss[maxn];
int next_[10010];
int ans;
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cin >> s >> t;
  int len1 = strlen(s), len2 = strlen(t);
  for (int i = (0); i <= (len1 - 1); i++) {
    for (int j = (i); j <= (len1 - 1); j++) {
      int cur = 0;
      for (int k = (0); k <= (len1 - 1); k++) {
        if (k < i || k > j) ss[cur++] = s[k];
      }
      int l = 0, r = 0;
      while (l < cur && r < len2) {
        if (t[r] == ss[l]) r++;
        l++;
      }
      if (r == len2) {
        ans = max(ans, j - i + 1);
      }
    }
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

scnpbiqocefsqswgcddwlbktfljvfqaucsrplpavkzbbgkyvtmemnrwudwmctqdftqvlpxlomcqairnlbzaajstengqndyiwvcaapelsbkaegtonesruomynrasqwqbquoluwjpokgrgugexupqswqnelvchvdsmbsgxgiptqewgohdotmaktxxocspowqplcmlmfjem
m


(G.2) Fast Input

m
m


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 2e5 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int maxm = 5000 + 5; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 1e9 + 7; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
char s[maxn], t[maxn], ss[maxn]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int next_[10010]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int ans; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> s >> t; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  int len1 = strlen(s), len2 = strlen(t); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = (0); i <= (len1 - 1); i++) { /* line 15 slow_hit_count: 201, fast_hit_count: 2 */
    for (int j = (i); j <= (len1 - 1); j++) { /* line 16 slow_hit_count: 20300, fast_hit_count: 2 */
      int cur = 0; /* line 17 slow_hit_count: 20100, fast_hit_count: 1 */
      for (int k = (0); k <= (len1 - 1); k++) { /* line 18 slow_hit_count: 4040100, fast_hit_count: 2 */
        if (k < i || k > j) ss[cur++] = s[k]; /* line 19 slow_hit_count: 4020000, fast_hit_count: 1 */
      } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
      int l = 0, r = 0; /* line 21 slow_hit_count: 20100, fast_hit_count: 1 */
      while (l < cur && r < len2) { /* line 22 slow_hit_count: 931450, fast_hit_count: 1 */
        if (t[r] == ss[l]) r++; /* line 23 slow_hit_count: 911350, fast_hit_count: 0 */
        l++; /* line 24 slow_hit_count: 911350, fast_hit_count: 0 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      if (r == len2) { /* line 26 slow_hit_count: 20100, fast_hit_count: 1 */
        ans = max(ans, j - i + 1); /* line 27 slow_hit_count: 20050, fast_hit_count: 0 */
      } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

By analyzing the hit counts, we can identify the following potential performance issues in the code:

1. **Nested Loops (Lines 15 and 16):**
   - The outer loop on line 15 iterates over each character of `s`, and the inner loop on line 16 iterates from the current character to the end of the string `s`. This results in a quadratic number of iterations with respect to the length of `s`.
   - For the slow input, `line 15` is hit 201 times and `line 16` is hit 20,300 times, indicating that these loops are executed frequently and are potentially causing the slowdown.

2. **String Construction (Line 19):**
   - The loop on line 18 goes over the entire string `s` to construct a new string `ss` by excluding the substring from index `i` to `j`. This reconstruction happens for every iteration of `j` within the nested loops, resulting in a significant computational overhead.

3. **While Loop for Subsequence Check (Lines 22-24):**
   - This loop checks if `t` is a subsequence of the newly constructed string `ss`. For the slow input, this loop's body (line 22) has a hit count of 931,450, reflecting the repeated subsequence checks that contribute to the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, we can formulate the following performance-characterizing invariants:

1. **Invariant 1: Quadratic Nested Loops**
   - **Natural Language Statement:** "If the length of `s` approaches the upper constraint, the quadratic nested loops for selecting subranges of `s` can lead to a significant performance hit."
   - This invariant is relevant because the outer and inner loops iterate over the length of `s`, leading to `O(n^2)` operations, where `n` is the length of `s`.

2. **Invariant 2: String Reconstruction Overhead**
   - **Natural Language Statement:** "Frequent reconstruction of the string `ss` occurs when a large substring needs to be skipped repeatedly, leading to inefficiencies."
   - The string `ss` is rebuilt for every combination of `i` and `j`, which becomes costly as the length of `s` increases.

3. **Invariant 3: Subsequence Verification**
   - **Natural Language Statement:** "The subsequence verification loop incurs a high computational cost when many characters need to be checked in `s` against `t` across multiple iterations."
   - This invariant highlights the expensive nature of checking subsequence conditions within the nested loops.

These invariants identify the main scenarios leading to performance bottlenecks, especially when the input size is near the constraint limit (200 characters in this case). They focus on the structural aspects of the problem and the iterative nature of the solution that exacerbate the slowdown.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is the length of the string.

You are given a string s and a string t, both consisting only of lowercase Latin letters. It is guaranteed that t can be obtained from s by removing some (possibly, zero) number of characters (not necessary contiguous) from s without changing order of remaining characters (in other words, it is guaranteed that t is a subsequence of s).

For example, the strings "test", "tst", "tt", "et" and "" are subsequences of the string "test". But the strings "tset", "se", "contest" are not subsequences of the string "test".

You want to remove some substring (contiguous subsequence) from s of maximum possible length such that after removing this substring t will remain a subsequence of s.

If you want to remove the substring s[l;r] then the string s will be transformed to s_1 s_2 ... s_{l-1} s_{r+1} s_{r+2} ... s_{|s|-1} s_{|s|} (where |s| is the length of s).

Your task is to find the maximum possible length of the substring you can remove so that t is still a subsequence of s.

Input

The first line of the input contains one string s consisting of at least 1 and at most 200 lowercase Latin letters.

The second line of the input contains one string t consisting of at least 1 and at most 200 lowercase Latin letters.

It is guaranteed that t is a subsequence of s.

Output

Print one integer — the maximum possible length of the substring you can remove so that t is still a subsequence of s.

Examples

Input


bbaba
bb


Output


3


Input


baaba
ab


Output


2


Input


abcde
abcde


Output


0


Input


asdfasdf
fasd


Output


3

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Here, I'll translate each of the previously derived performance-characterizing invariants into C++ checks.

1. **Invariant 1: Quadratic Nested Loops**
   - The loops iterating over the length of `s` can become a bottleneck when `s` approaches its upper length constraint.
   
   ```cpp
   void check_nested_loop_invariant(int len1) {
       if (len1 > 150) { // Threshold chosen based on potential slowdown near max constraint
           cerr << "Warning: Performance bottleneck due to nested loops with large input size!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: String Reconstruction Overhead**
   - Frequent reconstruction of `ss` can lead to inefficiencies.
   
   ```cpp
   void check_string_reconstruction_invariant(int len1, int len2) {
       if (len1 > 150 && len2 < 10) { // Thresholds emphasizing inefficient reconstruction
           cerr << "Warning: Performance bottleneck due to frequent string reconstruction!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Subsequence Verification**
   - The subsequence checking loop can become costly when executed frequently for large strings.
   
   ```cpp
   void check_subsequence_verification_invariant(int len1, int len2) {
       if (len1 * len2 > 10000) { // Product threshold for indicating high computational cost
           cerr << "Warning: Performance bottleneck due to exhaustive subsequence verification!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original Program

Now, I'll integrate these checks into the program at suitable places to ensure they do not degrade performance further.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 2e5 + 5;
const int maxm = 5000 + 5;
const int MOD = 1e9 + 7;
char s[maxn], t[maxn], ss[maxn];
int next_[10010];
int ans;

// Implementation of invariant checks
void check_nested_loop_invariant(int len1) {
    if (len1 > 150) {
        cerr << "Warning: Performance bottleneck due to nested loops with large input size!" << endl;
        abort();
    }
}

void check_string_reconstruction_invariant(int len1, int len2) {
    if (len1 > 150 && len2 < 10) {
        cerr << "Warning: Performance bottleneck due to frequent string reconstruction!" << endl;
        abort();
    }
}

void check_subsequence_verification_invariant(int len1, int len2) {
    if (len1 * len2 > 10000) {
        cerr << "Warning: Performance bottleneck due to exhaustive subsequence verification!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> s >> t;
    int len1 = strlen(s), len2 = strlen(t);

    // Insert invariant checks
    check_nested_loop_invariant(len1);
    check_string_reconstruction_invariant(len1, len2);
    check_subsequence_verification_invariant(len1, len2);

    for (int i = 0; i <= len1 - 1; i++) {
        for (int j = i; j <= len1 - 1; j++) {
            int cur = 0;
            for (int k = 0; k <= len1 - 1; k++) {
                if (k < i || k > j) ss[cur++] = s[k];
            }
            int l = 0, r = 0;
            while (l < cur && r < len2) {
                if (t[r] == ss[l]) r++;
                l++;
            }
            if (r == len2) {
                ans = max(ans, j - i + 1);
            }
        }
    }
    cout << ans;
    return 0;
}
```

**Explanation:**
- **Check Placement:** The checks are placed after reading the input and calculating lengths, which is before entering the loops. This ensures that they alert potential bottlenecks without adding overhead to the actual loop operations.
- **Thresholds:** The thresholds in the checks are selected to provide early warnings when `s` and `t` sizes are near limits that could trigger slowdowns, given the problem constraints.

