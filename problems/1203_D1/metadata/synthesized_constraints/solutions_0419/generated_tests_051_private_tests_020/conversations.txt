system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is the length of the string.

You are given a string s and a string t, both consisting only of lowercase Latin letters. It is guaranteed that t can be obtained from s by removing some (possibly, zero) number of characters (not necessary contiguous) from s without changing order of remaining characters (in other words, it is guaranteed that t is a subsequence of s).

For example, the strings "test", "tst", "tt", "et" and "" are subsequences of the string "test". But the strings "tset", "se", "contest" are not subsequences of the string "test".

You want to remove some substring (contiguous subsequence) from s of maximum possible length such that after removing this substring t will remain a subsequence of s.

If you want to remove the substring s[l;r] then the string s will be transformed to s_1 s_2 ... s_{l-1} s_{r+1} s_{r+2} ... s_{|s|-1} s_{|s|} (where |s| is the length of s).

Your task is to find the maximum possible length of the substring you can remove so that t is still a subsequence of s.

Input

The first line of the input contains one string s consisting of at least 1 and at most 200 lowercase Latin letters.

The second line of the input contains one string t consisting of at least 1 and at most 200 lowercase Latin letters.

It is guaranteed that t is a subsequence of s.

Output

Print one integer — the maximum possible length of the substring you can remove so that t is still a subsequence of s.

Examples

Input


bbaba
bb


Output


3


Input


baaba
ab


Output


2


Input


abcde
abcde


Output


0


Input


asdfasdf
fasd


Output


3

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
template <typename T>
T mymax(T x, T y) {
  return (x > y ? x : y);
}
using namespace std;
const int N = 1000005;
int c = 1;
void solve() {
  string s, t;
  cin >> s >> t;
  int n1 = s.size(), n2 = t.size();
  auto has_subseq = [&](string cs) {
    int j = 0;
    for (int i = 0; i < (int)cs.size(); i++) {
      if (cs[i] == t[j]) j++;
    }
    return (j == n2);
  };
  int ans = 0;
  for (int i = 0; i < n1; i++) {
    for (int j = i; j < n1; j++) {
      string temp = "";
      for (int k = 0; k < i; k++) {
        temp += s[k];
      }
      for (int k = j + 1; k < n1; k++) {
        temp += s[k];
      }
      if (has_subseq(temp)) {
        ans = max(ans, j - i + 1);
      } else
        break;
    }
  }
  printf("%d\n", ans);
}
int main() {
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

scnpbiqocefsqswgcddwlbktfljvfqaucsrplpavkzbbgkyvtmemnrwudwmctqdftqvlpxlomcqairnlbzaajstengqndyiwvcaapelsbkaegtonesruomynrasqwqbquoluwjpokgrgugexupqswqnelvchvdsmbsgxgiptqewgohdotmaktxxocspowqplcmlmfjem
m


(G.2) Fast Input

m
m


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
T mymax(T x, T y) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  return (x > y ? x : y); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1000005; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int c = 1; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  string s, t; /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> s >> t; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  int n1 = s.size(), n2 = t.size(); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  auto has_subseq = [&](string cs) { /* line 13 slow_hit_count: 20100, fast_hit_count: 1 */
    int j = 0; /* line 14 slow_hit_count: 20100, fast_hit_count: 1 */
    for (int i = 0; i < (int)cs.size(); i++) { /* line 15 slow_hit_count: 2686700, fast_hit_count: 1 */
      if (cs[i] == t[j]) j++; /* line 16 slow_hit_count: 2666600, fast_hit_count: 0 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    return (j == n2); /* line 18 slow_hit_count: 20100, fast_hit_count: 1 */
  }; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n1; i++) { /* line 21 slow_hit_count: 201, fast_hit_count: 2 */
    for (int j = i; j < n1; j++) { /* line 22 slow_hit_count: 20250, fast_hit_count: 1 */
      string temp = ""; /* line 23 slow_hit_count: 20100, fast_hit_count: 1 */
      for (int k = 0; k < i; k++) { /* line 24 slow_hit_count: 1353400, fast_hit_count: 1 */
        temp += s[k]; /* line 25 slow_hit_count: 1333300, fast_hit_count: 0 */
      } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      for (int k = j + 1; k < n1; k++) { /* line 27 slow_hit_count: 1353400, fast_hit_count: 1 */
        temp += s[k]; /* line 28 slow_hit_count: 1333300, fast_hit_count: 0 */
      } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      if (has_subseq(temp)) { /* line 30 slow_hit_count: 20100, fast_hit_count: 1 */
        ans = max(ans, j - i + 1); /* line 31 slow_hit_count: 20050, fast_hit_count: 0 */
      } else /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 33 slow_hit_count: 50, fast_hit_count: 1 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Let's analyze the given C program to identify potential performance bottlenecks and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-level Hit Counts:**
   - The `has_subseq` function is called significantly more often in the slow input case (`20100` hits versus `1` hit in the fast input).
   - The loop starting at line 15 is responsible for a large number of executions (`2686700` hits), indicating an inefficient loop operation.
   - The nested loops on lines 21 and 22 also exhibit high hit counts (`201` and `20250` respectively), suggesting that they contribute to the inefficiency.

2. **Pinpoint Lines or Functions:**
   - Lines 24-28 create a temporary string `temp` in each iteration, which is expensive due to repeated string concatenations.
   - The `has_subseq` function (lines 13-18) is invoked many times, checking if `t` is a subsequence of `temp`.

3. **Inference on Interaction with Data Structures:**
   - The nested loops (lines 21 and 22) iterate over all possible substrings of `s`, leading to a combinatorial explosion in the number of cases checked.
   - The inefficiency arises when creating and checking new substrings (`temp`) in each iteration, especially when the size of `s` is large.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive natural language invariants that characterize when the program is likely to slow down:

1. **Invariant 1: High Iteration Count in Nested Loops**
   - **Natural Language Statement:** "When the length of string `s` is close to its upper bound, the nested loops over possible substrings cause a significant increase in iteration count, leading to slow performance."
   - **Condition:** This condition is triggered as `n1` approaches the maximum input size, causing the quadratic nature of the loops to become a bottleneck.

2. **Invariant 2: Expensive String Operations**
   - **Natural Language Statement:** "If the temporary string `temp` is constructed repeatedly for many combinations, especially when `s` is long, the repeated concatenations and checks for subsequence can degrade performance."
   - **Condition:** The program slows down when many substrings of `s` need to be evaluated, leading to excessive string manipulations.

3. **Invariant 3: Frequent Subsequence Checks**
   - **Natural Language Statement:** "Frequent calls to check if `t` is a subsequence of various substrings of `s` can slow down execution considerably when `s` is large and diverse."
   - **Condition:** This invariant is particularly evident when `s` has a high variety of characters and its length is near the upper limit (200), causing the `has_subseq` function to be called excessively.

By understanding these conditions, we can potentially optimize the program or detect slow scenarios before they degrade performance, especially when dealing with large inputs close to the boundary conditions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is the length of the string.

You are given a string s and a string t, both consisting only of lowercase Latin letters. It is guaranteed that t can be obtained from s by removing some (possibly, zero) number of characters (not necessary contiguous) from s without changing order of remaining characters (in other words, it is guaranteed that t is a subsequence of s).

For example, the strings "test", "tst", "tt", "et" and "" are subsequences of the string "test". But the strings "tset", "se", "contest" are not subsequences of the string "test".

You want to remove some substring (contiguous subsequence) from s of maximum possible length such that after removing this substring t will remain a subsequence of s.

If you want to remove the substring s[l;r] then the string s will be transformed to s_1 s_2 ... s_{l-1} s_{r+1} s_{r+2} ... s_{|s|-1} s_{|s|} (where |s| is the length of s).

Your task is to find the maximum possible length of the substring you can remove so that t is still a subsequence of s.

Input

The first line of the input contains one string s consisting of at least 1 and at most 200 lowercase Latin letters.

The second line of the input contains one string t consisting of at least 1 and at most 200 lowercase Latin letters.

It is guaranteed that t is a subsequence of s.

Output

Print one integer — the maximum possible length of the substring you can remove so that t is still a subsequence of s.

Examples

Input


bbaba
bb


Output


3


Input


baaba
ab


Output


2


Input


abcde
abcde


Output


0


Input


asdfasdf
fasd


Output


3

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Invariants as Checkers in C++

For each previously derived natural language invariant, we will now create C++ code that checks these conditions at runtime.

1. **Invariant 1: High Iteration Count in Nested Loops**
   - **Checker Code:**

   ```cpp
   void check_iteration_invariant(int n1) {
       if (n1 > 150) { // Threshold chosen based on the maximum size constraint
           cerr << "Warning: Performance bottleneck condition triggered - high iteration count in nested loops!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Expensive String Operations**
   - **Checker Code:**

   ```cpp
   void check_string_construction_invariant(int n1, int n2) {
       if ((n1 - n2) > 100) { // Arbitrary threshold for significant string operations
           cerr << "Warning: Performance bottleneck condition triggered - excessive string constructions!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Frequent Subsequence Checks**
   - **Checker Code:**

   ```cpp
   void check_subsequence_invariant(int callCount) {
       if (callCount > 10000) { // Threshold indicating excessive subsequence checks
           cerr << "Warning: Performance bottleneck condition triggered - frequent subsequence checks!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

We will now integrate these checkers into the given C++ program, placing them at effective points in the control flow to avoid adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for high iteration count in nested loops
void check_iteration_invariant(int n1) {
    if (n1 > 150) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration count in nested loops!" << endl;
        abort();
    }
}

// Checker for excessive string constructions
void check_string_construction_invariant(int n1, int n2) {
    if ((n1 - n2) > 100) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive string constructions!" << endl;
        abort();
    }
}

// Checker for frequent subsequence checks
void check_subsequence_invariant(int callCount) {
    if (callCount > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent subsequence checks!" << endl;
        abort();
    }
}

void solve() {
    string s, t;
    cin >> s >> t;
    int n1 = s.size(), n2 = t.size();
    
    // Insert checker for iteration invariant
    check_iteration_invariant(n1);
    
    // Insert checker for string construction invariant
    check_string_construction_invariant(n1, n2);

    auto has_subseq = [&](string cs) {
        int j = 0;
        for (int i = 0; i < (int)cs.size(); i++) {
            if (cs[i] == t[j]) j++;
        }
        return (j == n2);
    };

    int ans = 0;
    int callCount = 0; // To count subsequence checks

    for (int i = 0; i < n1; i++) {
        for (int j = i; j < n1; j++) {
            string temp = "";
            for (int k = 0; k < i; k++) {
                temp += s[k];
            }
            for (int k = j + 1; k < n1; k++) {
                temp += s[k];
            }
            callCount++; // Increment call count for each subsequence check
            if (has_subseq(temp)) {
                ans = max(ans, j - i + 1);
            } else
                break;
        }
    }

    // Insert checker for subsequence invariant
    check_subsequence_invariant(callCount);

    printf("%d\n", ans);
}

int main() {
    solve();
    return 0;
}
```

### Notes:

- **Placement of Checkers:** The checkers are placed outside the tight loops to minimize additional performance overhead.
- **Thresholds:** The chosen thresholds for the checkers are based on the problem constraints and analysis, aiming to capture potential slowdowns without compromising normal execution.
- **Call Count:** A counter (`callCount`) tracks how many times the subsequence check is performed, ensuring we don't execute it excessively.

