system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

To celebrate the opening of the Winter Computer School the organizers decided to buy in n liters of cola. However, an unexpected difficulty occurred in the shop: it turned out that cola is sold in bottles 0.5, 1 and 2 liters in volume. At that, there are exactly a bottles 0.5 in volume, b one-liter bottles and c of two-liter ones. The organizers have enough money to buy any amount of cola. What did cause the heated arguments was how many bottles of every kind to buy, as this question is pivotal for the distribution of cola among the participants (and organizers as well).

Thus, while the organizers are having the argument, discussing different variants of buying cola, the Winter School can't start. Your task is to count the number of all the possible ways to buy exactly n liters of cola and persuade the organizers that this number is too large, and if they keep on arguing, then the Winter Computer School will have to be organized in summer.

All the bottles of cola are considered indistinguishable, i.e. two variants of buying are different from each other only if they differ in the number of bottles of at least one kind.

Input

The first line contains four integers — n, a, b, c (1 ≤ n ≤ 10000, 0 ≤ a, b, c ≤ 5000).

Output

Print the unique number — the solution to the problem. If it is impossible to buy exactly n liters of cola, print 0. 

Examples

Input

10 5 5 5


Output

9


Input

3 0 0 2


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
int dp[20001][4];
int a[3];
int main() {
  int N, sum;
  scanf("%d %d %d %d", &sum, &a[0], &a[1], &a[2]);
  sum <<= 1;
  N = 3;
  memset(dp, 0, sizeof dp);
  dp[0][0] = 1;
  for (int n = 0; n < N; ++n) {
    for (int s = 0; s < sum + 1; ++s) {
      for (int i = 0; i < a[n] + 1; ++i) {
        if (s < (1 << n) * i) break;
        dp[s][n + 1] += dp[s - (1 << n) * i][n];
      }
    }
  }
  printf("%d\n", dp[sum][N]);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5000 5000 5000 5000


(G.2) Fast Input

5 5000 5000 5000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
int dp[20001][4]; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a[3]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int N, sum; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d %d %d %d", &sum, &a[0], &a[1], &a[2]); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  sum <<= 1; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  N = 3; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, 0, sizeof dp); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  dp[0][0] = 1; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int n = 0; n < N; ++n) { /* line 11 slow_hit_count: 4, fast_hit_count: 4 */
    for (int s = 0; s < sum + 1; ++s) { /* line 12 slow_hit_count: 30006, fast_hit_count: 36 */
      for (int i = 0; i < a[n] + 1; ++i) { /* line 13 slow_hit_count: 75060006, fast_hit_count: 156 */
        if (s < (1 << n) * i) break; /* line 14 slow_hit_count: 75055004, fast_hit_count: 156 */
        dp[s][n + 1] += dp[s - (1 << n) * i][n]; /* line 15 slow_hit_count: 75030003, fast_hit_count: 123 */
      } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", dp[sum][N]); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the hit counts between the fast and slow inputs:

1. **Line 12:** The `for` loop iterating over `s` hits significantly more often with the slow input (30,006 times vs. 36 times).
2. **Line 13:** The nested `for` loop iterating over `i` is extremely hit with the slow input (75,060,006 times vs. 156 times). This indicates a key inefficiency.
3. **Line 14 and 15:** These lines are involved in checking and updating the dynamic programming table and are hit almost as frequently as the loop iterating over `i`, showing they contribute to the expensive operations, particularly for the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following performance-characterizing invariants can be derived:

1. **High Sum Scenarios:**
   - **Natural Language Statement:** "When the required volume of cola (`n`) multiplied by two due to conversion into half-liter units is close to the maximum constraint of 20,000, the loops iterate over large ranges, causing significant performance degradation."
   - **Explanation:** The doubling of `n` (via `sum <<= 1`) for handling half-liter units makes the effective problem size much larger. This increased range causes the inner loops to execute far more times, especially when `n` itself is large.

2. **Large Maximum Bottles Available:**
   - **Natural Language Statement:** "If the number of available bottles of any kind (`a`, `b`, `c`) is close to their maximum constraint (5,000), the program iterates excessively over possible configurations, significantly slowing down the execution."
   - **Explanation:** The loop over `i` reaches up to `a[n] + 1`, meaning that with `a`, `b`, or `c` being large, the loop has a vast range to iterate through, particularly impacting performance when combined with a high `sum`.

3. **Complexity from Combinatorial Explosion:**
   - **Natural Language Statement:** "The combinatorial nature of the dynamic programming approach can cause a slowdown when both the sum of liters (doubled) and available bottles are large, as this leads to excessive checks and updates within the nested loops."
   - **Explanation:** The dynamic programming table updates (line 15) become a bottleneck due to the dense matrix-like operations induced by the double loop structure, particularly exacerbated when potential combinations are numerous due to high `n`, `a`, `b`, or `c`.

These invariants point to specific scenarios where the dynamic programming approach becomes inefficient, primarily due to excessively large input parameters that push the algorithm into a slow execution path. Adopting these insights can help optimize the algorithm or preemptively identify slow execution scenarios during testing and development.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
To celebrate the opening of the Winter Computer School the organizers decided to buy in n liters of cola. However, an unexpected difficulty occurred in the shop: it turned out that cola is sold in bottles 0.5, 1 and 2 liters in volume. At that, there are exactly a bottles 0.5 in volume, b one-liter bottles and c of two-liter ones. The organizers have enough money to buy any amount of cola. What did cause the heated arguments was how many bottles of every kind to buy, as this question is pivotal for the distribution of cola among the participants (and organizers as well).

Thus, while the organizers are having the argument, discussing different variants of buying cola, the Winter School can't start. Your task is to count the number of all the possible ways to buy exactly n liters of cola and persuade the organizers that this number is too large, and if they keep on arguing, then the Winter Computer School will have to be organized in summer.

All the bottles of cola are considered indistinguishable, i.e. two variants of buying are different from each other only if they differ in the number of bottles of at least one kind.

Input

The first line contains four integers — n, a, b, c (1 ≤ n ≤ 10000, 0 ≤ a, b, c ≤ 5000).

Output

Print the unique number — the solution to the problem. If it is impossible to buy exactly n liters of cola, print 0. 

Examples

Input

10 5 5 5


Output

9


Input

3 0 0 2


Output

0

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Below are the C++ code snippets to implement the performance-characterizing invariants derived previously:

```cpp
void check_high_sum_invariant(int sum) {
    if (sum > 19900) { // Checking if doubled `n` is close to max constraint
        cerr << "Warning: Performance bottleneck condition triggered - Sum too high!" << endl;
        abort();
    }
}

void check_large_bottle_invariant(int a, int b, int c) {
    if (a > 4500 || b > 4500 || c > 4500) { // Checking if bottle counts are close to their max constraint
        cerr << "Warning: Performance bottleneck condition triggered - Large number of available bottles!" << endl;
        abort();
    }
}

void check_combinatorial_explosion_invariant(int sum, int a, int b, int c) {
    if (sum > 19000 && (a > 4000 || b > 4000 || c > 4000)) {
        // This checks a combination where both `sum` and available bottles are large
        cerr << "Warning: Performance bottleneck condition triggered - Combinatorial explosion potential!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checker C++ Code with the Original Program

The following C++ code integrates the checkers into the original program. Each check is placed after reading inputs and before entering the main computational loop to avoid adding overhead in tight loops:

```cpp
#include <bits/stdc++.h>

// Checker functions
void check_high_sum_invariant(int sum) {
    if (sum > 19900) { // Checking if doubled `n` is close to max constraint
        cerr << "Warning: Performance bottleneck condition triggered - Sum too high!" << endl;
        abort();
    }
}

void check_large_bottle_invariant(int a, int b, int c) {
    if (a > 4500 || b > 4500 || c > 4500) { // Checking if bottle counts are close to their max constraint
        cerr << "Warning: Performance bottleneck condition triggered - Large number of available bottles!" << endl;
        abort();
    }
}

void check_combinatorial_explosion_invariant(int sum, int a, int b, int c) {
    if (sum > 19000 && (a > 4000 || b > 4000 || c > 4000)) {
        // This checks a combination where both `sum` and available bottles are large
        cerr << "Warning: Performance bottleneck condition triggered - Combinatorial explosion potential!" << endl;
        abort();
    }
}

int dp[20001][4];
int a[3];
int main() {
    int N, sum;
    scanf("%d %d %d %d", &sum, &a[0], &a[1], &a[2]);
    
    // Apply the performance checks before processing
    sum <<= 1;
    check_high_sum_invariant(sum);
    check_large_bottle_invariant(a[0], a[1], a[2]);
    check_combinatorial_explosion_invariant(sum, a[0], a[1], a[2]);

    N = 3;
    memset(dp, 0, sizeof dp);
    dp[0][0] = 1;
    for (int n = 0; n < N; ++n) {
        for (int s = 0; s < sum + 1; ++s) {
            for (int i = 0; i < a[n] + 1; ++i) {
                if (s < (1 << n) * i) break;
                dp[s][n + 1] += dp[s - (1 << n) * i][n];
            }
        }
    }
    printf("%d\n", dp[sum][N]);
    return 0;
}
```

### Explanation

- **Checker Insertion:** Checkers are inserted immediately after input reading, ensuring they do not affect performance during the main processing loops. This placement is crucial to identify potential bottlenecks without adding unnecessary computational overhead.
- **Threshold Values:** The chosen threshold values reflect the constraints and scenario from the problem statement, ensuring that the checks are realistic and aligned with potential bottlenecks identified during analysis.

