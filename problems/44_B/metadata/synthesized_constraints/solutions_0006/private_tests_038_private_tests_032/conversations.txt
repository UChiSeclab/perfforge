system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

To celebrate the opening of the Winter Computer School the organizers decided to buy in n liters of cola. However, an unexpected difficulty occurred in the shop: it turned out that cola is sold in bottles 0.5, 1 and 2 liters in volume. At that, there are exactly a bottles 0.5 in volume, b one-liter bottles and c of two-liter ones. The organizers have enough money to buy any amount of cola. What did cause the heated arguments was how many bottles of every kind to buy, as this question is pivotal for the distribution of cola among the participants (and organizers as well).

Thus, while the organizers are having the argument, discussing different variants of buying cola, the Winter School can't start. Your task is to count the number of all the possible ways to buy exactly n liters of cola and persuade the organizers that this number is too large, and if they keep on arguing, then the Winter Computer School will have to be organized in summer.

All the bottles of cola are considered indistinguishable, i.e. two variants of buying are different from each other only if they differ in the number of bottles of at least one kind.

Input

The first line contains four integers — n, a, b, c (1 ≤ n ≤ 10000, 0 ≤ a, b, c ≤ 5000).

Output

Print the unique number — the solution to the problem. If it is impossible to buy exactly n liters of cola, print 0. 

Examples

Input

10 5 5 5


Output

9


Input

3 0 0 2


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int INF = (int)2e9;
const double PI = (double)acos(-1.0);
const double EPS = (double)1e-9;
const int MOD = (int)1e9 + 7;
int dat[20005];
inline void display(int n) {
  for (int i = 0; i <= n; i += 1) printf("%d ", dat[i]);
  puts("");
}
int main() {
  for (int i = 0; i <= 20003 - 1; i += 1) dat[i] = 0;
  dat[0] = 1;
  int n, a, b, c;
  scanf("%d %d %d %d", &n, &a, &b, &c);
  n *= 2;
  for (int i = n; i >= 1; i -= 1)
    for (int j = 1; j <= c; j += 1) {
      if (i - (j << 2) < 0) break;
      dat[i] += dat[i - (j << 2)];
    }
  for (int i = n; i >= 1; i -= 1)
    for (int j = 1; j <= b; j += 1) {
      if (i - (j << 1) < 0) break;
      dat[i] += dat[i - (j << 1)];
    }
  for (int i = n; i >= 1; i -= 1)
    for (int j = 1; j <= a; j += 1) {
      if (i - (j << 0) < 0) break;
      dat[i] += dat[i - (j << 0)];
    }
  printf("%d\n", dat[n]);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5000 5000 5000 5000


(G.2) Fast Input

5 5000 5000 5000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = (int)2e9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const double PI = (double)acos(-1.0); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const double EPS = (double)1e-9; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = (int)1e9 + 7; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int dat[20005]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
inline void display(int n) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= n; i += 1) printf("%d ", dat[i]); /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  puts(""); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 20003 - 1; i += 1) dat[i] = 0; /* line 13 slow_hit_count: 20004, fast_hit_count: 20004 */
  dat[0] = 1; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  int n, a, b, c; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d %d %d %d", &n, &a, &b, &c); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  n *= 2; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = n; i >= 1; i -= 1) /* line 18 slow_hit_count: 10001, fast_hit_count: 11 */
    for (int j = 1; j <= c; j += 1) { /* line 19 slow_hit_count: 12507500, fast_hit_count: 20 */
      if (i - (j << 2) < 0) break; /* line 20 slow_hit_count: 12507500, fast_hit_count: 20 */
      dat[i] += dat[i - (j << 2)]; /* line 21 slow_hit_count: 12497500, fast_hit_count: 10 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = n; i >= 1; i -= 1) /* line 23 slow_hit_count: 10001, fast_hit_count: 11 */
    for (int j = 1; j <= b; j += 1) { /* line 24 slow_hit_count: 25010000, fast_hit_count: 35 */
      if (i - (j << 1) < 0) break; /* line 25 slow_hit_count: 25009999, fast_hit_count: 35 */
      dat[i] += dat[i - (j << 1)]; /* line 26 slow_hit_count: 25000000, fast_hit_count: 25 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = n; i >= 1; i -= 1) /* line 28 slow_hit_count: 10001, fast_hit_count: 11 */
    for (int j = 1; j <= a; j += 1) { /* line 29 slow_hit_count: 37512500, fast_hit_count: 65 */
      if (i - (j << 0) < 0) break; /* line 30 slow_hit_count: 37507499, fast_hit_count: 65 */
      dat[i] += dat[i - (j << 0)]; /* line 31 slow_hit_count: 37502500, fast_hit_count: 55 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", dat[n]); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the provided C program, let's conduct a detailed analysis of the hit counts and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Loop Hit Counts**:
   - The loops in lines 18-31 are the focus here. Particularly, the loop structures:
     - Lines 19-21 (using two-liter bottles) have significantly higher hit counts in the slow input (`12,507,500` vs. `20` in the fast input).
     - Lines 24-26 (using one-liter bottles) also have very high hit counts for the slow input (`25,010,000` vs. `35`).
     - Lines 29-31 (using half-liter bottles) are hit `37,512,500` times in the slow input compared to `65` in the fast input.

2. **Interaction with Input Variables**:
   - The code multiplies `n` by `2` (line 17), effectively setting the target cola volume in half-liter units.
   - High hit counts suggest that the nested loops iterate extensively over available bottles, which becomes intensive when `n` (double the target volume) is large.
   - The `break` conditions in lines 20, 25, and 30 are critical but not sufficient to prevent excessive iterations when `a`, `b`, or `c` are large.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the hit count analysis and code structure, the following invariants describe the slowdown conditions:

1. **High Target Volume with Large Bottle Counts**:
   - "When `n` is large, particularly close to its upper constraint, and there are large numbers of bottles available (a, b, c), the program enters a slow execution path due to extensive nested loop iterations."

2. **Extensive Combinatorial Exploration**:
   - "The program slows down significantly when it must explore numerous combinations to meet a high target volume using all available bottle sizes, especially when each bottle type count (a, b, c) is high."

3. **Inefficient Break Conditions**:
   - "If the conditions for breaking out of loops depend heavily on the large values of a, b, or c, the recursive nature of accumulation operations causes excessive computational overhead."

### Thresholds and Conditions

Given `n <= 10000` and each bottle count `a, b, c <= 5000`, potential conditions that could be added to catch slow scenarios are:

- **High Volume Condition**: 
  - The slowdown is more likely when `n` approaches 10000, and all bottle counts are non-trivially high (e.g., `a, b, c > 4000`).

- **Loop Iteration Limits**:
  - An insightful check could be to limit the combined iterations across all loops, suggesting thresholds such as:
    - "Check if `n * (a + b + c)` exceeds a certain value, triggering many combinations to be tried."

These invariants aim to capture the essence of the performance bottlenecks observed without relying on specific inputs but instead focusing on the input conditions that lead to slow execution paths.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
To celebrate the opening of the Winter Computer School the organizers decided to buy in n liters of cola. However, an unexpected difficulty occurred in the shop: it turned out that cola is sold in bottles 0.5, 1 and 2 liters in volume. At that, there are exactly a bottles 0.5 in volume, b one-liter bottles and c of two-liter ones. The organizers have enough money to buy any amount of cola. What did cause the heated arguments was how many bottles of every kind to buy, as this question is pivotal for the distribution of cola among the participants (and organizers as well).

Thus, while the organizers are having the argument, discussing different variants of buying cola, the Winter School can't start. Your task is to count the number of all the possible ways to buy exactly n liters of cola and persuade the organizers that this number is too large, and if they keep on arguing, then the Winter Computer School will have to be organized in summer.

All the bottles of cola are considered indistinguishable, i.e. two variants of buying are different from each other only if they differ in the number of bottles of at least one kind.

Input

The first line contains four integers — n, a, b, c (1 ≤ n ≤ 10000, 0 ≤ a, b, c ≤ 5000).

Output

Print the unique number — the solution to the problem. If it is impossible to buy exactly n liters of cola, print 0. 

Examples

Input

10 5 5 5


Output

9


Input

3 0 0 2


Output

0

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Based on the natural language invariants derived earlier, we need to implement runtime checks in C++ to identify when the program might encounter performance bottlenecks.

```cpp
#include <iostream>
#include <cstdlib>

void check_large_n_and_bottles(int n, int a, int b, int c) {
    // Check if n is large and all bottle counts are also large
    if (n > 9000 && a > 4000 && b > 4000 && c > 4000) {
        std::cerr << "Warning: Performance bottleneck condition triggered - large n and bottle counts!" << std::endl;
        abort();
    }
}

void check_excessive_combination_attempts(int n, int a, int b, int c) {
    // Check if the potential combinations are excessively high
    if (n * (a + b + c) > 50000000) {
        std::cerr << "Warning: Performance bottleneck condition triggered - excessive combination attempts!" << std::endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Original Program

Now, let's incorporate these checks into the original C++ code to effectively monitor performance conditions.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int INF = (int)2e9;
const double PI = (double)acos(-1.0);
const double EPS = (double)1e-9;
const int MOD = (int)1e9 + 7;
int dat[20005];

void check_large_n_and_bottles(int n, int a, int b, int c) {
    // Check if n is large and all bottle counts are also large
    if (n > 9000 && a > 4000 && b > 4000 && c > 4000) {
        cerr << "Warning: Performance bottleneck condition triggered - large n and bottle counts!" << endl;
        abort();
    }
}

void check_excessive_combination_attempts(int n, int a, int b, int c) {
    // Check if the potential combinations are excessively high
    if (n * (a + b + c) > 50000000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive combination attempts!" << endl;
        abort();
    }
}

int main() {
    // Initialize data array
    for (int i = 0; i <= 20003 - 1; i += 1) dat[i] = 0;
    dat[0] = 1;

    int n, a, b, c;
    scanf("%d %d %d %d", &n, &a, &b, &c);

    // Check for performance bottlenecks
    check_large_n_and_bottles(n, a, b, c);
    check_excessive_combination_attempts(n, a, b, c);

    // Adjust n to consider half-liter units
    n *= 2;

    // Calculate number of ways to purchase exactly n liters of cola
    for (int i = n; i >= 1; i -= 1)
        for (int j = 1; j <= c; j += 1) {
            if (i - (j << 2) < 0) break;
            dat[i] += dat[i - (j << 2)];
        }
    for (int i = n; i >= 1; i -= 1)
        for (int j = 1; j <= b; j += 1) {
            if (i - (j << 1) < 0) break;
            dat[i] += dat[i - (j << 1)];
        }
    for (int i = n; i >= 1; i -= 1)
        for (int j = 1; j <= a; j += 1) {
            if (i - (j << 0) < 0) break;
            dat[i] += dat[i - (j << 0)];
        }

    printf("%d\n", dat[n]);
    return 0;
}
```

### Explanation

- **Check Insertion Points**: The checks are inserted right after input reading and before starting the computationally intensive loops, ensuring they don't add significant overhead to the loop execution.
- **Checker Functions**: Two separate functions, `check_large_n_and_bottles` and `check_excessive_combination_attempts`, were added to encapsulate the logic for detecting potential performance bottlenecks. Each function outputs a warning and aborts execution if a bottleneck condition is met. 
- **Thresholds**: The thresholds are chosen based on the derived invariants, aiming to detect performance issues as `n`, `a`, `b`, `c` approach their higher limits within the provided constraints.

