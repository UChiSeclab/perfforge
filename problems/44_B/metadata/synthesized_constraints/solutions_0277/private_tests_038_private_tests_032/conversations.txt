system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

To celebrate the opening of the Winter Computer School the organizers decided to buy in n liters of cola. However, an unexpected difficulty occurred in the shop: it turned out that cola is sold in bottles 0.5, 1 and 2 liters in volume. At that, there are exactly a bottles 0.5 in volume, b one-liter bottles and c of two-liter ones. The organizers have enough money to buy any amount of cola. What did cause the heated arguments was how many bottles of every kind to buy, as this question is pivotal for the distribution of cola among the participants (and organizers as well).

Thus, while the organizers are having the argument, discussing different variants of buying cola, the Winter School can't start. Your task is to count the number of all the possible ways to buy exactly n liters of cola and persuade the organizers that this number is too large, and if they keep on arguing, then the Winter Computer School will have to be organized in summer.

All the bottles of cola are considered indistinguishable, i.e. two variants of buying are different from each other only if they differ in the number of bottles of at least one kind.

Input

The first line contains four integers — n, a, b, c (1 ≤ n ≤ 10000, 0 ≤ a, b, c ≤ 5000).

Output

Print the unique number — the solution to the problem. If it is impossible to buy exactly n liters of cola, print 0. 

Examples

Input

10 5 5 5


Output

9


Input

3 0 0 2


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
int main() {
  int n, m, i, j, k, sum;
  int a[5] = {1, 2, 4}, b;
  int c1[20005], c2[20005];
  while (scanf("%d", &n) != EOF) {
    memset(c1, 0, sizeof(c1));
    memset(c2, 0, sizeof(c2));
    c1[0] = 1;
    for (i = 0; i < 3; i++) {
      scanf("%d", &b);
      for (j = 0; j <= 2 * n; j++) {
        for (k = 0; k <= b && j + a[i] * k <= 2 * n; k++) {
          c2[j + a[i] * k] += c1[j];
        }
      }
      for (j = 0; j <= 2 * n; j++) {
        c1[j] = c2[j];
        c2[j] = 0;
      }
    }
    printf("%d\n", c1[2 * n]);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5000 5000 5000 5000


(G.2) Fast Input

5 5000 5000 5000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 2 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, i, j, k, sum; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  int a[5] = {1, 2, 4}, b; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int c1[20005], c2[20005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  while (scanf("%d", &n) != EOF) { /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
    memset(c1, 0, sizeof(c1)); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
    memset(c2, 0, sizeof(c2)); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    c1[0] = 1; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
    for (i = 0; i < 3; i++) { /* line 10 slow_hit_count: 4, fast_hit_count: 4 */
      scanf("%d", &b); /* line 11 slow_hit_count: 3, fast_hit_count: 3 */
      for (j = 0; j <= 2 * n; j++) { /* line 12 slow_hit_count: 30006, fast_hit_count: 36 */
        for (k = 0; k <= b && j + a[i] * k <= 2 * n; k++) { /* line 13 slow_hit_count: 75060006, fast_hit_count: 156 */
          c2[j + a[i] * k] += c1[j]; /* line 14 slow_hit_count: 75030003, fast_hit_count: 123 */
        } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
      for (j = 0; j <= 2 * n; j++) { /* line 17 slow_hit_count: 30006, fast_hit_count: 36 */
        c1[j] = c2[j]; /* line 18 slow_hit_count: 30003, fast_hit_count: 33 */
        c2[j] = 0; /* line 19 slow_hit_count: 30003, fast_hit_count: 33 */
      } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%d\n", c1[2 * n]); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**
   - **Line 12:** `for (j = 0; j <= 2 * n; j++)` has 30,006 hits for the slow input and only 36 hits for the fast input.
   - **Line 13:** `for (k = 0; <= b && j + a[i] * k <= 2 * n; k++)` has 75,060,006 hits for the slow input and only 156 hits for the fast input.
   - **Line 14:** `c2[j + a[i] * k] += c1[j];` has 75,030,003 hits for the slow input and only 123 hits for the fast input.

2. **Analysis:**
   - The loop at **Line 12** iterates over a range that is dependent on `2 * n`. For the slow input, `n` is large (5000), leading to a significant number of iterations (twice the size of `n` compared to the fast input).
   - The nested loop at **Line 13** iterates based on the number of available bottles (`b`), and the conditions in this loop also scale with `n`.
   - **Line 14** performs an addition operation inside the innermost loop, leading to a high hit count when both `n` and `b` are large.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: High Iteration Count Due to Large `n`**
   - **Natural Language Description:**
     - "When `n` is large, the outer loop iterates over a range that scales proportionally with `n`, leading to a vast number of iterations."
   - **Explanation:**
     - The nested loops' iteration count increases dramatically with larger `n`, especially since `n` is doubled in its range (`2 * n`), exacerbating the slowdown.

2. **Invariant 2: Bottleneck in Nested Loops with Large Bottle Counts**
   - **Natural Language Description:**
     - "If the number of available bottles (`a`, `b`, or `c`) is large, the innermost loop is executed many times, causing performance degradation."
   - **Explanation:**
     - When `b` (bottle count) is near its upper threshold and `n` is large, the nested loop structure causes a multiplicative effect, significantly increasing execution time.

3. **Invariant 3: Array Update Overhead in High Iteration Context**
   - **Natural Language Description:**
     - "When the loops are executed many times due to high values of `n` and large bottle counts, frequent updates to arrays (`c1` and `c2`) slow down the program."
   - **Explanation:**
     - The update operations on arrays (`c1` and `c2`) within the innermost loop contribute to computational overhead.

### Summary

These invariants highlight the conditions leading to performance bottlenecks: high values of `n` combined with large available bottle counts (`a`, `b`, or `c`) result in extensive loop iterations and frequent array updates, which degrade the program's execution time.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
To celebrate the opening of the Winter Computer School the organizers decided to buy in n liters of cola. However, an unexpected difficulty occurred in the shop: it turned out that cola is sold in bottles 0.5, 1 and 2 liters in volume. At that, there are exactly a bottles 0.5 in volume, b one-liter bottles and c of two-liter ones. The organizers have enough money to buy any amount of cola. What did cause the heated arguments was how many bottles of every kind to buy, as this question is pivotal for the distribution of cola among the participants (and organizers as well).

Thus, while the organizers are having the argument, discussing different variants of buying cola, the Winter School can't start. Your task is to count the number of all the possible ways to buy exactly n liters of cola and persuade the organizers that this number is too large, and if they keep on arguing, then the Winter Computer School will have to be organized in summer.

All the bottles of cola are considered indistinguishable, i.e. two variants of buying are different from each other only if they differ in the number of bottles of at least one kind.

Input

The first line contains four integers — n, a, b, c (1 ≤ n ≤ 10000, 0 ≤ a, b, c ≤ 5000).

Output

Print the unique number — the solution to the problem. If it is impossible to buy exactly n liters of cola, print 0. 

Examples

Input

10 5 5 5


Output

9


Input

3 0 0 2


Output

0

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as Checker Code in C++

Based on the performance-characterizing invariants we derived, here is how you can implement the runtime checks in C++:

1. **Invariant 1: High Iteration Count Due to Large `n`**

   ```cpp
   void check_high_iteration_invariant(int n) {
       if (n > 1000) { // Arbitrary threshold based on problem constraints
           std::cerr << "Warning: high_iteration_invariant triggered - n is large, causing many loop iterations" << std::endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Bottleneck in Nested Loops with Large Bottle Counts**

   ```cpp
   void check_bottleneck_invariant(int b) {
       if (b > 2000) { // Arbitrary threshold considering the maximum of 5000
           std::cerr << "Warning: bottleneck_invariant triggered - large bottle count, causing excessive loop nesting" << std::endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Array Update Overhead in High Iteration Context**

   ```cpp
   void check_array_update_invariant(int totalIterations) {
       if (totalIterations > 1000000) { // Total iterations measure, considering large enough to be problematic
           std::cerr << "Warning: array_update_invariant triggered - excessive array updates in loops" << std::endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

Here is the original C++ code with the integrated invariant checks:

```cpp
#include <bits/stdc++.h> 
using namespace std;

// Function to check for high iteration invariant
void check_high_iteration_invariant(int n) {
    if (n > 1000) { // Arbitrary threshold based on problem constraints
        cerr << "Warning: high_iteration_invariant triggered - n is large, causing many loop iterations" << endl;
        abort();
    }
}

// Function to check for bottleneck in nested loops
void check_bottleneck_invariant(int b) {
    if (b > 2000) { // Arbitrary threshold considering the maximum of 5000
        cerr << "Warning: bottleneck_invariant triggered - large bottle count, causing excessive loop nesting" << endl;
        abort();
    }
}

// Function to check for excessive array updates
void check_array_update_invariant(int totalIterations) {
    if (totalIterations > 1000000) { // Total iterations measure
        cerr << "Warning: array_update_invariant triggered - excessive array updates in loops" << endl;
        abort();
    }
}

int main() {
    int n, m, i, j, k, sum;
    int a[5] = {1, 2, 4}, b;
    int c1[20005], c2[20005];

    while (scanf("%d", &n) != EOF) {
        check_high_iteration_invariant(n); // Check for high iteration

        memset(c1, 0, sizeof(c1));
        memset(c2, 0, sizeof(c2));
        c1[0] = 1;

        int totalIterations = 0; // Track total iterations

        for (i = 0; i < 3; i++) {
            scanf("%d", &b);
            check_bottleneck_invariant(b); // Check for bottleneck

            for (j = 0; j <= 2 * n; j++) {
                for (k = 0; k <= b && j + a[i] * k <= 2 * n; k++) {
                    c2[j + a[i] * k] += c1[j];
                    totalIterations++;
                }
            }

            for (j = 0; j <= 2 * n; j++) {
                c1[j] = c2[j];
                c2[j] = 0;
            }
        }

        check_array_update_invariant(totalIterations); // Check for excessive updates
        printf("%d\n", c1[2 * n]);
    }

    return 0;
}
```

### Explanation of Insertions:

- **`check_high_iteration_invariant(n);`:** Placed immediately after reading `n` to catch high iterations based on `n` before starting the main loop.
  
- **`check_bottleneck_invariant(b);`:** After reading `b`, to ensure large bottle values do not cause excessive nesting.
  
- **`check_array_update_invariant(totalIterations);`:** After all loops, to assess if the total number of array updates exceeds a problematic threshold. 

These checks are placed to effectively capture the conditions causing performance bottlenecks without adding overhead in tight loops.

