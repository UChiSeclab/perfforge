system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Alice has got addicted to a game called Sirtet recently.

In Sirtet, player is given an n × m grid. Initially a_{i,j} cubes are stacked up in the cell (i,j). Two cells are called adjacent if they share a side. Player can perform the following operations: 

  * stack up one cube in two adjacent cells; 
  * stack up two cubes in one cell. 



Cubes mentioned above are identical in height.

Here is an illustration of the game. States on the right are obtained by performing one of the above operations on the state on the left, and grey cubes are added due to the operation.

<image>

Player's goal is to make the height of all cells the same (i.e. so that each cell has the same number of cubes in it) using above operations. 

Alice, however, has found out that on some starting grids she may never reach the goal no matter what strategy she uses. Thus, she is wondering the number of initial grids such that 

  * L ≤ a_{i,j} ≤ R for all 1 ≤ i ≤ n, 1 ≤ j ≤ m; 
  * player can reach the goal using above operations. 



Please help Alice with it. Notice that the answer might be large, please output the desired value modulo 998,244,353.

Input

The only line contains four integers n, m, L and R (1≤ n,m,L,R ≤ 10^9, L ≤ R, n ⋅ m ≥ 2).

Output

Output one integer, representing the desired answer modulo 998,244,353.

Examples

Input


2 2 1 1


Output


1


Input


1 2 1 2


Output


2

Note

In the first sample, the only initial grid that satisfies the requirements is a_{1,1}=a_{2,1}=a_{1,2}=a_{2,2}=1. Thus the answer should be 1.

In the second sample, initial grids that satisfy the requirements are a_{1,1}=a_{1,2}=1 and a_{1,1}=a_{1,2}=2. Thus the answer should be 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long MOD = 998244353;
vector<vector<long long>> mul(vector<vector<long long>> A,
                              vector<vector<long long>> B) {
  int n = A.size();
  vector<vector<long long>> C(n, vector<long long>(n));
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      for (int k = 0; k < n; k++) {
        C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % MOD;
      }
    }
  }
  return C;
}
vector<vector<long long>> id(int n) {
  vector<vector<long long>> C(n, vector<long long>(n));
  for (int i = 0; i < n; i++) C[i][i] = 1;
  return C;
}
vector<vector<long long>> matpow(vector<vector<long long>> A, long long e) {
  vector<vector<long long>> res = id(A.size());
  for (long long k = 1; k <= e; k *= 2) {
    if (k & e) res = mul(res, A);
    A = mul(A, A);
  }
  return res;
}
long long mpow(long long b, long long e) {
  long long res = 1;
  for (long long k = 1; k <= e; k *= 2) {
    if (k & e) res = (res * b) % MOD;
    b = (b * b) % MOD;
  }
  return res;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  long long n, m, L, R;
  cin >> n >> m >> L >> R;
  if ((n % 2) && (m % 2)) {
    cout << mpow(R - L + 1, m * n) << '\n';
    return 0;
  }
  long long ce = R / 2 - (L - 1) / 2, co = (R - L + 1) - ce;
  vector<vector<long long>> M = {{ce, co}, {co, ce}};
  M = matpow(M, (m * n) / 2LL);
  long long wo = M[0][0], we = M[1][0];
  cout << (wo * wo + we * we) % MOD << '\n';
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1076117758 300009121 565317265 947272048


(G.2) Fast Input

946835863 300009121 565317265 947272048


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 998244353; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<long long>> mul(vector<vector<long long>> A, /* line 4 slow_hit_count: 95, fast_hit_count: 0 */
                              vector<vector<long long>> B) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  int n = A.size(); /* line 6 slow_hit_count: 95, fast_hit_count: 0 */
  vector<vector<long long>> C(n, vector<long long>(n)); /* line 7 slow_hit_count: 190, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 8 slow_hit_count: 285, fast_hit_count: 0 */
    for (int j = 0; j < n; j++) { /* line 9 slow_hit_count: 570, fast_hit_count: 0 */
      for (int k = 0; k < n; k++) { /* line 10 slow_hit_count: 1140, fast_hit_count: 0 */
        C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % MOD; /* line 11 slow_hit_count: 760, fast_hit_count: 0 */
      } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  return C; /* line 15 slow_hit_count: 95, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<long long>> id(int n) { /* line 17 slow_hit_count: 1, fast_hit_count: 0 */
  vector<vector<long long>> C(n, vector<long long>(n)); /* line 18 slow_hit_count: 2, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) C[i][i] = 1; /* line 19 slow_hit_count: 3, fast_hit_count: 0 */
  return C; /* line 20 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<long long>> matpow(vector<vector<long long>> A, long long e) { /* line 22 slow_hit_count: 1, fast_hit_count: 0 */
  vector<vector<long long>> res = id(A.size()); /* line 23 slow_hit_count: 1, fast_hit_count: 0 */
  for (long long k = 1; k <= e; k *= 2) { /* line 24 slow_hit_count: 59, fast_hit_count: 0 */
    if (k & e) res = mul(res, A); /* line 25 slow_hit_count: 58, fast_hit_count: 0 */
    A = mul(A, A); /* line 26 slow_hit_count: 58, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 28 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
long long mpow(long long b, long long e) { /* line 30 slow_hit_count: 0, fast_hit_count: 1 */
  long long res = 1; /* line 31 slow_hit_count: 0, fast_hit_count: 1 */
  for (long long k = 1; k <= e; k *= 2) { /* line 32 slow_hit_count: 0, fast_hit_count: 59 */
    if (k & e) res = (res * b) % MOD; /* line 33 slow_hit_count: 0, fast_hit_count: 58 */
    b = (b * b) % MOD; /* line 34 slow_hit_count: 0, fast_hit_count: 58 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 36 slow_hit_count: 0, fast_hit_count: 1 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, m, L, R; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m >> L >> R; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  if ((n % 2) && (m % 2)) { /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
    cout << mpow(R - L + 1, m * n) << '\n'; /* line 44 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 45 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  long long ce = R / 2 - (L - 1) / 2, co = (R - L + 1) - ce; /* line 47 slow_hit_count: 1, fast_hit_count: 0 */
  vector<vector<long long>> M = {{ce, co}, {co, ce}}; /* line 48 slow_hit_count: 6, fast_hit_count: 0 */
  M = matpow(M, (m * n) / 2LL); /* line 49 slow_hit_count: 1, fast_hit_count: 0 */
  long long wo = M[0][0], we = M[1][0]; /* line 50 slow_hit_count: 1, fast_hit_count: 0 */
  cout << (wo * wo + we * we) % MOD << '\n'; /* line 51 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 52 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C program, we can break down our analysis into two phases—identifying expensive code segments and deriving performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments
1. **Line-Level Hit Counts:**
   - The `mul` function (lines 4-15) and particularly its nested loops (lines 8-11) are hit significantly more often during the slow run than during the fast run. This indicates that matrix multiplication is a major bottleneck.
   - The `matpow` function (lines 22-29), particularly the loop (lines 24-27) and calls to the `mul` function (lines 25 and 26), are also contributing to the slow performance due to repeated matrix multiplication.
   - The `mpow` function (lines 30-37) is only invoked in the fast case, suggesting that the fast input triggers the condition `(n % 2) && (m % 2)` being true and skips matrix operations entirely.

2. **Interaction with Data Structures:**
   - The program heavily relies on matrix operations, which have a complexity of \(O(n^3)\) for the multiplication of two \(n \times n\) matrices.

3. **Input Constraints:**
   - Given the constraints with \(n, m \leq 10^9\), the matrix operations become computationally expensive as they scale with the size of the grid.

### Phase 2: Derive Performance-Characterizing Invariants
Based on the analysis above, here are the performance-characterizing invariants in natural language:

1. **Invariant on Matrix Operations:**
   - "When both n and m are not odd, the code enters a computationally expensive path involving repeated matrix multiplications. This path can become significantly slow if the product n * m is large."

2. **Invariant on Fast Path:**
   - "If either n or m is odd, the program takes a fast execution path, avoiding complex matrix computations and thus performing efficiently even with large input sizes."

3. **Invariant on Matrix Size:**
   - "Matrix operations, particularly repetitive multiplications, slow down the execution when the grid size n * m is large enough to cause repeated significant operations within nested loops."

These invariants help summarize and predict performance issues in scenarios beyond the provided inputs. They focus on abstract conditions related to the problem's constraints, such as the odd/even nature of n and m, which directly impact whether matrix operations are performed.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Alice has got addicted to a game called Sirtet recently.

In Sirtet, player is given an n × m grid. Initially a_{i,j} cubes are stacked up in the cell (i,j). Two cells are called adjacent if they share a side. Player can perform the following operations: 

  * stack up one cube in two adjacent cells; 
  * stack up two cubes in one cell. 



Cubes mentioned above are identical in height.

Here is an illustration of the game. States on the right are obtained by performing one of the above operations on the state on the left, and grey cubes are added due to the operation.

<image>

Player's goal is to make the height of all cells the same (i.e. so that each cell has the same number of cubes in it) using above operations. 

Alice, however, has found out that on some starting grids she may never reach the goal no matter what strategy she uses. Thus, she is wondering the number of initial grids such that 

  * L ≤ a_{i,j} ≤ R for all 1 ≤ i ≤ n, 1 ≤ j ≤ m; 
  * player can reach the goal using above operations. 



Please help Alice with it. Notice that the answer might be large, please output the desired value modulo 998,244,353.

Input

The only line contains four integers n, m, L and R (1≤ n,m,L,R ≤ 10^9, L ≤ R, n ⋅ m ≥ 2).

Output

Output one integer, representing the desired answer modulo 998,244,353.

Examples

Input


2 2 1 1


Output


1


Input


1 2 1 2


Output


2

Note

In the first sample, the only initial grid that satisfies the requirements is a_{1,1}=a_{2,1}=a_{1,2}=a_{2,2}=1. Thus the answer should be 1.

In the second sample, initial grids that satisfy the requirements are a_{1,1}=a_{1,2}=1 and a_{1,1}=a_{1,2}=2. Thus the answer should be 2.

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3, where we will implement the performance-characterizing invariants derived previously as C++ checker code.

### Phase 3: Implement Checkers for Performance Invariants

1. **Invariant on Matrix Operations:**
   - "When both n and m are not odd, the code enters a computationally expensive path involving repeated matrix multiplications. This path can become significantly slow if the product n * m is large."
   
   ```cpp
   void check_matrix_operations_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: High cost matrix operations due to even dimensions detected!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Fast Path:**
   - "If either n or m is odd, the program takes a fast execution path, avoiding complex matrix computations and thus performing efficiently even with large input sizes."
   
   ```cpp
   void check_fast_path_invariant(bool condition) {
       if (condition) {
           cerr << "Note: Fast path condition met - Efficient execution expected." << endl;
       }
   }
   ```

3. **Invariant on Matrix Size:**
   - "Matrix operations, particularly repetitive multiplications, slow down the execution when the grid size n * m is large enough to cause repeated significant operations within nested loops."

   ```cpp
   void check_matrix_size_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Large matrix size detected, potential performance impact!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checkers into the original program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long MOD = 998244353;

// Checker functions for performance invariants
void check_matrix_operations_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: High cost matrix operations due to even dimensions detected!" << endl;
        abort();
    }
}

void check_fast_path_invariant(bool condition) {
    if (condition) {
        cerr << "Note: Fast path condition met - Efficient execution expected." << endl;
    }
}

void check_matrix_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Large matrix size detected, potential performance impact!" << endl;
        abort();
    }
}

vector<vector<long long>> mul(vector<vector<long long>> A, vector<vector<long long>> B) {
    int n = A.size();
    vector<vector<long long>> C(n, vector<long long>(n));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < n; k++) {
                C[i][j] = (C[i][j] + A[i][k] * B[k][j]) % MOD;
            }
        }
    }
    return C;
}

vector<vector<long long>> id(int n) {
    vector<vector<long long>> C(n, vector<long long>(n));
    for (int i = 0; i < n; i++) C[i][i] = 1;
    return C;
}

vector<vector<long long>> matpow(vector<vector<long long>> A, long long e) {
    vector<vector<long long>> res = id(A.size());
    for (long long k = 1; k <= e; k *= 2) {
        if (k & e) res = mul(res, A);
        A = mul(A, A);
    }
    return res;
}

long long mpow(long long b, long long e) {
    long long res = 1;
    for (long long k = 1; k <= e; k *= 2) {
        if (k & e) res = (res * b) % MOD;
        b = (b * b) % MOD;
    }
    return res;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    long long n, m, L, R;
    cin >> n >> m >> L >> R;

    // Insert checker for matrix size invariant
    check_matrix_size_invariant(n * m > 1000000LL);

    // Check fast path condition
    check_fast_path_invariant((n % 2) || (m % 2));

    if ((n % 2) && (m % 2)) {
        cout << mpow(R - L + 1, m * n) << '\n';
        return 0;
    }

    // Insert checker for matrix operations invariant
    check_matrix_operations_invariant(!(n % 2) && !(m % 2));

    long long ce = R / 2 - (L - 1) / 2, co = (R - L + 1) - ce;
    vector<vector<long long>> M = {{ce, co}, {co, ce}};
    M = matpow(M, (m * n) / 2LL);
    long long wo = M[0][0], we = M[1][0];
    cout << (wo * wo + we * we) % MOD << '\n';
}
```

### Explanation
- **Matrix Size Invariant:** A checker is added to trigger a warning if `n * m` exceeds a hypothetical threshold (e.g., one million) that might lead to performance issues.
- **Fast Path Invariant:** We add a check that logs a note when a fast path is taken (either n or m is odd).
- **Matrix Operations Invariant:** A condition is checked to warn if both `n` and `m` are even—as this would result in the expensive matrix operations.

These runtime checks are placed strategically to ensure they do not add unnecessary overhead within tight loops, supporting efficient execution while monitoring potential slow paths.

