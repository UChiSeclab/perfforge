system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Alice has got addicted to a game called Sirtet recently.

In Sirtet, player is given an n × m grid. Initially a_{i,j} cubes are stacked up in the cell (i,j). Two cells are called adjacent if they share a side. Player can perform the following operations: 

  * stack up one cube in two adjacent cells; 
  * stack up two cubes in one cell. 



Cubes mentioned above are identical in height.

Here is an illustration of the game. States on the right are obtained by performing one of the above operations on the state on the left, and grey cubes are added due to the operation.

<image>

Player's goal is to make the height of all cells the same (i.e. so that each cell has the same number of cubes in it) using above operations. 

Alice, however, has found out that on some starting grids she may never reach the goal no matter what strategy she uses. Thus, she is wondering the number of initial grids such that 

  * L ≤ a_{i,j} ≤ R for all 1 ≤ i ≤ n, 1 ≤ j ≤ m; 
  * player can reach the goal using above operations. 



Please help Alice with it. Notice that the answer might be large, please output the desired value modulo 998,244,353.

Input

The only line contains four integers n, m, L and R (1≤ n,m,L,R ≤ 10^9, L ≤ R, n ⋅ m ≥ 2).

Output

Output one integer, representing the desired answer modulo 998,244,353.

Examples

Input


2 2 1 1


Output


1


Input


1 2 1 2


Output


2

Note

In the first sample, the only initial grid that satisfies the requirements is a_{1,1}=a_{2,1}=a_{1,2}=a_{2,2}=1. Thus the answer should be 1.

In the second sample, initial grids that satisfy the requirements are a_{1,1}=a_{1,2}=1 and a_{1,1}=a_{1,2}=2. Thus the answer should be 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
template <typename T>
using MaxHeap = std::priority_queue<T>;
template <typename T>
using MinHeap = std::priority_queue<T, std::vector<T>, std::greater<T>>;
template <typename T>
inline bool chmax(T &a, T b) {
  if (a < b) {
    a = b;
    return true;
  }
  return false;
}
template <typename T>
inline bool chmin(T &a, T b) {
  if (a > b) {
    a = b;
    return true;
  }
  return false;
}
template <typename T>
std::vector<T> vec(int len, T elem) {
  return std::vector<T>(len, elem);
}
template <typename T>
void vdeb(std::vector<T> &da) {
  for (int i = 0; i < da.size(); i++) {
    if (i == da.size() - 1)
      std::cout << da[i];
    else
      std::cout << da[i] << ' ';
  }
  std::cout << std::endl;
}
template <typename T>
void vdeb(std::vector<std::vector<T>> &da) {
  for (int i = 0; i < da.size(); i++) vdeb(da[i]);
  std::cout << std::endl;
}
using namespace std;
long long pow(long long n, long long p, long long k) {
  if (!k) return 1;
  long long a = pow(n, p, k >> 1);
  a = a * a % p;
  if (k & 1) a = a * n % p;
  return a;
}
void euclid(long long &a, long long &b, long long p) {
  if (a == 1) {
    a = 1;
  } else {
    long long A = b, B = a % b;
    euclid(A, B, p);
    b = (A - (p + a / b) % p * B % p + p) % p;
    a = B;
  }
}
long long rev(long long n, long long p) { return pow(n, p, p - 2); }
long long bino(long long n, long long m, long long p) {
  long long ans = 1, div = 1;
  for (int i = 0; i < m; i++) {
    ans = (n - i) * ans % p;
    div = div * (i + 1) % p;
  }
  return ans * rev(div, p) % p;
}
struct modint {
  long long num;
  long long p;
  modint() {
    num = 0;
    p = 998244353;
  }
  modint(int x) {
    p = 998244353;
    num = (long long)x % p;
  }
  modint(long long x) {
    p = 998244353;
    num = x % p;
  }
  modint operator+(const modint &other) {
    modint ret;
    ret.p = p;
    ret.num = (num + other.num) % p;
    return ret;
  }
  modint operator+(const long long &other) {
    modint ret;
    ret.p = p;
    ret.num = (num + (other % p)) % p;
    return ret;
  }
  modint operator-(const modint &other) {
    modint ret;
    ret.p = p;
    ret.num = (num - other.num + p) % p;
    return ret;
  }
  modint operator-(const long long &other) {
    modint ret;
    ret.p = p;
    ret.num = (num - (other % p) + p) % p;
    return ret;
  }
  modint operator*(const modint &other) {
    modint ret;
    ret.p = p;
    ret.num = (num * other.num) % p;
    return ret;
  }
  modint operator*(const long long &other) {
    modint ret;
    ret.p = p;
    ret.num = (num * (other % p)) % p;
    return ret;
  }
  modint operator/(const modint &other) {
    modint ret;
    ret.p = p;
    ret.num = (num * rev(other.num, p)) % p;
    return ret;
  }
  modint operator/(const long long &other) {
    modint ret;
    ret.p = p;
    ret.num = (num * rev(other % p, p)) % p;
    return ret;
  }
  void operator+=(const long long &other) { num = (num + other) % p; }
  void operator+=(const modint &other) { num = (num + other.num) % p; }
  void operator-=(const long long &other) { num = (num - other + p) % p; }
  void operator-=(const modint &other) { num = (num - other.num + p) % p; }
  void operator*=(const long long &other) { num = (num * other) % p; }
  void operator*=(const modint &other) { num = (num * other.num) % p; }
};
std::ostream &operator<<(std::ostream &os, const modint &x) {
  std::cout << x.num;
  return os;
}
template <typename T>
struct matrix {
  int size;
  vector<vector<T>> table;
  matrix(int n) {
    size = n;
    table = vector<vector<T>>(n, vector<T>(n));
  }
  matrix<T> operator*(const matrix<T> &othor) {
    matrix<T> ret(size);
    for (int i = 0; i < size; i++) {
      for (int j = 0; j < size; j++) {
        for (int k = 0; k < size; k++) {
          ret.table[i][j] += table[i][k] * othor.table[k][j];
        }
      }
    }
    return ret;
  }
  matrix<T> operator+(const matrix<T> &other) {
    matrix<T> ret(size);
    for (int i = 0; i < size; i++) {
      for (int j = 0; j < size; j++) {
        ret[i][j] = table[i][j] + other.table[i][j];
      }
    }
    return ret;
  }
  matrix<T> operator-(const matrix<T> &other) {
    matrix<T> ret(size);
    for (int i = 0; i < size; i++) {
      for (int j = 0; j < size; j++) {
        ret[i][j] = table[i][j] - other.table[i][j];
      }
    }
    return ret;
  }
  T trace(T num) {
    T ret = num;
    for (int i = 0; i < size; i++) {
      ret += table[i][i];
    }
    return ret;
  }
  T all_sum() {
    T ret = table[0][0];
    for (int i = 1; i < size; i++) {
      ret += table[0][i];
    }
    for (int i = 1; i < size; i++) {
      for (int j = 0; j < size; j++) {
        ret += table[i][j];
      }
    }
    return ret;
  }
};
template <typename T>
T power(T x, long long y) {
  if (y == 1) return x;
  if (y % 2) return x * power(x, y - 1);
  T tmp = power(x, y / 2);
  return tmp * tmp;
}
int main() {
  long long n, m, l, r;
  cin >> n >> m >> l >> r;
  if (n * m % 2) {
    cout << power(modint(r - l + 1), n * m) << endl;
    return 0;
  }
  l--;
  modint odd(0), even(0);
  odd += (r + 1) / 2;
  odd -= (l + 1) / 2;
  even += r / 2;
  even -= l / 2;
  matrix<modint> ma(2);
  ma.table[0][0] = even;
  ma.table[0][1] = odd;
  ma.table[1][1] = even;
  ma.table[1][0] = odd;
  ma = power(ma, n * m - 1);
  modint ans;
  ans = ma.table[0][1] * odd + ma.table[0][0] * even;
  cout << ans << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

646353335 26639522 600933409 772270276


(G.2) Fast Input

646353335 282521795 600933409 772270276


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using MaxHeap = std::priority_queue<T>; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using MinHeap = std::priority_queue<T, std::vector<T>, std::greater<T>>; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
inline bool chmax(T &a, T b) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  if (a < b) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    a = b; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    return true; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
inline bool chmin(T &a, T b) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  if (a > b) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    a = b; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    return true; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
std::vector<T> vec(int len, T elem) { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return std::vector<T>(len, elem); /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
void vdeb(std::vector<T> &da) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < da.size(); i++) { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    if (i == da.size() - 1) /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      std::cout << da[i]; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      std::cout << da[i] << ' '; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  std::cout << std::endl; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
void vdeb(std::vector<std::vector<T>> &da) { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < da.size(); i++) vdeb(da[i]); /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  std::cout << std::endl; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
long long pow(long long n, long long p, long long k) { /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  if (!k) return 1; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  long long a = pow(n, p, k >> 1); /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  a = a * a % p; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  if (k & 1) a = a * n % p; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  return a; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
void euclid(long long &a, long long &b, long long p) { /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  if (a == 1) { /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    a = 1; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    long long A = b, B = a % b; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    euclid(A, B, p); /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    b = (A - (p + a / b) % p * B % p + p) % p; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    a = B; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
long long rev(long long n, long long p) { return pow(n, p, p - 2); } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
long long bino(long long n, long long m, long long p) { /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 1, div = 1; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; i++) { /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    ans = (n - i) * ans % p; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    div = div * (i + 1) % p; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  return ans * rev(div, p) % p; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
struct modint { /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  long long num; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  long long p; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  modint() { /* line 71 slow_hit_count: 846, fast_hit_count: 79 */
    num = 0; /* line 72 slow_hit_count: 846, fast_hit_count: 79 */
    p = 998244353; /* line 73 slow_hit_count: 846, fast_hit_count: 79 */
  } /* line 74 slow_hit_count: 846, fast_hit_count: 79 */
  modint(int x) { /* line 75 slow_hit_count: 2, fast_hit_count: 0 */
    p = 998244353; /* line 76 slow_hit_count: 2, fast_hit_count: 0 */
    num = (long long)x % p; /* line 77 slow_hit_count: 2, fast_hit_count: 0 */
  } /* line 78 slow_hit_count: 2, fast_hit_count: 0 */
  modint(long long x) { /* line 79 slow_hit_count: 0, fast_hit_count: 1 */
    p = 998244353; /* line 80 slow_hit_count: 0, fast_hit_count: 1 */
    num = x % p; /* line 81 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 82 slow_hit_count: 0, fast_hit_count: 1 */
  modint operator+(const modint &other) { /* line 83 slow_hit_count: 1, fast_hit_count: 0 */
    modint ret; /* line 84 slow_hit_count: 1, fast_hit_count: 0 */
    ret.p = p; /* line 85 slow_hit_count: 1, fast_hit_count: 0 */
    ret.num = (num + other.num) % p; /* line 86 slow_hit_count: 1, fast_hit_count: 0 */
    return ret; /* line 87 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  modint operator+(const long long &other) { /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
    modint ret; /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
    ret.p = p; /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
    ret.num = (num + (other % p)) % p; /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  modint operator-(const modint &other) { /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
    modint ret; /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
    ret.p = p; /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
    ret.num = (num - other.num + p) % p; /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
  modint operator-(const long long &other) { /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
    modint ret; /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
    ret.p = p; /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
    ret.num = (num - (other % p) + p) % p; /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
  modint operator*(const modint &other) { /* line 107 slow_hit_count: 674, fast_hit_count: 79 */
    modint ret; /* line 108 slow_hit_count: 674, fast_hit_count: 79 */
    ret.p = p; /* line 109 slow_hit_count: 674, fast_hit_count: 79 */
    ret.num = (num * other.num) % p; /* line 110 slow_hit_count: 674, fast_hit_count: 79 */
    return ret; /* line 111 slow_hit_count: 674, fast_hit_count: 79 */
  } /* line 112 slow_hit_count: 0, fast_hit_count: 0 */
  modint operator*(const long long &other) { /* line 113 slow_hit_count: 0, fast_hit_count: 0 */
    modint ret; /* line 114 slow_hit_count: 0, fast_hit_count: 0 */
    ret.p = p; /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
    ret.num = (num * (other % p)) % p; /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
  modint operator/(const modint &other) { /* line 119 slow_hit_count: 0, fast_hit_count: 0 */
    modint ret; /* line 120 slow_hit_count: 0, fast_hit_count: 0 */
    ret.p = p; /* line 121 slow_hit_count: 0, fast_hit_count: 0 */
    ret.num = (num * rev(other.num, p)) % p; /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 123 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 124 slow_hit_count: 0, fast_hit_count: 0 */
  modint operator/(const long long &other) { /* line 125 slow_hit_count: 0, fast_hit_count: 0 */
    modint ret; /* line 126 slow_hit_count: 0, fast_hit_count: 0 */
    ret.p = p; /* line 127 slow_hit_count: 0, fast_hit_count: 0 */
    ret.num = (num * rev(other % p, p)) % p; /* line 128 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 129 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 130 slow_hit_count: 0, fast_hit_count: 0 */
  void operator+=(const long long &other) { num = (num + other) % p; } /* line 131 slow_hit_count: 2, fast_hit_count: 0 */
  void operator+=(const modint &other) { num = (num + other.num) % p; } /* line 132 slow_hit_count: 672, fast_hit_count: 0 */
  void operator-=(const long long &other) { num = (num - other + p) % p; } /* line 133 slow_hit_count: 2, fast_hit_count: 0 */
  void operator-=(const modint &other) { num = (num - other.num + p) % p; } /* line 134 slow_hit_count: 0, fast_hit_count: 0 */
  void operator*=(const long long &other) { num = (num * other) % p; } /* line 135 slow_hit_count: 0, fast_hit_count: 0 */
  void operator*=(const modint &other) { num = (num * other.num) % p; } /* line 136 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 137 slow_hit_count: 0, fast_hit_count: 0 */
std::ostream &operator<<(std::ostream &os, const modint &x) { /* line 138 slow_hit_count: 1, fast_hit_count: 1 */
  std::cout << x.num; /* line 139 slow_hit_count: 1, fast_hit_count: 1 */
  return os; /* line 140 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 141 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 142 slow_hit_count: 0, fast_hit_count: 0 */
struct matrix { /* line 143 slow_hit_count: 0, fast_hit_count: 0 */
  int size; /* line 144 slow_hit_count: 0, fast_hit_count: 0 */
  vector<vector<T>> table; /* line 145 slow_hit_count: 0, fast_hit_count: 0 */
  matrix(int n) { /* line 146 slow_hit_count: 85, fast_hit_count: 0 */
    size = n; /* line 147 slow_hit_count: 85, fast_hit_count: 0 */
    table = vector<vector<T>>(n, vector<T>(n)); /* line 148 slow_hit_count: 85, fast_hit_count: 0 */
  } /* line 149 slow_hit_count: 85, fast_hit_count: 0 */
  matrix<T> operator*(const matrix<T> &othor) { /* line 150 slow_hit_count: 84, fast_hit_count: 0 */
    matrix<T> ret(size); /* line 151 slow_hit_count: 84, fast_hit_count: 0 */
    for (int i = 0; i < size; i++) { /* line 152 slow_hit_count: 252, fast_hit_count: 0 */
      for (int j = 0; j < size; j++) { /* line 153 slow_hit_count: 504, fast_hit_count: 0 */
        for (int k = 0; k < size; k++) { /* line 154 slow_hit_count: 1008, fast_hit_count: 0 */
          ret.table[i][j] += table[i][k] * othor.table[k][j]; /* line 155 slow_hit_count: 672, fast_hit_count: 0 */
        } /* line 156 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 157 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 158 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 159 slow_hit_count: 84, fast_hit_count: 0 */
  } /* line 160 slow_hit_count: 0, fast_hit_count: 0 */
  matrix<T> operator+(const matrix<T> &other) { /* line 161 slow_hit_count: 0, fast_hit_count: 0 */
    matrix<T> ret(size); /* line 162 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < size; i++) { /* line 163 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = 0; j < size; j++) { /* line 164 slow_hit_count: 0, fast_hit_count: 0 */
        ret[i][j] = table[i][j] + other.table[i][j]; /* line 165 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 166 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 167 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 168 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 169 slow_hit_count: 0, fast_hit_count: 0 */
  matrix<T> operator-(const matrix<T> &other) { /* line 170 slow_hit_count: 0, fast_hit_count: 0 */
    matrix<T> ret(size); /* line 171 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < size; i++) { /* line 172 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = 0; j < size; j++) { /* line 173 slow_hit_count: 0, fast_hit_count: 0 */
        ret[i][j] = table[i][j] - other.table[i][j]; /* line 174 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 175 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 176 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 177 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 178 slow_hit_count: 0, fast_hit_count: 0 */
  T trace(T num) { /* line 179 slow_hit_count: 0, fast_hit_count: 0 */
    T ret = num; /* line 180 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < size; i++) { /* line 181 slow_hit_count: 0, fast_hit_count: 0 */
      ret += table[i][i]; /* line 182 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 183 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 184 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 185 slow_hit_count: 0, fast_hit_count: 0 */
  T all_sum() { /* line 186 slow_hit_count: 0, fast_hit_count: 0 */
    T ret = table[0][0]; /* line 187 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 1; i < size; i++) { /* line 188 slow_hit_count: 0, fast_hit_count: 0 */
      ret += table[0][i]; /* line 189 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 190 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 1; i < size; i++) { /* line 191 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = 0; j < size; j++) { /* line 192 slow_hit_count: 0, fast_hit_count: 0 */
        ret += table[i][j]; /* line 193 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 194 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 195 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 196 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 197 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 198 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 199 slow_hit_count: 0, fast_hit_count: 0 */
T power(T x, long long y) { /* line 200 slow_hit_count: 170, fast_hit_count: 160 */
  if (y == 1) return x; /* line 201 slow_hit_count: 170, fast_hit_count: 160 */
  if (y % 2) return x * power(x, y - 1); /* line 202 slow_hit_count: 168, fast_hit_count: 158 */
  T tmp = power(x, y / 2); /* line 203 slow_hit_count: 212, fast_hit_count: 114 */
  return tmp * tmp; /* line 204 slow_hit_count: 106, fast_hit_count: 114 */
} /* line 205 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 206 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, m, l, r; /* line 207 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m >> l >> r; /* line 208 slow_hit_count: 1, fast_hit_count: 1 */
  if (n * m % 2) { /* line 209 slow_hit_count: 1, fast_hit_count: 1 */
    cout << power(modint(r - l + 1), n * m) << endl; /* line 210 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 211 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 212 slow_hit_count: 0, fast_hit_count: 0 */
  l--; /* line 213 slow_hit_count: 1, fast_hit_count: 0 */
  modint odd(0), even(0); /* line 214 slow_hit_count: 1, fast_hit_count: 0 */
  odd += (r + 1) / 2; /* line 215 slow_hit_count: 1, fast_hit_count: 0 */
  odd -= (l + 1) / 2; /* line 216 slow_hit_count: 1, fast_hit_count: 0 */
  even += r / 2; /* line 217 slow_hit_count: 1, fast_hit_count: 0 */
  even -= l / 2; /* line 218 slow_hit_count: 1, fast_hit_count: 0 */
  matrix<modint> ma(2); /* line 219 slow_hit_count: 2, fast_hit_count: 0 */
  ma.table[0][0] = even; /* line 220 slow_hit_count: 1, fast_hit_count: 0 */
  ma.table[0][1] = odd; /* line 221 slow_hit_count: 1, fast_hit_count: 0 */
  ma.table[1][1] = even; /* line 222 slow_hit_count: 1, fast_hit_count: 0 */
  ma.table[1][0] = odd; /* line 223 slow_hit_count: 1, fast_hit_count: 0 */
  ma = power(ma, n * m - 1); /* line 224 slow_hit_count: 1, fast_hit_count: 0 */
  modint ans; /* line 225 slow_hit_count: 1, fast_hit_count: 0 */
  ans = ma.table[0][1] * odd + ma.table[0][0] * even; /* line 226 slow_hit_count: 1, fast_hit_count: 0 */
  cout << ans << endl; /* line 227 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 228 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the provided C program and derive performance-characterizing invariants, we need to analyze the given code and hit counts for both the "fast" and "slow" inputs. Let's go through the phases as outlined:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**  
   From the hit count data, we observe that certain parts of the code, specifically the matrix exponentiation and construction, have significantly more hits in the slow input compared to the fast input.  
   - The `modint` constructor and multiplication operator for `modint` have higher hit counts (lines 71-74 and 107-111).
   - The matrix constructor and multiplication operator for `matrix` show more activity (lines 146-149 and 150-159).
   - The `power` function for matrix exponentiation (lines 200-204) is heavily utilized.

2. **Pinpoint Lines/Functions with More Hits:**  
   - **Matrix Exponentiation:** Lines 200-204 (`power` function) are heavily hit during the slow input, suggesting that the matrix exponentiation process is a key contributor to the slowdown.
   - **Matrix Multiplication:** Lines 150-155 are executed frequently, indicating repeated matrix multiplication.

3. **Infer Interaction with Data Structures/Loops:**  
   - The slow input seems to trigger more iterations of the matrix multiplication, likely due to a larger exponent, `n * m - 1`, which results in more recursive calls in the `power` function.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following natural language performance invariants:

1. **Matrix Exponentiation Complexity:**
   - **Invariant:** "When the product of dimensions `n * m` is large and even, causing `n * m - 1` to result in a high exponent for matrix exponentiation, the computation becomes significantly slower."
   - **Explanation:** The power function for matrices has recursive calls, and when `n * m` is large, the recursion depth increases, leading to more matrix multiplications.

2. **Matrix Multiplication Overhead:**
   - **Invariant:** "If the matrix size and the number of operations (multiplications) in matrix exponentiation is large, the computational cost increases, causing a slowdown."
   - **Explanation:** With a 2x2 matrix, the operations are manageable, but frequent multiplications due to a large exponent result in cumulative overhead.

3. **Modular Arithmetic Operations:**
   - **Invariant:** "When operations involving `modint` objects are frequent due to large-scale matrix operations, it adds to the slowdown."
   - **Explanation:** Each matrix multiplication involves several `modint` operations, and when repeated excessively, it contributes to performance degradation.

### Conclusion

The program's slowdown for the "slow" input is primarily due to extensive matrix exponentiation triggered by a large product `n * m`. This results in frequent matrix multiplications and modular arithmetic operations, which collectively degrade performance. Adjusting the threshold for recursive depth or optimizing the matrix operations could potentially mitigate the slowdown.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Alice has got addicted to a game called Sirtet recently.

In Sirtet, player is given an n × m grid. Initially a_{i,j} cubes are stacked up in the cell (i,j). Two cells are called adjacent if they share a side. Player can perform the following operations: 

  * stack up one cube in two adjacent cells; 
  * stack up two cubes in one cell. 



Cubes mentioned above are identical in height.

Here is an illustration of the game. States on the right are obtained by performing one of the above operations on the state on the left, and grey cubes are added due to the operation.

<image>

Player's goal is to make the height of all cells the same (i.e. so that each cell has the same number of cubes in it) using above operations. 

Alice, however, has found out that on some starting grids she may never reach the goal no matter what strategy she uses. Thus, she is wondering the number of initial grids such that 

  * L ≤ a_{i,j} ≤ R for all 1 ≤ i ≤ n, 1 ≤ j ≤ m; 
  * player can reach the goal using above operations. 



Please help Alice with it. Notice that the answer might be large, please output the desired value modulo 998,244,353.

Input

The only line contains four integers n, m, L and R (1≤ n,m,L,R ≤ 10^9, L ≤ R, n ⋅ m ≥ 2).

Output

Output one integer, representing the desired answer modulo 998,244,353.

Examples

Input


2 2 1 1


Output


1


Input


1 2 1 2


Output


2

Note

In the first sample, the only initial grid that satisfies the requirements is a_{1,1}=a_{2,1}=a_{1,2}=a_{2,2}=1. Thus the answer should be 1.

In the second sample, initial grids that satisfy the requirements are a_{1,1}=a_{1,2}=1 and a_{1,1}=a_{1,2}=2. Thus the answer should be 2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived in natural language, we will now implement checker functions in C++.

1. **Matrix Exponentiation Complexity Checker:**

   This check will verify if the product `n * m` is large and even, indicating potential extensive matrix exponentiation.

   ```cpp
   void check_matrix_exponentiation_invariant(long long n, long long m) {
       if ((n * m) % 2 == 0 && (n * m) > 1e9) { // arbitrary large threshold
           cerr << "Warning: Performance bottleneck condition triggered - extensive matrix exponentiation!" << endl;
           abort();
       }
   }
   ```

2. **Matrix Multiplication Overhead Checker:**

   This check ensures the matrix operations don't become excessive due to large inputs.

   ```cpp
   void check_matrix_multiplication_invariant(long long n, long long m, int size) {
       if (size > 2 && (n * m) > 1e9) { // size is small but operations are frequent
           cerr << "Warning: Performance bottleneck condition triggered - excessive matrix multiplication!" << endl;
           abort();
       }
   }
   ```

3. **Modular Arithmetic Operations Checker:**

   This checks if the operations involving `modint` objects are frequent due to repetitive matrix manipulations.

   ```cpp
   void check_modular_arithmetic_invariant(long long n, long long m) {
       if ((n * m) > 1e9) {
           cerr << "Warning: Performance bottleneck condition triggered - frequent modular arithmetic operations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checkers into the Original Program

In this phase, we will integrate the checkers into the provided C++ code at effective points that align with each invariant.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long pow(long long n, long long p, long long k) {
    if (!k) return 1;
    long long a = pow(n, p, k >> 1);
    a = a * a % p;
    if (k & 1) a = a * n % p;
    return a;
}

void euclid(long long &a, long long &b, long long p) {
    if (a == 1) {
        a = 1;
    } else {
        long long A = b, B = a % b;
        euclid(A, B, p);
        b = (A - (p + a / b) % p * B % p + p) % p;
        a = B;
    }
}

long long rev(long long n, long long p) { return pow(n, p, p - 2); }

long long bino(long long n, long long m, long long p) {
    long long ans = 1, div = 1;
    for (int i = 0; i < m; i++) {
        ans = (n - i) * ans % p;
        div = div * (i + 1) % p;
    }
    return ans * rev(div, p) % p;
}

struct modint {
    long long num;
    long long p;
    modint() {
        num = 0;
        p = 998244353;
    }
    modint(int x) {
        p = 998244353;
        num = (long long)x % p;
    }
    modint(long long x) {
        p = 998244353;
        num = x % p;
    }
    modint operator+(const modint &other) {
        modint ret;
        ret.p = p;
        ret.num = (num + other.num) % p;
        return ret;
    }
    modint operator+(const long long &other) {
        modint ret;
        ret.p = p;
        ret.num = (num + (other % p)) % p;
        return ret;
    }
    modint operator-(const modint &other) {
        modint ret;
        ret.p = p;
        ret.num = (num - other.num + p) % p;
        return ret;
    }
    modint operator-(const long long &other) {
        modint ret;
        ret.p = p;
        ret.num = (num - (other % p) + p) % p;
        return ret;
    }
    modint operator*(const modint &other) {
        modint ret;
        ret.p = p;
        ret.num = (num * other.num) % p;
        return ret;
    }
    modint operator*(const long long &other) {
        modint ret;
        ret.p = p;
        ret.num = (num * (other % p)) % p;
        return ret;
    }
    modint operator/(const modint &other) {
        modint ret;
        ret.p = p;
        ret.num = (num * rev(other.num, p)) % p;
        return ret;
    }
    modint operator/(const long long &other) {
        modint ret;
        ret.p = p;
        ret.num = (num * rev(other % p, p)) % p;
        return ret;
    }
    void operator+=(const long long &other) { num = (num + other) % p; }
    void operator+=(const modint &other) { num = (num + other.num) % p; }
    void operator-=(const long long &other) { num = (num - other + p) % p; }
    void operator-=(const modint &other) { num = (num - other.num + p) % p; }
    void operator*=(const long long &other) { num = (num * other) % p; }
    void operator*=(const modint &other) { num = (num * other.num) % p; }
};

std::ostream &operator<<(std::ostream &os, const modint &x) {
    std::cout << x.num;
    return os;
}

template <typename T>
struct matrix {
    int size;
    vector<vector<T>> table;
    matrix(int n) {
        size = n;
        table = vector<vector<T>>(n, vector<T>(n));
    }
    matrix<T> operator*(const matrix<T> &othor) {
        matrix<T> ret(size);
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                for (int k = 0; k < size; k++) {
                    ret.table[i][j] += table[i][k] * othor.table[k][j];
                }
            }
        }
        return ret;
    }
    matrix<T> operator+(const matrix<T> &other) {
        matrix<T> ret(size);
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                ret[i][j] = table[i][j] + other.table[i][j];
            }
        }
        return ret;
    }
    matrix<T> operator-(const matrix<T> &other) {
        matrix<T> ret(size);
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                ret[i][j] = table[i][j] - other.table[i][j];
            }
        }
        return ret;
    }
    T trace(T num) {
        T ret = num;
        for (int i = 0; i < size; i++) {
            ret += table[i][i];
        }
        return ret;
    }
    T all_sum() {
        T ret = table[0][0];
        for (int i = 1; i < size; i++) {
            ret += table[0][i];
        }
        for (int i = 1; i < size; i++) {
            for (int j = 0; j < size; j++) {
                ret += table[i][j];
            }
        }
        return ret;
    }
};

template <typename T>
T power(T x, long long y) {
    if (y == 1) return x;
    if (y % 2) return x * power(x, y - 1);
    T tmp = power(x, y / 2);
    return tmp * tmp;
}

// Checkers inserted at strategic points
void check_matrix_exponentiation_invariant(long long n, long long m) {
    if ((n * m) % 2 == 0 && (n * m) > 1e9) { // arbitrary large threshold
        cerr << "Warning: Performance bottleneck condition triggered - extensive matrix exponentiation!" << endl;
        abort();
    }
}

void check_matrix_multiplication_invariant(long long n, long long m, int size) {
    if (size > 2 && (n * m) > 1e9) { // size is small but operations are frequent
        cerr << "Warning: Performance bottleneck condition triggered - excessive matrix multiplication!" << endl;
        abort();
    }
}

void check_modular_arithmetic_invariant(long long n, long long m) {
    if ((n * m) > 1e9) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent modular arithmetic operations!" << endl;
        abort();
    }
}

int main() {
    long long n, m, l, r;
    cin >> n >> m >> l >> r;

    // Insert checks after reading inputs
    check_matrix_exponentiation_invariant(n, m);
    check_matrix_multiplication_invariant(n, m, 2);
    check_modular_arithmetic_invariant(n, m);

    if (n * m % 2) {
        cout << power(modint(r - l + 1), n * m) << endl;
        return 0;
    }
    l--;
    modint odd(0), even(0);
    odd += (r + 1) / 2;
    odd -= (l + 1) / 2;
    even += r / 2;
    even -= l / 2;
    matrix<modint> ma(2);
    ma.table[0][0] = even;
    ma.table[0][1] = odd;
    ma.table[1][1] = even;
    ma.table[1][0] = odd;
    ma = power(ma, n * m - 1);
    modint ans;
    ans = ma.table[0][1] * odd + ma.table[0][0] * even;
    cout << ans << endl;
}
```

### Explanation

- **`check_matrix_exponentiation_invariant`**: This checker is placed after reading `n` and `m` to ensure that if the grid area is large and even, it warns about potential performance issues due to extensive matrix exponentiation.
  
- **`check_matrix_multiplication_invariant`**: Added after reading inputs to detect excessive matrix multiplication given a large grid area, checking before matrix operations begin.

- **`check_modular_arithmetic_invariant`**: This is ensured right after input reading to catch cases where excessive modular operations might occur due to the grid's size.

These checkers help ensure potential bottleneck conditions are identified early, improving the program's performance insights.

