system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Alice has got addicted to a game called Sirtet recently.

In Sirtet, player is given an n × m grid. Initially a_{i,j} cubes are stacked up in the cell (i,j). Two cells are called adjacent if they share a side. Player can perform the following operations: 

  * stack up one cube in two adjacent cells; 
  * stack up two cubes in one cell. 



Cubes mentioned above are identical in height.

Here is an illustration of the game. States on the right are obtained by performing one of the above operations on the state on the left, and grey cubes are added due to the operation.

<image>

Player's goal is to make the height of all cells the same (i.e. so that each cell has the same number of cubes in it) using above operations. 

Alice, however, has found out that on some starting grids she may never reach the goal no matter what strategy she uses. Thus, she is wondering the number of initial grids such that 

  * L ≤ a_{i,j} ≤ R for all 1 ≤ i ≤ n, 1 ≤ j ≤ m; 
  * player can reach the goal using above operations. 



Please help Alice with it. Notice that the answer might be large, please output the desired value modulo 998,244,353.

Input

The only line contains four integers n, m, L and R (1≤ n,m,L,R ≤ 10^9, L ≤ R, n ⋅ m ≥ 2).

Output

Output one integer, representing the desired answer modulo 998,244,353.

Examples

Input


2 2 1 1


Output


1


Input


1 2 1 2


Output


2

Note

In the first sample, the only initial grid that satisfies the requirements is a_{1,1}=a_{2,1}=a_{1,2}=a_{2,2}=1. Thus the answer should be 1.

In the second sample, initial grids that satisfy the requirements are a_{1,1}=a_{1,2}=1 and a_{1,1}=a_{1,2}=2. Thus the answer should be 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long mod = 998244353LL;
int kent, zuyg;
long long Solve1(int m);
long long Solve0(int m) {
  if (m == 1) return zuyg;
  static map<int, long long> cache;
  auto it = cache.find(m);
  if (it != cache.end()) return it->second;
  long long ans = 0;
  if (m % 2) {
    ans += (Solve0(1) * Solve0(m - 1)) % mod;
    ans += Solve1(1) * Solve1(m - 1);
  } else {
    ans += (Solve0(m / 2) * Solve0(m / 2)) % mod;
    ans += Solve1(m / 2) * Solve1(m / 2);
  }
  return cache[m] = (ans % mod);
}
long long Solve1(int m) {
  if (m == 1) return kent;
  static map<int, long long> cache;
  auto it = cache.find(m);
  if (it != cache.end()) return it->second;
  long long ans = 0;
  if (m % 2) {
    ans += (Solve0(1) * Solve1(m - 1)) % mod;
    ans += Solve1(1) * Solve0(m - 1);
  } else {
    ans += (Solve1(m / 2) * Solve0(m / 2)) % mod;
    ans += Solve0(m / 2) * Solve1(m / 2);
  }
  return cache[m] = (ans % mod);
}
long long Solve1(int n, int m);
long long Solve0(int n, int m) {
  static map<pair<int, int>, long long> cache;
  auto it = cache.find({n, m});
  if (it != cache.end()) return it->second;
  if (n == 1) return cache[{n, m}] = Solve0(m);
  int n1, n2;
  if (n % 2) {
    n1 = 1;
    n2 = n - 1;
  } else
    n1 = n2 = n / 2;
  long long ans = (Solve0(n1, m) * Solve0(n2, m)) % mod;
  ans += (Solve1(n1, m) * Solve1(n2, m)) % mod;
  return cache[{n, m}] = (ans % mod);
}
long long Solve1(int n, int m) {
  static map<pair<int, int>, long long> cache;
  auto it = cache.find({n, m});
  if (it != cache.end()) return it->second;
  if (n == 1) return cache[{n, m}] = Solve1(m);
  int n1, n2;
  if (n % 2) {
    n1 = 1;
    n2 = n - 1;
  } else
    n1 = n2 = n / 2;
  long long ans = (Solve0(n1, m) * Solve1(n2, m)) % mod;
  ans += (Solve1(n1, m) * Solve0(n2, m)) % mod;
  return cache[{n, m}] = (ans % mod);
}
long long Pow(long long a, long long p) {
  a %= mod;
  if (p == 0) return 1;
  if (p % 2) return (a * Pow(a, p - 1)) % mod;
  return Pow(a * a, p / 2);
}
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  long long n, m, l, r;
  cin >> n >> m >> l >> r;
  kent = (r + 1) / 2 - l / 2;
  zuyg = (r - l + 1) - kent;
  long long N = (n * (long long)m);
  if (N % 2LL == 0LL) {
    cout << (Pow(r - l + 1, N) - Solve1(n, m) + mod) % mod;
    return 0;
  }
  cout << Pow(r - l + 1, N);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

824436759 338642776 194713963 345824016


(G.2) Fast Input

824436759 415879151 194713963 345824016


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 998244353LL; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int kent, zuyg; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long Solve1(int m); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long Solve0(int m) { /* line 6 slow_hit_count: 165, fast_hit_count: 0 */
  if (m == 1) return zuyg; /* line 7 slow_hit_count: 165, fast_hit_count: 0 */
  static map<int, long long> cache; /* line 8 slow_hit_count: 135, fast_hit_count: 0 */
  auto it = cache.find(m); /* line 9 slow_hit_count: 135, fast_hit_count: 0 */
  if (it != cache.end()) return it->second; /* line 10 slow_hit_count: 135, fast_hit_count: 0 */
  long long ans = 0; /* line 11 slow_hit_count: 41, fast_hit_count: 0 */
  if (m % 2) { /* line 12 slow_hit_count: 41, fast_hit_count: 0 */
    ans += (Solve0(1) * Solve0(m - 1)) % mod; /* line 13 slow_hit_count: 13, fast_hit_count: 0 */
    ans += Solve1(1) * Solve1(m - 1); /* line 14 slow_hit_count: 13, fast_hit_count: 0 */
  } else { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    ans += (Solve0(m / 2) * Solve0(m / 2)) % mod; /* line 16 slow_hit_count: 28, fast_hit_count: 0 */
    ans += Solve1(m / 2) * Solve1(m / 2); /* line 17 slow_hit_count: 28, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  return cache[m] = (ans % mod); /* line 19 slow_hit_count: 41, fast_hit_count: 0 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
long long Solve1(int m) { /* line 21 slow_hit_count: 165, fast_hit_count: 0 */
  if (m == 1) return kent; /* line 22 slow_hit_count: 165, fast_hit_count: 0 */
  static map<int, long long> cache; /* line 23 slow_hit_count: 135, fast_hit_count: 0 */
  auto it = cache.find(m); /* line 24 slow_hit_count: 135, fast_hit_count: 0 */
  if (it != cache.end()) return it->second; /* line 25 slow_hit_count: 135, fast_hit_count: 0 */
  long long ans = 0; /* line 26 slow_hit_count: 41, fast_hit_count: 0 */
  if (m % 2) { /* line 27 slow_hit_count: 41, fast_hit_count: 0 */
    ans += (Solve0(1) * Solve1(m - 1)) % mod; /* line 28 slow_hit_count: 13, fast_hit_count: 0 */
    ans += Solve1(1) * Solve0(m - 1); /* line 29 slow_hit_count: 13, fast_hit_count: 0 */
  } else { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    ans += (Solve1(m / 2) * Solve0(m / 2)) % mod; /* line 31 slow_hit_count: 28, fast_hit_count: 0 */
    ans += Solve0(m / 2) * Solve1(m / 2); /* line 32 slow_hit_count: 28, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  return cache[m] = (ans % mod); /* line 34 slow_hit_count: 41, fast_hit_count: 0 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
long long Solve1(int n, int m); /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
long long Solve0(int n, int m) { /* line 37 slow_hit_count: 166, fast_hit_count: 0 */
  static map<pair<int, int>, long long> cache; /* line 38 slow_hit_count: 166, fast_hit_count: 0 */
  auto it = cache.find({n, m}); /* line 39 slow_hit_count: 166, fast_hit_count: 0 */
  if (it != cache.end()) return it->second; /* line 40 slow_hit_count: 166, fast_hit_count: 0 */
  if (n == 1) return cache[{n, m}] = Solve0(m); /* line 41 slow_hit_count: 42, fast_hit_count: 0 */
  int n1, n2; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  if (n % 2) { /* line 43 slow_hit_count: 41, fast_hit_count: 0 */
    n1 = 1; /* line 44 slow_hit_count: 12, fast_hit_count: 0 */
    n2 = n - 1; /* line 45 slow_hit_count: 12, fast_hit_count: 0 */
  } else /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    n1 = n2 = n / 2; /* line 47 slow_hit_count: 29, fast_hit_count: 0 */
  long long ans = (Solve0(n1, m) * Solve0(n2, m)) % mod; /* line 48 slow_hit_count: 41, fast_hit_count: 0 */
  ans += (Solve1(n1, m) * Solve1(n2, m)) % mod; /* line 49 slow_hit_count: 41, fast_hit_count: 0 */
  return cache[{n, m}] = (ans % mod); /* line 50 slow_hit_count: 41, fast_hit_count: 0 */
} /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
long long Solve1(int n, int m) { /* line 52 slow_hit_count: 167, fast_hit_count: 0 */
  static map<pair<int, int>, long long> cache; /* line 53 slow_hit_count: 167, fast_hit_count: 0 */
  auto it = cache.find({n, m}); /* line 54 slow_hit_count: 167, fast_hit_count: 0 */
  if (it != cache.end()) return it->second; /* line 55 slow_hit_count: 167, fast_hit_count: 0 */
  if (n == 1) return cache[{n, m}] = Solve1(m); /* line 56 slow_hit_count: 43, fast_hit_count: 0 */
  int n1, n2; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  if (n % 2) { /* line 58 slow_hit_count: 42, fast_hit_count: 0 */
    n1 = 1; /* line 59 slow_hit_count: 13, fast_hit_count: 0 */
    n2 = n - 1; /* line 60 slow_hit_count: 13, fast_hit_count: 0 */
  } else /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    n1 = n2 = n / 2; /* line 62 slow_hit_count: 29, fast_hit_count: 0 */
  long long ans = (Solve0(n1, m) * Solve1(n2, m)) % mod; /* line 63 slow_hit_count: 42, fast_hit_count: 0 */
  ans += (Solve1(n1, m) * Solve0(n2, m)) % mod; /* line 64 slow_hit_count: 42, fast_hit_count: 0 */
  return cache[{n, m}] = (ans % mod); /* line 65 slow_hit_count: 42, fast_hit_count: 0 */
} /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
long long Pow(long long a, long long p) { /* line 67 slow_hit_count: 91, fast_hit_count: 90 */
  a %= mod; /* line 68 slow_hit_count: 91, fast_hit_count: 90 */
  if (p == 0) return 1; /* line 69 slow_hit_count: 91, fast_hit_count: 90 */
  if (p % 2) return (a * Pow(a, p - 1)) % mod; /* line 70 slow_hit_count: 90, fast_hit_count: 89 */
  return Pow(a * a, p / 2); /* line 71 slow_hit_count: 57, fast_hit_count: 58 */
} /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, m, l, r; /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m >> l >> r; /* line 78 slow_hit_count: 1, fast_hit_count: 1 */
  kent = (r + 1) / 2 - l / 2; /* line 79 slow_hit_count: 1, fast_hit_count: 1 */
  zuyg = (r - l + 1) - kent; /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
  long long N = (n * (long long)m); /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
  if (N % 2LL == 0LL) { /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
    cout << (Pow(r - l + 1, N) - Solve1(n, m) + mod) % mod; /* line 83 slow_hit_count: 1, fast_hit_count: 0 */
    return 0; /* line 84 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
  cout << Pow(r - l + 1, N); /* line 86 slow_hit_count: 0, fast_hit_count: 1 */
} /* line 87 slow_hit_count: 0, fast_hit_count: 1 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit counts provided, the following observations and inferences can be made about the code's behavior under the slow input:

1. **Solve0 and Solve1 Recursion**: 
   - The functions `Solve0(int m)` and `Solve1(int m)` are hit 165 times each for the slow input, but not at all for the fast input.
   - The lines involving recursive calls within these functions (lines 13, 14, 16, 17 for `Solve0` and lines 28, 29, 31, 32 for `Solve1`) have significant hit counts for the slow input and none for the fast input.
   - This suggests that recursion depth and the number of recursive calls are substantial for the slow input, pointing to a potential inefficiency in handling certain values of `m`.

2. **Caching Mechanism**:
   - The code utilizes caching with maps to store computed results for `Solve0` and `Solve1`, possibly to reduce redundant computations.
   - Despite this optimization, the hit counts indicate that the cache retrieval lines (lines 10, 25, 40, 55) are frequently accessed but might not effectively reduce recursive depth in the slow case, possibly due to cache misses or insufficient cache coverage.

3. **Solve0 and Solve1 Functions for Grids**:
   - The functions `Solve0(int n, int m)` and `Solve1(int n, int m)` show 166 and 167 hits respectively for the slow input, which suggests high recursion or iteration over the grid dimensions.
   - Lines 43, 48, 49, and their counterparts in `Solve1` (lines 58, 63, 64) show significant hit counts, indicating repeated recursive calls and multiplications, which can be computationally expensive.

4. **Pow Function**:
   - The `Pow` function shows almost equal hit counts for both inputs. However, the majority of the slowdown is indicated in the recursive calls of `Solve0` and `Solve1`, marking them as the primary bottleneck rather than `Pow`.

## Phase 2: Derive Performance-Characterizing Invariants

Based on the observations, here are natural language invariants that describe conditions under which the program likely enters a slow path:

1. **Invariant 1 - High Recursion Depth and Grid Size**:
   - "If the number of grid cells, `n * m`, is such that it leads to high recursion depth in the `Solve0` and `Solve1` functions due to an odd grid dimension, performance may degrade significantly. This typically happens when one of the dimensions is heavily unbalanced, causing a deep recursive exploration."

2. **Invariant 2 - Cache Inefficiency**:
   - "If the caching mechanism does not effectively cover the recursive calls in `Solve0` and `Solve1`, possibly due to unique combinations of `(n, m)` pairs or `m` values, the program may slow down due to repeated computations that could not be cached."

3. **Invariant 3 - Recursive Multiplications**:
   - "When recursive functions `Solve0` and `Solve1` repeatedly multiply results from large subproblems, which occurs when `m` is large and odd, the cost of these operations may trigger a slowdown."

4. **Invariant 4 - Grid Size and Symmetry Impact**:
   - "If `n` and `m` are such that the number of recursive calls remains high due to lack of symmetry (i.e., one dimension is much smaller), the program may struggle with excessive calls leading to a performance bottleneck."

These invariants suggest that specific characteristics of the input dimensions and recursive call depth lead to inefficiencies, especially when caching does not cover all possible recursions or when the problem structure inherently requires deep recursion.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Alice has got addicted to a game called Sirtet recently.

In Sirtet, player is given an n × m grid. Initially a_{i,j} cubes are stacked up in the cell (i,j). Two cells are called adjacent if they share a side. Player can perform the following operations: 

  * stack up one cube in two adjacent cells; 
  * stack up two cubes in one cell. 



Cubes mentioned above are identical in height.

Here is an illustration of the game. States on the right are obtained by performing one of the above operations on the state on the left, and grey cubes are added due to the operation.

<image>

Player's goal is to make the height of all cells the same (i.e. so that each cell has the same number of cubes in it) using above operations. 

Alice, however, has found out that on some starting grids she may never reach the goal no matter what strategy she uses. Thus, she is wondering the number of initial grids such that 

  * L ≤ a_{i,j} ≤ R for all 1 ≤ i ≤ n, 1 ≤ j ≤ m; 
  * player can reach the goal using above operations. 



Please help Alice with it. Notice that the answer might be large, please output the desired value modulo 998,244,353.

Input

The only line contains four integers n, m, L and R (1≤ n,m,L,R ≤ 10^9, L ≤ R, n ⋅ m ≥ 2).

Output

Output one integer, representing the desired answer modulo 998,244,353.

Examples

Input


2 2 1 1


Output


1


Input


1 2 1 2


Output


2

Note

In the first sample, the only initial grid that satisfies the requirements is a_{1,1}=a_{2,1}=a_{1,2}=a_{2,2}=1. Thus the answer should be 1.

In the second sample, initial grids that satisfy the requirements are a_{1,1}=a_{1,2}=1 and a_{1,1}=a_{1,2}=2. Thus the answer should be 2.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing Invariants as Runtime Checks in C++

Here, I'll translate the natural language invariants into C++ code to check the performance conditions at runtime.

1. **Invariant 1 - High Recursion Depth and Grid Size**:

```cpp
void check_recursion_depth_high_grid_size(long long n, long long m) {
    if ((n * m) % 2 == 1 && (n > 100000 || m > 100000)) {
        cerr << "Warning: High recursion depth due to large grid with odd dimension!" << endl;
        abort();
    }
}
```

2. **Invariant 2 - Cache Inefficiency**:

```cpp
void check_cache_inefficiency(int n, int m, const map<pair<int, int>, long long>& cache) {
    if (cache.size() > 1000000 && n * m < 100000) {
        cerr << "Warning: Cache inefficiency - excessive cache entries for small n*m!" << endl;
        abort();
    }
}
```

3. **Invariant 3 - Recursive Multiplications**:

```cpp
void check_recursive_multiplications(int m) {
    if (m % 2 == 1 && m > 10000) {
        cerr << "Warning: Recursive multiplications on odd m leading to bottlenecks!" << endl;
        abort();
    }
}
```

4. **Invariant 4 - Grid Size and Symmetry Impact**:

```cpp
void check_grid_size_symmetry(long long n, long long m) {
    if (abs(n - m) > 500000) {
        cerr << "Warning: Grid size asymmetry causing recursive imbalance!" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checks into the Original C++ Program

Now, I'll integrate the checker C++ code snippets into the original program. These checks will be placed strategically to monitor potential performance bottlenecks effectively.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long mod = 998244353LL;
int kent, zuyg;

// Invariant checkers
void check_recursion_depth_high_grid_size(long long n, long long m) {
    if ((n * m) % 2 == 1 && (n > 100000 || m > 100000)) {
        cerr << "Warning: High recursion depth due to large grid with odd dimension!" << endl;
        abort();
    }
}

void check_cache_inefficiency(int n, int m, const map<pair<int, int>, long long>& cache) {
    if (cache.size() > 1000000 && n * m < 100000) {
        cerr << "Warning: Cache inefficiency - excessive cache entries for small n*m!" << endl;
        abort();
    }
}

void check_recursive_multiplications(int m) {
    if (m % 2 == 1 && m > 10000) {
        cerr << "Warning: Recursive multiplications on odd m leading to bottlenecks!" << endl;
        abort();
    }
}

void check_grid_size_symmetry(long long n, long long m) {
    if (abs(n - m) > 500000) {
        cerr << "Warning: Grid size asymmetry causing recursive imbalance!" << endl;
        abort();
    }
}

long long Solve1(int m);
long long Solve0(int m) {
    if (m == 1) return zuyg;
    static map<int, long long> cache;
    auto it = cache.find(m);
    if (it != cache.end()) return it->second;
    long long ans = 0;
    if (m % 2) {
        ans += (Solve0(1) * Solve0(m - 1)) % mod;
        ans += Solve1(1) * Solve1(m - 1);
    } else {
        ans += (Solve0(m / 2) * Solve0(m / 2)) % mod;
        ans += Solve1(m / 2) * Solve1(m / 2);
    }
    return cache[m] = (ans % mod);
}

long long Solve1(int m) {
    if (m == 1) return kent;
    static map<int, long long> cache;
    auto it = cache.find(m);
    if (it != cache.end()) return it->second;
    long long ans = 0;
    if (m % 2) {
        ans += (Solve0(1) * Solve1(m - 1)) % mod;
        ans += Solve1(1) * Solve0(m - 1);
    } else {
        ans += (Solve1(m / 2) * Solve0(m / 2)) % mod;
        ans += Solve0(m / 2) * Solve1(m / 2);
    }
    return cache[m] = (ans % mod);
}

long long Solve1(int n, int m);
long long Solve0(int n, int m) {
    static map<pair<int, int>, long long> cache;
    auto it = cache.find({n, m});
    if (it != cache.end()) return it->second;
    if (n == 1) return cache[{n, m}] = Solve0(m);
    check_cache_inefficiency(n, m, cache); // Cache inefficiency check
    int n1, n2;
    if (n % 2) {
        n1 = 1;
        n2 = n - 1;
    } else
        n1 = n2 = n / 2;
    long long ans = (Solve0(n1, m) * Solve0(n2, m)) % mod;
    ans += (Solve1(n1, m) * Solve1(n2, m)) % mod;
    return cache[{n, m}] = (ans % mod);
}

long long Solve1(int n, int m) {
    static map<pair<int, int>, long long> cache;
    auto it = cache.find({n, m});
    if (it != cache.end()) return it->second;
    if (n == 1) return cache[{n, m}] = Solve1(m);
    check_cache_inefficiency(n, m, cache); // Cache inefficiency check
    int n1, n2;
    if (n % 2) {
        n1 = 1;
        n2 = n - 1;
    } else
        n1 = n2 = n / 2;
    long long ans = (Solve0(n1, m) * Solve1(n2, m)) % mod;
    ans += (Solve1(n1, m) * Solve0(n2, m)) % mod;
    return cache[{n, m}] = (ans % mod);
}

long long Pow(long long a, long long p) {
    a %= mod;
    if (p == 0) return 1;
    if (p % 2) return (a * Pow(a, p - 1)) % mod;
    return Pow(a * a, p / 2);
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    long long n, m, l, r;
    cin >> n >> m >> l >> r;

    // Integrate the checks based on the performance invariants
    check_recursion_depth_high_grid_size(n, m); // Check for high recursion depth
    check_grid_size_symmetry(n, m); // Check for grid size symmetry impact

    kent = (r + 1) / 2 - l / 2;
    zuyg = (r - l + 1) - kent;
    long long N = (n * (long long)m);
    if (N % 2LL == 0LL) {
        cout << (Pow(r - l + 1, N) - Solve1(n, m) + mod) % mod;
        return 0;
    }
    cout << Pow(r - l + 1, N);
}
```

### Explanation of Integrated Checks:

- **High Recursion Depth Check**: Placed early in the `main()` function to abort if the grid size leads to high recursion due to odd dimensions.
- **Cache Inefficiency Check**: Placed within `Solve0` and `Solve1` functions to monitor the size of the cache, ensuring that it stays efficient.
- **Recursive Multiplications Check**: Although not explicitly needing a location here, it could be used before recursive calls to avoid deep recursion on odd `m`.
- **Grid Size Symmetry Check**: Also placed early in `main()` to prevent execution if there is a heavy imbalance between `n` and `m`.

These checks will help identify and abort on performance bottlenecks, assisting in diagnosing inefficiencies during execution.

