system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Alice has got addicted to a game called Sirtet recently.

In Sirtet, player is given an n × m grid. Initially a_{i,j} cubes are stacked up in the cell (i,j). Two cells are called adjacent if they share a side. Player can perform the following operations: 

  * stack up one cube in two adjacent cells; 
  * stack up two cubes in one cell. 



Cubes mentioned above are identical in height.

Here is an illustration of the game. States on the right are obtained by performing one of the above operations on the state on the left, and grey cubes are added due to the operation.

<image>

Player's goal is to make the height of all cells the same (i.e. so that each cell has the same number of cubes in it) using above operations. 

Alice, however, has found out that on some starting grids she may never reach the goal no matter what strategy she uses. Thus, she is wondering the number of initial grids such that 

  * L ≤ a_{i,j} ≤ R for all 1 ≤ i ≤ n, 1 ≤ j ≤ m; 
  * player can reach the goal using above operations. 



Please help Alice with it. Notice that the answer might be large, please output the desired value modulo 998,244,353.

Input

The only line contains four integers n, m, L and R (1≤ n,m,L,R ≤ 10^9, L ≤ R, n ⋅ m ≥ 2).

Output

Output one integer, representing the desired answer modulo 998,244,353.

Examples

Input


2 2 1 1


Output


1


Input


1 2 1 2


Output


2

Note

In the first sample, the only initial grid that satisfies the requirements is a_{1,1}=a_{2,1}=a_{1,2}=a_{2,2}=1. Thus the answer should be 1.

In the second sample, initial grids that satisfy the requirements are a_{1,1}=a_{1,2}=1 and a_{1,1}=a_{1,2}=2. Thus the answer should be 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void println(vector<int> x) {
  for (int i = 0; i < ((int)x.size()); ++i)
    printf("%d%c", x[i], " \n"[i == (int)x.size() - 1]);
}
void scanln(vector<int>& x, int sz) {
  x.resize(sz);
  for (int i = 0; i < (sz); ++i) scanf("%d", &x[i]);
}
template <class T>
void read(T* x, int l, int r) {
  for (int i = (l); i <= (r); ++i) read(x[i]);
}
void println(int* x, int l, int r) {
  for (int i = (l); i <= (r); ++i) printf("%d%c", x[i], " \n"[i == r]);
}
long long myrand(long long mod) {
  return ((long long)rand() << 32 ^ (long long)rand() << 16 ^ rand()) % mod;
}
void println(vector<long long> x) {
  for (int i = 0; i < ((int)x.size()); ++i)
    printf("%lld%c", x[i], " \n"[i == (int)x.size() - 1]);
}
void scanln(vector<long long>& x, int sz) {
  x.resize(sz);
  for (int i = 0; i < (sz); ++i) scanf("%lld", &x[i]);
}
void println(long long* x, int l, int r) {
  for (int i = (l); i <= (r); ++i) printf("%lld%c", x[i], " \n"[i == r]);
}
long long L, R;
void getdp(int n, unordered_map<int, long long>& col_odd,
           unordered_map<int, long long>& col_even) {
  if (col_odd.find(n) != col_odd.end()) return;
  if (n == 1) {
    col_even[n] = R / 2 - (L + 1) / 2 + 1;
    col_odd[n] = R - L + 1 - col_even[n];
    col_even[n] %= 998244353LL;
    col_odd[n] %= 998244353LL;
  } else {
    getdp(n / 2, col_odd, col_even);
    if (n % 2) getdp(n - n / 2, col_odd, col_even);
    col_odd[n] = ((col_odd[n / 2] * col_even[n - n / 2]) % 998244353LL +
                  (col_even[n / 2] * col_odd[n - n / 2]) % 998244353LL) %
                 998244353LL;
    col_even[n] = ((col_odd[n / 2] * col_odd[n - n / 2]) % 998244353LL +
                   (col_even[n / 2] * col_even[n - n / 2]) % 998244353LL) %
                  998244353LL;
  }
}
void getdp2(int m, unordered_map<int, long long>& odd,
            unordered_map<int, long long>& even) {
  if (odd.find(m) != odd.end()) return;
  getdp2(m / 2, odd, even);
  if (m % 2) getdp2(m - m / 2, odd, even);
  odd[m] = ((odd[m / 2] * even[m - m / 2]) % 998244353LL +
            (even[m / 2] * odd[m - m / 2]) % 998244353LL) %
           998244353LL;
  even[m] = ((odd[m / 2] * odd[m - m / 2]) % 998244353LL +
             (even[m / 2] * even[m - m / 2]) % 998244353LL) %
            998244353LL;
}
long long doit(long long n, long long m) {
  unordered_map<int, long long> col_odd, col_even;
  getdp(n, col_odd, col_even);
  unordered_map<int, long long> odd, even;
  odd[1] = col_odd[n];
  even[1] = col_even[n];
  getdp2(m, odd, even);
  return (m % 2 == 1 && n % 2 == 1) ? (even[m] + odd[m]) % 998244353LL
                                    : even[m];
}
int main(int argc, char* argv[]) {
  int n, m;
  scanf("%d%d", &n, &m);
  ;
  scanf("%lld%lld", &L, &R);
  printf("%lld\n", doit(n, m));
  ;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

999999999 999999999 1 998244353


(G.2) Fast Input

2 2 1 998244353


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void println(vector<int> x) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < ((int)x.size()); ++i) /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%d%c", x[i], " \n"[i == (int)x.size() - 1]); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void scanln(vector<int>& x, int sz) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  x.resize(sz); /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < (sz); ++i) scanf("%d", &x[i]); /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
void read(T* x, int l, int r) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (l); i <= (r); ++i) read(x[i]); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
void println(int* x, int l, int r) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (l); i <= (r); ++i) printf("%d%c", x[i], " \n"[i == r]); /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
long long myrand(long long mod) { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  return ((long long)rand() << 32 ^ (long long)rand() << 16 ^ rand()) % mod; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
void println(vector<long long> x) { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < ((int)x.size()); ++i) /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%lld%c", x[i], " \n"[i == (int)x.size() - 1]); /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
void scanln(vector<long long>& x, int sz) { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  x.resize(sz); /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < (sz); ++i) scanf("%lld", &x[i]); /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
void println(long long* x, int l, int r) { /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (l); i <= (r); ++i) printf("%lld%c", x[i], " \n"[i == r]); /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
long long L, R; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
void getdp(int n, unordered_map<int, long long>& col_odd, /* line 33 slow_hit_count: 88, fast_hit_count: 2 */
           unordered_map<int, long long>& col_even) { /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  if (col_odd.find(n) != col_odd.end()) return; /* line 35 slow_hit_count: 88, fast_hit_count: 2 */
  if (n == 1) { /* line 36 slow_hit_count: 59, fast_hit_count: 2 */
    col_even[n] = R / 2 - (L + 1) / 2 + 1; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
    col_odd[n] = R - L + 1 - col_even[n]; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
    col_even[n] %= 998244353LL; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
    col_odd[n] %= 998244353LL; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  } else { /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    getdp(n / 2, col_odd, col_even); /* line 42 slow_hit_count: 58, fast_hit_count: 1 */
    if (n % 2) getdp(n - n / 2, col_odd, col_even); /* line 43 slow_hit_count: 58, fast_hit_count: 1 */
    col_odd[n] = ((col_odd[n / 2] * col_even[n - n / 2]) % 998244353LL + /* line 44 slow_hit_count: 58, fast_hit_count: 1 */
                  (col_even[n / 2] * col_odd[n - n / 2]) % 998244353LL) % /* line 45 slow_hit_count: 58, fast_hit_count: 1 */
                 998244353LL; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    col_even[n] = ((col_odd[n / 2] * col_odd[n - n / 2]) % 998244353LL + /* line 47 slow_hit_count: 58, fast_hit_count: 1 */
                   (col_even[n / 2] * col_even[n - n / 2]) % 998244353LL) % /* line 48 slow_hit_count: 58, fast_hit_count: 1 */
                  998244353LL; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
void getdp2(int m, unordered_map<int, long long>& odd, /* line 52 slow_hit_count: 88, fast_hit_count: 2 */
            unordered_map<int, long long>& even) { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  if (odd.find(m) != odd.end()) return; /* line 54 slow_hit_count: 88, fast_hit_count: 2 */
  getdp2(m / 2, odd, even); /* line 55 slow_hit_count: 58, fast_hit_count: 1 */
  if (m % 2) getdp2(m - m / 2, odd, even); /* line 56 slow_hit_count: 58, fast_hit_count: 1 */
  odd[m] = ((odd[m / 2] * even[m - m / 2]) % 998244353LL + /* line 57 slow_hit_count: 58, fast_hit_count: 1 */
            (even[m / 2] * odd[m - m / 2]) % 998244353LL) % /* line 58 slow_hit_count: 58, fast_hit_count: 1 */
           998244353LL; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  even[m] = ((odd[m / 2] * odd[m - m / 2]) % 998244353LL + /* line 60 slow_hit_count: 58, fast_hit_count: 1 */
             (even[m / 2] * even[m - m / 2]) % 998244353LL) % /* line 61 slow_hit_count: 58, fast_hit_count: 1 */
            998244353LL; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
long long doit(long long n, long long m) { /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  unordered_map<int, long long> col_odd, col_even; /* line 65 slow_hit_count: 2, fast_hit_count: 2 */
  getdp(n, col_odd, col_even); /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  unordered_map<int, long long> odd, even; /* line 67 slow_hit_count: 2, fast_hit_count: 2 */
  odd[1] = col_odd[n]; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  even[1] = col_even[n]; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  getdp2(m, odd, even); /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  return (m % 2 == 1 && n % 2 == 1) ? (even[m] + odd[m]) % 998244353LL /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
                                    : even[m]; /* line 72 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
int main(int argc, char* argv[]) { /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d%d", &n, &m); /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%lld%lld", &L, &R); /* line 78 slow_hit_count: 1, fast_hit_count: 1 */
  printf("%lld\n", doit(n, m)); /* line 79 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 82 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the given C code and derive performance-characterizing invariants, let's analyze the provided data step-by-step:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The `getdp` and `getdp2` functions are hit significantly more often for the slow input compared to the fast input. Specifically:
     - `getdp` at lines 33 and 35: 88 hits for slow input vs. 2 hits for fast input.
     - `getdp2` at lines 52 and 54: 88 hits for slow input vs. 2 hits for fast input.

2. **Pinpoint Expensive Lines:**
   - The recursive calls `getdp(n / 2, col_odd, col_even)` and `getdp2(m / 2, odd, even)` suggest that the recursion depth is high for large values of `n` and `m`, leading to exponential behavior.
   - The lines computing `col_odd[n]` and `col_even[n]` (lines 44-48) and equivalent lines in `getdp2` suggest heavy computational work due to recursive multiplication and modular operations, especially when recursion dives deep.

3. **Interaction with Data Structures:**
   - The use of unordered_maps indicates dynamic storage of results, potentially avoiding recomputation, yet recursive depth and branching factor seem to outweigh these benefits for large inputs.

### Phase 2: Derive Performance-Characterizing Invariants

Now, let's create natural language statements that capture the likely slow path conditions:

1. **Recursion Depth and Input Size:**
   - When both `n` and `m` are very large, the recursive depth increases significantly, leading to performance degradation due to extensive recursive calls and computations.
   - Natural Language Invariant: "If both dimensions of the grid (n and m) are large, the recursive depth and branching factor in computing operations greatly increase, potentially leading to exponential computation time."

2. **Branching and Recursive Computations:**
   - The recursive functions repeatedly calculate combinations of results, which can be computationally expensive with large inputs.
   - Natural Language Invariant: "If the code involves recursive calculations over grid dimensions that are close to maximum, the branching and depth of recursion may cause severe performance issues."

3. **Unbounded Problem Size:**
   - The problem size is influenced by the input data constraints, particularly when the grid size approaches upper limits of constraints.
   - Natural Language Invariant: "For grid dimensions approaching the constraint boundaries, the recursive functions utilize significant computational resources, leading to potential slowdowns."

These invariants abstractly describe the conditions where performance issues might occur, without relying on specific numeric values from the inputs. The focus is on recursive depth, input size, and computational complexity, which are broad enough to capture future slow scenarios while being realistic given the problem's constraints (like `n, m <= 10^9`).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Alice has got addicted to a game called Sirtet recently.

In Sirtet, player is given an n × m grid. Initially a_{i,j} cubes are stacked up in the cell (i,j). Two cells are called adjacent if they share a side. Player can perform the following operations: 

  * stack up one cube in two adjacent cells; 
  * stack up two cubes in one cell. 



Cubes mentioned above are identical in height.

Here is an illustration of the game. States on the right are obtained by performing one of the above operations on the state on the left, and grey cubes are added due to the operation.

<image>

Player's goal is to make the height of all cells the same (i.e. so that each cell has the same number of cubes in it) using above operations. 

Alice, however, has found out that on some starting grids she may never reach the goal no matter what strategy she uses. Thus, she is wondering the number of initial grids such that 

  * L ≤ a_{i,j} ≤ R for all 1 ≤ i ≤ n, 1 ≤ j ≤ m; 
  * player can reach the goal using above operations. 



Please help Alice with it. Notice that the answer might be large, please output the desired value modulo 998,244,353.

Input

The only line contains four integers n, m, L and R (1≤ n,m,L,R ≤ 10^9, L ≤ R, n ⋅ m ≥ 2).

Output

Output one integer, representing the desired answer modulo 998,244,353.

Examples

Input


2 2 1 1


Output


1


Input


1 2 1 2


Output


2

Note

In the first sample, the only initial grid that satisfies the requirements is a_{1,1}=a_{2,1}=a_{1,2}=a_{2,2}=1. Thus the answer should be 1.

In the second sample, initial grids that satisfy the requirements are a_{1,1}=a_{1,2}=1 and a_{1,1}=a_{1,2}=2. Thus the answer should be 2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants in C++

Based on the natural language invariants derived earlier, we will create checker functions in C++ to monitor potential performance bottlenecks in the code.

1. **High Recursion Depth for Large Input Sizes:**

   This invariant checks if both `n` and `m` are large, which could lead to deep recursion and extensive computation.

   ```cpp
   void check_large_grid_size(int n, int m) {
       if (n > 1000000 && m > 1000000) {
           cerr << "Warning: Performance bottleneck condition triggered - large grid size!" << endl;
           abort();
       }
   }
   ```

2. **Recursive Branching and Computation Complexity:**

   This invariant checks for situations where the depth of recursion, combined with the branching factor, may lead to performance issues.

   ```cpp
   void check_recursive_depth(int n, int m) {
       if ((n > 1000000 || m > 1000000) && (n % 2 == 1 || m % 2 == 1)) {
           cerr << "Warning: Performance bottleneck condition triggered - high recursion depth!" << endl;
           abort();
       }
   }
   ```

3. **Unbounded Problem Size:**

   This invariant verifies the grid dimensions are approaching the constraint boundaries, which may trigger excessive computational requirements.

   ```cpp
   void check_unbounded_problem_size(int n, int m) {
       if (n * m > 1000000000) {
           cerr << "Warning: Performance bottleneck condition triggered - unbounded problem size!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

Let's integrate these checker functions into the original C++ program at effective points in the control flow. These checks should be inserted just after reading the inputs to avoid adding unnecessary overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for grid size
void check_large_grid_size(int n, int m) {
    if (n > 1000000 && m > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - large grid size!" << endl;
        abort();
    }
}

// Checker function for recursive depth
void check_recursive_depth(int n, int m) {
    if ((n > 1000000 || m > 1000000) && (n % 2 == 1 || m % 2 == 1)) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth!" << endl;
        abort();
    }
}

// Checker function for unbounded problem size
void check_unbounded_problem_size(int n, int m) {
    if (n * m > 1000000000) {
        cerr << "Warning: Performance bottleneck condition triggered - unbounded problem size!" << endl;
        abort();
    }
}

void getdp(int n, unordered_map<int, long long>& col_odd,
           unordered_map<int, long long>& col_even) {
    if (col_odd.find(n) != col_odd.end()) return;
    if (n == 1) {
        col_even[n] = R / 2 - (L + 1) / 2 + 1;
        col_odd[n] = R - L + 1 - col_even[n];
        col_even[n] %= 998244353LL;
        col_odd[n] %= 998244353LL;
    } else {
        getdp(n / 2, col_odd, col_even);
        if (n % 2) getdp(n - n / 2, col_odd, col_even);
        col_odd[n] = ((col_odd[n / 2] * col_even[n - n / 2]) % 998244353LL +
                      (col_even[n / 2] * col_odd[n - n / 2]) % 998244353LL) %
                     998244353LL;
        col_even[n] = ((col_odd[n / 2] * col_odd[n - n / 2]) % 998244353LL +
                       (col_even[n / 2] * col_even[n - n / 2]) % 998244353LL) %
                      998244353LL;
    }
}

void getdp2(int m, unordered_map<int, long long>& odd,
            unordered_map<int, long long>& even) {
    if (odd.find(m) != odd.end()) return;
    getdp2(m / 2, odd, even);
    if (m % 2) getdp2(m - m / 2, odd, even);
    odd[m] = ((odd[m / 2] * even[m - m / 2]) % 998244353LL +
              (even[m / 2] * odd[m - m / 2]) % 998244353LL) %
             998244353LL;
    even[m] = ((odd[m / 2] * odd[m - m / 2]) % 998244353LL +
               (even[m / 2] * even[m - m / 2]) % 998244353LL) %
              998244353LL;
}

long long doit(long long n, long long m) {
    unordered_map<int, long long> col_odd, col_even;
    getdp(n, col_odd, col_even);
    unordered_map<int, long long> odd, even;
    odd[1] = col_odd[n];
    even[1] = col_even[n];
    getdp2(m, odd, even);
    return (m % 2 == 1 && n % 2 == 1) ? (even[m] + odd[m]) % 998244353LL
                                      : even[m];
}

int main(int argc, char* argv[]) {
    int n, m;
    scanf("%d%d", &n, &m);
    scanf("%lld%lld", &L, &R);

    // Insert checks after reading inputs
    check_large_grid_size(n, m);
    check_recursive_depth(n, m);
    check_unbounded_problem_size(n, m);

    printf("%lld\n", doit(n, m));
    return 0;
}
```

### Explanation

- **`check_large_grid_size`**: This function checks if `n` and `m` are both larger than a certain threshold (chosen arbitrarily as 1,000,000 for demonstration purposes) and triggers a warning if this condition is met.
- **`check_recursive_depth`**: This function checks for large values of `n` or `m` and odd dimensions that might impact recursive depth and branching complexity.
- **`check_unbounded_problem_size`**: This function checks if the total grid size `n * m` exceeds a large threshold, indicating a potentially unmanageable problem size.

These checks are implemented right after reading inputs to ensure that they do not add unnecessary overhead during computation.

