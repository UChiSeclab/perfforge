system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Alice has got addicted to a game called Sirtet recently.

In Sirtet, player is given an n × m grid. Initially a_{i,j} cubes are stacked up in the cell (i,j). Two cells are called adjacent if they share a side. Player can perform the following operations: 

  * stack up one cube in two adjacent cells; 
  * stack up two cubes in one cell. 



Cubes mentioned above are identical in height.

Here is an illustration of the game. States on the right are obtained by performing one of the above operations on the state on the left, and grey cubes are added due to the operation.

<image>

Player's goal is to make the height of all cells the same (i.e. so that each cell has the same number of cubes in it) using above operations. 

Alice, however, has found out that on some starting grids she may never reach the goal no matter what strategy she uses. Thus, she is wondering the number of initial grids such that 

  * L ≤ a_{i,j} ≤ R for all 1 ≤ i ≤ n, 1 ≤ j ≤ m; 
  * player can reach the goal using above operations. 



Please help Alice with it. Notice that the answer might be large, please output the desired value modulo 998,244,353.

Input

The only line contains four integers n, m, L and R (1≤ n,m,L,R ≤ 10^9, L ≤ R, n ⋅ m ≥ 2).

Output

Output one integer, representing the desired answer modulo 998,244,353.

Examples

Input


2 2 1 1


Output


1


Input


1 2 1 2


Output


2

Note

In the first sample, the only initial grid that satisfies the requirements is a_{1,1}=a_{2,1}=a_{1,2}=a_{2,2}=1. Thus the answer should be 1.

In the second sample, initial grids that satisfy the requirements are a_{1,1}=a_{1,2}=1 and a_{1,1}=a_{1,2}=2. Thus the answer should be 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using row = vector<long long>;
using mat = vector<row>;
const int MOD = 998244353;
mat operator*(mat a, mat b) {
  mat ret = mat(a.size(), row(b[0].size()));
  for (int i = 0; i < ret.size(); i++)
    for (int j = 0; j < ret[i].size(); j++)
      for (int k = 0; k < ret[i].size(); k++)
        ret[i][j] = (ret[i][j] + a[i][k] * b[k][j]) % MOD;
  return ret;
}
mat operator^(mat b, long long p) {
  if (p == 1) return b;
  if (p & 1) return b * (b ^ (p - 1));
  return (b * b) ^ (p / 2);
}
int main() {
  ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  int n, m, l, r;
  cin >> n >> m >> l >> r;
  int options = r - l + 1;
  int zeros = options / 2 + (l % 2 == 0 && r % 2 == 0);
  int ones = options - zeros;
  mat a = {{1, 0}};
  mat t = {{zeros, ones}, {ones, zeros}};
  a = (a * (t ^ (n * 1ll * m)));
  int ans = a[0][0];
  if (n & 1 && m & 1) ans = (ans + a[0][1]) % MOD;
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

999999999 999999999 1 998244353


(G.2) Fast Input

2 2 1 998244353


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using row = vector<long long>; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using mat = vector<row>; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 998244353; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
mat operator*(mat a, mat b) { /* line 6 slow_hit_count: 86, fast_hit_count: 3 */
  mat ret = mat(a.size(), row(b[0].size())); /* line 7 slow_hit_count: 172, fast_hit_count: 6 */
  for (int i = 0; i < ret.size(); i++) /* line 8 slow_hit_count: 257, fast_hit_count: 8 */
    for (int j = 0; j < ret[i].size(); j++) /* line 9 slow_hit_count: 513, fast_hit_count: 15 */
      for (int k = 0; k < ret[i].size(); k++) /* line 10 slow_hit_count: 1026, fast_hit_count: 30 */
        ret[i][j] = (ret[i][j] + a[i][k] * b[k][j]) % MOD; /* line 11 slow_hit_count: 684, fast_hit_count: 20 */
  return ret; /* line 12 slow_hit_count: 86, fast_hit_count: 3 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
mat operator^(mat b, long long p) { /* line 14 slow_hit_count: 86, fast_hit_count: 3 */
  if (p == 1) return b; /* line 15 slow_hit_count: 86, fast_hit_count: 3 */
  if (p & 1) return b * (b ^ (p - 1)); /* line 16 slow_hit_count: 85, fast_hit_count: 2 */
  return (b * b) ^ (p / 2); /* line 17 slow_hit_count: 118, fast_hit_count: 4 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0), cin.tie(0), cout.tie(0); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, l, r; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m >> l >> r; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  int options = r - l + 1; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  int zeros = options / 2 + (l % 2 == 0 && r % 2 == 0); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int ones = options - zeros; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  mat a = {{1, 0}}; /* line 26 slow_hit_count: 5, fast_hit_count: 5 */
  mat t = {{zeros, ones}, {ones, zeros}}; /* line 27 slow_hit_count: 6, fast_hit_count: 6 */
  a = (a * (t ^ (n * 1ll * m))); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = a[0][0]; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  if (n & 1 && m & 1) ans = (ans + a[0][1]) % MOD; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  cout << ans; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 32 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Based on the given information, let's analyze the performance characteristics of the C program in question and derive natural language performance invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments
1. **Line-Level Hit Count Comparison**: 
   - The `operator*` function (lines 6-12) and the `operator^` function (lines 14-17) are hit significantly more often in the slow input compared to the fast input.
   - Specifically, lines 10 and 11 within the `operator*` function are the most frequently hit lines, indicating that the nested loop structure is executed many times, particularly for the slow input.

2. **Expensive Operations**:
   - **Matrix Multiplication**: The matrix multiplication operator (`operator*`) contains three nested loops, which can become costly as matrix sizes increase.
   - **Exponentiation by Squaring**: The matrix exponentiation (`operator^`) repeatedly invokes matrix multiplication, especially when the power (`n * m`) is large.

3. **Interaction with Input Constraints**:
   - The slowdown is evident when `n * m` is large because the matrix exponentiation function `operator^` involves repeated squaring and multiplication of matrices.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Matrix Size and Operations Invariant**:
   - **Natural Language Description**: "If the product of `n` and `m` is large, resulting in high matrix exponentiation depth, the program may slow down due to frequent and repeated matrix multiplications."
   - **Explanation**: As `n * m` increases, the depth of recursion and number of matrix multiplications in `operator^` increase substantially, causing a significant slowdown.

2. **Exponentiation Invariant**:
   - **Natural Language Description**: "When `n * m` is close to the upper constraint (e.g., reaching the maximum feasible values due to constraints like `n <= 10^9`), matrix exponentiation can become a significant bottleneck due to extensive recursive calls and multiplications."
   - **Explanation**: The recursive nature of the matrix exponentiation and the inherent cost of matrix multiplications create a performance bottleneck when the input size approaches the constraint limit.

3. **Loop Depth Invariant**:
   - **Natural Language Description**: "If the matrix operations involve deeply nested loops, especially with large dimensions, the program may experience degradation due to excessive computational overhead."
   - **Explanation**: Deeply nested loops in matrix operations, particularly when matrices are large or when multiplied frequently, can become inefficient, leading to performance degradation.

These invariants provide insights into conditions likely to trigger slow execution paths in the program, abstracted from specific numeric input values but mindful of constraints such as large matrix dimensions or high multiplication depth.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Alice has got addicted to a game called Sirtet recently.

In Sirtet, player is given an n × m grid. Initially a_{i,j} cubes are stacked up in the cell (i,j). Two cells are called adjacent if they share a side. Player can perform the following operations: 

  * stack up one cube in two adjacent cells; 
  * stack up two cubes in one cell. 



Cubes mentioned above are identical in height.

Here is an illustration of the game. States on the right are obtained by performing one of the above operations on the state on the left, and grey cubes are added due to the operation.

<image>

Player's goal is to make the height of all cells the same (i.e. so that each cell has the same number of cubes in it) using above operations. 

Alice, however, has found out that on some starting grids she may never reach the goal no matter what strategy she uses. Thus, she is wondering the number of initial grids such that 

  * L ≤ a_{i,j} ≤ R for all 1 ≤ i ≤ n, 1 ≤ j ≤ m; 
  * player can reach the goal using above operations. 



Please help Alice with it. Notice that the answer might be large, please output the desired value modulo 998,244,353.

Input

The only line contains four integers n, m, L and R (1≤ n,m,L,R ≤ 10^9, L ≤ R, n ⋅ m ≥ 2).

Output

Output one integer, representing the desired answer modulo 998,244,353.

Examples

Input


2 2 1 1


Output


1


Input


1 2 1 2


Output


2

Note

In the first sample, the only initial grid that satisfies the requirements is a_{1,1}=a_{2,1}=a_{1,2}=a_{2,2}=1. Thus the answer should be 1.

In the second sample, initial grids that satisfy the requirements are a_{1,1}=a_{1,2}=1 and a_{1,1}=a_{1,2}=2. Thus the answer should be 2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the previously derived natural language performance invariants, we will now implement them as runtime checks in C++. Here are the implementations for each invariant:

1. **Matrix Size and Operations Invariant**:
   - **C++ Code Implementation**:
   ```cpp
   void check_matrix_operations_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - large matrix exponentiation depth!" << endl;
           abort();
       }
   }
   ```

2. **Exponentiation Invariant**:
   - **C++ Code Implementation**:
   ```cpp
   void check_exponentiation_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - high exponentiation depth!" << endl;
           abort();
       }
   }
   ```

3. **Loop Depth Invariant**:
   - **C++ Code Implementation**:
   ```cpp
   void check_loop_depth_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - deeply nested loops with large dimensions!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checks with the Original Program

Let's now integrate these invariant checks into the original C++ program at appropriate locations, ensuring they do not introduce significant overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;
using row = vector<long long>;
using mat = vector<row>;
const int MOD = 998244353;

// Implementations of the checker functions:
void check_matrix_operations_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large matrix exponentiation depth!" << endl;
        abort();
    }
}

void check_exponentiation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high exponentiation depth!" << endl;
        abort();
    }
}

void check_loop_depth_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - deeply nested loops with large dimensions!" << endl;
        abort();
    }
}

// Helper functions for matrix operations
mat operator*(mat a, mat b) {
    mat ret = mat(a.size(), row(b[0].size()));
    for (int i = 0; i < ret.size(); i++)
        for (int j = 0; j < ret[i].size(); j++)
            for (int k = 0; k < ret[i].size(); k++)
                ret[i][j] = (ret[i][j] + a[i][k] * b[k][j]) % MOD;
    return ret;
}

mat operator^(mat b, long long p) {
    if (p == 1) return b;
    if (p & 1) return b * (b ^ (p - 1));
    return (b * b) ^ (p / 2);
}

int main() {
    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    int n, m, l, r;
    cin >> n >> m >> l >> r;

    // Inserting checks based on performance invariants:
    check_matrix_operations_invariant(n * m > 1e9); // Check large matrix dimension product
    check_exponentiation_invariant(n * m > 1e9);    // Check high exponentiation depth
    check_loop_depth_invariant(n * m > 1e9);        // Check deeply nested loops with large matrices

    int options = r - l + 1;
    int zeros = options / 2 + (l % 2 == 0 && r % 2 == 0);
    int ones = options - zeros;
    mat a = {{1, 0}};
    mat t = {{zeros, ones}, {ones, zeros}};
    a = (a * (t ^ (n * 1ll * m)));
    int ans = a[0][0];
    if (n & 1 && m & 1) ans = (ans + a[0][1]) % MOD;
    cout << ans;
}
```

### Explanation
- **Checker Function Placement**: The checks are strategically placed right after reading the input values `n` and `m`. This placement ensures that any potential performance bottlenecks due to large matrix operations, exponentiation depth, or nested loops are immediately detected.
- **Thresholds**: The condition `n * m > 1e9` is used to detect excessive operations given the constraints. Adjust this threshold as necessary based on empirical performance testing.
- **No Overhead in Tight Loops**: The checks are outside the matrix operations, ensuring they do not add overhead to the computationally expensive sections of the code.

