system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Alice has got addicted to a game called Sirtet recently.

In Sirtet, player is given an n × m grid. Initially a_{i,j} cubes are stacked up in the cell (i,j). Two cells are called adjacent if they share a side. Player can perform the following operations: 

  * stack up one cube in two adjacent cells; 
  * stack up two cubes in one cell. 



Cubes mentioned above are identical in height.

Here is an illustration of the game. States on the right are obtained by performing one of the above operations on the state on the left, and grey cubes are added due to the operation.

<image>

Player's goal is to make the height of all cells the same (i.e. so that each cell has the same number of cubes in it) using above operations. 

Alice, however, has found out that on some starting grids she may never reach the goal no matter what strategy she uses. Thus, she is wondering the number of initial grids such that 

  * L ≤ a_{i,j} ≤ R for all 1 ≤ i ≤ n, 1 ≤ j ≤ m; 
  * player can reach the goal using above operations. 



Please help Alice with it. Notice that the answer might be large, please output the desired value modulo 998,244,353.

Input

The only line contains four integers n, m, L and R (1≤ n,m,L,R ≤ 10^9, L ≤ R, n ⋅ m ≥ 2).

Output

Output one integer, representing the desired answer modulo 998,244,353.

Examples

Input


2 2 1 1


Output


1


Input


1 2 1 2


Output


2

Note

In the first sample, the only initial grid that satisfies the requirements is a_{1,1}=a_{2,1}=a_{1,2}=a_{2,2}=1. Thus the answer should be 1.

In the second sample, initial grids that satisfy the requirements are a_{1,1}=a_{1,2}=1 and a_{1,1}=a_{1,2}=2. Thus the answer should be 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long MOD = 998244353;
long long n, m, L, R;
struct S {
  long long x, pe, po;
};
bool operator<(const S self, const S other) {
  if (self.x == other.x)
    return (self.pe == other.pe ? self.po < other.po : self.pe < other.pe);
  return self.x < other.x;
}
map<S, long long> M;
long long binpow(long long x, long long pw) {
  if (pw == 1) return x;
  if (pw == 0) return 1;
  if (pw % 2 == 1) return x * binpow(x, pw - 1) % MOD;
  long long k = binpow(x, pw / 2);
  return k * k % MOD;
}
long long ans(long long cnt, bool pe, bool po) {
  if (M.count({cnt, pe, po})) return M[{cnt, pe, po}];
  if (cnt % 2 == 1) {
    if (pe == po) return 0;
    M[{cnt, pe, po}] = (ans(cnt - 1, 0, 0) * ans(1, pe, po) +
                        ans(cnt - 1, 1, 1) * ans(1, pe ^ 1, po ^ 1)) %
                       MOD;
    return M[{cnt, pe, po}];
  }
  if (cnt % 2 == 0) {
    if (pe != po) return 0;
    if (pe) {
      M[{cnt, pe, po}] = (ans(cnt / 2, 0, 1) * ans(cnt / 2, 1, 0) * 2 +
                          ans(cnt / 2, 0, 0) * ans(cnt / 2, 1, 1) * 2) %
                         MOD;
    } else {
      M[{cnt, pe, po}] =
          (binpow(ans(cnt / 2, 0, 0), 2) + binpow(ans(cnt / 2, 1, 1), 2) +
           binpow(ans(cnt / 2, 0, 1), 2) + binpow(ans(cnt / 2, 1, 0), 2)) %
          MOD;
    }
    return M[{cnt, pe, po}];
  }
}
signed main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cin >> n >> m >> L >> R;
  M[{1, 0, 1}] = (R - L + 1) / 2 + (L % 2 == R % 2 && R % 2 == 1);
  M[{1, 1, 0}] = (R - L + 1) / 2 + (L % 2 == R % 2 && R % 2 == 0);
  if (n * m % 2 == 1) {
    cout << binpow(R - L + 1, n * m);
    return 0;
  }
  cout << ans(n * m, 0, 0) << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1076117758 300009121 565317265 947272048


(G.2) Fast Input

946835863 300009121 565317265 947272048


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 998244353; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m, L, R; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
struct S { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  long long x, pe, po; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
bool operator<(const S self, const S other) { /* line 8 slow_hit_count: 13135, fast_hit_count: 3 */
  if (self.x == other.x) /* line 9 slow_hit_count: 13135, fast_hit_count: 3 */
    return (self.pe == other.pe ? self.po < other.po : self.pe < other.pe); /* line 10 slow_hit_count: 3232, fast_hit_count: 3 */
  return self.x < other.x; /* line 11 slow_hit_count: 9903, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
map<S, long long> M; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
long long binpow(long long x, long long pw) { /* line 14 slow_hit_count: 464, fast_hit_count: 91 */
  if (pw == 1) return x; /* line 15 slow_hit_count: 464, fast_hit_count: 91 */
  if (pw == 0) return 1; /* line 16 slow_hit_count: 232, fast_hit_count: 90 */
  if (pw % 2 == 1) return x * binpow(x, pw - 1) % MOD; /* line 17 slow_hit_count: 232, fast_hit_count: 90 */
  long long k = binpow(x, pw / 2); /* line 18 slow_hit_count: 232, fast_hit_count: 57 */
  return k * k % MOD; /* line 19 slow_hit_count: 232, fast_hit_count: 57 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
long long ans(long long cnt, bool pe, bool po) { /* line 21 slow_hit_count: 749, fast_hit_count: 0 */
  if (M.count({cnt, pe, po})) return M[{cnt, pe, po}]; /* line 22 slow_hit_count: 749, fast_hit_count: 0 */
  if (cnt % 2 == 1) { /* line 23 slow_hit_count: 417, fast_hit_count: 0 */
    if (pe == po) return 0; /* line 24 slow_hit_count: 218, fast_hit_count: 0 */
    M[{cnt, pe, po}] = (ans(cnt - 1, 0, 0) * ans(1, pe, po) + /* line 25 slow_hit_count: 72, fast_hit_count: 0 */
                        ans(cnt - 1, 1, 1) * ans(1, pe ^ 1, po ^ 1)) % /* line 26 slow_hit_count: 72, fast_hit_count: 0 */
                       MOD; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    return M[{cnt, pe, po}]; /* line 28 slow_hit_count: 72, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  if (cnt % 2 == 0) { /* line 30 slow_hit_count: 199, fast_hit_count: 0 */
    if (pe != po) return 0; /* line 31 slow_hit_count: 199, fast_hit_count: 0 */
    if (pe) { /* line 32 slow_hit_count: 115, fast_hit_count: 0 */
      M[{cnt, pe, po}] = (ans(cnt / 2, 0, 1) * ans(cnt / 2, 1, 0) * 2 + /* line 33 slow_hit_count: 114, fast_hit_count: 0 */
                          ans(cnt / 2, 0, 0) * ans(cnt / 2, 1, 1) * 2) % /* line 34 slow_hit_count: 57, fast_hit_count: 0 */
                         MOD; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      M[{cnt, pe, po}] = /* line 37 slow_hit_count: 58, fast_hit_count: 0 */
          (binpow(ans(cnt / 2, 0, 0), 2) + binpow(ans(cnt / 2, 1, 1), 2) + /* line 38 slow_hit_count: 58, fast_hit_count: 0 */
           binpow(ans(cnt / 2, 0, 1), 2) + binpow(ans(cnt / 2, 1, 0), 2)) % /* line 39 slow_hit_count: 58, fast_hit_count: 0 */
          MOD; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    return M[{cnt, pe, po}]; /* line 42 slow_hit_count: 115, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> L >> R; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  M[{1, 0, 1}] = (R - L + 1) / 2 + (L % 2 == R % 2 && R % 2 == 1); /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  M[{1, 1, 0}] = (R - L + 1) / 2 + (L % 2 == R % 2 && R % 2 == 0); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  if (n * m % 2 == 1) { /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
    cout << binpow(R - L + 1, n * m); /* line 52 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 53 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans(n * m, 0, 0) << "\n"; /* line 55 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 56 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To diagnose the performance issue and derive conditions/invariants, we follow these phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - **Operator Overloading (Lines 8-11):** The operator `<` is called significantly more for the slow input (`13135` times) compared to the fast input (`3` times). This suggests that sorting or map operations are more frequent or more complex in the slow case.
   - **`ans` Function Calls (Lines 21-42):** The `ans` function is called `749` times in the slow input but not at all in the fast input. This indicates that the slow input requires deeper or repeated recursion, leading to more extensive dynamic programming operations.
   - **`binpow` Function (Lines 14-19):** This function is invoked `464` times for the slow input, compared to `91` for the fast input. The difference in hit counts shows longer or more frequent power calculations.

2. **Inference on Data Structures and Input Constraints:**
   - **Map Operations (`std::map<S, long long> M`):** The map is frequently accessed and updated, suggesting it is central to solving the problem for the slow input. The complexity increases with the number of unique keys accessed.
   - **Recursive and Dynamic Programming (`ans` function):** Recursion depth and dynamic programming operations seem to be heavily used in the slow input, especially when `n * m` is even, invoking `ans(n * m, 0, 0)`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the natural language statements describing conditions under which the program enters a slow path:

1. **Data Structure Complexity:**
   - *Invariant:* "If the grid size `n * m` is large and even, and there are many unique states in the dynamic programming table (`map<M, long long>`), the program may slow down significantly. This occurs because numerous recursive calls are made for handling even grid sizes, leading to repeated computations."
   
2. **Recursive Depth and Complexity:**
   - *Invariant:* "When `n * m` is even and large, the recursive function `ans` requires deeper exploration of possible even distribution of cubes, resulting in high recursion depth and increased computation time."
   
3. **Exponentiation Overhead:**
   - *Invariant:* "If the power function `binpow` is called frequently with large exponents, the computation time increases due to repeated multiplications and modulus operations, particularly impacting performance when `n` or `m` is large."

These invariants abstractly capture the conditions that lead to performance degradation, focusing on the interaction between grid size, dynamic programming complexity, and recursive depth without relying on specific numeric values from the input.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Alice has got addicted to a game called Sirtet recently.

In Sirtet, player is given an n × m grid. Initially a_{i,j} cubes are stacked up in the cell (i,j). Two cells are called adjacent if they share a side. Player can perform the following operations: 

  * stack up one cube in two adjacent cells; 
  * stack up two cubes in one cell. 



Cubes mentioned above are identical in height.

Here is an illustration of the game. States on the right are obtained by performing one of the above operations on the state on the left, and grey cubes are added due to the operation.

<image>

Player's goal is to make the height of all cells the same (i.e. so that each cell has the same number of cubes in it) using above operations. 

Alice, however, has found out that on some starting grids she may never reach the goal no matter what strategy she uses. Thus, she is wondering the number of initial grids such that 

  * L ≤ a_{i,j} ≤ R for all 1 ≤ i ≤ n, 1 ≤ j ≤ m; 
  * player can reach the goal using above operations. 



Please help Alice with it. Notice that the answer might be large, please output the desired value modulo 998,244,353.

Input

The only line contains four integers n, m, L and R (1≤ n,m,L,R ≤ 10^9, L ≤ R, n ⋅ m ≥ 2).

Output

Output one integer, representing the desired answer modulo 998,244,353.

Examples

Input


2 2 1 1


Output


1


Input


1 2 1 2


Output


2

Note

In the first sample, the only initial grid that satisfies the requirements is a_{1,1}=a_{2,1}=a_{1,2}=a_{2,2}=1. Thus the answer should be 1.

In the second sample, initial grids that satisfy the requirements are a_{1,1}=a_{1,2}=1 and a_{1,1}=a_{1,2}=2. Thus the answer should be 2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

I will now translate the performance-characterizing invariants into C++ code that checks the conditions at runtime:

1. **Data Structure Complexity:**
   - **Invariant:** If the grid size `n * m` is large and even, and there are many unique states in the dynamic programming table (`map<M, long long>`), the program may slow down significantly.

   ```cpp
   void check_map_invariant(long long nm, size_t mapSize) {
       if (nm % 2 == 0 && mapSize > 10000) {  // Threshold chosen based on performance profiling insights
           cerr << "Warning: Performance bottleneck condition triggered - excessive states in dynamic programming table!" << endl;
           abort();
       }
   }
   ```

2. **Recursive Depth and Complexity:**
   - **Invariant:** When `n * m` is even and large, the recursive function `ans` requires deeper exploration of possible even distribution of cubes.

   ```cpp
   void check_recursive_invariant(long long nm, long long recursionDepth) {
       if (nm % 2 == 0 && recursionDepth > 1000) {  // Assumes 1000 as a threshold for "deep" recursion
           cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth!" << endl;
           abort();
       }
   }
   ```

3. **Exponentiation Overhead:**
   - **Invariant:** If the power function `binpow` is called frequently with large exponents, the computation time increases.

   ```cpp
   void check_exponentiation_invariant(long long exponent) {
       if (exponent > 1000000) {  // Arbitrary large exponent threshold
           cerr << "Warning: Performance bottleneck condition triggered - large exponent in binpow!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checkers into the Original Program

Now, let's integrate these checks into the provided C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long MOD = 998244353;
long long n, m, L, R;
struct S {
    long long x, pe, po;
};
bool operator<(const S self, const S other) {
    if (self.x == other.x)
        return (self.pe == other.pe ? self.po < other.po : self.pe < other.pe);
    return self.x < other.x;
}
map<S, long long> M;

void check_map_invariant(long long nm, size_t mapSize) {
    if (nm % 2 == 0 && mapSize > 10000) {  // Check for excessive map entries
        cerr << "Warning: Performance bottleneck condition triggered - excessive states in dynamic programming table!" << endl;
        abort();
    }
}

void check_recursive_invariant(long long nm, long long recursionDepth) {
    if (nm % 2 == 0 && recursionDepth > 1000) {  // Check for excessive recursion depth
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth!" << endl;
        abort();
    }
}

void check_exponentiation_invariant(long long exponent) {
    if (exponent > 1000000) {  // Check for large exponent in binpow
        cerr << "Warning: Performance bottleneck condition triggered - large exponent in binpow!" << endl;
        abort();
    }
}

long long binpow(long long x, long long pw) {
    check_exponentiation_invariant(pw);  // Check before computation
    if (pw == 1) return x;
    if (pw == 0) return 1;
    if (pw % 2 == 1) return x * binpow(x, pw - 1) % MOD;
    long long k = binpow(x, pw / 2);
    return k * k % MOD;
}

long long ans(long long cnt, bool pe, bool po, long long depth = 0) {
    check_recursive_invariant(n * m, depth);  // Check for recursion depth
    if (M.count({cnt, pe, po})) return M[{cnt, pe, po}];
    if (cnt % 2 == 1) {
        if (pe == po) return 0;
        M[{cnt, pe, po}] = (ans(cnt - 1, 0, 0, depth + 1) * ans(1, pe, po, depth + 1) +
                            ans(cnt - 1, 1, 1, depth + 1) * ans(1, pe ^ 1, po ^ 1, depth + 1)) %
                           MOD;
        return M[{cnt, pe, po}];
    }
    if (cnt % 2 == 0) {
        if (pe != po) return 0;
        if (pe) {
            M[{cnt, pe, po}] = (ans(cnt / 2, 0, 1, depth + 1) * ans(cnt / 2, 1, 0, depth + 1) * 2 +
                                ans(cnt / 2, 0, 0, depth + 1) * ans(cnt / 2, 1, 1, depth + 1) * 2) %
                               MOD;
        } else {
            M[{cnt, pe, po}] =
                (binpow(ans(cnt / 2, 0, 0, depth + 1), 2) + binpow(ans(cnt / 2, 1, 1, depth + 1), 2) +
                 binpow(ans(cnt / 2, 0, 1, depth + 1), 2) + binpow(ans(cnt / 2, 1, 0, depth + 1), 2)) %
                MOD;
        }
        return M[{cnt, pe, po}];
    }
}

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cin >> n >> m >> L >> R;
    M[{1, 0, 1}] = (R - L + 1) / 2 + (L % 2 == R % 2 && R % 2 == 1);
    M[{1, 1, 0}] = (R - L + 1) / 2 + (L % 2 == R % 2 && R % 2 == 0);
    
    check_map_invariant(n * m, M.size());  // Check for map size
    
    if (n * m % 2 == 1) {
        cout << binpow(R - L + 1, n * m);
        return 0;
    }
    cout << ans(n * m, 0, 0) << "\n";
}
```

### Explanation of Instrumented Code

- **Checker Functions:** Implemented as helper functions to verify the conditions derived from the natural language invariants.
- **Placement of Checks:**
  - **`check_map_invariant`** is invoked after setting initial values in the map to ensure excessive states aren't formed later.
  - **`check_recursive_invariant`** is called at each recursive invocation of `ans` to monitor and control recursion depth.
  - **`check_exponentiation_invariant`** is placed in `binpow` to assert the exponent's size before computation.

By instrumenting the code with these checks, we provide a safety net to detect and abort execution if performance-degrading conditions are encountered, aiding in debugging and optimization efforts.

