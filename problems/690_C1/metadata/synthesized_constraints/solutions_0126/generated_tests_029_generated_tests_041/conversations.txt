system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

One particularly well-known fact about zombies is that they move and think terribly slowly. While we still don't know why their movements are so sluggish, the problem of laggy thinking has been recently resolved. It turns out that the reason is not (as previously suspected) any kind of brain defect – it's the opposite! Independent researchers confirmed that the nervous system of a zombie is highly complicated – it consists of n brains (much like a cow has several stomachs). They are interconnected by brain connectors, which are veins capable of transmitting thoughts between brains. There are two important properties such a brain network should have to function properly: 

  1. It should be possible to exchange thoughts between any two pairs of brains (perhaps indirectly, through other brains). 
  2. There should be no redundant brain connectors, that is, removing any brain connector would make property 1 false. 



If both properties are satisfied, we say that the nervous system is valid. Unfortunately (?), if the system is not valid, the zombie stops thinking and becomes (even more) dead. Your task is to analyze a given nervous system of a zombie and find out whether it is valid.

Input

The first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) denoting the number of brains (which are conveniently numbered from 1 to n) and the number of brain connectors in the nervous system, respectively. In the next m lines, descriptions of brain connectors follow. Every connector is given as a pair of brains a b it connects (1 ≤ a, b ≤ n, a ≠ b).

Output

The output consists of one line, containing either yes or no depending on whether the nervous system is valid.

Examples

Input

4 4
1 2
2 3
3 1
4 1


Output

no


Input

6 5
1 2
2 3
3 4
4 5
3 6


Output

yes

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <typename T>
using min_heap = priority_queue<T, vector<T>, greater<T>>;
template <typename T>
using max_heap = priority_queue<T>;
struct custom_hash {
  static uint64_t splitmix64(uint64_t x) {
    x += 0x9e3779b97f4a7c15;
    x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
    x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
    return x ^ (x >> 31);
  }
  size_t operator()(uint64_t x) const {
    static const uint64_t FIXED_RANDOM =
        chrono::steady_clock::now().time_since_epoch().count();
    return splitmix64(x + FIXED_RANDOM);
  }
};
long long binpow(long long base, long long exp) {
  long long mod = 1000000007LL;
  long long res = 1;
  while (exp > 0) {
    if (exp % 2 == 1) res = (res * base) % mod;
    exp = exp >> 1;
    base = (base * base) % mod;
  }
  return res;
}
long long mod(long long x) {
  return ((x % 1000000007LL + 1000000007LL) % 1000000007LL);
}
long long add(long long a, long long b) { return mod(mod(a) + mod(b)); }
long long mul(long long a, long long b) { return mod(mod(a) * mod(b)); }
bool isPrime(long long n) {
  if (n <= 1) return false;
  for (long long i = 2; i * i <= n; i++)
    if (n % i == 0) return false;
  return true;
}
const long long N = (long long)1e6;
void sieve(long long N) {
  bool prime[N + 1];
  memset(prime, true, sizeof(prime));
  for (long long p = 2; p * p <= N; p++) {
    if (prime[p] == true) {
      for (long long i = p * p; i <= N; i += p) prime[i] = false;
    }
  }
}
long long fact(long long n) {
  long long res = 1;
  for (long long i = 1; i <= n; i++) {
    res = res * 1ll * i % 1000000007LL;
  }
  return res;
}
long long C(long long n, long long k) {
  return fact(n) * 1ll * binpow(fact(k), 1000000007LL - 2) % 1000000007LL *
         1ll * binpow(fact(n - k), 1000000007LL - 2) % 1000000007LL;
}
long long n, m;
unordered_map<long long, vector<long long>> adj;
vector<long long> vis;
void dfs(long long src) {
  vis[src] = 1;
  for (auto x : adj[src]) {
    if (vis[x] == -1) {
      dfs(x);
    }
  }
}
int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cin >> n >> m;
  vis.resize(n + 1, -1);
  for (long long i = 1; i <= m; i++) {
    long long a, b;
    cin >> a >> b;
    adj[a].push_back(b);
    adj[b].push_back(a);
  }
  long long cn = 0;
  for (long long i = 1; i <= n; i++) {
    if (vis[i] == -1) {
      dfs(i);
      cn++;
    }
  }
  if (m == n - 1 && cn == 1) {
    cout << "yes";
  } else {
    cout << "no";
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

354 5
93 111
199 6
14 114
36 61
106 156


(G.2) Fast Input

6 5
1 2
2 6
3 4
4 5
3 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using min_heap = priority_queue<T, vector<T>, greater<T>>; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
using max_heap = priority_queue<T>; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
struct custom_hash { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  static uint64_t splitmix64(uint64_t x) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    x += 0x9e3779b97f4a7c15; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    x = (x ^ (x >> 27)) * 0x94d049bb133111eb; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    return x ^ (x >> 31); /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  size_t operator()(uint64_t x) const { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    static const uint64_t FIXED_RANDOM = /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
        chrono::steady_clock::now().time_since_epoch().count(); /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    return splitmix64(x + FIXED_RANDOM); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
long long binpow(long long base, long long exp) { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  long long mod = 1000000007LL; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  long long res = 1; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  while (exp > 0) { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    if (exp % 2 == 1) res = (res * base) % mod; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    exp = exp >> 1; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    base = (base * base) % mod; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
long long mod(long long x) { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  return ((x % 1000000007LL + 1000000007LL) % 1000000007LL); /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
long long add(long long a, long long b) { return mod(mod(a) + mod(b)); } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
long long mul(long long a, long long b) { return mod(mod(a) * mod(b)); } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
bool isPrime(long long n) { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  if (n <= 1) return false; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 2; i * i <= n; i++) /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    if (n % i == 0) return false; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
const long long N = (long long)1e6; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
void sieve(long long N) { /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  bool prime[N + 1]; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  memset(prime, true, sizeof(prime)); /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long p = 2; p * p <= N; p++) { /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    if (prime[p] == true) { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
      for (long long i = p * p; i <= N; i += p) prime[i] = false; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
long long fact(long long n) { /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  long long res = 1; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 1; i <= n; i++) { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    res = res * 1ll * i % 1000000007LL; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
long long C(long long n, long long k) { /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  return fact(n) * 1ll * binpow(fact(k), 1000000007LL - 2) % 1000000007LL * /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
         1ll * binpow(fact(n - k), 1000000007LL - 2) % 1000000007LL; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
unordered_map<long long, vector<long long>> adj; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> vis; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(long long src) { /* line 65 slow_hit_count: 354, fast_hit_count: 6 */
  vis[src] = 1; /* line 66 slow_hit_count: 354, fast_hit_count: 6 */
  for (auto x : adj[src]) { /* line 67 slow_hit_count: 364, fast_hit_count: 16 */
    if (vis[x] == -1) { /* line 68 slow_hit_count: 10, fast_hit_count: 10 */
      dfs(x); /* line 69 slow_hit_count: 5, fast_hit_count: 5 */
    } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 72 slow_hit_count: 354, fast_hit_count: 6 */
int32_t main() { /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
  vis.resize(n + 1, -1); /* line 78 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= m; i++) { /* line 79 slow_hit_count: 6, fast_hit_count: 6 */
    long long a, b; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a >> b; /* line 81 slow_hit_count: 5, fast_hit_count: 5 */
    adj[a].push_back(b); /* line 82 slow_hit_count: 5, fast_hit_count: 5 */
    adj[b].push_back(a); /* line 83 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
  long long cn = 0; /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= n; i++) { /* line 86 slow_hit_count: 355, fast_hit_count: 7 */
    if (vis[i] == -1) { /* line 87 slow_hit_count: 354, fast_hit_count: 6 */
      dfs(i); /* line 88 slow_hit_count: 349, fast_hit_count: 1 */
      cn++; /* line 89 slow_hit_count: 349, fast_hit_count: 1 */
    } /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
  if (m == n - 1 && cn == 1) { /* line 92 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "yes"; /* line 93 slow_hit_count: 0, fast_hit_count: 1 */
  } else { /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "no"; /* line 95 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 97 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 98 slow_hit_count: 0, fast_hit_count: 0 */


assistant: **Phase 1: Identify Expensive or Inefficient Code Segments**

Upon analyzing the hit counts for the slow and fast inputs, we observe the following:

1. **DFS Function (`dfs(long long src)`)**:
   - The DFS function is called recursively. The hit count for the `dfs` function is much higher for the slow input (354 calls) compared to the fast input (6 calls). 
   - Specifically, lines within the `dfs` function, such as the loop iterating over adjacency lists (`line 67`), are significantly higher for the slow input (364) compared to the fast input (16).

2. **Loop Traversal in Main Function**:
   - The loop at `line 86` iterates over all nodes to initiate DFS. It has a high hit count for the slow input (355) compared to the fast input (7), suggesting that many nodes are unvisited due to disconnected components or sparse connections.

3. **Connectivity Check**:
   - The condition to check connectedness and validate the network is expressed at `line 92`. This is executed once in both cases, but the `dfs` function's extensive recursion for the slow input indicates multiple disconnected components.

**Phase 2: Derive Performance-Characterizing Invariants**

Based on the identified bottlenecks, the following performance-characterizing invariants describe conditions leading to slow execution:

1. **Disconnected Graph Components**: 
   - *Natural Language Invariant*: "When the graph consists of many disconnected components or isolated nodes, the depth-first search (DFS) function will be called multiple times, leading to increased computational overhead."
   - *Threshold Suggestion*: If `m` (number of edges) is significantly lower than `n-1`, implying sparse connectivity, the DFS must explore each component separately, causing performance degradation.

2. **Sparse Connections in Large Graphs**:
   - *Natural Language Invariant*: "If the number of brains `n` is large and the number of connectors `m` is low, meaning the graph is sparse, the DFS algorithm takes longer due to fewer direct connections."
   - *Threshold Suggestion*: When `m < n-1` and `n` is close to the upper limit (e.g., `n ≥ 500`), the DFS traversal becomes inefficient due to the necessity of initiating multiple searches.

3. **High Iteration Count for Isolated Nodes**:
   - *Natural Language Invariant*: "If there are many isolated or minimally connected nodes, the algorithm repeatedly initializes DFS for each unvisited node, contributing to slow execution."
   - *Threshold Suggestion*: The execution becomes inefficient when many nodes `n` (e.g., more than half) have a degree of zero or one, indicating that each node's adjacency list is minimally populated.

These invariants help identify the structural properties of the input graph that contribute to slow performance, targeting conditions where DFS must explore extensively due to disconnected or sparsely connected components.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
One particularly well-known fact about zombies is that they move and think terribly slowly. While we still don't know why their movements are so sluggish, the problem of laggy thinking has been recently resolved. It turns out that the reason is not (as previously suspected) any kind of brain defect – it's the opposite! Independent researchers confirmed that the nervous system of a zombie is highly complicated – it consists of n brains (much like a cow has several stomachs). They are interconnected by brain connectors, which are veins capable of transmitting thoughts between brains. There are two important properties such a brain network should have to function properly: 

  1. It should be possible to exchange thoughts between any two pairs of brains (perhaps indirectly, through other brains). 
  2. There should be no redundant brain connectors, that is, removing any brain connector would make property 1 false. 



If both properties are satisfied, we say that the nervous system is valid. Unfortunately (?), if the system is not valid, the zombie stops thinking and becomes (even more) dead. Your task is to analyze a given nervous system of a zombie and find out whether it is valid.

Input

The first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) denoting the number of brains (which are conveniently numbered from 1 to n) and the number of brain connectors in the nervous system, respectively. In the next m lines, descriptions of brain connectors follow. Every connector is given as a pair of brains a b it connects (1 ≤ a, b ≤ n, a ≠ b).

Output

The output consists of one line, containing either yes or no depending on whether the nervous system is valid.

Examples

Input

4 4
1 2
2 3
3 1
4 1


Output

no


Input

6 5
1 2
2 3
3 4
4 5
3 6


Output

yes

Solution (C++ code):
{solution}


assistant: **Phase 3: Implement the Natural Language Invariants as Runtime Checks in C++**

Here, we will translate the performance-characterizing invariants identified in Phase 2 into C++ code snippets that can be used to check these conditions at runtime.

1. **Invariant for Disconnected Graph Components**:
   - Natural Language Invariant: "When the graph consists of many disconnected components or isolated nodes, the depth-first search (DFS) function will be called multiple times, leading to increased computational overhead."
   - C++ Code:
   ```cpp
   void check_disconnected_components_invariant(long long n, long long m, long long cn) {
       if (m < n - 1) {
           cerr << "Warning: Disconnected components detected - high DFS calls!" << endl;
           abort();
       }
   }
   ```

2. **Invariant for Sparse Connections in Large Graphs**:
   - Natural Language Invariant: "If the number of brains `n` is large and the number of connectors `m` is low, meaning the graph is sparse, the DFS algorithm takes longer due to fewer direct connections."
   - C++ Code:
   ```cpp
   void check_sparse_connections_invariant(long long n, long long m) {
       if (n > 500 && m < n - 1) {
           cerr << "Warning: Sparse connections in large graph - potential slow DFS!" << endl;
           abort();
       }
   }
   ```

3. **Invariant for High Iteration Count for Isolated Nodes**:
   - Natural Language Invariant: "If there are many isolated or minimally connected nodes, the algorithm repeatedly initializes DFS for each unvisited node, contributing to slow execution."
   - C++ Code:
   ```cpp
   void check_isolated_nodes_invariant(const vector<long long>& degrees, long long n) {
       long long isolated_nodes = count(degrees.begin(), degrees.end(), 0);
       if (isolated_nodes > n / 2) {
           cerr << "Warning: Many isolated nodes - excessive DFS initializations!" << endl;
           abort();
       }
   }
   ```

**Phase 4: Integrate the Checkers into the Original Program**

Now, we will integrate these checkers into the original C++ program at appropriate locations.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_disconnected_components_invariant(long long n, long long m, long long cn) {
    if (m < n - 1) {
        cerr << "Warning: Disconnected components detected - high DFS calls!" << endl;
        abort();
    }
}

void check_sparse_connections_invariant(long long n, long long m) {
    if (n > 500 && m < n - 1) {
        cerr << "Warning: Sparse connections in large graph - potential slow DFS!" << endl;
        abort();
    }
}

void check_isolated_nodes_invariant(const vector<long long>& degrees, long long n) {
    long long isolated_nodes = count(degrees.begin(), degrees.end(), 0);
    if (isolated_nodes > n / 2) {
        cerr << "Warning: Many isolated nodes - excessive DFS initializations!" << endl;
        abort();
    }
}

long long n, m;
unordered_map<long long, vector<long long>> adj;
vector<long long> vis;
vector<long long> degrees;

void dfs(long long src) {
    vis[src] = 1;
    for (auto x : adj[src]) {
        if (vis[x] == -1) {
            dfs(x);
        }
    }
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n >> m;
    vis.resize(n + 1, -1);
    degrees.resize(n + 1, 0);
    
    for (long long i = 1; i <= m; i++) {
        long long a, b;
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
        degrees[a]++;
        degrees[b]++;
    }
    
    long long cn = 0;
    for (long long i = 1; i <= n; i++) {
        if (vis[i] == -1) {
            dfs(i);
            cn++;
        }
    }

    // Insert checks after DFS has processed the graph
    check_disconnected_components_invariant(n, m, cn);
    check_sparse_connections_invariant(n, m);
    check_isolated_nodes_invariant(degrees, n);

    if (m == n - 1 && cn == 1) {
        cout << "yes";
    } else {
        cout << "no";
    }
    
    return 0;
}
```

**Placement Explanation**:
- **Checkers**: The checkers are placed after the DFS traversal. This ensures that we have enough information about connectivity and node degrees before running the checks.
- **Data Structures**: An additional `degrees` vector is used to track how many connections each node has, which helps in identifying isolated nodes.

