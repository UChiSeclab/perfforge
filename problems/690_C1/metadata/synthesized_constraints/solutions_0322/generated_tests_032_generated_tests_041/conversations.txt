system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

One particularly well-known fact about zombies is that they move and think terribly slowly. While we still don't know why their movements are so sluggish, the problem of laggy thinking has been recently resolved. It turns out that the reason is not (as previously suspected) any kind of brain defect – it's the opposite! Independent researchers confirmed that the nervous system of a zombie is highly complicated – it consists of n brains (much like a cow has several stomachs). They are interconnected by brain connectors, which are veins capable of transmitting thoughts between brains. There are two important properties such a brain network should have to function properly: 

  1. It should be possible to exchange thoughts between any two pairs of brains (perhaps indirectly, through other brains). 
  2. There should be no redundant brain connectors, that is, removing any brain connector would make property 1 false. 



If both properties are satisfied, we say that the nervous system is valid. Unfortunately (?), if the system is not valid, the zombie stops thinking and becomes (even more) dead. Your task is to analyze a given nervous system of a zombie and find out whether it is valid.

Input

The first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) denoting the number of brains (which are conveniently numbered from 1 to n) and the number of brain connectors in the nervous system, respectively. In the next m lines, descriptions of brain connectors follow. Every connector is given as a pair of brains a b it connects (1 ≤ a, b ≤ n, a ≠ b).

Output

The output consists of one line, containing either yes or no depending on whether the nervous system is valid.

Examples

Input

4 4
1 2
2 3
3 1
4 1


Output

no


Input

6 5
1 2
2 3
3 4
4 5
3 6


Output

yes

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
bool cycle = false;
void DFS(int** matrix, int n, int sv, bool* visited) {
  visited[sv] = true;
  for (int i = 0; i < n; i++) {
    if (i == sv) continue;
    if (matrix[sv][i] == 1) {
      if (visited[i]) {
        continue;
      }
      DFS(matrix, n, i, visited);
    }
  }
}
int main() {
  int n, m;
  cin >> n >> m;
  int** matrix = new int*[n];
  int x, y;
  for (int i = 0; i < n; i++) {
    matrix[i] = new int[n];
    for (int j = 0; j < n; j++) {
      matrix[i][j] = 0;
    }
  }
  bool visited[n];
  for (int i = 0; i < n; i++) visited[i] = false;
  for (int i = 0; i < m; i++) {
    cin >> x >> y;
    matrix[x - 1][y - 1] = 1;
    matrix[y - 1][x - 1] = 1;
  }
  if (m != n - 1) {
    cout << "no";
  } else {
    DFS(matrix, n, 0, visited);
    if (cycle == false) {
      for (int i = 0; i < n; i++) {
        if (visited[i] == false) {
          cout << "no";
          return 0;
        }
      }
      cout << "yes";
    }
  }
  for (int i = 0; i < n; ++i) {
    delete[] matrix[i];
  }
  delete[] matrix;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

354 5
93 111
199 6
14 114
36 61
145 156


(G.2) Fast Input

6 5
1 2
2 6
3 4
4 5
3 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
bool cycle = false; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void DFS(int** matrix, int n, int sv, bool* visited) { /* line 4 slow_hit_count: 0, fast_hit_count: 6 */
  visited[sv] = true; /* line 5 slow_hit_count: 0, fast_hit_count: 6 */
  for (int i = 0; i < n; i++) { /* line 6 slow_hit_count: 0, fast_hit_count: 42 */
    if (i == sv) continue; /* line 7 slow_hit_count: 0, fast_hit_count: 36 */
    if (matrix[sv][i] == 1) { /* line 8 slow_hit_count: 0, fast_hit_count: 30 */
      if (visited[i]) { /* line 9 slow_hit_count: 0, fast_hit_count: 10 */
        continue; /* line 10 slow_hit_count: 0, fast_hit_count: 5 */
      } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
      DFS(matrix, n, i, visited); /* line 12 slow_hit_count: 0, fast_hit_count: 5 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 6 */
int main() { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  int** matrix = new int*[n]; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  int x, y; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 21 slow_hit_count: 355, fast_hit_count: 7 */
    matrix[i] = new int[n]; /* line 22 slow_hit_count: 354, fast_hit_count: 6 */
    for (int j = 0; j < n; j++) { /* line 23 slow_hit_count: 125670, fast_hit_count: 42 */
      matrix[i][j] = 0; /* line 24 slow_hit_count: 125316, fast_hit_count: 36 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  bool visited[n]; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) visited[i] = false; /* line 28 slow_hit_count: 355, fast_hit_count: 7 */
  for (int i = 0; i < m; i++) { /* line 29 slow_hit_count: 6, fast_hit_count: 6 */
    cin >> x >> y; /* line 30 slow_hit_count: 5, fast_hit_count: 5 */
    matrix[x - 1][y - 1] = 1; /* line 31 slow_hit_count: 5, fast_hit_count: 5 */
    matrix[y - 1][x - 1] = 1; /* line 32 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  if (m != n - 1) { /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "no"; /* line 35 slow_hit_count: 1, fast_hit_count: 0 */
  } else { /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    DFS(matrix, n, 0, visited); /* line 37 slow_hit_count: 0, fast_hit_count: 1 */
    if (cycle == false) { /* line 38 slow_hit_count: 0, fast_hit_count: 1 */
      for (int i = 0; i < n; i++) { /* line 39 slow_hit_count: 0, fast_hit_count: 7 */
        if (visited[i] == false) { /* line 40 slow_hit_count: 0, fast_hit_count: 6 */
          cout << "no"; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
          return 0; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      cout << "yes"; /* line 45 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; ++i) { /* line 48 slow_hit_count: 355, fast_hit_count: 7 */
    delete[] matrix[i]; /* line 49 slow_hit_count: 354, fast_hit_count: 6 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  delete[] matrix; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 52 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

1. **Matrix Initialization**:
   - Lines 21-24 in the code show significantly higher hit counts for the slow input, particularly line 23 (`for (int j = 0; j < n; j++)` with 125670 hits).
   - This indicates that the program spends considerable time initializing the `matrix`.
   - The hit counts suggest that the program inefficiently initializes an `n x n` matrix, which is particularly costly for larger values of `n` (e.g., 354 for the slow input).

2. **Matrix Operations**:
   - The initialization of the `matrix` with zeroes appears to be a costly operation that scales poorly with larger `n`.
   - This action is performed `n^2` times, which is unnecessary for sparse graphs or when the matrix could be represented more efficiently.

3. **Check if m != n - 1**:
   - The condition on line 34 (`if (m != n - 1)`) is instantly met due to the mismatch between `m` and `n-1` for the slow input.
   - Thus, the program outputs "no" without ever calling DFS, which explains why the DFS function is not executed in the slow run.

## Phase 2: Derive Performance-Characterizing Invariants

1. **Matrix Size Initialization**:
   - *Natural Language Description*: “If the number of brains `n` is large, the initialization of an `n x n` adjacency matrix can become a performance bottleneck, especially when `n` is greater than the average number of connectors `m`, and when `m` is significantly smaller than `n`.”
   - This suggests that the program incurs unnecessary overhead in fully initializing the matrix, which is excessive for sparse graphs.

2. **Efficient Check for Tree Property**:
   - *Natural Language Description*: “If the condition `m != n - 1` is met early, the program should quickly terminate or find a more efficient way to bypass matrix operations, as this condition invalidates the network for being a tree.”
   - The current implementation redundantly initializes a large matrix even when the output is predetermined by very simple conditions.

3. **Graph Representation**:
   - *Natural Language Description*: “For large `n`, where graphs are sparse, consider using alternative data structures (like adjacency lists) to represent the graph efficiently, minimizing unnecessary initialization and memory usage.”
   - This would help alleviate the unnecessary memory and computation overhead caused by initializing large matrices for sparse graphs.

By focusing on these conditions, particularly the mismatch between graph density and matrix initialization, we can predict slow performance and suggest optimizations tailored for input scenarios where `n` is large, and the graph is sparse.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
One particularly well-known fact about zombies is that they move and think terribly slowly. While we still don't know why their movements are so sluggish, the problem of laggy thinking has been recently resolved. It turns out that the reason is not (as previously suspected) any kind of brain defect – it's the opposite! Independent researchers confirmed that the nervous system of a zombie is highly complicated – it consists of n brains (much like a cow has several stomachs). They are interconnected by brain connectors, which are veins capable of transmitting thoughts between brains. There are two important properties such a brain network should have to function properly: 

  1. It should be possible to exchange thoughts between any two pairs of brains (perhaps indirectly, through other brains). 
  2. There should be no redundant brain connectors, that is, removing any brain connector would make property 1 false. 



If both properties are satisfied, we say that the nervous system is valid. Unfortunately (?), if the system is not valid, the zombie stops thinking and becomes (even more) dead. Your task is to analyze a given nervous system of a zombie and find out whether it is valid.

Input

The first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) denoting the number of brains (which are conveniently numbered from 1 to n) and the number of brain connectors in the nervous system, respectively. In the next m lines, descriptions of brain connectors follow. Every connector is given as a pair of brains a b it connects (1 ≤ a, b ≤ n, a ≠ b).

Output

The output consists of one line, containing either yes or no depending on whether the nervous system is valid.

Examples

Input

4 4
1 2
2 3
3 1
4 1


Output

no


Input

6 5
1 2
2 3
3 4
4 5
3 6


Output

yes

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing Invariants as Checker Code in C++

Let's translate the previously derived natural language invariants into C++ checker code.

### Invariant 1: Matrix Size Initialization
*Natural Language*: "If the number of brains `n` is large, the initialization of an `n x n` adjacency matrix can become a performance bottleneck, especially when `n` is greater than the average number of connectors `m`, and when `m` is significantly smaller than `n`."

```cpp
void check_matrix_initialization_invariant(int n, int m) {
    if (n > 500 && m < n / 2) {  // Example condition: n is large and m is significantly smaller
        cerr << "Warning: Potential bottleneck due to large matrix initialization for sparse graph" << endl;
        abort();
    }
}
```

### Invariant 2: Efficient Check for Tree Property
*Natural Language*: "If the condition `m != n - 1` is met early, the program should quickly terminate or find a more efficient way to bypass matrix operations, as this condition invalidates the network for being a tree."

```cpp
void check_tree_property_invariant(int n, int m) {
    if (m != n - 1) {
        cerr << "Warning: Graph is not a tree, unnecessary operations may follow" << endl;
        abort();
    }
}
```

### Invariant 3: Graph Representation
*Natural Language*: "For large `n`, where graphs are sparse, consider using alternative data structures (like adjacency lists) to represent the graph efficiently, minimizing unnecessary initialization and memory usage."

```cpp
void check_graph_representation_invariant(int n, int m) {
    if (n > 500 && m < n) {  // Example threshold suggesting sparse graph
        cerr << "Warning: Inefficient graph representation for sparse graph" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checker Code with the Original Program

Now, let's integrate these checker functions into the original C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for matrix initialization invariants
void check_matrix_initialization_invariant(int n, int m) {
    if (n > 500 && m < n / 2) {  // Example condition: n is large and m is significantly smaller
        cerr << "Warning: Potential bottleneck due to large matrix initialization for sparse graph" << endl;
        abort();
    }
}

// Checker function for tree property invariant
void check_tree_property_invariant(int n, int m) {
    if (m != n - 1) {
        cerr << "Warning: Graph is not a tree, unnecessary operations may follow" << endl;
        abort();
    }
}

// Checker function for graph representation invariants
void check_graph_representation_invariant(int n, int m) {
    if (n > 500 && m < n) {  // Example threshold suggesting sparse graph
        cerr << "Warning: Inefficient graph representation for sparse graph" << endl;
        abort();
    }
}

bool cycle = false;
void DFS(int** matrix, int n, int sv, bool* visited) {
    visited[sv] = true;
    for (int i = 0; i < n; i++) {
        if (i == sv) continue;
        if (matrix[sv][i] == 1) {
            if (visited[i]) {
                continue;
            }
            DFS(matrix, n, i, visited);
        }
    }
}

int main() {
    int n, m;
    cin >> n >> m;

    // Integrate checker functions after reading input
    check_matrix_initialization_invariant(n, m);
    check_tree_property_invariant(n, m);
    check_graph_representation_invariant(n, m);

    int** matrix = new int*[n];
    int x, y;
    for (int i = 0; i < n; i++) {
        matrix[i] = new int[n];
        for (int j = 0; j < n; j++) {
            matrix[i][j] = 0;
        }
    }
    bool visited[n];
    for (int i = 0; i < n; i++) visited[i] = false;
    for (int i = 0; i < m; i++) {
        cin >> x >> y;
        matrix[x - 1][y - 1] = 1;
        matrix[y - 1][x - 1] = 1;
    }
    if (m != n - 1) {
        cout << "no";
    } else {
        DFS(matrix, n, 0, visited);
        if (cycle == false) {
            for (int i = 0; i < n; i++) {
                if (visited[i] == false) {
                    cout << "no";
                    return 0;
                }
            }
            cout << "yes";
        }
    }
    for (int i = 0; i < n; ++i) {
        delete[] matrix[i];
    }
    delete[] matrix;
    return 0;
}
```

### Explanation

- The **checker functions** are integrated immediately after reading the input. This ensures early detection of potential bottlenecks without unnecessary computations.
- **Abort statements** are used to halt execution if any invariant condition is met, simulating how a fuzzer might detect problematic input scenarios.
- The **thresholds** used (e.g., `n > 500`) are placeholders based on the natural language description and might need refinement based on further empirical evidence or detailed requirements.

