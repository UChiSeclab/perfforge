system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

One particularly well-known fact about zombies is that they move and think terribly slowly. While we still don't know why their movements are so sluggish, the problem of laggy thinking has been recently resolved. It turns out that the reason is not (as previously suspected) any kind of brain defect – it's the opposite! Independent researchers confirmed that the nervous system of a zombie is highly complicated – it consists of n brains (much like a cow has several stomachs). They are interconnected by brain connectors, which are veins capable of transmitting thoughts between brains. There are two important properties such a brain network should have to function properly: 

  1. It should be possible to exchange thoughts between any two pairs of brains (perhaps indirectly, through other brains). 
  2. There should be no redundant brain connectors, that is, removing any brain connector would make property 1 false. 



If both properties are satisfied, we say that the nervous system is valid. Unfortunately (?), if the system is not valid, the zombie stops thinking and becomes (even more) dead. Your task is to analyze a given nervous system of a zombie and find out whether it is valid.

Input

The first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) denoting the number of brains (which are conveniently numbered from 1 to n) and the number of brain connectors in the nervous system, respectively. In the next m lines, descriptions of brain connectors follow. Every connector is given as a pair of brains a b it connects (1 ≤ a, b ≤ n, a ≠ b).

Output

The output consists of one line, containing either yes or no depending on whether the nervous system is valid.

Examples

Input

4 4
1 2
2 3
3 1
4 1


Output

no


Input

6 5
1 2
2 3
3 4
4 5
3 6


Output

yes

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
vector<vector<bool> > v;
void bfs(int start) {
  int n = v.size();
  queue<int> q;
  q.push(start);
  vector<bool> used(n);
  used[start] = true;
  while (!q.empty()) {
    int tmp = q.front();
    q.pop();
    int count = 0;
    for (int i = 0; i < n; i++) {
      if (v[tmp][i]) {
        if (used[i])
          count++;
        else
          q.push(i);
        used[i] = true;
      }
    }
    if (count > 1) {
      cout << "no";
      return;
    }
  }
  if (find(used.begin(), used.end(), false) != used.end())
    cout << "no";
  else
    cout << "yes";
}
int main() {
  int n, m;
  cin >> n >> m;
  v.resize(n);
  for (int i = 0; i < n; i++) {
    v[i].resize(n);
  }
  for (int i = 0; i < m; i++) {
    int x, y;
    cin >> x >> y;
    v[x - 1][y - 1] = v[y - 1][x - 1] = true;
  }
  bfs(0);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

354 5
93 111
199 6
14 114
36 61
145 156


(G.2) Fast Input

6 5
1 2
2 6
3 4
4 5
3 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<bool> > v; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void bfs(int start) { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int n = v.size(); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  queue<int> q; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  q.push(start); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  vector<bool> used(n); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  used[start] = true; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  while (!q.empty()) { /* line 10 slow_hit_count: 2, fast_hit_count: 7 */
    int tmp = q.front(); /* line 11 slow_hit_count: 1, fast_hit_count: 6 */
    q.pop(); /* line 12 slow_hit_count: 1, fast_hit_count: 6 */
    int count = 0; /* line 13 slow_hit_count: 1, fast_hit_count: 6 */
    for (int i = 0; i < n; i++) { /* line 14 slow_hit_count: 355, fast_hit_count: 42 */
      if (v[tmp][i]) { /* line 15 slow_hit_count: 354, fast_hit_count: 36 */
        if (used[i]) /* line 16 slow_hit_count: 0, fast_hit_count: 10 */
          count++; /* line 17 slow_hit_count: 0, fast_hit_count: 5 */
        else /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
          q.push(i); /* line 19 slow_hit_count: 0, fast_hit_count: 5 */
        used[i] = true; /* line 20 slow_hit_count: 0, fast_hit_count: 10 */
      } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    if (count > 1) { /* line 23 slow_hit_count: 1, fast_hit_count: 6 */
      cout << "no"; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      return; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  if (find(used.begin(), used.end(), false) != used.end()) /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "no"; /* line 29 slow_hit_count: 1, fast_hit_count: 0 */
  else /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "yes"; /* line 31 slow_hit_count: 0, fast_hit_count: 1 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  v.resize(n); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 37 slow_hit_count: 355, fast_hit_count: 7 */
    v[i].resize(n); /* line 38 slow_hit_count: 354, fast_hit_count: 6 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; i++) { /* line 40 slow_hit_count: 6, fast_hit_count: 6 */
    int x, y; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> y; /* line 42 slow_hit_count: 5, fast_hit_count: 5 */
    v[x - 1][y - 1] = v[y - 1][x - 1] = true; /* line 43 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  bfs(0); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 46 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Let's analyze the provided C program to identify potential performance bottlenecks and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count differences between the fast and slow inputs, the following observations can be made:

1. **Line 14 (`for (int i = 0; i < n; i++)`)**: This line is hit significantly more times for the slow input (355 times vs. 42 times for the fast input). It suggests that the loop is iterating through a large range, possibly due to the large value of `n`, the number of vertices in the brain network.

2. **Lines 15 and 16 (`if (v[tmp][i]) { if (used[i])`)**: The first condition (`if (v[tmp][i])`) checks adjacency, and it is hit quite often even though the inner conditions (lines 16 and 17) show fewer hits. This indicates that the adjacency matrix is being checked frequently, but not many new nodes are being explored.

3. **Hit count for BFS loop (Lines 10-11)**: The `while (!q.empty())` loop is hit significantly fewer times in the slow input compared to the fast input, suggesting it quickly depletes the queue without adding many new elements. This might imply poor connectivity in the graph.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, the following performance-characterizing invariants can be derived:

1. **Sparse Connectivity Invariant**:
   - **Natural language description**: "If the brain network is sparse with a low average degree of connectivity per brain, the BFS traversal may require excessive iteration over non-existent edges, leading to performance degradation."
   - **Suggested condition**: This invariant is triggered when the number of connectors `m` is significantly smaller than `n`, leading to many iterations over an adjacency matrix that doesn't yield new connections.

2. **Large Graph Invariant**:
   - **Natural language description**: "When the number of brains (`n`) is close to the maximum allowed value, the program may slow down due to the increased complexity of managing a large adjacency matrix and performing BFS."
   - **Suggested condition**: This invariant can be triggered when `n` is close to 1000, causing the adjacency matrix to become large, even if the number of edges `m` is small.

3. **Disconnected Component Invariant**:
   - **Natural language description**: "If there exists any disconnected component in the brain network, the BFS may redundantly iterate over empty adjacency lists, especially when starting from a brain that isn't part of the largest connected component."
   - **Suggested condition**: This invariant is triggered when BFS does not reach all nodes due to disconnected components, causing unnecessary iterations.

### Important Considerations

1. The identified conditions avoid hardcoding values from the slow input and instead focus on structural properties of the input graph.
2. The checks should be placed outside of performance-critical loops, such as before BFS traversal is initiated, to minimize overhead.
3. These invariants are useful for fuzz testing to ensure the code fails gracefully or triggers warnings when these conditions are met.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
One particularly well-known fact about zombies is that they move and think terribly slowly. While we still don't know why their movements are so sluggish, the problem of laggy thinking has been recently resolved. It turns out that the reason is not (as previously suspected) any kind of brain defect – it's the opposite! Independent researchers confirmed that the nervous system of a zombie is highly complicated – it consists of n brains (much like a cow has several stomachs). They are interconnected by brain connectors, which are veins capable of transmitting thoughts between brains. There are two important properties such a brain network should have to function properly: 

  1. It should be possible to exchange thoughts between any two pairs of brains (perhaps indirectly, through other brains). 
  2. There should be no redundant brain connectors, that is, removing any brain connector would make property 1 false. 



If both properties are satisfied, we say that the nervous system is valid. Unfortunately (?), if the system is not valid, the zombie stops thinking and becomes (even more) dead. Your task is to analyze a given nervous system of a zombie and find out whether it is valid.

Input

The first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) denoting the number of brains (which are conveniently numbered from 1 to n) and the number of brain connectors in the nervous system, respectively. In the next m lines, descriptions of brain connectors follow. Every connector is given as a pair of brains a b it connects (1 ≤ a, b ≤ n, a ≠ b).

Output

The output consists of one line, containing either yes or no depending on whether the nervous system is valid.

Examples

Input

4 4
1 2
2 3
3 1
4 1


Output

no


Input

6 5
1 2
2 3
3 4
4 5
3 6


Output

yes

Solution (C++ code):
{solution}


assistant: Sure, let's proceed with Phase 3 and then Phase 4 to implement and integrate the invariant checks.

### Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ code snippets implementing the performance-characterizing invariants we derived previously.

1. **Sparse Connectivity Invariant**

```cpp
void check_sparse_connectivity(int n, int m) {
    if (m < n / 4) { // Assuming a threshold where m is significantly smaller than n
        cerr << "Warning: Sparse connectivity invariant triggered - low number of connectors!" << endl;
        abort();
    }
}
```

2. **Large Graph Invariant**

```cpp
void check_large_graph(int n) {
    if (n > 900) { // Close to the maximum n value
        cerr << "Warning: Large graph invariant triggered - too many brains!" << endl;
        abort();
    }
}
```

3. **Disconnected Component Invariant**

```cpp
void check_disconnected_components(const vector<bool>& used) {
    if (find(used.begin(), used.end(), false) != used.end()) {
        cerr << "Warning: Disconnected component invariant triggered - unreachable brains!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original C++ Program

Now, let's integrate the above runtime checks into the provided C++ program. We will place the checks at effective points to detect performance issues without introducing unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;
vector<vector<bool>> v;

void check_sparse_connectivity(int n, int m) {
    if (m < n / 4) { // Assuming a threshold where m is significantly smaller than n
        cerr << "Warning: Sparse connectivity invariant triggered - low number of connectors!" << endl;
        abort();
    }
}

void check_large_graph(int n) {
    if (n > 900) { // Close to the maximum n value
        cerr << "Warning: Large graph invariant triggered - too many brains!" << endl;
        abort();
    }
}

void check_disconnected_components(const vector<bool>& used) {
    if (find(used.begin(), used.end(), false) != used.end()) {
        cerr << "Warning: Disconnected component invariant triggered - unreachable brains!" << endl;
        abort();
    }
}

void bfs(int start) {
    int n = v.size();
    queue<int> q;
    q.push(start);
    vector<bool> used(n);
    used[start] = true;
    while (!q.empty()) {
        int tmp = q.front();
        q.pop();
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (v[tmp][i]) {
                if (used[i])
                    count++;
                else
                    q.push(i);
                used[i] = true;
            }
        }
        if (count > 1) {
            cout << "no";
            return;
        }
    }
    // Check for disconnected components after BFS
    check_disconnected_components(used);

    if (find(used.begin(), used.end(), false) != used.end())
        cout << "no";
    else
        cout << "yes";
}

int main() {
    int n, m;
    cin >> n >> m;

    // Check for sparse connectivity and large graph before heavy operations
    check_sparse_connectivity(n, m);
    check_large_graph(n);

    v.resize(n);
    for (int i = 0; i < n; i++) {
        v[i].resize(n);
    }
    for (int i = 0; i < m; i++) {
        int x, y;
        cin >> x >> y;
        v[x - 1][y - 1] = v[y - 1][x - 1] = true;
    }
    bfs(0);
}
```

### Explanation of Integration

1. **Sparse Connectivity and Large Graph Checks**: These are placed right after reading the input values for `n` and `m` to immediately detect potential bottlenecks due to sparse connectivity or a large graph.

2. **Disconnected Components Check**: This is placed after the BFS completes, just before the final validation check, to ensure that all brains are reachable.

This integration ensures that the program can alert the user to potential performance bottlenecks and abort execution if unrealistic input conditions that could lead to slow performance are detected.

