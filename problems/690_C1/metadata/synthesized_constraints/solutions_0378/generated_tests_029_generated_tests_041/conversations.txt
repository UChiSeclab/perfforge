system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

One particularly well-known fact about zombies is that they move and think terribly slowly. While we still don't know why their movements are so sluggish, the problem of laggy thinking has been recently resolved. It turns out that the reason is not (as previously suspected) any kind of brain defect – it's the opposite! Independent researchers confirmed that the nervous system of a zombie is highly complicated – it consists of n brains (much like a cow has several stomachs). They are interconnected by brain connectors, which are veins capable of transmitting thoughts between brains. There are two important properties such a brain network should have to function properly: 

  1. It should be possible to exchange thoughts between any two pairs of brains (perhaps indirectly, through other brains). 
  2. There should be no redundant brain connectors, that is, removing any brain connector would make property 1 false. 



If both properties are satisfied, we say that the nervous system is valid. Unfortunately (?), if the system is not valid, the zombie stops thinking and becomes (even more) dead. Your task is to analyze a given nervous system of a zombie and find out whether it is valid.

Input

The first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) denoting the number of brains (which are conveniently numbered from 1 to n) and the number of brain connectors in the nervous system, respectively. In the next m lines, descriptions of brain connectors follow. Every connector is given as a pair of brains a b it connects (1 ≤ a, b ≤ n, a ≠ b).

Output

The output consists of one line, containing either yes or no depending on whether the nervous system is valid.

Examples

Input

4 4
1 2
2 3
3 1
4 1


Output

no


Input

6 5
1 2
2 3
3 4
4 5
3 6


Output

yes

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
int pre[10010], ran[10010];
int m, n, p, q;
void init() {
  for (int i = 0; i < 10010; i++) {
    pre[i] = i;
    ran[i] = 1;
  }
}
int findd(int a) {
  while (a != pre[a]) {
    a = pre[a];
  }
  return a;
}
void unite(int a, int b) {
  int a1 = findd(a);
  int b1 = findd(b);
  if (a1 < b1) {
    pre[b1] = a1;
    ran[a1] += ran[b1];
  } else if (a1 > b1) {
    pre[a1] = b1;
    ran[b1] += ran[a1];
  }
}
int mapp[1010][1010], in[1010];
int main() {
  int m, n, p, q;
  while (scanf("%d%d", &m, &n) == 2) {
    init();
    memset(mapp, 0, sizeof(mapp));
    memset(in, 0, sizeof(in));
    while (n--) {
      scanf("%d%d", &p, &q);
      mapp[p][q] = 1;
      unite(p, q);
    }
    int sum = 0, flag = 0;
    for (int i = 1; i <= m; i++)
      for (int j = 1; j <= m; j++) {
        if (mapp[i][j]) {
          sum++;
        }
      }
    for (int i = 1; i <= m; i++)
      if (ran[i] == m) flag = 1;
    if (sum == m - 1 && flag == 1)
      printf("yes\n");
    else
      printf("no\n");
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

354 5
93 111
199 6
14 114
36 61
106 156


(G.2) Fast Input

6 5
1 2
2 6
3 4
4 5
3 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
int pre[10010], ran[10010]; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int m, n, p, q; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void init() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 10010; i++) { /* line 5 slow_hit_count: 10011, fast_hit_count: 10011 */
    pre[i] = i; /* line 6 slow_hit_count: 10010, fast_hit_count: 10010 */
    ran[i] = 1; /* line 7 slow_hit_count: 10010, fast_hit_count: 10010 */
  } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
int findd(int a) { /* line 10 slow_hit_count: 10, fast_hit_count: 13 */
  while (a != pre[a]) { /* line 11 slow_hit_count: 10, fast_hit_count: 13 */
    a = pre[a]; /* line 12 slow_hit_count: 0, fast_hit_count: 3 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  return a; /* line 14 slow_hit_count: 10, fast_hit_count: 10 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
void unite(int a, int b) { /* line 16 slow_hit_count: 5, fast_hit_count: 5 */
  int a1 = findd(a); /* line 17 slow_hit_count: 5, fast_hit_count: 5 */
  int b1 = findd(b); /* line 18 slow_hit_count: 5, fast_hit_count: 5 */
  if (a1 < b1) { /* line 19 slow_hit_count: 5, fast_hit_count: 5 */
    pre[b1] = a1; /* line 20 slow_hit_count: 4, fast_hit_count: 4 */
    ran[a1] += ran[b1]; /* line 21 slow_hit_count: 4, fast_hit_count: 4 */
  } else if (a1 > b1) { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
    pre[a1] = b1; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
    ran[b1] += ran[a1]; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 5, fast_hit_count: 5 */
int mapp[1010][1010], in[1010]; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 28 slow_hit_count: 2, fast_hit_count: 2 */
  int m, n, p, q; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  while (scanf("%d%d", &m, &n) == 2) { /* line 30 slow_hit_count: 2, fast_hit_count: 2 */
    init(); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
    memset(mapp, 0, sizeof(mapp)); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
    memset(in, 0, sizeof(in)); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
    while (n--) { /* line 34 slow_hit_count: 6, fast_hit_count: 6 */
      scanf("%d%d", &p, &q); /* line 35 slow_hit_count: 5, fast_hit_count: 5 */
      mapp[p][q] = 1; /* line 36 slow_hit_count: 5, fast_hit_count: 5 */
      unite(p, q); /* line 37 slow_hit_count: 5, fast_hit_count: 5 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    int sum = 0, flag = 0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i <= m; i++) /* line 40 slow_hit_count: 355, fast_hit_count: 7 */
      for (int j = 1; j <= m; j++) { /* line 41 slow_hit_count: 125670, fast_hit_count: 42 */
        if (mapp[i][j]) { /* line 42 slow_hit_count: 125316, fast_hit_count: 36 */
          sum++; /* line 43 slow_hit_count: 5, fast_hit_count: 5 */
        } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 1; i <= m; i++) /* line 46 slow_hit_count: 355, fast_hit_count: 7 */
      if (ran[i] == m) flag = 1; /* line 47 slow_hit_count: 354, fast_hit_count: 6 */
    if (sum == m - 1 && flag == 1) /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
      printf("yes\n"); /* line 49 slow_hit_count: 0, fast_hit_count: 1 */
    else /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      printf("no\n"); /* line 51 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

By comparing the hit counts between the fast and slow runs, we can observe the following:

1. **Lines 40-43 (Nested Loop)**:
   - Line 40 is executed 355 times in the slow input versus 7 times in the fast input.
   - Line 41 is executed 125,670 times in the slow input compared to 42 times in the fast input. 
   - The nested loop structure iterates over `m * m`, leading to a significant performance hit when `m` is large.

2. **The Condition Checking (line 42)**:
   - This line is also hit 125,316 times with the slow input, indicating that many of the elements in `mapp` are accessed frequently.

3. **Union-Find Operations (Lines 17-24)**:
   - The `findd` function (lines 10-14) and `unite` function (lines 16-26) don't show significant differences in hit counts between slow and fast inputs, suggesting they are not the main bottleneck.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some natural language performance invariants to describe conditions leading to slow execution:

1. **Nested Loop Over Large `m`**:
   - **Invariant**: "If the number of brains `m` is large, the nested loop iterating over all pairs of brains can lead to excessive computations, particularly if `m` approaches the upper limit (e.g., near 1000)."
   - This invariant highlights the direct correlation between the value of `m` and the number of iterations in the nested loop, which impacts performance.

2. **Sparse Connection Matrix**:
   - **Invariant**: "When the number of connectors `n` is small relative to `m`, there is a higher likelihood of the matrix being sparse, causing the nested loop to perform many checks with little progress."
   - This statement identifies a scenario where the program does unnecessary work due to the sparse nature of the `mapp` matrix.

3. **High Redundancy in Brain Connections**:
   - **Invariant**: "If the nervous system has a large number of brains but few connectors, the search for a valid structure (i.e., checking connectivity) becomes more computationally expensive."
   - This invariant captures the cost of checking many possible connections when the structure is not easily connected.

These invariants do not rely on specific values but rather characterize the conditions that lead to slow execution based on the problem constraints. They help identify scenarios where the performance degradation is likely due to input characteristics such as the size and structure of the brain network, rather than only focusing on maximum input size.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
One particularly well-known fact about zombies is that they move and think terribly slowly. While we still don't know why their movements are so sluggish, the problem of laggy thinking has been recently resolved. It turns out that the reason is not (as previously suspected) any kind of brain defect – it's the opposite! Independent researchers confirmed that the nervous system of a zombie is highly complicated – it consists of n brains (much like a cow has several stomachs). They are interconnected by brain connectors, which are veins capable of transmitting thoughts between brains. There are two important properties such a brain network should have to function properly: 

  1. It should be possible to exchange thoughts between any two pairs of brains (perhaps indirectly, through other brains). 
  2. There should be no redundant brain connectors, that is, removing any brain connector would make property 1 false. 



If both properties are satisfied, we say that the nervous system is valid. Unfortunately (?), if the system is not valid, the zombie stops thinking and becomes (even more) dead. Your task is to analyze a given nervous system of a zombie and find out whether it is valid.

Input

The first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) denoting the number of brains (which are conveniently numbered from 1 to n) and the number of brain connectors in the nervous system, respectively. In the next m lines, descriptions of brain connectors follow. Every connector is given as a pair of brains a b it connects (1 ≤ a, b ≤ n, a ≠ b).

Output

The output consists of one line, containing either yes or no depending on whether the nervous system is valid.

Examples

Input

4 4
1 2
2 3
3 1
4 1


Output

no


Input

6 5
1 2
2 3
3 4
4 5
3 6


Output

yes

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Below are the checker functions corresponding to the performance-characterizing invariants identified earlier:

1. **Checker for Nested Loop Over Large `m`**:
   - This checks if `m` is large enough to cause inefficiencies in the nested loop.

```cpp
void check_large_m_invariant(int m) {
    if (m > 900) { // Threshold chosen based on the input constraints
        cerr << "Warning: large_m_invariant triggered - excessive iterations in nested loop due to large m" << endl;
        abort();
    }
}
```

2. **Checker for Sparse Connection Matrix**:
   - This checks if there is a high disparity between `n` and `m`, indicating a sparse connection matrix.

```cpp
void check_sparse_matrix_invariant(int m, int n) {
    if (m > 900 && n < m / 2) { // Arbitrary threshold to define sparsity
        cerr << "Warning: sparse_matrix_invariant triggered - excessive checks for sparse connections" << endl;
        abort();
    }
}
```

3. **Checker for High Redundancy in Brain Connections**:
   - This checks if the system has a high number of brains but insufficient connectors to easily form a valid network.

```cpp
void check_redundant_connections_invariant(int m, int n) {
    if (m > 900 && n < m - 1) { // Ensures connectors are near minimal for `m`
        cerr << "Warning: redundant_connections_invariant triggered - potential redundancy in connections" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Original Program

Here is the refactored C++ code with the runtime checks integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;

int pre[10010], ran[10010];
int mapp[1010][1010], in[1010];

// Initialize the union-find structure
void init() {
    for (int i = 0; i < 10010; i++) {
        pre[i] = i;
        ran[i] = 1;
    }
}

// Find with path compression
int findd(int a) {
    while (a != pre[a]) {
        a = pre[a];
    }
    return a;
}

// Union by rank
void unite(int a, int b) {
    int a1 = findd(a);
    int b1 = findd(b);
    if (a1 < b1) {
        pre[b1] = a1;
        ran[a1] += ran[b1];
    } else if (a1 > b1) {
        pre[a1] = b1;
        ran[b1] += ran[a1];
    }
}

// Checker implementations from Phase 3
void check_large_m_invariant(int m) {
    if (m > 900) {
        cerr << "Warning: large_m_invariant triggered - excessive iterations in nested loop due to large m" << endl;
        abort();
    }
}

void check_sparse_matrix_invariant(int m, int n) {
    if (m > 900 && n < m / 2) {
        cerr << "Warning: sparse_matrix_invariant triggered - excessive checks for sparse connections" << endl;
        abort();
    }
}

void check_redundant_connections_invariant(int m, int n) {
    if (m > 900 && n < m - 1) {
        cerr << "Warning: redundant_connections_invariant triggered - potential redundancy in connections" << endl;
        abort();
    }
}

int main() {
    int m, n, p, q;
    while (scanf("%d%d", &m, &n) == 2) {
        // Insert performance checks here after reading inputs
        check_large_m_invariant(m);
        check_sparse_matrix_invariant(m, n);
        check_redundant_connections_invariant(m, n);

        init();
        memset(mapp, 0, sizeof(mapp));
        memset(in, 0, sizeof(in));

        while (n--) {
            scanf("%d%d", &p, &q);
            mapp[p][q] = 1;
            unite(p, q);
        }

        int sum = 0, flag = 0;
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= m; j++) {
                if (mapp[i][j]) {
                    sum++;
                }
            }
        }

        for (int i = 1; i <= m; i++) {
            if (ran[i] == m) flag = 1;
        }

        if (sum == m - 1 && flag == 1)
            printf("yes\n");
        else
            printf("no\n");
    }
    return 0;
}
```

### Explanation:

- **Placement of Checks**: The checks are inserted after reading the input values for `m` and `n`, but before the main logic executes. This ensures that the checks do not introduce unnecessary overhead in the nested loops or other computation-heavy parts of the code.
- **Thresholds**: The thresholds used in the checkers are derived from an understanding of when computational inefficiencies might arise, based on input constraints.
- **Utility**: These checks serve to catch performance issues during testing or when fuzzing the code with different inputs, helping isolate scenarios where the program could slow down significantly.

