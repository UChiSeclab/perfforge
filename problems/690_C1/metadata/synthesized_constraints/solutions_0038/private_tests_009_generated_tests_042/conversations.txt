system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

One particularly well-known fact about zombies is that they move and think terribly slowly. While we still don't know why their movements are so sluggish, the problem of laggy thinking has been recently resolved. It turns out that the reason is not (as previously suspected) any kind of brain defect – it's the opposite! Independent researchers confirmed that the nervous system of a zombie is highly complicated – it consists of n brains (much like a cow has several stomachs). They are interconnected by brain connectors, which are veins capable of transmitting thoughts between brains. There are two important properties such a brain network should have to function properly: 

  1. It should be possible to exchange thoughts between any two pairs of brains (perhaps indirectly, through other brains). 
  2. There should be no redundant brain connectors, that is, removing any brain connector would make property 1 false. 



If both properties are satisfied, we say that the nervous system is valid. Unfortunately (?), if the system is not valid, the zombie stops thinking and becomes (even more) dead. Your task is to analyze a given nervous system of a zombie and find out whether it is valid.

Input

The first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) denoting the number of brains (which are conveniently numbered from 1 to n) and the number of brain connectors in the nervous system, respectively. In the next m lines, descriptions of brain connectors follow. Every connector is given as a pair of brains a b it connects (1 ≤ a, b ≤ n, a ≠ b).

Output

The output consists of one line, containing either yes or no depending on whether the nervous system is valid.

Examples

Input

4 4
1 2
2 3
3 1
4 1


Output

no


Input

6 5
1 2
2 3
3 4
4 5
3 6


Output

yes

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
bool visited[100005 + 1];
vector<long long int> adj[100005 + 1];
long long int level[100005 + 1];
long long int ans = 0;
void initialize() {
  for (long long int i = 0; i <= 100005; i++) {
    visited[i] = false;
  }
}
void dfs(long long int i) {
  visited[i] = true;
  for (auto it : adj[i]) {
    if (visited[it] == false) {
      dfs(it);
    }
  }
}
signed main() {
  ios_base::sync_with_stdio(false), cin.tie(NULL);
  long long int n, m, x, y;
  cin >> n >> m;
  if (m != n - 1) {
    cout << "no" << endl;
    return 0;
  }
  for (long long int i = 1; i <= m; i++) {
    cin >> x >> y;
    adj[y].push_back(x);
    adj[x].push_back(y);
  }
  long long int c = 0;
  initialize();
  for (long long int i = 1; i <= n; i++) {
    if (visited[i] == false) {
      dfs(1);
      c++;
      if (c > 1) {
        cout << "no" << endl;
        return 0;
      }
    }
  }
  cout << "yes" << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

9 8
1 2
2 3
3 4
4 1
5 6
6 7
7 8
8 9


(G.2) Fast Input

7 4
1 2
2 3
3 1
4 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
bool visited[100005 + 1]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long int> adj[100005 + 1]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long int level[100005 + 1]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long int ans = 0; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void initialize() { /* line 7 slow_hit_count: 1, fast_hit_count: 0 */
  for (long long int i = 0; i <= 100005; i++) { /* line 8 slow_hit_count: 100007, fast_hit_count: 0 */
    visited[i] = false; /* line 9 slow_hit_count: 100006, fast_hit_count: 0 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 1, fast_hit_count: 0 */
void dfs(long long int i) { /* line 12 slow_hit_count: 5, fast_hit_count: 0 */
  visited[i] = true; /* line 13 slow_hit_count: 5, fast_hit_count: 0 */
  for (auto it : adj[i]) { /* line 14 slow_hit_count: 15, fast_hit_count: 0 */
    if (visited[it] == false) { /* line 15 slow_hit_count: 10, fast_hit_count: 0 */
      dfs(it); /* line 16 slow_hit_count: 3, fast_hit_count: 0 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 5, fast_hit_count: 0 */
signed main() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false), cin.tie(NULL); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  long long int n, m, x, y; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  if (m != n - 1) { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "no" << endl; /* line 25 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long int i = 1; i <= m; i++) { /* line 28 slow_hit_count: 9, fast_hit_count: 0 */
    cin >> x >> y; /* line 29 slow_hit_count: 8, fast_hit_count: 0 */
    adj[y].push_back(x); /* line 30 slow_hit_count: 8, fast_hit_count: 0 */
    adj[x].push_back(y); /* line 31 slow_hit_count: 8, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  long long int c = 0; /* line 33 slow_hit_count: 1, fast_hit_count: 0 */
  initialize(); /* line 34 slow_hit_count: 1, fast_hit_count: 0 */
  for (long long int i = 1; i <= n; i++) { /* line 35 slow_hit_count: 5, fast_hit_count: 0 */
    if (visited[i] == false) { /* line 36 slow_hit_count: 5, fast_hit_count: 0 */
      dfs(1); /* line 37 slow_hit_count: 2, fast_hit_count: 0 */
      c++; /* line 38 slow_hit_count: 2, fast_hit_count: 0 */
      if (c > 1) { /* line 39 slow_hit_count: 2, fast_hit_count: 0 */
        cout << "no" << endl; /* line 40 slow_hit_count: 1, fast_hit_count: 0 */
        return 0; /* line 41 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "yes" << endl; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Analyze Code and Identify Performance Bottlenecks

Upon analyzing the line-level hit counts between the fast and slow inputs, we observe the following:

1. **Lines with Significant Hit Differences:**
   - **Line 8:** The loop in the `initialize` function is executed 100007 times for the slow input. This line is likely a performance bottleneck.
   - **Line 14, 15, 16:** These lines are part of the `dfs` function, which show significantly more hits in the slow input, indicating deep or frequent recursion.

2. **Observations:**
   - The `initialize` function is called in both input scenarios, but it sets up an unnecessarily large array (`visited`) for the problem size, leading to inefficiencies.
   - In the `dfs` function, the recursive depth and the number of recursive calls are much higher in the slow case, suggesting a more complex or fragmented graph structure in the slow input. 

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some performance-characterizing invariants in natural language:

1. **Complex Graph Structures and Depth of Recursion:**
   - **Invariant Description:** "When the graph structure contains disconnected components or cycles that lead to repeated or deep recursive calls, the performance may degrade significantly."
   - **Explanation:** In the slow input, the graph seems to have more disconnected components or cycles, causing the `dfs` function to be called more frequently and deeply, thereby increasing execution time.

2. **Unoptimized Array Initializations:**
   - **Invariant Description:** "If the initialization of large data structures (e.g., boolean arrays) is not proportional to the problem constraints, it can lead to unnecessary overhead and slow performance."
   - **Explanation:** The `visited` array is initialized to a size far exceeding the input constraints (`n <= 1000`), leading to inefficiency.

3. **Graph Component Analysis:**
   - **Invariant Description:** "When the number of components or subgraphs in the graph exceeds a certain threshold relative to the number of nodes, the program may experience slower performance due to excessive recursion and exploration."
   - **Explanation:** For the slow input, the graph's structure likely introduces more than one component or redundant exploration paths, causing more recursive calls in the `dfs`.

These invariants will help a fuzzer identify input scenarios that can lead to performance bottlenecks. They focus on general structural characteristics of the input that might slow down the execution without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
One particularly well-known fact about zombies is that they move and think terribly slowly. While we still don't know why their movements are so sluggish, the problem of laggy thinking has been recently resolved. It turns out that the reason is not (as previously suspected) any kind of brain defect – it's the opposite! Independent researchers confirmed that the nervous system of a zombie is highly complicated – it consists of n brains (much like a cow has several stomachs). They are interconnected by brain connectors, which are veins capable of transmitting thoughts between brains. There are two important properties such a brain network should have to function properly: 

  1. It should be possible to exchange thoughts between any two pairs of brains (perhaps indirectly, through other brains). 
  2. There should be no redundant brain connectors, that is, removing any brain connector would make property 1 false. 



If both properties are satisfied, we say that the nervous system is valid. Unfortunately (?), if the system is not valid, the zombie stops thinking and becomes (even more) dead. Your task is to analyze a given nervous system of a zombie and find out whether it is valid.

Input

The first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) denoting the number of brains (which are conveniently numbered from 1 to n) and the number of brain connectors in the nervous system, respectively. In the next m lines, descriptions of brain connectors follow. Every connector is given as a pair of brains a b it connects (1 ≤ a, b ≤ n, a ≠ b).

Output

The output consists of one line, containing either yes or no depending on whether the nervous system is valid.

Examples

Input

4 4
1 2
2 3
3 1
4 1


Output

no


Input

6 5
1 2
2 3
3 4
4 5
3 6


Output

yes

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants as Checks in C++

Here are the C++ code snippets implementing the performance-characterizing invariants derived previously:

1. **Complex Graph Structures and Depth of Recursion:**

```cpp
void check_dfs_invariant(int recursiveCalls, int threshold) {
    if (recursiveCalls > threshold) {
        cerr << "Warning: dfs_invariant triggered - excessive recursion depth or branching factor" << endl;
        abort();
    }
}
```

2. **Unoptimized Array Initializations:**

```cpp
void check_initialization_invariant(int n, int maxSize) {
    if (n > maxSize) {
        cerr << "Warning: initialization_invariant triggered - unoptimized array size" << endl;
        abort();
    }
}
```

3. **Graph Component Analysis:**

```cpp
void check_component_invariant(int components, int threshold) {
    if (components > threshold) {
        cerr << "Warning: component_invariant triggered - more than expected graph components" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Below is the original C++ program with the integrated invariant checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

bool visited[100005 + 1];
vector<long long int> adj[100005 + 1];
long long int level[100005 + 1];
long long int ans = 0;

void initialize() {
    for (long long int i = 0; i <= 100005; i++) {
        visited[i] = false;
    }
}

// Function to check if initialization is optimized
void check_initialization_invariant(int n, int maxSize) {
    if (n > maxSize) {
        cerr << "Warning: initialization_invariant triggered - unoptimized array size" << endl;
        abort();
    }
}

// Function to check recursion depth or excessive branching
void check_dfs_invariant(int recursiveCalls, int threshold) {
    if (recursiveCalls > threshold) {
        cerr << "Warning: dfs_invariant triggered - excessive recursion depth or branching factor" << endl;
        abort();
    }
}

// Function to check for excessive graph components
void check_component_invariant(int components, int threshold) {
    if (components > threshold) {
        cerr << "Warning: component_invariant triggered - more than expected graph components" << endl;
        abort();
    }
}

void dfs(long long int i, int& recursiveCalls) {
    visited[i] = true;
    recursiveCalls++;
    for (auto it : adj[i]) {
        if (visited[it] == false) {
            dfs(it, recursiveCalls);
        }
    }
}

signed main() {
    ios_base::sync_with_stdio(false), cin.tie(NULL);
    long long int n, m, x, y;
    cin >> n >> m;

    if (m != n - 1) {
        cout << "no" << endl;
        return 0;
    }

    // Check initialization invariant
    check_initialization_invariant(n, 1000);

    for (long long int i = 1; i <= m; i++) {
        cin >> x >> y;
        adj[y].push_back(x);
        adj[x].push_back(y);
    }

    long long int c = 0;
    initialize();

    for (long long int i = 1; i <= n; i++) {
        if (visited[i] == false) {
            int recursiveCalls = 0;
            dfs(i, recursiveCalls);

            // Check DFS invariant for deep recursion
            check_dfs_invariant(recursiveCalls, 100); // arbitrary threshold for demonstration

            c++;
            if (c > 1) {
                cout << "no" << endl;
                return 0;
            }
        }
    }

    // Check component invariant
    check_component_invariant(c, 1);

    cout << "yes" << endl;
}
```

### Explanation

- **Initialization Check:** The `check_initialization_invariant` function checks that the size of the initialized array does not exceed the problem constraints (`n <= 1000`).
- **DFS Recursion Check:** The `check_dfs_invariant` function monitors the depth or number of recursive calls during DFS execution, ensuring it does not become excessive.
- **Component Check:** The `check_component_invariant` function ensures the number of components in the graph does not exceed one, maintaining property 1 of connectivity.

These checks provide early detection of potential performance issues and aid in maintaining efficient program execution.

