system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Valera had two bags of potatoes, the first of these bags contains x (x ≥ 1) potatoes, and the second — y (y ≥ 1) potatoes. Valera — very scattered boy, so the first bag of potatoes (it contains x potatoes) Valera lost. Valera remembers that the total amount of potatoes (x + y) in the two bags, firstly, was not gerater than n, and, secondly, was divisible by k.

Help Valera to determine how many potatoes could be in the first bag. Print all such possible numbers in ascending order.

Input

The first line of input contains three integers y, k, n (1 ≤ y, k, n ≤ 109; <image> ≤ 105).

Output

Print the list of whitespace-separated integers — all possible values of x in ascending order. You should print each possible value of x exactly once.

If there are no such values of x print a single integer -1.

Examples

Input

10 1 10


Output

-1


Input

10 6 40


Output

2 8 14 20 26 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long mod = 998244353;
inline long long add(long long x, long long y) {
  x += y;
  if (x >= mod) x -= mod;
  return x;
}
inline long long sub(long long x, long long y) {
  x -= y;
  if (x < 0) x += mod;
  return x;
}
inline long long mul(long long x, long long y) { return (x * y) % mod; }
inline long long powr(long long a, long long b) {
  long long x = 1 % mod;
  while (b) {
    if (b & 1) x = mul(x, a);
    a = mul(a, a);
    b >>= 1;
  }
  return x;
}
inline long long inv(long long a) { return powr(a, mod - 2); }
void solve() {
  long long y, n, k, fg = 1;
  cin >> y >> k >> n;
  for (long long i = 1; i < (n / k) + 1; i++) {
    if (i * k > y) {
      fg = 0;
      cout << i * k - y << " ";
    }
  }
  if (fg) cout << "-1";
  return;
}
signed main() {
  long long t = 1;
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  while (t--) {
    solve();
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000000 1 100000


(G.2) Fast Input

1000000000 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long mod = 998244353; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
inline long long add(long long x, long long y) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  x += y; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  if (x >= mod) x -= mod; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  return x; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
inline long long sub(long long x, long long y) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  x -= y; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  if (x < 0) x += mod; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return x; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
inline long long mul(long long x, long long y) { return (x * y) % mod; } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
inline long long powr(long long a, long long b) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  long long x = 1 % mod; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  while (b) { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    if (b & 1) x = mul(x, a); /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    a = mul(a, a); /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    b >>= 1; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  return x; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
inline long long inv(long long a) { return powr(a, mod - 2); } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  long long y, n, k, fg = 1; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> y >> k >> n; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i < (n / k) + 1; i++) { /* line 28 slow_hit_count: 100001, fast_hit_count: 2 */
    if (i * k > y) { /* line 29 slow_hit_count: 100000, fast_hit_count: 1 */
      fg = 0; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      cout << i * k - y << " "; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  if (fg) cout << "-1"; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  return; /* line 35 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  long long t = 1; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(nullptr); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 42 slow_hit_count: 2, fast_hit_count: 2 */
    solve(); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottleneck of the provided C program, we need to identify the code segments that perform inefficiently for the slow input. Based on the hit count information, we can derive performance-characterizing invariants as follows:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Comparison:**
   - The line `for (long long i = 1; i < (n / k) + 1; i++)` (line 28) has significantly more hits for the slow input (`100001` hits) compared to the fast input (`2` hits).
   - The condition `if (i * k > y)` (line 29) is evaluated `100000` times for the slow input but only once for the fast input.

2. **Inference:**
   - The loop is executing a large number of iterations due to the range determined by `n / k`.
   - The condition `i * k > y` checks if the current multiple of `k` is greater than `y`, which is essential for determining valid values of `x`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the loop's behavior and hit counts, we can derive the following natural language invariants:

1. **Invariant #1: Large Iteration Range**
   - **Description:** The program experiences a slowdown if the range of the loop `(n / k)` is large. This happens when `n` is significantly larger than `k`. Since `n` is divided by `k` to determine the number of iterations, a large ratio results in many loop iterations.
   - **Condition:** "If `n` is much larger than `k` and `y` is small enough such that many multiples of `k` exceed `y`, the loop will execute many times, causing a slowdown."

2. **Invariant #2: Low Filtering by Condition**
   - **Description:** The slowdown is compounded if the condition `i * k > y` rarely filters out iterations. This means most of the iterations result in output, further increasing computational workload.
   - **Condition:** "If most multiples of `k` within the loop range exceed `y`, the program spends more time outputting results, further slowing down execution."

These invariants help characterize the performance issues without relying on specific values from the slow input, focusing instead on the relationships between `y`, `k`, and `n` that lead to inefficiency.


user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Valera had two bags of potatoes, the first of these bags contains x (x ≥ 1) potatoes, and the second — y (y ≥ 1) potatoes. Valera — very scattered boy, so the first bag of potatoes (it contains x potatoes) Valera lost. Valera remembers that the total amount of potatoes (x + y) in the two bags, firstly, was not gerater than n, and, secondly, was divisible by k.

Help Valera to determine how many potatoes could be in the first bag. Print all such possible numbers in ascending order.

Input

The first line of input contains three integers y, k, n (1 ≤ y, k, n ≤ 109; <image> ≤ 105).

Output

Print the list of whitespace-separated integers — all possible values of x in ascending order. You should print each possible value of x exactly once.

If there are no such values of x print a single integer -1.

Examples

Input

10 1 10


Output

-1


Input

10 6 40


Output

2 8 14 20 26 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here, I will translate the natural language performance invariants into C++ code snippets:

1. **Invariant #1: Large Iteration Range**
   
   ```cpp
   void check_large_iteration_range(long long n, long long k) {
       if (n / k > 100000) {  // Arbitrary threshold to detect large iteration range
           cerr << "Warning: Performance bottleneck condition triggered - large iteration range!" << endl;
           abort();
       }
   }
   ```

2. **Invariant #2: Low Filtering by Condition**

   ```cpp
   void check_low_filtering_condition(long long n, long long y, long long k) {
       if (y < k && n / k > 1000) {  // Condition where i*k > y rarely filters out iterations
           cerr << "Warning: Performance bottleneck condition triggered - low filtering by condition!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checker C++ Code Snippets with the Original Program

Here's the original program with the integrated invariant checks:

```cpp
#include <bits/stdc++.h>
using namespace std;
long long mod = 998244353;

inline long long add(long long x, long long y) {
  x += y;
  if (x >= mod) x -= mod;
  return x;
}

inline long long sub(long long x, long long y) {
  x -= y;
  if (x < 0) x += mod;
  return x;
}

inline long long mul(long long x, long long y) { return (x * y) % mod; }

inline long long powr(long long a, long long b) {
  long long x = 1 % mod;
  while (b) {
    if (b & 1) x = mul(x, a);
    a = mul(a, a);
    b >>= 1;
  }
  return x;
}

inline long long inv(long long a) { return powr(a, mod - 2); }

// Performance checkers
void check_large_iteration_range(long long n, long long k) {
    if (n / k > 100000) {  // Arbitrary threshold to detect large iteration range
        cerr << "Warning: Performance bottleneck condition triggered - large iteration range!" << endl;
        abort();
    }
}

void check_low_filtering_condition(long long n, long long y, long long k) {
    if (y < k && n / k > 1000) {  // Condition where i*k > y rarely filters out iterations
        cerr << "Warning: Performance bottleneck condition triggered - low filtering by condition!" << endl;
        abort();
    }
}

void solve() {
  long long y, n, k, fg = 1;
  cin >> y >> k >> n;

  // Check for performance conditions
  check_large_iteration_range(n, k);
  check_low_filtering_condition(n, y, k);

  for (long long i = 1; i < (n / k) + 1; i++) {
    if (i * k > y) {
      fg = 0;
      cout << i * k - y << " ";
    }
  }

  if (fg) cout << "-1";
  return;
}

signed main() {
  long long t = 1;
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  while (t--) {
    solve();
  }
  return 0;
}
```

### Explanation

1. **`check_large_iteration_range`:** This check is added right after reading `n` and `k` to ensure that the loop's iteration range doesn't become excessively large, which could cause a performance bottleneck.

2. **`check_low_filtering_condition`:** This check is also added after reading inputs to verify that the loop's filtering condition (`i * k > y`) doesn't become ineffective, leading to unnecessary iterations. 

These checks help in identifying situations where the program might face performance issues, allowing a fuzzer to detect potential slowdowns.

