system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Valera had two bags of potatoes, the first of these bags contains x (x ≥ 1) potatoes, and the second — y (y ≥ 1) potatoes. Valera — very scattered boy, so the first bag of potatoes (it contains x potatoes) Valera lost. Valera remembers that the total amount of potatoes (x + y) in the two bags, firstly, was not gerater than n, and, secondly, was divisible by k.

Help Valera to determine how many potatoes could be in the first bag. Print all such possible numbers in ascending order.

Input

The first line of input contains three integers y, k, n (1 ≤ y, k, n ≤ 109; <image> ≤ 105).

Output

Print the list of whitespace-separated integers — all possible values of x in ascending order. You should print each possible value of x exactly once.

If there are no such values of x print a single integer -1.

Examples

Input

10 1 10


Output

-1


Input

10 6 40


Output

2 8 14 20 26 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int y, m, n;
  cin >> y >> m >> n;
  bool f = true;
  int x = 1;
  vector<int> a;
  for (int i = m - y; i <= n - y; i += m) {
    if ((i + y) % m == 0 && i > 0) {
      a.push_back(i);
    }
  }
  if (a.empty())
    cout << -1 << endl;
  else {
    for (int i = 0; i < a.size(); i++) cout << a[i] << " ";
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000000 1 100000


(G.2) Fast Input

1000000000 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int y, m, n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> y >> m >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  bool f = true; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int x = 1; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> a; /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = m - y; i <= n - y; i += m) { /* line 9 slow_hit_count: 100001, fast_hit_count: 2 */
    if ((i + y) % m == 0 && i > 0) { /* line 10 slow_hit_count: 100000, fast_hit_count: 1 */
      a.push_back(i); /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  if (a.empty()) /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    cout << -1 << endl; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  else { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < a.size(); i++) cout << a[i] << " "; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the provided C++ code and derive performance-characterizing invariants, let's go through the tasks outlined in the problem statement.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-level Hit Counts**: 
   - The `for` loop on line 9 has a significant disparity in hit counts between the slow and fast inputs. It is hit 100,001 times with the slow input, compared to just 2 times with the fast input.
   - The `if` condition inside the loop on line 10 is hit frequently (100,000 times) when running the slow input, which suggests this loop is a major contributor to the performance degradation.

2. **Pinpointing Lines or Functions**:
   - The loop from `m - y` to `n - y`, stepping by `m`, is the critical section of the code, especially when `m - y` is much smaller than `n - y`. This causes the loop to iterate a large number of times.

3. **Inference Regarding Data Structures and Loops**:
   - The code uses a loop to find numbers `i` such that `(i + y) % m == 0` and `i > 0`. As `n` and `y` are large, and `m` is small (1 in this case), the loop covers a wide range with many iterations.
   - Since `n` is large and `m` is small compared to `y`, the loop performs excessive iterations without any substantial early exit.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Performance Invariants**:
   - **Invariant 1**: When the difference between `n` and `y` is large and `m` is small, the loop iterates excessively, leading to increased execution time.
   - **Invariant 2**: If `m` is significantly smaller than `y` and `n`, the condition `(i + y) % m == 0` results in a high number of checks over an extensive range, slowing the computation.
   - **Invariant 3**: Performance degradation occurs when the lower bound of the loop (`m - y`) is much less than the upper bound (`n - y`), causing the loop to execute many times without early termination.

2. **Avoiding Exact Numeric Dependencies**:
   - The above invariants abstractly describe scenarios that lead to increased computational time without relying on specific numeric values from the slow input. They use relational descriptions (e.g., "difference between `n` and `y` is large") instead.

3. **Correlation with Input Patterns**:
   - These invariants correlate strongly with input patterns where `n` is at its maximum or near its maximum constraint (e.g., close to `10^9`), `y` is large, and `m` is small, as demonstrated by the slow input.

4. **Broad but Realistic Triggers**:
   - The statements capture realistic triggers for slow performance by considering how input values relate to each other, such as `n - y` and the stepping interval `m`.

### Conclusion

By identifying the critical loop and understanding how the input parameters interact, we've derived natural language performance invariants that highlight conditions causing the program to slow down. These invariants should help guide optimizations or aid fuzzer tools in identifying similar slow-performance scenarios in the future.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Valera had two bags of potatoes, the first of these bags contains x (x ≥ 1) potatoes, and the second — y (y ≥ 1) potatoes. Valera — very scattered boy, so the first bag of potatoes (it contains x potatoes) Valera lost. Valera remembers that the total amount of potatoes (x + y) in the two bags, firstly, was not gerater than n, and, secondly, was divisible by k.

Help Valera to determine how many potatoes could be in the first bag. Print all such possible numbers in ascending order.

Input

The first line of input contains three integers y, k, n (1 ≤ y, k, n ≤ 109; <image> ≤ 105).

Output

Print the list of whitespace-separated integers — all possible values of x in ascending order. You should print each possible value of x exactly once.

If there are no such values of x print a single integer -1.

Examples

Input

10 1 10


Output

-1


Input

10 6 40


Output

2 8 14 20 26 

Solution (C++ code):
{solution}


assistant: Let's implement the natural language invariants derived earlier into C++ code checks.

### Phase 3: Implement the Natural Language Invariants in C++

Here are the natural language invariants translated into C++ checker code:

1. **Invariant 1**: When the difference between `n` and `y` is large and `m` (equivalent to `k` in the original problem statement) is small, the loop iterates excessively, leading to increased execution time.

```cpp
void check_large_range_small_step_invariant(int y, int m, int n) {
    if ((n - y) / m > 100000) {  // This threshold is chosen as a proxy for excessive iterations
        cerr << "Warning: large_range_small_step_invariant triggered - excessive loop iterations" << endl;
        abort();
    }
}
```

2. **Invariant 2**: If `m` is significantly smaller than `y` and `n`, the condition `(i + y) % m == 0` results in a high number of checks over an extensive range, slowing the computation.

```cpp
void check_small_m_invariant(int y, int m, int n) {
    if (m < 10 && n > 100000 && y > 100000) {  // Arbitrary but reasonable threshold
        cerr << "Warning: small_m_invariant triggered - m is very small compared to n and y" << endl;
        abort();
    }
}
```

3. **Invariant 3**: Performance degradation occurs when the lower bound of the loop (`m - y`) is much less than the upper bound (`n - y`), causing the loop to execute many times without early termination.

```cpp
void check_large_diff_invariant(int y, int m, int n) {
    if ((n - y) - (m - y) > 1000000) {  // Another threshold indicating excessive iterations
        cerr << "Warning: large_diff_invariant triggered - large loop range" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code with the Original Program

Now, let's integrate these checks into the original C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checkers for performance invariants
void check_large_range_small_step_invariant(int y, int m, int n) {
    if ((n - y) / m > 100000) {
        cerr << "Warning: large_range_small_step_invariant triggered - excessive loop iterations" << endl;
        abort();
    }
}

void check_small_m_invariant(int y, int m, int n) {
    if (m < 10 && n > 100000 && y > 100000) {
        cerr << "Warning: small_m_invariant triggered - m is very small compared to n and y" << endl;
        abort();
    }
}

void check_large_diff_invariant(int y, int m, int n) {
    if ((n - y) - (m - y) > 1000000) {
        cerr << "Warning: large_diff_invariant triggered - large loop range" << endl;
        abort();
    }
}

int main() {
    int y, m, n;
    cin >> y >> m >> n;

    // Insert checks after input to catch problematic configurations early
    check_large_range_small_step_invariant(y, m, n);
    check_small_m_invariant(y, m, n);
    check_large_diff_invariant(y, m, n);

    vector<int> a;
    for (int i = m - y; i <= n - y; i += m) {
        if ((i + y) % m == 0 && i > 0) {
            a.push_back(i);
        }
    }

    if (a.empty()) {
        cout << -1 << endl;
    } else {
        for (int i = 0; i < a.size(); i++) cout << a[i] << " ";
    }
}
```

### Explanation

- **Integration**: Each of the checks is placed right after reading the input, which prevents entering the main loop if conditions that could lead to performance degradation are met.
- **Checks**: The checks help identify potentially problematic input configurations quickly, providing immediate feedback if the program is likely to slow down due to such inputs. These are not hardcoded to specific values from the slow input but are instead based on general conditions derived from the problem context.
- **Abort on Trigger**: When any condition is met, the program will abort with a descriptive warning message to help diagnose the issue.

