system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

One day Anna got the following task at school: to arrange several numbers in a circle so that any two neighboring numbers differs exactly by 1. Anna was given several numbers and arranged them in a circle to fulfill the task. Then she wanted to check if she had arranged the numbers correctly, but at this point her younger sister Maria came and shuffled all numbers. Anna got sick with anger but what's done is done and the results of her work had been destroyed. But please tell Anna: could she have hypothetically completed the task using all those given numbers?

Input

The first line contains an integer n — how many numbers Anna had (3 ≤ n ≤ 105). The next line contains those numbers, separated by a space. All numbers are integers and belong to the range from 1 to 109.

Output

Print the single line "YES" (without the quotes), if Anna could have completed the task correctly using all those numbers (using all of them is necessary). If Anna couldn't have fulfilled the task, no matter how hard she would try, print "NO" (without the quotes).

Examples

Input

4
1 2 3 2


Output

YES


Input

6
1 1 2 2 2 3


Output

YES


Input

6
2 4 1 1 2 2


Output

NO

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5, inf = 1e9;
int n, a[N], buc[N], mi = inf;
int main() {
  scanf("%d", &n);
  if (n & 1) return puts("NO"), 0;
  for (int i = 1; i <= n; i++) scanf("%d", &a[i]), mi = min(mi, a[i]);
  sort(a + 1, a + 1 + n);
  for (int i = 2; i <= n; i++)
    if (a[i] - a[i - 1] > 1) return puts("NO"), 0;
  for (int i = 1; i <= n; i++) ++buc[a[i] - mi + 1];
  int u = 1;
  --buc[1];
  while (true) {
    if (buc[u + 1])
      --buc[++u];
    else if (buc[u - 1])
      --buc[--u];
    else
      break;
  }
  if (u != 2) return puts("NO"), 0;
  for (int i = 0; i <= N - 1; i++)
    if (buc[i]) return puts("NO"), 0;
  return puts("YES"), 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

6
1 1 3 2 2 2


(G.2) Fast Input

3
1 1 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e5 + 5, inf = 1e9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, a[N], buc[N], mi = inf; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  if (n & 1) return puts("NO"), 0; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) scanf("%d", &a[i]), mi = min(mi, a[i]); /* line 8 slow_hit_count: 7, fast_hit_count: 0 */
  sort(a + 1, a + 1 + n); /* line 9 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 2; i <= n; i++) /* line 10 slow_hit_count: 6, fast_hit_count: 0 */
    if (a[i] - a[i - 1] > 1) return puts("NO"), 0; /* line 11 slow_hit_count: 5, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) ++buc[a[i] - mi + 1]; /* line 12 slow_hit_count: 7, fast_hit_count: 0 */
  int u = 1; /* line 13 slow_hit_count: 1, fast_hit_count: 0 */
  --buc[1]; /* line 14 slow_hit_count: 1, fast_hit_count: 0 */
  while (true) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    if (buc[u + 1]) /* line 16 slow_hit_count: 6, fast_hit_count: 0 */
      --buc[++u]; /* line 17 slow_hit_count: 3, fast_hit_count: 0 */
    else if (buc[u - 1]) /* line 18 slow_hit_count: 3, fast_hit_count: 0 */
      --buc[--u]; /* line 19 slow_hit_count: 2, fast_hit_count: 0 */
    else /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
      break; /* line 21 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  if (u != 2) return puts("NO"), 0; /* line 23 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 0; i <= N - 1; i++) /* line 24 slow_hit_count: 100006, fast_hit_count: 0 */
    if (buc[i]) return puts("NO"), 0; /* line 25 slow_hit_count: 100005, fast_hit_count: 0 */
  return puts("YES"), 0; /* line 26 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the given C program and derive performance-characterizing invariants, we need to break down the code and compare the line-level hit counts for the fast and slow inputs. Here are the steps for this analysis process:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The `for` loop on line 24 and the `if` condition on line 25 are hit significantly more often in the slow input run compared to the fast input run. Specifically, line 24 is hit 100,006 times, and line 25 is hit 100,005 times for the slow input, indicating a potential bottleneck.

2. **Pinpoint Lines or Functions with High Hits:**
   - Lines 24 and 25 are part of a loop iterating over the range from 0 to `N - 1`, checking if `buc[i]` is non-zero. This loop can potentially iterate a large number of times based on the size of `buc`, which is determined by the difference between the minimum value and the maximum value in the input array.

3. **Infer Code Interaction with Data Structures:**
   - The loop on lines 24 and 25 suggests an inefficient use of the `buc` array when the input has a wide range or is not densely packed. The `buc` array is being used to keep track of the presence of numbers relative to the minimum value, but if the numbers are sparse with large gaps, this can lead to extensive and inefficient iterations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the code analysis and line hit counts, here are some performance-characterizing invariants:

1. **Large Range Between Minimum and Maximum Values:**
   - Natural Language Description: "If the range of numbers (from minimum to maximum) is large relative to the count of numbers (`n`), performance can degrade due to excessive iterations over a large 'buc' array."
   - This insight is drawn from the extensive loop iteration when `buc` must range from 0 to a large maximum value minus the minimum value.

2. **Sparse Distribution of Values:**
   - Natural Language Description: "If the numbers are sparsely distributed with large gaps, the program may slow down due to many unnecessary checks over empty slots in the 'buc' array."
   - The sparse distribution leads to numerous iterations in the loop on lines 24-25, checking empty or zero slots in `buc`.

3. **High Cardinality with Small Differences:**
   - Natural Language Description: "When input numbers exhibit high cardinality with small differences, the program might slow down as it frequently adjusts the 'buc' array, increasing its range inefficiency."
   - This can cause the loop to check values that do not contribute to a distinct sequence, especially when consecutive numbers are repeated.

By understanding these conditions, developers can anticipate when the program might take a slow path and optimize or restructure data handling to avoid unnecessary computations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
One day Anna got the following task at school: to arrange several numbers in a circle so that any two neighboring numbers differs exactly by 1. Anna was given several numbers and arranged them in a circle to fulfill the task. Then she wanted to check if she had arranged the numbers correctly, but at this point her younger sister Maria came and shuffled all numbers. Anna got sick with anger but what's done is done and the results of her work had been destroyed. But please tell Anna: could she have hypothetically completed the task using all those given numbers?

Input

The first line contains an integer n — how many numbers Anna had (3 ≤ n ≤ 105). The next line contains those numbers, separated by a space. All numbers are integers and belong to the range from 1 to 109.

Output

Print the single line "YES" (without the quotes), if Anna could have completed the task correctly using all those numbers (using all of them is necessary). If Anna couldn't have fulfilled the task, no matter how hard she would try, print "NO" (without the quotes).

Examples

Input

4
1 2 3 2


Output

YES


Input

6
1 1 2 2 2 3


Output

YES


Input

6
2 4 1 1 2 2


Output

NO

Solution (C++ code):
{solution}


assistant: To transform the performance-characterizing invariants into C++ runtime checks and integrate them into the original program, we will first write the checker functions (Phase 3), and then incorporate them into the existing code (Phase 4).

### Phase 3: Implement the Natural Language Invariants in C++

For each invariant derived, we provide a corresponding C++ code snippet:

1. **Large Range Between Minimum and Maximum Values:**
   ```cpp
   void check_range_invariant(int min_value, int max_value, int n) {
       if ((max_value - min_value) > n * 10) { // Arbitrary factor to represent significant range
           cerr << "Warning: range_invariant triggered - large range between min and max values" << endl;
           abort();
       }
   }
   ```

2. **Sparse Distribution of Values:**
   ```cpp
   void check_sparse_distribution_invariant(int n, const vector<int>& buc) {
       int non_zero_count = 0;
       for (int val : buc) {
           if (val > 0) non_zero_count++;
       }
       if (non_zero_count < n / 2) { // If less than half are non-zero, consider it sparse
           cerr << "Warning: sparse_distribution_invariant triggered - sparse distribution of values" << endl;
           abort();
       }
   }
   ```

3. **High Cardinality with Small Differences:**
   ```cpp
   void check_cardinality_invariant(const vector<int>& a, int n) {
       int small_diff_count = 0;
       for (int i = 1; i < n; ++i) {
           if (abs(a[i] - a[i - 1]) == 1) small_diff_count++;
       }
       if (small_diff_count > n * 0.8) { // If more than 80% have small differences
           cerr << "Warning: cardinality_invariant triggered - high cardinality with small differences" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checkers into the Original Program

Now we'll integrate these checks into the existing program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5, inf = 1e9;
int n, a[N], buc[N], mi = inf;

void check_range_invariant(int min_value, int max_value, int n) {
    if ((max_value - min_value) > n * 10) {
        cerr << "Warning: range_invariant triggered - large range between min and max values" << endl;
        abort();
    }
}

void check_sparse_distribution_invariant(int n, const int* buc) {
    int non_zero_count = 0;
    for (int i = 0; i <= N; ++i) {
        if (buc[i] > 0) non_zero_count++;
    }
    if (non_zero_count < n / 2) {
        cerr << "Warning: sparse_distribution_invariant triggered - sparse distribution of values" << endl;
        abort();
    }
}

void check_cardinality_invariant(const int* a, int n) {
    int small_diff_count = 0;
    for (int i = 2; i <= n; ++i) {
        if (abs(a[i] - a[i - 1]) == 1) small_diff_count++;
    }
    if (small_diff_count > n * 0.8) {
        cerr << "Warning: cardinality_invariant triggered - high cardinality with small differences" << endl;
        abort();
    }
}

int main() {
    scanf("%d", &n);
    if (n & 1) return puts("NO"), 0;
    int max_value = -1;
    for (int i = 1; i <= n; i++) {
        scanf("%d", &a[i]);
        mi = min(mi, a[i]);
        max_value = max(max_value, a[i]);
    }
    
    check_range_invariant(mi, max_value, n);
    
    sort(a + 1, a + 1 + n);
    
    check_cardinality_invariant(a, n);
    
    for (int i = 2; i <= n; i++)
        if (a[i] - a[i - 1] > 1) return puts("NO"), 0;
    
    for (int i = 1; i <= n; i++) ++buc[a[i] - mi + 1];
    
    check_sparse_distribution_invariant(n, buc);
    
    int u = 1;
    --buc[1];
    
    while (true) {
        if (buc[u + 1])
            --buc[++u];
        else if (buc[u - 1])
            --buc[--u];
        else
            break;
    }
    if (u != 2) return puts("NO"), 0;
    for (int i = 0; i <= N - 1; i++)
        if (buc[i]) return puts("NO"), 0;
    return puts("YES"), 0;
}
```

### Explanation of Inserted Checks

- **`check_range_invariant`**: This is inserted after determining the minimum (`mi`) and maximum values of the input to ensure the range doesn't cause excessive iterations.
- **`check_cardinality_invariant`**: Added after sorting to verify that there are not excessive small differences between consecutive numbers.
- **`check_sparse_distribution_invariant`**: Placed after populating `buc` to ensure that the distribution of values isn't too sparse, which would trigger extensive iteration over zero elements. 

These checks help detect potential performance issues at runtime, allowing developers to intervene and optimize the code when necessary.

