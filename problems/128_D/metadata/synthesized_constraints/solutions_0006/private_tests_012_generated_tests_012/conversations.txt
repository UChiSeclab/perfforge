system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

One day Anna got the following task at school: to arrange several numbers in a circle so that any two neighboring numbers differs exactly by 1. Anna was given several numbers and arranged them in a circle to fulfill the task. Then she wanted to check if she had arranged the numbers correctly, but at this point her younger sister Maria came and shuffled all numbers. Anna got sick with anger but what's done is done and the results of her work had been destroyed. But please tell Anna: could she have hypothetically completed the task using all those given numbers?

Input

The first line contains an integer n — how many numbers Anna had (3 ≤ n ≤ 105). The next line contains those numbers, separated by a space. All numbers are integers and belong to the range from 1 to 109.

Output

Print the single line "YES" (without the quotes), if Anna could have completed the task correctly using all those numbers (using all of them is necessary). If Anna couldn't have fulfilled the task, no matter how hard she would try, print "NO" (without the quotes).

Examples

Input

4
1 2 3 2


Output

YES


Input

6
1 1 2 2 2 3


Output

YES


Input

6
2 4 1 1 2 2


Output

NO

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int inf = 1010101010;
int main() {
  int n;
  cin >> n;
  vector<int> v(n);
  for (int i = 0; i < (n); i++) cin >> v[i];
  int mi = inf, mx = 0;
  for (int i = 0; i < (n); i++) mi = min(mi, v[i]), mx = max(mx, v[i]);
  if (mx - mi > 100000) {
    puts("NO");
    return 0;
  };
  for (int i = 0; i < (n); i++) v[i] -= mi;
  mx -= mi;
  vector<int> cnt(100005);
  for (int i = 0; i < (n); i++) cnt[v[i]]++;
  int nd = 0;
  for (int i = mx - 1; i > 0; i--) {
    if (cnt[i] == 0) {
      puts("NO");
      return 0;
    };
    cnt[i]--;
    nd++;
  }
  for (int curpos = 0; curpos != mx + 1;) {
    if (cnt[curpos] == 0) {
      puts("NO");
      return 0;
    };
    cnt[curpos]--;
    nd++;
    if (curpos > 0 && cnt[curpos - 1]) {
      curpos--;
    } else {
      curpos++;
    }
  }
  if (nd == n)
    puts("YES");
  else {
    puts("NO");
    return 0;
  };
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50
363510947 363510954 363510943 363510964 363510969 363510950 363510951 363510960 363510967 363510952 363510956 363510948 363510944 363510946 363510965 363510946 363510963 363510962 363510947 363510955 363510954 363510948 363510961 363510964 363510963 363510945 363510965 363510953 363510952 363510968 363510955 363510966 363510968 363510950 363510967 363510949 363510958 363510957 363510956 363510959 363510953 363510951 363510966 363510949 363510944 363510962 363510945 363510958 363510961 363510957


(G.2) Fast Input

50
363510947 363510954 363510943 363510964 363510969 363510950 363510951 363510960 363510967 363510952 363510956 363510948 363510944 363510946 363510965 363510946 363510963 479113745 363510947 363510955 363510954 363510948 363510961 363510964 363510963 363510945 363510965 363510953 363510952 363510968 363510955 363510966 363510968 363510950 363510967 363510949 363510958 363510957 363510956 363510959 363510953 363510951 363510966 363510949 363510944 363510962 363510945 363510958 363510961 363510957


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 1010101010; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> v(n); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (n); i++) cin >> v[i]; /* line 8 slow_hit_count: 51, fast_hit_count: 51 */
  int mi = inf, mx = 0; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (n); i++) mi = min(mi, v[i]), mx = max(mx, v[i]); /* line 10 slow_hit_count: 51, fast_hit_count: 51 */
  if (mx - mi > 100000) { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
    puts("NO"); /* line 12 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 13 slow_hit_count: 0, fast_hit_count: 1 */
  }; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < (n); i++) v[i] -= mi; /* line 15 slow_hit_count: 51, fast_hit_count: 0 */
  mx -= mi; /* line 16 slow_hit_count: 1, fast_hit_count: 0 */
  vector<int> cnt(100005); /* line 17 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 0; i < (n); i++) cnt[v[i]]++; /* line 18 slow_hit_count: 51, fast_hit_count: 0 */
  int nd = 0; /* line 19 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = mx - 1; i > 0; i--) { /* line 20 slow_hit_count: 26, fast_hit_count: 0 */
    if (cnt[i] == 0) { /* line 21 slow_hit_count: 25, fast_hit_count: 0 */
      puts("NO"); /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    }; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    cnt[i]--; /* line 25 slow_hit_count: 25, fast_hit_count: 0 */
    nd++; /* line 26 slow_hit_count: 25, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  for (int curpos = 0; curpos != mx + 1;) { /* line 28 slow_hit_count: 17, fast_hit_count: 0 */
    if (cnt[curpos] == 0) { /* line 29 slow_hit_count: 17, fast_hit_count: 0 */
      puts("NO"); /* line 30 slow_hit_count: 1, fast_hit_count: 0 */
      return 0; /* line 31 slow_hit_count: 1, fast_hit_count: 0 */
    }; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    cnt[curpos]--; /* line 33 slow_hit_count: 16, fast_hit_count: 0 */
    nd++; /* line 34 slow_hit_count: 16, fast_hit_count: 0 */
    if (curpos > 0 && cnt[curpos - 1]) { /* line 35 slow_hit_count: 16, fast_hit_count: 0 */
      curpos--; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      curpos++; /* line 38 slow_hit_count: 16, fast_hit_count: 0 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  if (nd == n) /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    puts("YES"); /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  else { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    puts("NO"); /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  }; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identifying Expensive or Inefficient Code Segments

Based on the hit count information provided:

1. **Lines with Significant Hit Difference:**
   - **Line 15**: The slow input hit count is 51, while the fast input is 0. This line adjusts all numbers by subtracting the minimum value, which indicates the subsequent operations depend on these adjusted values.
   - **Lines 20-26**: These lines represent a loop that iterates `mx-1` times, decrementing values in the `cnt` array and keeping track of `nd`. This loop is executed 25 times for the slow input but not at all for the fast input.
   - **Lines 28-38**: This loop iteratively adjusts `curpos` and decrements values in `cnt`. For the slow input, the loop runs 17 times, while it is not hit for the fast input.

2. **Potential Inefficient Code Segments:**
   - The loop from lines 20 to 27 iterates over the potential range of values, which could contribute to inefficiency if the range (`mx`) is large.
   - The second loop from lines 28 to 40 iteratively updates `curpos` and checks counts, which could be inefficient if these operations are substantial in number due to the structure of `cnt`.

3. **Data Structure Interaction:**
   - The vector `cnt` is heavily interacted with in both loops. It appears that the program relies on counting specific values, and the indexed operations on this vector are key to the performance.

## Phase 2: Deriving Performance-Characterizing Invariants

Based on the slow path identification, here are the natural language descriptions of conditions that likely trigger performance issues:

1. **Invariant 1: Large Range of Numbers After Adjustment**
   - **Natural Language Description**: “If the range of numbers (after adjusting by subtracting the minimum) is large, the program may enter a slow path due to extensive iterations over this range.”
   - **Explanation**: The loop on lines 20-27 is dependent on the range `mx`, which is the span of numbers after adjustment. A large range results in more iterations and can slow down execution.

2. **Invariant 2: Excessive Iterations in Range Dependent Loops**
   - **Natural Language Description**: “When `cnt` values require multiple adjustments over a broad range, especially with repeated differences, performance may degrade due to excessive loop iterations.”
   - **Explanation**: The second loop (lines 28-40) relies on decrementing and adjusting positions based on `cnt` values. If there are many numbers that require decrementing, the loop iterates multiple times, slowing down the program.

3. **Invariant 3: Dense Value Distribution**
   - **Natural Language Description**: “If the values are densely clustered around a few numbers, especially near the edges of the range, the program may slow as it processes these values repeatedly.”
   - **Explanation**: Dense clusters can create conditions where the loops need to adjust the same or neighboring positions multiple times, leading to performance issues.

These invariants provide a broad understanding of what triggers the slow execution path in the given program, abstracting away specific input values but focusing on input structures that lead to inefficiencies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
One day Anna got the following task at school: to arrange several numbers in a circle so that any two neighboring numbers differs exactly by 1. Anna was given several numbers and arranged them in a circle to fulfill the task. Then she wanted to check if she had arranged the numbers correctly, but at this point her younger sister Maria came and shuffled all numbers. Anna got sick with anger but what's done is done and the results of her work had been destroyed. But please tell Anna: could she have hypothetically completed the task using all those given numbers?

Input

The first line contains an integer n — how many numbers Anna had (3 ≤ n ≤ 105). The next line contains those numbers, separated by a space. All numbers are integers and belong to the range from 1 to 109.

Output

Print the single line "YES" (without the quotes), if Anna could have completed the task correctly using all those numbers (using all of them is necessary). If Anna couldn't have fulfilled the task, no matter how hard she would try, print "NO" (without the quotes).

Examples

Input

4
1 2 3 2


Output

YES


Input

6
1 1 2 2 2 3


Output

YES


Input

6
2 4 1 1 2 2


Output

NO

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing Checker Code for Invariants

Here are the C++ snippets implementing the performance-characterizing invariants identified in natural language:

### Invariant 1: Large Range of Numbers After Adjustment
```cpp
void check_large_range_invariant(int mx, int mi) {
    if (mx - mi > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - large range after adjustment!" << endl;
        abort();
    }
}
```

### Invariant 2: Excessive Iterations in Range Dependent Loops
```cpp
void check_excessive_iterations_invariant(int mx) {
    if (mx > 100000) {  // Assuming mx threshold that leads to many iterations.
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations due to broad range!" << endl;
        abort();
    }
}
```

### Invariant 3: Dense Value Distribution
```cpp
void check_dense_distribution_invariant(const vector<int>& cnt, int mx) {
    int dense_threshold = 100;  // Assume a dense distribution threshold.
    int dense_count = 0;
    for (int i = 0; i <= mx; ++i) {
        if (cnt[i] > 0) {
            dense_count++;
        }
    }
    if (dense_count > dense_threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - dense value distribution!" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checkers into the Given Program

Here's the instrumented C++ code with integrated checker snippets:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int inf = 1010101010;

// Checkers integrated into the program
void check_large_range_invariant(int mx, int mi) {
    if (mx - mi > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - large range after adjustment!" << endl;
        abort();
    }
}

void check_excessive_iterations_invariant(int mx) {
    if (mx > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations due to broad range!" << endl;
        abort();
    }
}

void check_dense_distribution_invariant(const vector<int>& cnt, int mx) {
    int dense_threshold = 100;
    int dense_count = 0;
    for (int i = 0; i <= mx; ++i) {
        if (cnt[i] > 0) {
            dense_count++;
        }
    }
    if (dense_count > dense_threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - dense value distribution!" << endl;
        abort();
    }
}

int main() {
    int n;
    cin >> n;
    vector<int> v(n);
    for (int i = 0; i < (n); i++) cin >> v[i];
    int mi = inf, mx = 0;
    for (int i = 0; i < (n); i++) mi = min(mi, v[i]), mx = max(mx, v[i]);
    
    // Checking the first invariant (large range)
    check_large_range_invariant(mx, mi);

    // Adjusting all numbers by subtracting the minimum value
    for (int i = 0; i < (n); i++) v[i] -= mi;
    mx -= mi;
    vector<int> cnt(100005);
    for (int i = 0; i < (n); i++) cnt[v[i]]++;
    
    // Checking the second and third invariants (excessive iterations and dense distribution)
    check_excessive_iterations_invariant(mx);
    check_dense_distribution_invariant(cnt, mx);

    int nd = 0;
    for (int i = mx - 1; i > 0; i--) {
        if (cnt[i] == 0) {
            puts("NO");
            return 0;
        }
        cnt[i]--;
        nd++;
    }
    for (int curpos = 0; curpos != mx + 1;) {
        if (cnt[curpos] == 0) {
            puts("NO");
            return 0;
        }
        cnt[curpos]--;
        nd++;
        if (curpos > 0 && cnt[curpos - 1]) {
            curpos--;
        } else {
            curpos++;
        }
    }
    if (nd == n)
        puts("YES");
    else {
        puts("NO");
        return 0;
    }
}
```

### Explanation:

- Each checker function is added to detect the conditions described by the performance-characterizing invariants.
- The `check_large_range_invariant` is invoked after finding `mx` and `mi`.
- `check_excessive_iterations_invariant` and `check_dense_distribution_invariant` are called after initializing the `cnt` array.
- These checks are strategically placed to ensure they trigger warnings when performance bottleneck conditions are met, without adding overhead to tight loops.

