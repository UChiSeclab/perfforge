system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Jeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p1, p2, ..., pn for his birthday.

Jeff hates inversions in sequences. An inversion in sequence a1, a2, ..., an is a pair of indexes i, j (1 ≤ i < j ≤ n), such that an inequality ai > aj holds.

Jeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.

Input

The first line contains integer n (1 ≤ n ≤ 2000). The next line contains n integers — sequence p1, p2, ..., pn (|pi| ≤ 105). The numbers are separated by spaces.

Output

In a single line print the answer to the problem — the minimum number of inversions Jeff can get.

Examples

Input

2
2 1


Output

0


Input

9
-2 0 -1 0 -1 2 1 0 -1


Output

6

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
int a[N], n;
map<int, vector<int>> m;
vector<pair<int, vector<int>>> v;
int bit[2 * N] = {0};
void ud(int i, int v) {
  for (i += N; i < 2 * N; i += i & -i) bit[i] += v;
}
int qr(int i) {
  int ans = 0;
  for (i += N; i; i ^= i & -i) ans += bit[i];
  return ans;
}
long long calc() {
  long long inv = 0;
  for (int i = n - 1; i >= 0; --i) {
    inv += qr(a[i] - 1);
    ud(a[i], 1);
  }
  for (int i = 0; i < n; ++i) {
    ud(a[i], -1);
  }
  return inv;
}
void pa() {
  cout << "[";
  for (int i = 0; i < n; ++i) {
    if (i) cout << ",";
    cout << a[i];
  }
  cout << "]\n";
}
int main() {
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", a + i);
    a[i] = abs(a[i]);
    m[a[i]].push_back(i);
  }
  for (auto p : m) {
    v.push_back(p);
  }
  long long bv = calc();
  for (int i = v.size() - 1; i >= 0; --i) {
    vector<int> &w = v[i].second;
    int bst = 0;
    for (int j = 0; j < w.size(); ++j) {
      a[w[j]] = -a[w[j]];
      long long inv = calc();
      if (inv < bv) {
        bv = inv;
        bst = j + 1;
      }
    }
    for (int j = 0; j < w.size(); ++j) {
      if (j >= bst) a[w[j]] = -a[w[j]];
    }
  }
  cout << bv << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

31
-2 2 -2 -1 0 0 1 2 1 1 -1 -2 1 -1 -2 2 0 1 -1 -2 -1 -2 -1 2 2 2 2 1 1 0 1


(G.2) Fast Input

8
0 1 2 -1 -2 1 0 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e5 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int a[N], n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
map<int, vector<int>> m; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, vector<int>>> v; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int bit[2 * N] = {0}; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void ud(int i, int v) { /* line 8 slow_hit_count: 1984, fast_hit_count: 144 */
  for (i += N; i < 2 * N; i += i & -i) bit[i] += v; /* line 9 slow_hit_count: 22442, fast_hit_count: 1642 */
} /* line 10 slow_hit_count: 1984, fast_hit_count: 144 */
int qr(int i) { /* line 11 slow_hit_count: 992, fast_hit_count: 72 */
  int ans = 0; /* line 12 slow_hit_count: 992, fast_hit_count: 72 */
  for (i += N; i; i ^= i & -i) ans += bit[i]; /* line 13 slow_hit_count: 8619, fast_hit_count: 619 */
  return ans; /* line 14 slow_hit_count: 992, fast_hit_count: 72 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
long long calc() { /* line 16 slow_hit_count: 32, fast_hit_count: 9 */
  long long inv = 0; /* line 17 slow_hit_count: 32, fast_hit_count: 9 */
  for (int i = n - 1; i >= 0; --i) { /* line 18 slow_hit_count: 1024, fast_hit_count: 81 */
    inv += qr(a[i] - 1); /* line 19 slow_hit_count: 992, fast_hit_count: 72 */
    ud(a[i], 1); /* line 20 slow_hit_count: 992, fast_hit_count: 72 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; ++i) { /* line 22 slow_hit_count: 1024, fast_hit_count: 81 */
    ud(a[i], -1); /* line 23 slow_hit_count: 992, fast_hit_count: 72 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  return inv; /* line 25 slow_hit_count: 32, fast_hit_count: 9 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
void pa() { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "["; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; ++i) { /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    if (i) cout << ","; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    cout << a[i]; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "]\n"; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 37 slow_hit_count: 32, fast_hit_count: 9 */
    scanf("%d", a + i); /* line 38 slow_hit_count: 31, fast_hit_count: 8 */
    a[i] = abs(a[i]); /* line 39 slow_hit_count: 31, fast_hit_count: 8 */
    m[a[i]].push_back(i); /* line 40 slow_hit_count: 31, fast_hit_count: 8 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto p : m) { /* line 42 slow_hit_count: 4, fast_hit_count: 4 */
    v.push_back(p); /* line 43 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  long long bv = calc(); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = v.size() - 1; i >= 0; --i) { /* line 46 slow_hit_count: 4, fast_hit_count: 4 */
    vector<int> &w = v[i].second; /* line 47 slow_hit_count: 3, fast_hit_count: 3 */
    int bst = 0; /* line 48 slow_hit_count: 3, fast_hit_count: 3 */
    for (int j = 0; j < w.size(); ++j) { /* line 49 slow_hit_count: 34, fast_hit_count: 11 */
      a[w[j]] = -a[w[j]]; /* line 50 slow_hit_count: 31, fast_hit_count: 8 */
      long long inv = calc(); /* line 51 slow_hit_count: 31, fast_hit_count: 8 */
      if (inv < bv) { /* line 52 slow_hit_count: 31, fast_hit_count: 8 */
        bv = inv; /* line 53 slow_hit_count: 6, fast_hit_count: 1 */
        bst = j + 1; /* line 54 slow_hit_count: 6, fast_hit_count: 1 */
      } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = 0; j < w.size(); ++j) { /* line 57 slow_hit_count: 34, fast_hit_count: 11 */
      if (j >= bst) a[w[j]] = -a[w[j]]; /* line 58 slow_hit_count: 31, fast_hit_count: 8 */
    } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  cout << bv << "\n"; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 63 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose why the program runs slowly for the slow input, let's first analyze the code and the line-level hit counts provided for both the fast and slow inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **High Hit Count Functions:**
   - The `ud` function (lines 8-10) and `qr` function (lines 11-15) are significant contributors to high hit counts.
   - Specifically, the loop inside `ud` (line 9) and `qr` (line 13) are hit frequently—22442 times for `ud` and 8619 times for `qr` in the slow run.

2. **Line-Level Analysis:**
   - The `calc` function (lines 16-26) calls both `qr` and `ud`, contributing to the high hit counts. The loop on line 18 also contributes to high-frequency hits (1024 times).
   - The nested loops in the main algorithm logic (lines 46-59) iterate over vectors, causing repeated calls to `calc`, which repeatedly calls `qr` and `ud`.

3. **Data Structure Interaction:**
   - The `map` and `vector` structures are being iterated over extensively, especially within the nested loop structure in the main function.
   - The `BIT` (Binary Indexed Tree) operations within `ud` and `qr` are heavily called, which have logarithmic complexity, but repeated calls can accumulate significant computational cost, especially in nested contexts.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: High Frequency of BIT Updates and Queries**
   - **Description:** "If elements in the sequence cause frequent updates and queries on the Binary Indexed Tree due to repeated adjustments, the program may experience slowdowns. This is especially likely when many elements are close in value, causing repeated inversions."
   - **Correlation:** High hit counts in `ud` and `qr` suggest that many operations on similar values lead to frequent recalculations.

2. **Invariant 2: Nested Iteration Over Data Structures**
   - **Description:** "When the input sequence has many repeated or close values leading to larger vectors in the map, more iterations and calculations occur in nested loops, potentially causing slowdowns."
   - **Correlation:** The nested loops in the main logic that adjust sign of elements cause multiple recalculations of inversions, particularly when `v.size()` or individual vector sizes are large.

3. **Invariant 3: Repeated Inversion Calculations**
   - **Description:** "If the number of elements that have the potential to be inverted is high, the program can slow significantly due to repeated inversion calculations."
   - **Correlation:** The repeated calls to `calc`, with high hit counts, indicate that frequent recalculation over large subsets of the sequence can become a bottleneck.

### Summary

By examining the code and hit counts, we identified that the use of BIT operations in nested loops, coupled with repeated inversion calculations, are primary contributors to slow performance. The identified invariants help capture conditions that could lead to similar slowdowns in future, such as sequences with many close or repeated values leading to frequent BIT operations or recalculations of inversions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Jeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p1, p2, ..., pn for his birthday.

Jeff hates inversions in sequences. An inversion in sequence a1, a2, ..., an is a pair of indexes i, j (1 ≤ i < j ≤ n), such that an inequality ai > aj holds.

Jeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.

Input

The first line contains integer n (1 ≤ n ≤ 2000). The next line contains n integers — sequence p1, p2, ..., pn (|pi| ≤ 105). The numbers are separated by spaces.

Output

In a single line print the answer to the problem — the minimum number of inversions Jeff can get.

Examples

Input

2
2 1


Output

0


Input

9
-2 0 -1 0 -1 2 1 0 -1


Output

6

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Below are the C++ code snippets implementing the performance-characterizing invariants derived previously. Each check will monitor conditions that could lead to slowdowns as described.

1. **Invariant Check for High Frequency of BIT Operations:**

```cpp
void check_bit_operation_invariant(int operations, int threshold) {
    if (operations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive BIT operations!" << endl;
        abort();
    }
}
```

2. **Invariant Check for Nested Iteration Over Data Structures:**

```cpp
void check_nested_iteration_invariant(int vectorSize, int threshold) {
    if (vectorSize > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive nested iterations!" << endl;
        abort();
    }
}
```

3. **Invariant Check for Repeated Inversion Calculations:**

```cpp
void check_repeated_inversion_invariant(int inversionCalculations, int threshold) {
    if (inversionCalculations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated inversion calculations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original C++ Program

Let's integrate the above checks into the original program at appropriate places to ensure they capture the potential slowdowns efficiently.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 1e5 + 5;
int a[N], n;
map<int, vector<int>> m;
vector<pair<int, vector<int>>> v;
int bit[2 * N] = {0};

void ud(int i, int v) {
    for (i += N; i < 2 * N; i += i & -i) bit[i] += v;
}

int qr(int i) {
    int ans = 0;
    for (i += N; i; i ^= i & -i) ans += bit[i];
    return ans;
}

long long calc(int& opCount) {
    long long inv = 0;
    for (int i = n - 1; i >= 0; --i) {
        inv += qr(a[i] - 1);
        ud(a[i], 1);
        opCount++;  // Counting BIT operations
    }
    for (int i = 0; i < n; ++i) {
        ud(a[i], -1);
    }
    return inv;
}

void pa() {
    cout << "[";
    for (int i = 0; i < n; ++i) {
        if (i) cout << ",";
        cout << a[i];
    }
    cout << "]\n";
}

void check_bit_operation_invariant(int operations, int threshold) {
    if (operations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive BIT operations!" << endl;
        abort();
    }
}

void check_nested_iteration_invariant(int vectorSize, int threshold) {
    if (vectorSize > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive nested iterations!" << endl;
        abort();
    }
}

void check_repeated_inversion_invariant(int inversionCalculations, int threshold) {
    if (inversionCalculations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated inversion calculations!" << endl;
        abort();
    }
}

int main() {
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
        scanf("%d", a + i);
        a[i] = abs(a[i]);
        m[a[i]].push_back(i);
    }
    
    // Check for potential nested iteration bottleneck
    check_nested_iteration_invariant(m.size(), 100);  // Assuming a threshold of 100 based on n

    // Calculate initial inversions
    int opCount = 0;
    long long bv = calc(opCount);
    
    // Check for excessive BIT operations
    check_bit_operation_invariant(opCount, 5000);  // Arbitrary threshold for demonstration

    for (int i = v.size() - 1; i >= 0; --i) {
        vector<int>& w = v[i].second;
        int bst = 0;
        int inversionCount = 0;
        for (int j = 0; j < w.size(); ++j) {
            a[w[j]] = -a[w[j]];
            inversionCount++;
            long long inv = calc(opCount);
            if (inv < bv) {
                bv = inv;
                bst = j + 1;
            }
        }
        
        // Check for repeated inversion calculations
        check_repeated_inversion_invariant(inversionCount, 50);  // Arbitrary threshold for demonstration

        for (int j = 0; j < w.size(); ++j) {
            if (j >= bst) a[w[j]] = -a[w[j]];
        }
    }
    cout << bv << "\n";
    return 0;
}
```

### Explanation

- **BIT Operations:** The `opCount` variable tracks the number of BIT operations. A check is placed after initial inversion calculation and before main loop.
- **Nested Iterations:** The size of the map `m` is checked since it correlates with nested iterations when processing vectors in `v`.
- **Repeated Inversion Calculations:** Counts the number of inversion calculations within the nested loop.

These checks are designed to identify conditions that could lead to slowdowns without adding excessive overhead, thus aiding fuzzers or developers in detecting potential performance issues early.

