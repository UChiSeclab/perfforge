system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Jeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p1, p2, ..., pn for his birthday.

Jeff hates inversions in sequences. An inversion in sequence a1, a2, ..., an is a pair of indexes i, j (1 ≤ i < j ≤ n), such that an inequality ai > aj holds.

Jeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.

Input

The first line contains integer n (1 ≤ n ≤ 2000). The next line contains n integers — sequence p1, p2, ..., pn (|pi| ≤ 105). The numbers are separated by spaces.

Output

In a single line print the answer to the problem — the minimum number of inversions Jeff can get.

Examples

Input

2
2 1


Output

0


Input

9
-2 0 -1 0 -1 2 1 0 -1


Output

6

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long read() {
  long long res = 0;
  bool f = false;
  char ch = getchar();
  while (!isdigit(ch)) f |= ch == '-', ch = getchar();
  while (isdigit(ch)) res = (res << 3) + (res << 1) + ch - '0', ch = getchar();
  return f ? -res : res;
}
void write(long long in) {
  if (in < 0) {
    putchar('-'), write(-in);
    return;
  }
  if (in > 9) write(in / 10);
  putchar(in % 10 + '0');
}
int n, a = 0;
struct Node {
  int lt, rt, ans;
} T[4000005];
void update(int num) { T[num].ans = T[T[num].lt].ans + T[T[num].rt].ans; }
int build(int l, int r) {
  int now = ++a;
  if (l == r) {
    T[now].ans = 1;
    return now;
  }
  int mid = (l + r) >> 1;
  T[now].lt = build(l, mid);
  T[now].rt = build(mid + 1, r);
  update(now);
  return now;
}
int ask(int num, int l, int r, int f, int t) {
  if (f > t) return 0;
  if (f <= l && r <= t) {
    return T[num].ans;
  }
  int mid = (l + r) >> 1, res = 0;
  if (f <= mid) res += ask(T[num].lt, l, mid, f, t);
  if (t > mid) res += ask(T[num].rt, mid + 1, r, f, t);
  return res;
}
void down(int num, int l, int r, int s) {
  if (l == r) {
    T[num].ans = 0;
    return;
  }
  int mid = (l + r) >> 1;
  if (s <= mid)
    down(T[num].lt, l, mid, s);
  else
    down(T[num].rt, mid + 1, r, s);
  update(num);
}
struct EL {
  int ele, num;
} M[1000005];
bool cmp(EL x, EL y) { return x.ele > y.ele; }
long long ans = 0;
int root;
int main() {
  n = read();
  for (int i = 1; i <= n; i++) M[i].ele = abs(read()), M[i].num = i;
  sort(M + 1, M + 1 + n, cmp);
  root = build(1, n);
  M[0].ele = -1;
  for (int i = 1; i <= n; i++) {
    if (M[i].ele != M[i - 1].ele)
      for (int j = i; M[j].ele == M[i].ele; j++) down(root, 1, n, M[j].num);
    ans +=
        min(ask(root, 1, n, 1, M[i].num - 1), ask(root, 1, n, M[i].num + 1, n));
  }
  write(ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

31
-2 2 -2 -1 0 0 1 2 1 1 -1 -2 1 -1 -2 2 0 1 -1 -2 -1 -2 -1 2 2 2 2 1 1 0 1


(G.2) Fast Input

8
0 1 2 -1 -2 1 0 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long read() { /* line 3 slow_hit_count: 32, fast_hit_count: 9 */
  long long res = 0; /* line 4 slow_hit_count: 32, fast_hit_count: 9 */
  bool f = false; /* line 5 slow_hit_count: 32, fast_hit_count: 9 */
  char ch = getchar(); /* line 6 slow_hit_count: 32, fast_hit_count: 9 */
  while (!isdigit(ch)) f |= ch == '-', ch = getchar(); /* line 7 slow_hit_count: 44, fast_hit_count: 11 */
  while (isdigit(ch)) res = (res << 3) + (res << 1) + ch - '0', ch = getchar(); /* line 8 slow_hit_count: 65, fast_hit_count: 18 */
  return f ? -res : res; /* line 9 slow_hit_count: 32, fast_hit_count: 9 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
void write(long long in) { /* line 11 slow_hit_count: 2, fast_hit_count: 1 */
  if (in < 0) { /* line 12 slow_hit_count: 2, fast_hit_count: 1 */
    putchar('-'), write(-in); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  if (in > 9) write(in / 10); /* line 16 slow_hit_count: 2, fast_hit_count: 1 */
  putchar(in % 10 + '0'); /* line 17 slow_hit_count: 2, fast_hit_count: 1 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int n, a = 0; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
struct Node { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  int lt, rt, ans; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
} T[4000005]; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
void update(int num) { T[num].ans = T[T[num].lt].ans + T[T[num].rt].ans; } /* line 23 slow_hit_count: 5000049, fast_hit_count: 3000019 */
int build(int l, int r) { /* line 24 slow_hit_count: 61, fast_hit_count: 15 */
  int now = ++a; /* line 25 slow_hit_count: 61, fast_hit_count: 15 */
  if (l == r) { /* line 26 slow_hit_count: 61, fast_hit_count: 15 */
    T[now].ans = 1; /* line 27 slow_hit_count: 31, fast_hit_count: 8 */
    return now; /* line 28 slow_hit_count: 31, fast_hit_count: 8 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  int mid = (l + r) >> 1; /* line 30 slow_hit_count: 30, fast_hit_count: 7 */
  T[now].lt = build(l, mid); /* line 31 slow_hit_count: 30, fast_hit_count: 7 */
  T[now].rt = build(mid + 1, r); /* line 32 slow_hit_count: 30, fast_hit_count: 7 */
  update(now); /* line 33 slow_hit_count: 30, fast_hit_count: 7 */
  return now; /* line 34 slow_hit_count: 30, fast_hit_count: 7 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
int ask(int num, int l, int r, int f, int t) { /* line 36 slow_hit_count: 404, fast_hit_count: 60 */
  if (f > t) return 0; /* line 37 slow_hit_count: 404, fast_hit_count: 60 */
  if (f <= l && r <= t) { /* line 38 slow_hit_count: 402, fast_hit_count: 58 */
    return T[num].ans; /* line 39 slow_hit_count: 154, fast_hit_count: 24 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  int mid = (l + r) >> 1, res = 0; /* line 41 slow_hit_count: 248, fast_hit_count: 34 */
  if (f <= mid) res += ask(T[num].lt, l, mid, f, t); /* line 42 slow_hit_count: 248, fast_hit_count: 34 */
  if (t > mid) res += ask(T[num].rt, mid + 1, r, f, t); /* line 43 slow_hit_count: 248, fast_hit_count: 34 */
  return res; /* line 44 slow_hit_count: 248, fast_hit_count: 34 */
} /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
void down(int num, int l, int r, int s) { /* line 46 slow_hit_count: 6000023, fast_hit_count: 4000016 */
  if (l == r) { /* line 47 slow_hit_count: 6000023, fast_hit_count: 4000016 */
    T[num].ans = 0; /* line 48 slow_hit_count: 1000004, fast_hit_count: 1000004 */
    return; /* line 49 slow_hit_count: 1000004, fast_hit_count: 1000004 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  int mid = (l + r) >> 1; /* line 51 slow_hit_count: 5000019, fast_hit_count: 3000012 */
  if (s <= mid) /* line 52 slow_hit_count: 5000019, fast_hit_count: 3000012 */
    down(T[num].lt, l, mid, s); /* line 53 slow_hit_count: 4999944, fast_hit_count: 3000000 */
  else /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    down(T[num].rt, mid + 1, r, s); /* line 55 slow_hit_count: 75, fast_hit_count: 12 */
  update(num); /* line 56 slow_hit_count: 5000019, fast_hit_count: 3000012 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
struct EL { /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  int ele, num; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
} M[1000005]; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp(EL x, EL y) { return x.ele > y.ele; } /* line 61 slow_hit_count: 132, fast_hit_count: 22 */
long long ans = 0; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
int root; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  n = read(); /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) M[i].ele = abs(read()), M[i].num = i; /* line 66 slow_hit_count: 32, fast_hit_count: 9 */
  sort(M + 1, M + 1 + n, cmp); /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  root = build(1, n); /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  M[0].ele = -1; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 70 slow_hit_count: 32, fast_hit_count: 9 */
    if (M[i].ele != M[i - 1].ele) /* line 71 slow_hit_count: 31, fast_hit_count: 8 */
      for (int j = i; M[j].ele == M[i].ele; j++) down(root, 1, n, M[j].num); /* line 72 slow_hit_count: 1000007, fast_hit_count: 1000007 */
    ans += /* line 73 slow_hit_count: 31, fast_hit_count: 8 */
        min(ask(root, 1, n, 1, M[i].num - 1), ask(root, 1, n, M[i].num + 1, n)); /* line 74 slow_hit_count: 31, fast_hit_count: 8 */
  } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  write(ans); /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 78 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance of the given C program, we need to consider the hit counts and the algorithmic structure. Below is the step-by-step analysis and the inferred performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

**Comparison of Hit Counts:**

1. **Function `ask`:** This function shows a significant difference in hit counts between the slow input and the fast input. It is invoked 404 times for the slow input compared to 60 times for the fast input. This indicates that the `ask` function, which is used to perform range queries in a segment tree, is a critical factor in the slowdown.

2. **Function `down`:** This function is called 6000023 times for the slow input and 4000016 times for the fast input. This function is responsible for modifying the segment tree and is heavily utilized due to its recursive nature.

3. **Function `update`:** This function is used extensively with 5000049 hits in the slow run compared to 3000019 in the fast run. The `update` function is called during the tree-building and modification process to propagate changes up the segment tree.

From this analysis, it is clear that the segment tree operations, particularly through the `ask` and `down` functions, are the bottleneck for the slow input.

**Inferences:**

- The high hit counts suggest that the segment tree operations are being invoked frequently, probably due to the algorithm needing to process many elements during sorting and inversion counting.

- Given that slowdowns occur when `ask` and `down` are used extensively, these functions likely involve a high branching factor or deep recursion, which is exacerbated by certain input patterns.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Inversion Counting with Segment Tree:**
   - **Natural Language Invariant:** "When the input sequence has many elements with equal absolute values or closely spaced values, the program may slow down due to frequent modification and querying of the segment tree."
   - **Explanation:** The sorting step and the subsequent management of inversions using a segment tree increase in complexity when many elements are similar or require detailed segment tree operations.

2. **Frequent Updates in Segment Tree:**
   - **Natural Language Invariant:** "If there is a need to frequently update or modify the segment tree due to closely packed values or many duplicate absolute values, the performance may degrade significantly."
   - **Explanation:** The `down` function is used to remove elements from consideration in the segment tree, and when this is needed often, the operation becomes expensive.

3. **High Query Overhead:**
   - **Natural Language Invariant:** "When querying ranges in the segment tree becomes frequent due to the input sequence having a large number of inversions initially, the algorithm's performance can suffer."
   - **Explanation:** The `ask` function is used to determine the number of inversions, and if the structure of `p` leads to a high number of potential inversions, this function is called more often.

### Conclusion

The program's performance is heavily influenced by the structure of the input sequence, particularly when the sequence contains many elements with the same or similar absolute values. This leads to excessive segment tree operations for querying and updating, which causes the slowdown. The segment tree operations, essential in managing the inversions efficiently, become the bottleneck under specific input conditions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Jeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p1, p2, ..., pn for his birthday.

Jeff hates inversions in sequences. An inversion in sequence a1, a2, ..., an is a pair of indexes i, j (1 ≤ i < j ≤ n), such that an inequality ai > aj holds.

Jeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.

Input

The first line contains integer n (1 ≤ n ≤ 2000). The next line contains n integers — sequence p1, p2, ..., pn (|pi| ≤ 105). The numbers are separated by spaces.

Output

In a single line print the answer to the problem — the minimum number of inversions Jeff can get.

Examples

Input

2
2 1


Output

0


Input

9
-2 0 -1 0 -1 2 1 0 -1


Output

6

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Based on the natural language invariants we derived earlier, we need to implement these checks in C++ code. Below are the checker functions corresponding to the performance invariants.

```cpp
#include <iostream>
#include <cmath>
#include <cstdlib> // for abort()

using namespace std;

// Invariant Check 1: Detects when the sequence has many elements with equal absolute values
void check_frequent_updates_invariant(int current, int previous) {
    if (current == previous) {
        cerr << "Warning: Frequent updates in the segment tree due to similar absolute values!" << endl;
        abort();
    }
}

// Invariant Check 2: Detects when querying ranges becomes frequent due to high potential inversions
void check_high_query_invariant(int queries, int threshold) {
    if (queries > threshold) {
        cerr << "Warning: High query overhead in the segment tree!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into C++ Program

Now, we integrate the checker functions into the existing C++ program. The goal is to place these checks at points in the code where the corresponding conditions can be effectively monitored without adding unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long read() {
    long long res = 0;
    bool f = false;
    char ch = getchar();
    while (!isdigit(ch)) f |= ch == '-', ch = getchar();
    while (isdigit(ch)) res = (res << 3) + (res << 1) + ch - '0', ch = getchar();
    return f ? -res : res;
}

void write(long long in) {
    if (in < 0) {
        putchar('-'), write(-in);
        return;
    }
    if (in > 9) write(in / 10);
    putchar(in % 10 + '0');
}

int n, a = 0;
struct Node {
    int lt, rt, ans;
} T[4000005];

void update(int num) {
    T[num].ans = T[T[num].lt].ans + T[T[num].rt].ans;
}

int build(int l, int r) {
    int now = ++a;
    if (l == r) {
        T[now].ans = 1;
        return now;
    }
    int mid = (l + r) >> 1;
    T[now].lt = build(l, mid);
    T[now].rt = build(mid + 1, r);
    update(now);
    return now;
}

int ask(int num, int l, int r, int f, int t) {
    if (f > t) return 0;
    if (f <= l && r <= t) {
        return T[num].ans;
    }
    int mid = (l + r) >> 1, res = 0;
    if (f <= mid) res += ask(T[num].lt, l, mid, f, t);
    if (t > mid) res += ask(T[num].rt, mid + 1, r, f, t);
    return res;
}

void down(int num, int l, int r, int s) {
    if (l == r) {
        T[num].ans = 0;
        return;
    }
    int mid = (l + r) >> 1;
    if (s <= mid)
        down(T[num].lt, l, mid, s);
    else
        down(T[num].rt, mid + 1, r, s);
    update(num);
}

struct EL {
    int ele, num;
} M[1000005];

bool cmp(EL x, EL y) { return x.ele > y.ele; }
long long ans = 0;
int root;

// Invariant Check 1: Detects when the sequence has many elements with equal absolute values
void check_frequent_updates_invariant(int current, int previous) {
    if (current == previous) {
        cerr << "Warning: Frequent updates in the segment tree due to similar absolute values!" << endl;
        abort();
    }
}

// Invariant Check 2: Detects when querying ranges becomes frequent due to high potential inversions
void check_high_query_invariant(int queries, int threshold) {
    if (queries > threshold) {
        cerr << "Warning: High query overhead in the segment tree!" << endl;
        abort();
    }
}

int main() {
    n = read();
    int query_count = 0;
    for (int i = 1; i <= n; i++) M[i].ele = abs(read()), M[i].num = i;
    
    sort(M + 1, M + 1 + n, cmp);
    root = build(1, n);
    M[0].ele = -1;
    
    for (int i = 1; i <= n; i++) {
        check_frequent_updates_invariant(M[i].ele, M[i - 1].ele);  // Check for frequent updates
        
        if (M[i].ele != M[i - 1].ele)
            for (int j = i; M[j].ele == M[i].ele; j++) down(root, 1, n, M[j].num);
        
        ans += min(ask(root, 1, n, 1, M[i].num - 1), ask(root, 1, n, M[i].num + 1, n));
        query_count++;
    }
    
    // Set an estimated threshold for queries based on typical input sizes
    check_high_query_invariant(query_count, n * log2(n));  // Check for high query overhead
    
    write(ans);
    return 0;
}
```

### Explanation of Checker Integration:

1. **`check_frequent_updates_invariant`:** This function is called inside the loop iterating over the elements of `M` to ensure if frequent updates are happening due to similar values.

2. **`check_high_query_invariant`:** This function is called after the loop to check if the number of queries made exceeds a threshold, which is set using an estimated complexity of `n * log2(n)`. This is a rough approximation for segment tree operations based on practical use cases and typical input sizes.

These checks will help identify performance bottlenecks during execution without significantly affecting the program's performance in normal operation.

