system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Jeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p1, p2, ..., pn for his birthday.

Jeff hates inversions in sequences. An inversion in sequence a1, a2, ..., an is a pair of indexes i, j (1 ≤ i < j ≤ n), such that an inequality ai > aj holds.

Jeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.

Input

The first line contains integer n (1 ≤ n ≤ 2000). The next line contains n integers — sequence p1, p2, ..., pn (|pi| ≤ 105). The numbers are separated by spaces.

Output

In a single line print the answer to the problem — the minimum number of inversions Jeff can get.

Examples

Input

2
2 1


Output

0


Input

9
-2 0 -1 0 -1 2 1 0 -1


Output

6

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int N, s1, s2, ans;
int a[2005], dc[2005];
int main() {
  scanf("%d", &N);
  for (int i = 1; i <= N; i++) scanf("%d", &a[i]);
  for (int i = 1; i <= N; i++) a[i] = abs(a[i]);
  memset(dc, 0, sizeof(dc));
  for (int i = 100000; i >= 0; i--) {
    for (int j = 1; j <= N; j++)
      if (a[j] == i) dc[j] = 2;
    for (int j = 1; j <= N; j++)
      if (a[j] == i) {
        s1 = 0;
        for (int k = 1; k < j; k++)
          if (dc[k] == 1) {
            if (a[k] > a[j]) ++s1;
          }
        for (int k = j + 1; k <= N; k++)
          if (dc[k] == 1) {
            if (a[k] < a[j]) ++s1;
          } else if (dc[k] != 2)
            ++s1;
        s2 = 0;
        for (int k = 1; k < j; k++)
          if (dc[k] == 1) {
            if (a[k] > -a[j]) ++s2;
          } else if (dc[k] != 2)
            ++s2;
        for (int k = j + 1; k <= N; k++)
          if (dc[k] == 1) {
            if (a[k] < -a[j]) ++s2;
          }
        if (s1 > s2) a[j] = -a[j];
      }
    for (int j = 1; j <= N; j++)
      if (a[j] == i) dc[j] = 1;
  }
  ans = 0;
  for (int i = 1; i <= N; i++)
    for (int j = i + 1; j <= N; j++)
      if (a[i] > a[j]) ++ans;
  printf("%d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

31
-2 2 -2 -1 0 0 1 2 1 1 -1 -2 1 -1 -2 2 0 1 -1 -2 -1 -2 -1 2 2 2 2 1 1 0 1


(G.2) Fast Input

8
0 1 2 -1 -2 1 0 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int N, s1, s2, ans; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int a[2005], dc[2005]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &N); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= N; i++) scanf("%d", &a[i]); /* line 7 slow_hit_count: 32, fast_hit_count: 9 */
  for (int i = 1; i <= N; i++) a[i] = abs(a[i]); /* line 8 slow_hit_count: 32, fast_hit_count: 9 */
  memset(dc, 0, sizeof(dc)); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 100000; i >= 0; i--) { /* line 10 slow_hit_count: 100002, fast_hit_count: 100002 */
    for (int j = 1; j <= N; j++) /* line 11 slow_hit_count: 3200032, fast_hit_count: 900009 */
      if (a[j] == i) dc[j] = 2; /* line 12 slow_hit_count: 3100031, fast_hit_count: 800008 */
    for (int j = 1; j <= N; j++) /* line 13 slow_hit_count: 3200032, fast_hit_count: 900009 */
      if (a[j] == i) { /* line 14 slow_hit_count: 3100031, fast_hit_count: 800008 */
        s1 = 0; /* line 15 slow_hit_count: 31, fast_hit_count: 8 */
        for (int k = 1; k < j; k++) /* line 16 slow_hit_count: 496, fast_hit_count: 36 */
          if (dc[k] == 1) { /* line 17 slow_hit_count: 465, fast_hit_count: 28 */
            if (a[k] > a[j]) ++s1; /* line 18 slow_hit_count: 63, fast_hit_count: 5 */
          } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
        for (int k = j + 1; k <= N; k++) /* line 20 slow_hit_count: 496, fast_hit_count: 36 */
          if (dc[k] == 1) { /* line 21 slow_hit_count: 465, fast_hit_count: 28 */
            if (a[k] < a[j]) ++s1; /* line 22 slow_hit_count: 133, fast_hit_count: 11 */
          } else if (dc[k] != 2) /* line 23 slow_hit_count: 332, fast_hit_count: 17 */
            ++s1; /* line 24 slow_hit_count: 146, fast_hit_count: 8 */
        s2 = 0; /* line 25 slow_hit_count: 31, fast_hit_count: 8 */
        for (int k = 1; k < j; k++) /* line 26 slow_hit_count: 496, fast_hit_count: 36 */
          if (dc[k] == 1) { /* line 27 slow_hit_count: 465, fast_hit_count: 28 */
            if (a[k] > -a[j]) ++s2; /* line 28 slow_hit_count: 63, fast_hit_count: 5 */
          } else if (dc[k] != 2) /* line 29 slow_hit_count: 402, fast_hit_count: 23 */
            ++s2; /* line 30 slow_hit_count: 144, fast_hit_count: 13 */
        for (int k = j + 1; k <= N; k++) /* line 31 slow_hit_count: 496, fast_hit_count: 36 */
          if (dc[k] == 1) { /* line 32 slow_hit_count: 465, fast_hit_count: 28 */
            if (a[k] < -a[j]) ++s2; /* line 33 slow_hit_count: 133, fast_hit_count: 11 */
          } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
        if (s1 > s2) a[j] = -a[j]; /* line 35 slow_hit_count: 31, fast_hit_count: 8 */
      } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = 1; j <= N; j++) /* line 37 slow_hit_count: 3200032, fast_hit_count: 900009 */
      if (a[j] == i) dc[j] = 1; /* line 38 slow_hit_count: 3100031, fast_hit_count: 800008 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  ans = 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= N; i++) /* line 41 slow_hit_count: 32, fast_hit_count: 9 */
    for (int j = i + 1; j <= N; j++) /* line 42 slow_hit_count: 496, fast_hit_count: 36 */
      if (a[i] > a[j]) ++ans; /* line 43 slow_hit_count: 465, fast_hit_count: 28 */
  printf("%d\n", ans); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */


assistant: **Phase 1: Identify Expensive or Inefficient Code Segments**

Analyzing the line-level hit counts of the slow and fast runs, we observe the following:

1. The outer loop (line 10) is executed a very large number of times (100002 iterations for both slow and fast inputs), which is expected since it iterates over the range 100000 down to 0.

2. The inner loops (lines 11 and 13) are executed significantly more frequently in the slow input than in the fast input. Specifically, lines 11 and 13 are hit 3,200,032 times for the slow input, compared to 900,009 times for the fast input. This is due to the fact that the input size `N` is larger for the slow input, and consequently, the processing of each value takes longer.

3. Lines 16 and 20, which are loops over the elements before and after the current element `j`, are executed 496 times for the slow input versus 36 times for the fast input. This reflects the increased complexity of handling a larger array.

4. Conditional checks within these loops (such as those on lines 17, 18, 21, 22, 23, and others) are also hit more often, indicating that they contribute to the slowdown by increasing computational overhead due to their repetitive nature.

**Phase 2: Derive Performance-Characterizing Invariants**

Based on the analysis, we can derive the following performance-characterizing invariants in natural language:

1. **High Iteration Count Invariant**: If the sequence contains many elements with the same absolute value, such that a large portion of the code repeatedly executes similar iterations or checks, the program may slow down significantly. This is exacerbated by the need to process each element extensively due to multiple iterations over the entire range of possible absolute values, from 100000 down to 0.

2. **Density of Repeated Elements Invariant**: When the sequence contains clusters of elements with similar or the same absolute values, particularly near the upper and lower limits of the permissible range, the inner logic of comparing and potentially negating these values becomes computationally expensive due to a high number of conditional checks and state updates.

3. **Nested Loop Overhead Invariant**: The presence of nested loops that iterate over a significant portion of the sequence to evaluate potential inversions before and after each element can become a performance bottleneck. This is especially true when these loops execute repeatedly across elements that are frequently involved in inversion calculations, as happens when these elements are densely packed within the range.

4. **Inversion Calculation Complexity Invariant**: When calculating potential inversions, if the sequence requires detailed comparisons (both before and after each element) across a large number of elements, particularly when those elements have similar values, it can lead to excessive computational overhead.

These invariants highlight scenarios under which the computational complexity of the program increases, leading to slower execution times, especially when dealing with sequences that have many elements with identical or similar values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Jeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p1, p2, ..., pn for his birthday.

Jeff hates inversions in sequences. An inversion in sequence a1, a2, ..., an is a pair of indexes i, j (1 ≤ i < j ≤ n), such that an inequality ai > aj holds.

Jeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.

Input

The first line contains integer n (1 ≤ n ≤ 2000). The next line contains n integers — sequence p1, p2, ..., pn (|pi| ≤ 105). The numbers are separated by spaces.

Output

In a single line print the answer to the problem — the minimum number of inversions Jeff can get.

Examples

Input

2
2 1


Output

0


Input

9
-2 0 -1 0 -1 2 1 0 -1


Output

6

Solution (C++ code):
{solution}


assistant: Let's begin by translating the performance-characterizing invariants from natural language into C++ checker code. 

**Phase 3: Implementing the Invariants as C++ Checkers**

Here are the translated checks for the invariants we identified:

1. **High Iteration Count Invariant:**

   ```cpp
   void check_high_iteration_invariant(int n, std::vector<int>& frequencies) {
       int highFrequencyCount = 0;
       for (int freq : frequencies) {
           if (freq > 0) {
               highFrequencyCount++;
           }
       }
       if (highFrequencyCount > n / 2) {
           cerr << "Warning: High iteration count invariant triggered - too many elements with the same absolute value." << endl;
           abort();
       }
   }
   ```

2. **Density of Repeated Elements Invariant:**

   ```cpp
   void check_density_of_repeated_elements(int n, std::map<int, int>& elementCounts) {
       for (auto& pair : elementCounts) {
           if (pair.second > n / 4) {
               cerr << "Warning: Density of repeated elements invariant triggered - high number of identical absolute values." << endl;
               abort();
           }
       }
   }
   ```

3. **Nested Loop Overhead Invariant:**

   ```cpp
   void check_nested_loop_invariant(int n) {
       if (n > 1500) {
           cerr << "Warning: Nested loop overhead invariant triggered - large array size leading to excessive iterations." << endl;
           abort();
       }
   }
   ```

4. **Inversion Calculation Complexity Invariant:**

   ```cpp
   void check_inversion_calculation_invariant(int n) {
       if (n > 1500) {
           cerr << "Warning: Inversion calculation complexity invariant triggered - potential high computation cost due to large n." << endl;
           abort();
       }
   }
   ```

**Phase 4: Integrating the Checkers into the Original Program**

Now, we integrate these checks into the original C++ program. Here's the instrumented code:

```cpp
#include <bits/stdc++.h>
using namespace std;

int N, s1, s2, ans;
int a[2005], dc[2005];

void check_high_iteration_invariant(int n, std::vector<int>& frequencies) {
    int highFrequencyCount = 0;
    for (int freq : frequencies) {
        if (freq > 0) {
            highFrequencyCount++;
        }
    }
    if (highFrequencyCount > n / 2) {
        cerr << "Warning: High iteration count invariant triggered - too many elements with the same absolute value." << endl;
        abort();
    }
}

void check_density_of_repeated_elements(int n, std::map<int, int>& elementCounts) {
    for (auto& pair : elementCounts) {
        if (pair.second > n / 4) {
            cerr << "Warning: Density of repeated elements invariant triggered - high number of identical absolute values." << endl;
            abort();
        }
    }
}

void check_nested_loop_invariant(int n) {
    if (n > 1500) {
        cerr << "Warning: Nested loop overhead invariant triggered - large array size leading to excessive iterations." << endl;
        abort();
    }
}

void check_inversion_calculation_invariant(int n) {
    if (n > 1500) {
        cerr << "Warning: Inversion calculation complexity invariant triggered - potential high computation cost due to large n." << endl;
        abort();
    }
}

int main() {
    scanf("%d", &N);
    if (N > 2000) {
        cerr << "Warning: Input size exceeds limits!" << endl;
        abort();
    }
    for (int i = 1; i <= N; i++) scanf("%d", &a[i]);
    for (int i = 1; i <= N; i++) a[i] = abs(a[i]);

    // Collect frequency information for invariants
    std::vector<int> frequencies(100001, 0);
    std::map<int, int> elementCounts;
    for (int i = 1; i <= N; i++) {
        frequencies[a[i]]++;
        elementCounts[a[i]]++;
    }

    // Insert checks for invariants
    check_high_iteration_invariant(N, frequencies);
    check_density_of_repeated_elements(N, elementCounts);
    check_nested_loop_invariant(N);
    check_inversion_calculation_invariant(N);

    memset(dc, 0, sizeof(dc));
    for (int i = 100000; i >= 0; i--) {
        for (int j = 1; j <= N; j++)
            if (a[j] == i) dc[j] = 2;
        for (int j = 1; j <= N; j++)
            if (a[j] == i) {
                s1 = 0;
                for (int k = 1; k < j; k++)
                    if (dc[k] == 1) {
                        if (a[k] > a[j]) ++s1;
                    }
                for (int k = j + 1; k <= N; k++)
                    if (dc[k] == 1) {
                        if (a[k] < a[j]) ++s1;
                    } else if (dc[k] != 2)
                        ++s1;
                s2 = 0;
                for (int k = 1; k < j; k++)
                    if (dc[k] == 1) {
                        if (a[k] > -a[j]) ++s2;
                    } else if (dc[k] != 2)
                        ++s2;
                for (int k = j + 1; k <= N; k++)
                    if (dc[k] == 1) {
                        if (a[k] < -a[j]) ++s2;
                    }
                if (s1 > s2) a[j] = -a[j];
            }
        for (int j = 1; j <= N; j++)
            if (a[j] == i) dc[j] = 1;
    }
    ans = 0;
    for (int i = 1; i <= N; i++)
        for (int j = i + 1; j <= N; j++)
            if (a[i] > a[j]) ++ans;
    printf("%d\n", ans);
    return 0;
}
```

**Explanation:**

- The high iteration count and density of repeated elements invariants are checked after reading the input and preparing the frequency data.
- The nested loop and inversion calculation complexity checks are placed before entering the heavy computation loops to prevent unnecessary execution in problematic scenarios.
- These checks ensure that any pathological input conditions that could lead to significant slowdowns are identified early, and the program aborts with a descriptive error message.

