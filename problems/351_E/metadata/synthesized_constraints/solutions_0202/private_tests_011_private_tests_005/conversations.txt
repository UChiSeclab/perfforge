system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Jeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p1, p2, ..., pn for his birthday.

Jeff hates inversions in sequences. An inversion in sequence a1, a2, ..., an is a pair of indexes i, j (1 ≤ i < j ≤ n), such that an inequality ai > aj holds.

Jeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.

Input

The first line contains integer n (1 ≤ n ≤ 2000). The next line contains n integers — sequence p1, p2, ..., pn (|pi| ≤ 105). The numbers are separated by spaces.

Output

In a single line print the answer to the problem — the minimum number of inversions Jeff can get.

Examples

Input

2
2 1


Output

0


Input

9
-2 0 -1 0 -1 2 1 0 -1


Output

6

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int cmp_double(const double a, const double b, const double eps) {
  if (a + eps < b) return -1;
  if (a > b + eps) return 1;
  return 0;
}
int n, a[2048];
int main() {
  scanf("%d", &n);
  for (int i = 0; i < n; ++i) {
    scanf("%d", &a[i]);
  }
  int ans = 0;
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < n; ++j) {
      if (j < i && a[j] > a[i])
        ++ans;
      else if (j > i && a[j] < a[i])
        ++ans;
    }
  }
  for (int i = 0; i < 10; ++i) {
    for (int i = 0; i < n; ++i) {
      int k = 0;
      for (int j = 0; j < n; ++j) {
        if (j < i && a[j] > a[i] && a[j] <= -a[i])
          --k;
        else if (j < i && a[j] <= a[i] && a[j] > -a[i])
          ++k;
        else if (i < j && a[i] <= a[j] && -a[i] > a[j])
          ++k;
        else if (i < j && a[i] > a[j] && -a[i] <= a[j])
          --k;
      }
      if (k <= 0) {
        a[i] = -a[i];
        ans += 2 * k;
      }
    }
  }
  printf("%d\n", ans / 2);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

31
-2 2 -2 -1 0 0 1 2 1 1 -1 -2 1 -1 -2 2 0 1 -1 -2 -1 -2 -1 2 2 2 2 1 1 0 1


(G.2) Fast Input

8
0 1 2 -1 -2 1 -2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int cmp_double(const double a, const double b, const double eps) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  if (a + eps < b) return -1; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  if (a > b + eps) return 1; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int n, a[2048]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 11 slow_hit_count: 32, fast_hit_count: 9 */
    scanf("%d", &a[i]); /* line 12 slow_hit_count: 31, fast_hit_count: 8 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 15 slow_hit_count: 32, fast_hit_count: 9 */
    for (int j = 0; j < n; ++j) { /* line 16 slow_hit_count: 992, fast_hit_count: 72 */
      if (j < i && a[j] > a[i]) /* line 17 slow_hit_count: 961, fast_hit_count: 64 */
        ++ans; /* line 18 slow_hit_count: 155, fast_hit_count: 13 */
      else if (j > i && a[j] < a[i]) /* line 19 slow_hit_count: 806, fast_hit_count: 51 */
        ++ans; /* line 20 slow_hit_count: 155, fast_hit_count: 13 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < 10; ++i) { /* line 23 slow_hit_count: 11, fast_hit_count: 11 */
    for (int i = 0; i < n; ++i) { /* line 24 slow_hit_count: 320, fast_hit_count: 90 */
      int k = 0; /* line 25 slow_hit_count: 310, fast_hit_count: 80 */
      for (int j = 0; j < n; ++j) { /* line 26 slow_hit_count: 9920, fast_hit_count: 720 */
        if (j < i && a[j] > a[i] && a[j] <= -a[i]) /* line 27 slow_hit_count: 9610, fast_hit_count: 640 */
          --k; /* line 28 slow_hit_count: 307, fast_hit_count: 20 */
        else if (j < i && a[j] <= a[i] && a[j] > -a[i]) /* line 29 slow_hit_count: 9303, fast_hit_count: 620 */
          ++k; /* line 30 slow_hit_count: 1733, fast_hit_count: 213 */
        else if (i < j && a[i] <= a[j] && -a[i] > a[j]) /* line 31 slow_hit_count: 7570, fast_hit_count: 407 */
          ++k; /* line 32 slow_hit_count: 1246, fast_hit_count: 12 */
        else if (i < j && a[i] > a[j] && -a[i] <= a[j]) /* line 33 slow_hit_count: 6324, fast_hit_count: 395 */
          --k; /* line 34 slow_hit_count: 520, fast_hit_count: 22 */
      } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      if (k <= 0) { /* line 36 slow_hit_count: 310, fast_hit_count: 80 */
        a[i] = -a[i]; /* line 37 slow_hit_count: 79, fast_hit_count: 25 */
        ans += 2 * k; /* line 38 slow_hit_count: 79, fast_hit_count: 25 */
      } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans / 2); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 44 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

By comparing the line-level hit counts between the fast and slow runs, we can pinpoint specific areas of the code that contribute to performance differences:

1. **Nested Loop for Initial Inversion Counting (Lines 15-21):**
   - These lines iterate over all pairs `(i, j)` where `0 ≤ i, j < n`. The slow input results in 992 hits on line 16 compared to only 72 for the fast input. This indicates the nested loop is a significant factor in the slowdown.

2. **Nested Loop for Adjusting Inversions (Lines 23-41):**
   - This section encompasses a double loop with an outer loop iterating 10 times and an inner loop iterating over the entire array. Line 26 is hit 9920 times with the slow input versus 720 times for the fast input, indicating a heavy computational burden.

3. **Conditions Inside Nested Loops (Lines 27-34):**
   - The conditional checks inside the loop (lines 27, 29, 31, 33) are evaluated many more times for the slow input (e.g., line 31 with 7570 hits vs. 407 hits for the fast input). This suggests that these checks and their associated operations are being executed much more frequently.

## Phase 2: Derive Performance-Characterizing Invariants

Based on the identified code segments and their interaction with the input, we can derive natural language performance invariants:

1. **Invariant for Initial Inversion Counting:**
   - The program slows down significantly when there are numerous inversions in the initial sequence, which causes repeated pairwise comparisons in nested loops.
   - **Natural Language Invariant:** "If the initial sequence has a high number of inversions, the nested loops for counting inversions will lead to a slow execution."

2. **Invariant for Adjusting Inversions:**
   - High computational cost occurs when the loop attempts to adjust inversions by flipping elements, particularly if many elements are candidates for flipping.
   - **Natural Language Invariant:** "If many elements in the sequence are close in value or have alternating signs, the loop for adjusting inversions will heavily iterate, causing a performance bottleneck."

3. **Invariant for Conditional Checks in Nested Loops:**
   - The performance is affected when the conditions for flipping elements are met frequently, leading to excessive re-evaluation of possible inversions.
   - **Natural Language Invariant:** "When conditions for element flipping are frequently satisfied during checks (e.g., signs or relative values of elements match conditions), the repeated evaluations contribute to a slowdown."

These invariants capture the essence of the conditions under which the program may encounter slow execution, abstracting away specific numeric values while considering the code structure and input constraints. They also provide insights into potential future inputs that might similarly degrade performance, especially when dealing with sequences that inherently lead to high inversion counts or repetitive conditional logic within loops.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Jeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p1, p2, ..., pn for his birthday.

Jeff hates inversions in sequences. An inversion in sequence a1, a2, ..., an is a pair of indexes i, j (1 ≤ i < j ≤ n), such that an inequality ai > aj holds.

Jeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.

Input

The first line contains integer n (1 ≤ n ≤ 2000). The next line contains n integers — sequence p1, p2, ..., pn (|pi| ≤ 105). The numbers are separated by spaces.

Output

In a single line print the answer to the problem — the minimum number of inversions Jeff can get.

Examples

Input

2
2 1


Output

0


Input

9
-2 0 -1 0 -1 2 1 0 -1


Output

6

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ code snippets that implement the performance-characterizing invariants derived previously:

```cpp
// Check if the initial sequence has too many inversions
void check_initial_inversion_invariant(int inversions, int n) {
    if (inversions > (n * (n - 1)) / 4) { // Arbitrary threshold based on average-case half of total possible inversions
        cerr << "Warning: Performance bottleneck condition triggered due to initial inversion count!" << endl;
        abort();
    }
}

// Check if the sequence has many elements that are potential candidates for flipping
void check_flipping_candidate_invariant(int n, const int* a) {
    int potentialFlips = 0;
    for (int i = 0; i < n; ++i) {
        if (a[i] != 0 && ((i > 0 && a[i-1] * a[i] < 0) || (i < n-1 && a[i] * a[i+1] < 0))) {
            potentialFlips++;
        }
    }
    if (potentialFlips > n / 2) { // If more than half the elements are candidates for flipping
        cerr << "Warning: Performance bottleneck condition triggered due to potential flip candidates!" << endl;
        abort();
    }
}

// Check frequent satisfaction of conditions during inversion adjustments
void check_condition_satisfaction_invariant(int n, const int* a) {
    int conditionCount = 0;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (((j < i && a[j] > a[i] && a[j] <= -a[i]) ||
                 (j < i && a[j] <= a[i] && a[j] > -a[i]) ||
                 (i < j && a[i] <= a[j] && -a[i] > a[j]) ||
                 (i < j && a[i] > a[j] && -a[i] <= a[j]))) {
                conditionCount++;
            }
        }
    }
    if (conditionCount > n * n / 4) { // If conditions are triggered more than a quarter of total checks
        cerr << "Warning: Performance bottleneck condition triggered due to frequent condition satisfaction!" << endl;
        abort();
    }
}
```

## Phase 4: Propagate and Insert Conditional Checks

Now, we'll integrate these checker functions into the original C++ program at effective points:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function definitions for performance checkers
// Placed here as they relate to input characteristics and sequence properties

// Check if the initial sequence has too many inversions
void check_initial_inversion_invariant(int inversions, int n) {
    if (inversions > (n * (n - 1)) / 4) { // Arbitrary threshold based on average-case half of total possible inversions
        cerr << "Warning: Performance bottleneck condition triggered due to initial inversion count!" << endl;
        abort();
    }
}

// Check if the sequence has many elements that are potential candidates for flipping
void check_flipping_candidate_invariant(int n, const int* a) {
    int potentialFlips = 0;
    for (int i = 0; i < n; ++i) {
        if (a[i] != 0 && ((i > 0 && a[i-1] * a[i] < 0) || (i < n-1 && a[i] * a[i+1] < 0))) {
            potentialFlips++;
        }
    }
    if (potentialFlips > n / 2) { // If more than half the elements are candidates for flipping
        cerr << "Warning: Performance bottleneck condition triggered due to potential flip candidates!" << endl;
        abort();
    }
}

// Check frequent satisfaction of conditions during inversion adjustments
void check_condition_satisfaction_invariant(int n, const int* a) {
    int conditionCount = 0;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (((j < i && a[j] > a[i] && a[j] <= -a[i]) ||
                 (j < i && a[j] <= a[i] && a[j] > -a[i]) ||
                 (i < j && a[i] <= a[j] && -a[i] > a[j]) ||
                 (i < j && a[i] > a[j] && -a[i] <= a[j]))) {
                conditionCount++;
            }
        }
    }
    if (conditionCount > n * n / 4) { // If conditions are triggered more than a quarter of total checks
        cerr << "Warning: Performance bottleneck condition triggered due to frequent condition satisfaction!" << endl;
        abort();
    }
}

int main() {
    int n, a[2048];
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
        scanf("%d", &a[i]);
    }
    
    int ans = 0;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (j < i && a[j] > a[i])
                ++ans;
            else if (j > i && a[j] < a[i])
                ++ans;
        }
    }
    
    // Check initial inversion invariant after counting inversions
    check_initial_inversion_invariant(ans, n);
    
    for (int i = 0; i < 10; ++i) {
        for (int i = 0; i < n; ++i) {
            int k = 0;
            for (int j = 0; j < n; ++j) {
                if (j < i && a[j] > a[i] && a[j] <= -a[i])
                    --k;
                else if (j < i && a[j] <= a[i] && a[j] > -a[i])
                    ++k;
                else if (i < j && a[i] <= a[j] && -a[i] > a[j])
                    ++k;
                else if (i < j && a[i] > a[j] && -a[i] <= a[j])
                    --k;
            }

            // Check condition satisfaction invariant each time through the loop
            check_condition_satisfaction_invariant(n, a);

            if (k <= 0) {
                a[i] = -a[i];
                ans += 2 * k;
            }
        }
    }
    
    // Check flipping candidate invariant after processing adjustments
    check_flipping_candidate_invariant(n, a);
    
    printf("%d\n", ans / 2);
    return 0;
}
```

### Explanation of Instrumented Code:

- **Initial Inversion Check:** After counting initial inversions (`ans`), we verify if the inversion count exceeds a threshold, indicating possible slow execution due to too many comparisons.
  
- **Flipping Candidate Check:** After adjusting for inversions, we check if a large portion of the array was potential candidates for flipping, which could indicate inefficiencies due to excessive iteration and condition checks.

- **Condition Satisfaction Check:** During the adjustment phase, we monitor how often conditions for flipping are satisfied, ensuring they do not overly trigger and slow down the program execution.

Each of these checks helps identify conditions likely leading to performance bottlenecks, leveraging the thresholds related to average-case or expected conditions under the problem constraints.

