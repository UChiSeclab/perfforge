system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Jeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p1, p2, ..., pn for his birthday.

Jeff hates inversions in sequences. An inversion in sequence a1, a2, ..., an is a pair of indexes i, j (1 ≤ i < j ≤ n), such that an inequality ai > aj holds.

Jeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.

Input

The first line contains integer n (1 ≤ n ≤ 2000). The next line contains n integers — sequence p1, p2, ..., pn (|pi| ≤ 105). The numbers are separated by spaces.

Output

In a single line print the answer to the problem — the minimum number of inversions Jeff can get.

Examples

Input

2
2 1


Output

0


Input

9
-2 0 -1 0 -1 2 1 0 -1


Output

6

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma GCC optimize("O2")
using namespace std;
const int MAX = 1e6 + 5;
const long long MAX2 = 11;
const long long MOD = 1000000007;
const long long MOD2 = 1000005329;
const long long INF = 2e18;
const int dr[] = {1, 0, -1, 0, 1, 1, -1, -1, 0};
const int dc[] = {0, 1, 0, -1, 1, -1, 1, -1, 0};
const double pi = acos(-1);
const double EPS = 1e-9;
const int block = 200;
int n, x[MAX], ans, nw, a, b;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cin >> n;
  for (long long i = 1; i <= n; ++i) cin >> x[i], x[i] = abs(x[i]);
  for (long long i = 1; i <= n; ++i)
    for (long long j = i + 1; j <= n; ++j)
      if (x[i] < x[j]) ++ans;
  for (long long i = 1; i <= n; ++i)
    for (long long j = i + 1; j <= n; ++j)
      if (x[i] > x[j]) ++nw;
  ans = min(ans, nw);
  for (long long i = 1; i <= n; ++i) {
    a = b = 0;
    for (long long j = i - 1; j >= 1; --j)
      if (x[i] < x[j]) ++a;
    for (long long j = i + 1; j <= n; ++j)
      if (x[i] > x[j]) ++a;
    for (long long j = i - 1; j >= 1; --j)
      if (-x[i] < x[j]) ++b;
    for (long long j = i + 1; j <= n; ++j)
      if (-x[i] > x[j]) ++b;
    if (a > b) x[i] = -x[i], nw += -a + b;
    ans = min(ans, nw);
  }
  nw = 0;
  for (long long i = 1; i <= n; ++i) x[i] = abs(x[i]);
  for (long long i = 1; i <= n; ++i)
    for (long long j = i + 1; j <= n; ++j)
      if (x[i] > x[j]) ++nw;
  for (long long i = 1; i <= n; ++i) {
    a = b = 0;
    for (long long j = i - 1; j >= 1; --j)
      if (x[i] < x[j] && abs(x[j]) != x[i]) ++a;
    for (long long j = i + 1; j <= n; ++j)
      if (x[i] > x[j] && abs(x[j]) != x[i]) ++a;
    for (long long j = i - 1; j >= 1; --j)
      if (-x[i] < x[j] && abs(x[j]) != x[i]) ++b;
    for (long long j = i + 1; j <= n; ++j)
      if (-x[i] > x[j] && abs(x[j]) != x[i]) ++b;
    if (a > b) {
      a = b = 0;
      for (long long j = i - 1; j >= 1; --j)
        if (x[i] < x[j]) ++a;
      for (long long j = i + 1; j <= n; ++j)
        if (x[i] > x[j]) ++a;
      for (long long j = i - 1; j >= 1; --j)
        if (-x[i] < x[j]) ++b;
      for (long long j = i + 1; j <= n; ++j)
        if (-x[i] > x[j]) ++b;
      x[i] = -x[i], nw += -a + b;
    }
    ans = min(ans, nw);
  }
  nw = 0;
  for (long long i = 1; i <= n; ++i) x[i] = abs(x[i]);
  for (long long i = 1; i <= n; ++i)
    for (long long j = i + 1; j <= n; ++j)
      if (x[i] > x[j]) ++nw;
  for (long long i = 1; i <= n; ++i) {
    a = b = 0;
    for (long long j = i - 1; j >= 1; --j)
      if (x[i] < x[j]) ++a;
    for (long long j = i + 1; j <= n; ++j)
      if (x[i] > x[j]) ++a;
    for (long long j = i - 1; j >= 1; --j)
      if (-x[i] < x[j]) ++b;
    for (long long j = i + 1; j <= n; ++j)
      if (-x[i] > x[j]) ++b;
    x[i] = -x[i], nw += -a + b;
    ans = min(ans, nw);
  }
  cout << ans << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

53
-3 2 -3 -5 -2 7 0 -2 1 6 -1 2 5 -3 3 -6 -2 -5 -3 -6 4 -4 -2 6 1 -7 -6 -4 0 2 -5 -1 -2 -6 2 2 7 -2 -3 1 0 -4 3 4 -2 7 -3 7 1 3 -5 -5 3


(G.2) Fast Input

1
-3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize("O2") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int MAX = 1e6 + 5; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long MAX2 = 11; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 1000000007; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD2 = 1000005329; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 2e18; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
const int dr[] = {1, 0, -1, 0, 1, 1, -1, -1, 0}; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
const int dc[] = {0, 1, 0, -1, 1, -1, 1, -1, 0}; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
const double pi = acos(-1); /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
const double EPS = 1e-9; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
const int block = 200; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int n, x[MAX], ans, nw, a, b; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= n; ++i) cin >> x[i], x[i] = abs(x[i]); /* line 20 slow_hit_count: 54, fast_hit_count: 2 */
  for (long long i = 1; i <= n; ++i) /* line 21 slow_hit_count: 54, fast_hit_count: 2 */
    for (long long j = i + 1; j <= n; ++j) /* line 22 slow_hit_count: 1431, fast_hit_count: 1 */
      if (x[i] < x[j]) ++ans; /* line 23 slow_hit_count: 1378, fast_hit_count: 0 */
  for (long long i = 1; i <= n; ++i) /* line 24 slow_hit_count: 54, fast_hit_count: 2 */
    for (long long j = i + 1; j <= n; ++j) /* line 25 slow_hit_count: 1431, fast_hit_count: 1 */
      if (x[i] > x[j]) ++nw; /* line 26 slow_hit_count: 1378, fast_hit_count: 0 */
  ans = min(ans, nw); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= n; ++i) { /* line 28 slow_hit_count: 54, fast_hit_count: 2 */
    a = b = 0; /* line 29 slow_hit_count: 53, fast_hit_count: 1 */
    for (long long j = i - 1; j >= 1; --j) /* line 30 slow_hit_count: 1431, fast_hit_count: 1 */
      if (x[i] < x[j]) ++a; /* line 31 slow_hit_count: 1378, fast_hit_count: 0 */
    for (long long j = i + 1; j <= n; ++j) /* line 32 slow_hit_count: 1431, fast_hit_count: 1 */
      if (x[i] > x[j]) ++a; /* line 33 slow_hit_count: 1378, fast_hit_count: 0 */
    for (long long j = i - 1; j >= 1; --j) /* line 34 slow_hit_count: 1431, fast_hit_count: 1 */
      if (-x[i] < x[j]) ++b; /* line 35 slow_hit_count: 1378, fast_hit_count: 0 */
    for (long long j = i + 1; j <= n; ++j) /* line 36 slow_hit_count: 1431, fast_hit_count: 1 */
      if (-x[i] > x[j]) ++b; /* line 37 slow_hit_count: 1378, fast_hit_count: 0 */
    if (a > b) x[i] = -x[i], nw += -a + b; /* line 38 slow_hit_count: 53, fast_hit_count: 1 */
    ans = min(ans, nw); /* line 39 slow_hit_count: 53, fast_hit_count: 1 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  nw = 0; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= n; ++i) x[i] = abs(x[i]); /* line 42 slow_hit_count: 54, fast_hit_count: 2 */
  for (long long i = 1; i <= n; ++i) /* line 43 slow_hit_count: 54, fast_hit_count: 2 */
    for (long long j = i + 1; j <= n; ++j) /* line 44 slow_hit_count: 1431, fast_hit_count: 1 */
      if (x[i] > x[j]) ++nw; /* line 45 slow_hit_count: 1378, fast_hit_count: 0 */
  for (long long i = 1; i <= n; ++i) { /* line 46 slow_hit_count: 54, fast_hit_count: 2 */
    a = b = 0; /* line 47 slow_hit_count: 53, fast_hit_count: 1 */
    for (long long j = i - 1; j >= 1; --j) /* line 48 slow_hit_count: 1431, fast_hit_count: 1 */
      if (x[i] < x[j] && abs(x[j]) != x[i]) ++a; /* line 49 slow_hit_count: 1378, fast_hit_count: 0 */
    for (long long j = i + 1; j <= n; ++j) /* line 50 slow_hit_count: 1431, fast_hit_count: 1 */
      if (x[i] > x[j] && abs(x[j]) != x[i]) ++a; /* line 51 slow_hit_count: 1378, fast_hit_count: 0 */
    for (long long j = i - 1; j >= 1; --j) /* line 52 slow_hit_count: 1431, fast_hit_count: 1 */
      if (-x[i] < x[j] && abs(x[j]) != x[i]) ++b; /* line 53 slow_hit_count: 1378, fast_hit_count: 0 */
    for (long long j = i + 1; j <= n; ++j) /* line 54 slow_hit_count: 1431, fast_hit_count: 1 */
      if (-x[i] > x[j] && abs(x[j]) != x[i]) ++b; /* line 55 slow_hit_count: 1378, fast_hit_count: 0 */
    if (a > b) { /* line 56 slow_hit_count: 53, fast_hit_count: 1 */
      a = b = 0; /* line 57 slow_hit_count: 26, fast_hit_count: 0 */
      for (long long j = i - 1; j >= 1; --j) /* line 58 slow_hit_count: 373, fast_hit_count: 0 */
        if (x[i] < x[j]) ++a; /* line 59 slow_hit_count: 347, fast_hit_count: 0 */
      for (long long j = i + 1; j <= n; ++j) /* line 60 slow_hit_count: 1031, fast_hit_count: 0 */
        if (x[i] > x[j]) ++a; /* line 61 slow_hit_count: 1005, fast_hit_count: 0 */
      for (long long j = i - 1; j >= 1; --j) /* line 62 slow_hit_count: 373, fast_hit_count: 0 */
        if (-x[i] < x[j]) ++b; /* line 63 slow_hit_count: 347, fast_hit_count: 0 */
      for (long long j = i + 1; j <= n; ++j) /* line 64 slow_hit_count: 1031, fast_hit_count: 0 */
        if (-x[i] > x[j]) ++b; /* line 65 slow_hit_count: 1005, fast_hit_count: 0 */
      x[i] = -x[i], nw += -a + b; /* line 66 slow_hit_count: 26, fast_hit_count: 0 */
    } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    ans = min(ans, nw); /* line 68 slow_hit_count: 53, fast_hit_count: 1 */
  } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  nw = 0; /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= n; ++i) x[i] = abs(x[i]); /* line 71 slow_hit_count: 54, fast_hit_count: 2 */
  for (long long i = 1; i <= n; ++i) /* line 72 slow_hit_count: 54, fast_hit_count: 2 */
    for (long long j = i + 1; j <= n; ++j) /* line 73 slow_hit_count: 1431, fast_hit_count: 1 */
      if (x[i] > x[j]) ++nw; /* line 74 slow_hit_count: 1378, fast_hit_count: 0 */
  for (long long i = 1; i <= n; ++i) { /* line 75 slow_hit_count: 54, fast_hit_count: 2 */
    a = b = 0; /* line 76 slow_hit_count: 53, fast_hit_count: 1 */
    for (long long j = i - 1; j >= 1; --j) /* line 77 slow_hit_count: 1431, fast_hit_count: 1 */
      if (x[i] < x[j]) ++a; /* line 78 slow_hit_count: 1378, fast_hit_count: 0 */
    for (long long j = i + 1; j <= n; ++j) /* line 79 slow_hit_count: 1431, fast_hit_count: 1 */
      if (x[i] > x[j]) ++a; /* line 80 slow_hit_count: 1378, fast_hit_count: 0 */
    for (long long j = i - 1; j >= 1; --j) /* line 81 slow_hit_count: 1431, fast_hit_count: 1 */
      if (-x[i] < x[j]) ++b; /* line 82 slow_hit_count: 1378, fast_hit_count: 0 */
    for (long long j = i + 1; j <= n; ++j) /* line 83 slow_hit_count: 1431, fast_hit_count: 1 */
      if (-x[i] > x[j]) ++b; /* line 84 slow_hit_count: 1378, fast_hit_count: 0 */
    x[i] = -x[i], nw += -a + b; /* line 85 slow_hit_count: 53, fast_hit_count: 1 */
    ans = min(ans, nw); /* line 86 slow_hit_count: 53, fast_hit_count: 1 */
  } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 88 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 90 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the given C program and derive performance characterizing invariants, we need to focus on two main phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-level Hit Counts:**
   - The hit counts for the inner loops (lines 22-23, 25-26, 30-37, 48-55, 58-65, 77-84) are significantly higher in the slow input compared to the fast input.
   - The nested loops are being executed many more times in the slow input case because of the larger value of `n`, which suggests that these loops are potential bottlenecks.

2. **Identify Code Segments with High Hit Counts:**
   - The lines involved in nested loops, such as those between lines 22-26, 30-37, 48-55, and 77-84, are executed very frequently, indicating they are responsible for the slowdown.
   - These lines involve comparisons and updates to the inversion count, which are computationally expensive when `n` is large.

3. **Data Structures and Loops Interactions:**
   - The nested loops iterate over pairs of elements in the array `x` to count inversions. When `n` is large, the number of comparisons grows quadratically, leading to increased execution time.
   - The operations inside these loops are sensitive to the ordering of elements in `x`, which influences the number of inversions.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariants in Natural Language:**
   - "When the size of the sequence `n` is large, and the sequence contains many elements with similar absolute values, the quadratic number of comparisons in nested loops to count inversions leads to significant slowdown."
   - "If there are frequent sign changes required to reduce inversions, the repeated recalculation of inversion counts across the sequence can cause the program to slow down considerably."
   - "When `n` approaches its maximum constraint, the nested loops' computational cost due to the pairwise comparison of elements becomes substantial, causing delays."

2. **Avoid Numeric Values from Slow Input:**
   - The descriptions avoid using specific numeric values from the slow input, instead focusing on general patterns like sequence size or element characteristics.

3. **Suggest Thresholds Adhering to Constraints:**
   - Given that `n` can be as large as 2000, the quadratic operations (i.e., operations scaling with `n^2`) become costly when `n` is high and should be the primary focus for optimization.

### Conclusions:

- The program's performance is significantly affected by the quadratic complexity of counting inversions in a large sequence, especially when `n` approaches the upper limit and when many values require flipping to minimize inversions.
- These insights suggest optimizing the inner loop's logic or considering a different algorithmic approach to handle large inputs efficiently, such as utilizing data structures or algorithms that can reduce the number of comparisons needed to determine optimal flips.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Jeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p1, p2, ..., pn for his birthday.

Jeff hates inversions in sequences. An inversion in sequence a1, a2, ..., an is a pair of indexes i, j (1 ≤ i < j ≤ n), such that an inequality ai > aj holds.

Jeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.

Input

The first line contains integer n (1 ≤ n ≤ 2000). The next line contains n integers — sequence p1, p2, ..., pn (|pi| ≤ 105). The numbers are separated by spaces.

Output

In a single line print the answer to the problem — the minimum number of inversions Jeff can get.

Examples

Input

2
2 1


Output

0


Input

9
-2 0 -1 0 -1 2 1 0 -1


Output

6

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as Code Checkers in C++

Below are the C++ code snippets implementing the performance-characterizing invariants that were derived:

1. **Invariant: Large Sequence Size Causing Quadratic Comparisons**
   - "When the size of the sequence `n` is large, and the sequence contains many elements with similar absolute values, the quadratic number of comparisons in nested loops to count inversions leads to significant slowdown."

```cpp
void check_large_sequence_invariant(int n) {
    if (n > 1500) { // Threshold chosen to be closer to the upper bound, but not exact limit
        cerr << "Warning: Performance bottleneck due to large sequence size!" << endl;
        abort();
    }
}
```

2. **Invariant: Frequent Sign Changes Causing Repeated Inversion Calculations**
   - "If there are frequent sign changes required to reduce inversions, the repeated recalculation of inversion counts across the sequence can cause the program to slow down considerably."

```cpp
void check_frequent_sign_changes(const vector<int>& x) {
    int sign_change_count = 0;
    for (size_t i = 1; i < x.size(); ++i) {
        if (x[i] * x[i - 1] < 0) {
            ++sign_change_count;
        }
    }
    if (sign_change_count > (x.size() / 2)) { // Arbitrary threshold to indicate frequent changes
        cerr << "Warning: Performance bottleneck due to frequent sign changes!" << endl;
        abort();
    }
}
```

3. **Invariant: Quadratic Complexity from Nested Loops**
   - "When `n` approaches its maximum constraint, the nested loops' computational cost due to the pairwise comparison of elements becomes substantial, causing delays."

```cpp
void check_nested_loop_invariant(int n) {
    if (n * n > 2500000) { // Quadratic complexity threshold
        cerr << "Warning: Performance bottleneck due to excessive nested loop operations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now, we'll integrate these checkers at appropriate places in the original C++ program. The checkers should be called at critical points but outside of performance-critical loops to avoid introducing additional overhead.

```cpp
#include <bits/stdc++.h>
#pragma GCC optimize("O2")
using namespace std;
const int MAX = 1e6 + 5;
int n, x[MAX], ans, nw, a, b;

// Checker functions

void check_large_sequence_invariant(int n) {
    if (n > 1500) { // Threshold chosen to be closer to the upper bound, but not exact limit
        cerr << "Warning: Performance bottleneck due to large sequence size!" << endl;
        abort();
    }
}

void check_frequent_sign_changes(const vector<int>& x) {
    int sign_change_count = 0;
    for (size_t i = 1; i < x.size(); ++i) {
        if (x[i] * x[i - 1] < 0) {
            ++sign_change_count;
        }
    }
    if (sign_change_count > (x.size() / 2)) { // Arbitrary threshold to indicate frequent changes
        cerr << "Warning: Performance bottleneck due to frequent sign changes!" << endl;
        abort();
    }
}

void check_nested_loop_invariant(int n) {
    if (n * n > 2500000) { // Quadratic complexity threshold
        cerr << "Warning: Performance bottleneck due to excessive nested loop operations!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    cin >> n;
    
    // Place the invariant checks after the input is read
    check_large_sequence_invariant(n);
    
    vector<int> x(n + 1);
    for (int i = 1; i <= n; ++i) cin >> x[i], x[i] = abs(x[i]);
    
    check_frequent_sign_changes(x);
    check_nested_loop_invariant(n);
    
    for (int i = 1; i <= n; ++i)
        for (int j = i + 1; j <= n; ++j)
            if (x[i] < x[j]) ++ans;
    
    for (int i = 1; i <= n; ++i)
        for (int j = i + 1; j <= n; ++j)
            if (x[i] > x[j]) ++nw;
    
    ans = min(ans, nw);
    
    for (int i = 1; i <= n; ++i) {
        a = b = 0;
        
        for (int j = i - 1; j >= 1; --j)
            if (x[i] < x[j]) ++a;
        
        for (int j = i + 1; j <= n; ++j)
            if (x[i] > x[j]) ++a;
        
        for (int j = i - 1; j >= 1; --j)
            if (-x[i] < x[j]) ++b;
        
        for (int j = i + 1; j <= n; ++j)
            if (-x[i] > x[j]) ++b;
        
        if (a > b) x[i] = -x[i], nw += -a + b;
        
        ans = min(ans, nw);
    }
    
    nw = 0;
    for (int i = 1; i <= n; ++i) x[i] = abs(x[i]);
    
    for (int i = 1; i <= n; ++i)
        for (int j = i + 1; j <= n; ++j)
            if (x[i] > x[j]) ++nw;
    
    for (int i = 1; i <= n; ++i) {
        a = b = 0;
        
        for (int j = i - 1; j >= 1; --j)
            if (x[i] < x[j] && abs(x[j]) != x[i]) ++a;
        
        for (int j = i + 1; j <= n; ++j)
            if (x[i] > x[j] && abs(x[j]) != x[i]) ++a;
        
        for (int j = i - 1; j >= 1; --j)
            if (-x[i] < x[j] && abs(x[j]) != x[i]) ++b;
        
        for (int j = i + 1; j <= n; ++j)
            if (-x[i] > x[j] && abs(x[j]) != x[i]) ++b;
        
        if (a > b) {
            a = b = 0;
            for (int j = i - 1; j >= 1; --j)
                if (x[i] < x[j]) ++a;
            
            for (int j = i + 1; j <= n; ++j)
                if (x[i] > x[j]) ++a;
            
            for (int j = i - 1; j >= 1; --j)
                if (-x[i] < x[j]) ++b;
            
            for (int j = i + 1; j <= n; ++j)
                if (-x[i] > x[j]) ++b;
            
            x[i] = -x[i], nw += -a + b;
        }
        ans = min(ans, nw);
    }
    
    nw = 0;
    for (int i = 1; i <= n; ++i) x[i] = abs(x[i]);
    
    for (int i = 1; i <= n; ++i)
        for (int j = i + 1; j <= n; ++j)
            if (x[i] > x[j]) ++nw;
    
    for (int i = 1; i <= n; ++i) {
        a = b = 0;
        
        for (int j = i - 1; j >= 1; --j)
            if (x[i] < x[j]) ++a;
        
        for (int j = i + 1; j <= n; ++j)
            if (x[i] > x[j]) ++a;
        
        for (int j = i - 1; j >= 1; --j)
            if (-x[i] < x[j]) ++b;
        
        for (int j = i + 1; j <= n; ++j)
            if (-x[i] > x[j]) ++b;
        
        x[i] = -x[i], nw += -a + b;
        ans = min(ans, nw);
    }
    
    cout << ans << '\n';
    return 0;
}
```

### Explanation:

- **Check Placement:** Each check is placed at strategic points within the program to avoid adding overhead within the main performance-critical loops. They are added after reading input but before major computations begin.
- **Checker Functions:** Each checker function is responsible for monitoring a specific invariant and will abort execution if a potential bottleneck is detected. This helps in identifying performance issues during testing or fuzzing.

