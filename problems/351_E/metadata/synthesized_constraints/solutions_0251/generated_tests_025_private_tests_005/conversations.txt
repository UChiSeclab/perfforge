system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Jeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p1, p2, ..., pn for his birthday.

Jeff hates inversions in sequences. An inversion in sequence a1, a2, ..., an is a pair of indexes i, j (1 ≤ i < j ≤ n), such that an inequality ai > aj holds.

Jeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.

Input

The first line contains integer n (1 ≤ n ≤ 2000). The next line contains n integers — sequence p1, p2, ..., pn (|pi| ≤ 105). The numbers are separated by spaces.

Output

In a single line print the answer to the problem — the minimum number of inversions Jeff can get.

Examples

Input

2
2 1


Output

0


Input

9
-2 0 -1 0 -1 2 1 0 -1


Output

6

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a[2005];
int sz[2005];
int adj[2005][2005];
void push(int ind, int n) {
  for (int i = 0; i < n; ++i) {
    if (i != ind && a[ind] != a[i]) {
      adj[ind][sz[ind]++] = i;
    }
  }
}
int val[2005];
int f(int x, int y) {
  if (x > y) {
    swap(x, y);
  }
  if (a[x] > a[y]) {
    return 1;
  } else {
    return 0;
  }
}
void solve() {
  int n;
  scanf("%d ", &n);
  for (int i = 0; i < n; ++i) {
    scanf("%d ", &a[i]);
    a[i] = abs(a[i]);
  }
  set<pair<int, int> > s;
  int ret = 0;
  for (int i = 0; i < n; ++i) {
    push(i, n);
    for (int j = 0; j < sz[i]; ++j) {
      val[i] += f(i, adj[i][j]);
    }
    ret += val[i];
    a[i] *= -1;
    for (int j = 0; j < sz[i]; ++j) {
      val[i] -= f(i, adj[i][j]);
    }
    a[i] *= -1;
    s.insert({val[i], i});
  }
  assert(ret % 2 == 0);
  ret /= 2;
  while (s.size() > 0 && (*prev(s.end())).first > 0) {
    pair<int, int> v = *prev(s.end());
    s.erase(v);
    ret -= v.first;
    v.first *= -1;
    s.insert(v);
    int id = v.second;
    for (int i = 0; i < sz[id]; ++i) {
      int vv = f(id, adj[id][i]);
      s.erase({val[adj[id][i]], adj[id][i]});
      val[adj[id][i]] -= f(id, adj[id][i]);
      a[adj[id][i]] *= -1;
      val[adj[id][i]] += f(id, adj[id][i]);
      a[adj[id][i]] *= -1;
      val[id] *= -1;
      val[adj[id][i]] += f(id, adj[id][i]);
      a[adj[id][i]] *= -1;
      val[adj[id][i]] -= f(id, adj[id][i]);
      a[adj[id][i]] *= -1;
      val[id] *= -1;
      s.insert({val[adj[id][i]], adj[id][i]});
    }
    val[id] *= -1;
    a[id] *= -1;
  }
  printf("%d\n", ret);
}
int main() {
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

31
-2 2 -2 -1 0 0 1 2 1 1 -1 -2 2 -1 -2 2 0 1 -1 -2 -1 -2 -1 2 4 0 2 1 1 0 1


(G.2) Fast Input

8
0 1 2 -1 -2 1 -2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a[2005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int sz[2005]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int adj[2005][2005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void push(int ind, int n) { /* line 6 slow_hit_count: 31, fast_hit_count: 8 */
  for (int i = 0; i < n; ++i) { /* line 7 slow_hit_count: 992, fast_hit_count: 72 */
    if (i != ind && a[ind] != a[i]) { /* line 8 slow_hit_count: 961, fast_hit_count: 64 */
      adj[ind][sz[ind]++] = i; /* line 9 slow_hit_count: 622, fast_hit_count: 38 */
    } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 31, fast_hit_count: 8 */
int val[2005]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int f(int x, int y) { /* line 14 slow_hit_count: 2544, fast_hit_count: 76 */
  if (x > y) { /* line 15 slow_hit_count: 2544, fast_hit_count: 76 */
    swap(x, y); /* line 16 slow_hit_count: 962, fast_hit_count: 38 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  if (a[x] > a[y]) { /* line 18 slow_hit_count: 2544, fast_hit_count: 76 */
    return 1; /* line 19 slow_hit_count: 1489, fast_hit_count: 25 */
  } else { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 21 slow_hit_count: 1055, fast_hit_count: 51 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d ", &n); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 27 slow_hit_count: 32, fast_hit_count: 9 */
    scanf("%d ", &a[i]); /* line 28 slow_hit_count: 31, fast_hit_count: 8 */
    a[i] = abs(a[i]); /* line 29 slow_hit_count: 31, fast_hit_count: 8 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  set<pair<int, int> > s; /* line 31 slow_hit_count: 2, fast_hit_count: 2 */
  int ret = 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 33 slow_hit_count: 32, fast_hit_count: 9 */
    push(i, n); /* line 34 slow_hit_count: 31, fast_hit_count: 8 */
    for (int j = 0; j < sz[i]; ++j) { /* line 35 slow_hit_count: 653, fast_hit_count: 46 */
      val[i] += f(i, adj[i][j]); /* line 36 slow_hit_count: 622, fast_hit_count: 38 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    ret += val[i]; /* line 38 slow_hit_count: 31, fast_hit_count: 8 */
    a[i] *= -1; /* line 39 slow_hit_count: 31, fast_hit_count: 8 */
    for (int j = 0; j < sz[i]; ++j) { /* line 40 slow_hit_count: 653, fast_hit_count: 46 */
      val[i] -= f(i, adj[i][j]); /* line 41 slow_hit_count: 622, fast_hit_count: 38 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    a[i] *= -1; /* line 43 slow_hit_count: 31, fast_hit_count: 8 */
    s.insert({val[i], i}); /* line 44 slow_hit_count: 31, fast_hit_count: 8 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  assert(ret % 2 == 0); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  ret /= 2; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  while (s.size() > 0 && (*prev(s.end())).first > 0) { /* line 48 slow_hit_count: 15, fast_hit_count: 1 */
    pair<int, int> v = *prev(s.end()); /* line 49 slow_hit_count: 14, fast_hit_count: 0 */
    s.erase(v); /* line 50 slow_hit_count: 14, fast_hit_count: 0 */
    ret -= v.first; /* line 51 slow_hit_count: 14, fast_hit_count: 0 */
    v.first *= -1; /* line 52 slow_hit_count: 14, fast_hit_count: 0 */
    s.insert(v); /* line 53 slow_hit_count: 14, fast_hit_count: 0 */
    int id = v.second; /* line 54 slow_hit_count: 14, fast_hit_count: 0 */
    for (int i = 0; i < sz[id]; ++i) { /* line 55 slow_hit_count: 274, fast_hit_count: 0 */
      int vv = f(id, adj[id][i]); /* line 56 slow_hit_count: 260, fast_hit_count: 0 */
      s.erase({val[adj[id][i]], adj[id][i]}); /* line 57 slow_hit_count: 260, fast_hit_count: 0 */
      val[adj[id][i]] -= f(id, adj[id][i]); /* line 58 slow_hit_count: 260, fast_hit_count: 0 */
      a[adj[id][i]] *= -1; /* line 59 slow_hit_count: 260, fast_hit_count: 0 */
      val[adj[id][i]] += f(id, adj[id][i]); /* line 60 slow_hit_count: 260, fast_hit_count: 0 */
      a[adj[id][i]] *= -1; /* line 61 slow_hit_count: 260, fast_hit_count: 0 */
      val[id] *= -1; /* line 62 slow_hit_count: 260, fast_hit_count: 0 */
      val[adj[id][i]] += f(id, adj[id][i]); /* line 63 slow_hit_count: 260, fast_hit_count: 0 */
      a[adj[id][i]] *= -1; /* line 64 slow_hit_count: 260, fast_hit_count: 0 */
      val[adj[id][i]] -= f(id, adj[id][i]); /* line 65 slow_hit_count: 260, fast_hit_count: 0 */
      a[adj[id][i]] *= -1; /* line 66 slow_hit_count: 260, fast_hit_count: 0 */
      val[id] *= -1; /* line 67 slow_hit_count: 260, fast_hit_count: 0 */
      s.insert({val[adj[id][i]], adj[id][i]}); /* line 68 slow_hit_count: 260, fast_hit_count: 0 */
    } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    val[id] *= -1; /* line 70 slow_hit_count: 14, fast_hit_count: 0 */
    a[id] *= -1; /* line 71 slow_hit_count: 14, fast_hit_count: 0 */
  } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ret); /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 78 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the given code and the analysis of line-level hit counts, let's proceed with the two phases to diagnose the performance bottleneck:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The function `f(int x, int y)` is called significantly more in the slow input (2544 times) compared to the fast input (76 times). This indicates that the determination of inversion pairs is a hotspot.
   - The `push(int ind, int n)` function is called more frequently in the slow input, with its inner loop iterating over `n` and performing operations on the `adj` and `sz` arrays.
   - The loop starting at line 55 in `solve()` is hit 274 times in the slow run compared to zero in the fast run. This loop is associated with the manipulation of the set `s` and appears to be a significant contributor to the slowdown.

2. **Pinpoint Lines or Functions with More Hits:**
   - Lines within `f(int x, int y)`, such as the `swap` operation and inversion checks, are heavily utilized in the slow run.
   - The loops in `push()` and the loop at line 55 within the main while loop in `solve()` show higher hit counts, indicating they are likely involved in expensive computations.

3. **Inference:**
   - The slowdown is likely due to the repeated computation of inversion pairs and set operations in `solve()`. The frequent updates and checks within the set `s` (lines 49-71) might be causing additional overhead, especially when the input sequence reaches certain configurations leading to a larger number of inversions.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Generate Natural Language Invariants:**

   - **Invariant 1:** "If the input sequence has a high number of elements that differ from each other, the program may perform excessive pairwise comparisons, leading to slowdowns due to the high number of inversion checks."
   
   - **Invariant 2:** "When the sequence structure causes repeated updates and checks within a data structure (like a set), especially when elements in the set are frequently inverted and reprocessed, performance can degrade. This is visible when there are many unique elements leading to numerous set operations."

2. **Avoid Exact Values and Use Thresholds:**
   - The invariants focus on the structure and properties of the input sequence rather than specific values, highlighting operations that exacerbate performance issues.

3. **Correlate Conditions to Input Patterns:**
   - The first invariant captures the effect of unique sequence elements on increased inversion checks.
   - The second invariant addresses the performance impact of set operations under specific sequence conditions, such as highly diverse or balanced sequences.

These invariants abstract the conditions leading to slowdowns and can guide future users in identifying inputs that might trigger performance issues, without relying on exact input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Jeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p1, p2, ..., pn for his birthday.

Jeff hates inversions in sequences. An inversion in sequence a1, a2, ..., an is a pair of indexes i, j (1 ≤ i < j ≤ n), such that an inequality ai > aj holds.

Jeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.

Input

The first line contains integer n (1 ≤ n ≤ 2000). The next line contains n integers — sequence p1, p2, ..., pn (|pi| ≤ 105). The numbers are separated by spaces.

Output

In a single line print the answer to the problem — the minimum number of inversions Jeff can get.

Examples

Input

2
2 1


Output

0


Input

9
-2 0 -1 0 -1 2 1 0 -1


Output

6

Solution (C++ code):
{solution}


assistant: Let's proceed with the tasks by first translating the performance-characterizing invariants into C++ code (Phase 3), and then instrumenting the original C++ program with these checks (Phase 4).

### Phase 3: Implement the Natural Language Invariants in C++

From the natural language invariants derived earlier, let's create C++ checker functions.

#### Natural Language Invariant 1:
"If the input sequence has a high number of elements that differ from each other, the program may perform excessive pairwise comparisons, leading to slowdowns due to the high number of inversion checks."

#### C++ Implementation:
```cpp
void check_inversion_invariant(int n, const int* arr) {
    int distinct_count = 0;
    set<int> distinct_elements;
    
    for (int i = 0; i < n; ++i) {
        if (distinct_elements.find(arr[i]) == distinct_elements.end()) {
            distinct_elements.insert(arr[i]);
            distinct_count++;
        }
    }

    // Example condition: more than 70% of elements are distinct
    if (distinct_count > (n * 0.7)) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive distinct elements causing many inversion checks!" << endl;
        abort();
    }
}
```

#### Natural Language Invariant 2:
"When the sequence structure causes repeated updates and checks within a data structure (like a set), especially when elements in the set are frequently inverted and reprocessed, performance can degrade. This is visible when there are many unique elements leading to numerous set operations."

#### C++ Implementation:
```cpp
void check_set_operation_invariant(int n, const int* arr) {
    multiset<int> element_counts;
    for (int i = 0; i < n; ++i) {
        element_counts.insert(arr[i]);
    }

    // Example condition: if more than half of the elements occur only once
    int single_occurrences = 0;
    for (const auto& elem : element_counts) {
        if (element_counts.count(elem) == 1) {
            single_occurrences++;
        }
    }

    if (single_occurrences > (n * 0.5)) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive unique elements causing inefficient set operations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Now, let's integrate these checkers into the original C++ program. We will place these checks after reading the input and before starting the main computation to ensure that they do not add overhead during the execution.

```cpp
#include <bits/stdc++.h>
using namespace std;

int a[2005];
int sz[2005];
int adj[2005][2005];

void push(int ind, int n) {
    for (int i = 0; i < n; ++i) {
        if (i != ind && a[ind] != a[i]) {
            adj[ind][sz[ind]++] = i;
        }
    }
}

int val[2005];

int f(int x, int y) {
    if (x > y) {
        swap(x, y);
    }
    if (a[x] > a[y]) {
        return 1;
    } else {
        return 0;
    }
}

void check_inversion_invariant(int n, const int* arr) {
    int distinct_count = 0;
    set<int> distinct_elements;
    
    for (int i = 0; i < n; ++i) {
        if (distinct_elements.find(arr[i]) == distinct_elements.end()) {
            distinct_elements.insert(arr[i]);
            distinct_count++;
        }
    }

    // Example condition: more than 70% of elements are distinct
    if (distinct_count > (n * 0.7)) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive distinct elements causing many inversion checks!" << endl;
        abort();
    }
}

void check_set_operation_invariant(int n, const int* arr) {
    multiset<int> element_counts;
    for (int i = 0; i < n; ++i) {
        element_counts.insert(arr[i]);
    }

    // Example condition: if more than half of the elements occur only once
    int single_occurrences = 0;
    for (const auto& elem : element_counts) {
        if (element_counts.count(elem) == 1) {
            single_occurrences++;
        }
    }

    if (single_occurrences > (n * 0.5)) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive unique elements causing inefficient set operations!" << endl;
        abort();
    }
}

void solve() {
    int n;
    scanf("%d ", &n);
    for (int i = 0; i < n; ++i) {
        scanf("%d ", &a[i]);
        a[i] = abs(a[i]);
    }

    // Insert the performance invariant checks after input reading
    check_inversion_invariant(n, a);
    check_set_operation_invariant(n, a);

    set<pair<int, int>> s;
    int ret = 0;
    for (int i = 0; i < n; ++i) {
        push(i, n);
        for (int j = 0; j < sz[i]; ++j) {
            val[i] += f(i, adj[i][j]);
        }
        ret += val[i];
        a[i] *= -1;
        for (int j = 0; j < sz[i]; ++j) {
            val[i] -= f(i, adj[i][j]);
        }
        a[i] *= -1;
        s.insert({val[i], i});
    }
    assert(ret % 2 == 0);
    ret /= 2;
    while (s.size() > 0 && (*prev(s.end())).first > 0) {
        pair<int, int> v = *prev(s.end());
        s.erase(v);
        ret -= v.first;
        v.first *= -1;
        s.insert(v);
        int id = v.second;
        for (int i = 0; i < sz[id]; ++i) {
            int vv = f(id, adj[id][i]);
            s.erase({val[adj[id][i]], adj[id][i]});
            val[adj[id][i]] -= f(id, adj[id][i]);
            a[adj[id][i]] *= -1;
            val[adj[id][i]] += f(id, adj[id][i]);
            a[adj[id][i]] *= -1;
            val[id] *= -1;
            val[adj[id][i]] += f(id, adj[id][i]);
            a[adj[id][i]] *= -1;
            val[adj[id][i]] -= f(id, adj[id][i]);
            a[adj[id][i]] *= -1;
            val[id] *= -1;
            s.insert({val[adj[id][i]], adj[id][i]});
        }
        val[id] *= -1;
        a[id] *= -1;
    }
    printf("%d\n", ret);
}

int main() {
    solve();
    return 0;
}
```

### Explanation:
- The invariant checks are added right after reading the input values and before any heavy computation, ensuring they do not interfere with the main algorithm.
- The first check `check_inversion_invariant` looks for sequences with a large number of distinct elements.
- The second check `check_set_operation_invariant` identifies when many elements in the sequence are unique and only occur once.

These checks help detect performance bottlenecks by aborting execution when potential slowdown conditions are met.

