system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Jeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p1, p2, ..., pn for his birthday.

Jeff hates inversions in sequences. An inversion in sequence a1, a2, ..., an is a pair of indexes i, j (1 ≤ i < j ≤ n), such that an inequality ai > aj holds.

Jeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.

Input

The first line contains integer n (1 ≤ n ≤ 2000). The next line contains n integers — sequence p1, p2, ..., pn (|pi| ≤ 105). The numbers are separated by spaces.

Output

In a single line print the answer to the problem — the minimum number of inversions Jeff can get.

Examples

Input

2
2 1


Output

0


Input

9
-2 0 -1 0 -1 2 1 0 -1


Output

6

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void solve();
int main() {
  ios_base::sync_with_stdio(false);
  cout << fixed;
  cout.precision(10);
  int t = 1;
  while (t--) solve();
  return 0;
}
vector<int> v[101010];
bool res[101010];
void solve() {
  int n;
  cin >> n;
  for (int i = 0; i < n; ++i) {
    int a;
    cin >> a;
    v[abs(a)].push_back(i);
  }
  long long ans = 0;
  for (int i = 0; i <= 100005; ++i) {
    int allHave = 0;
    for (int j = 0; j < n; ++j) {
      if (res[j]) ++allHave;
    }
    for (int pos : v[i]) {
      int invPositive = 0;
      for (int j = pos + 1; j < n; ++j) {
        if (res[j]) ++invPositive;
      }
      ans += min(invPositive, allHave - invPositive);
      res[pos] = true;
    }
  }
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

31
-2 2 -2 -1 0 0 1 2 1 1 -1 -2 1 -1 -2 2 0 1 -1 -2 -1 -2 -1 2 2 2 2 1 1 0 1


(G.2) Fast Input

8
0 1 2 -1 -2 1 0 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void solve(); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cout << fixed; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cout.precision(10); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int t = 1; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) solve(); /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
  return 0; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> v[101010]; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
bool res[101010]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 17 slow_hit_count: 32, fast_hit_count: 9 */
    int a; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a; /* line 19 slow_hit_count: 31, fast_hit_count: 8 */
    v[abs(a)].push_back(i); /* line 20 slow_hit_count: 31, fast_hit_count: 8 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 100005; ++i) { /* line 23 slow_hit_count: 100007, fast_hit_count: 100007 */
    int allHave = 0; /* line 24 slow_hit_count: 100006, fast_hit_count: 100006 */
    for (int j = 0; j < n; ++j) { /* line 25 slow_hit_count: 3200192, fast_hit_count: 900054 */
      if (res[j]) ++allHave; /* line 26 slow_hit_count: 3100186, fast_hit_count: 800048 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    for (int pos : v[i]) { /* line 28 slow_hit_count: 100037, fast_hit_count: 100014 */
      int invPositive = 0; /* line 29 slow_hit_count: 31, fast_hit_count: 8 */
      for (int j = pos + 1; j < n; ++j) { /* line 30 slow_hit_count: 496, fast_hit_count: 36 */
        if (res[j]) ++invPositive; /* line 31 slow_hit_count: 465, fast_hit_count: 28 */
      } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      ans += min(invPositive, allHave - invPositive); /* line 33 slow_hit_count: 31, fast_hit_count: 8 */
      res[pos] = true; /* line 34 slow_hit_count: 31, fast_hit_count: 8 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 38 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose why the provided C program exhibits slower performance for the slow input compared to the fast input, we can analyze the line-level hit counts and the structure of the code. Based on the information, we can derive performance-characterizing invariants. The aim is to identify scenarios or conditions under which the program tends to slow down.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line Hit Analysis**:
   - The lines with significant differences in hit counts between slow and fast runs are:
     - Lines 25 and 26: The loop `for (int j = 0; j < n; ++j)`, and the condition `if (res[j]) ++allHave;` show a dramatic increase in hits during the slow input (3,200,192 times versus 900,054 times).
     - Lines 30 and 31: The nested loop `for (int j = pos + 1; j < n; ++j)` and its condition `if (res[j]) ++invPositive;` are hit significantly more in the slow input (496 versus 36).

2. **Analysis of Loops**:
   - The loop at line 25 iterates over `n` and is nested within another loop iterating over a large fixed range (up to 100,006). This high iteration count combined with the array `res[j]` checks suggests high computational cost.
   - Similarly, the nested loop at line 30 suggests an accumulation of computational effort due to repeated checking and updating of `invPositive`.

3. **Data Structure Interaction**:
   - The `vector<int> v[101010]` and `bool res[101010]` are indexed based on the absolute values of input numbers, leading to a broad spread of operations over potentially all values up to 100,005.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the code structure and hit counts, here are natural language descriptors of potential performance bottlenecks:

1. **Increased Loop Iterations with Large Input Range**:
   - Description: "When the sequence contains many unique absolute values, causing the outer loop to iterate up to its limit (100,006), each containing a nested full iteration over the sequence, performance may degrade significantly."
   - **Reasoning**: The loop iterating over a broad range and checking `res[j]` for each is computationally expensive.

2. **Repeated Checks on Boolean Arrays**:
   - Description: "If the boolean array `res` is frequently accessed and updated in nested loops for each element of a long sequence, especially under a high iteration cap, it can lead to performance slowdown."
   - **Reasoning**: The repeated boolean checks and updates contribute heavily to computational cost within nested loops.

3. **Heavy Use of Nested Loops on Large Sequences**:
   - Description: "When the sequence length `n` approaches its maximum and nested loops are used to count and compare inversions across indices, performance may significantly degrade."
   - **Reasoning**: Nested iteration over nearly full sequence lengths `n` results in a quadratic growth in checks and operations.

These invariants aim to abstract the conditions under which the program exhibits performance issues, helping identify scenarios that are likely to trigger slow performance in future tests or inputs. By focusing on patterns like nested iteration and frequent array access, these descriptions provide insight into likely bottlenecks without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Jeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p1, p2, ..., pn for his birthday.

Jeff hates inversions in sequences. An inversion in sequence a1, a2, ..., an is a pair of indexes i, j (1 ≤ i < j ≤ n), such that an inequality ai > aj holds.

Jeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.

Input

The first line contains integer n (1 ≤ n ≤ 2000). The next line contains n integers — sequence p1, p2, ..., pn (|pi| ≤ 105). The numbers are separated by spaces.

Output

In a single line print the answer to the problem — the minimum number of inversions Jeff can get.

Examples

Input

2
2 1


Output

0


Input

9
-2 0 -1 0 -1 2 1 0 -1


Output

6

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Let's translate the performance-characterizing invariants derived earlier into C++ checker code.

#### Invariant 1: Increased Loop Iterations with Large Input Range

- **Checker Function**: This invariant suggests that performance might degrade when the loop iterates over a large fixed range and checks within each iteration.
  
```cpp
void check_large_range_iteration(int n) {
    if (n > 1500) { // Assuming around 1500 can be a threshold close to max n (2000), indicating potential performance degradation
        cerr << "Warning: Large range iteration may cause performance slowdown!" << endl;
        abort();
    }
}
```

#### Invariant 2: Repeated Checks on Boolean Arrays

- **Checker Function**: Performance might degrade if the boolean array `res` is frequently accessed and updated in nested loops.

```cpp
void check_frequent_boolean_checks(int totalChecks, int threshold = 1000000) {
    if (totalChecks > threshold) {
        cerr << "Warning: Frequent checks on boolean arrays may cause performance slowdown!" << endl;
        abort();
    }
}
```

#### Invariant 3: Heavy Use of Nested Loops on Large Sequences

- **Checker Function**: We assume performance issues likely occur when nested loops run over large sequences near maximal size.

```cpp
void check_nested_loop_iterations(int n, int pos, int threshold = 1500) {
    if (n > threshold && pos > threshold) {
        cerr << "Warning: Nested loop iterations may cause performance slowdown!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Code

Here is the instrumented version of the C++ program, including the above checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker Functions
void check_large_range_iteration(int n) {
    if (n > 1500) {
        cerr << "Warning: Large range iteration may cause performance slowdown!" << endl;
        abort();
    }
}

void check_frequent_boolean_checks(int totalChecks, int threshold = 1000000) {
    if (totalChecks > threshold) {
        cerr << "Warning: Frequent checks on boolean arrays may cause performance slowdown!" << endl;
        abort();
    }
}

void check_nested_loop_iterations(int n, int pos, int threshold = 1500) {
    if (n > threshold && pos > threshold) {
        cerr << "Warning: Nested loop iterations may cause performance slowdown!" << endl;
        abort();
    }
}

void solve() {
    int n;
    cin >> n;
    check_large_range_iteration(n); // Check for large range iteration potential

    vector<int> v[101010];
    bool res[101010] = {false};

    for (int i = 0; i < n; ++i) {
        int a;
        cin >> a;
        v[abs(a)].push_back(i);
    }

    long long ans = 0;
    int totalChecks = 0; // Track total checks for boolean check invariant

    for (int i = 0; i <= 100005; ++i) {
        int allHave = 0;
        for (int j = 0; j < n; ++j) {
            ++totalChecks; // Increment check count
            if (res[j]) ++allHave;
        }
        
        for (int pos : v[i]) {
            check_nested_loop_iterations(n, pos); // Check nested loop iterations
            int invPositive = 0;
            for (int j = pos + 1; j < n; ++j) {
                ++totalChecks; // Increment check count
                if (res[j]) ++invPositive;
            }
            ans += min(invPositive, allHave - invPositive);
            res[pos] = true;
        }
    }
    check_frequent_boolean_checks(totalChecks); // Check frequent boolean array checks

    cout << ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cout << fixed;
    cout.precision(10);
    int t = 1;
    while (t--) solve();
    return 0;
}
```

### Explanation

1. **Check Functions**: Each invariant is translated into a function that checks the corresponding condition at runtime. These functions are invoked at strategic points in the `solve` function to avoid adding overhead in the innermost loops.
   
2. **Integration**: Checker functions are placed:
   - Immediately after reading `n` to check for large range iterations.
   - After the innermost loops to track frequent checks on the boolean array.
   - Before nested loops to catch excessive iterations in nested structures.

These checkers will trigger warnings and abort execution when detected conditions might lead to performance bottlenecks, aligning with the performance-characterizing invariants inferred earlier.

