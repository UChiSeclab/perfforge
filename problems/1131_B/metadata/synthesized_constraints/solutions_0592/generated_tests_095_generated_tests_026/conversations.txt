system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You still have partial information about the score during the historic football match. You are given a set of pairs (a_i, b_i), indicating that at some point during the match the score was "a_i: b_i". It is known that if the current score is «x:y», then after the goal it will change to "x+1:y" or "x:y+1". What is the largest number of times a draw could appear on the scoreboard?

The pairs "a_i:b_i" are given in chronological order (time increases), but you are given score only for some moments of time. The last pair corresponds to the end of the match.

Input

The first line contains a single integer n (1 ≤ n ≤ 10000) — the number of known moments in the match.

Each of the next n lines contains integers a_i and b_i (0 ≤ a_i, b_i ≤ 10^9), denoting the score of the match at that moment (that is, the number of goals by the first team and the number of goals by the second team).

All moments are given in chronological order, that is, sequences x_i and y_j are non-decreasing. The last score denotes the final result of the match.

Output

Print the maximum number of moments of time, during which the score was a draw. The starting moment of the match (with a score 0:0) is also counted.

Examples

Input

3
2 0
3 1
3 4


Output

2


Input

3
0 0
0 0
0 0


Output

1


Input

1
5 4


Output

5

Note

In the example one of the possible score sequences leading to the maximum number of draws is as follows: 0:0, 1:0, 2:0, 2:1, 3:1, 3:2, 3:3, 3:4.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using int64 = long long;
int main() {
  int N, A[10001] = {}, B[10001] = {};
  cin >> N;
  for (int i = 1; i <= N; i++) {
    cin >> A[i] >> B[i];
  }
  int ret = 1;
  for (int i = 1; i <= N; i++) {
    while (A[i - 1] < A[i] || B[i - 1] < B[i]) {
      bool f = A[i - 1] < A[i];
      bool g = B[i - 1] < B[i];
      if (f) {
        if (g) {
          if (A[i - 1] < B[i - 1])
            ++A[i - 1];
          else
            ++B[i - 1];
        } else {
          ++A[i - 1];
        }
      } else {
        ++B[i - 1];
      }
      ret += A[i - 1] == B[i - 1];
    }
  }
  cout << ret << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
1010011000 0


(G.2) Fast Input

1
1 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using int64 = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int N, A[10001] = {}, B[10001] = {}; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> N; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= N; i++) { /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> A[i] >> B[i]; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  int ret = 1; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= N; i++) { /* line 11 slow_hit_count: 2, fast_hit_count: 2 */
    while (A[i - 1] < A[i] || B[i - 1] < B[i]) { /* line 12 slow_hit_count: 1010011001, fast_hit_count: 2 */
      bool f = A[i - 1] < A[i]; /* line 13 slow_hit_count: 1010011000, fast_hit_count: 1 */
      bool g = B[i - 1] < B[i]; /* line 14 slow_hit_count: 1010011000, fast_hit_count: 1 */
      if (f) { /* line 15 slow_hit_count: 1010011000, fast_hit_count: 1 */
        if (g) { /* line 16 slow_hit_count: 1010011000, fast_hit_count: 1 */
          if (A[i - 1] < B[i - 1]) /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
            ++A[i - 1]; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
          else /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
            ++B[i - 1]; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
        } else { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
          ++A[i - 1]; /* line 22 slow_hit_count: 1010011000, fast_hit_count: 1 */
        } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
        ++B[i - 1]; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      ret += A[i - 1] == B[i - 1]; /* line 27 slow_hit_count: 1010011000, fast_hit_count: 1 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ret << endl; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To identify performance bottlenecks and derive conditions under which the provided C program slows down, we'll analyze the given code, line-level hit counts, and input characteristics.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis**:
    - The line `while (A[i - 1] < A[i] || B[i - 1] < B[i]) {` (line 12) is hit 1,010,011,001 times for the slow input compared to just 2 times for the fast input.
    - The associated lines inside the while loop, particularly `++A[i - 1];` (line 22) and `ret += A[i - 1] == B[i - 1];` (line 27), also show significantly higher hit counts for the slow input.

2. **Potential Bottleneck**:
    - The while loop (lines 12 to 28) appears to be the primary performance bottleneck, especially when `A[i]` or `B[i]` have large values. 
    - This loop iteratively increments `A[i-1]` or `B[i-1]`, leading to a high number of iterations when the difference between `A[i]` and `A[i-1]` (or `B[i]` and `B[i-1]`) is large.

3. **Interaction with Data Structures**:
    - The while loop repeatedly updates the values of `A[i-1]` and `B[i-1]`, performing potentially costly equality checks (`A[i-1] == B[i-1]`) for each increment. This behavior aligns with the large hit counts observed.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: Large Score Differences**:
    - **Natural Language Description**: "When the difference between consecutive scores `A[i]` and `A[i-1]` (or `B[i]` and `B[i-1]`) is large, the program may slow down due to excessive iterations in the while loop."
    - **Rationale**: This condition triggers a large number of iterations, leading to increased execution time. This is a characteristic of the slow input where `A[1]` is 1,010,011,000.

2. **Invariant 2: Unequal Score Increases**:
    - **Natural Language Description**: "If the scores increase unevenly over time, resulting in one score being significantly higher than the other without frequent draws, the loop may execute many times, slowing down performance."
    - **Rationale**: The loop is designed to equalize scores as much as possible, so long runs without draws indicate more iterations to reach a balance.

3. **Invariant 3: Large Initial Scores**:
    - **Natural Language Description**: "High values in the initial score pair (`A[1]`, `B[1]`) compared to their preceding values (`A[0]`, `B[0]` initially set to 0) can cause the loop to execute many iterations, significantly impacting performance."
    - **Rationale**: A large initial score difference necessitates many updates, thus slowing down the program as seen with the slow input's first score.

These invariants abstractly describe the conditions that can lead to the observed slow performance, without relying on specific numeric values, while aligning with the input size constraints (e.g., `n <= 10000`). They reflect the patterns that a fuzzer or similar tool may use to detect performance bottlenecks in similar scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You still have partial information about the score during the historic football match. You are given a set of pairs (a_i, b_i), indicating that at some point during the match the score was "a_i: b_i". It is known that if the current score is «x:y», then after the goal it will change to "x+1:y" or "x:y+1". What is the largest number of times a draw could appear on the scoreboard?

The pairs "a_i:b_i" are given in chronological order (time increases), but you are given score only for some moments of time. The last pair corresponds to the end of the match.

Input

The first line contains a single integer n (1 ≤ n ≤ 10000) — the number of known moments in the match.

Each of the next n lines contains integers a_i and b_i (0 ≤ a_i, b_i ≤ 10^9), denoting the score of the match at that moment (that is, the number of goals by the first team and the number of goals by the second team).

All moments are given in chronological order, that is, sequences x_i and y_j are non-decreasing. The last score denotes the final result of the match.

Output

Print the maximum number of moments of time, during which the score was a draw. The starting moment of the match (with a score 0:0) is also counted.

Examples

Input

3
2 0
3 1
3 4


Output

2


Input

3
0 0
0 0
0 0


Output

1


Input

1
5 4


Output

5

Note

In the example one of the possible score sequences leading to the maximum number of draws is as follows: 0:0, 1:0, 2:0, 2:1, 3:1, 3:2, 3:3, 3:4.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants in C++

Below are the C++ code snippets implementing the performance-characterizing invariants derived in natural language.

1. **Invariant 1: Large Score Differences**

   ```cpp
   void check_large_score_difference(int current, int previous) {
       if (current - previous > 1000000) { // Threshold chosen based on large numbers likely to cause slowdowns
           cerr << "Warning: Large score difference detected between consecutive moments!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Unequal Score Increases**

   ```cpp
   void check_unequal_score_increase(int aCurrent, int aPrevious, int bCurrent, int bPrevious) {
       if (abs(aCurrent - aPrevious) > 1000 && abs(bCurrent - bPrevious) < 10) {
           cerr << "Warning: Uneven score increase detected!" << endl;
           abort();
       }
       if (abs(bCurrent - bPrevious) > 1000 && abs(aCurrent - aPrevious) < 10) {
           cerr << "Warning: Uneven score increase detected!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Large Initial Scores**

   ```cpp
   void check_large_initial_score(int a, int b) {
       if (a > 1000000 || b > 1000000) { // Large initial scores could cause slow loops
           cerr << "Warning: Large initial score detected!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checks into Original Program

Next, let's integrate these invariant checks into the provided C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;
using int64 = long long;

// Invariant checks
void check_large_score_difference(int current, int previous) {
    if (current - previous > 1000000) {
        cerr << "Warning: Large score difference detected between consecutive moments!" << endl;
        abort();
    }
}

void check_unequal_score_increase(int aCurrent, int aPrevious, int bCurrent, int bPrevious) {
    if (abs(aCurrent - aPrevious) > 1000 && abs(bCurrent - bPrevious) < 10) {
        cerr << "Warning: Uneven score increase detected!" << endl;
        abort();
    }
    if (abs(bCurrent - bPrevious) > 1000 && abs(aCurrent - aPrevious) < 10) {
        cerr << "Warning: Uneven score increase detected!" << endl;
        abort();
    }
}

void check_large_initial_score(int a, int b) {
    if (a > 1000000 || b > 1000000) {
        cerr << "Warning: Large initial score detected!" << endl;
        abort();
    }
}

int main() {
    int N, A[10001] = {}, B[10001] = {};
    cin >> N;
    
    // Initial score check
    check_large_initial_score(A[0], B[0]);

    for (int i = 1; i <= N; i++) {
        cin >> A[i] >> B[i];

        // Check for large initial scores
        if (i == 1) {
            check_large_initial_score(A[i], B[i]);
        }

        // Check for large score differences
        check_large_score_difference(A[i], A[i-1]);
        check_large_score_difference(B[i], B[i-1]);

        // Check for uneven score increases
        check_unequal_score_increase(A[i], A[i-1], B[i], B[i-1]);
    }

    int ret = 1;
    for (int i = 1; i <= N; i++) {
        while (A[i - 1] < A[i] || B[i - 1] < B[i]) {
            bool f = A[i - 1] < A[i];
            bool g = B[i - 1] < B[i];
            if (f) {
                if (g) {
                    if (A[i - 1] < B[i - 1])
                        ++A[i - 1];
                    else
                        ++B[i - 1];
                } else {
                    ++A[i - 1];
                }
            } else {
                ++B[i - 1];
            }
            ret += A[i - 1] == B[i - 1];
        }
    }
    cout << ret << endl;
}
```

### Explanation

- **Large Score Differences**: Inserted after reading each score to catch large jumps between consecutive records.
- **Unequal Score Increases**: Inserted to detect one score increasing significantly more than the other.
- **Large Initial Scores**: Checked after reading the initial scores to prevent large numbers from causing extensive looping.

These checks are strategically placed to detect and abort execution when potential performance issues arise, providing insights during development or testing phases.

