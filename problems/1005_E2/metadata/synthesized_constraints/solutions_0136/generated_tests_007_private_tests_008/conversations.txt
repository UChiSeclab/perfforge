system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given an integer sequence a_1, a_2, ..., a_n.

Find the number of pairs of indices (l, r) (1 ≤ l ≤ r ≤ n) such that the value of median of a_l, a_{l+1}, ..., a_r is exactly the given number m.

The median of a sequence is the value of an element which is in the middle of the sequence after sorting it in non-decreasing order. If the length of the sequence is even, the left of two middle elements is used.

For example, if a=[4, 2, 7, 5] then its median is 4 since after sorting the sequence, it will look like [2, 4, 5, 7] and the left of two middle elements is equal to 4. The median of [7, 1, 2, 9, 6] equals 6 since after sorting, the value 6 will be in the middle of the sequence.

Write a program to find the number of pairs of indices (l, r) (1 ≤ l ≤ r ≤ n) such that the value of median of a_l, a_{l+1}, ..., a_r is exactly the given number m.

Input

The first line contains integers n and m (1 ≤ n,m ≤ 2⋅10^5) — the length of the given sequence and the required value of the median.

The second line contains an integer sequence a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2⋅10^5).

Output

Print the required number.

Examples

Input

5 4
1 4 5 60 4


Output

8


Input

3 1
1 1 1


Output

6


Input

15 2
1 2 3 1 2 3 1 2 3 1 2 3 1 2 3


Output

97

Note

In the first example, the suitable pairs of indices are: (1, 3), (1, 4), (1, 5), (2, 2), (2, 3), (2, 5), (4, 5) and (5, 5).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, m;
int arr[200003];
void read() {
  cin >> n >> m;
  for (int i = 1; i <= n; i++) cin >> arr[i];
}
class bit {
 public:
  unordered_map<int, unordered_map<int, int> > tr;
  void add(int a, int b) {
    a += n + 2;
    b += n + 2;
    for (int i = a; i < 3 * 200003; i += i & (-i))
      for (int j = b; j < 3 * 200003; j += j & (-j)) tr[i][j]++;
  }
  int get_prefix(int a, int b) {
    a += n + 2;
    b += n + 2;
    int ans = 0;
    for (int i = a; i > 0; i -= i & (-i))
      if (tr.count(i))
        for (int j = b; j > 0; j -= j & (-j))
          if (tr[i].count(j)) ans += tr[i][j];
    return ans;
  }
  int get(int a, int b) {
    return get_prefix(a, 3 * 200003) - get_prefix(a, b - 1);
  }
};
bit even, odd;
void solve() {
  for (int i = 1; i <= n; i++) {
    if (arr[i] < m)
      arr[i] = 0;
    else if (arr[i] == m)
      arr[i] = 1;
    else
      arr[i] = 2;
  }
  int a = 0, b = 0, c = 0;
  even.add(0, 0);
  long long ans = 0;
  for (int i = 1; i <= n; i++) {
    if (arr[i] == 0)
      a++;
    else if (arr[i] == 1)
      b++;
    else
      c++;
    if (i % 2 == 0) {
      int first = a + b - c;
      int second = a - b - c + 1;
      ans += even.get(first, second);
      first--;
      ans += odd.get(first, second);
      even.add(a + b - c, a - b - c);
    } else {
      int first = a + b - c;
      int second = a - b - c + 1;
      ans += odd.get(first, second);
      first--;
      ans += even.get(first, second);
      odd.add(a + b - c, a - b - c);
    }
  }
  cout << ans << '\n';
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  read();
  solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

15 1
1 2 3 1 2 3 1 2 3 1 2 3 1 2 3


(G.2) Fast Input

2 1
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int arr[200003]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
void read() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) cin >> arr[i]; /* line 7 slow_hit_count: 16, fast_hit_count: 3 */
} /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
class bit { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  unordered_map<int, unordered_map<int, int> > tr; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  void add(int a, int b) { /* line 12 slow_hit_count: 16, fast_hit_count: 3 */
    a += n + 2; /* line 13 slow_hit_count: 16, fast_hit_count: 3 */
    b += n + 2; /* line 14 slow_hit_count: 16, fast_hit_count: 3 */
    for (int i = a; i < 3 * 200003; i += i & (-i)) /* line 15 slow_hit_count: 294, fast_hit_count: 58 */
      for (int j = b; j < 3 * 200003; j += j & (-j)) tr[i][j]++; /* line 16 slow_hit_count: 5267, fast_hit_count: 1082 */
  } /* line 17 slow_hit_count: 16, fast_hit_count: 3 */
  int get_prefix(int a, int b) { /* line 18 slow_hit_count: 60, fast_hit_count: 8 */
    a += n + 2; /* line 19 slow_hit_count: 60, fast_hit_count: 8 */
    b += n + 2; /* line 20 slow_hit_count: 60, fast_hit_count: 8 */
    int ans = 0; /* line 21 slow_hit_count: 60, fast_hit_count: 8 */
    for (int i = a; i > 0; i -= i & (-i)) /* line 22 slow_hit_count: 218, fast_hit_count: 20 */
      if (tr.count(i)) /* line 23 slow_hit_count: 158, fast_hit_count: 12 */
        for (int j = b; j > 0; j -= j & (-j)) /* line 24 slow_hit_count: 213, fast_hit_count: 29 */
          if (tr[i].count(j)) ans += tr[i][j]; /* line 25 slow_hit_count: 185, fast_hit_count: 25 */
    return ans; /* line 26 slow_hit_count: 60, fast_hit_count: 8 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  int get(int a, int b) { /* line 28 slow_hit_count: 30, fast_hit_count: 4 */
    return get_prefix(a, 3 * 200003) - get_prefix(a, b - 1); /* line 29 slow_hit_count: 30, fast_hit_count: 4 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
bit even, odd; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 34 slow_hit_count: 16, fast_hit_count: 3 */
    if (arr[i] < m) /* line 35 slow_hit_count: 15, fast_hit_count: 2 */
      arr[i] = 0; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    else if (arr[i] == m) /* line 37 slow_hit_count: 15, fast_hit_count: 2 */
      arr[i] = 1; /* line 38 slow_hit_count: 5, fast_hit_count: 1 */
    else /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      arr[i] = 2; /* line 40 slow_hit_count: 10, fast_hit_count: 1 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  int a = 0, b = 0, c = 0; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  even.add(0, 0); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 45 slow_hit_count: 16, fast_hit_count: 3 */
    if (arr[i] == 0) /* line 46 slow_hit_count: 15, fast_hit_count: 2 */
      a++; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    else if (arr[i] == 1) /* line 48 slow_hit_count: 15, fast_hit_count: 2 */
      b++; /* line 49 slow_hit_count: 5, fast_hit_count: 1 */
    else /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      c++; /* line 51 slow_hit_count: 10, fast_hit_count: 1 */
    if (i % 2 == 0) { /* line 52 slow_hit_count: 15, fast_hit_count: 2 */
      int first = a + b - c; /* line 53 slow_hit_count: 7, fast_hit_count: 1 */
      int second = a - b - c + 1; /* line 54 slow_hit_count: 7, fast_hit_count: 1 */
      ans += even.get(first, second); /* line 55 slow_hit_count: 7, fast_hit_count: 1 */
      first--; /* line 56 slow_hit_count: 7, fast_hit_count: 1 */
      ans += odd.get(first, second); /* line 57 slow_hit_count: 7, fast_hit_count: 1 */
      even.add(a + b - c, a - b - c); /* line 58 slow_hit_count: 7, fast_hit_count: 1 */
    } else { /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
      int first = a + b - c; /* line 60 slow_hit_count: 8, fast_hit_count: 1 */
      int second = a - b - c + 1; /* line 61 slow_hit_count: 8, fast_hit_count: 1 */
      ans += odd.get(first, second); /* line 62 slow_hit_count: 8, fast_hit_count: 1 */
      first--; /* line 63 slow_hit_count: 8, fast_hit_count: 1 */
      ans += even.get(first, second); /* line 64 slow_hit_count: 8, fast_hit_count: 1 */
      odd.add(a + b - c, a - b - c); /* line 65 slow_hit_count: 8, fast_hit_count: 1 */
    } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(nullptr); /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  read(); /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 76 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

After examining the provided hit counts for the slow and fast inputs, several lines of code emerge as hotspots, showing significantly higher hit counts in the slow input compared to the fast input. These lines are likely contributing to the performance bottleneck:

1. **Line 15 and Line 16 (in the `add` function):** These lines, part of a loop in the Binary Indexed Tree (BIT) implementation, have high hit counts. This indicates that the `add` function is being called many times, and the internal loops are iterating frequently due to high values of indices.

2. **Line 22 to 25 (in the `get_prefix` function):** These lines illustrate another loop within the BIT structure. The higher hit counts suggest frequent or deep iterations, indicating that the `get_prefix` function is heavily utilized during execution.

3. **Lines 55, 57, 62, 64 (in the `solve` function):** These lines involve calls to the BIT's `get` method, which internally uses `get_prefix`. The higher hit counts point to frequent BIT queries, which likely result in repeated and thus costly memory accesses.

4. **Line 58 and Line 65 (in the `solve` function):** These lines call the `add` method of the BIT class, showing that updates to the BIT are also performed extensively.

The slow performance likely arises from the frequent updates and queries to the BIT data structure, with both the `add` and `get_prefix` methods being heavily utilized due to the nature of the input.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified code segments, we can generate the following performance-characterizing invariants:

1. **Nested Tree Updates and Queries:**
   - **Invariant:** "If the input array contains frequent and repeated values around the median `m`, the program will perform numerous update and retrieval operations on the Binary Indexed Tree, leading to significant slowdown."
   - **Reasoning:** The BIT is updated and queried frequently when there are many subarrays where the median is sought, especially around the provided median `m`. This leads to a high load on the BIT structure.

2. **High Number of Subarray Evaluations:**
   - **Invariant:** "A high density of values equal to or near the median in the sequence leads to increased subarray calculations, as many ranges will need to be evaluated for median calculations."
   - **Reasoning:** When the array has many elements equal to the median, more subarrays will potentially satisfy the condition of having `m` as their median, thus prompting extensive computation.

3. **Large Input Size with Frequent Changes:**
   - **Invariant:** "With larger values of `n`, especially when the sequence has alternating or cyclical patterns, the number of BIT operations grows, which can degrade performance significantly."
   - **Reasoning:** The algorithm’s complexity relates to the number of operations performed on the BIT, and patterns in input, like alternating sequences, increase the complexity of these operations.

By understanding these performance tendencies, future inputs that might cause similar slowdowns can be identified and mitigated. These invariants can guide optimizations, such as reducing redundant BIT operations or using alternative data structures more suited to the input patterns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given an integer sequence a_1, a_2, ..., a_n.

Find the number of pairs of indices (l, r) (1 ≤ l ≤ r ≤ n) such that the value of median of a_l, a_{l+1}, ..., a_r is exactly the given number m.

The median of a sequence is the value of an element which is in the middle of the sequence after sorting it in non-decreasing order. If the length of the sequence is even, the left of two middle elements is used.

For example, if a=[4, 2, 7, 5] then its median is 4 since after sorting the sequence, it will look like [2, 4, 5, 7] and the left of two middle elements is equal to 4. The median of [7, 1, 2, 9, 6] equals 6 since after sorting, the value 6 will be in the middle of the sequence.

Write a program to find the number of pairs of indices (l, r) (1 ≤ l ≤ r ≤ n) such that the value of median of a_l, a_{l+1}, ..., a_r is exactly the given number m.

Input

The first line contains integers n and m (1 ≤ n,m ≤ 2⋅10^5) — the length of the given sequence and the required value of the median.

The second line contains an integer sequence a_1, a_2, ..., a_n (1 ≤ a_i ≤ 2⋅10^5).

Output

Print the required number.

Examples

Input

5 4
1 4 5 60 4


Output

8


Input

3 1
1 1 1


Output

6


Input

15 2
1 2 3 1 2 3 1 2 3 1 2 3 1 2 3


Output

97

Note

In the first example, the suitable pairs of indices are: (1, 3), (1, 4), (1, 5), (2, 2), (2, 3), (2, 5), (4, 5) and (5, 5).

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants as C++ Checkers

Below, I've translated the previously derived natural language invariants into C++ checker code. These checkers will help identify when the program enters a performance bottleneck:

1. **Nested Tree Updates and Queries:**

```cpp
void check_tree_operations_invariant(int operationCount) {
    if (operationCount > 10000) { // Threshold to identify excessive BIT operations
        cerr << "Warning: Performance bottleneck condition triggered - excessive BIT operations!" << endl;
        abort();
    }
}
```

2. **High Number of Subarray Evaluations:**

```cpp
void check_subarray_invariant(int equivalentMedianCount) {
    if (equivalentMedianCount > n / 2) { // Arbitrary threshold to identify high density of median-equivalent elements
        cerr << "Warning: Performance bottleneck condition triggered - excessive subarray evaluations around median!" << endl;
        abort();
    }
}
```

3. **Large Input Size with Frequent Changes:**

```cpp
void check_input_pattern_invariant(const vector<int>& arr) {
    int patternCount = 0;
    for (size_t i = 1; i < arr.size(); ++i) {
        if (arr[i] != arr[i - 1]) {
            patternCount++;
        }
    }
    if (patternCount > n / 2) { // Threshold indicating frequent changes in input pattern
        cerr << "Warning: Performance bottleneck condition triggered - frequent changes in input pattern!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Program

The following code integrates these performance checkers at strategic points in the original program. The checkers are added after reading input and before heavy operations commence, avoiding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
int n, m;
int arr[200003];

// Checkers for performance bottlenecks
void check_tree_operations_invariant(int operationCount) {
    if (operationCount > 10000) { // Threshold to identify excessive BIT operations
        cerr << "Warning: Performance bottleneck condition triggered - excessive BIT operations!" << endl;
        abort();
    }
}

void check_subarray_invariant(int equivalentMedianCount) {
    if (equivalentMedianCount > n / 2) { // Arbitrary threshold to identify high density of median-equivalent elements
        cerr << "Warning: Performance bottleneck condition triggered - excessive subarray evaluations around median!" << endl;
        abort();
    }
}

void check_input_pattern_invariant(const vector<int>& arr) {
    int patternCount = 0;
    for (size_t i = 1; i < arr.size(); ++i) {
        if (arr[i] != arr[i - 1]) {
            patternCount++;
        }
    }
    if (patternCount > n / 2) { // Threshold indicating frequent changes in input pattern
        cerr << "Warning: Performance bottleneck condition triggered - frequent changes in input pattern!" << endl;
        abort();
    }
}

void read() {
  cin >> n >> m;
  for (int i = 1; i <= n; i++) cin >> arr[i];
  // Check frequent changes in input pattern
  check_input_pattern_invariant(vector<int>(arr + 1, arr + n + 1));
}

class bit {
 public:
  unordered_map<int, unordered_map<int, int> > tr;
  int operationCount = 0;
  
  void add(int a, int b) {
    a += n + 2;
    b += n + 2;
    for (int i = a; i < 3 * 200003; i += i & (-i))
      for (int j = b; j < 3 * 200003; j += j & (-j)) {
          tr[i][j]++;
          operationCount++;
      }
    // Check excessive BIT operations
    check_tree_operations_invariant(operationCount);
  }
  
  int get_prefix(int a, int b) {
    a += n + 2;
    b += n + 2;
    int ans = 0;
    for (int i = a; i > 0; i -= i & (-i))
      if (tr.count(i))
        for (int j = b; j > 0; j -= j & (-j))
          if (tr[i].count(j)) {
              ans += tr[i][j];
              operationCount++;
          }
    // Check excessive BIT operations
    check_tree_operations_invariant(operationCount);
    return ans;
  }
  
  int get(int a, int b) {
    return get_prefix(a, 3 * 200003) - get_prefix(a, b - 1);
  }
};

bit even, odd;

void solve() {
  int equivalentMedianCount = 0;
  for (int i = 1; i <= n; i++) {
    if (arr[i] < m)
      arr[i] = 0;
    else if (arr[i] == m) {
      arr[i] = 1;
      equivalentMedianCount++;
    }
    else
      arr[i] = 2;
  }
  // Check high density of median-equivalent elements
  check_subarray_invariant(equivalentMedianCount);
  
  int a = 0, b = 0, c = 0;
  even.add(0, 0);
  long long ans = 0;
  for (int i = 1; i <= n; i++) {
    if (arr[i] == 0)
      a++;
    else if (arr[i] == 1)
      b++;
    else
      c++;
    if (i % 2 == 0) {
      int first = a + b - c;
      int second = a - b - c + 1;
      ans += even.get(first, second);
      first--;
      ans += odd.get(first, second);
      even.add(a + b - c, a - b - c);
    } else {
      int first = a + b - c;
      int second = a - b - c + 1;
      ans += odd.get(first, second);
      first--;
      ans += even.get(first, second);
      odd.add(a + b - c, a - b - c);
    }
  }
  cout << ans << '\n';
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  read();
  solve();
}
```

### Explanation of Inserted Checks

- **`check_tree_operations_invariant`** is called within the `add` and `get_prefix` methods of the BIT class to detect excessive operations, ensuring the BIT does not become a bottleneck.
- **`check_subarray_invariant`** is called after processing the array to assess if there are an excessive number of elements equivalent to the median.
- **`check_input_pattern_invariant`** is called after reading inputs to detect frequent changes in the input pattern that might lead to performance issues.

