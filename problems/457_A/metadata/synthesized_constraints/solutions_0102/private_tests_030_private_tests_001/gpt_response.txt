=== Invariants Response ===
### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - Lines 6 and 7 (Padding shorter string with zeros): These lines have significantly more hits in the slow input. Specifically, line 6 (`while (b.length() < a.length())`) executes 306 times compared to 1 time in the fast input.
   - Lines 10-15 and 17-23: These loops iterate over the string `a` from left to right and right to left, aiming to reduce consecutive '11's by converting them to '100'. The lines within these loops are executed 306 and 307 times respectively in the slow input, indicating they are involved in a significant amount of processing.
   - Lines 24-30 and 31-37: These loops perform similar operations on string `b` and also have high hit counts (306 and 307 times respectively for line 25 and 32).

2. **Interactions with Data Structures:**
   - The strings `a` and `b` are both processed multiple times in nested loops. The hit counts suggest that the processing of these strings, particularly the transformation of consecutive '11' sequences into '100', is a major contributor to the slowdown.

3. **Input Constraints and Structure:**
   - The slow input (1010010...) consists of a pattern that seems to trigger repeated transformations (from '11' to '100'), leading to high line hit counts in the reduction loops. In contrast, the fast input ('1', '1') is simple and results in almost no additional transformations.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

1. **Invariant for String Padding:**
   - "Padding a shorter golden system number with leading zeros until both numbers have equal length can cause the program to slow down, especially if one number is significantly shorter and requires extensive padding."

2. **Invariant for Consecutive '11' Transformation:**
   - "The presence of many consecutive '11' sequences in the input numbers can significantly increase computation time due to repeated back-and-forth transformations. This occurs when the sequences are heavily nested or when there are many such sequences in the input."

3. **Invariant for Repeated Transformations:**
   - "If input strings require extensive transformations to convert consecutive '11' sequences into a simplified form, especially in a back and forth manner, the algorithm might slow down considerably. This is particularly true when the input string length is near the maximum constraint and densely packed with such patterns."

These invariants focus on the structural patterns of the input data that might lead to performance issues, rather than specific values, while adhering to the input constraints provided.

=== Checker Response ===
### Phase 3: Implement the Natural Language Invariants in C++

Here are the checker functions corresponding to each invariant described in Phase 2:

1. **Checker for String Padding:**
   ```cpp
   void check_padding_invariant(const string& a, const string& b) {
       if (abs((int)a.length() - (int)b.length()) > 1000) {  // Using 1000 as an arbitrary threshold
           cerr << "Warning: Performance bottleneck condition triggered due to extensive padding!" << endl;
           abort();
       }
   }
   ```

2. **Checker for Consecutive '11' Transformation:**
   ```cpp
   void check_consecutive_ones_invariant(const string& num) {
       int consecutiveOnes = 0;
       for (size_t i = 0; i < num.length() - 1; ++i) {
           if (num[i] == '1' && num[i + 1] == '1') {
               consecutiveOnes++;
           }
       }
       if (consecutiveOnes > 500) {  // Arbitrary threshold for excessive consecutive '11' patterns
           cerr << "Warning: Performance bottleneck condition triggered due to consecutive '11's!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checkers into the Original C++ Program

Now, let's integrate these checkers into the original program:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_padding_invariant(const string& a, const string& b) {
    if (abs((int)a.length() - (int)b.length()) > 1000) {  // Using 1000 as an arbitrary threshold
        cerr << "Warning: Performance bottleneck condition triggered due to extensive padding!" << endl;
        abort();
    }
}

void check_consecutive_ones_invariant(const string& num) {
    int consecutiveOnes = 0;
    for (size_t i = 0; i < num.length() - 1; ++i) {
        if (num[i] == '1' && num[i + 1] == '1') {
            consecutiveOnes++;
        }
    }
    if (consecutiveOnes > 500) {  // Arbitrary threshold for excessive consecutive '11' patterns
        cerr << "Warning: Performance bottleneck condition triggered due to consecutive '11's!" << endl;
        abort();
    }
}

int main() {
    string a, b;
    cin >> a >> b;

    // Place checks after input is read and before processing
    check_padding_invariant(a, b);
    check_consecutive_ones_invariant(a);
    check_consecutive_ones_invariant(b);

    while (b.length() < a.length()) b = '0' + b;
    while (a.length() < b.length()) a = '0' + a;
    a = '0' + a;
    b = '0' + b;
    for (int i = 1; i < a.length(); i++) {
        if (a[i] == '1' && a[i + 1] == '1') {
            a[i - 1] = '1';
            a[i] = '0';
            a[i + 1] = '0';
        }
    }
    for (int i = a.length() - 1; i >= 0; i--) {
        if (a[i] == '1' && a[i + 1] == '1') {
            a[i - 1] = '1';
            a[i] = '0';
            a[i + 1] = '0';
        }
    }
    for (int i = 1; i < b.length(); i++) {
        if (b[i] == '1' && b[i + 1] == '1') {
            b[i - 1] = '1';
            b[i] = '0';
            b[i + 1] = '0';
        }
    }
    for (int i = b.length() - 1; i >= 0; i--) {
        if (b[i] == '1' && b[i + 1] == '1') {
            b[i - 1] = '1';
            b[i] = '0';
            b[i + 1] = '0';
        }
    }
    for (int i = 0; i < a.length(); i++) {
        if (a[i] != b[i]) {
            if (a[i] == '1')
                cout << ">\n";
            else
                cout << "<\n";
            return 0;
        }
    }
    cout << "=\n";
    return 0;
}
```

### Explanation of Instrumentation
- **Padding Check:** Added a check right after reading inputs to ensure that if one string requires a significant amount of zero-padding to match the other, it triggers a warning. This is placed early before any heavy processing.
- **Consecutive '11' Check:** Added checks after input is read to count consecutive '11' pairs, which might necessitate extensive transformations. This is also done before the main processing loops to avoid performance impacts in the loops themselves.
