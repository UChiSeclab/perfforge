system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Piegirl got bored with binary, decimal and other integer based counting systems. Recently she discovered some interesting properties about number <image>, in particular that q2 = q + 1, and she thinks it would make a good base for her new unique system. She called it "golden system". In golden system the number is a non-empty string containing 0's and 1's as digits. The decimal value of expression a0a1...an equals to <image>.

Soon Piegirl found out that this system doesn't have same properties that integer base systems do and some operations can not be performed on it. She wasn't able to come up with a fast way of comparing two numbers. She is asking for your help.

Given two numbers written in golden system notation, determine which of them has larger decimal value.

Input

Input consists of two lines — one for each number. Each line contains non-empty string consisting of '0' and '1' characters. The length of each string does not exceed 100000.

Output

Print ">" if the first number is larger, "<" if it is smaller and "=" if they are equal.

Examples

Input

1000
111


Output

&lt;


Input

00100
11


Output

=


Input

110
101


Output

&gt;

Note

In the first example first number equals to <image>, while second number is approximately 1.6180339882 + 1.618033988 + 1 ≈ 5.236, which is clearly a bigger number.

In the second example numbers are equal. Each of them is  ≈ 2.618.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 130000;
const unsigned long long MAX = 5 * 1e9 + 4;
unsigned long long a[100005], b[100005];
int len1, len2, len;
int main() {
  string s1, s2;
  cin >> s1 >> s2;
  len1 = s1.length();
  len2 = s2.length();
  if (len1 < len2)
    for (int i = len1; i < len2; i++) s1 = "0" + s1;
  else if (len1 > len2)
    for (int i = len2; i < len1; i++) s2 = "0" + s2;
  len = max(len1, len2);
  for (int i = 0; i < len; i++) {
    if (s1[i] == '1') a[i]++;
    if (s2[i] == '1') b[i]++;
    if (a[i] > b[i]) {
      a[i + 1] += (a[i] - b[i]);
      a[i + 2] += a[i] - b[i];
    } else {
      b[i + 1] += (b[i] - a[i]);
      b[i + 2] += (b[i] - a[i]);
    }
  }
  long double t1 = a[len + 1] + a[len] * ((sqrt(5) + 1) / 2);
  long double t2 = b[len + 1] + b[len] * ((sqrt(5) + 1) / 2);
  if (fabs(t1 - t2) < 1e-15)
    cout << "=" << endl;
  else if (t1 > t2)
    cout << ">" << endl;
  else if (t1 < t2)
    cout << "<" << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

101001010101010101010100101010101010101010101001010101010100101010101010100101101010100101010100101010101001010101010101010100101010101010101010101001010101010100101010101010100101101010100101010100101010101001010101010101010100101010101010101010101001010101010100101010101010100101101010100101010100101010
1


(G.2) Fast Input

1
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 130000; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const unsigned long long MAX = 5 * 1e9 + 4; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
unsigned long long a[100005], b[100005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int len1, len2, len; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  string s1, s2; /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> s1 >> s2; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  len1 = s1.length(); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  len2 = s2.length(); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  if (len1 < len2) /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = len1; i < len2; i++) s1 = "0" + s1; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  else if (len1 > len2) /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = len2; i < len1; i++) s2 = "0" + s2; /* line 15 slow_hit_count: 306, fast_hit_count: 0 */
  len = max(len1, len2); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < len; i++) { /* line 17 slow_hit_count: 307, fast_hit_count: 2 */
    if (s1[i] == '1') a[i]++; /* line 18 slow_hit_count: 306, fast_hit_count: 1 */
    if (s2[i] == '1') b[i]++; /* line 19 slow_hit_count: 306, fast_hit_count: 1 */
    if (a[i] > b[i]) { /* line 20 slow_hit_count: 306, fast_hit_count: 1 */
      a[i + 1] += (a[i] - b[i]); /* line 21 slow_hit_count: 306, fast_hit_count: 0 */
      a[i + 2] += a[i] - b[i]; /* line 22 slow_hit_count: 306, fast_hit_count: 0 */
    } else { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      b[i + 1] += (b[i] - a[i]); /* line 24 slow_hit_count: 0, fast_hit_count: 1 */
      b[i + 2] += (b[i] - a[i]); /* line 25 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  long double t1 = a[len + 1] + a[len] * ((sqrt(5) + 1) / 2); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  long double t2 = b[len + 1] + b[len] * ((sqrt(5) + 1) / 2); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  if (fabs(t1 - t2) < 1e-15) /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "=" << endl; /* line 31 slow_hit_count: 0, fast_hit_count: 1 */
  else if (t1 > t2) /* line 32 slow_hit_count: 1, fast_hit_count: 0 */
    cout << ">" << endl; /* line 33 slow_hit_count: 1, fast_hit_count: 0 */
  else if (t1 < t2) /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "<" << endl; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 36 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance issues between the fast and slow inputs in your C program, we'll analyze the given code and hit counts for the slow and fast input runs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Counts Comparison:**
   - **Padding Logic (Lines 13-15):** The line `for (int i = len2; i < len1; i++) s2 = "0" + s2;` is executed 306 times for the slow input, while it’s not executed for the fast input. This indicates that string padding is significantly contributing to the slowdown.
   - **Main Processing Loop (Lines 17-27):** The loop `for (int i = 0; i < len; i++)` is executed 307 times for the slow input compared to just 2 times for the fast input. This loop contains complex operations that seem to be the core processing logic.
   - **Condition Checking and Array Manipulation (Lines 21-22):** These lines contain operations that are executed 306 times, which implies that the logic inside this loop is heavily utilized and potentially expensive for the slow input.

2. **Inference on Interaction with Data Structures:**
   - The primary operation involves iterating over the padded binary representations of the inputs, where the differences in these representations are processed to accumulate results in arrays `a` and `b`.
   - The manipulation of arrays `a` and `b` suggests a dependency on the magnitude and distribution of the binary digits ('1's and '0's), which leads to repeated additions across the arrays.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Statements:**

   - **Invariant 1:** "When the lengths of the two binary strings differ significantly, the program spends time padding the shorter string, which can lead to inefficiencies, especially when the strings are large."
   
   - **Invariant 2:** "If the binary representation has a large number of '1's dispersed throughout, especially towards the beginning, it leads to many iterations in the core processing loop. This results in a significant number of operations updating array elements, contributing to slow performance."

   - **Invariant 3:** "The computational overhead is exacerbated when there are multiple cascading carry operations in the array manipulations, driven by the difference between the number of '1's in corresponding positions of the two binary strings."

By understanding these conditions, you can anticipate and possibly mitigate slow performance scenarios in similar contexts. These invariants help highlight the importance of input characteristics beyond mere size, focusing instead on structural patterns and their influence on algorithmic behavior.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Piegirl got bored with binary, decimal and other integer based counting systems. Recently she discovered some interesting properties about number <image>, in particular that q2 = q + 1, and she thinks it would make a good base for her new unique system. She called it "golden system". In golden system the number is a non-empty string containing 0's and 1's as digits. The decimal value of expression a0a1...an equals to <image>.

Soon Piegirl found out that this system doesn't have same properties that integer base systems do and some operations can not be performed on it. She wasn't able to come up with a fast way of comparing two numbers. She is asking for your help.

Given two numbers written in golden system notation, determine which of them has larger decimal value.

Input

Input consists of two lines — one for each number. Each line contains non-empty string consisting of '0' and '1' characters. The length of each string does not exceed 100000.

Output

Print ">" if the first number is larger, "<" if it is smaller and "=" if they are equal.

Examples

Input

1000
111


Output

&lt;


Input

00100
11


Output

=


Input

110
101


Output

&gt;

Note

In the first example first number equals to <image>, while second number is approximately 1.6180339882 + 1.618033988 + 1 ≈ 5.236, which is clearly a bigger number.

In the second example numbers are equal. Each of them is  ≈ 2.618.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, we can implement the following checker code snippets:

1. **Invariant 1:** Detects significant length difference between two strings.
   ```cpp
   void check_length_difference(int len1, int len2) {
       if (abs(len1 - len2) > 10000) {  // Example threshold, adjust as necessary
           cerr << "Warning: Performance bottleneck - significant length difference in strings." << endl;
           abort();
       }
   }
   ```

2. **Invariant 2:** Checks for a large number of '1's in the input string.
   ```cpp
   void check_one_density(const string& s) {
       int one_count = count(s.begin(), s.end(), '1');
       if (one_count > s.length() * 0.8) {  // Threshold: more than 80% '1's
           cerr << "Warning: Performance bottleneck - high density of '1's in the string." << endl;
           abort();
       }
   }
   ```

3. **Invariant 3:** Detects potential cascading operations due to '1's distribution.
   ```cpp
   void check_cascading_operations(const string& s) {
       // Example condition: too many '1's clustered in the first half
       int half_length = s.length() / 2;
       int cluster_count = count(s.begin(), s.begin() + half_length, '1');
       if (cluster_count > half_length * 0.7) {  // More than 70% in the first half
           cerr << "Warning: Performance bottleneck - potential cascading operations due to clustered '1's." << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Here is the instrumented C++ code with the performance checkers integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 130000;
const unsigned long long MAX = 5 * 1e9 + 4;
unsigned long long a[100005], b[100005];
int len1, len2, len;

// Checker functions based on performance-characterizing invariants
void check_length_difference(int len1, int len2) {
    if (abs(len1 - len2) > 10000) {
        cerr << "Warning: Performance bottleneck - significant length difference in strings." << endl;
        abort();
    }
}

void check_one_density(const string& s) {
    int one_count = count(s.begin(), s.end(), '1');
    if (one_count > s.length() * 0.8) {
        cerr << "Warning: Performance bottleneck - high density of '1's in the string." << endl;
        abort();
    }
}

void check_cascading_operations(const string& s) {
    int half_length = s.length() / 2;
    int cluster_count = count(s.begin(), s.begin() + half_length, '1');
    if (cluster_count > half_length * 0.7) {
        cerr << "Warning: Performance bottleneck - potential cascading operations due to clustered '1's." << endl;
        abort();
    }
}

int main() {
    string s1, s2;
    cin >> s1 >> s2;

    len1 = s1.length();
    len2 = s2.length();

    // Performance checks
    check_length_difference(len1, len2);
    check_one_density(s1);
    check_one_density(s2);
    check_cascading_operations(s1);
    check_cascading_operations(s2);

    if (len1 < len2)
        for (int i = len1; i < len2; i++) s1 = "0" + s1;
    else if (len1 > len2)
        for (int i = len2; i < len1; i++) s2 = "0" + s2;

    len = max(len1, len2);
    for (int i = 0; i < len; i++) {
        if (s1[i] == '1') a[i]++;
        if (s2[i] == '1') b[i]++;
        if (a[i] > b[i]) {
            a[i + 1] += (a[i] - b[i]);
            a[i + 2] += a[i] - b[i];
        } else {
            b[i + 1] += (b[i] - a[i]);
            b[i + 2] += (b[i] - a[i]);
        }
    }

    long double t1 = a[len + 1] + a[len] * ((sqrt(5) + 1) / 2);
    long double t2 = b[len + 1] + b[len] * ((sqrt(5) + 1) / 2);

    if (fabs(t1 - t2) < 1e-15)
        cout << "=" << endl;
    else if (t1 > t2)
        cout << ">" << endl;
    else if (t1 < t2)
        cout << "<" << endl;
}
```

### Explanation:
- **Checker Functions:** Introduced above the `main()` function to ensure they're ready for use. Each checker function aborts execution if a bottleneck condition is met.
- **Placement of Checks:** The checks related to input characteristics are placed right after the input reading. This avoids placing them in tight loops and ensures they're evaluated before any complex processing begins.

