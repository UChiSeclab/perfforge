system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Piegirl got bored with binary, decimal and other integer based counting systems. Recently she discovered some interesting properties about number <image>, in particular that q2 = q + 1, and she thinks it would make a good base for her new unique system. She called it "golden system". In golden system the number is a non-empty string containing 0's and 1's as digits. The decimal value of expression a0a1...an equals to <image>.

Soon Piegirl found out that this system doesn't have same properties that integer base systems do and some operations can not be performed on it. She wasn't able to come up with a fast way of comparing two numbers. She is asking for your help.

Given two numbers written in golden system notation, determine which of them has larger decimal value.

Input

Input consists of two lines — one for each number. Each line contains non-empty string consisting of '0' and '1' characters. The length of each string does not exceed 100000.

Output

Print ">" if the first number is larger, "<" if it is smaller and "=" if they are equal.

Examples

Input

1000
111


Output

&lt;


Input

00100
11


Output

=


Input

110
101


Output

&gt;

Note

In the first example first number equals to <image>, while second number is approximately 1.6180339882 + 1.618033988 + 1 ≈ 5.236, which is clearly a bigger number.

In the second example numbers are equal. Each of them is  ≈ 2.618.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
char a[300006];
char b[300005];
int sa[300006];
int sb[300005];
void conv(int* s, int n) {
  for (int i = n; i >= 0; i--) {
    if (s[i] >= 3) {
      s[i] -= 3;
      s[i + 2]++;
      if (i - 2 >= 0)
        s[i - 2]++;
      else if (i - 1 >= 0)
        s[i - 1]++;
      i += 4;
    } else if (s[i] == 2) {
      s[i] -= 2;
      s[i + 1]++;
      if (i - 2 >= 0)
        s[i - 2]++;
      else if (i - 1 >= 0)
        s[i - 1]++;
      i += 4;
    } else if (i > 0 && s[i] == 1 && s[i - 1] > 0) {
      s[i - 1]--;
      s[i]--;
      s[i + 1]++;
      i += 4;
    }
  }
}
int main() {
  scanf("%s", a);
  scanf("%s", b);
  int na = strlen(a);
  int nb = strlen(b);
  reverse(a, a + na);
  reverse(b, b + nb);
  for (int i = 2; i < na; i++) sa[i - 2] = a[i] - '0';
  if (a[1] == '1') sa[0]++;
  for (int i = 2; i < nb; i++) sb[i - 2] = b[i] - '0';
  if (b[1] == '1') sb[0]++;
  conv(sa, 300000);
  conv(sb, 300000);
  bool eq = 1;
  int la = 0, lb = 0;
  for (int i = 0; i < 300000; i++)
    if (sa[i] != sb[i]) {
      eq = 0;
      break;
    }
  for (int i = 300000; i >= 0; i--)
    if (sa[i] != sb[i]) {
      if (sa[i] > sb[i])
        la = 1;
      else
        lb = 1;
      break;
    }
  memset(sa, 0, sizeof(sa));
  memset(sb, 0, sizeof(sb));
  for (int i = 3; i < na; i++) sa[i - 3] = a[i] - '0';
  if (a[0] == '1') sa[0]++;
  if (a[2] == '1') sa[0]++;
  for (int i = 3; i < nb; i++) sb[i - 3] = b[i] - '0';
  if (b[0] == '1') sb[0]++;
  if (b[2] == '1') sb[0]++;
  conv(sa, 300000);
  conv(sb, 300000);
  for (int i = 0; i < 300000; i++) {
    if (sa[i] != sb[i]) {
      eq = 0;
      break;
    }
  }
  if (eq)
    printf("=\n");
  else {
    if (la > lb)
      printf(">\n");
    else if (la < lb)
      printf("<\n");
    else {
      for (int i = 300000; i >= 0; i--)
        if (sa[i] != sb[i]) {
          if (sa[i] > sb[i])
            la = 1;
          else
            lb = 1;
          break;
        }
      if (la > lb)
        printf(">\n");
      else if (la < lb)
        printf("<\n");
      else
        printf("=\n");
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
1


(G.2) Fast Input

1
10


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
char a[300006]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
char b[300005]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int sa[300006]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int sb[300005]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void conv(int* s, int n) { /* line 7 slow_hit_count: 4, fast_hit_count: 4 */
  for (int i = n; i >= 0; i--) { /* line 8 slow_hit_count: 1200008, fast_hit_count: 1200008 */
    if (s[i] >= 3) { /* line 9 slow_hit_count: 1200004, fast_hit_count: 1200004 */
      s[i] -= 3; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
      s[i + 2]++; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
      if (i - 2 >= 0) /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
        s[i - 2]++; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
      else if (i - 1 >= 0) /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
        s[i - 1]++; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
      i += 4; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    } else if (s[i] == 2) { /* line 17 slow_hit_count: 1200004, fast_hit_count: 1200004 */
      s[i] -= 2; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      s[i + 1]++; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
      if (i - 2 >= 0) /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
        s[i - 2]++; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      else if (i - 1 >= 0) /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
        s[i - 1]++; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      i += 4; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    } else if (i > 0 && s[i] == 1 && s[i - 1] > 0) { /* line 25 slow_hit_count: 1200004, fast_hit_count: 1200004 */
      s[i - 1]--; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      s[i]--; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      s[i + 1]++; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      i += 4; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 32 slow_hit_count: 4, fast_hit_count: 4 */
int main() { /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%s", a); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%s", b); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  int na = strlen(a); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  int nb = strlen(b); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  reverse(a, a + na); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  reverse(b, b + nb); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i < na; i++) sa[i - 2] = a[i] - '0'; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  if (a[1] == '1') sa[0]++; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i < nb; i++) sb[i - 2] = b[i] - '0'; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  if (b[1] == '1') sb[0]++; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  conv(sa, 300000); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  conv(sb, 300000); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  bool eq = 1; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  int la = 0, lb = 0; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 300000; i++) /* line 48 slow_hit_count: 300001, fast_hit_count: 1 */
    if (sa[i] != sb[i]) { /* line 49 slow_hit_count: 300000, fast_hit_count: 1 */
      eq = 0; /* line 50 slow_hit_count: 0, fast_hit_count: 1 */
      break; /* line 51 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 300000; i >= 0; i--) /* line 53 slow_hit_count: 300002, fast_hit_count: 300001 */
    if (sa[i] != sb[i]) { /* line 54 slow_hit_count: 300001, fast_hit_count: 300001 */
      if (sa[i] > sb[i]) /* line 55 slow_hit_count: 0, fast_hit_count: 1 */
        la = 1; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
        lb = 1; /* line 58 slow_hit_count: 0, fast_hit_count: 1 */
      break; /* line 59 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  memset(sa, 0, sizeof(sa)); /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  memset(sb, 0, sizeof(sb)); /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 3; i < na; i++) sa[i - 3] = a[i] - '0'; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  if (a[0] == '1') sa[0]++; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  if (a[2] == '1') sa[0]++; /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 3; i < nb; i++) sb[i - 3] = b[i] - '0'; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  if (b[0] == '1') sb[0]++; /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  if (b[2] == '1') sb[0]++; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  conv(sa, 300000); /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  conv(sb, 300000); /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 300000; i++) { /* line 71 slow_hit_count: 300001, fast_hit_count: 1 */
    if (sa[i] != sb[i]) { /* line 72 slow_hit_count: 300000, fast_hit_count: 1 */
      eq = 0; /* line 73 slow_hit_count: 0, fast_hit_count: 1 */
      break; /* line 74 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  if (eq) /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
    printf("=\n"); /* line 78 slow_hit_count: 1, fast_hit_count: 0 */
  else { /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
    if (la > lb) /* line 80 slow_hit_count: 0, fast_hit_count: 1 */
      printf(">\n"); /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
    else if (la < lb) /* line 82 slow_hit_count: 0, fast_hit_count: 1 */
      printf("<\n"); /* line 83 slow_hit_count: 0, fast_hit_count: 1 */
    else { /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
      for (int i = 300000; i >= 0; i--) /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
        if (sa[i] != sb[i]) { /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
          if (sa[i] > sb[i]) /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
            la = 1; /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
          else /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
            lb = 1; /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
          break; /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
      if (la > lb) /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
        printf(">\n"); /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
      else if (la < lb) /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
        printf("<\n"); /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
        printf("=\n"); /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 102 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks and derive performance-characterizing invariants for the provided C program, we proceed in two phases:

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis**:
   - **Lines 48-49 and 71-72**: These lines show significantly higher hit counts in the slow input compared to the fast input. The loop iterates over a large fixed size (300,000 elements) and checks if values in arrays `sa` and `sb` differ.
   - **Line 53-54**: Similar high activity with the same loop structure, indicating that comparisons over the entire array size contribute to the slowdown.

2. **Inference**:
   - The slowdown is caused by repeatedly iterating over large arrays (`sa` and `sb`) of fixed size (300,000), regardless of the actual length of the input strings. This inefficiency stems from processing a much larger space than necessary for input strings of length significantly less than 300,000 characters.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the analysis, here are the natural language statements describing conditions under which the program likely enters a slow path:

1. **Invariant Related to Array Size**:
   - **Description**: "The program may slow down if input strings are significantly shorter than the array size it processes, leading to unnecessary iterations over large uninitialized sections of arrays."
   - **Threshold**: This is particularly apparent when input strings are much shorter than the array size of 300,000 elements.

2. **Invariant Related to Repeated Comparisons**:
   - **Description**: "Performance degrades if the program repeatedly compares large fixed-size arrays with many zero entries, especially when input strings are negligible in length compared to the array size."
   - **Threshold**: Situations where input string lengths are much smaller than the array's predefined length, causing excessive redundant checks.

3. **Recursion and Array Expansion**:
   - **Description**: "The logic in `conv` function may cause excessive iterations if it attempts to adjust values in arrays for indices beyond the necessary range dictated by the input strings."
   - **Threshold**: The condition arises if the recursion or iterative behavior expands unnecessarily due to the preallocated large array size compared to the actual data size.

In summary, the primary inefficiency is due to processing and comparing arrays of a much larger size than the actual input strings require. This results in a large number of unnecessary operations, which causes the slow execution for inputs that do not fully utilize the array length.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Piegirl got bored with binary, decimal and other integer based counting systems. Recently she discovered some interesting properties about number <image>, in particular that q2 = q + 1, and she thinks it would make a good base for her new unique system. She called it "golden system". In golden system the number is a non-empty string containing 0's and 1's as digits. The decimal value of expression a0a1...an equals to <image>.

Soon Piegirl found out that this system doesn't have same properties that integer base systems do and some operations can not be performed on it. She wasn't able to come up with a fast way of comparing two numbers. She is asking for your help.

Given two numbers written in golden system notation, determine which of them has larger decimal value.

Input

Input consists of two lines — one for each number. Each line contains non-empty string consisting of '0' and '1' characters. The length of each string does not exceed 100000.

Output

Print ">" if the first number is larger, "<" if it is smaller and "=" if they are equal.

Examples

Input

1000
111


Output

&lt;


Input

00100
11


Output

=


Input

110
101


Output

&gt;

Note

In the first example first number equals to <image>, while second number is approximately 1.6180339882 + 1.618033988 + 1 ≈ 5.236, which is clearly a bigger number.

In the second example numbers are equal. Each of them is  ≈ 2.618.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Below are the C++ code snippets that implement the performance-characterizing invariants derived previously from the natural language descriptions:

1. **Invariant Related to Array Size**:
   ```cpp
   void check_array_size_invariant(int inputLength) {
       if (inputLength < 1000) { // Arbitrary threshold based on actual input size
           cerr << "Warning: Performance bottleneck condition triggered - input too small for large array size." << endl;
           abort();
       }
   }
   ```

2. **Invariant Related to Repeated Comparisons**:
   ```cpp
   void check_repeated_comparisons_invariant(int stringLength, int arraySize) {
       if (stringLength < (arraySize / 100)) { // Assuming a threshold where string length is much smaller than the array
           cerr << "Warning: Performance bottleneck condition triggered - repeated comparisons with large arrays." << endl;
           abort();
       }
   }
   ```

3. **Recursion and Array Expansion**:
   ```cpp
   void check_conv_function_invariant(int maxProcessedIndex, int stringLength) {
       if (maxProcessedIndex - stringLength > 500) { // Arbitrary threshold for unnecessary processing
           cerr << "Warning: Performance bottleneck condition triggered - unnecessary array expansions in conv function." << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the C++ Program

Here is the final, instrumented C++ code with the performance checkers integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

char a[300006];
char b[300005];
int sa[300006];
int sb[300005];

void conv(int* s, int n) {
   for (int i = n; i >= 0; i--) {
      if (s[i] >= 3) {
         s[i] -= 3;
         s[i + 2]++;
         if (i - 2 >= 0)
            s[i - 2]++;
         else if (i - 1 >= 0)
            s[i - 1]++;
         i += 4;
      } else if (s[i] == 2) {
         s[i] -= 2;
         s[i + 1]++;
         if (i - 2 >= 0)
            s[i - 2]++;
         else if (i - 1 >= 0)
            s[i - 1]++;
         i += 4;
      } else if (i > 0 && s[i] == 1 && s[i - 1] > 0) {
         s[i - 1]--;
         s[i]--;
         s[i + 1]++;
         i += 4;
      }
   }
}

// Checker functions
void check_array_size_invariant(int inputLength) {
    if (inputLength < 1000) { // Arbitrary threshold
        cerr << "Warning: Performance bottleneck condition triggered - input too small for large array size." << endl;
        abort();
    }
}

void check_repeated_comparisons_invariant(int stringLength, int arraySize) {
    if (stringLength < (arraySize / 100)) { // Assuming a significant disparity
        cerr << "Warning: Performance bottleneck condition triggered - repeated comparisons with large arrays." << endl;
        abort();
    }
}

void check_conv_function_invariant(int maxProcessedIndex, int stringLength) {
    if (maxProcessedIndex - stringLength > 500) { // Arbitrary threshold
        cerr << "Warning: Performance bottleneck condition triggered - unnecessary array expansions in conv function." << endl;
        abort();
    }
}

int main() {
   scanf("%s", a);
   scanf("%s", b);
   int na = strlen(a);
   int nb = strlen(b);
   
   // Check array size invariant
   check_array_size_invariant(na);
   check_array_size_invariant(nb);

   reverse(a, a + na);
   reverse(b, b + nb);
   for (int i = 2; i < na; i++) sa[i - 2] = a[i] - '0';
   if (a[1] == '1') sa[0]++;
   for (int i = 2; i < nb; i++) sb[i - 2] = b[i] - '0';
   if (b[1] == '1') sb[0]++;
   
   conv(sa, 300000);
   conv(sb, 300000);
   
   // Check repeated comparisons invariant
   check_repeated_comparisons_invariant(na, 300000);
   check_repeated_comparisons_invariant(nb, 300000);

   bool eq = 1;
   int la = 0, lb = 0;
   for (int i = 0; i < 300000; i++)
      if (sa[i] != sb[i]) {
         eq = 0;
         break;
      }

   for (int i = 300000; i >= 0; i--)
      if (sa[i] != sb[i]) {
         if (sa[i] > sb[i])
            la = 1;
         else
            lb = 1;
         break;
      }

   memset(sa, 0, sizeof(sa));
   memset(sb, 0, sizeof(sb));

   // Include checks before processing further
   check_conv_function_invariant(300000, na);
   check_conv_function_invariant(300000, nb);

   for (int i = 3; i < na; i++) sa[i - 3] = a[i] - '0';
   if (a[0] == '1') sa[0]++;
   if (a[2] == '1') sa[0]++;
   for (int i = 3; i < nb; i++) sb[i - 3] = b[i] - '0';
   if (b[0] == '1') sb[0]++;
   if (b[2] == '1') sb[0]++;
   
   conv(sa, 300000);
   conv(sb, 300000);

   for (int i = 0; i < 300000; i++) {
      if (sa[i] != sb[i]) {
         eq = 0;
         break;
      }
   }
   if (eq)
      printf("=\n");
   else {
      if (la > lb)
         printf(">\n");
      else if (la < lb)
         printf("<\n");
      else {
         for (int i = 300000; i >= 0; i--)
            if (sa[i] != sb[i]) {
               if (sa[i] > sb[i])
                  la = 1;
               else
                  lb = 1;
               break;
            }
         if (la > lb)
            printf(">\n");
         else if (la < lb)
            printf("<\n");
         else
            printf("=\n");
      }
   }
   return 0;
}
```

### Explanation

- **Array Size Invariant**: Checks are placed right after input string lengths are determined, ensuring that the disparity between array processing and actual use is highlighted.
- **Repeated Comparisons Invariant**: These checks are integrated post-conversion to ensure we're not unnecessarily comparing extensive sections of initialized arrays.
- **Recursion and Array Expansion**: Placed before further array manipulation, ensuring no unnecessary further expansion.

These checkers will warn if performance bottlenecks appear due to inappropriate array processing related to input size.

