system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Piegirl got bored with binary, decimal and other integer based counting systems. Recently she discovered some interesting properties about number <image>, in particular that q2 = q + 1, and she thinks it would make a good base for her new unique system. She called it "golden system". In golden system the number is a non-empty string containing 0's and 1's as digits. The decimal value of expression a0a1...an equals to <image>.

Soon Piegirl found out that this system doesn't have same properties that integer base systems do and some operations can not be performed on it. She wasn't able to come up with a fast way of comparing two numbers. She is asking for your help.

Given two numbers written in golden system notation, determine which of them has larger decimal value.

Input

Input consists of two lines — one for each number. Each line contains non-empty string consisting of '0' and '1' characters. The length of each string does not exceed 100000.

Output

Print ">" if the first number is larger, "<" if it is smaller and "=" if they are equal.

Examples

Input

1000
111


Output

&lt;


Input

00100
11


Output

=


Input

110
101


Output

&gt;

Note

In the first example first number equals to <image>, while second number is approximately 1.6180339882 + 1.618033988 + 1 ≈ 5.236, which is clearly a bigger number.

In the second example numbers are equal. Each of them is  ≈ 2.618.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
char nr1[100010], nr2[100010];
void replace(string &st) {
  st.pop_back();
  if (st.size() > 1) st.pop_back();
  if (st.size() > 0 && st[st.size() - 1] == '1')
    replace(st);
  else
    st += '1';
  st += '0';
  st += '0';
}
void addZero(string &n1, string &n2) {
  if (n1.size() > n2.size()) {
    int it = (int)(n1.size() - n2.size());
    for (int i = 0; i < it; i++) n2 = "0" + n2;
  }
  if (n1.size() < n2.size()) {
    int it = (int)(n2.size() - n1.size());
    for (int i = 0; i < it; i++) n1 = "0" + n1;
  }
}
void compare() {
  int len = strlen(nr1) - 1;
  string n1, n2;
  n1 = nr1[0];
  n2 = nr2[0];
  for (int i = 1; i < len; i++) {
    if (n1[n1.size() - 1] == nr1[i] && nr1[i] == '1') {
      replace(n1);
    } else
      n1 += nr1[i];
  }
  len = strlen(nr2) - 1;
  for (int i = 1; i < len; i++) {
    if (n2[n2.size() - 1] == nr2[i] && nr2[i] == '1') {
      replace(n2);
    } else
      n2 += nr2[i];
  }
  addZero(n1, n2);
  if (n1.size() == n2.size()) {
    int rez = n1.compare(n2);
    if (rez == 0)
      printf("=\n");
    else if (rez < 0)
      printf("<\n");
    else
      printf(">\n");
  } else
    printf("not equal\n");
}
int main() {
  fgets(nr1, 100010, stdin);
  fgets(nr2, 100010, stdin);
  compare();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

101001010101010101010100101010101010101010101001010101010100101010101010100101101010100101010100101010101001010101010101010100101010101010101010101001010101010100101010101010100101101010100101010100101010101001010101010101010100101010101010101010101001010101010100101010101010100101101010100101010100101010
1


(G.2) Fast Input

1
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
char nr1[100010], nr2[100010]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void replace(string &st) { /* line 4 slow_hit_count: 6, fast_hit_count: 0 */
  st.pop_back(); /* line 5 slow_hit_count: 6, fast_hit_count: 0 */
  if (st.size() > 1) st.pop_back(); /* line 6 slow_hit_count: 6, fast_hit_count: 0 */
  if (st.size() > 0 && st[st.size() - 1] == '1') /* line 7 slow_hit_count: 6, fast_hit_count: 0 */
    replace(st); /* line 8 slow_hit_count: 3, fast_hit_count: 0 */
  else /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    st += '1'; /* line 10 slow_hit_count: 3, fast_hit_count: 0 */
  st += '0'; /* line 11 slow_hit_count: 6, fast_hit_count: 0 */
  st += '0'; /* line 12 slow_hit_count: 6, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 6, fast_hit_count: 0 */
void addZero(string &n1, string &n2) { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  if (n1.size() > n2.size()) { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    int it = (int)(n1.size() - n2.size()); /* line 16 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 0; i < it; i++) n2 = "0" + n2; /* line 17 slow_hit_count: 306, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  if (n1.size() < n2.size()) { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    int it = (int)(n2.size() - n1.size()); /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < it; i++) n1 = "0" + n1; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
void compare() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int len = strlen(nr1) - 1; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  string n1, n2; /* line 26 slow_hit_count: 2, fast_hit_count: 2 */
  n1 = nr1[0]; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  n2 = nr2[0]; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < len; i++) { /* line 29 slow_hit_count: 306, fast_hit_count: 1 */
    if (n1[n1.size() - 1] == nr1[i] && nr1[i] == '1') { /* line 30 slow_hit_count: 305, fast_hit_count: 0 */
      replace(n1); /* line 31 slow_hit_count: 3, fast_hit_count: 0 */
    } else /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      n1 += nr1[i]; /* line 33 slow_hit_count: 302, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  len = strlen(nr2) - 1; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < len; i++) { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
    if (n2[n2.size() - 1] == nr2[i] && nr2[i] == '1') { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      replace(n2); /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    } else /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      n2 += nr2[i]; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  addZero(n1, n2); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  if (n1.size() == n2.size()) { /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
    int rez = n1.compare(n2); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
    if (rez == 0) /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
      printf("=\n"); /* line 46 slow_hit_count: 0, fast_hit_count: 1 */
    else if (rez < 0) /* line 47 slow_hit_count: 1, fast_hit_count: 0 */
      printf("<\n"); /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      printf(">\n"); /* line 50 slow_hit_count: 1, fast_hit_count: 0 */
  } else /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    printf("not equal\n"); /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  fgets(nr1, 100010, stdin); /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  fgets(nr2, 100010, stdin); /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  compare(); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 59 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C code, we need to focus on the lines with significantly higher hit counts when processing the slow input compared to the fast input. Here, the `replace` function and parts of the `compare` function show considerable activity with the slow input.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Function `replace(string &st)`**:
   - This function is recursive and modifies the input string by popping back elements and appending new ones. It is hit multiple times for the slow input due to recursive calls. The recursion depth and number of operations can increase significantly with certain input patterns, especially if sequences of '1's are encountered repeatedly, leading to further calls to `replace`.

2. **Line 29 `for (int i = 1; i < len; i++)`:**
   - The outer loop that iterates over the characters in the strings `nr1` and `nr2` is hit numerous times for the slow input. The loop contains a conditional call to `replace` that can recursively process large portions of the string, which is a key factor contributing to the slowdown.

3. **Line 17 `for (int i = 0; i < it; i++) n2 = "0" + n2;`:**
   - The loop in `addZero` adds leading zeros to make the strings `n1` and `n2` of equal length. This operation is costly when `it` is large, as seen in the hit count for the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, here are potential performance-characterizing invariants in natural language:

1. **Recursive Operations Due to Consecutive '1's:**
   - **Invariant:** "If the input string contains long sequences of consecutive '1's, the recursive `replace` function will be invoked repeatedly, potentially causing significant slowdown."
   - **Explanation:** The recursive nature of the `replace` function means that long runs of '1's can cause the function to be called multiple times recursively, increasing the processing time exponentially with the length of the sequence.

2. **Large Number of Leading Zeros:**
   - **Invariant:** "When adjusting the strings for comparison, if there is a large difference in their lengths, the addition of leading zeros can become a bottleneck, slowing down the computation."
   - **Explanation:** The `addZero` function can add many zeros to balance string lengths. This is particularly evident when one string is substantially longer than the other, leading to performance degradation.

3. **Nested and Repeated String Modifications:**
   - **Invariant:** "Frequent modifications of string size in nested loops can lead to inefficiencies. If operations include repeated resizing or concatenating within a loop, this can significantly impact performance."
   - **Explanation:** The loop in the `compare` function, combined with string operations, can cause performance issues if the string is modified frequently in a way that triggers additional memory allocations or complex modifications.

By monitoring for these conditions, a fuzzer or test system could detect instances where these inefficiencies are likely to cause slow performance, helping to identify potential optimization opportunities.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Piegirl got bored with binary, decimal and other integer based counting systems. Recently she discovered some interesting properties about number <image>, in particular that q2 = q + 1, and she thinks it would make a good base for her new unique system. She called it "golden system". In golden system the number is a non-empty string containing 0's and 1's as digits. The decimal value of expression a0a1...an equals to <image>.

Soon Piegirl found out that this system doesn't have same properties that integer base systems do and some operations can not be performed on it. She wasn't able to come up with a fast way of comparing two numbers. She is asking for your help.

Given two numbers written in golden system notation, determine which of them has larger decimal value.

Input

Input consists of two lines — one for each number. Each line contains non-empty string consisting of '0' and '1' characters. The length of each string does not exceed 100000.

Output

Print ">" if the first number is larger, "<" if it is smaller and "=" if they are equal.

Examples

Input

1000
111


Output

&lt;


Input

00100
11


Output

=


Input

110
101


Output

&gt;

Note

In the first example first number equals to <image>, while second number is approximately 1.6180339882 + 1.618033988 + 1 ≈ 5.236, which is clearly a bigger number.

In the second example numbers are equal. Each of them is  ≈ 2.618.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants in C++

Let's convert the previously inferred performance-characterizing invariants into C++ checker code.

1. **Recursive Operations Due to Consecutive '1's:**
   ```cpp
   void check_recursive_calls(size_t depth) {
       if (depth > 50) { // Arbitrary threshold for recursion depth
           cerr << "Warning: Performance bottleneck condition triggered! - Excessive recursive calls in replace()" << endl;
           abort();
       }
   }
   ```

2. **Large Number of Leading Zeros:**
   ```cpp
   void check_leading_zeros(size_t zeroCount) {
       if (zeroCount > 10000) { // Arbitrary threshold for leading zeros addition
           cerr << "Warning: Performance bottleneck condition triggered! - Excessive leading zeros being added" << endl;
           abort();
       }
   }
   ```

3. **Nested and Repeated String Modifications:**
   ```cpp
   void check_string_modifications(size_t modifications) {
       if (modifications > 100000) { // Arbitrary threshold for modifications
           cerr << "Warning: Performance bottleneck condition triggered! - Too many string modifications" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code with Original Program

Now, let's integrate these checks into the existing C++ program to detect when these performance bottlenecks are triggered.

```cpp
#include <bits/stdc++.h>
using namespace std;

char nr1[100010], nr2[100010];
int recursiveDepth = 0; // To track recursion depth
size_t zeroAdditions = 0; // To track adding leading zeros
size_t stringModifications = 0; // To track string modifications

void check_recursive_calls(size_t depth) {
    if (depth > 50) {
        cerr << "Warning: Performance bottleneck condition triggered! - Excessive recursive calls in replace()" << endl;
        abort();
    }
}

void check_leading_zeros(size_t zeroCount) {
    if (zeroCount > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered! - Excessive leading zeros being added" << endl;
        abort();
    }
}

void check_string_modifications(size_t modifications) {
    if (modifications > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered! - Too many string modifications" << endl;
        abort();
    }
}

void replace(string &st) {
    recursiveDepth++;
    check_recursive_calls(recursiveDepth);
    
    st.pop_back();
    if (st.size() > 1) st.pop_back();
    if (st.size() > 0 && st[st.size() - 1] == '1')
        replace(st);
    else
        st += '1';
    st += '0';
    st += '0';
    
    recursiveDepth--;
}

void addZero(string &n1, string &n2) {
    if (n1.size() > n2.size()) {
        int it = (int)(n1.size() - n2.size());
        zeroAdditions += it;
        check_leading_zeros(zeroAdditions);
        
        for (int i = 0; i < it; i++) n2 = "0" + n2;
    }
    if (n1.size() < n2.size()) {
        int it = (int)(n2.size() - n1.size());
        zeroAdditions += it;
        check_leading_zeros(zeroAdditions);
        
        for (int i = 0; i < it; i++) n1 = "0" + n1;
    }
}

void compare() {
    int len = strlen(nr1) - 1;
    string n1, n2;
    n1 = nr1[0];
    n2 = nr2[0];
    for (int i = 1; i < len; i++) {
        if (n1[n1.size() - 1] == nr1[i] && nr1[i] == '1') {
            replace(n1);
        } else
            n1 += nr1[i];
        
        stringModifications++;
        check_string_modifications(stringModifications);
    }
    len = strlen(nr2) - 1;
    for (int i = 1; i < len; i++) {
        if (n2[n2.size() - 1] == nr2[i] && nr2[i] == '1') {
            replace(n2);
        } else
            n2 += nr2[i];
        
        stringModifications++;
        check_string_modifications(stringModifications);
    }
    addZero(n1, n2);
    if (n1.size() == n2.size()) {
        int rez = n1.compare(n2);
        if (rez == 0)
            printf("=\n");
        else if (rez < 0)
            printf("<\n");
        else
            printf(">\n");
    } else
        printf("not equal\n");
}

int main() {
    fgets(nr1, 100010, stdin);
    fgets(nr2, 100010, stdin);
    compare();
    return 0;
}
```

### Comments on Integration

- **Recursion Check:** We added a `recursiveDepth` counter to track recursive calls in `replace`, with a check to detect deep recursion.
- **Leading Zeros Check:** We track cumulative additions of leading zeros and check if they exceed a certain threshold.
- **String Modifications Check:** We count modifications to the strings within the loops and flag if they are excessive.

These checks help detect potential slow paths without adding significant overhead during normal execution.

