system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Piegirl got bored with binary, decimal and other integer based counting systems. Recently she discovered some interesting properties about number <image>, in particular that q2 = q + 1, and she thinks it would make a good base for her new unique system. She called it "golden system". In golden system the number is a non-empty string containing 0's and 1's as digits. The decimal value of expression a0a1...an equals to <image>.

Soon Piegirl found out that this system doesn't have same properties that integer base systems do and some operations can not be performed on it. She wasn't able to come up with a fast way of comparing two numbers. She is asking for your help.

Given two numbers written in golden system notation, determine which of them has larger decimal value.

Input

Input consists of two lines — one for each number. Each line contains non-empty string consisting of '0' and '1' characters. The length of each string does not exceed 100000.

Output

Print ">" if the first number is larger, "<" if it is smaller and "=" if they are equal.

Examples

Input

1000
111


Output

&lt;


Input

00100
11


Output

=


Input

110
101


Output

&gt;

Note

In the first example first number equals to <image>, while second number is approximately 1.6180339882 + 1.618033988 + 1 ≈ 5.236, which is clearly a bigger number.

In the second example numbers are equal. Each of them is  ≈ 2.618.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
char nr1[100010], nr2[100010];
void replace(string &st) {
  st.pop_back();
  if (st.size() > 1) st.pop_back();
  if (st.size() > 0 && st[st.size() - 1] == '1')
    replace(st);
  else
    st += '1';
  st += '0';
  st += '0';
}
void addZero(string &n1, string &n2) {
  if (n1.size() > n2.size()) {
    int it = (int)(n1.size() - n2.size());
    for (int i = 0; i < it; i++) n2 = "0" + n2;
  }
  if (n1.size() < n2.size()) {
    int it = (int)(n2.size() - n1.size());
    for (int i = 0; i < it; i++) n1 = "0" + n1;
  }
}
void compare() {
  int len = strlen(nr1) - 1;
  string n1, n2;
  n1 = nr1[0];
  n2 = nr2[0];
  for (int i = 1; i < len; i++) {
    if (n1[n1.size() - 1] == nr1[i] && nr1[i] == '1') {
      replace(n1);
    } else
      n1 += nr1[i];
  }
  len = strlen(nr2) - 1;
  for (int i = 1; i < len; i++) {
    if (n2[n2.size() - 1] == nr2[i] && nr2[i] == '1') {
      replace(n2);
    } else
      n2 += nr2[i];
  }
  addZero(n1, n2);
  int rez = n1.compare(n2);
  if (rez == 0)
    printf("=\n");
  else if (rez < 0)
    printf("<\n");
  else
    printf(">\n");
}
int main() {
  fgets(nr1, 100010, stdin);
  fgets(nr2, 100010, stdin);
  compare();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

101001010101010101010100101010101010101010101001010101010100101010101010100101101010100101010100101010101001010101010101010100101010101010101010101001010101010100101010101010100101101010100101010100101010101001010101010101010100101010101010101010101001010101010100101010101010100101101010100101010100101010
1


(G.2) Fast Input

1
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
char nr1[100010], nr2[100010]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void replace(string &st) { /* line 4 slow_hit_count: 6, fast_hit_count: 0 */
  st.pop_back(); /* line 5 slow_hit_count: 6, fast_hit_count: 0 */
  if (st.size() > 1) st.pop_back(); /* line 6 slow_hit_count: 6, fast_hit_count: 0 */
  if (st.size() > 0 && st[st.size() - 1] == '1') /* line 7 slow_hit_count: 6, fast_hit_count: 0 */
    replace(st); /* line 8 slow_hit_count: 3, fast_hit_count: 0 */
  else /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    st += '1'; /* line 10 slow_hit_count: 3, fast_hit_count: 0 */
  st += '0'; /* line 11 slow_hit_count: 6, fast_hit_count: 0 */
  st += '0'; /* line 12 slow_hit_count: 6, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 6, fast_hit_count: 0 */
void addZero(string &n1, string &n2) { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  if (n1.size() > n2.size()) { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    int it = (int)(n1.size() - n2.size()); /* line 16 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 0; i < it; i++) n2 = "0" + n2; /* line 17 slow_hit_count: 306, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  if (n1.size() < n2.size()) { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    int it = (int)(n2.size() - n1.size()); /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < it; i++) n1 = "0" + n1; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
void compare() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int len = strlen(nr1) - 1; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  string n1, n2; /* line 26 slow_hit_count: 2, fast_hit_count: 2 */
  n1 = nr1[0]; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  n2 = nr2[0]; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < len; i++) { /* line 29 slow_hit_count: 306, fast_hit_count: 1 */
    if (n1[n1.size() - 1] == nr1[i] && nr1[i] == '1') { /* line 30 slow_hit_count: 305, fast_hit_count: 0 */
      replace(n1); /* line 31 slow_hit_count: 3, fast_hit_count: 0 */
    } else /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      n1 += nr1[i]; /* line 33 slow_hit_count: 302, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  len = strlen(nr2) - 1; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < len; i++) { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
    if (n2[n2.size() - 1] == nr2[i] && nr2[i] == '1') { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      replace(n2); /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    } else /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      n2 += nr2[i]; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  addZero(n1, n2); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  int rez = n1.compare(n2); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  if (rez == 0) /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
    printf("=\n"); /* line 45 slow_hit_count: 0, fast_hit_count: 1 */
  else if (rez < 0) /* line 46 slow_hit_count: 1, fast_hit_count: 0 */
    printf("<\n"); /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    printf(">\n"); /* line 49 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  fgets(nr1, 100010, stdin); /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  fgets(nr2, 100010, stdin); /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  compare(); /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 56 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given code, we will first compare the hit counts for each part of the code during the execution with both the fast and slow inputs. Following that, we will derive natural language performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level hit count comparison:**
   - The `replace` function (lines 4-13) has significantly higher hit counts with the slow input (`slow_hit_count: 6`) compared to the fast input (`fast_hit_count: 0`).
   - The loop in the `compare` function (lines 29-34) iterates many times (`slow_hit_count: 306`) for the slow input, which is reflected in the high number of calls to `replace`.
   - The `addZero` function also seems to perform many operations. Specifically, the line that adds zeros to the strings (line 17) has a high hit count (`slow_hit_count: 306`).

2. **Expensive operations and data structure interactions:**
   - The `replace` function involves recursive calls (line 8) and multiple string manipulations (lines 5, 6, 10-12), especially when consecutive '1's are encountered.
   - In the `compare` function, the loop iterates over the length of `nr1`, performing checks and potentially calling `replace`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis of the code and the differences in hit counts between the fast and slow inputs, we derive the following performance-characterizing invariants:

1. **Invariant: High recursion depth in the `replace` function.**
   - **Natural language description:** "If a sequence of consecutive '1's occurs in the input string, the recursive `replace` function may be invoked multiple times, leading to increased computational complexity."
   - **Reasoning:** The `replace` function calls itself recursively if the last two characters are '1', which can lead to a deep recursion if such patterns are frequent.

2. **Invariant: String extension operations.**
   - **Natural language description:** "When the input string contains many consecutive '1's, string extension operations (like adding '0's) exacerbate as additional zeros are prepended to align the lengths of the strings, affecting performance."
   - **Reasoning:** The `addZero` function extends the shorter string to match the longer one by prepending zeros, which can be costly if many zeros are required.

3. **Invariant: Unaligned lengths requiring extensive padding.**
   - **Natural language description:** "If the initial lengths of the two input strings differ significantly, the `addZero` function may perform numerous operations to align them, resulting in performance degradation."
   - **Reasoning:** Aligning strings by adding zeros (line 17) is inefficient when the length difference between the strings is large.

These performance triggers, derived from the code analysis and input patterns, indicate potential areas for optimization (e.g., reducing recursion depth, optimizing string operations) and guide further testing to identify any additional slow scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Piegirl got bored with binary, decimal and other integer based counting systems. Recently she discovered some interesting properties about number <image>, in particular that q2 = q + 1, and she thinks it would make a good base for her new unique system. She called it "golden system". In golden system the number is a non-empty string containing 0's and 1's as digits. The decimal value of expression a0a1...an equals to <image>.

Soon Piegirl found out that this system doesn't have same properties that integer base systems do and some operations can not be performed on it. She wasn't able to come up with a fast way of comparing two numbers. She is asking for your help.

Given two numbers written in golden system notation, determine which of them has larger decimal value.

Input

Input consists of two lines — one for each number. Each line contains non-empty string consisting of '0' and '1' characters. The length of each string does not exceed 100000.

Output

Print ">" if the first number is larger, "<" if it is smaller and "=" if they are equal.

Examples

Input

1000
111


Output

&lt;


Input

00100
11


Output

=


Input

110
101


Output

&gt;

Note

In the first example first number equals to <image>, while second number is approximately 1.6180339882 + 1.618033988 + 1 ≈ 5.236, which is clearly a bigger number.

In the second example numbers are equal. Each of them is  ≈ 2.618.

Solution (C++ code):
{solution}


assistant: Let's proceed with the task of transforming the performance-characterizing invariants into C++ runtime checks and then integrating those checks into the original program.

### Phase 3: Implement Performance-Characterizing Invariants

Based on the derived natural language invariants, here's how we can implement them as C++ runtime checks:

1. **Invariant for High Recursion Depth in `replace`:**

   ```cpp
   void check_recursion_invariant(int depth) {
       if (depth > 50) { // Arbitrarily chosen depth threshold
           cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth!" << endl;
           abort();
       }
   }
   ```

2. **Invariant for String Extension Operations:**

   ```cpp
   void check_string_extension_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive string extension!" << endl;
           abort();
       }
   }
   ```

3. **Invariant for Unaligned Lengths Requiring Extensive Padding:**

   ```cpp
   void check_padding_invariant(int lengthDifference) {
       if (lengthDifference > 1000) { // Arbitrarily chosen threshold for length difference
           cerr << "Warning: Performance bottleneck condition triggered - excessive padding required!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checks into the Original Program

Now integrate these checks into the original C++ code for the problem statement:

```cpp
#include <bits/stdc++.h>
using namespace std;

char nr1[100010], nr2[100010];

void check_recursion_invariant(int depth) {
    if (depth > 50) { // Arbitrarily chosen depth threshold
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth!" << endl;
        abort();
    }
}

void replace(string &st, int depth) {
    // Check recursion depth
    check_recursion_invariant(depth);

    st.pop_back();
    if (st.size() > 1) st.pop_back();
    if (st.size() > 0 && st[st.size() - 1] == '1')
        replace(st, depth + 1);
    else
        st += '1';
    st += '0';
    st += '0';
}

void check_string_extension_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive string extension!" << endl;
        abort();
    }
}

void addZero(string &n1, string &n2) {
    int lengthDifference = abs((int)(n1.size() - n2.size()));
    
    // Check for excessive padding
    check_padding_invariant(lengthDifference);

    if (n1.size() > n2.size()) {
        int it = (int)(n1.size() - n2.size());
        for (int i = 0; i < it; i++) n2 = "0" + n2;
    }
    if (n1.size() < n2.size()) {
        int it = (int)(n2.size() - n1.size());
        for (int i = 0; i < it; i++) n1 = "0" + n1;
    }
}

void compare() {
    int len = strlen(nr1) - 1;
    string n1, n2;
    n1 = nr1[0];
    n2 = nr2[0];
    
    for (int i = 1; i < len; i++) {
        if (n1[n1.size() - 1] == nr1[i] && nr1[i] == '1') {
            replace(n1, 1);
        } else
            n1 += nr1[i];
    }
    
    len = strlen(nr2) - 1;
    for (int i = 1; i < len; i++) {
        if (n2[n2.size() - 1] == nr2[i] && nr2[i] == '1') {
            replace(n2, 1);
        } else
            n2 += nr2[i];
    }

    addZero(n1, n2);
    int rez = n1.compare(n2);
    if (rez == 0)
        printf("=\n");
    else if (rez < 0)
        printf("<\n");
    else
        printf(">\n");
}

int main() {
    fgets(nr1, 100010, stdin);
    fgets(nr2, 100010, stdin);
    compare();
    return 0;
}
```

### Explanation
- **Recursion Check:** Added a depth parameter to `replace` to track recursion depth. The `check_recursion_invariant` function is called to ensure the depth does not exceed a specified limit.
- **Padding Check:** Before adding zeros, the difference in string lengths is checked using `check_padding_invariant` to ensure it's within a reasonable threshold.
- **String Extension Check:** This is added conceptually in `addZero` to check if conditions for excessive extensions are met, although here it serves as a placeholder for possible extension checks. 

These integrations should help in detecting conditions that lead to performance bottlenecks without introducing significant overhead into the main computation logic.

