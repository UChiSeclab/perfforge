system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Piegirl got bored with binary, decimal and other integer based counting systems. Recently she discovered some interesting properties about number <image>, in particular that q2 = q + 1, and she thinks it would make a good base for her new unique system. She called it "golden system". In golden system the number is a non-empty string containing 0's and 1's as digits. The decimal value of expression a0a1...an equals to <image>.

Soon Piegirl found out that this system doesn't have same properties that integer base systems do and some operations can not be performed on it. She wasn't able to come up with a fast way of comparing two numbers. She is asking for your help.

Given two numbers written in golden system notation, determine which of them has larger decimal value.

Input

Input consists of two lines — one for each number. Each line contains non-empty string consisting of '0' and '1' characters. The length of each string does not exceed 100000.

Output

Print ">" if the first number is larger, "<" if it is smaller and "=" if they are equal.

Examples

Input

1000
111


Output

&lt;


Input

00100
11


Output

=


Input

110
101


Output

&gt;

Note

In the first example first number equals to <image>, while second number is approximately 1.6180339882 + 1.618033988 + 1 ≈ 5.236, which is clearly a bigger number.

In the second example numbers are equal. Each of them is  ≈ 2.618.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
char a[100005];
char b[100005];
char *operate(char *c) {
  int i = 4;
  while (c[i++])
    ;
  for (int k = 4; k < i; ++k) {
    for (int j = k; c[j] > '0' && c[j - 1] > '0'; j -= 2) {
      --c[j];
      --c[j - 1];
      c[j - 2] = '1';
    }
  }
  i = 0;
  while (c[++i] <= '0' && i < 100005)
    ;
  return c + i;
}
int len(char *c) {
  int i = 0;
  while (c[i++])
    ;
  return i;
}
int main() {
  scanf("%s%s", a + 4, b + 4);
  char *ap = operate(a);
  char *bp = operate(b);
  int al = len(ap), bl = len(bp);
  if (al > bl) {
    printf(">\n");
    return 0;
  } else if (al < bl) {
    printf("<\n");
    return 0;
  } else {
    for (int k = 0; k < al; ++k) {
      if (ap[k] > bp[k]) {
        printf(">\n");
        return 0;
      } else if (ap[k] < bp[k]) {
        printf("<\n");
        return 0;
      }
    }
    printf("=\n");
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

0
1


(G.2) Fast Input

1
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
char a[100005]; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
char b[100005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
char *operate(char *c) { /* line 4 slow_hit_count: 2, fast_hit_count: 2 */
  int i = 4; /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
  while (c[i++]) /* line 6 slow_hit_count: 4, fast_hit_count: 4 */
    ; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  for (int k = 4; k < i; ++k) { /* line 8 slow_hit_count: 6, fast_hit_count: 6 */
    for (int j = k; c[j] > '0' && c[j - 1] > '0'; j -= 2) { /* line 9 slow_hit_count: 4, fast_hit_count: 4 */
      --c[j]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
      --c[j - 1]; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
      c[j - 2] = '1'; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  i = 0; /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
  while (c[++i] <= '0' && i < 100005) /* line 16 slow_hit_count: 100009, fast_hit_count: 8 */
    ; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  return c + i; /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int len(char *c) { /* line 20 slow_hit_count: 2, fast_hit_count: 2 */
  int i = 0; /* line 21 slow_hit_count: 2, fast_hit_count: 2 */
  while (c[i++]) /* line 22 slow_hit_count: 3, fast_hit_count: 4 */
    ; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return i; /* line 24 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%s%s", a + 4, b + 4); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  char *ap = operate(a); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  char *bp = operate(b); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  int al = len(ap), bl = len(bp); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  if (al > bl) { /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
    printf(">\n"); /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } else if (al < bl) { /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
    printf("<\n"); /* line 35 slow_hit_count: 1, fast_hit_count: 0 */
    return 0; /* line 36 slow_hit_count: 1, fast_hit_count: 0 */
  } else { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    for (int k = 0; k < al; ++k) { /* line 38 slow_hit_count: 0, fast_hit_count: 3 */
      if (ap[k] > bp[k]) { /* line 39 slow_hit_count: 0, fast_hit_count: 2 */
        printf(">\n"); /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
        return 0; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
      } else if (ap[k] < bp[k]) { /* line 42 slow_hit_count: 0, fast_hit_count: 2 */
        printf("<\n"); /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
        return 0; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    printf("=\n"); /* line 47 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 49 slow_hit_count: 0, fast_hit_count: 1 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottleneck in the given C code, let's go through the steps outlined in the task.

### Phase 1: Identify expensive or inefficient code segments

1. **Line-Level Hit Count Comparison:**
   - We observe a significant difference in hit counts particularly at line 16:
     - `while (c[++i] <= '0' && i < 100005)` in the `operate` function has a hit count of 100,009 for the slow input compared to just 8 for the fast input.

2. **Pinpoint Lines with More Hits for Slow Input:**
   - **Line 16**: This line is a loop that increments `i` until it finds a character greater than '0' or reaches the maximum size. For the slow input, the loop runs extensively (100009 iterations), which indicates a lot of unnecessary iterations over zeros.

3. **Inference on Interaction with Data Structures:**
   - The primary reason for the slowdown appears to be related to the presence of leading zeros in the input string. The `operate` function processes the input strings by applying certain reductions, and excessive leading zeros cause the loop at line 16 to iterate over a large portion of the array without finding a non-zero digit.

### Phase 2: Derive performance-characterizing invariants (natural language)

1. **Conditions for Slow Path Entry:**
   - **Invariant 1:** "When the input string contains a large number of leading zeros, the conversion and normalization process may iterate excessively, leading to a significant slowdown."
   - **Invariant 2:** "If the characters in the input are predominantly zeros, especially at the beginning, the loop's efficiency degrades as it iterates over these zeros without performing meaningful operations."

2. **Avoid Specific Numeric Values:**
   - These invariants are expressed without specific numeric values from the input; they focus on the pattern of zeros in the string.

3. **Correlate Conditions to Input Patterns:**
   - **Thresholds and Patterns:**
     - When the input strings include a high ratio of leading zeros relative to their length, performance may degrade.
     - This condition is particularly impactful when the length of leading zeros approaches the full length of the input string.

4. **Broad Statements for Future Scenarios:**
   - These invariants are designed to capture any future slow scenarios involving leading zeros, which could potentially occur with different inputs adhering to the `n <= 100,000` constraint.

### Output Requirements

Here are the performance-characterizing invariants distilled from the analysis:

1. **Invariant:** "When the input string in the golden system contains a significant number of leading zeros, the conversion can become inefficient, as the process iterates unnecessarily through these zeros."

2. **Invariant:** "If the string is primarily composed of zeros, especially at the start, the program's execution time increases due to repetitive checks on these zeros without finding a terminating condition quickly."

These invariants help identify scenarios where the presence and structure of zeros in the input lead to performance bottlenecks, aligning with the problem's constraints while avoiding specific numeric dependencies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Piegirl got bored with binary, decimal and other integer based counting systems. Recently she discovered some interesting properties about number <image>, in particular that q2 = q + 1, and she thinks it would make a good base for her new unique system. She called it "golden system". In golden system the number is a non-empty string containing 0's and 1's as digits. The decimal value of expression a0a1...an equals to <image>.

Soon Piegirl found out that this system doesn't have same properties that integer base systems do and some operations can not be performed on it. She wasn't able to come up with a fast way of comparing two numbers. She is asking for your help.

Given two numbers written in golden system notation, determine which of them has larger decimal value.

Input

Input consists of two lines — one for each number. Each line contains non-empty string consisting of '0' and '1' characters. The length of each string does not exceed 100000.

Output

Print ">" if the first number is larger, "<" if it is smaller and "=" if they are equal.

Examples

Input

1000
111


Output

&lt;


Input

00100
11


Output

=


Input

110
101


Output

&gt;

Note

In the first example first number equals to <image>, while second number is approximately 1.6180339882 + 1.618033988 + 1 ≈ 5.236, which is clearly a bigger number.

In the second example numbers are equal. Each of them is  ≈ 2.618.

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 by implementing the natural language invariants as runtime checks in C++.

### Phase 3: Implement the Natural Language Invariants in C++

**Invariant 1:** "When the input string contains a significant number of leading zeros, the conversion can become inefficient, as the process iterates unnecessarily through these zeros."

The goal is to implement this invariant as a check that warns when a string has a high number of leading zeros compared to its total length:

```cpp
void check_leading_zero_invariant(const char *input) {
    int zeroCount = 0;
    int length = strlen(input);
    for (int i = 0; i < length && input[i] == '0'; ++i) {
        ++zeroCount;
    }
    if (zeroCount > length / 2) { // If more than half of the string is leading zeros
        cerr << "Warning: Performance bottleneck condition triggered - excessive leading zeros" << endl;
        abort();
    }
}
```

**Invariant 2:** "If the string is primarily composed of zeros, especially at the start, the program's execution time increases due to repetitive checks on these zeros without finding a terminating condition quickly."

This invariant essentially overlaps with the first one, emphasizing leading zeros. Hence, the check remains the same.

### Phase 4: Integrate Checker Code into the Original C++ Program

Now we integrate these checks into the original program. Insert them after reading the inputs and before the main processing logic begins:

```cpp
#include <bits/stdc++.h>
using namespace std;

char a[100005];
char b[100005];

void check_leading_zero_invariant(const char *input) {
    int zeroCount = 0;
    int length = strlen(input);
    for (int i = 0; i < length && input[i] == '0'; ++i) {
        ++zeroCount;
    }
    if (zeroCount > length / 2) { // If more than half of the string is leading zeros
        cerr << "Warning: Performance bottleneck condition triggered - excessive leading zeros" << endl;
        abort();
    }
}

char *operate(char *c) {
  int i = 4;
  while (c[i++])
    ;
  for (int k = 4; k < i; ++k) {
    for (int j = k; c[j] > '0' && c[j - 1] > '0'; j -= 2) {
      --c[j];
      --c[j - 1];
      c[j - 2] = '1';
    }
  }
  i = 0;
  while (c[++i] <= '0' && i < 100005)
    ;
  return c + i;
}

int len(char *c) {
  int i = 0;
  while (c[i++])
    ;
  return i;
}

int main() {
  scanf("%s%s", a + 4, b + 4);
  
  // Check for performance bottlenecks due to leading zeros
  check_leading_zero_invariant(a + 4);
  check_leading_zero_invariant(b + 4);
  
  char *ap = operate(a);
  char *bp = operate(b);
  int al = len(ap), bl = len(bp);
  if (al > bl) {
    printf(">\n");
    return 0;
  } else if (al < bl) {
    printf("<\n");
    return 0;
  } else {
    for (int k = 0; k < al; ++k) {
      if (ap[k] > bp[k]) {
        printf(">\n");
        return 0;
      } else if (ap[k] < bp[k]) {
        printf("<\n");
        return 0;
      }
    }
    printf("=\n");
  }
  return 0;
}
```

### Explanation of Checker Integration

- The checkers are placed immediately after reading inputs with `scanf`, ensuring they execute before any further processing.
- The runtime checks inspect the ratio of leading zeros to the total length of the string.
- If an input string has more than half of its length as leading zeros, the program warns of a potential performance bottleneck and aborts execution.

This integration is designed to help diagnose performance issues when using inputs similar to the slow input but is broad enough to capture future cases within the constraints (`n <= 100,000`). This approach also avoids adding overhead within tight loops, preserving the efficiency of the main algorithm.

