system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Piegirl got bored with binary, decimal and other integer based counting systems. Recently she discovered some interesting properties about number <image>, in particular that q2 = q + 1, and she thinks it would make a good base for her new unique system. She called it "golden system". In golden system the number is a non-empty string containing 0's and 1's as digits. The decimal value of expression a0a1...an equals to <image>.

Soon Piegirl found out that this system doesn't have same properties that integer base systems do and some operations can not be performed on it. She wasn't able to come up with a fast way of comparing two numbers. She is asking for your help.

Given two numbers written in golden system notation, determine which of them has larger decimal value.

Input

Input consists of two lines — one for each number. Each line contains non-empty string consisting of '0' and '1' characters. The length of each string does not exceed 100000.

Output

Print ">" if the first number is larger, "<" if it is smaller and "=" if they are equal.

Examples

Input

1000
111


Output

&lt;


Input

00100
11


Output

=


Input

110
101


Output

&gt;

Note

In the first example first number equals to <image>, while second number is approximately 1.6180339882 + 1.618033988 + 1 ≈ 5.236, which is clearly a bigger number.

In the second example numbers are equal. Each of them is  ≈ 2.618.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const double EPS = 1e-4;
const double Q = (1.0 + sqrt(5.0)) / 2.0;
char a[100000 + 100];
char b[100000 + 100];
int q[100000 + 100];
int p[100000 + 100];
int A[100000 + 100];
int B[100000 + 100];
int sA[100000 + 100];
int sB[100000 + 100];
int mx;
void reverse(int *a, int n) {
  for (int i = 0; i <= n / 2; i++) {
    swap(a[i], a[n - i - 1]);
  }
}
void check() {
  int q = 0, p = 0;
  for (int i = mx - 3; i < mx; i++) {
    q += B[i] - A[i];
  }
}
string solve(string &a, string &b) {
  memset(A, 0, sizeof(A));
  memset(B, 0, sizeof(B));
  int n = a.size();
  for (int i = 0; i < n; i++) {
    A[i] = a[i] - '0';
    B[i] = b[i] - '0';
    if (A[i] == B[i]) {
      A[i] = B[i] = 0;
    }
  }
  for (int i = 0; i < n - 2; i++) {
    if (A[i] >= B[i]) {
      A[i] -= B[i];
      B[i] = 0;
    } else if (B[i] >= A[i]) {
      B[i] -= A[i];
      A[i] = 0;
    }
    if (A[i] < -20 || B[i] > 20) {
      return "<";
    } else if (A[i] > 20 || B[i] < -20) {
      return ">";
    }
    A[i + 1] += A[i];
    A[i + 2] += A[i];
    A[i] = 0;
    B[i + 1] += B[i];
    B[i + 2] += B[i];
    B[i] = 0;
  }
  double aa = A[n - 2] * Q + A[n - 1];
  double bb = B[n - 2] * Q + B[n - 1];
  if (aa < bb - EPS) {
    return "<";
  } else if (aa > bb + EPS) {
    return ">";
  } else {
    return "=";
  }
}
int main() {
  scanf("%s%s", a, b);
  string strA(a);
  string strB(b);
  while (strA.size() < strB.size()) {
    strA = '0' + strA;
  }
  while (strB.size() < strA.size()) {
    strB = '0' + strB;
  }
  printf("%s\n", solve(strA, strB).c_str());
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

101001010101010101010100101010101010101010101001010101010100101010101010100101101010100101010100101010101001010101010101010100101010101010101010101001010101010100101010101010100101101010100101010100101010101001010101010101010100101010101010101010101001010101010100101010101010100101101010100101010100101010
1


(G.2) Fast Input

1
0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const double EPS = 1e-4; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const double Q = (1.0 + sqrt(5.0)) / 2.0; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
char a[100000 + 100]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
char b[100000 + 100]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int q[100000 + 100]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int p[100000 + 100]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int A[100000 + 100]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int B[100000 + 100]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int sA[100000 + 100]; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int sB[100000 + 100]; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int mx; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
void reverse(int *a, int n) { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= n / 2; i++) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    swap(a[i], a[n - i - 1]); /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
void check() { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  int q = 0, p = 0; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = mx - 3; i < mx; i++) { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    q += B[i] - A[i]; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
string solve(string &a, string &b) { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  memset(A, 0, sizeof(A)); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  memset(B, 0, sizeof(B)); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  int n = a.size(); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 29 slow_hit_count: 307, fast_hit_count: 2 */
    A[i] = a[i] - '0'; /* line 30 slow_hit_count: 306, fast_hit_count: 1 */
    B[i] = b[i] - '0'; /* line 31 slow_hit_count: 306, fast_hit_count: 1 */
    if (A[i] == B[i]) { /* line 32 slow_hit_count: 306, fast_hit_count: 1 */
      A[i] = B[i] = 0; /* line 33 slow_hit_count: 161, fast_hit_count: 0 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n - 2; i++) { /* line 36 slow_hit_count: 8, fast_hit_count: 1 */
    if (A[i] >= B[i]) { /* line 37 slow_hit_count: 8, fast_hit_count: 0 */
      A[i] -= B[i]; /* line 38 slow_hit_count: 8, fast_hit_count: 0 */
      B[i] = 0; /* line 39 slow_hit_count: 8, fast_hit_count: 0 */
    } else if (B[i] >= A[i]) { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
      B[i] -= A[i]; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
      A[i] = 0; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    if (A[i] < -20 || B[i] > 20) { /* line 44 slow_hit_count: 8, fast_hit_count: 0 */
      return "<"; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    } else if (A[i] > 20 || B[i] < -20) { /* line 46 slow_hit_count: 8, fast_hit_count: 0 */
      return ">"; /* line 47 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    A[i + 1] += A[i]; /* line 49 slow_hit_count: 7, fast_hit_count: 0 */
    A[i + 2] += A[i]; /* line 50 slow_hit_count: 7, fast_hit_count: 0 */
    A[i] = 0; /* line 51 slow_hit_count: 7, fast_hit_count: 0 */
    B[i + 1] += B[i]; /* line 52 slow_hit_count: 7, fast_hit_count: 0 */
    B[i + 2] += B[i]; /* line 53 slow_hit_count: 7, fast_hit_count: 0 */
    B[i] = 0; /* line 54 slow_hit_count: 7, fast_hit_count: 0 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  double aa = A[n - 2] * Q + A[n - 1]; /* line 56 slow_hit_count: 0, fast_hit_count: 1 */
  double bb = B[n - 2] * Q + B[n - 1]; /* line 57 slow_hit_count: 0, fast_hit_count: 1 */
  if (aa < bb - EPS) { /* line 58 slow_hit_count: 0, fast_hit_count: 1 */
    return "<"; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  } else if (aa > bb + EPS) { /* line 60 slow_hit_count: 0, fast_hit_count: 1 */
    return ">"; /* line 61 slow_hit_count: 0, fast_hit_count: 1 */
  } else { /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    return "="; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%s%s", a, b); /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  string strA(a); /* line 68 slow_hit_count: 2, fast_hit_count: 2 */
  string strB(b); /* line 69 slow_hit_count: 2, fast_hit_count: 2 */
  while (strA.size() < strB.size()) { /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
    strA = '0' + strA; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  while (strB.size() < strA.size()) { /* line 73 slow_hit_count: 306, fast_hit_count: 1 */
    strB = '0' + strB; /* line 74 slow_hit_count: 305, fast_hit_count: 0 */
  } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%s\n", solve(strA, strB).c_str()); /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 78 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issues in the provided C program, we will analyze the hit count differences between the fast and slow inputs and derive performance-characterizing invariants. 

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Difference in Hit Counts:**
   - **Line 29 (`for` loop):** The line hit count in the slow input is significantly higher (307 vs. 2 for the fast input), indicating this loop is a potential bottleneck.
   - **Line 33 (`A[i] = B[i] = 0;`):** This line is hit 161 times in the slow input, not at all in the fast input, suggesting many equal elements in the slow input.
   - **Lines 36-54 (Second `for` loop):** This loop is hit 8 times in the slow input, with operations on variables `A` and `B` being executed multiple times, indicating repeated adjustments to the arrays.
   - **Line 73-74 (`while` loop):** These lines are hit significantly more in the slow input (306 and 305 times, respectively), indicating one string is being padded with zeros a considerable number of times.

2. **Inference:**
   - The high hit count in the loops, especially the adjustment and padding operations, suggests that the program does a lot of redundant work, especially when encountering strings that require extensive zero-padding or equal elements that need neutralizing in arrays `A` and `B`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are natural language statements describing conditions under which the program enters a slow execution path:

1. **Invariant 1: Extensive Padding Requirement**
   - *Natural Language Description:* "If the two input strings differ greatly in length, requiring extensive zero-padding, the program's performance may degrade due to increased preprocessing time."
   - *Implication:* The algorithm might need refinement to handle cases with large length differences more efficiently.

2. **Invariant 2: High Frequency of Equal Element Neutralization**
   - *Natural Language Description:* "When there are many equal bits at corresponding positions in the two strings, resulting in frequent neutralization operations, the program may slow down due to high redundancy in element processing."
   - *Implication:* This suggests that scenarios with many leading zeros or identical segments require careful handling to avoid unnecessary operations.

3. **Invariant 3: Repeated Adjustments in Arrays A and B**
   - *Natural Language Description:* "If the input strings have patterns that lead to repeated adjustments in arrays `A` and `B`, the performance can degrade due to cumulative computational overhead."
   - *Implication:* Patterns in the input that frequently trigger the adjustment logic need optimization to minimize redundant calculations.

By focusing on these invariants, future inputs that trigger these conditions can be identified, helping to anticipate and mitigate performance issues. Additionally, optimizing these identified inefficient code segments could lead to overall improved performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Piegirl got bored with binary, decimal and other integer based counting systems. Recently she discovered some interesting properties about number <image>, in particular that q2 = q + 1, and she thinks it would make a good base for her new unique system. She called it "golden system". In golden system the number is a non-empty string containing 0's and 1's as digits. The decimal value of expression a0a1...an equals to <image>.

Soon Piegirl found out that this system doesn't have same properties that integer base systems do and some operations can not be performed on it. She wasn't able to come up with a fast way of comparing two numbers. She is asking for your help.

Given two numbers written in golden system notation, determine which of them has larger decimal value.

Input

Input consists of two lines — one for each number. Each line contains non-empty string consisting of '0' and '1' characters. The length of each string does not exceed 100000.

Output

Print ">" if the first number is larger, "<" if it is smaller and "=" if they are equal.

Examples

Input

1000
111


Output

&lt;


Input

00100
11


Output

=


Input

110
101


Output

&gt;

Note

In the first example first number equals to <image>, while second number is approximately 1.6180339882 + 1.618033988 + 1 ≈ 5.236, which is clearly a bigger number.

In the second example numbers are equal. Each of them is  ≈ 2.618.

Solution (C++ code):
{solution}


assistant: Let's proceed with implementing the natural language invariants into C++ code, following the structure outlined. 

### Phase 3: Implementing Invariants as Checker Code in C++

Here are the checker functions that correspond to the performance-characterizing invariants we derived:

1. **Invariant 1: Extensive Padding Requirement**

```cpp
void check_padding_invariant(int lengthA, int lengthB) {
    if (abs(lengthA - lengthB) > 1000) {  // Arbitrary threshold for illustrative purposes
        cerr << "Warning: Performance bottleneck condition triggered - extensive padding required!" << endl;
        abort();
    }
}
```

2. **Invariant 2: High Frequency of Equal Element Neutralization**

```cpp
void check_equal_neutralization_invariant(int equalCount) {
    if (equalCount > 50000) {  // Arbitrary threshold for illustrative purposes
        cerr << "Warning: Performance bottleneck condition triggered - high frequency of equal element neutralization!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Repeated Adjustments in Arrays A and B**

```cpp
void check_adjustment_invariant(int adjustmentCount) {
    if (adjustmentCount > 10000) {  // Arbitrary threshold for illustrative purposes
        cerr << "Warning: Performance bottleneck condition triggered - repeated adjustments in arrays!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code

Let's integrate these checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

const double EPS = 1e-4;
const double Q = (1.0 + sqrt(5.0)) / 2.0;
char a[100000 + 100];
char b[100000 + 100];
int A[100000 + 100];
int B[100000 + 100];

// Checker functions
void check_padding_invariant(int lengthA, int lengthB) {
    if (abs(lengthA - lengthB) > 1000) {  // Arbitrary threshold
        cerr << "Warning: Performance bottleneck condition triggered - extensive padding required!" << endl;
        abort();
    }
}

void check_equal_neutralization_invariant(int equalCount) {
    if (equalCount > 50000) {  // Arbitrary threshold
        cerr << "Warning: Performance bottleneck condition triggered - high frequency of equal element neutralization!" << endl;
        abort();
    }
}

void check_adjustment_invariant(int adjustmentCount) {
    if (adjustmentCount > 10000) {  // Arbitrary threshold
        cerr << "Warning: Performance bottleneck condition triggered - repeated adjustments in arrays!" << endl;
        abort();
    }
}

string solve(string &a, string &b) {
    memset(A, 0, sizeof(A));
    memset(B, 0, sizeof(B));
    int n = a.size();
    int equalCount = 0;
    for (int i = 0; i < n; i++) {
        A[i] = a[i] - '0';
        B[i] = b[i] - '0';
        if (A[i] == B[i]) {
            A[i] = B[i] = 0;
            equalCount++;
        }
    }
    check_equal_neutralization_invariant(equalCount);  // Check for neutralization invariant

    int adjustmentCount = 0;
    for (int i = 0; i < n - 2; i++) {
        if (A[i] >= B[i]) {
            A[i] -= B[i];
            B[i] = 0;
        } else if (B[i] >= A[i]) {
            B[i] -= A[i];
            A[i] = 0;
        }
        if (A[i] < -20 || B[i] > 20) {
            return "<";
        } else if (A[i] > 20 || B[i] < -20) {
            return ">";
        }
        A[i + 1] += A[i];
        A[i + 2] += A[i];
        A[i] = 0;
        B[i + 1] += B[i];
        B[i + 2] += B[i];
        B[i] = 0;
        adjustmentCount++;
    }
    check_adjustment_invariant(adjustmentCount);  // Check for adjustment invariant

    double aa = A[n - 2] * Q + A[n - 1];
    double bb = B[n - 2] * Q + B[n - 1];
    if (aa < bb - EPS) {
        return "<";
    } else if (aa > bb + EPS) {
        return ">";
    } else {
        return "=";
    }
}

int main() {
    scanf("%s%s", a, b);
    string strA(a);
    string strB(b);
    check_padding_invariant(strA.size(), strB.size());  // Check for padding invariant
    while (strA.size() < strB.size()) {
        strA = '0' + strA;
    }
    while (strB.size() < strA.size()) {
        strB = '0' + strB;
    }
    printf("%s\n", solve(strA, strB).c_str());
    return 0;
}
```

### Comments on Checker Placement

- **Padding Check:** Inserted after the input to ensure it runs before any padding operations.
- **Neutralization Check:** Runs after setting equal elements to zero, counting how often this happens.
- **Adjustment Check:** After potential changes in arrays `A` and `B`, counts adjustments as they occur.

These checks are placed strategically to capture potential slow performance paths without adding significant overhead to the main execution.

