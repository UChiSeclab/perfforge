system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The busses in Berland are equipped with a video surveillance system. The system records information about changes in the number of passengers in a bus after stops.

If x is the number of passengers in a bus just before the current bus stop and y is the number of passengers in the bus just after current bus stop, the system records the number y-x. So the system records show how number of passengers changed.

The test run was made for single bus and n bus stops. Thus, the system recorded the sequence of integers a_1, a_2, ..., a_n (exactly one number for each bus stop), where a_i is the record for the bus stop i. The bus stops are numbered from 1 to n in chronological order.

Determine the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to w (that is, at any time in the bus there should be from 0 to w passengers inclusive).

Input

The first line contains two integers n and w (1 ≤ n ≤ 1 000, 1 ≤ w ≤ 10^{9}) — the number of bus stops and the capacity of the bus.

The second line contains a sequence a_1, a_2, ..., a_n (-10^{6} ≤ a_i ≤ 10^{6}), where a_i equals to the number, which has been recorded by the video system after the i-th bus stop.

Output

Print the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to w. If the situation is contradictory (i.e. for any initial number of passengers there will be a contradiction), print 0.

Examples

Input

3 5
2 1 -3


Output

3


Input

2 4
-1 1


Output

4


Input

4 10
2 4 1 2


Output

2

Note

In the first example initially in the bus could be 0, 1 or 2 passengers.

In the second example initially in the bus could be 1, 2, 3 or 4 passengers.

In the third example initially in the bus could be 0 or 1 passenger.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, m;
  cin >> n >> m;
  vector<long long int> v;
  for (int i = 0; i < n; i++) {
    long long int a;
    cin >> a;
    v.push_back(a);
  }
  int x = 0;
  int a = 0, b = 0;
  for (int j = 0; j < n; j++) {
    x = x + v[j];
    b = min(x, b);
    a = max(x, a);
  }
  int y = 0;
  for (int i = 0; i <= m; i++) {
    if (i + b >= 0 and i + a <= m) {
      y++;
    }
  }
  cout << y;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1000000000
0


(G.2) Fast Input

2 1
0 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long int> v; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 7 slow_hit_count: 2, fast_hit_count: 3 */
    long long int a; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a; /* line 9 slow_hit_count: 1, fast_hit_count: 2 */
    v.push_back(a); /* line 10 slow_hit_count: 1, fast_hit_count: 2 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  int x = 0; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  int a = 0, b = 0; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (int j = 0; j < n; j++) { /* line 14 slow_hit_count: 2, fast_hit_count: 3 */
    x = x + v[j]; /* line 15 slow_hit_count: 1, fast_hit_count: 2 */
    b = min(x, b); /* line 16 slow_hit_count: 1, fast_hit_count: 2 */
    a = max(x, a); /* line 17 slow_hit_count: 1, fast_hit_count: 2 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  int y = 0; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= m; i++) { /* line 20 slow_hit_count: 1000000002, fast_hit_count: 3 */
    if (i + b >= 0 and i + a <= m) { /* line 21 slow_hit_count: 1000000001, fast_hit_count: 2 */
      y++; /* line 22 slow_hit_count: 1000000001, fast_hit_count: 2 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  cout << y; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To identify the performance bottlenecks in the given C program, let's first analyze the line-level hit count data provided for the "slow" and "fast" inputs and then derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**
   - The outer loop at line 20 (`for (int i = 0; i <= m; i++)`) is executed 1,000,000,002 times in the slow input case, compared to just 3 times for the fast input. This loop's execution time is directly proportional to the value of `m`.

2. **Pinpoint Significant Lines:**
   - **Lines 20-22**: These lines are executed a substantial number of times due to the loop iterating over the entire range from 0 to `m`. This iteration is causing a linear traversal over a potentially very large range, causing the slowdown.

3. **Inference on Line Interaction:**
   - The loop (lines 20-22) iterates over all possible initial passenger counts from 0 to the bus capacity `m`. The conditions inside the loop (checking if `i + b >= 0` and `i + a <= m`) determine if a particular initial count is feasible, incrementing `y` if true. The key bottleneck arises from iterating over a wide range of values for `m`, which in the slow case is 1 billion.

### Phase 2: Derive Performance-Characterizing Invariants

From the analysis above, we can generate the following natural language performance invariants:

1. **Invariant 1:** 
   - **Condition:** When the bus capacity `m` is very large.
   - **Description:** "If the bus capacity `m` approaches its upper bound, the program iterates over a wide range of possible initial passenger counts, leading to a significant slowdown."

2. **Invariant 2:**
   - **Condition:** When the changes in passenger count over stops (the sequence `a_i`) result in wide values for the range of possible initial passenger counts.
   - **Description:** "If `a_i` values, over the stops, allow a broad range of possible initial counts (i.e., if `b` and `a` are widely separated), the loop iterating over `m` will have a larger range to check, which can degrade performance."

3. **Invariant 3:**
   - **Condition:** Large `m` with minimal variation in `a_i`.
   - **Description:** "If the bus capacity is large but changes in passenger count per stop are minimal (or zero), the program might unnecessarily iterate over a large range of possibilities, causing performance degradation."

### Summary

The primary performance issue in the code arises from iterating over the entire range of `m` to check feasible initial passenger counts, which is exacerbated when `m` is large. This results in the loop running a large number of times, particularly when `m` approaches its maximum constraint (10^9). The conditions being checked within this range determine the final count of valid initial passengers, but the sheer size of the loop iteration is the core bottleneck. To improve this, the loop's range could be dynamically adjusted based on the calculated bounds (`b` and `a`), although such an optimization would require careful mathematical insight to ensure correctness without explicit iteration over all possibilities.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The busses in Berland are equipped with a video surveillance system. The system records information about changes in the number of passengers in a bus after stops.

If x is the number of passengers in a bus just before the current bus stop and y is the number of passengers in the bus just after current bus stop, the system records the number y-x. So the system records show how number of passengers changed.

The test run was made for single bus and n bus stops. Thus, the system recorded the sequence of integers a_1, a_2, ..., a_n (exactly one number for each bus stop), where a_i is the record for the bus stop i. The bus stops are numbered from 1 to n in chronological order.

Determine the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to w (that is, at any time in the bus there should be from 0 to w passengers inclusive).

Input

The first line contains two integers n and w (1 ≤ n ≤ 1 000, 1 ≤ w ≤ 10^{9}) — the number of bus stops and the capacity of the bus.

The second line contains a sequence a_1, a_2, ..., a_n (-10^{6} ≤ a_i ≤ 10^{6}), where a_i equals to the number, which has been recorded by the video system after the i-th bus stop.

Output

Print the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to w. If the situation is contradictory (i.e. for any initial number of passengers there will be a contradiction), print 0.

Examples

Input

3 5
2 1 -3


Output

3


Input

2 4
-1 1


Output

4


Input

4 10
2 4 1 2


Output

2

Note

In the first example initially in the bus could be 0, 1 or 2 passengers.

In the second example initially in the bus could be 1, 2, 3 or 4 passengers.

In the third example initially in the bus could be 0 or 1 passenger.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Based on the performance-characterizing invariants previously identified, here are the checker C++ code snippets:

1. **Invariant 1: Large Bus Capacity**
   - **Checker Code:**
   ```cpp
   void check_large_capacity_invariant(int m) {
       if (m > 100000000) { // Arbitrary threshold to detect large m close to its max constraint
           cerr << "Warning: Performance bottleneck condition triggered - large bus capacity!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Wide Range of Initial Passenger Counts**
   - **Checker Code:**
   ```cpp
   void check_wide_range_invariant(int a, int b) {
       if ((a - b) > 1000000) { // Arbitrary threshold for a wide range of possible initial passengers
           cerr << "Warning: Performance bottleneck condition triggered - wide range of possible initial passenger counts!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Large Capacity with Minimal Variation**
   - **Checker Code:**
   ```cpp
   void check_minimal_variation_invariant(vector<long long int>& v) {
       bool all_zero = all_of(v.begin(), v.end(), [](long long int x) { return x == 0; });
       if (all_zero) {
           cerr << "Warning: Performance bottleneck condition triggered - large capacity with minimal variation in a_i!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Original C++ Program

Now, let's integrate these checkers into the provided C++ program. We should place these checks after input reading and before the potential bottleneck loop execution.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_large_capacity_invariant(int m) {
    if (m > 100000000) { // Arbitrary threshold to detect large m close to its max constraint
        cerr << "Warning: Performance bottleneck condition triggered - large bus capacity!" << endl;
        abort();
    }
}

void check_wide_range_invariant(int a, int b) {
    if ((a - b) > 1000000) { // Arbitrary threshold for a wide range of possible initial passengers
        cerr << "Warning: Performance bottleneck condition triggered - wide range of possible initial passenger counts!" << endl;
        abort();
    }
}

void check_minimal_variation_invariant(vector<long long int>& v) {
    bool all_zero = all_of(v.begin(), v.end(), [](long long int x) { return x == 0; });
    if (all_zero) {
        cerr << "Warning: Performance bottleneck condition triggered - large capacity with minimal variation in a_i!" << endl;
        abort();
    }
}

int main() {
    int n, m;
    cin >> n >> m;
    vector<long long int> v;
    for (int i = 0; i < n; i++) {
        long long int a;
        cin >> a;
        v.push_back(a);
    }
    
    // Apply initial checkers
    check_large_capacity_invariant(m);
    check_minimal_variation_invariant(v);

    int x = 0;
    int a = 0, b = 0;
    for (int j = 0; j < n; j++) {
        x = x + v[j];
        b = min(x, b);
        a = max(x, a);
    }
    
    // Apply range checker
    check_wide_range_invariant(a, b);

    int y = 0;
    for (int i = 0; i <= m; i++) {
        if (i + b >= 0 and i + a <= m) {
            y++;
        }
    }
    cout << y;
    return 0;
}
```

**Explanation of Placement:**
- **`check_large_capacity_invariant(m)`** is placed after input reading to catch large `m` values early.
- **`check_minimal_variation_invariant(v)`** is also executed after input reading to detect minimal variation in changes `a_i`.
- **`check_wide_range_invariant(a, b)`** is placed after computing `a` and `b` to ensure the range between them is not excessively large before the iteration over `m`. 

These checks prevent the program from running into performance issues when inputs likely to cause slow execution are encountered.

