system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ziota found a video game called "Monster Invaders".

Similar to every other shooting RPG game, "Monster Invaders" involves killing monsters and bosses with guns.

For the sake of simplicity, we only consider two different types of monsters and three different types of guns.

Namely, the two types of monsters are: 

  * a normal monster with 1 hp. 
  * a boss with 2 hp. 



And the three types of guns are: 

  * Pistol, deals 1 hp in damage to one monster, r_1 reloading time 
  * Laser gun, deals 1 hp in damage to all the monsters in the current level (including the boss), r_2 reloading time 
  * AWP, instantly kills any monster, r_3 reloading time 



The guns are initially not loaded, and the Ziota can only reload 1 gun at a time.

The levels of the game can be considered as an array a_1, a_2, …, a_n, in which the i-th stage has a_i normal monsters and 1 boss. Due to the nature of the game, Ziota cannot use the Pistol (the first type of gun) or AWP (the third type of gun) to shoot the boss before killing all of the a_i normal monsters.

If Ziota damages the boss but does not kill it immediately, he is forced to move out of the current level to an arbitrary adjacent level (adjacent levels of level i (1 < i < n) are levels i - 1 and i + 1, the only adjacent level of level 1 is level 2, the only adjacent level of level n is level n - 1). Ziota can also choose to move to an adjacent level at any time. Each move between adjacent levels are managed by portals with d teleportation time.

In order not to disrupt the space-time continuum within the game, it is strictly forbidden to reload or shoot monsters during teleportation. 

Ziota starts the game at level 1. The objective of the game is rather simple, to kill all the bosses in all the levels. He is curious about the minimum time to finish the game (assuming it takes no time to shoot the monsters with a loaded gun and Ziota has infinite ammo on all the three guns). Please help him find this value.

Input

The first line of the input contains five integers separated by single spaces: n (2 ≤ n ≤ 10^6) — the number of stages, r_1, r_2, r_3 (1 ≤ r_1 ≤ r_2 ≤ r_3 ≤ 10^9) — the reload time of the three guns respectively, d (1 ≤ d ≤ 10^9) — the time of moving between adjacent levels.

The second line of the input contains n integers separated by single spaces a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6, 1 ≤ i ≤ n).

Output

Print one integer, the minimum time to finish the game.

Examples

Input


4 1 3 4 3
3 2 5 1


Output


34

Input


4 2 4 4 1
4 5 1 2


Output


31

Note

In the first test case, the optimal strategy is:

  * Use the pistol to kill three normal monsters and AWP to kill the boss (Total time 1⋅3+4=7) 
  * Move to stage two (Total time 7+3=10) 
  * Use the pistol twice and AWP to kill the boss (Total time 10+1⋅2+4=16) 
  * Move to stage three (Total time 16+3=19) 
  * Use the laser gun and forced to move to either stage four or two, here we move to stage four (Total time 19+3+3=25) 
  * Use the pistol once, use AWP to kill the boss (Total time 25+1⋅1+4=30) 
  * Move back to stage three (Total time 30+3=33) 
  * Kill the boss at stage three with the pistol (Total time 33+1=34) 



Note that here, we do not finish at level n, but when all the bosses are killed.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, r1, r2, r3, d;
long long it[1000001];
long long pre[1000001];
long long pre2[1000001];
long long dp[1000001];
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> n >> r1 >> r2 >> r3 >> d;
  for (long long i = 0; i < n; i++) {
    cin >> it[i];
  }
  long long ans = 0;
  for (long long i = 0; i < n; i++) {
    long long mi = it[i] * r1 + r3;
    mi = min(mi, min(r2 + r1, (it[i] + 2) * r1));
    pre2[i + 1] = pre2[i] + mi;
  }
  multiset<long long> cur;
  multiset<long long> cur2;
  long long ba = 0;
  for (long long i = 0; i < n; i++) {
    dp[i] = pre2[i + 1] + 2 * d * i;
    if (i == 0) {
      dp[i] += 2 * d;
    }
    if (cur.size() > 0) {
      long long xx = *cur.begin();
      dp[i] = min(dp[i], pre2[i + 1] + xx + 2 * i * d);
    }
    if (i > 0) {
      dp[i] = min(dp[i], dp[i - 1] + it[i] * r1 + r3);
    } else {
      dp[i] = min(dp[i], it[i] * r1 + r3);
    }
    if (i == n - 1) {
      long long ans = dp[n - 1];
      long long xx = *cur2.begin();
      ans = min(ans, pre2[i + 1] + xx + i * d + 2 * d);
      ans = min(ans, pre2[i] + xx + i * d + it[i] * r1 + r3);
      ans = min(ans, dp[n - 3] + pre2[i + 1] - pre2[i - 1] + 2 * d);
      cout << ans + (n - 1) * d << endl;
      return 0;
    }
    long long cot = 0;
    if (i > 0) {
      cot = dp[i - 1];
    }
    cur.insert(-pre2[i] - 2 * i * d + cot);
    cur2.insert(-pre2[i] - i * d + cot);
  }
  return 0;
  for (long long i = 0; i < n; i++) {
    long long kk = 0;
    if (cur.size()) {
      long long xx = *(cur.begin());
      xx += pre2[i + 1];
      xx += i * d * 2;
      kk = xx;
    }
    cur.insert(ba - pre2[i] - i * 2 * d);
    cur2.insert(ba - pre2[i] - i * d);
    ba = ba + it[i] * r1 + r3;
    ba = min(ba, kk + it[i] * r1 + r3);
    cout << ba << ":" << kk << endl;
    if (i == n - 1) {
      long long ans = ba;
      long long xx = *(cur2.begin());
      xx += pre2[i] +
            min(it[i] * r1 + r3, 2 * d + min(r2 + r1, (it[i] + 2) * r1));
      xx += i * d;
      ans = min(ans, xx);
      cout << ans << endl;
      return 0;
    }
  }
  return 0;
  for (long long i = 0; i < n; i++) {
    long long mi = it[i] * r1 + r3;
    mi = min(mi, 2 * d + min(r2 + r1, (it[i] + 2) * r1));
    pre[i] = mi;
    if (i > 0) {
      pre[i] += pre[i - 1];
    }
  }
  ans += pre[n - 1];
  for (long long i = 0; i < n; i++) {
    cout << pre[i] << ":";
  }
  cout << endl;
  long long su = 0;
  long long ii = n - 1;
  long long mii = it[ii] * r1 + r3;
  mii = min(mii, 3 * d + min(r2 + r1, (it[ii] + 2) * r1));
  su += mii;
  long long maa = it[ii] * r1 + r3;
  maa = min(maa, min(r2 + r1, (it[ii] + 2) * r1));
  cout << mii << "//" << maa << endl;
  for (long long i = n - 2; i >= 0; i--) {
    su += d;
    long long ma = it[i] * r1 + r3;
    ma = min(ma, min(r2 + r1, (it[i] + 2) * r1));
    su += ma;
    long long coo = 0;
    if (i > 0) {
      coo += pre[i - 1];
    }
    ans = min(ans, su + coo);
    long long cot = su + coo + (n - 1 - i) * d;
    cot -= mii;
    cot += maa;
    ans = min(ans, cot);
    cout << coo + su << ":";
  }
  cout << endl;
  cout << ans + (n - 1) * d << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 4 8 9 1
1 8 1 8 7 8 1 8 10 4 7 7 3 2 6 7 3 7 3 7 1 8 5 7 4 10 9 7 3 4 7 7 4 9 6 10 4 5 5 2 5 3 9 2 8 3 7 8 8 8 10 4 7 2 3 6 2 8 9 9 7 4 8 6 5 8 5 2 5 10 3 6 2 8 1 3 3 7 6 1 5 8 9 9 2 2 9 3 7 3 3 3 10 10 3 5 10 1 3 3


(G.2) Fast Input

12 3 9 9 8
5 1 9 4 2 10 7 3 8 1 7 10


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, r1, r2, r3, d; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long it[1000001]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long pre[1000001]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long pre2[1000001]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[1000001]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> r1 >> r2 >> r3 >> d; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) { /* line 12 slow_hit_count: 101, fast_hit_count: 13 */
    cin >> it[i]; /* line 13 slow_hit_count: 100, fast_hit_count: 12 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) { /* line 16 slow_hit_count: 101, fast_hit_count: 13 */
    long long mi = it[i] * r1 + r3; /* line 17 slow_hit_count: 100, fast_hit_count: 12 */
    mi = min(mi, min(r2 + r1, (it[i] + 2) * r1)); /* line 18 slow_hit_count: 100, fast_hit_count: 12 */
    pre2[i + 1] = pre2[i] + mi; /* line 19 slow_hit_count: 100, fast_hit_count: 12 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  multiset<long long> cur; /* line 21 slow_hit_count: 2, fast_hit_count: 2 */
  multiset<long long> cur2; /* line 22 slow_hit_count: 2, fast_hit_count: 2 */
  long long ba = 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) { /* line 24 slow_hit_count: 100, fast_hit_count: 12 */
    dp[i] = pre2[i + 1] + 2 * d * i; /* line 25 slow_hit_count: 100, fast_hit_count: 12 */
    if (i == 0) { /* line 26 slow_hit_count: 100, fast_hit_count: 12 */
      dp[i] += 2 * d; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    if (cur.size() > 0) { /* line 29 slow_hit_count: 100, fast_hit_count: 12 */
      long long xx = *cur.begin(); /* line 30 slow_hit_count: 99, fast_hit_count: 11 */
      dp[i] = min(dp[i], pre2[i + 1] + xx + 2 * i * d); /* line 31 slow_hit_count: 99, fast_hit_count: 11 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    if (i > 0) { /* line 33 slow_hit_count: 100, fast_hit_count: 12 */
      dp[i] = min(dp[i], dp[i - 1] + it[i] * r1 + r3); /* line 34 slow_hit_count: 99, fast_hit_count: 11 */
    } else { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      dp[i] = min(dp[i], it[i] * r1 + r3); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    if (i == n - 1) { /* line 38 slow_hit_count: 100, fast_hit_count: 12 */
      long long ans = dp[n - 1]; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
      long long xx = *cur2.begin(); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
      ans = min(ans, pre2[i + 1] + xx + i * d + 2 * d); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
      ans = min(ans, pre2[i] + xx + i * d + it[i] * r1 + r3); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
      ans = min(ans, dp[n - 3] + pre2[i + 1] - pre2[i - 1] + 2 * d); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
      cout << ans + (n - 1) * d << endl; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
      return 0; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    long long cot = 0; /* line 47 slow_hit_count: 99, fast_hit_count: 11 */
    if (i > 0) { /* line 48 slow_hit_count: 99, fast_hit_count: 11 */
      cot = dp[i - 1]; /* line 49 slow_hit_count: 98, fast_hit_count: 10 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    cur.insert(-pre2[i] - 2 * i * d + cot); /* line 51 slow_hit_count: 99, fast_hit_count: 11 */
    cur2.insert(-pre2[i] - i * d + cot); /* line 52 slow_hit_count: 99, fast_hit_count: 11 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < n; i++) { /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    long long kk = 0; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    if (cur.size()) { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
      long long xx = *(cur.begin()); /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
      xx += pre2[i + 1]; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
      xx += i * d * 2; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      kk = xx; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    cur.insert(ba - pre2[i] - i * 2 * d); /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    cur2.insert(ba - pre2[i] - i * d); /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
    ba = ba + it[i] * r1 + r3; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
    ba = min(ba, kk + it[i] * r1 + r3); /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ba << ":" << kk << endl; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    if (i == n - 1) { /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
      long long ans = ba; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
      long long xx = *(cur2.begin()); /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
      xx += pre2[i] + /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
            min(it[i] * r1 + r3, 2 * d + min(r2 + r1, (it[i] + 2) * r1)); /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
      xx += i * d; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
      ans = min(ans, xx); /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
      cout << ans << endl; /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < n; i++) { /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
    long long mi = it[i] * r1 + r3; /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
    mi = min(mi, 2 * d + min(r2 + r1, (it[i] + 2) * r1)); /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
    pre[i] = mi; /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
    if (i > 0) { /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
      pre[i] += pre[i - 1]; /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  ans += pre[n - 1]; /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < n; i++) { /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
    cout << pre[i] << ":"; /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
  cout << endl; /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  long long su = 0; /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  long long ii = n - 1; /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  long long mii = it[ii] * r1 + r3; /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  mii = min(mii, 3 * d + min(r2 + r1, (it[ii] + 2) * r1)); /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
  su += mii; /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
  long long maa = it[ii] * r1 + r3; /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
  maa = min(maa, min(r2 + r1, (it[ii] + 2) * r1)); /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
  cout << mii << "//" << maa << endl; /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = n - 2; i >= 0; i--) { /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
    su += d; /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
    long long ma = it[i] * r1 + r3; /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
    ma = min(ma, min(r2 + r1, (it[i] + 2) * r1)); /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
    su += ma; /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
    long long coo = 0; /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
    if (i > 0) { /* line 107 slow_hit_count: 0, fast_hit_count: 0 */
      coo += pre[i - 1]; /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
    ans = min(ans, su + coo); /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
    long long cot = su + coo + (n - 1 - i) * d; /* line 111 slow_hit_count: 0, fast_hit_count: 0 */
    cot -= mii; /* line 112 slow_hit_count: 0, fast_hit_count: 0 */
    cot += maa; /* line 113 slow_hit_count: 0, fast_hit_count: 0 */
    ans = min(ans, cot); /* line 114 slow_hit_count: 0, fast_hit_count: 0 */
    cout << coo + su << ":"; /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
  cout << endl; /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans + (n - 1) * d << endl; /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 119 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 120 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the analysis of the provided C code and the hit counts for both the slow and fast inputs, here are the performance-characterizing invariants:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Loop Iterations and Multisets**:
   - The loops from lines 16-53 and the use of multiset operations inside them (like insertion and retrieval) are hit significantly more often in the slow input than in the fast input (lines 16, 24, 31, 34, 51, 52).
   - The use of `multiset` suggests that the dynamic sorting and accessing of elements might be contributing to the performance bottleneck, particularly when dealing with larger numbers of iterations.

2. **Conditional Checks and DP Calculations**:
   - The conditional checks and calculations associated with dynamic programming (DP) updates are frequently hit, which may indicate complex branching logic leading to inefficient execution paths. This is evidenced by lines such as 29-31 and 33-34.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant Related to Loop Iterations and Multisets**:
   - **Natural Language Description**: "When the number of levels (n) approaches its upper bound, and each level has a diverse configuration of monsters (leading to multiple multiset operations), the performance may degrade due to increased computational overhead in managing these operations."
   - **Explanation**: The use of multisets for managing costs and potential strategies relies on frequent insertion and retrieval operations, which can become costly when the input size grows close to its maximum or when the diversity of monster configurations causes repeated adjustments.

2. **Invariant Related to Conditional Branching and DP Updates**:
   - **Natural Language Description**: "If the strategy space for defeating monsters requires complex decision-making (indicated by frequent DP updates and branching), especially with high values of reload or teleportation times, the performance is likely to slow down due to increased computational complexity."
   - **Explanation**: The dynamic programming approach used in the code involves evaluating multiple strategies and updating the minimum cost frequently. If the parameters like reload times or teleportation times are significant, they can lead to more complex calculations and slower performance.

3. **Invariant Related to High Teleportation and Reload Times**:
   - **Natural Language Description**: "When the teleportation time (d) and the reload times (r1, r2, r3) are high, especially when combined with large monster counts in levels, the program may experience slow execution due to increased time spent on moving and loading operations."
   - **Explanation**: High values in these parameters increase the overall time calculations and can slow down the decision-making process in choosing the optimal sequence of actions across levels.

By capturing these conditions in fuzz testing or performance profiling, one can more readily detect and address slow execution paths within this C program.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ziota found a video game called "Monster Invaders".

Similar to every other shooting RPG game, "Monster Invaders" involves killing monsters and bosses with guns.

For the sake of simplicity, we only consider two different types of monsters and three different types of guns.

Namely, the two types of monsters are: 

  * a normal monster with 1 hp. 
  * a boss with 2 hp. 



And the three types of guns are: 

  * Pistol, deals 1 hp in damage to one monster, r_1 reloading time 
  * Laser gun, deals 1 hp in damage to all the monsters in the current level (including the boss), r_2 reloading time 
  * AWP, instantly kills any monster, r_3 reloading time 



The guns are initially not loaded, and the Ziota can only reload 1 gun at a time.

The levels of the game can be considered as an array a_1, a_2, …, a_n, in which the i-th stage has a_i normal monsters and 1 boss. Due to the nature of the game, Ziota cannot use the Pistol (the first type of gun) or AWP (the third type of gun) to shoot the boss before killing all of the a_i normal monsters.

If Ziota damages the boss but does not kill it immediately, he is forced to move out of the current level to an arbitrary adjacent level (adjacent levels of level i (1 < i < n) are levels i - 1 and i + 1, the only adjacent level of level 1 is level 2, the only adjacent level of level n is level n - 1). Ziota can also choose to move to an adjacent level at any time. Each move between adjacent levels are managed by portals with d teleportation time.

In order not to disrupt the space-time continuum within the game, it is strictly forbidden to reload or shoot monsters during teleportation. 

Ziota starts the game at level 1. The objective of the game is rather simple, to kill all the bosses in all the levels. He is curious about the minimum time to finish the game (assuming it takes no time to shoot the monsters with a loaded gun and Ziota has infinite ammo on all the three guns). Please help him find this value.

Input

The first line of the input contains five integers separated by single spaces: n (2 ≤ n ≤ 10^6) — the number of stages, r_1, r_2, r_3 (1 ≤ r_1 ≤ r_2 ≤ r_3 ≤ 10^9) — the reload time of the three guns respectively, d (1 ≤ d ≤ 10^9) — the time of moving between adjacent levels.

The second line of the input contains n integers separated by single spaces a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6, 1 ≤ i ≤ n).

Output

Print one integer, the minimum time to finish the game.

Examples

Input


4 1 3 4 3
3 2 5 1


Output


34

Input


4 2 4 4 1
4 5 1 2


Output


31

Note

In the first test case, the optimal strategy is:

  * Use the pistol to kill three normal monsters and AWP to kill the boss (Total time 1⋅3+4=7) 
  * Move to stage two (Total time 7+3=10) 
  * Use the pistol twice and AWP to kill the boss (Total time 10+1⋅2+4=16) 
  * Move to stage three (Total time 16+3=19) 
  * Use the laser gun and forced to move to either stage four or two, here we move to stage four (Total time 19+3+3=25) 
  * Use the pistol once, use AWP to kill the boss (Total time 25+1⋅1+4=30) 
  * Move back to stage three (Total time 30+3=33) 
  * Kill the boss at stage three with the pistol (Total time 33+1=34) 



Note that here, we do not finish at level n, but when all the bosses are killed.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

For each invariant derived in Phase 2, let's write the specific C++ code that checks for these conditions:

1. **Invariant Related to Loop Iterations and Multisets**:
   - **Natural Language Description**: "When the number of levels (n) approaches its upper bound, and each level has a diverse configuration of monsters (leading to multiple multiset operations), the performance may degrade due to increased computational overhead in managing these operations."

```cpp
// Function to check if number of iterations and multiset usage could lead to performance issues
void check_multiset_invariant(long long n, const std::multiset<long long>& cur) {
    if (n > 100000 && cur.size() > n / 10) {
        cerr << "Warning: multiset_invariant triggered - excessive multiset operations with large n" << endl;
        abort();
    }
}
```

2. **Invariant Related to Conditional Branching and DP Updates**:
   - **Natural Language Description**: "If the strategy space for defeating monsters requires complex decision-making (indicated by frequent DP updates and branching), especially with high values of reload or teleportation times, the performance is likely to slow down due to increased computational complexity."

```cpp
// Function to check if DP updates and branching could cause performance issues
void check_dp_invariant(long long d, long long r1, long long r2, long long r3) {
    if ((d > 1000000 || r1 > 1000000 || r2 > 1000000 || r3 > 1000000)) {
        cerr << "Warning: dp_invariant triggered - high reload/teleportation times affecting DP" << endl;
        abort();
    }
}
```

3. **Invariant Related to High Teleportation and Reload Times**:
   - **Natural Language Description**: "When the teleportation time (d) and the reload times (r1, r2, r3) are high, especially when combined with large monster counts in levels, the program may experience slow execution due to increased time spent on moving and loading operations."

```cpp
// Function to check if teleportation and reload times could cause performance issues
void check_time_invariant(long long d, long long r1, long long r2, long long r3, const vector<long long>& it) {
    long long max_monsters = *max_element(it.begin(), it.end());
    if ((d + r1 + r2 + r3) > 3000000 && max_monsters > 100000) {
        cerr << "Warning: time_invariant triggered - high teleportation/reload times with large monster counts" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Code

Now, we will insert these checkers into the provided C++ program at appropriate places. We will insert the checks after input reading and before any heavy computation starts.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check if number of iterations and multiset usage could lead to performance issues
void check_multiset_invariant(long long n, const std::multiset<long long>& cur) {
    if (n > 100000 && cur.size() > n / 10) {
        cerr << "Warning: multiset_invariant triggered - excessive multiset operations with large n" << endl;
        abort();
    }
}

// Function to check if DP updates and branching could cause performance issues
void check_dp_invariant(long long d, long long r1, long long r2, long long r3) {
    if ((d > 1000000 || r1 > 1000000 || r2 > 1000000 || r3 > 1000000)) {
        cerr << "Warning: dp_invariant triggered - high reload/teleportation times affecting DP" << endl;
        abort();
    }
}

// Function to check if teleportation and reload times could cause performance issues
void check_time_invariant(long long d, long long r1, long long r2, long long r3, const vector<long long>& it) {
    long long max_monsters = *max_element(it.begin(), it.end());
    if ((d + r1 + r2 + r3) > 3000000 && max_monsters > 100000) {
        cerr << "Warning: time_invariant triggered - high teleportation/reload times with large monster counts" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    long long n, r1, r2, r3, d;
    cin >> n >> r1 >> r2 >> r3 >> d;
    
    vector<long long> it(n);
    for (long long i = 0; i < n; i++) {
        cin >> it[i];
    }
    
    // Insert invariants checks here
    check_dp_invariant(d, r1, r2, r3);
    check_time_invariant(d, r1, r2, r3, it);

    long long ans = 0;
    vector<long long> pre2(n + 1, 0), dp(n, 0);
    multiset<long long> cur, cur2;
    
    for (long long i = 0; i < n; i++) {
        long long mi = it[i] * r1 + r3;
        mi = min(mi, min(r2 + r1, (it[i] + 2) * r1));
        pre2[i + 1] = pre2[i] + mi;
    }
    
    long long ba = 0;
    for (long long i = 0; i < n; i++) {
        dp[i] = pre2[i + 1] + 2 * d * i;
        if (i == 0) {
            dp[i] += 2 * d;
        }
        if (!cur.empty()) {
            long long xx = *cur.begin();
            dp[i] = min(dp[i], pre2[i + 1] + xx + 2 * i * d);
        }
        if (i > 0) {
            dp[i] = min(dp[i], dp[i - 1] + it[i] * r1 + r3);
        } else {
            dp[i] = min(dp[i], it[i] * r1 + r3);
        }
        if (i == n - 1) {
            long long ans = dp[n - 1];
            long long xx = *cur2.begin();
            ans = min(ans, pre2[i + 1] + xx + i * d + 2 * d);
            ans = min(ans, pre2[i] + xx + i * d + it[i] * r1 + r3);
            ans = min(ans, dp[n - 3] + pre2[i + 1] - pre2[i - 1] + 2 * d);
            cout << ans + (n - 1) * d << endl;
            return 0;
        }
        long long cot = 0;
        if (i > 0) {
            cot = dp[i - 1];
        }
        cur.insert(-pre2[i] - 2 * i * d + cot);
        cur2.insert(-pre2[i] - i * d + cot);

        // Check multiset invariant after insertions
        check_multiset_invariant(n, cur);
    }
    
    return 0;
}
```

### Explanation of Integration Points
- **Input Reading**: The checks for `dp_invariant` and `time_invariant` are added after reading the input variables, as these conditions rely on parameters like reload and teleportation times.
- **Multiset Operations**: The `multiset_invariant` check is placed right after the multiset operations. This helps detect excessive operations due to large `n` and diverse configurations.
- **Comments**: Each checker has an associated comment explaining its purpose.

