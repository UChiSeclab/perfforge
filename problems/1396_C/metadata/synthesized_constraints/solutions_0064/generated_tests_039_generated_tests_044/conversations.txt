system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ziota found a video game called "Monster Invaders".

Similar to every other shooting RPG game, "Monster Invaders" involves killing monsters and bosses with guns.

For the sake of simplicity, we only consider two different types of monsters and three different types of guns.

Namely, the two types of monsters are: 

  * a normal monster with 1 hp. 
  * a boss with 2 hp. 



And the three types of guns are: 

  * Pistol, deals 1 hp in damage to one monster, r_1 reloading time 
  * Laser gun, deals 1 hp in damage to all the monsters in the current level (including the boss), r_2 reloading time 
  * AWP, instantly kills any monster, r_3 reloading time 



The guns are initially not loaded, and the Ziota can only reload 1 gun at a time.

The levels of the game can be considered as an array a_1, a_2, …, a_n, in which the i-th stage has a_i normal monsters and 1 boss. Due to the nature of the game, Ziota cannot use the Pistol (the first type of gun) or AWP (the third type of gun) to shoot the boss before killing all of the a_i normal monsters.

If Ziota damages the boss but does not kill it immediately, he is forced to move out of the current level to an arbitrary adjacent level (adjacent levels of level i (1 < i < n) are levels i - 1 and i + 1, the only adjacent level of level 1 is level 2, the only adjacent level of level n is level n - 1). Ziota can also choose to move to an adjacent level at any time. Each move between adjacent levels are managed by portals with d teleportation time.

In order not to disrupt the space-time continuum within the game, it is strictly forbidden to reload or shoot monsters during teleportation. 

Ziota starts the game at level 1. The objective of the game is rather simple, to kill all the bosses in all the levels. He is curious about the minimum time to finish the game (assuming it takes no time to shoot the monsters with a loaded gun and Ziota has infinite ammo on all the three guns). Please help him find this value.

Input

The first line of the input contains five integers separated by single spaces: n (2 ≤ n ≤ 10^6) — the number of stages, r_1, r_2, r_3 (1 ≤ r_1 ≤ r_2 ≤ r_3 ≤ 10^9) — the reload time of the three guns respectively, d (1 ≤ d ≤ 10^9) — the time of moving between adjacent levels.

The second line of the input contains n integers separated by single spaces a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6, 1 ≤ i ≤ n).

Output

Print one integer, the minimum time to finish the game.

Examples

Input


4 1 3 4 3
3 2 5 1


Output


34

Input


4 2 4 4 1
4 5 1 2


Output


31

Note

In the first test case, the optimal strategy is:

  * Use the pistol to kill three normal monsters and AWP to kill the boss (Total time 1⋅3+4=7) 
  * Move to stage two (Total time 7+3=10) 
  * Use the pistol twice and AWP to kill the boss (Total time 10+1⋅2+4=16) 
  * Move to stage three (Total time 16+3=19) 
  * Use the laser gun and forced to move to either stage four or two, here we move to stage four (Total time 19+3+3=25) 
  * Use the pistol once, use AWP to kill the boss (Total time 25+1⋅1+4=30) 
  * Move back to stage three (Total time 30+3=33) 
  * Kill the boss at stage three with the pistol (Total time 33+1=34) 



Note that here, we do not finish at level n, but when all the bosses are killed.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1e6 + 40;
const long long INFLL = 1e18;
long long dp[N][3][2][2];
signed main() {
  srand(time(NULL));
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  int n;
  long long r1, r2, r3, d;
  cin >> n >> r1 >> r2 >> r3 >> d;
  vector<long long> a(n);
  for (int(i) = 0; (i) != (n); (i)++) cin >> a[i];
  for (int(i) = 0; (i) != (n); (i)++) {
    for (int(j) = 0; (j) != (3); (j)++) {
      for (int(k) = 0; (k) != (2); (k)++) {
        dp[i][j][k][0] = dp[i][j][k][1] = INFLL;
      }
    }
  }
  dp[0][2][0][0] = 0;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < 30; j++) {
      dp[i][2][0][0] = min(dp[i][2][0][0], dp[i][2][1][0] + 2 * d + r1);
      dp[i][2][0][0] = min(dp[i][2][0][0], dp[i][2][1][1] + 2 * d + r1);
      dp[i][1][0][0] = min(dp[i][1][0][0], dp[i][1][1][0] + 2 * d + r1);
      dp[i][1][0][0] = min(dp[i][1][0][0], dp[i][1][1][1] + 2 * d + r1);
      dp[i][0][0][0] = min(dp[i][0][0][0], dp[i][0][1][0] + 2 * d + r1);
      dp[i][0][0][0] = min(dp[i][0][0][0], dp[i][0][1][1] + 2 * d + r1);
      dp[i][0][0][0] = min(dp[i][0][0][0], dp[i][2][0][0] + a[i] * r1 + r3);
      dp[i][0][1][0] = min(dp[i][0][1][0], dp[i][2][1][0] + a[i] * r1 + r3);
      dp[i][1][0][1] =
          min(dp[i][1][0][1], dp[i][2][0][0] + min(r2, a[i] * r1 + r1));
      dp[i][1][1][1] =
          min(dp[i][1][1][1], dp[i][2][1][0] + min(r2, a[i] * r1 + r1));
      dp[i][0][0][0] = min(dp[i][0][0][0], dp[i][1][0][0] + r1);
      dp[i][0][1][0] = min(dp[i][0][1][0], dp[i][1][1][0] + r1);
      dp[i + 1][2][0][0] = min(dp[i + 1][2][0][0], dp[i][0][0][0] + d);
      dp[i + 1][2][0][0] = min(dp[i + 1][2][0][0], dp[i][0][0][1] + d);
      dp[i + 1][2][1][0] = min(dp[i + 1][2][1][0], dp[i][1][0][0] + d);
      dp[i + 1][2][1][0] = min(dp[i + 1][2][1][0], dp[i][1][0][1] + d);
    }
  }
  cout << min(dp[n - 1][0][0][0], dp[n - 1][0][1][0] + d + r1);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 4 8 9 1
1 8 0 8 7 8 1 8 10 4 7 7 3 2 6 7 3 7 3 7 1 8 7 7 4 10 9 7 3 4 7 7 4 9 6 10 4 5 5 2 5 3 9 2 8 3 1 8 8 8 10 4 7 2 1 6 2 8 9 9 7 4 8 6 5 8 5 2 5 16 3 6 2 8 1 3 3 7 6 1 5 8 9 9 2 2 9 3 7 3 3 3 10 10 3 5 10 1 3 3


(G.2) Fast Input

35 2 5 6 3
6 8 3 4 2 1 1 10 1 2 2 4 4 2 10 1 1 6 3 8 10 6 3 4 0 8 9 7 9 35 3 16 4 6 7


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e6 + 40; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long INFLL = 1e18; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[N][3][2][2]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  srand(time(NULL)); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  long long r1, r2, r3, d; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> r1 >> r2 >> r3 >> d; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> a(n); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int(i) = 0; (i) != (n); (i)++) cin >> a[i]; /* line 15 slow_hit_count: 101, fast_hit_count: 36 */
  for (int(i) = 0; (i) != (n); (i)++) { /* line 16 slow_hit_count: 101, fast_hit_count: 36 */
    for (int(j) = 0; (j) != (3); (j)++) { /* line 17 slow_hit_count: 400, fast_hit_count: 140 */
      for (int(k) = 0; (k) != (2); (k)++) { /* line 18 slow_hit_count: 900, fast_hit_count: 315 */
        dp[i][j][k][0] = dp[i][j][k][1] = INFLL; /* line 19 slow_hit_count: 600, fast_hit_count: 210 */
      } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  dp[0][2][0][0] = 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 24 slow_hit_count: 101, fast_hit_count: 36 */
    for (int j = 0; j < 30; j++) { /* line 25 slow_hit_count: 3100, fast_hit_count: 1085 */
      dp[i][2][0][0] = min(dp[i][2][0][0], dp[i][2][1][0] + 2 * d + r1); /* line 26 slow_hit_count: 3000, fast_hit_count: 1050 */
      dp[i][2][0][0] = min(dp[i][2][0][0], dp[i][2][1][1] + 2 * d + r1); /* line 27 slow_hit_count: 3000, fast_hit_count: 1050 */
      dp[i][1][0][0] = min(dp[i][1][0][0], dp[i][1][1][0] + 2 * d + r1); /* line 28 slow_hit_count: 3000, fast_hit_count: 1050 */
      dp[i][1][0][0] = min(dp[i][1][0][0], dp[i][1][1][1] + 2 * d + r1); /* line 29 slow_hit_count: 3000, fast_hit_count: 1050 */
      dp[i][0][0][0] = min(dp[i][0][0][0], dp[i][0][1][0] + 2 * d + r1); /* line 30 slow_hit_count: 3000, fast_hit_count: 1050 */
      dp[i][0][0][0] = min(dp[i][0][0][0], dp[i][0][1][1] + 2 * d + r1); /* line 31 slow_hit_count: 3000, fast_hit_count: 1050 */
      dp[i][0][0][0] = min(dp[i][0][0][0], dp[i][2][0][0] + a[i] * r1 + r3); /* line 32 slow_hit_count: 3000, fast_hit_count: 1050 */
      dp[i][0][1][0] = min(dp[i][0][1][0], dp[i][2][1][0] + a[i] * r1 + r3); /* line 33 slow_hit_count: 3000, fast_hit_count: 1050 */
      dp[i][1][0][1] = /* line 34 slow_hit_count: 3000, fast_hit_count: 1050 */
          min(dp[i][1][0][1], dp[i][2][0][0] + min(r2, a[i] * r1 + r1)); /* line 35 slow_hit_count: 3000, fast_hit_count: 1050 */
      dp[i][1][1][1] = /* line 36 slow_hit_count: 3000, fast_hit_count: 1050 */
          min(dp[i][1][1][1], dp[i][2][1][0] + min(r2, a[i] * r1 + r1)); /* line 37 slow_hit_count: 3000, fast_hit_count: 1050 */
      dp[i][0][0][0] = min(dp[i][0][0][0], dp[i][1][0][0] + r1); /* line 38 slow_hit_count: 3000, fast_hit_count: 1050 */
      dp[i][0][1][0] = min(dp[i][0][1][0], dp[i][1][1][0] + r1); /* line 39 slow_hit_count: 3000, fast_hit_count: 1050 */
      dp[i + 1][2][0][0] = min(dp[i + 1][2][0][0], dp[i][0][0][0] + d); /* line 40 slow_hit_count: 3000, fast_hit_count: 1050 */
      dp[i + 1][2][0][0] = min(dp[i + 1][2][0][0], dp[i][0][0][1] + d); /* line 41 slow_hit_count: 3000, fast_hit_count: 1050 */
      dp[i + 1][2][1][0] = min(dp[i + 1][2][1][0], dp[i][1][0][0] + d); /* line 42 slow_hit_count: 3000, fast_hit_count: 1050 */
      dp[i + 1][2][1][0] = min(dp[i + 1][2][1][0], dp[i][1][0][1] + d); /* line 43 slow_hit_count: 3000, fast_hit_count: 1050 */
    } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  cout << min(dp[n - 1][0][0][0], dp[n - 1][0][1][0] + d + r1); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 47 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottleneck and derive performance-characterizing invariants, we need to analyze the given C++ program and compare the hit counts for the fast and slow inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information provided, the slow input results in significantly higher line execution counts for certain parts of the code compared to the fast input. 

Key observations:
- **Initialization of `dp` array (lines 16-22)**: The initialization loop has a relatively higher hit count in both scenarios, suggesting it scales with `n`.
- **The nested loops in lines 24-43**: These loops are executed with indices up to `n` for the outer loop and a constant (30) for the inner loop. This results in a quadratic-like pattern where the number of stages `n` and possibly high values in the inner logic contribute to increased execution time.
  
The critical section contributing to the slowdown is the nested loop structure (lines 24-43), particularly influenced by the `n` value and the complexity inside the loops which frequently update the `dp` array. The particular logic involving multiple `min` functions and accessing the multidimensional array `dp` is computationally intensive.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the code analysis and hit count discrepancies between the slow and fast inputs, here are some natural language performance invariants:

1. **Large Number of Levels**: "If the number of game levels `n` is large, the nested loops inside the dynamic programming logic increase significantly, causing performance degradation due to the repetitive calculations and updates on a large `dp` array."

2. **Complexity of Monstr Levels**: "When stages contain a high number of normal monsters, the dp transitions and calculations for each stage become increasingly complex and time-consuming, especially when using nested loops to evaluate various gun reload strategies."

3. **Heavy Computational Overhead in DP Transition**: "If the reload times of guns and the teleportation time are not optimized relative to the number of monsters, the inner loop checks and dp updates become heavier, leading to increased execution time."

These invariants focus on the structural complexity inherent in how the game levels (`n`) and monster distributions (`a[i]`) interact with the dynamic programming solution, particularly how they translate into the high computational load inside the nested loops that process each level's configuration with respect to the available guns and strategies. This abstract understanding helps identify potential slow scenarios without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ziota found a video game called "Monster Invaders".

Similar to every other shooting RPG game, "Monster Invaders" involves killing monsters and bosses with guns.

For the sake of simplicity, we only consider two different types of monsters and three different types of guns.

Namely, the two types of monsters are: 

  * a normal monster with 1 hp. 
  * a boss with 2 hp. 



And the three types of guns are: 

  * Pistol, deals 1 hp in damage to one monster, r_1 reloading time 
  * Laser gun, deals 1 hp in damage to all the monsters in the current level (including the boss), r_2 reloading time 
  * AWP, instantly kills any monster, r_3 reloading time 



The guns are initially not loaded, and the Ziota can only reload 1 gun at a time.

The levels of the game can be considered as an array a_1, a_2, …, a_n, in which the i-th stage has a_i normal monsters and 1 boss. Due to the nature of the game, Ziota cannot use the Pistol (the first type of gun) or AWP (the third type of gun) to shoot the boss before killing all of the a_i normal monsters.

If Ziota damages the boss but does not kill it immediately, he is forced to move out of the current level to an arbitrary adjacent level (adjacent levels of level i (1 < i < n) are levels i - 1 and i + 1, the only adjacent level of level 1 is level 2, the only adjacent level of level n is level n - 1). Ziota can also choose to move to an adjacent level at any time. Each move between adjacent levels are managed by portals with d teleportation time.

In order not to disrupt the space-time continuum within the game, it is strictly forbidden to reload or shoot monsters during teleportation. 

Ziota starts the game at level 1. The objective of the game is rather simple, to kill all the bosses in all the levels. He is curious about the minimum time to finish the game (assuming it takes no time to shoot the monsters with a loaded gun and Ziota has infinite ammo on all the three guns). Please help him find this value.

Input

The first line of the input contains five integers separated by single spaces: n (2 ≤ n ≤ 10^6) — the number of stages, r_1, r_2, r_3 (1 ≤ r_1 ≤ r_2 ≤ r_3 ≤ 10^9) — the reload time of the three guns respectively, d (1 ≤ d ≤ 10^9) — the time of moving between adjacent levels.

The second line of the input contains n integers separated by single spaces a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6, 1 ≤ i ≤ n).

Output

Print one integer, the minimum time to finish the game.

Examples

Input


4 1 3 4 3
3 2 5 1


Output


34

Input


4 2 4 4 1
4 5 1 2


Output


31

Note

In the first test case, the optimal strategy is:

  * Use the pistol to kill three normal monsters and AWP to kill the boss (Total time 1⋅3+4=7) 
  * Move to stage two (Total time 7+3=10) 
  * Use the pistol twice and AWP to kill the boss (Total time 10+1⋅2+4=16) 
  * Move to stage three (Total time 16+3=19) 
  * Use the laser gun and forced to move to either stage four or two, here we move to stage four (Total time 19+3+3=25) 
  * Use the pistol once, use AWP to kill the boss (Total time 25+1⋅1+4=30) 
  * Move back to stage three (Total time 30+3=33) 
  * Kill the boss at stage three with the pistol (Total time 33+1=34) 



Note that here, we do not finish at level n, but when all the bosses are killed.

Solution (C++ code):
{solution}


assistant: Sure, let's proceed with translating the performance-characterizing invariants into C++ checker code and then integrating that code into the original program.

### Phase 3: Implement Checker Code in C++

For each natural language invariant derived earlier, we'll create a C++ function or inline check using the provided template.

1. **Large Number of Levels**:
   - **Invariant**: "If the number of game levels `n` is large, the nested loops inside the dynamic programming logic increase significantly."
   - **Checker Code**:
   ```cpp
   void check_large_n(int n) {
       if (n > 100000) { // Threshold chosen based on problem constraints
           cerr << "Warning: Performance bottleneck condition triggered - too many levels!" << endl;
           abort();
       }
   }
   ```

2. **Complexity of Monster Levels**:
   - **Invariant**: "When stages contain a high number of normal monsters, the dp transitions and calculations for each stage become increasingly complex."
   - **Checker Code**:
   ```cpp
   void check_complex_monsters(const vector<long long>& a) {
       for (const auto& monsters : a) {
           if (monsters > 10000) { // Arbitrary threshold to detect high complexity
               cerr << "Warning: Performance bottleneck condition triggered - complex monster levels!" << endl;
               abort();
           }
       }
   }
   ```

3. **Heavy Computational Overhead in DP Transition**:
   - **Invariant**: "If the reload times of guns and the teleportation time are not optimized relative to the number of monsters, the computation becomes heavier."
   - **Checker Code**:
   ```cpp
   void check_unoptimized_guns(long long r1, long long r2, long long r3, long long d) {
       if (r3 > 50 * r1 && r3 > 50 * r2 && d > 100) { // Arbitrary relation between reload and teleport time
           cerr << "Warning: Performance bottleneck condition triggered - unoptimized gun configuration!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

Now, integrate these checkers into the original C++ program at effective points in the control flow.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 1e6 + 40;
const long long INFLL = 1e18;
long long dp[N][3][2][2];

void check_large_n(int n) {
    if (n > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - too many levels!" << endl;
        abort();
    }
}

void check_complex_monsters(const vector<long long>& a) {
    for (const auto& monsters : a) {
        if (monsters > 10000) {
            cerr << "Warning: Performance bottleneck condition triggered - complex monster levels!" << endl;
            abort();
        }
    }
}

void check_unoptimized_guns(long long r1, long long r2, long long r3, long long d) {
    if (r3 > 50 * r1 && r3 > 50 * r2 && d > 100) {
        cerr << "Warning: Performance bottleneck condition triggered - unoptimized gun configuration!" << endl;
        abort();
    }
}

signed main() {
    srand(time(NULL));
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    int n;
    long long r1, r2, r3, d;
    cin >> n >> r1 >> r2 >> r3 >> d;
    
    // Place checks after reading inputs
    check_large_n(n);
    check_unoptimized_guns(r1, r2, r3, d);
    
    vector<long long> a(n);
    for (int(i) = 0; (i) != (n); (i)++) cin >> a[i];
    
    // Place check for complexity of monster levels
    check_complex_monsters(a);
    
    for (int(i) = 0; (i) != (n); (i)++) {
        for (int(j) = 0; (j) != (3); (j)++) {
            for (int(k) = 0; (k) != (2); (k)++) {
                dp[i][j][k][0] = dp[i][j][k][1] = INFLL;
            }
        }
    }
    dp[0][2][0][0] = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < 30; j++) {
            dp[i][2][0][0] = min(dp[i][2][0][0], dp[i][2][1][0] + 2 * d + r1);
            dp[i][2][0][0] = min(dp[i][2][0][0], dp[i][2][1][1] + 2 * d + r1);
            dp[i][1][0][0] = min(dp[i][1][0][0], dp[i][1][1][0] + 2 * d + r1);
            dp[i][1][0][0] = min(dp[i][1][0][0], dp[i][1][1][1] + 2 * d + r1);
            dp[i][0][0][0] = min(dp[i][0][0][0], dp[i][0][1][0] + 2 * d + r1);
            dp[i][0][0][0] = min(dp[i][0][0][0], dp[i][0][1][1] + 2 * d + r1);
            dp[i][0][0][0] = min(dp[i][0][0][0], dp[i][2][0][0] + a[i] * r1 + r3);
            dp[i][0][1][0] = min(dp[i][0][1][0], dp[i][2][1][0] + a[i] * r1 + r3);
            dp[i][1][0][1] =
                min(dp[i][1][0][1], dp[i][2][0][0] + min(r2, a[i] * r1 + r1));
            dp[i][1][1][1] =
                min(dp[i][1][1][1], dp[i][2][1][0] + min(r2, a[i] * r1 + r1));
            dp[i][0][0][0] = min(dp[i][0][0][0], dp[i][1][0][0] + r1);
            dp[i][0][1][0] = min(dp[i][0][1][0], dp[i][1][1][0] + r1);
            dp[i + 1][2][0][0] = min(dp[i + 1][2][0][0], dp[i][0][0][0] + d);
            dp[i + 1][2][0][0] = min(dp[i + 1][2][0][0], dp[i][0][0][1] + d);
            dp[i + 1][2][1][0] = min(dp[i + 1][2][1][0], dp[i][1][0][0] + d);
            dp[i + 1][2][1][0] = min(dp[i + 1][2][1][0], dp[i][1][0][1] + d);
        }
    }
    cout << min(dp[n - 1][0][0][0], dp[n - 1][0][1][0] + d + r1);
}
```

### Commentary on Integration

- **Large Number of Levels Check**: This is placed just after reading the input as `n` directly influences the loop iterations.
- **Complexity of Monster Levels Check**: This is placed after reading the array of monsters, where direct access to each stage's monster count occurs.
- **Unoptimized Gun Configuration Check**: This is checked immediately after reading the input reload times and teleport time because any misconfiguration here will lead to increased computation inside the core loops.

These checks will help a fuzzer or testing framework quickly identify configurations that could cause performance bottlenecks, allowing for more targeted optimization or input adjustments.

