system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Natasha's favourite numbers are n and 1, and Sasha's favourite numbers are m and -1. One day Natasha and Sasha met and wrote down every possible array of length n+m such that some n of its elements are equal to 1 and another m elements are equal to -1. For each such array they counted its maximal prefix sum, probably an empty one which is equal to 0 (in another words, if every nonempty prefix sum is less to zero, then it is considered equal to zero). Formally, denote as f(a) the maximal prefix sum of an array a_{1, … ,l} of length l ≥ 0. Then: 

$$$f(a) = max (0, \smash{\displaystylemax_{1 ≤ i ≤ l}} ∑_{j=1}^{i} a_j )$$$

Now they want to count the sum of maximal prefix sums for each such an array and they are asking you to help. As this sum can be very large, output it modulo 998\: 244\: 853.

Input

The only line contains two integers n and m (0 ≤ n,m ≤ 2 000).

Output

Output the answer to the problem modulo 998\: 244\: 853.

Examples

Input

0 2


Output

0


Input

2 0


Output

2


Input

2 2


Output

5


Input

2000 2000


Output

674532367

Note

In the first example the only possible array is [-1,-1], its maximal prefix sum is equal to 0. 

In the second example the only possible array is [1,1], its maximal prefix sum is equal to 2. 

There are 6 possible arrays in the third example:

[1,1,-1,-1], f([1,1,-1,-1]) = 2

[1,-1,1,-1], f([1,-1,1,-1]) = 1

[1,-1,-1,1], f([1,-1,-1,1]) = 1

[-1,1,1,-1], f([-1,1,1,-1]) = 1

[-1,1,-1,1], f([-1,1,-1,1]) = 0

[-1,-1,1,1], f([-1,-1,1,1]) = 0

So the answer for the third example is 2+1+1+1+0+0 = 5.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long DP[2005][2005] = {0};
long long C[4005][2005] = {0};
long long con[2005][2005] = {0};
long long MOD = 998244853;
long long F1(long long N, long long M) {
  if (N > M) return 0;
  if (N == 0 || M == 0) return 1;
  if (con[N][M]) return con[N][M];
  con[N][M] = F1(N - 1, M) + F1(N, M - 1);
  con[N][M] %= MOD;
  return con[N][M];
}
long long F2(long long N, long long M) {
  if (M == N || M == 0) return 1;
  if (C[N][M]) return C[N][M];
  C[N][M] = F2(N - 1, M) + F2(N - 1, M - 1);
  C[N][M] %= MOD;
  return C[N][M];
}
long long F3(long long N, long long M) {
  if (N == 0) return 0;
  if (M == 0) return N;
  if (DP[N][M]) return DP[N][M];
  DP[N][M] = F3(N - 1, M) + F2(N + M - 1, M);
  DP[N][M] += F3(N, M - 1) + F1(N, M - 1) + MOD - F2(N + M - 1, N);
  DP[N][M] %= MOD;
  return DP[N][M];
}
int main() {
  long long N, M, ans = 0, i, j, k, t;
  scanf("%lld %lld", &N, &M);
  printf("%lld\n", F3(N, M));
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2000 2000


(G.2) Fast Input

2000 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long DP[2005][2005] = {0}; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long C[4005][2005] = {0}; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long con[2005][2005] = {0}; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long MOD = 998244853; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long F1(long long N, long long M) { /* line 7 slow_hit_count: 7998000, fast_hit_count: 0 */
  if (N > M) return 0; /* line 8 slow_hit_count: 7998000, fast_hit_count: 0 */
  if (N == 0 || M == 0) return 1; /* line 9 slow_hit_count: 5995001, fast_hit_count: 0 */
  if (con[N][M]) return con[N][M]; /* line 10 slow_hit_count: 5993002, fast_hit_count: 0 */
  con[N][M] = F1(N - 1, M) + F1(N, M - 1); /* line 11 slow_hit_count: 1999000, fast_hit_count: 0 */
  con[N][M] %= MOD; /* line 12 slow_hit_count: 1999000, fast_hit_count: 0 */
  return con[N][M]; /* line 13 slow_hit_count: 1999000, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
long long F2(long long N, long long M) { /* line 15 slow_hit_count: 15996000, fast_hit_count: 0 */
  if (M == N || M == 0) return 1; /* line 16 slow_hit_count: 15996000, fast_hit_count: 0 */
  if (C[N][M]) return C[N][M]; /* line 17 slow_hit_count: 15988001, fast_hit_count: 0 */
  C[N][M] = F2(N - 1, M) + F2(N - 1, M - 1); /* line 18 slow_hit_count: 3998000, fast_hit_count: 0 */
  C[N][M] %= MOD; /* line 19 slow_hit_count: 3998000, fast_hit_count: 0 */
  return C[N][M]; /* line 20 slow_hit_count: 3998000, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
long long F3(long long N, long long M) { /* line 22 slow_hit_count: 8000001, fast_hit_count: 1 */
  if (N == 0) return 0; /* line 23 slow_hit_count: 8000001, fast_hit_count: 1 */
  if (M == 0) return N; /* line 24 slow_hit_count: 7998001, fast_hit_count: 1 */
  if (DP[N][M]) return DP[N][M]; /* line 25 slow_hit_count: 7996001, fast_hit_count: 0 */
  DP[N][M] = F3(N - 1, M) + F2(N + M - 1, M); /* line 26 slow_hit_count: 4000000, fast_hit_count: 0 */
  DP[N][M] += F3(N, M - 1) + F1(N, M - 1) + MOD - F2(N + M - 1, N); /* line 27 slow_hit_count: 4000000, fast_hit_count: 0 */
  DP[N][M] %= MOD; /* line 28 slow_hit_count: 4000000, fast_hit_count: 0 */
  return DP[N][M]; /* line 29 slow_hit_count: 4000000, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  long long N, M, ans = 0, i, j, k, t; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%lld %lld", &N, &M); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  printf("%lld\n", F3(N, M)); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance characteristics of the given C program, we'll follow the specified phases and output requirements.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - For the slow input `(2000, 2000)`, the functions `F1`, `F2`, and `F3` are hit significantly more often compared to the fast input `(2000, 0)`.

2. **Pinpoint Lines with More Hits Under the Slow Input:**
   - **Function `F1`:** This function is called recursively, leading to very high hit counts, especially at lines 11-13.
   - **Function `F2`:** Similarly, `F2` has high hit counts on lines 18-20 due to recursive calls.
   - **Function `F3`:** In the slow input, `F3` is a critical function with high hits, especially on lines 26-29, as it combines results from `F1` and `F2` which are both recursive.

3. **Interaction with Data Structures:**
   - The recursion in `F1` and `F2` leads to a large number of combinations being generated and cached, causing the program to exhaustively compute results for many scenarios.
   - `F3` makes recursive calls to `F1` and `F2`, which then further deepen the recursion tree, especially for large `N` and `M`.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

1. **Invariants Describing Slow Paths:**

   **Invariant 1: Recursive Combinatorial Calculation**
   - **Natural Language Description:** "When both `n` and `m` are large, the recursive functions `F1` and `F2` are called repeatedly, leading to excessive computation due to the combinatorial nature of the problem."
   - **Implication:** The recursive calculations to find combinations and prefix sums become computationally expensive as both `n` and `m` approach their maximum constraints.

   **Invariant 2: High Recursive Depth in Dynamic Programming**
   - **Natural Language Description:** "The function `F3` heavily relies on recursive calculations from `F1` and `F2`, causing deep recursion levels and increased computation time when both `n` and `m` are large."
   - **Implication:** The depth of recursion and the branching factor increase substantially, leading to performance degradation.

   **Invariant 3: Accumulated Modulo Operations**
   - **Natural Language Description:** "The accumulation of results with modulo operations adds overhead due to repeated calculations and memory accesses, especially when many prefix sum combinations are involved."
   - **Implication:** With `n` and `m` being large, the modulo operations performed in `F2` and `F3` get frequent.

### Conclusion

In this problem, the slow performance arises primarily from the recursive nature of the problem and the resulting combinatorial explosion in calculations when both `n` and `m` values are large and equal, which leads to a significantly higher number of recursive calls and computations. The identified invariants help in understanding the problem areas and potential triggers for slow execution paths.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Natasha's favourite numbers are n and 1, and Sasha's favourite numbers are m and -1. One day Natasha and Sasha met and wrote down every possible array of length n+m such that some n of its elements are equal to 1 and another m elements are equal to -1. For each such array they counted its maximal prefix sum, probably an empty one which is equal to 0 (in another words, if every nonempty prefix sum is less to zero, then it is considered equal to zero). Formally, denote as f(a) the maximal prefix sum of an array a_{1, … ,l} of length l ≥ 0. Then: 

$$$f(a) = max (0, \smash{\displaystylemax_{1 ≤ i ≤ l}} ∑_{j=1}^{i} a_j )$$$

Now they want to count the sum of maximal prefix sums for each such an array and they are asking you to help. As this sum can be very large, output it modulo 998\: 244\: 853.

Input

The only line contains two integers n and m (0 ≤ n,m ≤ 2 000).

Output

Output the answer to the problem modulo 998\: 244\: 853.

Examples

Input

0 2


Output

0


Input

2 0


Output

2


Input

2 2


Output

5


Input

2000 2000


Output

674532367

Note

In the first example the only possible array is [-1,-1], its maximal prefix sum is equal to 0. 

In the second example the only possible array is [1,1], its maximal prefix sum is equal to 2. 

There are 6 possible arrays in the third example:

[1,1,-1,-1], f([1,1,-1,-1]) = 2

[1,-1,1,-1], f([1,-1,1,-1]) = 1

[1,-1,-1,1], f([1,-1,-1,1]) = 1

[-1,1,1,-1], f([-1,1,1,-1]) = 1

[-1,1,-1,1], f([-1,1,-1,1]) = 0

[-1,-1,1,1], f([-1,-1,1,1]) = 0

So the answer for the third example is 2+1+1+1+0+0 = 5.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Here, I am translating the previously derived natural language invariants into C++ code that checks for performance bottlenecks at runtime.

#### Invariant 1: Recursive Combinatorial Calculation

```cpp
void check_recursive_combinatorial_invariant(long long n, long long m) {
    if (n > 1000 && m > 1000) {  // Threshold based on problem constraints
        cerr << "Warning: Performance bottleneck condition triggered due to excessive recursive combinations!" << endl;
        abort();
    }
}
```

#### Invariant 2: High Recursive Depth in Dynamic Programming

```cpp
void check_recursive_depth_invariant(long long depth, long long branches) {
    if (depth > 1000 && branches > 500) {  // Arbitrary threshold for demonstration
        cerr << "Warning: Performance bottleneck condition triggered due to high recursive depth!" << endl;
        abort();
    }
}
```

#### Invariant 3: Accumulated Modulo Operations

```cpp
void check_accumulated_modulo_invariant(long long n, long long m) {
    if (n + m > 3000) {  // Threshold based on the sum of n and m
        cerr << "Warning: Performance bottleneck condition triggered due to accumulated modulo operations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now, I'll integrate the above checker functions into the original C++ program. I will place the checks at strategic points in the program to ensure they don't add overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long DP[2005][2005] = {0};
long long C[4005][2005] = {0};
long long con[2005][2005] = {0};
long long MOD = 998244853;

// Function to check recursive combinatorial invariant
void check_recursive_combinatorial_invariant(long long n, long long m) {
    if (n > 1000 && m > 1000) {  // Threshold based on problem constraints
        cerr << "Warning: Performance bottleneck condition triggered due to excessive recursive combinations!" << endl;
        abort();
    }
}

// Function to check recursive depth invariant
void check_recursive_depth_invariant(long long depth, long long branches) {
    if (depth > 1000 && branches > 500) {  // Arbitrary threshold for demonstration
        cerr << "Warning: Performance bottleneck condition triggered due to high recursive depth!" << endl;
        abort();
    }
}

// Function to check accumulated modulo operations invariant
void check_accumulated_modulo_invariant(long long n, long long m) {
    if (n + m > 3000) {  // Threshold based on the sum of n and m
        cerr << "Warning: Performance bottleneck condition triggered due to accumulated modulo operations!" << endl;
        abort();
    }
}

long long F1(long long N, long long M) {
    if (N > M) return 0;
    if (N == 0 || M == 0) return 1;
    if (con[N][M]) return con[N][M];
    con[N][M] = F1(N - 1, M) + F1(N, M - 1);
    con[N][M] %= MOD;
    return con[N][M];
}

long long F2(long long N, long long M) {
    if (M == N || M == 0) return 1;
    if (C[N][M]) return C[N][M];
    C[N][M] = F2(N - 1, M) + F2(N - 1, M - 1);
    C[N][M] %= MOD;
    return C[N][M];
}

long long F3(long long N, long long M) {
    if (N == 0) return 0;
    if (M == 0) return N;
    if (DP[N][M]) return DP[N][M];
    DP[N][M] = F3(N - 1, M) + F2(N + M - 1, M);
    DP[N][M] += F3(N, M - 1) + F1(N, M - 1) + MOD - F2(N + M - 1, N);
    DP[N][M] %= MOD;
    return DP[N][M];
}

int main() {
    long long N, M;
    scanf("%lld %lld", &N, &M);
    
    // Insert checks after reading inputs
    check_recursive_combinatorial_invariant(N, M);
    check_accumulated_modulo_invariant(N, M);
    
    printf("%lld\n", F3(N, M));
    return 0;
}
```

### Explanation

- **Invariant 1 Check:** It is placed in `main` after reading inputs to catch potential recursive performance bottlenecks early.
- **Invariant 2 Check:** This is a generic function that can be used to monitor recursive depth and branching factors, though not directly used in this context as detailed data is not available.
- **Invariant 3 Check:** It is also placed in `main` after inputs to detect when accumulated operations might slow down the execution.

These checks will help identify when the program might enter performance bottleneck conditions based on the derived invariants.

