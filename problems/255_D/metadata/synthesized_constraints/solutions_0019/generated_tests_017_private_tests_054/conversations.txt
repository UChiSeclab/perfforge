system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Mr. Bender has a digital table of size n × n, each cell can be switched on or off. He wants the field to have at least c switched on squares. When this condition is fulfilled, Mr Bender will be happy.

We'll consider the table rows numbered from top to bottom from 1 to n, and the columns — numbered from left to right from 1 to n. Initially there is exactly one switched on cell with coordinates (x, y) (x is the row number, y is the column number), and all other cells are switched off. Then each second we switch on the cells that are off but have the side-adjacent cells that are on.

For a cell with coordinates (x, y) the side-adjacent cells are cells with coordinates (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1).

In how many seconds will Mr. Bender get happy?

Input

The first line contains four space-separated integers n, x, y, c (1 ≤ n, c ≤ 109; 1 ≤ x, y ≤ n; c ≤ n2).

Output

In a single line print a single integer — the answer to the problem.

Examples

Input

6 4 3 1


Output

0


Input

9 3 8 10


Output

2

Note

Initially the first test has one painted cell, so the answer is 0. In the second test all events will go as is shown on the figure. <image>.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  long long n, x, y, c;
  while (cin >> n >> x >> y >> c) {
    long long r[4] = {y - 1, x - 1, n - y, n - x};
    long long t = 0;
    long long cnt = 1;
    for (;;) {
      for (int i = 0; i < 4; i++) {
        cnt +=
            t - min(max(0LL, t - r[i]) + max(0LL, t - 1 - r[(i + 1) % 4]), t);
      }
      if (cnt >= c) break;
      ++t;
    }
    cout << t << endl;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000000 1 999999940 857945620


(G.2) Fast Input

1 1 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 2, fast_hit_count: 2 */
  long long n, x, y, c; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  while (cin >> n >> x >> y >> c) { /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
    long long r[4] = {y - 1, x - 1, n - y, n - x}; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
    long long t = 0; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
    long long cnt = 1; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    for (;;) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
      for (int i = 0; i < 4; i++) { /* line 10 slow_hit_count: 206815, fast_hit_count: 5 */
        cnt += /* line 11 slow_hit_count: 165452, fast_hit_count: 4 */
            t - min(max(0LL, t - r[i]) + max(0LL, t - 1 - r[(i + 1) % 4]), t); /* line 12 slow_hit_count: 165452, fast_hit_count: 4 */
      } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
      if (cnt >= c) break; /* line 14 slow_hit_count: 41363, fast_hit_count: 1 */
      ++t; /* line 15 slow_hit_count: 41362, fast_hit_count: 0 */
    } /* line 16 slow_hit_count: 41362, fast_hit_count: 0 */
    cout << t << endl; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Upon reviewing the problem statement and analyzing the provided code and hit counts, we can derive the following conclusions:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **High Hit Count on the Inner Loop:**
   - The loop starting at line 10 is executed a significantly larger number of times for the slow input compared to the fast input.
   - Specifically, line 10 is hit 206,815 times for the slow input, whereas it is hit only 5 times for the fast input.
   - Lines 11 and 12, which compute and update `cnt`, are also executed frequently (165,452 times in the slow case compared to 4 in the fast case).

2. **Condition for Termination:**
   - The condition at line 14, which checks if `cnt >= c`, is critical. The higher iteration count indicates that reaching this condition takes significantly more time for the slow input, suggesting that `cnt` increases slowly relative to `c`.

3. **Increment of `t`:**
   - Line 15, which increments `t`, reflects the number of iterations required before the condition in line 14 is satisfied. It is hit 41,362 times for the slow input, indicating many iterations are needed to meet the condition.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following natural language conditions describe scenarios under which the program enters a slow execution path:

1. **Sparse Initial Coverage:**
   - If the initial coordinates `(x, y)` are positioned such that the growth from this seed cell requires covering a large area or perimeter to reach the desired count `c`, the program may slow down significantly. This is exacerbated when `y` or `x` is close to the edge of the grid, requiring more time to propagate the "on" state across the grid.

2. **High `c` Relative to Grid Size:**
   - When `c` is large relative to the grid size `n`, especially approaching `n^2`, the program will inherently take longer as it must fill a significant portion of the table before the condition is satisfied.

3. **Propagation Delay due to Grid Dimensions:**
   - If the grid is very large (`n` is large), propagation from the initial "on" cell to achieve `c` "on" cells can be delayed, as the effective area of influence for each increment of `t` grows slowly relative to the grid's total size.

4. **Edge Positioning Impact:**
   - If the initial "on" cell is close to an edge or a corner, resulting in initial slow propagation due to fewer adjacent cells, the program may also slow down since these positions minimize the number of directions the "on" state can propagate from immediately.

These conditions highlight how the placement of the initial "on" cell and the required count `c` affect the propagation dynamics, consequently impacting performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Mr. Bender has a digital table of size n × n, each cell can be switched on or off. He wants the field to have at least c switched on squares. When this condition is fulfilled, Mr Bender will be happy.

We'll consider the table rows numbered from top to bottom from 1 to n, and the columns — numbered from left to right from 1 to n. Initially there is exactly one switched on cell with coordinates (x, y) (x is the row number, y is the column number), and all other cells are switched off. Then each second we switch on the cells that are off but have the side-adjacent cells that are on.

For a cell with coordinates (x, y) the side-adjacent cells are cells with coordinates (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1).

In how many seconds will Mr. Bender get happy?

Input

The first line contains four space-separated integers n, x, y, c (1 ≤ n, c ≤ 109; 1 ≤ x, y ≤ n; c ≤ n2).

Output

In a single line print a single integer — the answer to the problem.

Examples

Input

6 4 3 1


Output

0


Input

9 3 8 10


Output

2

Note

Initially the first test has one painted cell, so the answer is 0. In the second test all events will go as is shown on the figure. <image>.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Runtime Checks for Performance Invariants

Here, I will translate the natural language invariants into C++ code that can check these conditions at runtime:

1. **Sparse Initial Coverage:**
   ```cpp
   void checkSparseCoverageInvariant(long long x, long long y, long long n) {
       if (x == 1 || x == n || y == 1 || y == n) {
           cerr << "Warning: Performance bottleneck condition triggered - Initial active cell near grid edge!" << endl;
           abort();
       }
   }
   ```

2. **High `c` Relative to Grid Size:**
   ```cpp
   void checkHighCInvariant(long long c, long long n) {
       if (c > n * n / 2) {
           cerr << "Warning: Performance bottleneck condition triggered - High c relative to grid size!" << endl;
           abort();
       }
   }
   ```

3. **Propagation Delay due to Grid Dimensions:**
   ```cpp
   void checkLargeGridInvariant(long long n) {
       if (n > 10000) { // Arbitrary large threshold based on problem constraints
           cerr << "Warning: Performance bottleneck condition triggered - Very large grid size!" << endl;
           abort();
       }
   }
   ```

4. **Edge Positioning Impact:**
   - This check overlaps with the sparse initial coverage and is already covered by that invariant.

### Phase 4: Integrate Checks into the Original C++ Program

Now, I will integrate the checks into the existing C++ program, placing them in logical locations to avoid impacting performance negatively.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Check if the initial active cell is near the edge
void checkSparseCoverageInvariant(long long x, long long y, long long n) {
    if (x == 1 || x == n || y == 1 || y == n) {
        cerr << "Warning: Performance bottleneck condition triggered - Initial active cell near grid edge!" << endl;
        abort();
    }
}

// Check if c is too high relative to grid size
void checkHighCInvariant(long long c, long long n) {
    if (c > n * n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - High c relative to grid size!" << endl;
        abort();
    }
}

// Check if the grid size is excessively large
void checkLargeGridInvariant(long long n) {
    if (n > 10000) { // Arbitrary large threshold based on problem constraints
        cerr << "Warning: Performance bottleneck condition triggered - Very large grid size!" << endl;
        abort();
    }
}

int main() {
    long long n, x, y, c;
    while (cin >> n >> x >> y >> c) {
        // Insert checks after reading input
        checkSparseCoverageInvariant(x, y, n);
        checkHighCInvariant(c, n);
        checkLargeGridInvariant(n);
        
        long long r[4] = {y - 1, x - 1, n - y, n - x};
        long long t = 0;
        long long cnt = 1;
        for (;;) {
            for (int i = 0; i < 4; i++) {
                cnt += t - min(max(0LL, t - r[i]) + max(0LL, t - 1 - r[(i + 1) % 4]), t);
            }
            if (cnt >= c) break;
            ++t;
        }
        cout << t << endl;
    }
}
```

### Summary

The C++ program has been instrumented with runtime checks based on the performance-characterizing invariants identified earlier. These checks are designed to catch potential slow execution paths early on by warning and aborting if specific conditions are met, helping identify performance issues without affecting the program's main logic in tight loops.

