system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Mr. Bender has a digital table of size n × n, each cell can be switched on or off. He wants the field to have at least c switched on squares. When this condition is fulfilled, Mr Bender will be happy.

We'll consider the table rows numbered from top to bottom from 1 to n, and the columns — numbered from left to right from 1 to n. Initially there is exactly one switched on cell with coordinates (x, y) (x is the row number, y is the column number), and all other cells are switched off. Then each second we switch on the cells that are off but have the side-adjacent cells that are on.

For a cell with coordinates (x, y) the side-adjacent cells are cells with coordinates (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1).

In how many seconds will Mr. Bender get happy?

Input

The first line contains four space-separated integers n, x, y, c (1 ≤ n, c ≤ 109; 1 ≤ x, y ≤ n; c ≤ n2).

Output

In a single line print a single integer — the answer to the problem.

Examples

Input

6 4 3 1


Output

0


Input

9 3 8 10


Output

2

Note

Initially the first test has one painted cell, so the answer is 0. In the second test all events will go as is shown on the figure. <image>.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, x, y, c;
long long pintados(long long segundos) {
  long long pos, aArriba = 0, aAbajo = 0, contador = 0;
  bool arriba = true, abajo = true;
  for (pos = x - segundos; pos < 1; ++pos) {
    if (y + aAbajo == n) abajo = false;
    if (y - aArriba == 1) arriba = false;
    if (abajo) ++aAbajo;
    if (arriba) ++aArriba;
  }
  for (pos; pos <= x and pos <= n; ++pos) {
    contador += aAbajo + aArriba + 1;
    if (contador < 0) return INT_MAX;
    if (y + aAbajo == n) abajo = false;
    if (y - aArriba == 1) arriba = false;
    if (abajo) ++aAbajo;
    if (arriba) ++aArriba;
  }
  aArriba = aAbajo = 0;
  arriba = abajo = true;
  for (pos = x + segundos; pos > n; --pos) {
    if (y + aAbajo == n) abajo = false;
    if (y - aArriba == 1) arriba = false;
    if (abajo) ++aAbajo;
    if (arriba) ++aArriba;
  }
  for (pos; pos > x; --pos) {
    contador += aAbajo + aArriba + 1;
    if (contador < 0) return INT_MAX;
    if (y + aAbajo == n) abajo = false;
    if (y - aArriba == 1) arriba = false;
    if (abajo) ++aAbajo;
    if (arriba) ++aArriba;
  }
  return contador;
}
long long buscar() {
  long long izq = 0, der = min((long long)2e5, n * 2), centro;
  while (izq <= der) {
    centro = (der - izq) / 2 + izq;
    long long segundos = pintados(centro), ant = pintados(centro - 1);
    if (segundos >= c and ant < c) return centro;
    if (segundos < c)
      izq = centro + 1;
    else
      der = centro - 1;
  }
}
int main() {
  cin >> n >> x >> y >> c;
  cout << buscar() << '\n';
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000000 1 999999940 857945620


(G.2) Fast Input

1 1 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, x, y, c; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long pintados(long long segundos) { /* line 4 slow_hit_count: 30, fast_hit_count: 4 */
  long long pos, aArriba = 0, aAbajo = 0, contador = 0; /* line 5 slow_hit_count: 30, fast_hit_count: 4 */
  bool arriba = true, abajo = true; /* line 6 slow_hit_count: 30, fast_hit_count: 4 */
  for (pos = x - segundos; pos < 1; ++pos) { /* line 7 slow_hit_count: 1338929, fast_hit_count: 5 */
    if (y + aAbajo == n) abajo = false; /* line 8 slow_hit_count: 1338899, fast_hit_count: 1 */
    if (y - aArriba == 1) arriba = false; /* line 9 slow_hit_count: 1338899, fast_hit_count: 1 */
    if (abajo) ++aAbajo; /* line 10 slow_hit_count: 1338899, fast_hit_count: 1 */
    if (arriba) ++aArriba; /* line 11 slow_hit_count: 1338899, fast_hit_count: 1 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  for (pos; pos <= x and pos <= n; ++pos) { /* line 13 slow_hit_count: 60, fast_hit_count: 7 */
    contador += aAbajo + aArriba + 1; /* line 14 slow_hit_count: 30, fast_hit_count: 3 */
    if (contador < 0) return INT_MAX; /* line 15 slow_hit_count: 30, fast_hit_count: 3 */
    if (y + aAbajo == n) abajo = false; /* line 16 slow_hit_count: 30, fast_hit_count: 3 */
    if (y - aArriba == 1) arriba = false; /* line 17 slow_hit_count: 30, fast_hit_count: 3 */
    if (abajo) ++aAbajo; /* line 18 slow_hit_count: 30, fast_hit_count: 3 */
    if (arriba) ++aArriba; /* line 19 slow_hit_count: 30, fast_hit_count: 3 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  aArriba = aAbajo = 0; /* line 21 slow_hit_count: 30, fast_hit_count: 4 */
  arriba = abajo = true; /* line 22 slow_hit_count: 30, fast_hit_count: 4 */
  for (pos = x + segundos; pos > n; --pos) { /* line 23 slow_hit_count: 30, fast_hit_count: 5 */
    if (y + aAbajo == n) abajo = false; /* line 24 slow_hit_count: 0, fast_hit_count: 1 */
    if (y - aArriba == 1) arriba = false; /* line 25 slow_hit_count: 0, fast_hit_count: 1 */
    if (abajo) ++aAbajo; /* line 26 slow_hit_count: 0, fast_hit_count: 1 */
    if (arriba) ++aArriba; /* line 27 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  for (pos; pos > x; --pos) { /* line 29 slow_hit_count: 1338929, fast_hit_count: 4 */
    contador += aAbajo + aArriba + 1; /* line 30 slow_hit_count: 1338899, fast_hit_count: 0 */
    if (contador < 0) return INT_MAX; /* line 31 slow_hit_count: 1338899, fast_hit_count: 0 */
    if (y + aAbajo == n) abajo = false; /* line 32 slow_hit_count: 1338899, fast_hit_count: 0 */
    if (y - aArriba == 1) arriba = false; /* line 33 slow_hit_count: 1338899, fast_hit_count: 0 */
    if (abajo) ++aAbajo; /* line 34 slow_hit_count: 1338899, fast_hit_count: 0 */
    if (arriba) ++aArriba; /* line 35 slow_hit_count: 1338899, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  return contador; /* line 37 slow_hit_count: 30, fast_hit_count: 4 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
long long buscar() { /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  long long izq = 0, der = min((long long)2e5, n * 2), centro; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  while (izq <= der) { /* line 41 slow_hit_count: 15, fast_hit_count: 2 */
    centro = (der - izq) / 2 + izq; /* line 42 slow_hit_count: 15, fast_hit_count: 2 */
    long long segundos = pintados(centro), ant = pintados(centro - 1); /* line 43 slow_hit_count: 15, fast_hit_count: 2 */
    if (segundos >= c and ant < c) return centro; /* line 44 slow_hit_count: 15, fast_hit_count: 2 */
    if (segundos < c) /* line 45 slow_hit_count: 14, fast_hit_count: 1 */
      izq = centro + 1; /* line 46 slow_hit_count: 7, fast_hit_count: 0 */
    else /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      der = centro - 1; /* line 48 slow_hit_count: 7, fast_hit_count: 1 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> x >> y >> c; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  cout << buscar() << '\n'; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 54 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the slowness in the program when executed with the slow input versus the fast input, we will conduct an analysis based on the hit count information and the structure of the given C program. The objective is to determine performance-characterizing invariants that describe when and why the program experiences slow execution.

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Line-level Hit Count Comparison**:
   - The hit counts for the function `pintados` (line 4) are substantially higher for the slow input compared to the fast input. 
   - Notably, the hit counts for loops in lines 7 and 29 are significantly higher in the slow input, with the loop on line 29 hitting over 1 million times for the slow input but only 4 times for the fast input. 

2. **Analysis of Expensive Segments**:
   - The loops iterating over a range determined by `x ± segundos` (lines 7-11 and 29-35) are heavily hit due to the large value of `n` in the slow input.
   - The problem arises when these loops handle a large number of iterations, which is exacerbated by the vast size of `n` causing extensive iteration over grid positions.

### Phase 2: Deriving Performance-Characterizing Invariants

1. **Invariant Descriptions**:
   - **Invariant 1**: "If the grid size `n` is extremely large, and the number of switched-on cells `c` is also large, the program may enter a slow path due to extensive iterations over grid positions."
   - **Invariant 2**: "When the initial position of the switched-on cell (`x`, `y`) is near the grid boundary and the required count `c` needs a substantial spread across the grid, the program may slow down due to boundary checks and extensive loop iterations."
   - **Invariant 3**: "The program could slow down when the calculation involves a large number of grid positions (`n` being large), especially if the required number of active cells `c` is close to the total possible cells, leading to high iteration counts."

2. **Threshold Suggestions**:
   - Given the problem constraints (`1 ≤ n, c ≤ 10^9` and `c ≤ n^2`), these invariants are designed to apply in scenarios where both `n` and `c` are large, particularly when `c` approaches `n^2`.
   - The performance issues are strongly correlated with the high grid size and the number of active cells required, leading to potentially long-running loops.

### Final Considerations:
- Avoiding hardcoded values, the focus is on high `n` and `c` values as common contributors to slow execution.
- Checks for performance issues should be outside of critical loops to avoid further degrading performance.
- These invariants provide guidance for when the program is likely to slow down, helping in optimization or refactoring efforts.

This analysis targets optimizing the interaction between data structure sizes and loop execution given the input constraints, thus aiming to mitigate performance bottlenecks effectively.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Mr. Bender has a digital table of size n × n, each cell can be switched on or off. He wants the field to have at least c switched on squares. When this condition is fulfilled, Mr Bender will be happy.

We'll consider the table rows numbered from top to bottom from 1 to n, and the columns — numbered from left to right from 1 to n. Initially there is exactly one switched on cell with coordinates (x, y) (x is the row number, y is the column number), and all other cells are switched off. Then each second we switch on the cells that are off but have the side-adjacent cells that are on.

For a cell with coordinates (x, y) the side-adjacent cells are cells with coordinates (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1).

In how many seconds will Mr. Bender get happy?

Input

The first line contains four space-separated integers n, x, y, c (1 ≤ n, c ≤ 109; 1 ≤ x, y ≤ n; c ≤ n2).

Output

In a single line print a single integer — the answer to the problem.

Examples

Input

6 4 3 1


Output

0


Input

9 3 8 10


Output

2

Note

Initially the first test has one painted cell, so the answer is 0. In the second test all events will go as is shown on the figure. <image>.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as Checker Code in C++

Below are the checker functions corresponding to the performance-characterizing invariants derived in natural language.

```cpp
// Checker for Invariant 1: Large grid size 'n' and large 'c'.
void check_grid_size_invariant(long long n, long long c) {
    if (n > 1e8 && c > 1e8) { // Example threshold, consider large sizes for both n and c
        cerr << "Warning: grid_size_invariant triggered - large grid size and required active cells." << endl;
        abort();
    }
}

// Checker for Invariant 2: Initial cell near boundary and large 'c'.
void check_boundary_invariant(long long x, long long y, long long n, long long c) {
    if ((x <= 2 || x >= n-1 || y <= 2 || y >= n-1) && c > 1e8) { // Near boundary and large 'c'
        cerr << "Warning: boundary_invariant triggered - initial cell near boundary with large c." << endl;
        abort();
    }
}

// Checker for Invariant 3: Large number of cells to be switched on.
void check_active_cells_invariant(long long n, long long c) {
    if (c > 0.9 * n * n) { // Large proportion of cells to be activated
        cerr << "Warning: active_cells_invariant triggered - high number of active cells required." << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Program

Now, we will integrate these checks into the original program at effective points to catch performance issues early.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long n, x, y, c;

long long pintados(long long segundos) {
    long long pos, aArriba = 0, aAbajo = 0, contador = 0;
    bool arriba = true, abajo = true;
    for (pos = x - segundos; pos < 1; ++pos) {
        if (y + aAbajo == n) abajo = false;
        if (y - aArriba == 1) arriba = false;
        if (abajo) ++aAbajo;
        if (arriba) ++aArriba;
    }
    for (pos; pos <= x && pos <= n; ++pos) {
        contador += aAbajo + aArriba + 1;
        if (contador < 0) return INT_MAX;
        if (y + aAbajo == n) abajo = false;
        if (y - aArriba == 1) arriba = false;
        if (abajo) ++aAbajo;
        if (arriba) ++aArriba;
    }
    aArriba = aAbajo = 0;
    arriba = abajo = true;
    for (pos = x + segundos; pos > n; --pos) {
        if (y + aAbajo == n) abajo = false;
        if (y - aArriba == 1) arriba = false;
        if (abajo) ++aAbajo;
        if (arriba) ++aArriba;
    }
    for (pos; pos > x; --pos) {
        contador += aAbajo + aArriba + 1;
        if (contador < 0) return INT_MAX;
        if (y + aAbajo == n) abajo = false;
        if (y - aArriba == 1) arriba = false;
        if (abajo) ++aAbajo;
        if (arriba) ++aArriba;
    }
    return contador;
}

long long buscar() {
    long long izq = 0, der = min((long long)2e5, n * 2), centro;
    while (izq <= der) {
        centro = (der - izq) / 2 + izq;
        long long segundos = pintados(centro), ant = pintados(centro - 1);
        if (segundos >= c && ant < c) return centro;
        if (segundos < c)
            izq = centro + 1;
        else
            der = centro - 1;
    }
}

int main() {
    cin >> n >> x >> y >> c;

    // Insert performance checkers after reading inputs
    check_grid_size_invariant(n, c);  // Check for large grid size and required active cells
    check_boundary_invariant(x, y, n, c);  // Check for initial cell near boundary with large 'c'
    check_active_cells_invariant(n, c);  // Check for high number of active cells required

    cout << buscar() << '\n';
}
```

### Explanation of Integration

- **Checker `check_grid_size_invariant`**: Ensures that the program does not proceed when both `n` and `c` are exceedingly large, which can lead to slow execution.
  
- **Checker `check_boundary_invariant`**: Ensures that performance issues are flagged when the initial active cell is near the grid boundary and a large number of cells need to be activated.

- **Checker `check_active_cells_invariant`**: Triggers when the required active cells `c` are a very high proportion of the total grid cells, indicating potential for slow execution due to extensive iterations.

By placing these checks immediately after the input is read, we avoid introducing overhead in the main computational loops, thus ensuring our performance checks are efficient.

