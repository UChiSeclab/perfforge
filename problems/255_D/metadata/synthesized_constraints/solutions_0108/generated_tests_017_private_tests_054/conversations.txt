system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Mr. Bender has a digital table of size n × n, each cell can be switched on or off. He wants the field to have at least c switched on squares. When this condition is fulfilled, Mr Bender will be happy.

We'll consider the table rows numbered from top to bottom from 1 to n, and the columns — numbered from left to right from 1 to n. Initially there is exactly one switched on cell with coordinates (x, y) (x is the row number, y is the column number), and all other cells are switched off. Then each second we switch on the cells that are off but have the side-adjacent cells that are on.

For a cell with coordinates (x, y) the side-adjacent cells are cells with coordinates (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1).

In how many seconds will Mr. Bender get happy?

Input

The first line contains four space-separated integers n, x, y, c (1 ≤ n, c ≤ 109; 1 ≤ x, y ≤ n; c ≤ n2).

Output

In a single line print a single integer — the answer to the problem.

Examples

Input

6 4 3 1


Output

0


Input

9 3 8 10


Output

2

Note

Initially the first test has one painted cell, so the answer is 0. In the second test all events will go as is shown on the figure. <image>.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long ans;
long long x, y, n, t;
long long geit(long long u) {
  long long total = 2 * (u + 1) * u + 1;
  if (u > x - 1) {
    total -= (u + 1 - x) * (u + 1 - x);
    if (u > n + x - y) total += (u - n - x + y + 1) * (u - n - x + y) / 2;
  }
  if (u > y - 1) {
    total -= (u + 1 - y) * (u + 1 - y);
    if (u > x + y - 1) total += (u - x - y + 2) * (u - x - y + 1) / 2;
  }
  if (u > n - x) {
    total -= (u + x - n) * (u + x - n);
    if (u > n - x + y) total += (u - n + x - y) * (u - n + x - y + 1) / 2;
  }
  if (u > n - y) {
    total -= (u + y - n) * (u + y - n);
    if (u > 2 * n - x - y + 1)
      total += (u - 2 * n + x + y) * (u - 2 * n + x + y - 1) / 2;
  }
  return total;
}
int main() {
  while (cin >> n >> x >> y >> t) {
    long long mid = 0;
    while (geit(mid) < t) mid++;
    cout << mid << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000000 1 999999940 857945620


(G.2) Fast Input

1 1 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long ans; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long x, y, n, t; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long geit(long long u) { /* line 5 slow_hit_count: 41363, fast_hit_count: 1 */
  long long total = 2 * (u + 1) * u + 1; /* line 6 slow_hit_count: 41363, fast_hit_count: 1 */
  if (u > x - 1) { /* line 7 slow_hit_count: 41363, fast_hit_count: 1 */
    total -= (u + 1 - x) * (u + 1 - x); /* line 8 slow_hit_count: 41362, fast_hit_count: 0 */
    if (u > n + x - y) total += (u - n - x + y + 1) * (u - n - x + y) / 2; /* line 9 slow_hit_count: 41362, fast_hit_count: 0 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  if (u > y - 1) { /* line 11 slow_hit_count: 41363, fast_hit_count: 1 */
    total -= (u + 1 - y) * (u + 1 - y); /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    if (u > x + y - 1) total += (u - x - y + 2) * (u - x - y + 1) / 2; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  if (u > n - x) { /* line 15 slow_hit_count: 41363, fast_hit_count: 1 */
    total -= (u + x - n) * (u + x - n); /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    if (u > n - x + y) total += (u - n + x - y) * (u - n + x - y + 1) / 2; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  if (u > n - y) { /* line 19 slow_hit_count: 41363, fast_hit_count: 1 */
    total -= (u + y - n) * (u + y - n); /* line 20 slow_hit_count: 41302, fast_hit_count: 0 */
    if (u > 2 * n - x - y + 1) /* line 21 slow_hit_count: 41302, fast_hit_count: 0 */
      total += (u - 2 * n + x + y) * (u - 2 * n + x + y - 1) / 2; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return total; /* line 24 slow_hit_count: 41363, fast_hit_count: 1 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 26 slow_hit_count: 2, fast_hit_count: 2 */
  while (cin >> n >> x >> y >> t) { /* line 27 slow_hit_count: 2, fast_hit_count: 2 */
    long long mid = 0; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
    while (geit(mid) < t) mid++; /* line 29 slow_hit_count: 41363, fast_hit_count: 1 */
    cout << mid << endl; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance characteristics and identify potential bottlenecks in the given C program, we need to evaluate the line-level hit counts and the data structure interactions, especially as they pertain to the input constraints. Let's break down the analysis into the requested phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Counts Comparison**:
   - The function `geit(long long u)` and the loop in `main()` account for the majority of hit counts.
   - Specifically, line 29 (`while (geit(mid) < t) mid++;`) is hit 41,363 times in the slow input, but only once in the fast input.
   - Function `geit()` itself shows consistent hit counts (41,363) for the slow input, emphasizing it as a performance hotspot, especially since each call involves multiple conditional checks and arithmetic operations.

2. **Interaction with Data Structures and Constraints**:
   - The high number of iterations in the loop (`while (geit(mid) < t) mid++;`) suggests that `mid` must reach a large value before satisfying the condition `geit(mid) >= t`.
   - The function `geit()` computes the number of "switched on" cells and involves several conditionals, each potentially reducing or increasing the total based on geometric constraints.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations in Phase 1, here are natural language performance invariants that describe the conditions under which the program might slow down:

1. **High Initial Gap Between `c` and Initial On Cells**:
   - When the initial number of switched-on cells is significantly less than `c`, a large number of iterations are needed to increase the count to meet `c`. This occurs if the initial placement of the single "on" cell is far from the center of the grid, which maximizes the number of steps needed to spread activation.

   *Invariant*: "If the target number of switched-on cells (`c`) is much larger than the initial number of on cells, and the starting on cell is near the grid's edge, the program may slow down due to many required expansion steps."

2. **High Grid Size with Sparse Activation Requirement**:
   - The grid size (`n`) is large, but `c` is relatively small compared to the maximum possible number of on cells (`n^2`). The algorithm needs to evaluate many potential expansion scenarios to reach a small number of on cells distributed across a large space.

   *Invariant*: "If the grid size (`n`) is large and the required number of on cells (`c`) is small relative to a potential maximum distribution, the performance may degrade due to the inefficient exploration of potential cell activations."

3. **Boundary Effect on Cell Activation**:
   - If the on cell starts near a boundary and the boundary limits the expansion, many checks in `geit()` may trigger deductions and re-evaluations, contributing to inefficiency.

   *Invariant*: "If the initial 'on' cell is located near a grid boundary, multiple evaluations of edge conditions may slow down the program, particularly when `n` is large."

These invariants help identify scenarios that might lead to sluggish performance without relying on specific input values, focusing instead on geometric and arithmetic properties inherent to the problem's structure.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Mr. Bender has a digital table of size n × n, each cell can be switched on or off. He wants the field to have at least c switched on squares. When this condition is fulfilled, Mr Bender will be happy.

We'll consider the table rows numbered from top to bottom from 1 to n, and the columns — numbered from left to right from 1 to n. Initially there is exactly one switched on cell with coordinates (x, y) (x is the row number, y is the column number), and all other cells are switched off. Then each second we switch on the cells that are off but have the side-adjacent cells that are on.

For a cell with coordinates (x, y) the side-adjacent cells are cells with coordinates (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1).

In how many seconds will Mr. Bender get happy?

Input

The first line contains four space-separated integers n, x, y, c (1 ≤ n, c ≤ 109; 1 ≤ x, y ≤ n; c ≤ n2).

Output

In a single line print a single integer — the answer to the problem.

Examples

Input

6 4 3 1


Output

0


Input

9 3 8 10


Output

2

Note

Initially the first test has one painted cell, so the answer is 0. In the second test all events will go as is shown on the figure. <image>.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the natural language invariants derived earlier, we'll implement runtime checks in C++ to monitor for conditions that might lead to performance bottlenecks.

Here are the C++ code snippets for each invariant:

```cpp
void check_initial_gap_invariant(long long n, long long x, long long y, long long c) {
    long long initial_on_cells = 1; // Initially, only one cell is on
    if (c > initial_on_cells && (x == 1 || x == n || y == 1 || y == n)) {
        cerr << "Warning: Performance bottleneck condition triggered - high initial gap and edge start" << endl;
        abort();
    }
}

void check_large_grid_sparse_activation_invariant(long long n, long long c) {
    long long max_possible_on_cells = n * n;
    if (n > 1000000 && c < max_possible_on_cells / 1000) { // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - large grid with sparse activation" << endl;
        abort();
    }
}

void check_boundary_effect_invariant(long long n, long long x, long long y) {
    if ((x == 1 || x == n || y == 1 || y == n) && n > 1000000) { // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - initial cell on boundary of large grid" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checks into the Original Program

Now, we'll integrate these checks into the original C++ program, placing them at effective points to avoid overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checkers for performance invariants
void check_initial_gap_invariant(long long n, long long x, long long y, long long c) {
    long long initial_on_cells = 1; // Initially, only one cell is on
    if (c > initial_on_cells && (x == 1 || x == n || y == 1 || y == n)) {
        cerr << "Warning: Performance bottleneck condition triggered - high initial gap and edge start" << endl;
        abort();
    }
}

void check_large_grid_sparse_activation_invariant(long long n, long long c) {
    long long max_possible_on_cells = n * n;
    if (n > 1000000 && c < max_possible_on_cells / 1000) { // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - large grid with sparse activation" << endl;
        abort();
    }
}

void check_boundary_effect_invariant(long long n, long long x, long long y) {
    if ((x == 1 || x == n || y == 1 || y == n) && n > 1000000) { // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - initial cell on boundary of large grid" << endl;
        abort();
    }
}

long long geit(long long u) {
    long long total = 2 * (u + 1) * u + 1;
    if (u > x - 1) {
        total -= (u + 1 - x) * (u + 1 - x);
        if (u > n + x - y) total += (u - n - x + y + 1) * (u - n - x + y) / 2;
    }
    if (u > y - 1) {
        total -= (u + 1 - y) * (u + 1 - y);
        if (u > x + y - 1) total += (u - x - y + 2) * (u - x - y + 1) / 2;
    }
    if (u > n - x) {
        total -= (u + x - n) * (u + x - n);
        if (u > n - x + y) total += (u - n + x - y) * (u - n + x - y + 1) / 2;
    }
    if (u > n - y) {
        total -= (u + y - n) * (u + y - n);
        if (u > 2 * n - x - y + 1)
            total += (u - 2 * n + x + y) * (u - 2 * n + x + y - 1) / 2;
    }
    return total;
}

int main() {
    while (cin >> n >> x >> y >> t) {
        // Insert invariant checks
        check_initial_gap_invariant(n, x, y, t);
        check_large_grid_sparse_activation_invariant(n, t);
        check_boundary_effect_invariant(n, x, y);

        long long mid = 0;
        while (geit(mid) < t) mid++;
        cout << mid << endl;
    }
    return 0;
}
```

### Explanation

- **Check Placement**: The checks are placed after reading the input values to avoid unnecessary checks inside the loop.
- **Invariant Explanation**: Each invariant is implemented according to the natural language description, using thresholds that are consistent with the problem constraints. For example, conditions are set to identify significant gaps between `c` and initial "on" cells or when the cell starts near a boundary on a large grid.
- **Warning and Abort**: If a condition is met, a warning is printed, and the program is terminated using `abort()` to signal a violation of the performance expectation. This setup is useful for testing and can guide optimizations or adjustments to the input domain.

