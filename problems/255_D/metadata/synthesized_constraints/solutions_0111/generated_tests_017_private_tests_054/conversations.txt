system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Mr. Bender has a digital table of size n × n, each cell can be switched on or off. He wants the field to have at least c switched on squares. When this condition is fulfilled, Mr Bender will be happy.

We'll consider the table rows numbered from top to bottom from 1 to n, and the columns — numbered from left to right from 1 to n. Initially there is exactly one switched on cell with coordinates (x, y) (x is the row number, y is the column number), and all other cells are switched off. Then each second we switch on the cells that are off but have the side-adjacent cells that are on.

For a cell with coordinates (x, y) the side-adjacent cells are cells with coordinates (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1).

In how many seconds will Mr. Bender get happy?

Input

The first line contains four space-separated integers n, x, y, c (1 ≤ n, c ≤ 109; 1 ≤ x, y ≤ n; c ≤ n2).

Output

In a single line print a single integer — the answer to the problem.

Examples

Input

6 4 3 1


Output

0


Input

9 3 8 10


Output

2

Note

Initially the first test has one painted cell, so the answer is 0. In the second test all events will go as is shown on the figure. <image>.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, x, y, c, d1, d2, d3, d4, l, r, u, d, i = 0, c1, c2, c3, c4;
  cin >> n >> x >> y >> c;
  d1 = min(n - y, x - 1);
  c1 = max(n - y, x - 1) - d1;
  d2 = min(n - y, n - x);
  c2 = max(n - y, n - x) - d2;
  d3 = min(y - 1, x - 1);
  c3 = max(y - 1, x - 1) - d3;
  d4 = min(y - 1, n - x);
  c4 = max(y - 1, n - x) - d4;
  long sum = 1;
  u = x, d = x, l = y, r = y;
  while (sum < c) {
    if (i) {
      if (i > d1 && i <= c1 + d1)
        sum += d1;
      else if (i <= d1)
        sum += i;
      else
        sum += max(0, --d1);
      if (i > d2 && i <= c2 + d2)
        sum += d2;
      else if (i <= d2)
        sum += i;
      else
        sum += max(0, --d2);
      if (i > d3 && i <= c3 + d3)
        sum += d3;
      else if (i <= d3)
        sum += i;
      else
        sum += max(0, --d3);
      if (i > d4 && i <= c4 + d4)
        sum += d4;
      else if (i <= d4)
        sum += i;
      else
        sum += max(0, --d4);
    }
    if (u > 1) sum++;
    if (d < n) sum++;
    if (l > 1) sum++;
    if (r < n) sum++;
    u--, d++, l--, r++;
    i++;
  }
  cout << i;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000000 1 999999940 857945620


(G.2) Fast Input

1 1 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, x, y, c, d1, d2, d3, d4, l, r, u, d, i = 0, c1, c2, c3, c4; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> x >> y >> c; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  d1 = min(n - y, x - 1); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  c1 = max(n - y, x - 1) - d1; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  d2 = min(n - y, n - x); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  c2 = max(n - y, n - x) - d2; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  d3 = min(y - 1, x - 1); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  c3 = max(y - 1, x - 1) - d3; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  d4 = min(y - 1, n - x); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  c4 = max(y - 1, n - x) - d4; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  long sum = 1; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  u = x, d = x, l = y, r = y; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  while (sum < c) { /* line 16 slow_hit_count: 41363, fast_hit_count: 1 */
    if (i) { /* line 17 slow_hit_count: 41362, fast_hit_count: 0 */
      if (i > d1 && i <= c1 + d1) /* line 18 slow_hit_count: 41361, fast_hit_count: 0 */
        sum += d1; /* line 19 slow_hit_count: 60, fast_hit_count: 0 */
      else if (i <= d1) /* line 20 slow_hit_count: 41301, fast_hit_count: 0 */
        sum += i; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
        sum += max(0, --d1); /* line 23 slow_hit_count: 41301, fast_hit_count: 0 */
      if (i > d2 && i <= c2 + d2) /* line 24 slow_hit_count: 41361, fast_hit_count: 0 */
        sum += d2; /* line 25 slow_hit_count: 41301, fast_hit_count: 0 */
      else if (i <= d2) /* line 26 slow_hit_count: 60, fast_hit_count: 0 */
        sum += i; /* line 27 slow_hit_count: 60, fast_hit_count: 0 */
      else /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
        sum += max(0, --d2); /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      if (i > d3 && i <= c3 + d3) /* line 30 slow_hit_count: 41361, fast_hit_count: 0 */
        sum += d3; /* line 31 slow_hit_count: 41361, fast_hit_count: 0 */
      else if (i <= d3) /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
        sum += i; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
        sum += max(0, --d3); /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      if (i > d4 && i <= c4 + d4) /* line 36 slow_hit_count: 41361, fast_hit_count: 0 */
        sum += d4; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      else if (i <= d4) /* line 38 slow_hit_count: 41361, fast_hit_count: 0 */
        sum += i; /* line 39 slow_hit_count: 41361, fast_hit_count: 0 */
      else /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
        sum += max(0, --d4); /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    if (u > 1) sum++; /* line 43 slow_hit_count: 41362, fast_hit_count: 0 */
    if (d < n) sum++; /* line 44 slow_hit_count: 41362, fast_hit_count: 0 */
    if (l > 1) sum++; /* line 45 slow_hit_count: 41362, fast_hit_count: 0 */
    if (r < n) sum++; /* line 46 slow_hit_count: 41362, fast_hit_count: 0 */
    u--, d++, l--, r++; /* line 47 slow_hit_count: 41362, fast_hit_count: 0 */
    i++; /* line 48 slow_hit_count: 41362, fast_hit_count: 0 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  cout << i; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 52 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided information and hit counts, let's analyze the program to derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **While Loop Execution**:
   - The while loop on line 16 is the core segment, showing a significant difference in hit counts between the slow (41363 times) and fast (1 time) inputs.
   - The loop continues until the sum of switched-on cells (`sum`) reaches or exceeds `c`.

2. **Conditional and Increment Operations**:
   - Within the loop, lines 18 through 48 are heavily hit in the slow input, contributing to the overall execution time.
   - The multiple conditional checks and increments (`sum += d1`, `sum += i`, etc.) within the loop suggest that performance is impacted by repeated evaluations and updates.

3. **Critical Branches**:
   - Lines 19, 23, 31, 37, and 39 show activity, indicating that the conditions leading to these lines are frequently met during the slow input scenario.
   - The logic in lines 43 to 46 increments `sum` based on boundary conditions (`u`, `d`, `l`, `r`), heavily impacting performance during slow runs.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the natural language performance-characterizing invariants:

1. **Large Grid Influence**:
   - "When `n` is large, and the target number of switched-on cells (`c`) is close to the total number of cells (`n * n`), the loop must iterate many times to fulfill the condition, causing significant performance slowdown."

2. **Initial Cell Position**:
   - "If the initial cell `(x, y)` is located near the edge or corner of a large grid, the propagation of 'on' cells requires more iterations, especially when `c` is a large proportion of the grid size."

3. **Complexity of Expansion**:
   - "When the number of steps required to cover the grid (from `(x,y)` to `n*n` cells) is high, due to the initial position being distant from the center, the program experiences a slowdown as coverage expands incrementally."

These invariants broadly capture scenarios where the program might slow down due to the need for extensive iterations to achieve the desired number of switched-on cells, mainly influenced by grid size and initial conditions. They align with the constraints (`n <= 10^9` and `c <= n^2`) without relying on specific numeric details of the slow input.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Mr. Bender has a digital table of size n × n, each cell can be switched on or off. He wants the field to have at least c switched on squares. When this condition is fulfilled, Mr Bender will be happy.

We'll consider the table rows numbered from top to bottom from 1 to n, and the columns — numbered from left to right from 1 to n. Initially there is exactly one switched on cell with coordinates (x, y) (x is the row number, y is the column number), and all other cells are switched off. Then each second we switch on the cells that are off but have the side-adjacent cells that are on.

For a cell with coordinates (x, y) the side-adjacent cells are cells with coordinates (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1).

In how many seconds will Mr. Bender get happy?

Input

The first line contains four space-separated integers n, x, y, c (1 ≤ n, c ≤ 109; 1 ≤ x, y ≤ n; c ≤ n2).

Output

In a single line print a single integer — the answer to the problem.

Examples

Input

6 4 3 1


Output

0


Input

9 3 8 10


Output

2

Note

Initially the first test has one painted cell, so the answer is 0. In the second test all events will go as is shown on the figure. <image>.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Below are the C++ code snippets implementing the performance-characteristic invariants derived previously:

1. **Large Grid Influence Check**:
   - This check ensures that when `n` is large and `c` is a large proportion of the total grid size, a warning is triggered.

```cpp
void check_large_grid_invariant(int n, int c) {
    if (n > 100000 && c > n * n * 0.9) { // Arbitrary threshold for large grid influence
        cerr << "Warning: Performance bottleneck condition triggered - large grid with high target cells!" << endl;
        abort();
    }
}
```

2. **Initial Cell Position Influence**:
   - This check verifies if the initial cell is near an edge or corner, which can lead to increased iterations.

```cpp
void check_initial_position_invariant(int n, int x, int y) {
    if (x <= 2 || x >= n - 1 || y <= 2 || y >= n - 1) { // Near edge or corner
        cerr << "Warning: Performance bottleneck condition triggered - initial cell near edge or corner!" << endl;
        abort();
    }
}
```

3. **Complexity of Expansion**:
   - This check ensures that if the expansion is complex due to initial conditions, a warning is triggered.

```cpp
void check_expansion_complexity_invariant(int n, int x, int y, int c) {
    if (abs(x - n / 2) + abs(y - n / 2) > n / 4 && c > n * n * 0.8) { // Complex expansion
        cerr << "Warning: Performance bottleneck condition triggered - complex expansion scenario!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Here is the instrumented C++ code with the inserted checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function to identify large grid influence
void check_large_grid_invariant(int n, int c) {
    if (n > 100000 && c > n * n * 0.9) {
        cerr << "Warning: Performance bottleneck condition triggered - large grid with high target cells!" << endl;
        abort();
    }
}

// Checker function to identify initial cell position influence
void check_initial_position_invariant(int n, int x, int y) {
    if (x <= 2 || x >= n - 1 || y <= 2 || y >= n - 1) {
        cerr << "Warning: Performance bottleneck condition triggered - initial cell near edge or corner!" << endl;
        abort();
    }
}

// Checker function to identify complexity of expansion
void check_expansion_complexity_invariant(int n, int x, int y, int c) {
    if (abs(x - n / 2) + abs(y - n / 2) > n / 4 && c > n * n * 0.8) {
        cerr << "Warning: Performance bottleneck condition triggered - complex expansion scenario!" << endl;
        abort();
    }
}

int main() {
    int n, x, y, c, d1, d2, d3, d4, l, r, u, d, i = 0, c1, c2, c3, c4;
    cin >> n >> x >> y >> c;

    // Insert checks after reading inputs
    check_large_grid_invariant(n, c); // Check for large grid influence
    check_initial_position_invariant(n, x, y); // Check for initial cell position influence
    check_expansion_complexity_invariant(n, x, y, c); // Check for complex expansion

    d1 = min(n - y, x - 1);
    c1 = max(n - y, x - 1) - d1;
    d2 = min(n - y, n - x);
    c2 = max(n - y, n - x) - d2;
    d3 = min(y - 1, x - 1);
    c3 = max(y - 1, x - 1) - d3;
    d4 = min(y - 1, n - x);
    c4 = max(y - 1, n - x) - d4;
    long sum = 1;
    u = x, d = x, l = y, r = y;
    while (sum < c) {
        if (i) {
            if (i > d1 && i <= c1 + d1)
                sum += d1;
            else if (i <= d1)
                sum += i;
            else
                sum += max(0, --d1);
            if (i > d2 && i <= c2 + d2)
                sum += d2;
            else if (i <= d2)
                sum += i;
            else
                sum += max(0, --d2);
            if (i > d3 && i <= c3 + d3)
                sum += d3;
            else if (i <= d3)
                sum += i;
            else
                sum += max(0, --d3);
            if (i > d4 && i <= c4 + d4)
                sum += d4;
            else if (i <= d4)
                sum += i;
            else
                sum += max(0, --d4);
        }
        if (u > 1) sum++;
        if (d < n) sum++;
        if (l > 1) sum++;
        if (r < n) sum++;
        u--, d++, l--, r++;
        i++;
    }
    cout << i;
    return 0;
}
```

### Explanation:

- **Insertion Points**:
  - The checks are inserted immediately after reading the input values, ensuring they are evaluated before entering performance-critical loops.
- **Purpose**:
  - These checks act as early warnings for conditions identified as potential bottlenecks, allowing for immediate feedback if the input matches any slow-triggering scenario.

