system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Mr. Bender has a digital table of size n × n, each cell can be switched on or off. He wants the field to have at least c switched on squares. When this condition is fulfilled, Mr Bender will be happy.

We'll consider the table rows numbered from top to bottom from 1 to n, and the columns — numbered from left to right from 1 to n. Initially there is exactly one switched on cell with coordinates (x, y) (x is the row number, y is the column number), and all other cells are switched off. Then each second we switch on the cells that are off but have the side-adjacent cells that are on.

For a cell with coordinates (x, y) the side-adjacent cells are cells with coordinates (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1).

In how many seconds will Mr. Bender get happy?

Input

The first line contains four space-separated integers n, x, y, c (1 ≤ n, c ≤ 109; 1 ≤ x, y ≤ n; c ≤ n2).

Output

In a single line print a single integer — the answer to the problem.

Examples

Input

6 4 3 1


Output

0


Input

9 3 8 10


Output

2

Note

Initially the first test has one painted cell, so the answer is 0. In the second test all events will go as is shown on the figure. <image>.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int INF = 0x3f3f3f3f;
const long long LLINF = 1e18;
const int maxN = 1e5;
long long n, row, col, c;
long long sum(long long t) {
  long long max_l = col - 1, max_r = n - col;
  long long ans = 0;
  ans += 1 + min(t, max_l) + min(t, max_r);
  long long aux_t = t;
  for (int i = row - 1; i >= 1; i--) {
    aux_t--;
    if (aux_t < 0) break;
    ans += 1 + min(aux_t, max_l) + min(aux_t, max_r);
  }
  for (int i = row + 1; i <= n; i++) {
    t--;
    if (t < 0) break;
    ans += 1 + min(t, max_l) + min(t, max_r);
  }
  return ans;
}
int main() {
  scanf("%lld %lld", &n, &row), scanf("%lld %lld", &col, &c);
  long long lo = 0, hi = 1e6;
  while (lo < hi) {
    long long mi = lo + (hi - lo) / 2;
    if (sum(mi) >= c)
      hi = mi;
    else
      lo = mi + 1;
  }
  printf("%lld\n", hi);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000000 1 999999940 857945620


(G.2) Fast Input

1 1 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 0x3f3f3f3f; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long LLINF = 1e18; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int maxN = 1e5; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long n, row, col, c; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long sum(long long t) { /* line 7 slow_hit_count: 20, fast_hit_count: 20 */
  long long max_l = col - 1, max_r = n - col; /* line 8 slow_hit_count: 20, fast_hit_count: 20 */
  long long ans = 0; /* line 9 slow_hit_count: 20, fast_hit_count: 20 */
  ans += 1 + min(t, max_l) + min(t, max_r); /* line 10 slow_hit_count: 20, fast_hit_count: 20 */
  long long aux_t = t; /* line 11 slow_hit_count: 20, fast_hit_count: 20 */
  for (int i = row - 1; i >= 1; i--) { /* line 12 slow_hit_count: 20, fast_hit_count: 20 */
    aux_t--; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    if (aux_t < 0) break; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    ans += 1 + min(aux_t, max_l) + min(aux_t, max_r); /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = row + 1; i <= n; i++) { /* line 17 slow_hit_count: 1594329, fast_hit_count: 20 */
    t--; /* line 18 slow_hit_count: 1594329, fast_hit_count: 0 */
    if (t < 0) break; /* line 19 slow_hit_count: 1594329, fast_hit_count: 0 */
    ans += 1 + min(t, max_l) + min(t, max_r); /* line 20 slow_hit_count: 1594309, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 22 slow_hit_count: 20, fast_hit_count: 20 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%lld %lld", &n, &row), scanf("%lld %lld", &col, &c); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  long long lo = 0, hi = 1e6; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  while (lo < hi) { /* line 27 slow_hit_count: 21, fast_hit_count: 21 */
    long long mi = lo + (hi - lo) / 2; /* line 28 slow_hit_count: 20, fast_hit_count: 20 */
    if (sum(mi) >= c) /* line 29 slow_hit_count: 20, fast_hit_count: 20 */
      hi = mi; /* line 30 slow_hit_count: 13, fast_hit_count: 20 */
    else /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      lo = mi + 1; /* line 32 slow_hit_count: 7, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", hi); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose why the program runs slowly for the slow input, let's go through the analysis as outlined in the tasks.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-level Hit Counts:**
   - Line 17 (`for (int i = row + 1; i <= n; i++)`) and subsequent lines within this loop (lines 18-20) are executed significantly more times in the slow input compared to the fast input. Specifically, line 17 is hit 1,594,329 times for the slow input but only 20 times for the fast input.

2. **Pinpoint Lines or Functions Significantly More Hits:**
   - The `sum` function itself (line 7) is called 20 times for both inputs, but the loop starting at line 17 is the hotspot during the slow run.
   - The loop from lines 17 to 21 is the main contributor to the high execution time for the slow input, as it iterates over a large range driven by the value of `n`, which is very large in the case of the slow input.

3. **Infer Interaction with Data Structures and Input Constraints:**
   - The loop's range depends on the initial position `row` and the grid size `n`; when `n` is large, the loop iterates many times, particularly if `row` is near the start of the range.
   - As `n` is extremely large (up to \(10^9\)), this loop potentially iterates a huge number of times, limited by `t`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Generate Natural Language Statements:**
   - When the grid size `n` is large and the initial row position `row` is near the beginning or the end of the grid, the program takes significantly longer due to extensive iterations over the grid.
   - If the target number of lit cells `c` is close to \(n^2\), the computation requires checking many cells, leading to a longer execution time.

2. **Abstract Categories or Thresholds:**
   - "When the grid size `n` is large, particularly close to its upper constraint, and the initial lit cell is positioned near one of the boundaries of the grid, the program may take significantly longer to compute the result."

3. **Correlate Conditions to Input Patterns:**
   - "If the initial position is such that the breadth of the lit region grows over a large number of rows or columns (e.g., when `row` or `col` is near the grid edge), performance can degrade due to the extensive loop operations required to meet the condition `c`."

4. **Avoid Hardcoding and Focus on Fuzzer Utility:**
   - The invariant checks should be broad and based on the conceptual understanding of constraints rather than specific numeric values from inputs.

### Performance-Characterizing Invariants

1. **Invariant 1: Large Grid Size with Edge Starting Position**
   - "When `n` is large and the initial lit cell is positioned near the edges of the grid, the number of operations required can grow significantly due to extensive iterations, causing performance to degrade."

2. **Invariant 2: High Target `c` Relative to Grid Size**
   - "If `c` is high relative to the grid size, specifically when it's a substantial fraction of `n^2`, the grid iteration and lit cell expansion may result in a longer computation time."

3. **Invariant 3: Iterative Growth Across the Grid**
   - "When the loop in the `sum` function needs to iterate across a large number of rows or columns, performance will degrade, especially if this is required to meet a high target `c`."

These invariants take into account the relationship between the input parameters and the conditions under which the program's performance deteriorates, ensuring they are general enough to apply to a wide range of similar scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Mr. Bender has a digital table of size n × n, each cell can be switched on or off. He wants the field to have at least c switched on squares. When this condition is fulfilled, Mr Bender will be happy.

We'll consider the table rows numbered from top to bottom from 1 to n, and the columns — numbered from left to right from 1 to n. Initially there is exactly one switched on cell with coordinates (x, y) (x is the row number, y is the column number), and all other cells are switched off. Then each second we switch on the cells that are off but have the side-adjacent cells that are on.

For a cell with coordinates (x, y) the side-adjacent cells are cells with coordinates (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1).

In how many seconds will Mr. Bender get happy?

Input

The first line contains four space-separated integers n, x, y, c (1 ≤ n, c ≤ 109; 1 ≤ x, y ≤ n; c ≤ n2).

Output

In a single line print a single integer — the answer to the problem.

Examples

Input

6 4 3 1


Output

0


Input

9 3 8 10


Output

2

Note

Initially the first test has one painted cell, so the answer is 0. In the second test all events will go as is shown on the figure. <image>.

Solution (C++ code):
{solution}


assistant: Let's begin with Phase 3, where we translate the performance-characterizing invariants into C++ code snippets that check the conditions at runtime.

### Phase 3: Implement Performance-Characterizing Invariants in C++

Based on the natural language invariants derived earlier, here's how you can implement them as runtime checks in C++:

1. **Invariant 1: Large Grid Size with Edge Starting Position**
   - This invariant checks if the grid size `n` is large and the initial position is near the grid's boundaries, which can lead to extensive iterations.

```cpp
void check_large_grid_with_edge_start(long long n, long long row, long long col) {
    if (n > 1e8 && (row <= 10 || row >= n-10 || col <= 10 || col >= n-10)) {
        cerr << "Warning: Performance bottleneck condition triggered - large grid with edge start!" << endl;
        abort();
    }
}
```

2. **Invariant 2: High Target `c` Relative to Grid Size**
   - This invariant checks if `c` is high relative to the grid size `n`, specifically when it approaches a substantial fraction of `n^2`.

```cpp
void check_high_target_c(long long n, long long c) {
    if (c > 0.9 * n * n) {
        cerr << "Warning: Performance bottleneck condition triggered - high target c relative to grid size!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Iterative Growth Across the Grid**
   - This invariant checks for potential performance issues when the loop in the `sum` function iterates over a large number of rows or columns.

```cpp
void check_iterative_growth(long long n, long long row, long long col) {
    if (n > 1e8 && (row <= 10 || row >= n-10 || col <= 10 || col >= n-10)) {
        cerr << "Warning: Performance bottleneck condition triggered - iterative growth across the grid!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Now we will integrate these checks into the provided solution code. We'll place these checks after reading the input but before the heavy computation starts.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int INF = 0x3f3f3f3f;
const long long LLINF = 1e18;
const int maxN = 1e5;
long long n, row, col, c;

// Checker functions
void check_large_grid_with_edge_start(long long n, long long row, long long col) {
    if (n > 1e8 && (row <= 10 || row >= n-10 || col <= 10 || col >= n-10)) {
        cerr << "Warning: Performance bottleneck condition triggered - large grid with edge start!" << endl;
        abort();
    }
}

void check_high_target_c(long long n, long long c) {
    if (c > 0.9 * n * n) {
        cerr << "Warning: Performance bottleneck condition triggered - high target c relative to grid size!" << endl;
        abort();
    }
}

long long sum(long long t) {
    long long max_l = col - 1, max_r = n - col;
    long long ans = 0;
    ans += 1 + min(t, max_l) + min(t, max_r);
    long long aux_t = t;
    for (int i = row - 1; i >= 1; i--) {
        aux_t--;
        if (aux_t < 0) break;
        ans += 1 + min(aux_t, max_l) + min(aux_t, max_r);
    }
    for (int i = row + 1; i <= n; i++) {
        t--;
        if (t < 0) break;
        ans += 1 + min(t, max_l) + min(t, max_r);
    }
    return ans;
}

int main() {
    scanf("%lld %lld", &n, &row);
    scanf("%lld %lld", &col, &c);

    // Insert performance checks here
    check_large_grid_with_edge_start(n, row, col);
    check_high_target_c(n, c);

    long long lo = 0, hi = 1e6;
    while (lo < hi) {
        long long mi = lo + (hi - lo) / 2;
        if (sum(mi) >= c)
            hi = mi;
        else
            lo = mi + 1;
    }
    printf("%lld\n", hi);
    return 0;
}
```

### Explanation

- **Check Placement**: The checks are placed after the input is read but before any heavy computations. This allows us to catch potential performance problems based on the input characteristics.
- **Abort on Trigger**: The program will terminate with a warning if any of the performance bottleneck conditions are met, helping identify scenarios that degrade performance.

