system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Mr. Bender has a digital table of size n × n, each cell can be switched on or off. He wants the field to have at least c switched on squares. When this condition is fulfilled, Mr Bender will be happy.

We'll consider the table rows numbered from top to bottom from 1 to n, and the columns — numbered from left to right from 1 to n. Initially there is exactly one switched on cell with coordinates (x, y) (x is the row number, y is the column number), and all other cells are switched off. Then each second we switch on the cells that are off but have the side-adjacent cells that are on.

For a cell with coordinates (x, y) the side-adjacent cells are cells with coordinates (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1).

In how many seconds will Mr. Bender get happy?

Input

The first line contains four space-separated integers n, x, y, c (1 ≤ n, c ≤ 109; 1 ≤ x, y ≤ n; c ≤ n2).

Output

In a single line print a single integer — the answer to the problem.

Examples

Input

6 4 3 1


Output

0


Input

9 3 8 10


Output

2

Note

Initially the first test has one painted cell, so the answer is 0. In the second test all events will go as is shown on the figure. <image>.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int INF = 0x3f3f3f3f;
const long long LLINF = 1e18;
const int maxN = 1e5;
long long n, row, col, c;
long long sum(long long t) {
  long long max_l = col - 1, max_r = n - col;
  long long ans = 0;
  ans += 1 + min(t, max_l) + min(t, max_r);
  long long aux_t = t;
  for (int i = row - 1; i >= 1; i--) {
    aux_t--;
    if (aux_t < 0) break;
    ans += 1 + min(aux_t, max_l) + min(aux_t, max_r);
  }
  for (int i = row + 1; i <= n; i++) {
    t--;
    if (t < 0) break;
    ans += 1 + min(t, max_l) + min(t, max_r);
  }
  return ans;
}
int main() {
  scanf("%lld %lld", &n, &row), scanf("%lld %lld", &col, &c);
  long long lo = 0, hi = 1e5;
  while (lo < hi) {
    long long mi = lo + (hi - lo) / 2;
    if (sum(mi) >= c)
      hi = mi;
    else
      lo = mi + 1;
  }
  printf("%lld\n", hi);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000000 1 999999940 857945620


(G.2) Fast Input

1 1 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 0x3f3f3f3f; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long LLINF = 1e18; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int maxN = 1e5; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long n, row, col, c; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long sum(long long t) { /* line 7 slow_hit_count: 16, fast_hit_count: 17 */
  long long max_l = col - 1, max_r = n - col; /* line 8 slow_hit_count: 16, fast_hit_count: 17 */
  long long ans = 0; /* line 9 slow_hit_count: 16, fast_hit_count: 17 */
  ans += 1 + min(t, max_l) + min(t, max_r); /* line 10 slow_hit_count: 16, fast_hit_count: 17 */
  long long aux_t = t; /* line 11 slow_hit_count: 16, fast_hit_count: 17 */
  for (int i = row - 1; i >= 1; i--) { /* line 12 slow_hit_count: 16, fast_hit_count: 17 */
    aux_t--; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    if (aux_t < 0) break; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    ans += 1 + min(aux_t, max_l) + min(aux_t, max_r); /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = row + 1; i <= n; i++) { /* line 17 slow_hit_count: 652225, fast_hit_count: 17 */
    t--; /* line 18 slow_hit_count: 652225, fast_hit_count: 0 */
    if (t < 0) break; /* line 19 slow_hit_count: 652225, fast_hit_count: 0 */
    ans += 1 + min(t, max_l) + min(t, max_r); /* line 20 slow_hit_count: 652209, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 22 slow_hit_count: 16, fast_hit_count: 17 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%lld %lld", &n, &row), scanf("%lld %lld", &col, &c); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  long long lo = 0, hi = 1e5; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  while (lo < hi) { /* line 27 slow_hit_count: 17, fast_hit_count: 18 */
    long long mi = lo + (hi - lo) / 2; /* line 28 slow_hit_count: 16, fast_hit_count: 17 */
    if (sum(mi) >= c) /* line 29 slow_hit_count: 16, fast_hit_count: 17 */
      hi = mi; /* line 30 slow_hit_count: 8, fast_hit_count: 17 */
    else /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      lo = mi + 1; /* line 32 slow_hit_count: 8, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", hi); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the provided C code, let's break down the problem with the provided slow and fast inputs, along with the hit count data.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Hit Count Analysis:**
   - **Lines 17-20:** The loop starting at line 17 is hit significantly more often during the slow input compared to the fast input. For the slow input, this loop iterates 652,225 times, whereas for the fast input, it iterates only 17 times.
   - **Reason for High Hit Count:**
     - The loop's high iteration count indicates significant work is being done here, especially as it processes each row from `row+1` to `n`, adjusting the parameter `t` and calculating `ans` based on `t`, `max_l`, and `max_r`.

2. **Impact of Input Constraints:**
   - **Constraints (n ≤ 10^9):** The very large value of `n` in the slow input (1,000,000,000) compared to a much smaller `c` implies the need to grow the number of "on" cells until reaching at least `c`.
   - **Binary Search in The Main Function:** The binary search loop refines `mi` to find the minimal number of seconds needed, calling `sum(mi)` frequently. This loop terminates when `sum(mi) >= c`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the code analysis and the performance characteristics revealed by the hit counts, here are some performance-characterizing invariants:

1. **Expansion Across Large n:**
   - **Invariant:** "If `n` is large, and `row` is near one of the edges, leading to a situation where the loop traverses a large portion of the grid, the computation time will increase significantly."
   - **Explanation:** This captures the scenario where the loop iterates from `row+1` to `n` for vast values of `n`, leading to many unnecessary iterations when `c` is much smaller than `n*n`.

2. **High Iteration Within Loops:**
   - **Invariant:** "When `c` is significantly smaller than `n^2`, the loops within the `sum` function can become bottlenecks, especially when they need to cover nearly the entire grid to incrementally achieve the necessary count of 'on' cells."
   - **Explanation:** This invariant identifies the inefficiency of the loop that needs to iterate over a huge chunk of the grid due to the parameters.

3. **Binary Search Over Large Grid:**
   - **Invariant:** "Binary search will perform poorly when each refinement of `mi` results in a call to `sum` that requires looping through a massive section of the grid controlled by `n` and constrained by `c`."
   - **Explanation:** The overhead of binary search is exacerbated by large `n`, causing unnecessary computational cost when `c` is relatively small.

### Conclusion

To optimize this program, it would be beneficial to avoid unnecessary iterations over large sections of the grid when `n` is significantly larger than `c`. This could include optimizing the loop conditions within the `sum` function or using a more efficient approach to count the needed cells, possibly leveraging symmetry or early stopping conditions when possible.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Mr. Bender has a digital table of size n × n, each cell can be switched on or off. He wants the field to have at least c switched on squares. When this condition is fulfilled, Mr Bender will be happy.

We'll consider the table rows numbered from top to bottom from 1 to n, and the columns — numbered from left to right from 1 to n. Initially there is exactly one switched on cell with coordinates (x, y) (x is the row number, y is the column number), and all other cells are switched off. Then each second we switch on the cells that are off but have the side-adjacent cells that are on.

For a cell with coordinates (x, y) the side-adjacent cells are cells with coordinates (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1).

In how many seconds will Mr. Bender get happy?

Input

The first line contains four space-separated integers n, x, y, c (1 ≤ n, c ≤ 109; 1 ≤ x, y ≤ n; c ≤ n2).

Output

In a single line print a single integer — the answer to the problem.

Examples

Input

6 4 3 1


Output

0


Input

9 3 8 10


Output

2

Note

Initially the first test has one painted cell, so the answer is 0. In the second test all events will go as is shown on the figure. <image>.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

To implement the performance-characterizing invariants as runtime checks in C++:

1. **Expansion Across Large n:**
   - Check if `n` is excessively large while processing a large range of rows in the loop.

2. **High Iteration Within Loops:**
   - Check if the number of iterations in loops is unnecessarily high when `c` is much smaller than `n^2`.

3. **Binary Search Over Large Grid:**
   - Monitor the binary search loop to detect conditions where the search space is unnecessarily extended due to large `n` or small `c`.

Let's implement these checks:

```cpp
#include <iostream>
#include <algorithm>
#include <cstdio>

using namespace std;

const int maxN = 1e5;
long long n, row, col, c;

long long sum(long long t) {
    long long max_l = col - 1, max_r = n - col;
    long long ans = 0;
    ans += 1 + min(t, max_l) + min(t, max_r);
    long long aux_t = t;
    for (int i = row - 1; i >= 1; i--) {
        aux_t--;
        if (aux_t < 0) break;
        ans += 1 + min(aux_t, max_l) + min(aux_t, max_r);
    }
    for (int i = row + 1; i <= n; i++) {
        t--;
        if (t < 0) break;
        ans += 1 + min(t, max_l) + min(t, max_r);
    }
    return ans;
}

void check_large_n_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to large n!" << endl;
        abort();
    }
}

void check_loop_iteration_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to high loop iterations!" << endl;
        abort();
    }
}

void check_binary_search_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered during binary search!" << endl;
        abort();
    }
}

int main() {
    scanf("%lld %lld", &n, &row);
    scanf("%lld %lld", &col, &c);

    // Check for large n causing inefficiencies in computation
    check_large_n_invariant(n > 1e8);

    long long lo = 0, hi = 1e5;

    while (lo < hi) {
        long long mi = lo + (hi - lo) / 2;

        // Check inefficiencies in loop due to high iteration counts
        check_loop_iteration_invariant(mi > 1e4);

        if (sum(mi) >= c)
            hi = mi;
        else
            lo = mi + 1;
    }

    // Check inefficiencies in binary search due to large n or small c
    check_binary_search_invariant((n * n) > 1e9 && c < (n * n * 0.1));

    printf("%lld\n", hi);
    return 0;
}
```

### Phase 4: Integrate the Checker Code with the Original Program

Here's the final instrumented code, with the checkers implemented in a way that they are placed effectively to avoid overhead in tight loops, while still catching potential performance bottlenecks:

```cpp
#include <iostream>
#include <algorithm>
#include <cstdio>

using namespace std;

const int maxN = 1e5;
long long n, row, col, c;

long long sum(long long t) {
    long long max_l = col - 1, max_r = n - col;
    long long ans = 0;
    ans += 1 + min(t, max_l) + min(t, max_r);
    long long aux_t = t;
    for (int i = row - 1; i >= 1; i--) {
        aux_t--;
        if (aux_t < 0) break;
        ans += 1 + min(aux_t, max_l) + min(aux_t, max_r);
    }
    for (int i = row + 1; i <= n; i++) {
        t--;
        if (t < 0) break;
        ans += 1 + min(t, max_l) + min(t, max_r);
    }
    return ans;
}

void check_large_n_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to large n!" << endl;
        abort();
    }
}

void check_loop_iteration_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to high loop iterations!" << endl;
        abort();
    }
}

void check_binary_search_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered during binary search!" << endl;
        abort();
    }
}

int main() {
    scanf("%lld %lld", &n, &row);
    scanf("%lld %lld", &col, &c);

    // Check for large n causing inefficiencies in computation
    check_large_n_invariant(n > 1e8);

    long long lo = 0, hi = 1e5;

    while (lo < hi) {
        long long mi = lo + (hi - lo) / 2;

        // Check inefficiencies in loop due to high iteration counts
        check_loop_iteration_invariant(mi > 1e4);

        if (sum(mi) >= c)
            hi = mi;
        else
            lo = mi + 1;
    }

    // Check inefficiencies in binary search due to large n or small c
    check_binary_search_invariant((n * n) > 1e9 && c < (n * n * 0.1));

    printf("%lld\n", hi);
    return 0;
}
```

The code now includes runtime checks that will identify when the performance bottlenecks identified can potentially be triggered, with appropriate messages and program exits to alert developers or testers during execution. This setup will be useful for debugging purposes and ensuring that future changes to input data or changes in problem constraints do not silently degrade performance.

