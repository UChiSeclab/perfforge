system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Drazil has many friends. Some of them are happy and some of them are unhappy. Drazil wants to make all his friends become happy. So he invented the following plan.

There are n boys and m girls among his friends. Let's number them from 0 to n - 1 and 0 to m - 1 separately. In i-th day, Drazil invites <image>-th boy and <image>-th girl to have dinner together (as Drazil is programmer, i starts from 0). If one of those two people is happy, the other one will also become happy. Otherwise, those two people remain in their states. Once a person becomes happy (or if he/she was happy originally), he stays happy forever.

Drazil wants to know whether he can use this plan to make all his friends become happy at some moment.

Input

The first line contains two integer n and m (1 ≤ n, m ≤ 100).

The second line contains integer b (0 ≤ b ≤ n), denoting the number of happy boys among friends of Drazil, and then follow b distinct integers x1, x2, ..., xb (0 ≤ xi < n), denoting the list of indices of happy boys.

The third line conatins integer g (0 ≤ g ≤ m), denoting the number of happy girls among friends of Drazil, and then follow g distinct integers y1, y2, ... , yg (0 ≤ yj < m), denoting the list of indices of happy girls.

It is guaranteed that there is at least one person that is unhappy among his friends.

Output

If Drazil can make all his friends become happy by this plan, print "Yes". Otherwise, print "No".

Examples

Input

2 3
0
1 0


Output

Yes


Input

2 4
1 0
1 2


Output

No


Input

2 3
1 0
1 1


Output

Yes

Note

By <image> we define the remainder of integer division of i by k.

In first sample case: 

  * On the 0-th day, Drazil invites 0-th boy and 0-th girl. Because 0-th girl is happy at the beginning, 0-th boy become happy at this day. 
  * On the 1-st day, Drazil invites 1-st boy and 1-st girl. They are both unhappy, so nothing changes at this day. 
  * On the 2-nd day, Drazil invites 0-th boy and 2-nd girl. Because 0-th boy is already happy he makes 2-nd girl become happy at this day. 
  * On the 3-rd day, Drazil invites 1-st boy and 0-th girl. 0-th girl is happy, so she makes 1-st boy happy. 
  * On the 4-th day, Drazil invites 0-th boy and 1-st girl. 0-th boy is happy, so he makes the 1-st girl happy. So, all friends become happy at this moment. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 105;
int n, m;
int B_h[maxn];
int G_h[maxn];
int main() {
  int i, j;
  while (scanf("%d%d", &n, &m) != EOF) {
    int x, y;
    int a, b;
    memset(B_h, 0, sizeof(B_h));
    memset(G_h, 0, sizeof(G_h));
    scanf("%d", &x);
    for (i = 0; i < x; i++) {
      scanf("%d", &a);
      B_h[a] = 1;
    }
    scanf("%d", &y);
    for (i = 0; i < y; i++) {
      scanf("%d", &b);
      G_h[b] = 1;
    }
    int ans = 100000;
    int k = 0;
    int flag = 0;
    while (ans--) {
      int boy = (k) % n;
      int gir = (k) % m;
      if (B_h[boy] || G_h[gir]) {
        B_h[boy] = 1;
        G_h[gir] = 1;
      }
      k++;
      int sb = 0, sg = 0;
      for (i = 0; i < n; i++) {
        if (B_h[i]) sb++;
      }
      for (i = 0; i < m; i++) {
        if (G_h[i]) sg++;
      }
      if (sb == n && sg == m) {
        flag = 1;
        break;
      }
    }
    if (flag)
      printf("Yes\n");
    else
      printf("No\n");
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 100
50 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
50 50 51 52 53 54 55 56 57 58 59 60 61 62 63 20 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99


(G.2) Fast Input

100 100
50 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
50 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 105; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int B_h[maxn]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int G_h[maxn]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  int i, j; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  while (scanf("%d%d", &n, &m) != EOF) { /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
    int x, y; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    int a, b; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    memset(B_h, 0, sizeof(B_h)); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
    memset(G_h, 0, sizeof(G_h)); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
    scanf("%d", &x); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    for (i = 0; i < x; i++) { /* line 15 slow_hit_count: 51, fast_hit_count: 51 */
      scanf("%d", &a); /* line 16 slow_hit_count: 50, fast_hit_count: 50 */
      B_h[a] = 1; /* line 17 slow_hit_count: 50, fast_hit_count: 50 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d", &y); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    for (i = 0; i < y; i++) { /* line 20 slow_hit_count: 51, fast_hit_count: 51 */
      scanf("%d", &b); /* line 21 slow_hit_count: 50, fast_hit_count: 50 */
      G_h[b] = 1; /* line 22 slow_hit_count: 50, fast_hit_count: 50 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    int ans = 100000; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
    int k = 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    int flag = 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    while (ans--) { /* line 27 slow_hit_count: 100001, fast_hit_count: 100 */
      int boy = (k) % n; /* line 28 slow_hit_count: 100000, fast_hit_count: 100 */
      int gir = (k) % m; /* line 29 slow_hit_count: 100000, fast_hit_count: 100 */
      if (B_h[boy] || G_h[gir]) { /* line 30 slow_hit_count: 100000, fast_hit_count: 100 */
        B_h[boy] = 1; /* line 31 slow_hit_count: 99000, fast_hit_count: 100 */
        G_h[gir] = 1; /* line 32 slow_hit_count: 99000, fast_hit_count: 100 */
      } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      k++; /* line 34 slow_hit_count: 100000, fast_hit_count: 100 */
      int sb = 0, sg = 0; /* line 35 slow_hit_count: 100000, fast_hit_count: 100 */
      for (i = 0; i < n; i++) { /* line 36 slow_hit_count: 10100000, fast_hit_count: 10100 */
        if (B_h[i]) sb++; /* line 37 slow_hit_count: 10000000, fast_hit_count: 10000 */
      } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
      for (i = 0; i < m; i++) { /* line 39 slow_hit_count: 10100000, fast_hit_count: 10100 */
        if (G_h[i]) sg++; /* line 40 slow_hit_count: 10000000, fast_hit_count: 10000 */
      } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
      if (sb == n && sg == m) { /* line 42 slow_hit_count: 100000, fast_hit_count: 100 */
        flag = 1; /* line 43 slow_hit_count: 0, fast_hit_count: 1 */
        break; /* line 44 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    if (flag) /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
      printf("Yes\n"); /* line 48 slow_hit_count: 0, fast_hit_count: 1 */
    else /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      printf("No\n"); /* line 50 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the problem of performance bottlenecks in the provided C program, we need to conduct a detailed analysis and derive performance-characterizing invariants. The program is designed to determine if all friends can be made happy based on given initial conditions.

### Phase 1: Identification of Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - Lines within the `while (ans--)` loop are executed significantly more often for the slow input, particularly the subsections involving the double `for` loop:
     - `for (i = 0; i < n; i++)` and `for (i = 0; i < m; i++)` are executed 10,100,000 times for the slow input versus 10,100 times for the fast input.

2. **Pinpointing Lines with More Hits on Slow Input:**
   - The most significant performance hits occur on the lines within these loops:
     - Line 36: `for (i = 0; i < n; i++)` and Line 39: `for (i = 0; i < m; i++)`.
     - These lines are executed repeatedly, checking the happiness status of all boys and girls.

3. **Inference on Interaction with Data Structures:**
   - The nested loops check the happiness status of every boy and girl repeatedly, which is computationally expensive when the conditions don't change frequently.
   - The use of `%` operator for indices `boy` and `gir` in an iterative manner contributes to repeated checks without significant state change in slow input case.

### Phase 2: Derivation of Performance-Characterizing Invariants

1. **Natural Language Performance Invariants:**

   - **Invariant 1:** "In scenarios where both the number of boys `n` and the number of girls `m` are close to their upper limit (100), and the initial distribution of happiness is such that there is a balance between happy and unhappy individuals, the program may exhibit slow performance due to repetitive checks across all individuals without a quick convergence to a solution."
   
   - **Invariant 2:** "When the initial state of happiness is distributed such that a large number of boys and girls remain perpetually unhappy for several iterations (e.g., due to lack of interaction with initially happy counterparts), the program exhibits a slowdown as it continues to iterate without significant change in happiness states."

2. **Thresholds and Input Patterns:**
   - The slowdown likely occurs when both `n` and `m` approach 100, and the initial happiness of boys and girls is distributed in such a manner that not all individuals can quickly become happy through a few interactions.
   - The problem becomes especially pronounced if the initial happiness distribution results in low propagation of happiness due to disconnected or isolated groups.

3. **Fuzzing Utility:**
   - The outlined invariants assist in identifying slow performance scenarios by focusing on inputs where a sizable portion of the population starts off unhappy and does not interact with initially happy others until many iterations.
   - By setting up these conditions, a fuzzer can effectively test and highlight input scenarios that would likely lead to performance issues.

By understanding these performance characteristics and triggers, developers and testers can better anticipate and mitigate scenarios leading to inefficient execution in similar problem settings.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Drazil has many friends. Some of them are happy and some of them are unhappy. Drazil wants to make all his friends become happy. So he invented the following plan.

There are n boys and m girls among his friends. Let's number them from 0 to n - 1 and 0 to m - 1 separately. In i-th day, Drazil invites <image>-th boy and <image>-th girl to have dinner together (as Drazil is programmer, i starts from 0). If one of those two people is happy, the other one will also become happy. Otherwise, those two people remain in their states. Once a person becomes happy (or if he/she was happy originally), he stays happy forever.

Drazil wants to know whether he can use this plan to make all his friends become happy at some moment.

Input

The first line contains two integer n and m (1 ≤ n, m ≤ 100).

The second line contains integer b (0 ≤ b ≤ n), denoting the number of happy boys among friends of Drazil, and then follow b distinct integers x1, x2, ..., xb (0 ≤ xi < n), denoting the list of indices of happy boys.

The third line conatins integer g (0 ≤ g ≤ m), denoting the number of happy girls among friends of Drazil, and then follow g distinct integers y1, y2, ... , yg (0 ≤ yj < m), denoting the list of indices of happy girls.

It is guaranteed that there is at least one person that is unhappy among his friends.

Output

If Drazil can make all his friends become happy by this plan, print "Yes". Otherwise, print "No".

Examples

Input

2 3
0
1 0


Output

Yes


Input

2 4
1 0
1 2


Output

No


Input

2 3
1 0
1 1


Output

Yes

Note

By <image> we define the remainder of integer division of i by k.

In first sample case: 

  * On the 0-th day, Drazil invites 0-th boy and 0-th girl. Because 0-th girl is happy at the beginning, 0-th boy become happy at this day. 
  * On the 1-st day, Drazil invites 1-st boy and 1-st girl. They are both unhappy, so nothing changes at this day. 
  * On the 2-nd day, Drazil invites 0-th boy and 2-nd girl. Because 0-th boy is already happy he makes 2-nd girl become happy at this day. 
  * On the 3-rd day, Drazil invites 1-st boy and 0-th girl. 0-th girl is happy, so she makes 1-st boy happy. 
  * On the 4-th day, Drazil invites 0-th boy and 1-st girl. 0-th boy is happy, so he makes the 1-st girl happy. So, all friends become happy at this moment. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as C++ Checkers

Based on the natural language invariants derived earlier, we will create checker functions to identify potential performance bottlenecks.

```cpp
#include <iostream>
using namespace std;

// Checker for when both n and m are maximized, with balanced initial happiness
void check_max_people_invariant(int n, int m, int happyBoysCount, int happyGirlsCount) {
    if (n == 100 && m == 100 && happyBoysCount == happyGirlsCount) {
        cerr << "Warning: Performance bottleneck condition triggered - maximum people with balanced happiness!" << endl;
        abort();
    }
}

// Checker for slow propagation due to isolated groups
void check_slow_propagation_invariant(int sb, int sg, int n, int m) {
    if (sb < n / 2 && sg < m / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - slow happiness propagation due to isolated groups!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checker functions into the original C++ code without adding overhead to tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 105;
int n, m;
int B_h[maxn];
int G_h[maxn];

void check_max_people_invariant(int n, int m, int happyBoysCount, int happyGirlsCount) {
    if (n == 100 && m == 100 && happyBoysCount == happyGirlsCount) {
        cerr << "Warning: Performance bottleneck condition triggered - maximum people with balanced happiness!" << endl;
        abort();
    }
}

void check_slow_propagation_invariant(int sb, int sg, int n, int m) {
    if (sb < n / 2 && sg < m / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - slow happiness propagation due to isolated groups!" << endl;
        abort();
    }
}

int main() {
    int i, j;
    while (scanf("%d%d", &n, &m) != EOF) {
        int x, y;
        int a, b;
        memset(B_h, 0, sizeof(B_h));
        memset(G_h, 0, sizeof(G_h));
        scanf("%d", &x);
        for (i = 0; i < x; i++) {
            scanf("%d", &a);
            B_h[a] = 1;
        }
        scanf("%d", &y);
        for (i = 0; i < y; i++) {
            scanf("%d", &b);
            G_h[b] = 1;
        }

        // Check for maximum people invariant after reading input
        check_max_people_invariant(n, m, x, y);

        int ans = 100000;
        int k = 0;
        int flag = 0;
        while (ans--) {
            int boy = (k) % n;
            int gir = (k) % m;
            if (B_h[boy] || G_h[gir]) {
                B_h[boy] = 1;
                G_h[gir] = 1;
            }
            k++;
            int sb = 0, sg = 0;
            for (i = 0; i < n; i++) {
                if (B_h[i]) sb++;
            }
            for (i = 0; i < m; i++) {
                if (G_h[i]) sg++;
            }

            // Check for slow propagation invariant during each iteration
            check_slow_propagation_invariant(sb, sg, n, m);

            if (sb == n && sg == m) {
                flag = 1;
                break;
            }
        }
        if (flag)
            printf("Yes\n");
        else
            printf("No\n");
    }
    return 0;
}
```

### Explanation of Integrated Checkers:

- **`check_max_people_invariant`**: After input is read, it checks if both `n` and `m` are at their maximum values and initial happiness is balanced. This identifies a potential bottleneck due to maximum population size and initial conditions.
  
- **`check_slow_propagation_invariant`**: During each iteration, it checks if the number of happy individuals is less than half of their respective groups, which indicates slow happiness propagation due to isolated groups. This is crucial to catch scenarios where propagation is inefficient.

These checks are strategically placed to identify performance bottlenecks without adding unnecessary overhead in the critical loop.

