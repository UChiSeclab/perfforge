system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Drazil has many friends. Some of them are happy and some of them are unhappy. Drazil wants to make all his friends become happy. So he invented the following plan.

There are n boys and m girls among his friends. Let's number them from 0 to n - 1 and 0 to m - 1 separately. In i-th day, Drazil invites <image>-th boy and <image>-th girl to have dinner together (as Drazil is programmer, i starts from 0). If one of those two people is happy, the other one will also become happy. Otherwise, those two people remain in their states. Once a person becomes happy (or if he/she was happy originally), he stays happy forever.

Drazil wants to know whether he can use this plan to make all his friends become happy at some moment.

Input

The first line contains two integer n and m (1 ≤ n, m ≤ 100).

The second line contains integer b (0 ≤ b ≤ n), denoting the number of happy boys among friends of Drazil, and then follow b distinct integers x1, x2, ..., xb (0 ≤ xi < n), denoting the list of indices of happy boys.

The third line conatins integer g (0 ≤ g ≤ m), denoting the number of happy girls among friends of Drazil, and then follow g distinct integers y1, y2, ... , yg (0 ≤ yj < m), denoting the list of indices of happy girls.

It is guaranteed that there is at least one person that is unhappy among his friends.

Output

If Drazil can make all his friends become happy by this plan, print "Yes". Otherwise, print "No".

Examples

Input

2 3
0
1 0


Output

Yes


Input

2 4
1 0
1 2


Output

No


Input

2 3
1 0
1 1


Output

Yes

Note

By <image> we define the remainder of integer division of i by k.

In first sample case: 

  * On the 0-th day, Drazil invites 0-th boy and 0-th girl. Because 0-th girl is happy at the beginning, 0-th boy become happy at this day. 
  * On the 1-st day, Drazil invites 1-st boy and 1-st girl. They are both unhappy, so nothing changes at this day. 
  * On the 2-nd day, Drazil invites 0-th boy and 2-nd girl. Because 0-th boy is already happy he makes 2-nd girl become happy at this day. 
  * On the 3-rd day, Drazil invites 1-st boy and 0-th girl. 0-th girl is happy, so she makes 1-st boy happy. 
  * On the 4-th day, Drazil invites 0-th boy and 1-st girl. 0-th boy is happy, so he makes the 1-st girl happy. So, all friends become happy at this moment. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, m;
  scanf("%d%d", &n, &m);
  int boys[n];
  int girls[m];
  for (int i = 0; i < n; i++) boys[i] = 1;
  for (int i = 0; i < m; i++) girls[i] = 1;
  int b;
  scanf("%d", &b);
  for (int i = 0; i < b; i++) {
    int x;
    scanf("%d", &x);
    boys[x] = 0;
  }
  int g;
  scanf("%d", &g);
  for (int i = 0; i < g; i++) {
    int x;
    scanf("%d", &x);
    girls[x] = 0;
  }
  int happy_count = b + g;
  int i = 0;
  while (happy_count < (m + n)) {
    if (i > (m * n * 1000)) {
      cout << "No" << endl;
      return 0;
    }
    int b_idx = i % n;
    int g_idx = i % m;
    if (boys[b_idx] == 0 && girls[g_idx] == 0) {
      i++;
      continue;
    }
    int res = boys[b_idx] & girls[g_idx];
    if (res == 0) {
      boys[b_idx] = girls[g_idx] = 0;
      happy_count++;
    }
    i++;
  }
  cout << "Yes" << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 100
50 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
50 50 51 52 53 54 55 56 57 58 59 60 61 62 63 20 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99


(G.2) Fast Input

100 100
50 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
50 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d%d", &n, &m); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int boys[n]; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int girls[m]; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) boys[i] = 1; /* line 8 slow_hit_count: 101, fast_hit_count: 101 */
  for (int i = 0; i < m; i++) girls[i] = 1; /* line 9 slow_hit_count: 101, fast_hit_count: 101 */
  int b; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &b); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < b; i++) { /* line 12 slow_hit_count: 51, fast_hit_count: 51 */
    int x; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d", &x); /* line 14 slow_hit_count: 50, fast_hit_count: 50 */
    boys[x] = 0; /* line 15 slow_hit_count: 50, fast_hit_count: 50 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  int g; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &g); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < g; i++) { /* line 19 slow_hit_count: 51, fast_hit_count: 51 */
    int x; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d", &x); /* line 21 slow_hit_count: 50, fast_hit_count: 50 */
    girls[x] = 0; /* line 22 slow_hit_count: 50, fast_hit_count: 50 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  int happy_count = b + g; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int i = 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  while (happy_count < (m + n)) { /* line 26 slow_hit_count: 10000002, fast_hit_count: 101 */
    if (i > (m * n * 1000)) { /* line 27 slow_hit_count: 10000002, fast_hit_count: 100 */
      cout << "No" << endl; /* line 28 slow_hit_count: 1, fast_hit_count: 0 */
      return 0; /* line 29 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    int b_idx = i % n; /* line 31 slow_hit_count: 10000001, fast_hit_count: 100 */
    int g_idx = i % m; /* line 32 slow_hit_count: 10000001, fast_hit_count: 100 */
    if (boys[b_idx] == 0 && girls[g_idx] == 0) { /* line 33 slow_hit_count: 10000001, fast_hit_count: 100 */
      i++; /* line 34 slow_hit_count: 9899903, fast_hit_count: 0 */
      continue; /* line 35 slow_hit_count: 9899903, fast_hit_count: 0 */
    } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    int res = boys[b_idx] & girls[g_idx]; /* line 37 slow_hit_count: 100098, fast_hit_count: 100 */
    if (res == 0) { /* line 38 slow_hit_count: 100098, fast_hit_count: 100 */
      boys[b_idx] = girls[g_idx] = 0; /* line 39 slow_hit_count: 98, fast_hit_count: 100 */
      happy_count++; /* line 40 slow_hit_count: 98, fast_hit_count: 100 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    i++; /* line 42 slow_hit_count: 100098, fast_hit_count: 100 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "Yes" << endl; /* line 44 slow_hit_count: 0, fast_hit_count: 1 */
  return 0; /* line 45 slow_hit_count: 1, fast_hit_count: 2 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck of the provided C program with the given problem statement and inputs, we need to analyze the line-level hit counts for both the fast and slow runs. Then, we will identify performance-characterizing invariants.

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Line-level hit count analysis**:
   - The most significant difference in hit counts between the slow and fast runs appears in the loop starting at line 26 (`while (happy_count < (m + n))`).
   - For the slow input, this loop executes 10,000,002 times, whereas it only executes 101 times for the fast input.
   - Certain lines inside the loop, especially the condition checks and index calculations, are executed an extraordinarily high number of times in the slow run compared to the fast run.

2. **Pinpointing Lines with High Hit Counts**:
   - Lines 26, 31, 32, and 33 have hit counts of 10,000,001 or higher for the slow input, indicating these lines are involved in a loop that iterates excessively.
   - Lines 34 and 35 are executed 9,899,903 times in the slow input, showing that the condition `if (boys[b_idx] == 0 && girls[g_idx] == 0)` is frequently true, causing the loop to continue without progress.

3. **Inferences**:
   - The primary cause of inefficiency appears to be in the combination of index calculations and conditional checks that prevent the `happy_count` from increasing effectively.
   - The slow input seems to lead to many iterations of a loop without making any progress in terms of increasing the number of happy people.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the above analysis, we can derive the following performance-characterizing invariants that describe conditions under which the program is likely to enter a slow path:

1. **Invariance 1**: "When the number of initially happy boys is equal to the number of unhappy boys, and similarly for girls, the program may enter a slow convergence loop."
   - Explanation: The slow input has approximately half of the boys and girls initially happy. This leads to a situation where many pairings do not contribute to increasing happiness, causing the loop to iterate excessively.

2. **Invariance 2**: "If there exists a large mismatch in the distribution of happiness across genders initially, resulting in mostly unhappy pairings, the program may perform many ineffective iterations."
   - Explanation: A large number of ineffective iterations occur when the pairings predominantly involve two already happy or two unhappy individuals, preventing progress in terms of making more people happy.

3. **Invariance 3**: "When the residual unhappy subgroups of boys and girls are such that pairing them does not result in a new happy individual, the loop continues without progress."
   - Explanation: The program relies on making effective pairings to increase the `happy_count`. If the pattern of initial happiness does not allow for such pairings, iterations increase without progress.

These invariants abstract the conditions leading to performance degradation without relying on specific numeric values from the slow input. They are based on characteristics of the input and logic that cause the loop to perform ineffectively, ensuring they are applicable to a range of inputs within the provided constraints (e.g., n, m ≤ 100).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Drazil has many friends. Some of them are happy and some of them are unhappy. Drazil wants to make all his friends become happy. So he invented the following plan.

There are n boys and m girls among his friends. Let's number them from 0 to n - 1 and 0 to m - 1 separately. In i-th day, Drazil invites <image>-th boy and <image>-th girl to have dinner together (as Drazil is programmer, i starts from 0). If one of those two people is happy, the other one will also become happy. Otherwise, those two people remain in their states. Once a person becomes happy (or if he/she was happy originally), he stays happy forever.

Drazil wants to know whether he can use this plan to make all his friends become happy at some moment.

Input

The first line contains two integer n and m (1 ≤ n, m ≤ 100).

The second line contains integer b (0 ≤ b ≤ n), denoting the number of happy boys among friends of Drazil, and then follow b distinct integers x1, x2, ..., xb (0 ≤ xi < n), denoting the list of indices of happy boys.

The third line conatins integer g (0 ≤ g ≤ m), denoting the number of happy girls among friends of Drazil, and then follow g distinct integers y1, y2, ... , yg (0 ≤ yj < m), denoting the list of indices of happy girls.

It is guaranteed that there is at least one person that is unhappy among his friends.

Output

If Drazil can make all his friends become happy by this plan, print "Yes". Otherwise, print "No".

Examples

Input

2 3
0
1 0


Output

Yes


Input

2 4
1 0
1 2


Output

No


Input

2 3
1 0
1 1


Output

Yes

Note

By <image> we define the remainder of integer division of i by k.

In first sample case: 

  * On the 0-th day, Drazil invites 0-th boy and 0-th girl. Because 0-th girl is happy at the beginning, 0-th boy become happy at this day. 
  * On the 1-st day, Drazil invites 1-st boy and 1-st girl. They are both unhappy, so nothing changes at this day. 
  * On the 2-nd day, Drazil invites 0-th boy and 2-nd girl. Because 0-th boy is already happy he makes 2-nd girl become happy at this day. 
  * On the 3-rd day, Drazil invites 1-st boy and 0-th girl. 0-th girl is happy, so she makes 1-st boy happy. 
  * On the 4-th day, Drazil invites 0-th boy and 1-st girl. 0-th boy is happy, so he makes the 1-st girl happy. So, all friends become happy at this moment. 

Solution (C++ code):
{solution}


assistant: Let's start with Phase 3, where we'll implement the performance-characterizing invariants derived earlier in C++ code:

### Phase 3: Implementing Performance-Characterizing Invariants in C++

Here are the C++ code snippets implementing the natural language invariants:

1. **Invariant 1**: "When the number of initially happy boys is equal to the number of unhappy boys, and similarly for girls, the program may enter a slow convergence loop."

```cpp
void check_equal_happiness_invariant(int b, int g, int n, int m) {
    if ((b == n / 2) && (g == m / 2)) {
        cerr << "Warning: equal_happiness_invariant triggered - equal numbers of happy and unhappy boys/girls" << endl;
        abort();
    }
}
```

2. **Invariant 2**: "If there exists a large mismatch in the distribution of happiness across genders initially, resulting in mostly unhappy pairings, the program may perform many ineffective iterations."

```cpp
void check_mismatch_invariant(int b, int g, int n, int m) {
    if (abs(b - n) == abs(g - m)) {
        cerr << "Warning: mismatch_invariant triggered - large mismatch in happiness distribution" << endl;
        abort();
    }
}
```

3. **Invariant 3**: "When the residual unhappy subgroups of boys and girls are such that pairing them does not result in a new happy individual, the loop continues without progress."

```cpp
void check_residual_unhappiness_invariant(int happy_count, int n, int m) {
    if (happy_count < (n + m) / 2) {
        cerr << "Warning: residual_unhappiness_invariant triggered - residual unhappy pairs unlikely to make progress" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code with the Original Program

Now, let's integrate these checks into the original C++ program. We will strategically place these checks after reading input and before entering the loop to avoid adding overhead inside tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checkers for performance-characterizing invariants
void check_equal_happiness_invariant(int b, int g, int n, int m) {
    if ((b == n / 2) && (g == m / 2)) {
        cerr << "Warning: equal_happiness_invariant triggered - equal numbers of happy and unhappy boys/girls" << endl;
        abort();
    }
}

void check_mismatch_invariant(int b, int g, int n, int m) {
    if (abs(b - n) == abs(g - m)) {
        cerr << "Warning: mismatch_invariant triggered - large mismatch in happiness distribution" << endl;
        abort();
    }
}

void check_residual_unhappiness_invariant(int happy_count, int n, int m) {
    if (happy_count < (n + m) / 2) {
        cerr << "Warning: residual_unhappiness_invariant triggered - residual unhappy pairs unlikely to make progress" << endl;
        abort();
    }
}

int main() {
    int n, m;
    scanf("%d%d", &n, &m);
    int boys[n];
    int girls[m];
    for (int i = 0; i < n; i++) boys[i] = 1;
    for (int i = 0; i < m; i++) girls[i] = 1;
    int b;
    scanf("%d", &b);
    for (int i = 0; i < b; i++) {
        int x;
        scanf("%d", &x);
        boys[x] = 0;
    }
    int g;
    scanf("%d", &g);
    for (int i = 0; i < g; i++) {
        int x;
        scanf("%d", &x);
        girls[x] = 0;
    }
    int happy_count = b + g;

    // Insert checker functions before the main loop
    check_equal_happiness_invariant(b, g, n, m);
    check_mismatch_invariant(b, g, n, m);
    check_residual_unhappiness_invariant(happy_count, n, m);

    int i = 0;
    while (happy_count < (m + n)) {
        if (i > (m * n * 1000)) {
            cout << "No" << endl;
            return 0;
        }
        int b_idx = i % n;
        int g_idx = i % m;
        if (boys[b_idx] == 0 && girls[g_idx] == 0) {
            i++;
            continue;
        }
        int res = boys[b_idx] & girls[g_idx];
        if (res == 0) {
            boys[b_idx] = girls[g_idx] = 0;
            happy_count++;
        }
        i++;
    }
    cout << "Yes" << endl;
    return 0;
}
```

### Explanation

- **Invariant Checks Placement**: Each check is placed after reading all input data and before entering the main loop. This ensures that the checks do not add any overhead to the loop that processes each pairing.
  
- **Meaningful Warnings**: Each checker outputs a specific warning message, making it easier to identify which invariant was triggered.

- **Aborts on Trigger**: Each check calls `abort()` upon triggering, to stop execution and highlight the performance bottleneck condition.

