system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Drazil has many friends. Some of them are happy and some of them are unhappy. Drazil wants to make all his friends become happy. So he invented the following plan.

There are n boys and m girls among his friends. Let's number them from 0 to n - 1 and 0 to m - 1 separately. In i-th day, Drazil invites <image>-th boy and <image>-th girl to have dinner together (as Drazil is programmer, i starts from 0). If one of those two people is happy, the other one will also become happy. Otherwise, those two people remain in their states. Once a person becomes happy (or if he/she was happy originally), he stays happy forever.

Drazil wants to know whether he can use this plan to make all his friends become happy at some moment.

Input

The first line contains two integer n and m (1 ≤ n, m ≤ 100).

The second line contains integer b (0 ≤ b ≤ n), denoting the number of happy boys among friends of Drazil, and then follow b distinct integers x1, x2, ..., xb (0 ≤ xi < n), denoting the list of indices of happy boys.

The third line conatins integer g (0 ≤ g ≤ m), denoting the number of happy girls among friends of Drazil, and then follow g distinct integers y1, y2, ... , yg (0 ≤ yj < m), denoting the list of indices of happy girls.

It is guaranteed that there is at least one person that is unhappy among his friends.

Output

If Drazil can make all his friends become happy by this plan, print "Yes". Otherwise, print "No".

Examples

Input

2 3
0
1 0


Output

Yes


Input

2 4
1 0
1 2


Output

No


Input

2 3
1 0
1 1


Output

Yes

Note

By <image> we define the remainder of integer division of i by k.

In first sample case: 

  * On the 0-th day, Drazil invites 0-th boy and 0-th girl. Because 0-th girl is happy at the beginning, 0-th boy become happy at this day. 
  * On the 1-st day, Drazil invites 1-st boy and 1-st girl. They are both unhappy, so nothing changes at this day. 
  * On the 2-nd day, Drazil invites 0-th boy and 2-nd girl. Because 0-th boy is already happy he makes 2-nd girl become happy at this day. 
  * On the 3-rd day, Drazil invites 1-st boy and 0-th girl. 0-th girl is happy, so she makes 1-st boy happy. 
  * On the 4-th day, Drazil invites 0-th boy and 1-st girl. 0-th boy is happy, so he makes the 1-st girl happy. So, all friends become happy at this moment. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma GCC optimize("O3")
using namespace std;
const int mod = (int)1e9 + 7;
const long long INF = 1000000000000000000LL;
const int WASTE = (int)2e5;
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(NULL);
  cout.tie(NULL);
  int n, m;
  cin >> n >> m;
  bool z[n], z1[m];
  memset(z, 0, sizeof(z));
  memset(z1, 0, sizeof(z1));
  int k;
  cin >> k;
  int c, cc;
  bool f = 1, ff = 1;
  if (!k) f = 0;
  c = k;
  while (k--) {
    int i;
    cin >> i;
    z[i] = 1;
  }
  cin >> k;
  cc = k;
  if (!k) ff = 0;
  if (!f && !ff) {
    cout << "No";
    return 0;
  }
  while (k--) {
    int i;
    cin >> i;
    z1[i] = 1;
  }
  int ctr = 0, cap = 100 * 100 * 100;
  while (ctr < cap) {
    int i = ctr % n, ii = ctr % m;
    if (z[i] && !z1[ii]) {
      z1[ii] = 1;
      cc++;
    } else if (!z[i] && z1[ii]) {
      z[i] = 1;
      c++;
    }
    if (c == n && cc == m) break;
    ctr++;
  }
  if (c == n && cc == m)
    cout << "Yes";
  else
    cout << "No";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 100
50 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
50 50 51 52 53 54 55 56 57 58 59 60 61 62 63 20 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99


(G.2) Fast Input

100 100
50 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
50 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize("O3") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = (int)1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1000000000000000000LL; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const int WASTE = (int)2e5; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  bool z[n], z1[m]; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  memset(z, 0, sizeof(z)); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  memset(z1, 0, sizeof(z1)); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  int k; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> k; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  int c, cc; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  bool f = 1, ff = 1; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  if (!k) f = 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  c = k; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  while (k--) { /* line 22 slow_hit_count: 51, fast_hit_count: 51 */
    int i; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> i; /* line 24 slow_hit_count: 50, fast_hit_count: 50 */
    z[i] = 1; /* line 25 slow_hit_count: 50, fast_hit_count: 50 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> k; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  cc = k; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  if (!k) ff = 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  if (!f && !ff) { /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "No"; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  while (k--) { /* line 34 slow_hit_count: 51, fast_hit_count: 51 */
    int i; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> i; /* line 36 slow_hit_count: 50, fast_hit_count: 50 */
    z1[i] = 1; /* line 37 slow_hit_count: 50, fast_hit_count: 50 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  int ctr = 0, cap = 100 * 100 * 100; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  while (ctr < cap) { /* line 40 slow_hit_count: 1000001, fast_hit_count: 100 */
    int i = ctr % n, ii = ctr % m; /* line 41 slow_hit_count: 1000000, fast_hit_count: 100 */
    if (z[i] && !z1[ii]) { /* line 42 slow_hit_count: 1000000, fast_hit_count: 100 */
      z1[ii] = 1; /* line 43 slow_hit_count: 49, fast_hit_count: 50 */
      cc++; /* line 44 slow_hit_count: 49, fast_hit_count: 50 */
    } else if (!z[i] && z1[ii]) { /* line 45 slow_hit_count: 999951, fast_hit_count: 50 */
      z[i] = 1; /* line 46 slow_hit_count: 49, fast_hit_count: 50 */
      c++; /* line 47 slow_hit_count: 49, fast_hit_count: 50 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    if (c == n && cc == m) break; /* line 49 slow_hit_count: 1000000, fast_hit_count: 100 */
    ctr++; /* line 50 slow_hit_count: 1000000, fast_hit_count: 99 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  if (c == n && cc == m) /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "Yes"; /* line 53 slow_hit_count: 0, fast_hit_count: 1 */
  else /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "No"; /* line 55 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information:

1. **Line 40**: The `while (ctr < cap)` loop is executed significantly more often in the slow input (1,000,001 times) compared to the fast input (100 times). This indicates that the loop is a major performance bottleneck for the slow input.
   
2. **Lines 41-50**: These lines are executed inside the loop. In particular, line 45 (`else if (!z[i] && z1[ii])`) gets hit 999,951 times in the slow input but only 50 times in the fast input. This suggests that the condition on line 45 is frequently true in the slow input, leading to more iterations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant: High Iteration Count due to Unbalanced Happiness Distribution**
   - **Natural language description**: "If the distribution of initial happiness among boys and girls is such that there's a large imbalance (i.e., either many boys and few girls are happy or vice versa), the number of iterations required to make everyone happy can increase significantly, leading to slow execution."
   - **Explanation**: The slow input likely has a pattern where the happiness is spread unevenly between boys and girls, causing the loop to iterate many times to balance the happiness.

2. **Invariant: Repeated Unnecessary Iterations**
   - **Natural language description**: "If the loop iterates without making significant progress (i.e., when the number of happy boys or girls does not increase with each pass significantly), the program may slow down due to excessive unnecessary iterations."
   - **Explanation**: In the slow input, the loop runs many times because each iteration does not effectively increase the number of happy individuals, indicating inefficient progress.

3. **Invariant: Insufficient Initial Happiness Spread**
   - **Natural language description**: "If the initial number of happy individuals is such that they are not well-distributed across the entire group, the algorithm may require many more days (iterations) to achieve full happiness, slowing down execution."
   - **Explanation**: The slow input likely has regions (either boys or girls) with insufficient initial happiness, requiring more time to propagate happiness across all individuals.

These invariants aim to capture the key conditions under which the performance degrades without relying on specific input values, focusing on the distribution and propagation of happiness among boys and girls.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Drazil has many friends. Some of them are happy and some of them are unhappy. Drazil wants to make all his friends become happy. So he invented the following plan.

There are n boys and m girls among his friends. Let's number them from 0 to n - 1 and 0 to m - 1 separately. In i-th day, Drazil invites <image>-th boy and <image>-th girl to have dinner together (as Drazil is programmer, i starts from 0). If one of those two people is happy, the other one will also become happy. Otherwise, those two people remain in their states. Once a person becomes happy (or if he/she was happy originally), he stays happy forever.

Drazil wants to know whether he can use this plan to make all his friends become happy at some moment.

Input

The first line contains two integer n and m (1 ≤ n, m ≤ 100).

The second line contains integer b (0 ≤ b ≤ n), denoting the number of happy boys among friends of Drazil, and then follow b distinct integers x1, x2, ..., xb (0 ≤ xi < n), denoting the list of indices of happy boys.

The third line conatins integer g (0 ≤ g ≤ m), denoting the number of happy girls among friends of Drazil, and then follow g distinct integers y1, y2, ... , yg (0 ≤ yj < m), denoting the list of indices of happy girls.

It is guaranteed that there is at least one person that is unhappy among his friends.

Output

If Drazil can make all his friends become happy by this plan, print "Yes". Otherwise, print "No".

Examples

Input

2 3
0
1 0


Output

Yes


Input

2 4
1 0
1 2


Output

No


Input

2 3
1 0
1 1


Output

Yes

Note

By <image> we define the remainder of integer division of i by k.

In first sample case: 

  * On the 0-th day, Drazil invites 0-th boy and 0-th girl. Because 0-th girl is happy at the beginning, 0-th boy become happy at this day. 
  * On the 1-st day, Drazil invites 1-st boy and 1-st girl. They are both unhappy, so nothing changes at this day. 
  * On the 2-nd day, Drazil invites 0-th boy and 2-nd girl. Because 0-th boy is already happy he makes 2-nd girl become happy at this day. 
  * On the 3-rd day, Drazil invites 1-st boy and 0-th girl. 0-th girl is happy, so she makes 1-st boy happy. 
  * On the 4-th day, Drazil invites 0-th boy and 1-st girl. 0-th boy is happy, so he makes the 1-st girl happy. So, all friends become happy at this moment. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Translate Invariants into Checker Code

We will implement checker functions based on the natural language invariants derived earlier.

1. **Checker for High Iteration Count due to Unbalanced Happiness Distribution**
   - This condition checks if happiness is greatly unbalanced, leading to an excessive number of iterations.

```cpp
void check_unbalanced_happiness(int happyBoys, int totalBoys, int happyGirls, int totalGirls) {
    if (abs(happyBoys - happyGirls) > (totalBoys + totalGirls) / 4) {
        cerr << "Warning: Performance bottleneck due to unbalanced happiness distribution!" << endl;
        abort();
    }
}
```

2. **Checker for Repeated Unnecessary Iterations**
   - This condition checks if the loop iterates without significant progress.

```cpp
void check_unnecessary_iterations(int iterationCount, int maxIterations, int progress) {
    if (iterationCount > maxIterations / 2 && progress < (iterationCount / 10)) {
        cerr << "Warning: Performance bottleneck due to insufficient progress in iterations!" << endl;
        abort();
    }
}
```

3. **Checker for Insufficient Initial Happiness Spread**
   - This condition checks if the initial set of happy people is too small to spread efficiently.

```cpp
void check_initial_happiness_spread(int happyBoys, int happyGirls, int totalBoys, int totalGirls) {
    if (happyBoys < totalBoys / 4 && happyGirls < totalGirls / 4) {
        cerr << "Warning: Performance bottleneck due to insufficient initial happiness spread!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Program

Now, let's integrate the checker functions into the original C++ program while ensuring efficiency and minimal overhead.

```cpp
#include <bits/stdc++.h>
#pragma GCC optimize("O3")
using namespace std;

// Checker functions
void check_unbalanced_happiness(int happyBoys, int totalBoys, int happyGirls, int totalGirls) {
    if (abs(happyBoys - happyGirls) > (totalBoys + totalGirls) / 4) {
        cerr << "Warning: Performance bottleneck due to unbalanced happiness distribution!" << endl;
        abort();
    }
}

void check_unnecessary_iterations(int iterationCount, int maxIterations, int progress) {
    if (iterationCount > maxIterations / 2 && progress < (iterationCount / 10)) {
        cerr << "Warning: Performance bottleneck due to insufficient progress in iterations!" << endl;
        abort();
    }
}

void check_initial_happiness_spread(int happyBoys, int happyGirls, int totalBoys, int totalGirls) {
    if (happyBoys < totalBoys / 4 && happyGirls < totalGirls / 4) {
        cerr << "Warning: Performance bottleneck due to insufficient initial happiness spread!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    
    int n, m;
    cin >> n >> m;
    
    bool z[n], z1[m];
    memset(z, 0, sizeof(z));
    memset(z1, 0, sizeof(z1));
    
    int k;
    cin >> k;
    int c = k;
    while (k--) {
        int i;
        cin >> i;
        z[i] = 1;
    }
    
    cin >> k;
    int cc = k;
    while (k--) {
        int i;
        cin >> i;
        z1[i] = 1;
    }

    // Check initial conditions
    check_unbalanced_happiness(c, n, cc, m);
    check_initial_happiness_spread(c, cc, n, m);
    
    int ctr = 0, cap = 100 * 100 * 100;
    int initialC = c, initialCC = cc;
    while (ctr < cap) {
        int i = ctr % n, ii = ctr % m;
        if (z[i] && !z1[ii]) {
            z1[ii] = 1;
            cc++;
        } else if (!z[i] && z1[ii]) {
            z[i] = 1;
            c++;
        }
        if (c == n && cc == m) break;
        ctr++;
        
        // Check progress during execution
        if (ctr % 1000 == 0) {
            check_unnecessary_iterations(ctr, cap, (c - initialC) + (cc - initialCC));
        }
    }
    
    if (c == n && cc == m)
        cout << "Yes";
    else
        cout << "No";
    
    return 0;
}
```

### Explanation

- **Unbalanced Happiness Check**: Invoked after initial input parsing to ensure the distribution of happy individuals is reasonably balanced.
- **Initial Happiness Spread Check**: Also invoked after input parsing to assure there are enough initially happy individuals to facilitate spreading.
- **Unnecessary Iterations Check**: Periodically checks the loop to ensure progress is being made. This is placed strategically to avoid overhead by checking every 1000 iterations.

