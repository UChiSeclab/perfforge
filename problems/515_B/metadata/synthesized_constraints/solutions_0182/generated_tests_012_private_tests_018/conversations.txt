system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Drazil has many friends. Some of them are happy and some of them are unhappy. Drazil wants to make all his friends become happy. So he invented the following plan.

There are n boys and m girls among his friends. Let's number them from 0 to n - 1 and 0 to m - 1 separately. In i-th day, Drazil invites <image>-th boy and <image>-th girl to have dinner together (as Drazil is programmer, i starts from 0). If one of those two people is happy, the other one will also become happy. Otherwise, those two people remain in their states. Once a person becomes happy (or if he/she was happy originally), he stays happy forever.

Drazil wants to know whether he can use this plan to make all his friends become happy at some moment.

Input

The first line contains two integer n and m (1 ≤ n, m ≤ 100).

The second line contains integer b (0 ≤ b ≤ n), denoting the number of happy boys among friends of Drazil, and then follow b distinct integers x1, x2, ..., xb (0 ≤ xi < n), denoting the list of indices of happy boys.

The third line conatins integer g (0 ≤ g ≤ m), denoting the number of happy girls among friends of Drazil, and then follow g distinct integers y1, y2, ... , yg (0 ≤ yj < m), denoting the list of indices of happy girls.

It is guaranteed that there is at least one person that is unhappy among his friends.

Output

If Drazil can make all his friends become happy by this plan, print "Yes". Otherwise, print "No".

Examples

Input

2 3
0
1 0


Output

Yes


Input

2 4
1 0
1 2


Output

No


Input

2 3
1 0
1 1


Output

Yes

Note

By <image> we define the remainder of integer division of i by k.

In first sample case: 

  * On the 0-th day, Drazil invites 0-th boy and 0-th girl. Because 0-th girl is happy at the beginning, 0-th boy become happy at this day. 
  * On the 1-st day, Drazil invites 1-st boy and 1-st girl. They are both unhappy, so nothing changes at this day. 
  * On the 2-nd day, Drazil invites 0-th boy and 2-nd girl. Because 0-th boy is already happy he makes 2-nd girl become happy at this day. 
  * On the 3-rd day, Drazil invites 1-st boy and 0-th girl. 0-th girl is happy, so she makes 1-st boy happy. 
  * On the 4-th day, Drazil invites 0-th boy and 1-st girl. 0-th boy is happy, so he makes the 1-st girl happy. So, all friends become happy at this moment. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, m;
  cin >> n >> m;
  int *B = new int[n];
  int *G = new int[m];
  for (int i = 0; i < n; i++) B[i] = 0;
  for (int i = 0; i < m; i++) G[i] = 0;
  int b, g;
  cin >> b;
  for (int i = 0; i < b; i++) {
    int t;
    cin >> t;
    B[t] = 1;
  }
  cin >> g;
  for (int i = 0; i < g; i++) {
    int t;
    cin >> t;
    G[t] = 1;
  }
  int i = 0;
  int max = m * n;
  bool possible = false;
  do {
    int boy = i % n;
    int girl = i % m;
    if (B[boy])
      if (!G[girl]) G[girl] = 1;
    if (G[girl])
      if (!B[boy]) B[boy] = 1;
    i++;
    bool gF = true, bF = true;
    for (int i = 0; i < n; i++)
      if (B[i] == 0) {
        bF = false;
        break;
      }
    for (int i = 0; i < m; i++)
      if (G[i] == 0) {
        gF = false;
        break;
      }
    if (bF && gF) {
      possible = true;
      break;
    }
  } while (i < m * n * 10);
  if (possible)
    cout << "Yes";
  else
    cout << "No";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 100
50 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
50 50 51 52 53 54 55 56 57 58 59 60 61 62 63 20 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99


(G.2) Fast Input

100 100
50 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
50 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int *B = new int[n]; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int *G = new int[m]; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) B[i] = 0; /* line 8 slow_hit_count: 101, fast_hit_count: 101 */
  for (int i = 0; i < m; i++) G[i] = 0; /* line 9 slow_hit_count: 101, fast_hit_count: 101 */
  int b, g; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> b; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < b; i++) { /* line 12 slow_hit_count: 51, fast_hit_count: 51 */
    int t; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> t; /* line 14 slow_hit_count: 50, fast_hit_count: 50 */
    B[t] = 1; /* line 15 slow_hit_count: 50, fast_hit_count: 50 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> g; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < g; i++) { /* line 18 slow_hit_count: 51, fast_hit_count: 51 */
    int t; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> t; /* line 20 slow_hit_count: 50, fast_hit_count: 50 */
    G[t] = 1; /* line 21 slow_hit_count: 50, fast_hit_count: 50 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  int i = 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  int max = m * n; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  bool possible = false; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  do { /* line 26 slow_hit_count: 99999, fast_hit_count: 99 */
    int boy = i % n; /* line 27 slow_hit_count: 100000, fast_hit_count: 100 */
    int girl = i % m; /* line 28 slow_hit_count: 100000, fast_hit_count: 100 */
    if (B[boy]) /* line 29 slow_hit_count: 100000, fast_hit_count: 100 */
      if (!G[girl]) G[girl] = 1; /* line 30 slow_hit_count: 98951, fast_hit_count: 50 */
    if (G[girl]) /* line 31 slow_hit_count: 100000, fast_hit_count: 100 */
      if (!B[boy]) B[boy] = 1; /* line 32 slow_hit_count: 99000, fast_hit_count: 100 */
    i++; /* line 33 slow_hit_count: 100000, fast_hit_count: 100 */
    bool gF = true, bF = true; /* line 34 slow_hit_count: 100000, fast_hit_count: 100 */
    for (int i = 0; i < n; i++) /* line 35 slow_hit_count: 6499209, fast_hit_count: 6375 */
      if (B[i] == 0) { /* line 36 slow_hit_count: 6499209, fast_hit_count: 6374 */
        bF = false; /* line 37 slow_hit_count: 100000, fast_hit_count: 99 */
        break; /* line 38 slow_hit_count: 100000, fast_hit_count: 99 */
      } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < m; i++) /* line 40 slow_hit_count: 6498090, fast_hit_count: 6425 */
      if (G[i] == 0) { /* line 41 slow_hit_count: 6498090, fast_hit_count: 6374 */
        gF = false; /* line 42 slow_hit_count: 100000, fast_hit_count: 49 */
        break; /* line 43 slow_hit_count: 100000, fast_hit_count: 49 */
      } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    if (bF && gF) { /* line 45 slow_hit_count: 100000, fast_hit_count: 100 */
      possible = true; /* line 46 slow_hit_count: 0, fast_hit_count: 1 */
      break; /* line 47 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  } while (i < m * n * 10); /* line 49 slow_hit_count: 100000, fast_hit_count: 99 */
  if (possible) /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "Yes"; /* line 51 slow_hit_count: 0, fast_hit_count: 1 */
  else /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "No"; /* line 53 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 55 slow_hit_count: 0, fast_hit_count: 0 */


assistant: **Phase 1: Identify Expensive or Inefficient Code Segments**

1. **Comparison of Hit Counts**:
   - The `do` loop (lines 26-49) gets hit significantly more in the slow input (100,000 times) compared to the fast input (99 times).
   - The nested loops inside the `do` loop (lines 35-38 and 40-43) are also hit an excessive number of times in the slow input, contributing heavily to the slowdown.
   - Specifically, lines 35 and 40 (which examine all boys and girls, respectively) show hit counts around 6.5 million, indicating these loops are iterating too many times.

2. **Pinpointing Lines**:
   - The issue seems to arise mainly due to the continuous iteration over the nested loops that repeatedly check the happiness state of all boys and girls without any mechanism to efficiently break out when a steady state is reached.

3. **Interaction with Data Structures**:
   - The two arrays `B` and `G` are checked multiple times in a nested fashion, which suggests that the problem lies in the repeated unnecessary checks when no progress is made in making new friends happy.

**Phase 2: Derive Performance-Characterizing Invariants**

1. **Invariants in Natural Language**:

   - **Invariant 1**: "The program may enter a slow path if the number of initially happy boys and girls is such that they are not enough to rapidly propagate happiness throughout all friends. This typically occurs when there are isolated groups of unhappy individuals that cannot be influenced by existing happy ones within reasonable iterations."

     - **Explanation**: When initially happy individuals are not well-distributed or unable to influence certain groups, the program may end up iterating excessively without making progress, as shown by repeated checks on each iteration.

   - **Invariant 2**: "If the process of checking all boys and girls repeatedly through nested loops does not result in new individuals becoming happy, the program can become slow. This situation occurs when no further progress can be made towards the goal of making all friends happy."

     - **Explanation**: The nested iteration over all individuals when no new individuals become happy suggests that the program is stuck in a loop of unproductive checks, leading to an exponential increase in operations without achieving the goal.

2. **Thresholds and Conditions**:

   - The key threshold here involves the distribution and number of initially happy boys and girls. If the initial set of happy individuals is insufficient to influence isolated unhappy groups, the process will repeatedly check these individuals without making progress.

   - Use conditions such as if after a certain number of iterations (e.g., `n * m`, which is the maximum possible combinations of dinners) there is no change in the state of happiness, then further iterations are unlikely to yield results, indicating a need for a faster exit condition.

3. **Fuzzer Utility**:

   - These invariants should help identify slow scenarios where additional iterations do not contribute to making more friends happy, allowing a fuzzer to detect and address these bottlenecks by focusing on input distributions that are more likely to lead to rapid propagation of happiness among friends.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Drazil has many friends. Some of them are happy and some of them are unhappy. Drazil wants to make all his friends become happy. So he invented the following plan.

There are n boys and m girls among his friends. Let's number them from 0 to n - 1 and 0 to m - 1 separately. In i-th day, Drazil invites <image>-th boy and <image>-th girl to have dinner together (as Drazil is programmer, i starts from 0). If one of those two people is happy, the other one will also become happy. Otherwise, those two people remain in their states. Once a person becomes happy (or if he/she was happy originally), he stays happy forever.

Drazil wants to know whether he can use this plan to make all his friends become happy at some moment.

Input

The first line contains two integer n and m (1 ≤ n, m ≤ 100).

The second line contains integer b (0 ≤ b ≤ n), denoting the number of happy boys among friends of Drazil, and then follow b distinct integers x1, x2, ..., xb (0 ≤ xi < n), denoting the list of indices of happy boys.

The third line conatins integer g (0 ≤ g ≤ m), denoting the number of happy girls among friends of Drazil, and then follow g distinct integers y1, y2, ... , yg (0 ≤ yj < m), denoting the list of indices of happy girls.

It is guaranteed that there is at least one person that is unhappy among his friends.

Output

If Drazil can make all his friends become happy by this plan, print "Yes". Otherwise, print "No".

Examples

Input

2 3
0
1 0


Output

Yes


Input

2 4
1 0
1 2


Output

No


Input

2 3
1 0
1 1


Output

Yes

Note

By <image> we define the remainder of integer division of i by k.

In first sample case: 

  * On the 0-th day, Drazil invites 0-th boy and 0-th girl. Because 0-th girl is happy at the beginning, 0-th boy become happy at this day. 
  * On the 1-st day, Drazil invites 1-st boy and 1-st girl. They are both unhappy, so nothing changes at this day. 
  * On the 2-nd day, Drazil invites 0-th boy and 2-nd girl. Because 0-th boy is already happy he makes 2-nd girl become happy at this day. 
  * On the 3-rd day, Drazil invites 1-st boy and 0-th girl. 0-th girl is happy, so she makes 1-st boy happy. 
  * On the 4-th day, Drazil invites 0-th boy and 1-st girl. 0-th boy is happy, so he makes the 1-st girl happy. So, all friends become happy at this moment. 

Solution (C++ code):
{solution}


assistant: **Phase 3: Implement the Natural Language Invariants in C++**

Here are the C++ code snippets implementing the performance-characterizing invariants from Phase 2:

1. **Invariant 1 Checker**: Check if there are isolated groups that cannot become happy through the current distribution of initially happy individuals. This means if there is no change in the number of happy boys or girls over a substantial number of iterations, it indicates a slowdown scenario.

```cpp
void check_progress_invariant(int iteration, int stable_iterations) {
    if (iteration > stable_iterations) {
        cerr << "Warning: Performance bottleneck condition triggered - insufficient progress in making friends happy." << endl;
        abort();
    }
}
```

2. **Invariant 2 Checker**: Detect when the nested loops are iterating without making progress in changing the happiness state, which causes excessive repeated operations.

```cpp
void check_loop_invariant(int iteration, int max_iterations) {
    if (iteration >= max_iterations) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive looping without progress." << endl;
        abort();
    }
}
```

**Phase 4: Propagate and Insert Conditional Checks**

The next step involves integrating these checkers into the original C++ program efficiently. Here's the modified program with the checks embedded:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checkers for performance bottlenecks
void check_progress_invariant(int iteration, int stable_iterations) {
    if (iteration > stable_iterations) {
        cerr << "Warning: Performance bottleneck condition triggered - insufficient progress in making friends happy." << endl;
        abort();
    }
}

void check_loop_invariant(int iteration, int max_iterations) {
    if (iteration >= max_iterations) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive looping without progress." << endl;
        abort();
    }
}

int main() {
    int n, m;
    cin >> n >> m;
    int *B = new int[n];
    int *G = new int[m];
    for (int i = 0; i < n; i++) B[i] = 0;
    for (int i = 0; i < m; i++) G[i] = 0;
    int b, g;
    cin >> b;
    for (int i = 0; i < b; i++) {
        int t;
        cin >> t;
        B[t] = 1;
    }
    cin >> g;
    for (int i = 0; i < g; i++) {
        int t;
        cin >> t;
        G[t] = 1;
    }
    int i = 0;
    int max = m * n;
    bool possible = false;
    int previous_happy_boys = b, previous_happy_girls = g;
    int stable_iterations = 0;
    const int max_stable_iterations = 1000; // Threshold for stable iterations

    do {
        int boy = i % n;
        int girl = i % m;
        if (B[boy])
            if (!G[girl]) G[girl] = 1;
        if (G[girl])
            if (!B[boy]) B[boy] = 1;
        i++;
        bool gF = true, bF = true;
        for (int i = 0; i < n; i++)
            if (B[i] == 0) {
                bF = false;
                break;
            }
        for (int i = 0; i < m; i++)
            if (G[i] == 0) {
                gF = false;
                break;
            }

        // Check for progress
        int current_happy_boys = count(B, B + n, 1);
        int current_happy_girls = count(G, G + m, 1);
        if (current_happy_boys == previous_happy_boys && current_happy_girls == previous_happy_girls) {
            stable_iterations++;
        } else {
            stable_iterations = 0;
        }
        previous_happy_boys = current_happy_boys;
        previous_happy_girls = current_happy_girls;

        // Performance checkers
        check_progress_invariant(stable_iterations, max_stable_iterations);
        check_loop_invariant(i, m * n * 10);

        if (bF && gF) {
            possible = true;
            break;
        }
    } while (i < m * n * 10);

    if (possible)
        cout << "Yes";
    else
        cout << "No";

    delete[] B;
    delete[] G;

    return 0;
}
```

**Explanation of Inserted Checks**:
- **`check_progress_invariant`**: This check is placed after determining if there has been any change in the number of happy boys or girls over several iterations. If no progress is made for `max_stable_iterations`, it signals a potential bottleneck.
  
- **`check_loop_invariant`**: This check is inserted within the loop to ensure that it does not run for an excessive number of iterations (`m * n * 10`), which would indicate stagnation and a performance problem. 

These checks will help to identify when the algorithm is not efficiently making progress towards making all friends happy, allowing developers or fuzzers to detect and understand the conditions under which the performance deteriorates.

