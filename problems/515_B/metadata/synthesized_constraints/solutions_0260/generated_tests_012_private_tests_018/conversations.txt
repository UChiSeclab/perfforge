system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Drazil has many friends. Some of them are happy and some of them are unhappy. Drazil wants to make all his friends become happy. So he invented the following plan.

There are n boys and m girls among his friends. Let's number them from 0 to n - 1 and 0 to m - 1 separately. In i-th day, Drazil invites <image>-th boy and <image>-th girl to have dinner together (as Drazil is programmer, i starts from 0). If one of those two people is happy, the other one will also become happy. Otherwise, those two people remain in their states. Once a person becomes happy (or if he/she was happy originally), he stays happy forever.

Drazil wants to know whether he can use this plan to make all his friends become happy at some moment.

Input

The first line contains two integer n and m (1 ≤ n, m ≤ 100).

The second line contains integer b (0 ≤ b ≤ n), denoting the number of happy boys among friends of Drazil, and then follow b distinct integers x1, x2, ..., xb (0 ≤ xi < n), denoting the list of indices of happy boys.

The third line conatins integer g (0 ≤ g ≤ m), denoting the number of happy girls among friends of Drazil, and then follow g distinct integers y1, y2, ... , yg (0 ≤ yj < m), denoting the list of indices of happy girls.

It is guaranteed that there is at least one person that is unhappy among his friends.

Output

If Drazil can make all his friends become happy by this plan, print "Yes". Otherwise, print "No".

Examples

Input

2 3
0
1 0


Output

Yes


Input

2 4
1 0
1 2


Output

No


Input

2 3
1 0
1 1


Output

Yes

Note

By <image> we define the remainder of integer division of i by k.

In first sample case: 

  * On the 0-th day, Drazil invites 0-th boy and 0-th girl. Because 0-th girl is happy at the beginning, 0-th boy become happy at this day. 
  * On the 1-st day, Drazil invites 1-st boy and 1-st girl. They are both unhappy, so nothing changes at this day. 
  * On the 2-nd day, Drazil invites 0-th boy and 2-nd girl. Because 0-th boy is already happy he makes 2-nd girl become happy at this day. 
  * On the 3-rd day, Drazil invites 1-st boy and 0-th girl. 0-th girl is happy, so she makes 1-st boy happy. 
  * On the 4-th day, Drazil invites 0-th boy and 1-st girl. 0-th boy is happy, so he makes the 1-st girl happy. So, all friends become happy at this moment. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int hbb[109], hgg[109];
int main() {
  int n, m, a, b, hb, hg, i;
  scanf("%d %d", &n, &m);
  scanf("%d", &hb);
  memset(hbb, 0, sizeof(hbb));
  for (i = 0; i < hb; i++) {
    scanf("%d", &a);
    hbb[a] = 1;
  }
  scanf("%d", &hg);
  memset(hgg, 0, sizeof(hgg));
  for (i = 0; i < hg; i++) {
    scanf("%d", &a);
    hgg[a] = 1;
  }
  int flag = 1;
  for (i = 0; i <= 1000000; i++) {
    if (hg == m && hb == n) {
      flag = 0;
      break;
    }
    a = i % n;
    b = i % m;
    if (hbb[a]) {
      if (hgg[b] == 0) {
        hgg[b] = 1;
        hg++;
      }
    } else if (hgg[b]) {
      if (hbb[a] == 0) {
        hbb[a] = 1;
        hb++;
      }
    }
  }
  printf("%s\n", flag ? "No" : "Yes");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 100
50 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
50 50 51 52 53 54 55 56 57 58 59 60 61 62 63 20 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99


(G.2) Fast Input

100 100
50 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
50 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int hbb[109], hgg[109]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, a, b, hb, hg, i; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d %d", &n, &m); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &hb); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  memset(hbb, 0, sizeof(hbb)); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < hb; i++) { /* line 9 slow_hit_count: 51, fast_hit_count: 51 */
    scanf("%d", &a); /* line 10 slow_hit_count: 50, fast_hit_count: 50 */
    hbb[a] = 1; /* line 11 slow_hit_count: 50, fast_hit_count: 50 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &hg); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  memset(hgg, 0, sizeof(hgg)); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < hg; i++) { /* line 15 slow_hit_count: 51, fast_hit_count: 51 */
    scanf("%d", &a); /* line 16 slow_hit_count: 50, fast_hit_count: 50 */
    hgg[a] = 1; /* line 17 slow_hit_count: 50, fast_hit_count: 50 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  int flag = 1; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i <= 1000000; i++) { /* line 20 slow_hit_count: 1000002, fast_hit_count: 101 */
    if (hg == m && hb == n) { /* line 21 slow_hit_count: 1000001, fast_hit_count: 101 */
      flag = 0; /* line 22 slow_hit_count: 0, fast_hit_count: 1 */
      break; /* line 23 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    a = i % n; /* line 25 slow_hit_count: 1000001, fast_hit_count: 100 */
    b = i % m; /* line 26 slow_hit_count: 1000001, fast_hit_count: 100 */
    if (hbb[a]) { /* line 27 slow_hit_count: 1000001, fast_hit_count: 100 */
      if (hgg[b] == 0) { /* line 28 slow_hit_count: 989952, fast_hit_count: 50 */
        hgg[b] = 1; /* line 29 slow_hit_count: 49, fast_hit_count: 50 */
        hg++; /* line 30 slow_hit_count: 49, fast_hit_count: 50 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } else if (hgg[b]) { /* line 32 slow_hit_count: 10049, fast_hit_count: 50 */
      if (hbb[a] == 0) { /* line 33 slow_hit_count: 49, fast_hit_count: 50 */
        hbb[a] = 1; /* line 34 slow_hit_count: 49, fast_hit_count: 50 */
        hb++; /* line 35 slow_hit_count: 49, fast_hit_count: 50 */
      } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%s\n", flag ? "No" : "Yes"); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the provided C program, we need to analyze the line-level hit counts for both the slow and fast inputs. The goal is to identify which parts of the code are contributing to the slowdown and derive conditions that trigger these slow paths.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The loop starting at line 20 (`for (i = 0; i <= 1000000; i++)`) is hit 1,000,002 times in the slow input compared to only 101 times in the fast input.
   - Lines within this loop, such as lines 21, 25, 26, 27, 28, and 32, also show significantly higher hit counts for the slow input, indicating that the program remains in the loop for almost the entire 1,000,000 iterations.

2. **Identification of Critical Sections:**
   - The loop at line 20 is the primary source of inefficiency. The condition in line 21 is checking if all boys (`hb == n`) and all girls (`hg == m`) are happy, which allows the loop to exit early in the fast input case.
   - However, this condition fails to be met early in the slow input, resulting in many iterations.
   - The conditional checks at lines 27 and 32 determine if a boy or a girl can be made happy based on their counterpart's happiness, which directly influences `hb` and `hg` increments.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following performance-characterizing invariants in natural language:

1. **Invariant for Loop Execution:**
   - **Natural Language Description:** "If the initial distribution of happy boys and girls is such that not all boys or not all girls can be made happy quickly, the loop continues for a large number of iterations, causing a slowdown."
   - **Explanation:** The performance becomes an issue when the initial happy boys and girls are not sufficiently interconnected to rapidly make all friends happy, which causes the loop to execute close to its maximum iteration count.

2. **Invariant for Interaction between Boys and Girls:**
   - **Natural Language Description:** "When the set of initially happy boys and girls does not provide a path to happiness for all others within a few iterations, the program may take significantly longer to complete."
   - **Explanation:** The condition `hb == n && hg == m` fails to be satisfied early, which results in the repeated execution of the conditions in the loop that attempt to spread happiness.

3. **Invariant Related to Modulo Operation:**
   - **Natural Language Description:** "If the modulo operations result in repetitive patterns that do not efficiently propagate happiness between boys and girls, performance may degrade due to excessive iterations."
   - **Explanation:** The modulo operations (`a = i % n` and `b = i % m`) are intended to cycle through boys and girls, but if these cycles do not facilitate making everyone happy, the loop runs longer.

These invariants highlight the importance of the initial configuration of happiness among boys and girls and how it affects the iteration count within the loop, directly impacting performance. Each invariant helps to identify scenarios where the program may run into performance issues, even if `n` and `m` are within problem constraints (e.g., `n, m <= 100`).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Drazil has many friends. Some of them are happy and some of them are unhappy. Drazil wants to make all his friends become happy. So he invented the following plan.

There are n boys and m girls among his friends. Let's number them from 0 to n - 1 and 0 to m - 1 separately. In i-th day, Drazil invites <image>-th boy and <image>-th girl to have dinner together (as Drazil is programmer, i starts from 0). If one of those two people is happy, the other one will also become happy. Otherwise, those two people remain in their states. Once a person becomes happy (or if he/she was happy originally), he stays happy forever.

Drazil wants to know whether he can use this plan to make all his friends become happy at some moment.

Input

The first line contains two integer n and m (1 ≤ n, m ≤ 100).

The second line contains integer b (0 ≤ b ≤ n), denoting the number of happy boys among friends of Drazil, and then follow b distinct integers x1, x2, ..., xb (0 ≤ xi < n), denoting the list of indices of happy boys.

The third line conatins integer g (0 ≤ g ≤ m), denoting the number of happy girls among friends of Drazil, and then follow g distinct integers y1, y2, ... , yg (0 ≤ yj < m), denoting the list of indices of happy girls.

It is guaranteed that there is at least one person that is unhappy among his friends.

Output

If Drazil can make all his friends become happy by this plan, print "Yes". Otherwise, print "No".

Examples

Input

2 3
0
1 0


Output

Yes


Input

2 4
1 0
1 2


Output

No


Input

2 3
1 0
1 1


Output

Yes

Note

By <image> we define the remainder of integer division of i by k.

In first sample case: 

  * On the 0-th day, Drazil invites 0-th boy and 0-th girl. Because 0-th girl is happy at the beginning, 0-th boy become happy at this day. 
  * On the 1-st day, Drazil invites 1-st boy and 1-st girl. They are both unhappy, so nothing changes at this day. 
  * On the 2-nd day, Drazil invites 0-th boy and 2-nd girl. Because 0-th boy is already happy he makes 2-nd girl become happy at this day. 
  * On the 3-rd day, Drazil invites 1-st boy and 0-th girl. 0-th girl is happy, so she makes 1-st boy happy. 
  * On the 4-th day, Drazil invites 0-th boy and 1-st girl. 0-th boy is happy, so he makes the 1-st girl happy. So, all friends become happy at this moment. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Here are the C++ code snippets implementing the performance-characterizing invariants derived earlier:

1. **Invariant for Loop Execution:**
    - **Natural Language Description:** "If the initial distribution of happy boys and girls is such that not all boys or not all girls can be made happy quickly, the loop continues for a large number of iterations, causing a slowdown."

```cpp
void check_loop_execution_invariant(int hb, int hg, int n, int m) {
    if (hb < n && hg < m) {
        cerr << "Warning: Potential for excessive loop iterations due to incomplete initial happiness distribution!" << endl;
        abort();
    }
}
```

2. **Invariant for Interaction between Boys and Girls:**
    - **Natural Language Description:** "When the set of initially happy boys and girls does not provide a path to happiness for all others within a few iterations, the program may take significantly longer to complete."

```cpp
void check_interaction_invariant(int hb, int hg, int n, int m) {
    if (hb + hg < n + m) {
        cerr << "Warning: Insufficient initial happy connections may lead to prolonged execution!" << endl;
        abort();
    }
}
```

3. **Invariant Related to Modulo Operation:**
    - **Natural Language Description:** "If the modulo operations result in repetitive patterns that do not efficiently propagate happiness between boys and girls, performance may degrade due to excessive iterations."

```cpp
void check_modulo_operation_invariant(int i, int n, int m) {
    if (i % n == 0 && i % m == 0) {
        cerr << "Warning: Modulo pattern may lead to inefficient propagation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checks into the Original Program

Below is the original C++ program with the integrated performance checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;

int hbb[109], hgg[109];

void check_loop_execution_invariant(int hb, int hg, int n, int m) {
    if (hb < n && hg < m) {
        cerr << "Warning: Potential for excessive loop iterations due to incomplete initial happiness distribution!" << endl;
        abort();
    }
}

void check_interaction_invariant(int hb, int hg, int n, int m) {
    if (hb + hg < n + m) {
        cerr << "Warning: Insufficient initial happy connections may lead to prolonged execution!" << endl;
        abort();
    }
}

void check_modulo_operation_invariant(int i, int n, int m) {
    if (i % n == 0 && i % m == 0) {
        cerr << "Warning: Modulo pattern may lead to inefficient propagation!" << endl;
        abort();
    }
}

int main() {
    int n, m, a, b, hb, hg, i;
    scanf("%d %d", &n, &m);
    scanf("%d", &hb);
    memset(hbb, 0, sizeof(hbb));
    for (i = 0; i < hb; i++) {
        scanf("%d", &a);
        hbb[a] = 1;
    }
    scanf("%d", &hg);
    memset(hgg, 0, sizeof(hgg));
    for (i = 0; i < hg; i++) {
        scanf("%d", &a);
        hgg[a] = 1;
    }

    // Insert checks before the loop begins
    check_loop_execution_invariant(hb, hg, n, m);
    check_interaction_invariant(hb, hg, n, m);

    int flag = 1;
    for (i = 0; i <= 1000000; i++) {
        // Insert check for potential inefficient modulo operation
        check_modulo_operation_invariant(i, n, m);

        if (hg == m && hb == n) {
            flag = 0;
            break;
        }
        a = i % n;
        b = i % m;
        if (hbb[a]) {
            if (hgg[b] == 0) {
                hgg[b] = 1;
                hg++;
            }
        } else if (hgg[b]) {
            if (hbb[a] == 0) {
                hbb[a] = 1;
                hb++;
            }
        }
    }
    printf("%s\n", flag ? "No" : "Yes");
    return 0;
}
```

### Explanation of Integrated Checks

- **Loop Execution Invariant:** This check is performed right before the main loop to proactively detect if the initial distribution of happy friends is likely to lead to excessive iterations.
  
- **Interaction Invariant:** This check is also placed before the loop to ensure that the initial happiness setup is sufficient to potentially solve the problem early without excessive looping.

- **Modulo Operation Invariant:** This check is embedded within the loop to catch inefficient propagation patterns that might arise due to modulo operations cycling through friends without making effective happiness changes. 

These checks will help identify scenarios where the program might encounter performance issues due to the structure and initial conditions of the problem.

