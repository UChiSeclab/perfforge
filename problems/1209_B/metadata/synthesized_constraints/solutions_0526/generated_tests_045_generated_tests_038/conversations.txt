system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

It is a holiday season, and Koala is decorating his house with cool lights! He owns n lights, all of which flash periodically.

After taking a quick glance at them, Koala realizes that each of his lights can be described with two parameters a_i and b_i. Light with parameters a_i and b_i will toggle (on to off, or off to on) every a_i seconds starting from the b_i-th second. In other words, it will toggle at the moments b_i, b_i + a_i, b_i + 2 ⋅ a_i and so on.

You know for each light whether it's initially on or off and its corresponding parameters a_i and b_i. Koala is wondering what is the maximum number of lights that will ever be on at the same time. So you need to find that out.

<image> Here is a graphic for the first example.

Input

The first line contains a single integer n (1 ≤ n ≤ 100), the number of lights.

The next line contains a string s of n characters. The i-th character is "1", if the i-th lamp is initially on. Otherwise, i-th character is "0".

The i-th of the following n lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ 5) — the parameters of the i-th light.

Output

Print a single integer — the maximum number of lights that will ever be on at the same time.

Examples

Input


3
101
3 3
3 2
3 1


Output


2


Input


4
1111
3 4
5 2
3 1
3 2


Output


4


Input


6
011100
5 3
5 5
2 4
3 5
4 2
1 5


Output


6

Note

For first example, the lamps' states are shown in the picture above. The largest number of simultaneously on lamps is 2 (e.g. at the moment 2).

In the second example, all lights are initially on. So the answer is 4.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
inline void print(vector<long long int>& a) {
  for (int i = 0; i < a.size(); i++) cout << a[i] << " ";
  cout << "\n";
}
inline void inp(vector<int>& a, vector<int>& b) {
  for (int i = 0; i < a.size(); i++) {
    cin >> a[i] >> b[i];
  }
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  ;
  int n;
  cin >> n;
  string s;
  cin >> s;
  vector<int> a(n), b(n);
  inp(a, b);
  int ans = 0;
  for (int i = 0; i < 500000; i++) {
    int temp = 0;
    for (int j = 0; j < n; j++) {
      if (s[j] == '1') {
        temp++;
      }
    }
    ans = max(temp, ans);
    if (ans == n) break;
    for (int j = 0; j < n; j++) {
      if (i - b[j] >= 0 && (i - b[j]) % a[j] == 0) {
        if (s[j] == '1')
          s[j] = '0';
        else if (s[j] == '0')
          s[j] = '1';
      }
    }
  }
  cout << ans << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

25
0111101111011110111101111
1 1
2 2
1 3
1 4
1 5
2 1
2 2
2 5
2 4
2 10
3 1
3 2
3 3
3 4
3 5
4 1
4 2
4 3
1 4
4 5
5 2
5 2
5 3
5 4
5 5


(G.2) Fast Input

25
0111101111011110111101111
1 1
2 2
1 3
1 4
1 5
2 1
2 2
2 5
2 4
2 10
3 1
3 2
3 3
3 4
3 5
4 1
4 2
4 3
1 4
4 5
5 1
5 2
5 3
5 4
5 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
inline void print(vector<long long int>& a) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < a.size(); i++) cout << a[i] << " "; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "\n"; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
inline void inp(vector<int>& a, vector<int>& b) { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < a.size(); i++) { /* line 8 slow_hit_count: 26, fast_hit_count: 26 */
    cin >> a[i] >> b[i]; /* line 9 slow_hit_count: 25, fast_hit_count: 25 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  int n; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  string s; /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> s; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> a(n), b(n); /* line 20 slow_hit_count: 3, fast_hit_count: 3 */
  inp(a, b); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 0; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 500000; i++) { /* line 23 slow_hit_count: 500001, fast_hit_count: 3 */
    int temp = 0; /* line 24 slow_hit_count: 500000, fast_hit_count: 3 */
    for (int j = 0; j < n; j++) { /* line 25 slow_hit_count: 13000000, fast_hit_count: 78 */
      if (s[j] == '1') { /* line 26 slow_hit_count: 12500000, fast_hit_count: 75 */
        temp++; /* line 27 slow_hit_count: 6250026, fast_hit_count: 65 */
      } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    ans = max(temp, ans); /* line 30 slow_hit_count: 500000, fast_hit_count: 3 */
    if (ans == n) break; /* line 31 slow_hit_count: 500000, fast_hit_count: 3 */
    for (int j = 0; j < n; j++) { /* line 32 slow_hit_count: 13000000, fast_hit_count: 52 */
      if (i - b[j] >= 0 && (i - b[j]) % a[j] == 0) { /* line 33 slow_hit_count: 12500000, fast_hit_count: 50 */
        if (s[j] == '1') /* line 34 slow_hit_count: 5833300, fast_hit_count: 5 */
          s[j] = '0'; /* line 35 slow_hit_count: 2916653, fast_hit_count: 0 */
        else if (s[j] == '0') /* line 36 slow_hit_count: 2916647, fast_hit_count: 5 */
          s[j] = '1'; /* line 37 slow_hit_count: 2916647, fast_hit_count: 5 */
      } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the hit count information, the following observations can be made:

1. **Outer Loop (Line 23):** The loop iterates up to 500,000 times. This is a significant factor contributing to the slowdown. In the fast run, this loop breaks early (after 3 iterations), while in the slow run, it iterates the full 500,000 times.

2. **Inner Loops (Lines 25 and 32):** The nested loops iterate over `n` (which can be up to 100). Line 25 has 13,000,000 hits in the slow run compared to only 78 in the fast run. Line 32 also has 13,000,000 hits in the slow run compared to 52 in the fast run.

3. **Conditions (Line 33):** The condition in line 33 is crucial. It checks if the light should toggle its state. The number of hits indicates this condition is frequently true in the slow run, leading to constant state toggling.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following conditions potentially lead to the program's slow execution:

1. **Condition: The Maximum Iteration Limit is Reached**
   - **Invariant:** "If the computation loop reaches its predefined maximum iteration limit without reaching the condition `ans == n`, the performance degrades significantly."
   - This suggests that if no configuration of lights results in all being on at the same time early in the loop, the program will keep iterating unnecessarily, leading to a slowdown.

2. **Condition: Frequent Toggling of Lights**
   - **Invariant:** "When multiple lights have parameters that cause frequent toggling within the same timeframe, the program experiences a slowdown due to excessive state checks and updates."
   - This indicates that certain patterns of `a_i` and `b_i` values may cause lights to toggle states frequently and in synchronization, leading to a high number of operations.

3. **Condition: Prolonged Execution Without Convergence**
   - **Invariant:** "If the condition to break out of the loop (`ans == n`) is not met within a few iterations, it is likely that the lights’ toggling will continue indefinitely under the current parameters, leading to a prolonged execution."
   - This highlights that failing to achieve a complete 'on' state early can trap the program in unnecessary iterations.

4. **Condition: Numerous Toggles Per Second**
   - **Invariant:** "If many lights toggle at the same second, especially in a synchronized manner due to similar `a_i` values, the computational cost rises significantly."
   - This suggests certain synchronization of toggle events can lead to excessive toggling calculations.

By understanding these invariants, a fuzzer or developer can detect scenarios that might trigger these conditions, allowing for further optimization or input validation to prevent such slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
It is a holiday season, and Koala is decorating his house with cool lights! He owns n lights, all of which flash periodically.

After taking a quick glance at them, Koala realizes that each of his lights can be described with two parameters a_i and b_i. Light with parameters a_i and b_i will toggle (on to off, or off to on) every a_i seconds starting from the b_i-th second. In other words, it will toggle at the moments b_i, b_i + a_i, b_i + 2 ⋅ a_i and so on.

You know for each light whether it's initially on or off and its corresponding parameters a_i and b_i. Koala is wondering what is the maximum number of lights that will ever be on at the same time. So you need to find that out.

<image> Here is a graphic for the first example.

Input

The first line contains a single integer n (1 ≤ n ≤ 100), the number of lights.

The next line contains a string s of n characters. The i-th character is "1", if the i-th lamp is initially on. Otherwise, i-th character is "0".

The i-th of the following n lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ 5) — the parameters of the i-th light.

Output

Print a single integer — the maximum number of lights that will ever be on at the same time.

Examples

Input


3
101
3 3
3 2
3 1


Output


2


Input


4
1111
3 4
5 2
3 1
3 2


Output


4


Input


6
011100
5 3
5 5
2 4
3 5
4 2
1 5


Output


6

Note

For first example, the lamps' states are shown in the picture above. The largest number of simultaneously on lamps is 2 (e.g. at the moment 2).

In the second example, all lights are initially on. So the answer is 4.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ checker functions based on the performance-characterizing invariants derived earlier:

1. **Checker Function for Maximum Iteration Limit**

```cpp
void check_iteration_limit(int i, int limit) {
    if (i >= limit) {
        cerr << "Warning: Performance bottleneck condition triggered - maximum iteration limit reached!" << endl;
        abort();
    }
}
```

2. **Checker Function for Frequent Toggling of Lights**

```cpp
void check_frequent_toggling(int toggles, int threshold) {
    if (toggles >= threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent toggling detected!" << endl;
        abort();
    }
}
```

3. **Checker Function for Prolonged Execution Without Convergence**

```cpp
void check_prolonged_execution(int ans, int n) {
    if (ans < n) {
        cerr << "Warning: Performance bottleneck condition triggered - prolonged execution without convergence!" << endl;
        abort();
    }
}
```

4. **Checker Function for Numerous Toggles Per Second**

```cpp
void check_synchronized_toggles(int simultaneousToggles, int threshold) {
    if (simultaneousToggles > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - numerous toggles per second!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Functions into the Program

Below is the instrumented C++ program with integrated performance-checking code:

```cpp
#include <iostream>
#include <vector>
#include <string>
using namespace std;

// Checker functions based on performance-characterizing invariants
void check_iteration_limit(int i, int limit) {
    if (i >= limit) {
        cerr << "Warning: Performance bottleneck condition triggered - maximum iteration limit reached!" << endl;
        abort();
    }
}

void check_frequent_toggling(int toggles, int threshold) {
    if (toggles >= threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent toggling detected!" << endl;
        abort();
    }
}

void check_prolonged_execution(int ans, int n) {
    if (ans < n) {
        cerr << "Warning: Performance bottleneck condition triggered - prolonged execution without convergence!" << endl;
        abort();
    }
}

void check_synchronized_toggles(int simultaneousToggles, int threshold) {
    if (simultaneousToggles > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - numerous toggles per second!" << endl;
        abort();
    }
}

inline void inp(vector<int>& a, vector<int>& b) {
    for (int i = 0; i < a.size(); i++) {
        cin >> a[i] >> b[i];
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n;
    cin >> n;
    string s;
    cin >> s;
    vector<int> a(n), b(n);
    inp(a, b);
    int ans = 0;
    const int iterationLimit = 500000; // Defined iteration limit
    const int toggleThreshold = 100; // Arbitrary threshold for frequent toggling
    const int syncToggleThreshold = 10; // Arbitrary threshold for synchronized toggles

    for (int i = 0; i < iterationLimit; i++) {
        int temp = 0;
        for (int j = 0; j < n; j++) {
            if (s[j] == '1') {
                temp++;
            }
        }
        ans = max(temp, ans);
        if (ans == n) break;

        int simultaneousToggles = 0;
        for (int j = 0; j < n; j++) {
            if (i - b[j] >= 0 && (i - b[j]) % a[j] == 0) {
                if (s[j] == '1')
                    s[j] = '0';
                else if (s[j] == '0')
                    s[j] = '1';
                simultaneousToggles++;
            }
        }

        // Check for frequent toggling
        check_frequent_toggling(simultaneousToggles, toggleThreshold);

        // Check for synchronized toggles
        check_synchronized_toggles(simultaneousToggles, syncToggleThreshold);
    }

    // Check for prolonged execution without convergence
    check_prolonged_execution(ans, n);

    cout << ans << "\n";
    return 0;
}
```

### Explanation of Integrated Checkers

- **Iteration Limit Check:** Ensures that the loop does not exceed the predefined maximum iterations (500,000), preventing prolonged runs.
- **Frequent Toggling Check:** Monitors if lights toggle too frequently, triggering potential bottlenecks.
- **Prolonged Execution Check:** Ensures that the loop exits early if possible by determining if `ans` reaches `n`.
- **Synchronized Toggles Check:** Monitors the number of lights toggling simultaneously, which may indicate inefficient execution paths.

