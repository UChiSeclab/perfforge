system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

It is a holiday season, and Koala is decorating his house with cool lights! He owns n lights, all of which flash periodically.

After taking a quick glance at them, Koala realizes that each of his lights can be described with two parameters a_i and b_i. Light with parameters a_i and b_i will toggle (on to off, or off to on) every a_i seconds starting from the b_i-th second. In other words, it will toggle at the moments b_i, b_i + a_i, b_i + 2 ⋅ a_i and so on.

You know for each light whether it's initially on or off and its corresponding parameters a_i and b_i. Koala is wondering what is the maximum number of lights that will ever be on at the same time. So you need to find that out.

<image> Here is a graphic for the first example.

Input

The first line contains a single integer n (1 ≤ n ≤ 100), the number of lights.

The next line contains a string s of n characters. The i-th character is "1", if the i-th lamp is initially on. Otherwise, i-th character is "0".

The i-th of the following n lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ 5) — the parameters of the i-th light.

Output

Print a single integer — the maximum number of lights that will ever be on at the same time.

Examples

Input


3
101
3 3
3 2
3 1


Output


2


Input


4
1111
3 4
5 2
3 1
3 2


Output


4


Input


6
011100
5 3
5 5
2 4
3 5
4 2
1 5


Output


6

Note

For first example, the lamps' states are shown in the picture above. The largest number of simultaneously on lamps is 2 (e.g. at the moment 2).

In the second example, all lights are initially on. So the answer is 4.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 100 + 5;
int n;
char s[maxn];
int a[maxn], b[maxn];
int sta[maxn];
int main() {
  scanf("%d", &n);
  scanf("%s", s + 1);
  for (int i = 1; i <= n; i++) scanf("%d%d", &a[i], &b[i]);
  int ans = 0;
  for (int i = 1; i <= n; i++) {
    if (s[i] == '1')
      sta[i] = 1, ans++;
    else
      sta[i] = 0;
  }
  for (int time = 1; time <= 50000; time++) {
    int cnt = 0;
    for (int i = 1; i <= n; i++) {
      if (time > b[i]) {
        if ((time - b[i]) % a[i] == 0) sta[i] ^= 1;
      } else if (time == b[i])
        sta[i] ^= 1;
      if (sta[i]) cnt++;
    }
    ans = max(ans, cnt);
    if (ans == n) break;
  }
  printf("%d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

25
0111101111011110111101111
1 1
2 2
1 3
1 4
1 5
2 1
2 2
2 5
2 4
2 10
3 1
3 2
3 3
3 4
3 5
4 1
4 2
4 3
1 4
4 5
5 2
5 2
5 3
5 4
5 5


(G.2) Fast Input

25
0111101111011110111101111
1 1
2 2
1 3
1 4
1 5
2 1
2 2
2 5
2 4
2 10
3 1
3 2
3 3
3 4
3 5
4 1
4 2
4 3
1 4
4 5
5 1
5 2
5 3
5 4
5 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 100 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
char s[maxn]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int a[maxn], b[maxn]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int sta[maxn]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%s", s + 1); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) scanf("%d%d", &a[i], &b[i]); /* line 11 slow_hit_count: 26, fast_hit_count: 26 */
  int ans = 0; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 13 slow_hit_count: 26, fast_hit_count: 26 */
    if (s[i] == '1') /* line 14 slow_hit_count: 25, fast_hit_count: 25 */
      sta[i] = 1, ans++; /* line 15 slow_hit_count: 20, fast_hit_count: 20 */
    else /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
      sta[i] = 0; /* line 17 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  for (int time = 1; time <= 50000; time++) { /* line 19 slow_hit_count: 50001, fast_hit_count: 1 */
    int cnt = 0; /* line 20 slow_hit_count: 50000, fast_hit_count: 1 */
    for (int i = 1; i <= n; i++) { /* line 21 slow_hit_count: 1300000, fast_hit_count: 26 */
      if (time > b[i]) { /* line 22 slow_hit_count: 1250000, fast_hit_count: 25 */
        if ((time - b[i]) % a[i] == 0) sta[i] ^= 1; /* line 23 slow_hit_count: 1249917, fast_hit_count: 0 */
      } else if (time == b[i]) /* line 24 slow_hit_count: 83, fast_hit_count: 25 */
        sta[i] ^= 1; /* line 25 slow_hit_count: 25, fast_hit_count: 5 */
      if (sta[i]) cnt++; /* line 26 slow_hit_count: 1250000, fast_hit_count: 25 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    ans = max(ans, cnt); /* line 28 slow_hit_count: 50000, fast_hit_count: 1 */
    if (ans == n) break; /* line 29 slow_hit_count: 50000, fast_hit_count: 1 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Hit Count Comparison**:
   - The line `for (int time = 1; time <= 50000; time++) {` (line 19) is hit 50,001 times during the slow run compared to just 1 time during the fast run. This indicates that the loop iterates over its entire range for the slow input but breaks early for the fast input.
   - The nested loop `for (int i = 1; i <= n; i++) {` (line 21) is hit 1,300,000 times in the slow run and only 26 times in the fast run. This indicates that the computation within this loop is repeated excessively for the slow input.

2. **Expensive Operations**:
   - Line `if ((time - b[i]) % a[i] == 0) sta[i] ^= 1;` (line 23) is hit 1,249,917 times in the slow run but not at all in the fast run. This suggests the toggling condition `(time - b[i]) % a[i] == 0` is frequently satisfied in the slow run, causing recurrent state changes.
   - Line `if (sta[i]) cnt++;` (line 26) counts active lights and is hit 1,250,000 times in the slow run, indicating frequent checks due to toggling.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariants Based on Observations**:
   - **Invariant 1**: "If the lights have parameters such that the toggle frequency (`a_i`) and initial delay (`b_i`) cause many overlapping toggles over time, the program enters a slow path due to excessive recalculations. This is particularly significant when `a_i` is small, leading to frequent toggle checks."
   - **Invariant 2**: "If the total number of lights (`n`) approaches the upper limit and there are many lights with small `a_i` values, the computation may slow significantly due to the need to frequently evaluate the toggle condition for many lights."
   - **Invariant 3**: "The program performance degrades if all lights have similar `b_i` values close together, causing synchronized toggling events that require frequent reevaluation of the maximum number of lights simultaneously on."

These invariants capture the conditions under which the program is likely to slow down without relying on specific input values but instead focusing on the relationship between the input parameters and the algorithm's complexity.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
It is a holiday season, and Koala is decorating his house with cool lights! He owns n lights, all of which flash periodically.

After taking a quick glance at them, Koala realizes that each of his lights can be described with two parameters a_i and b_i. Light with parameters a_i and b_i will toggle (on to off, or off to on) every a_i seconds starting from the b_i-th second. In other words, it will toggle at the moments b_i, b_i + a_i, b_i + 2 ⋅ a_i and so on.

You know for each light whether it's initially on or off and its corresponding parameters a_i and b_i. Koala is wondering what is the maximum number of lights that will ever be on at the same time. So you need to find that out.

<image> Here is a graphic for the first example.

Input

The first line contains a single integer n (1 ≤ n ≤ 100), the number of lights.

The next line contains a string s of n characters. The i-th character is "1", if the i-th lamp is initially on. Otherwise, i-th character is "0".

The i-th of the following n lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ 5) — the parameters of the i-th light.

Output

Print a single integer — the maximum number of lights that will ever be on at the same time.

Examples

Input


3
101
3 3
3 2
3 1


Output


2


Input


4
1111
3 4
5 2
3 1
3 2


Output


4


Input


6
011100
5 3
5 5
2 4
3 5
4 2
1 5


Output


6

Note

For first example, the lamps' states are shown in the picture above. The largest number of simultaneously on lamps is 2 (e.g. at the moment 2).

In the second example, all lights are initially on. So the answer is 4.

Solution (C++ code):
{solution}


assistant: Here is the solution from Phase 2, expressed as C++ checker code (Phase 3) and then integrated into the original C++ program (Phase 4).

### Phase 3: Implement Checker Code in C++

1. **Invariant 1 Checker: Overlapping Toggles Due to Small `a_i` Values**

```cpp
void check_frequent_toggle_invariant(int a[], int n) {
    int small_a_count = 0;
    for (int i = 1; i <= n; i++) {
        if (a[i] <= 2) { // Consider a_i values that may cause frequent toggling
            small_a_count++;
        }
    }
    if (small_a_count > n / 2) { // More than half of the lights having small a_i values
        cerr << "Warning: Frequent toggle invariant triggered - many lights with small a_i cause excessive recalculations!" << endl;
        abort();
    }
}
```

2. **Invariant 2 Checker: Large `n` with Small `a_i` Values**

```cpp
void check_large_n_small_a_invariant(int n, int a[]) {
    int small_a_count = 0;
    for (int i = 1; i <= n; i++) {
        if (a[i] <= 2) { // Consider a_i values that may cause frequent toggling
            small_a_count++;
        }
    }
    if (n > 80 && small_a_count > n / 3) { // When n is large and a significant portion has small a_i
        cerr << "Warning: Large n with small a_i invariant triggered - large n with many frequent toggles!" << endl;
        abort();
    }
}
```

3. **Invariant 3 Checker: Synchronized Toggles Due to Similar `b_i` Values**

```cpp
void check_synchronized_toggle_invariant(int b[], int n) {
    map<int, int> b_count;
    for (int i = 1; i <= n; i++) {
        b_count[b[i]]++;
    }
    for (const auto& [key, count] : b_count) {
        if (count > n / 4) { // More than 25% of the lights toggling at the same initial time
            cerr << "Warning: Synchronized toggle invariant triggered - many lights with similar b_i!" << endl;
            abort();
        }
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Below is the instrumented C++ code with integrated invariants:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 100 + 5;
int n;
char s[maxn];
int a[maxn], b[maxn];
int sta[maxn];

void check_frequent_toggle_invariant(int a[], int n) {
    int small_a_count = 0;
    for (int i = 1; i <= n; i++) {
        if (a[i] <= 2) {
            small_a_count++;
        }
    }
    if (small_a_count > n / 2) {
        cerr << "Warning: Frequent toggle invariant triggered - many lights with small a_i cause excessive recalculations!" << endl;
        abort();
    }
}

void check_large_n_small_a_invariant(int n, int a[]) {
    int small_a_count = 0;
    for (int i = 1; i <= n; i++) {
        if (a[i] <= 2) {
            small_a_count++;
        }
    }
    if (n > 80 && small_a_count > n / 3) {
        cerr << "Warning: Large n with small a_i invariant triggered - large n with many frequent toggles!" << endl;
        abort();
    }
}

void check_synchronized_toggle_invariant(int b[], int n) {
    map<int, int> b_count;
    for (int i = 1; i <= n; i++) {
        b_count[b[i]]++;
    }
    for (const auto& [key, count] : b_count) {
        if (count > n / 4) {
            cerr << "Warning: Synchronized toggle invariant triggered - many lights with similar b_i!" << endl;
            abort();
        }
    }
}

int main() {
    scanf("%d", &n);
    scanf("%s", s + 1);
    for (int i = 1; i <= n; i++) scanf("%d%d", &a[i], &b[i]);

    check_frequent_toggle_invariant(a, n);
    check_large_n_small_a_invariant(n, a);
    check_synchronized_toggle_invariant(b, n);
  
    int ans = 0;
    for (int i = 1; i <= n; i++) {
        if (s[i] == '1')
            sta[i] = 1, ans++;
        else
            sta[i] = 0;
    }
    for (int time = 1; time <= 50000; time++) {
        int cnt = 0;
        for (int i = 1; i <= n; i++) {
            if (time > b[i]) {
                if ((time - b[i]) % a[i] == 0) sta[i] ^= 1;
            } else if (time == b[i])
                sta[i] ^= 1;
            if (sta[i]) cnt++;
        }
        ans = max(ans, cnt);
        if (ans == n) break;
    }
    printf("%d\n", ans);
    return 0;
}
```

This code now includes the invariant checks integrated at the start of the main function, which ensures that potential performance bottlenecks are detected before the main computation loop begins.

