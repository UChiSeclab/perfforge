system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

It is a holiday season, and Koala is decorating his house with cool lights! He owns n lights, all of which flash periodically.

After taking a quick glance at them, Koala realizes that each of his lights can be described with two parameters a_i and b_i. Light with parameters a_i and b_i will toggle (on to off, or off to on) every a_i seconds starting from the b_i-th second. In other words, it will toggle at the moments b_i, b_i + a_i, b_i + 2 ⋅ a_i and so on.

You know for each light whether it's initially on or off and its corresponding parameters a_i and b_i. Koala is wondering what is the maximum number of lights that will ever be on at the same time. So you need to find that out.

<image> Here is a graphic for the first example.

Input

The first line contains a single integer n (1 ≤ n ≤ 100), the number of lights.

The next line contains a string s of n characters. The i-th character is "1", if the i-th lamp is initially on. Otherwise, i-th character is "0".

The i-th of the following n lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ 5) — the parameters of the i-th light.

Output

Print a single integer — the maximum number of lights that will ever be on at the same time.

Examples

Input


3
101
3 3
3 2
3 1


Output


2


Input


4
1111
3 4
5 2
3 1
3 2


Output


4


Input


6
011100
5 3
5 5
2 4
3 5
4 2
1 5


Output


6

Note

For first example, the lamps' states are shown in the picture above. The largest number of simultaneously on lamps is 2 (e.g. at the moment 2).

In the second example, all lights are initially on. So the answer is 4.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long double pie = 3.14159265358979;
const long long mod = 1e9 + 7;
string vow = "aeiou";
void solve(int test_case) {
  int n;
  cin >> n;
  string s;
  cin >> s;
  int N = 1e3;
  vector<vector<int> > v(n, vector<int>(N, 0));
  vector<pair<int, int> > p(n);
  for (int i = 0; i < n; i++) cin >> p[i].first >> p[i].second;
  for (int i = 0; i < n; i++) {
    if (s[i] - '0') v[i][0] = 1;
    for (int j = 1; j < p[i].second; j++) v[i][j] = v[i][j - 1];
    int temp = v[i][0] ^ 1;
    for (int j = p[i].second; j < N; j += p[i].first) {
      for (int k = 0; j + k < N; k++) v[i][j + k] = temp;
      temp ^= 1;
    }
  }
  int ans = 0;
  for (int j = 0; j < N; j++) {
    int temp = 0;
    for (int i = 0; i < n; i++) temp += v[i][j];
    ans = max(ans, temp);
  }
  cout << ans;
  cout << "\n";
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  int t = 1;
  for (int i = 0; i < t; i++) solve(i);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

70
0010011111011101101111000111101011010101000011000000010100010101010001
3 1
1 5
3 1
4 1
3 3
2 4
2 1
5 1
2 4
5 2
5 2
4 1
2 5
2 2
4 2
5 1
1 2
2 4
3 1
1 1
5 3
5 2
3 5
4 4
2 1
3 2
1 3
5 1
3 4
2 3
1 5
4 1
2 2
5 1
3 3
4 2
1 4
5 2
1 2
4 1
1 4
5 3
3 3
2 5
3 5
3 4
3 3
1 5
1 1
2 4
5 4
1 4
3 3
2 5
2 4
1 3
5 2
4 4
1 2
1 1
4 4
5 4
1 2
5 1
3 1
5 4
4 5
3 1
2 4
3 2


(G.2) Fast Input

4
1111
3 4
5 2
3 1
3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long double pie = 3.14159265358979; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
string vow = "aeiou"; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void solve(int test_case) { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  string s; /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> s; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  int N = 1e3; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vector<int> > v(n, vector<int>(N, 0)); /* line 12 slow_hit_count: 3, fast_hit_count: 3 */
  vector<pair<int, int> > p(n); /* line 13 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) cin >> p[i].first >> p[i].second; /* line 14 slow_hit_count: 71, fast_hit_count: 5 */
  for (int i = 0; i < n; i++) { /* line 15 slow_hit_count: 71, fast_hit_count: 5 */
    if (s[i] - '0') v[i][0] = 1; /* line 16 slow_hit_count: 70, fast_hit_count: 4 */
    for (int j = 1; j < p[i].second; j++) v[i][j] = v[i][j - 1]; /* line 17 slow_hit_count: 192, fast_hit_count: 9 */
    int temp = v[i][0] ^ 1; /* line 18 slow_hit_count: 70, fast_hit_count: 4 */
    for (int j = p[i].second; j < N; j += p[i].first) { /* line 19 slow_hit_count: 32825, fast_hit_count: 1202 */
      for (int k = 0; j + k < N; k++) v[i][j + k] = temp; /* line 20 slow_hit_count: 16389661, fast_hit_count: 600465 */
      temp ^= 1; /* line 21 slow_hit_count: 32755, fast_hit_count: 1198 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  for (int j = 0; j < N; j++) { /* line 25 slow_hit_count: 1001, fast_hit_count: 1001 */
    int temp = 0; /* line 26 slow_hit_count: 1000, fast_hit_count: 1000 */
    for (int i = 0; i < n; i++) temp += v[i][j]; /* line 27 slow_hit_count: 71000, fast_hit_count: 5000 */
    ans = max(ans, temp); /* line 28 slow_hit_count: 1000, fast_hit_count: 1000 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  cout << "\n"; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  int t = 1; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < t; i++) solve(i); /* line 38 slow_hit_count: 2, fast_hit_count: 2 */
  return 0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided hit count information and code analysis, let's proceed with the tasks:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Critical Lines with High Hit Counts:**
   - **Line 19:** `for (int j = p[i].second; j < N; j += p[i].first)` - This line is executed 32,825 times for the slow input and only 1,202 times for the fast input.
   - **Line 20:** `for (int k = 0; j + k < N; k++) v[i][j + k] = temp;` - This nested loop is executed 16,389,661 times for the slow input compared to 600,465 times for the fast input.

2. **Performance Analysis:**
   - The high hit counts at lines 19 and 20 indicate nested loop constructions that are executed much more frequently under the slow input conditions. The outer loop increments `j` based on `a_i` and toggles lights' states every `a_i` seconds starting from `b_i`.
   - The nested loop at line 20 iterates from `j` to `N`, updating the state of the lights. This loop is causing the massive increase in execution times, as it processes significantly more iterations in the slow input case.

### Phase 2: Derive Performance-Characterizing Invariants

Here are the natural language statements that describe the conditions under which the code likely enters a slow path:

1. **Invariant on Nested Loop Execution:**
   - **Natural Language Description:** "If many lights have small `a_i` values, the nested loops will be executed frequently, causing performance degradation. This is especially true when `a_i` values are low relative to `N`."
   - **Explanation:** The frequency of the outer loop depends on how often a light toggles (`a_i`). If many lights have small `a_i`, the code will perform excessive toggles, intensifying the workload of the nested loop.

2. **Invariant on Combined Light States:**
   - **Natural Language Description:** "If multiple lights have synchronized or nearly synchronized toggle patterns, indicated by close `b_i` values, the computation required for state updates can increase dramatically, slowing down execution."
   - **Explanation:** When lights toggle at similar times, the code processes state updates in quick succession, amplifying the number of executions in the loop.

3. **Invariant on the Number of Lights:**
   - **Natural Language Description:** "When the number of lights, `n`, is high (close to the constraint like 100), the cumulative effect of the toggle computations across all lights intensifies, resulting in a slowdown."
   - **Explanation:** As `n` approaches its upper limit, the number of toggle operations and state checks expands substantially, consuming more processing time, especially with intricate toggle patterns.

By identifying these invariants, developers and testers can understand the conditions that lead to slow performance and take proactive measures to optimize or adjust the implementation.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
It is a holiday season, and Koala is decorating his house with cool lights! He owns n lights, all of which flash periodically.

After taking a quick glance at them, Koala realizes that each of his lights can be described with two parameters a_i and b_i. Light with parameters a_i and b_i will toggle (on to off, or off to on) every a_i seconds starting from the b_i-th second. In other words, it will toggle at the moments b_i, b_i + a_i, b_i + 2 ⋅ a_i and so on.

You know for each light whether it's initially on or off and its corresponding parameters a_i and b_i. Koala is wondering what is the maximum number of lights that will ever be on at the same time. So you need to find that out.

<image> Here is a graphic for the first example.

Input

The first line contains a single integer n (1 ≤ n ≤ 100), the number of lights.

The next line contains a string s of n characters. The i-th character is "1", if the i-th lamp is initially on. Otherwise, i-th character is "0".

The i-th of the following n lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ 5) — the parameters of the i-th light.

Output

Print a single integer — the maximum number of lights that will ever be on at the same time.

Examples

Input


3
101
3 3
3 2
3 1


Output


2


Input


4
1111
3 4
5 2
3 1
3 2


Output


4


Input


6
011100
5 3
5 5
2 4
3 5
4 2
1 5


Output


6

Note

For first example, the lamps' states are shown in the picture above. The largest number of simultaneously on lamps is 2 (e.g. at the moment 2).

In the second example, all lights are initially on. So the answer is 4.

Solution (C++ code):
{solution}


assistant: Let's proceed with the tasks:

### Phase 3: Implement the Natural Language Invariants in C++

Based on the invariants derived earlier, here is C++ code to check the conditions at runtime:

```cpp
void check_small_a_values(const vector<pair<int, int>>& p) {
    int small_a_count = 0;
    for (const auto& pair : p) {
        if (pair.first <= 2) {  // Assume 'small' a_i values are <= 2
            small_a_count++;
        }
    }
    if (small_a_count > 50) {  // Arbitrary threshold, adjust as needed
        cerr << "Warning: Performance bottleneck condition triggered - many lights have small 'a' values!" << endl;
        abort();
    }
}

void check_synchronized_b_values(const vector<pair<int, int>>& p) {
    map<int, int> b_count;
    for (const auto& pair : p) {
        b_count[pair.second]++;
    }
    for (const auto& [b_value, count] : b_count) {
        if (count > 30) {  // Arbitrary threshold for synchronization
            cerr << "Warning: Performance bottleneck condition triggered - synchronized 'b' values!" << endl;
            abort();
        }
    }
}

void check_large_number_of_lights(int n) {
    if (n > 90) {  // Close to the upper constraint
        cerr << "Warning: Performance bottleneck condition triggered - high number of lights!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code with the Original Program

Here is the instrumented C++ code with the checker functions integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_small_a_values(const vector<pair<int, int>>& p) {
    int small_a_count = 0;
    for (const auto& pair : p) {
        if (pair.first <= 2) {  // Assume 'small' a_i values are <= 2
            small_a_count++;
        }
    }
    if (small_a_count > 50) {  // Arbitrary threshold, adjust as needed
        cerr << "Warning: Performance bottleneck condition triggered - many lights have small 'a' values!" << endl;
        abort();
    }
}

void check_synchronized_b_values(const vector<pair<int, int>>& p) {
    map<int, int> b_count;
    for (const auto& pair : p) {
        b_count[pair.second]++;
    }
    for (const auto& [b_value, count] : b_count) {
        if (count > 30) {  // Arbitrary threshold for synchronization
            cerr << "Warning: Performance bottleneck condition triggered - synchronized 'b' values!" << endl;
            abort();
        }
    }
}

void check_large_number_of_lights(int n) {
    if (n > 90) {  // Close to the upper constraint
        cerr << "Warning: Performance bottleneck condition triggered - high number of lights!" << endl;
        abort();
    }
}

void solve(int test_case) {
    int n;
    cin >> n;

    // Apply check for large number of lights
    check_large_number_of_lights(n);

    string s;
    cin >> s;
    int N = 1e3;
    vector<vector<int>> v(n, vector<int>(N, 0));
    vector<pair<int, int>> p(n);
    for (int i = 0; i < n; i++) cin >> p[i].first >> p[i].second;

    // Apply checks on input data
    check_small_a_values(p);
    check_synchronized_b_values(p);

    for (int i = 0; i < n; i++) {
        if (s[i] - '0') v[i][0] = 1;
        for (int j = 1; j < p[i].second; j++) v[i][j] = v[i][j - 1];
        int temp = v[i][0] ^ 1;
        for (int j = p[i].second; j < N; j += p[i].first) {
            for (int k = 0; j + k < N; k++) v[i][j + k] = temp;
            temp ^= 1;
        }
    }
    int ans = 0;
    for (int j = 0; j < N; j++) {
        int temp = 0;
        for (int i = 0; i < n; i++) temp += v[i][j];
        ans = max(ans, temp);
    }
    cout << ans;
    cout << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int t = 1;
    for (int i = 0; i < t; i++) solve(i);
    return 0;
}
```

### Comments on Integration:

- **Check for Small `a` Values:** This is placed after reading the input values for each light. It ensures that if many lights toggle very frequently, it triggers a warning.
- **Check for Synchronized `b` Values:** This is applied after reading the input values as well to detect if many lights start toggling at similar times.
- **Check for Large Number of Lights:** This is performed immediately after reading `n` to quickly abort if the number is near the constraint limit.

These checks are strategically placed to catch performance issues without incurring unnecessary overhead during the execution of the main algorithm.

