system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

It is a holiday season, and Koala is decorating his house with cool lights! He owns n lights, all of which flash periodically.

After taking a quick glance at them, Koala realizes that each of his lights can be described with two parameters a_i and b_i. Light with parameters a_i and b_i will toggle (on to off, or off to on) every a_i seconds starting from the b_i-th second. In other words, it will toggle at the moments b_i, b_i + a_i, b_i + 2 ⋅ a_i and so on.

You know for each light whether it's initially on or off and its corresponding parameters a_i and b_i. Koala is wondering what is the maximum number of lights that will ever be on at the same time. So you need to find that out.

<image> Here is a graphic for the first example.

Input

The first line contains a single integer n (1 ≤ n ≤ 100), the number of lights.

The next line contains a string s of n characters. The i-th character is "1", if the i-th lamp is initially on. Otherwise, i-th character is "0".

The i-th of the following n lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ 5) — the parameters of the i-th light.

Output

Print a single integer — the maximum number of lights that will ever be on at the same time.

Examples

Input


3
101
3 3
3 2
3 1


Output


2


Input


4
1111
3 4
5 2
3 1
3 2


Output


4


Input


6
011100
5 3
5 5
2 4
3 5
4 2
1 5


Output


6

Note

For first example, the lamps' states are shown in the picture above. The largest number of simultaneously on lamps is 2 (e.g. at the moment 2).

In the second example, all lights are initially on. So the answer is 4.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int LIGHT_SIZE;
bool light[101];
int start[101];
int cycle[101];
int ini_Lights(const string& s) {
  LIGHT_SIZE = s.size();
  int on = 0;
  for (int i = 0; i < s.size(); i++) {
    light[i] = s[i] == '1';
    if (light[i]) {
      on++;
    }
  }
  return on;
}
int simRound(int round, int lastOn) {
  int on = lastOn;
  for (int i = 0; i < LIGHT_SIZE; i++) {
    int begin = round - start[i];
    if (begin >= 0 && begin % cycle[i] == 0) {
      light[i] = !light[i];
      if (light[i]) {
        on++;
      } else {
        on--;
      }
    }
  }
  return on;
}
void coutSim() {
  for (int i = 0; i < LIGHT_SIZE; i++) {
    cout << (light[i]) ? '1' : '0';
  }
  cout << endl;
}
int main() {
  cin >> LIGHT_SIZE;
  string s;
  cin >> s;
  int max_on = ini_Lights(s);
  int last_on = max_on;
  for (int i = 0; i < LIGHT_SIZE; i++) {
    cin >> cycle[i] >> start[i];
  }
  for (int i = 1; i <= 100000; i++) {
    last_on = simRound(i, last_on);
    max_on = max(max_on, last_on);
    if (max_on == LIGHT_SIZE) {
      break;
    }
  }
  cout << max_on << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

25
0111101111011110111101111
1 1
2 2
1 3
1 4
1 5
2 1
2 2
2 5
2 4
2 10
3 1
3 2
3 3
3 4
3 5
4 1
4 2
4 3
1 4
4 5
5 2
5 2
5 3
5 4
5 5


(G.2) Fast Input

25
0111101111011110111101111
1 1
2 2
1 3
1 4
1 5
2 1
2 2
2 5
2 4
2 10
3 1
3 2
3 3
3 4
3 5
4 1
4 2
4 3
1 4
4 5
5 1
5 2
5 3
5 4
5 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int LIGHT_SIZE; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
bool light[101]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int start[101]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int cycle[101]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int ini_Lights(const string& s) { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  LIGHT_SIZE = s.size(); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int on = 0; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < s.size(); i++) { /* line 10 slow_hit_count: 26, fast_hit_count: 26 */
    light[i] = s[i] == '1'; /* line 11 slow_hit_count: 25, fast_hit_count: 25 */
    if (light[i]) { /* line 12 slow_hit_count: 25, fast_hit_count: 25 */
      on++; /* line 13 slow_hit_count: 20, fast_hit_count: 20 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return on; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
int simRound(int round, int lastOn) { /* line 18 slow_hit_count: 100000, fast_hit_count: 1 */
  int on = lastOn; /* line 19 slow_hit_count: 100000, fast_hit_count: 1 */
  for (int i = 0; i < LIGHT_SIZE; i++) { /* line 20 slow_hit_count: 2600000, fast_hit_count: 26 */
    int begin = round - start[i]; /* line 21 slow_hit_count: 2500000, fast_hit_count: 25 */
    if (begin >= 0 && begin % cycle[i] == 0) { /* line 22 slow_hit_count: 2500000, fast_hit_count: 25 */
      light[i] = !light[i]; /* line 23 slow_hit_count: 1166645, fast_hit_count: 5 */
      if (light[i]) { /* line 24 slow_hit_count: 1166645, fast_hit_count: 5 */
        on++; /* line 25 slow_hit_count: 583319, fast_hit_count: 5 */
      } else { /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
        on--; /* line 27 slow_hit_count: 583326, fast_hit_count: 0 */
      } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  return on; /* line 31 slow_hit_count: 100000, fast_hit_count: 1 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
void coutSim() { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < LIGHT_SIZE; i++) { /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    cout << (light[i]) ? '1' : '0'; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  cout << endl; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> LIGHT_SIZE; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  string s; /* line 41 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> s; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  int max_on = ini_Lights(s); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  int last_on = max_on; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < LIGHT_SIZE; i++) { /* line 45 slow_hit_count: 26, fast_hit_count: 26 */
    cin >> cycle[i] >> start[i]; /* line 46 slow_hit_count: 25, fast_hit_count: 25 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= 100000; i++) { /* line 48 slow_hit_count: 100001, fast_hit_count: 1 */
    last_on = simRound(i, last_on); /* line 49 slow_hit_count: 100000, fast_hit_count: 1 */
    max_on = max(max_on, last_on); /* line 50 slow_hit_count: 100000, fast_hit_count: 1 */
    if (max_on == LIGHT_SIZE) { /* line 51 slow_hit_count: 100000, fast_hit_count: 1 */
      break; /* line 52 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  cout << max_on << endl; /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 56 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance issue in the provided C program, we will analyze the code and the hit counts to derive performance-characterizing invariants. The goal is to understand under what conditions the code slows down significantly.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The function `simRound` is called 100,000 times for the slow input and only once for the fast input. This indicates a significant difference in execution paths.
   - Within `simRound`, the inner loop iterating over `LIGHT_SIZE` is executed 2,600,000 times for the slow input but only 26 times for the fast input.
   
2. **Pinpointing Lines with High Hit Counts:**
   - Line 20: The loop iterating over the lights is executed 2,600,000 times on the slow input, a significant contributor to the slowdown.
   - Lines 21 and 22: The computations and conditional checks are hit 2,500,000 times.
   - Lines 23 to 25: The toggling logic is executed 1,166,645 times, contributing to the toggling overhead.
   
3. **Interaction with Data Structures:**
   - The nested loop within `simRound` suggests that every light is checked and potentially toggled at every simulated second up to 100,000 seconds. This is particularly inefficient if many lights toggle frequently.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following natural language invariants:

1. **Frequent Toggles:**
   - **Invariant:** "If many lights toggle very frequently, such that their toggle intervals ('a_i') are small and their start times ('b_i') are very close, the program may become slow due to excessive toggling checks."
   
2. **High Simulation Time:**
   - **Invariant:** "If the simulation is required to run for a large number of seconds without early termination, the repeated execution of the toggle checks can lead to significant slowdowns."

3. **Dense Light Setup:**
   - **Invariant:** "When the number of initial lights that are on is high, and their toggling patterns overlap frequently within short cycles, the maximum simultaneous 'on' count will be reached late, causing the loop to run for the full duration."

### Suggested Thresholds

Given the problem constraint \( n \leq 100 \):

- A potential check for frequent toggles could be based on the cycles such that `a_i` values are low across multiple lights, leading to frequent toggles.
- High simulation checks could emphasize the lack of early exits when the maximum `on` state is reached late due to dense and frequent toggling patterns.

### Conclusion

The code's performance bottleneck arises mainly from the inefficient handling of frequent toggles and prolonged simulations. The derived invariants focus on understanding these slow paths abstractly, aligning with the constraints and providing insight into potential future slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
It is a holiday season, and Koala is decorating his house with cool lights! He owns n lights, all of which flash periodically.

After taking a quick glance at them, Koala realizes that each of his lights can be described with two parameters a_i and b_i. Light with parameters a_i and b_i will toggle (on to off, or off to on) every a_i seconds starting from the b_i-th second. In other words, it will toggle at the moments b_i, b_i + a_i, b_i + 2 ⋅ a_i and so on.

You know for each light whether it's initially on or off and its corresponding parameters a_i and b_i. Koala is wondering what is the maximum number of lights that will ever be on at the same time. So you need to find that out.

<image> Here is a graphic for the first example.

Input

The first line contains a single integer n (1 ≤ n ≤ 100), the number of lights.

The next line contains a string s of n characters. The i-th character is "1", if the i-th lamp is initially on. Otherwise, i-th character is "0".

The i-th of the following n lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ 5) — the parameters of the i-th light.

Output

Print a single integer — the maximum number of lights that will ever be on at the same time.

Examples

Input


3
101
3 3
3 2
3 1


Output


2


Input


4
1111
3 4
5 2
3 1
3 2


Output


4


Input


6
011100
5 3
5 5
2 4
3 5
4 2
1 5


Output


6

Note

For first example, the lamps' states are shown in the picture above. The largest number of simultaneously on lamps is 2 (e.g. at the moment 2).

In the second example, all lights are initially on. So the answer is 4.

Solution (C++ code):
{solution}


assistant: Let's first implement the performance-characterizing invariants in C++ as checker functions (Phase 3), and then integrate them into the provided C++ program (Phase 4).

### Phase 3: Implement Natural Language Invariants in C++

The performance-characterizing invariants defined in natural language were:

1. **Frequent Toggles:** When many lights toggle very frequently, causing computational overhead.
2. **High Simulation Time:** When the simulation runs for a large number of seconds without early termination.
3. **Dense Light Setup:** When the initial number of on lights is high, and their toggling patterns overlap frequently.

Here's the C++ code for these checks:

```cpp
void check_frequent_toggles_invariant(int LIGHT_SIZE, const int* cycle) {
    int frequentToggles = 0;
    for (int i = 0; i < LIGHT_SIZE; ++i) {
        if (cycle[i] == 1) { // Assuming cycle of 1 is frequent
            ++frequentToggles;
        }
    }
    if (frequentToggles > LIGHT_SIZE / 2) { // If more than half have frequent toggles
        cerr << "Warning: Performance bottleneck condition triggered - frequent toggles!" << endl;
        abort();
    }
}

void check_high_simulation_time_invariant(int simulationTime, int LIGHT_SIZE, int max_on) {
    if (simulationTime > 100000 && max_on < LIGHT_SIZE / 2) { // If running too long with less than half on
        cerr << "Warning: Performance bottleneck condition triggered - high simulation time!" << endl;
        abort();
    }
}

void check_dense_light_setup_invariant(int initial_on_count, int LIGHT_SIZE) {
    if (initial_on_count > LIGHT_SIZE / 2) { // If more than half are initially on
        cerr << "Warning: Performance bottleneck condition triggered - dense light setup!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Now, let's integrate these checks into the original program at appropriate points.

```cpp
#include <bits/stdc++.h>
using namespace std;

int LIGHT_SIZE;
bool light[101];
int start[101];
int cycle[101];

int ini_Lights(const string& s) {
    LIGHT_SIZE = s.size();
    int on = 0;
    for (int i = 0; i < s.size(); i++) {
        light[i] = s[i] == '1';
        if (light[i]) {
            on++;
        }
    }
    return on;
}

int simRound(int round, int lastOn) {
    int on = lastOn;
    for (int i = 0; i < LIGHT_SIZE; i++) {
        int begin = round - start[i];
        if (begin >= 0 && begin % cycle[i] == 0) {
            light[i] = !light[i];
            if (light[i]) {
                on++;
            } else {
                on--;
            }
        }
    }
    return on;
}

void check_frequent_toggles_invariant(int LIGHT_SIZE, const int* cycle) {
    int frequentToggles = 0;
    for (int i = 0; i < LIGHT_SIZE; ++i) {
        if (cycle[i] == 1) { // Assuming cycle of 1 is frequent
            ++frequentToggles;
        }
    }
    if (frequentToggles > LIGHT_SIZE / 2) { // If more than half have frequent toggles
        cerr << "Warning: Performance bottleneck condition triggered - frequent toggles!" << endl;
        abort();
    }
}

void check_high_simulation_time_invariant(int simulationTime, int LIGHT_SIZE, int max_on) {
    if (simulationTime > 100000 && max_on < LIGHT_SIZE / 2) { // If running too long with less than half on
        cerr << "Warning: Performance bottleneck condition triggered - high simulation time!" << endl;
        abort();
    }
}

void check_dense_light_setup_invariant(int initial_on_count, int LIGHT_SIZE) {
    if (initial_on_count > LIGHT_SIZE / 2) { // If more than half are initially on
        cerr << "Warning: Performance bottleneck condition triggered - dense light setup!" << endl;
        abort();
    }
}

int main() {
    cin >> LIGHT_SIZE;
    string s;
    cin >> s;

    int max_on = ini_Lights(s);
    int last_on = max_on;

    // Check for dense light setup
    check_dense_light_setup_invariant(max_on, LIGHT_SIZE);

    for (int i = 0; i < LIGHT_SIZE; i++) {
        cin >> cycle[i] >> start[i];
    }

    // Check for frequent toggles
    check_frequent_toggles_invariant(LIGHT_SIZE, cycle);

    for (int i = 1; i <= 100000; i++) {
        last_on = simRound(i, last_on);
        max_on = max(max_on, last_on);

        // Check for high simulation time
        check_high_simulation_time_invariant(i, LIGHT_SIZE, max_on);

        if (max_on == LIGHT_SIZE) {
            break;
        }
    }
    cout << max_on << endl;
}
```

### Explanation of Inserted Checks

- **Frequent Toggles Check:** This checks if a significant portion of lights toggle very frequently, which may lead to performance issues.
- **High Simulation Time Check:** This checks if the simulation runs for an excessive number of steps without reaching a significant number of lights being on.
- **Dense Light Setup Check:** This checks if the initial configuration has a high number of lights turned on, potentially indicating a dense setup that could contribute to performance degradation.

These checks are inserted at strategic points to help detect and potentially abort execution if a performance bottleneck is likely.

