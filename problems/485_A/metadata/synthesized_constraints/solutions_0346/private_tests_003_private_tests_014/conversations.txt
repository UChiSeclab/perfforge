system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

One industrial factory is reforming working plan. The director suggested to set a mythical detail production norm. If at the beginning of the day there were x details in the factory storage, then by the end of the day the factory has to produce <image> (remainder after dividing x by m) more details. Unfortunately, no customer has ever bought any mythical detail, so all the details produced stay on the factory. 

The board of directors are worried that the production by the given plan may eventually stop (that means that there will be а moment when the current number of details on the factory is divisible by m). 

Given the number of details a on the first day and number m check if the production stops at some moment.

Input

The first line contains two integers a and m (1 ≤ a, m ≤ 105).

Output

Print "Yes" (without quotes) if the production will eventually stop, otherwise print "No".

Examples

Input

1 5


Output

No


Input

3 6


Output

Yes

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a, m;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cin >> a >> m;
  for (int i = 1; i <= 10000000; i++) {
    a = (a + a) % m;
    if (a == 0) {
      cout << "Yes";
      return 0;
    }
  }
  cout << "No";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 100000


(G.2) Fast Input

100000 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> a >> m; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 10000000; i++) { /* line 8 slow_hit_count: 10000001, fast_hit_count: 1 */
    a = (a + a) % m; /* line 9 slow_hit_count: 10000000, fast_hit_count: 1 */
    if (a == 0) { /* line 10 slow_hit_count: 10000000, fast_hit_count: 1 */
      cout << "Yes"; /* line 11 slow_hit_count: 0, fast_hit_count: 1 */
      return 0; /* line 12 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "No"; /* line 15 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 1, fast_hit_count: 0 */


assistant: Based on the analysis of the provided C program and hit counts from both the fast and slow inputs, we can identify the performance bottleneck and derive relevant performance-characterizing invariants. Let's go through the process step-by-step:

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Observations:
1. **Loop Execution**: The loop on line 8 is executed 10 million times for the slow input, but only once for the fast input. This indicates that the loop is a major contributor to the slow performance.
2. **Condition Check**: The condition on line 10 (`if (a == 0)`) is not met for the slow input, causing the loop to iterate the maximum number of times (10 million).
3. **Modulo Operation**: The line `a = (a + a) % m;` inside the loop (line 9) is executed 10 million times for the slow input, which is computationally expensive due to repeated modulo operations.

#### Inference:
- The key factor contributing to the slowdown is the repeated execution of the loop and the modulo operation when the variable `a` does not quickly become 0, especially given the large number of iterations.

### Phase 2: Derive Performance-Characterizing Invariants

#### Performance Invariants:
1. **High Iteration Count**: "If the initial value of `a` and `m` are such that `a` never becomes zero within a limited number of iterations, particularly when `a` and `m` are co-prime or when `a` is much smaller than `m`, the loop may iterate up to its maximum limit, leading to slow execution."
   
2. **Ineffective Modulo Operation**: "If the remainder of `2a` modulo `m` does not converge to zero quickly, especially when `a` and `m` have no common factors, the program is likely to spend a significant amount of time in a loop without producing the desired outcome swiftly."

3. **Large Modulo Base**: "When `m` is much larger than `a` and both are co-prime, the computation `a = (a + a) % m` results in the variable `a` not reaching zero, thus causing the loop to hit its iteration cap and slowing down the process."

4. **Input Co-primality**: "The program may become slow when the initial count of details `a` and modulus `m` are co-prime, leading to a situation where `a` is continually updated without hitting zero, resulting in maximum loop iterations."

### Summary

To avoid performance bottlenecks in this program, be mindful of the initial values of `a` and `m`. Particularly, when they are co-prime, the loop may iterate extensively without reaching the terminating condition (`a == 0`). This situation is exacerbated when `m` is significantly larger than `a`, as seen with the slow input provided. These invariants help to predict and identify potential slow-down conditions within the constraints of the problem.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
One industrial factory is reforming working plan. The director suggested to set a mythical detail production norm. If at the beginning of the day there were x details in the factory storage, then by the end of the day the factory has to produce <image> (remainder after dividing x by m) more details. Unfortunately, no customer has ever bought any mythical detail, so all the details produced stay on the factory. 

The board of directors are worried that the production by the given plan may eventually stop (that means that there will be а moment when the current number of details on the factory is divisible by m). 

Given the number of details a on the first day and number m check if the production stops at some moment.

Input

The first line contains two integers a and m (1 ≤ a, m ≤ 105).

Output

Print "Yes" (without quotes) if the production will eventually stop, otherwise print "No".

Examples

Input

1 5


Output

No


Input

3 6


Output

Yes

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3, where we will transform the natural language performance-characterizing invariants into runtime checks in C++.

### Phase 3: Implement the Invariants as C++ Checker Code

#### Invariant 1: High Iteration Count
The program may slow down if `a` does not become zero quickly, especially when `a` and `m` are co-prime or when `a` is much smaller than `m`. We need a check to identify when `a` and `m` are co-prime.

```cpp
void check_coprime_invariant(int a, int m) {
    if (__gcd(a, m) == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - a and m are co-prime!" << endl;
        abort();
    }
}
```

#### Invariant 2: Ineffective Modulo Operation
If the computation `a = (a + a) % m` does not reach zero quickly, especially when `a` and `m` have no common factors, it indicates a potential slowdown.

```cpp
void check_slow_modulo_operation(int a, int m, int threshold) {
    if ((2 * a) % m != 0 && a < m && __gcd(a, m) == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - slow modulo operation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Now, we integrate these checker functions into the original C++ program. The checks should be placed before the heavy loop to prevent unnecessary overhead during execution.

```cpp
#include <bits/stdc++.h>
using namespace std;

int a, m;

void check_coprime_invariant(int a, int m) {
    // Check if a and m are co-prime
    if (__gcd(a, m) == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - a and m are co-prime!" << endl;
        abort();
    }
}

void check_slow_modulo_operation(int a, int m) {
    // Check for slow modulo operation condition
    if ((2 * a) % m != 0 && a < m && __gcd(a, m) == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - slow modulo operation!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> a >> m;

    // Check for performance bottlenecks before entering the loop
    check_coprime_invariant(a, m);
    check_slow_modulo_operation(a, m);
    
    for (int i = 1; i <= 10000000; i++) {
        a = (a + a) % m;
        if (a == 0) {
            cout << "Yes";
            return 0;
        }
    }
    cout << "No";
}
```

### Explanation

1. **`check_coprime_invariant`**: This function checks if `a` and `m` are co-prime using the greatest common divisor function (`__gcd`). If they are, a warning is triggered and the program aborts, as this is a condition that could lead to a performance bottleneck.

2. **`check_slow_modulo_operation`**: This function examines whether `a` is likely to remain non-zero, leading to slow execution. It triggers a warning when `a` and `m` are co-prime, `a` is smaller than `m`, and `(2 * a) % m` does not equal zero.

Both checks are implemented before the loop to ensure they do not impact performance during execution. They help identify potential slowdowns in the program based on the given conditions.

