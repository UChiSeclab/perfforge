system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

One industrial factory is reforming working plan. The director suggested to set a mythical detail production norm. If at the beginning of the day there were x details in the factory storage, then by the end of the day the factory has to produce <image> (remainder after dividing x by m) more details. Unfortunately, no customer has ever bought any mythical detail, so all the details produced stay on the factory. 

The board of directors are worried that the production by the given plan may eventually stop (that means that there will be а moment when the current number of details on the factory is divisible by m). 

Given the number of details a on the first day and number m check if the production stops at some moment.

Input

The first line contains two integers a and m (1 ≤ a, m ≤ 105).

Output

Print "Yes" (without quotes) if the production will eventually stop, otherwise print "No".

Examples

Input

1 5


Output

No


Input

3 6


Output

Yes

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
int main() {
  int a, m, mod, j = 0;
  scanf("%d%d", &a, &m);
  int b[m];
  while (a % m != 0) {
    mod = a % m;
    for (int i = 0; i < j; ++i) {
      if (b[i] == mod) {
        printf("No");
        return 0;
      }
    }
    b[j] = mod;
    j++;
    a += mod;
  }
  printf("Yes");
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3 99929


(G.2) Fast Input

3 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 2 slow_hit_count: 1, fast_hit_count: 1 */
  int a, m, mod, j = 0; /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &a, &m); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int b[m]; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  while (a % m != 0) { /* line 6 slow_hit_count: 43020, fast_hit_count: 1 */
    mod = a % m; /* line 7 slow_hit_count: 43020, fast_hit_count: 0 */
    for (int i = 0; i < j; ++i) { /* line 8 slow_hit_count: 925370784, fast_hit_count: 0 */
      if (b[i] == mod) { /* line 9 slow_hit_count: 925327765, fast_hit_count: 0 */
        printf("No"); /* line 10 slow_hit_count: 1, fast_hit_count: 0 */
        return 0; /* line 11 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    b[j] = mod; /* line 14 slow_hit_count: 43019, fast_hit_count: 0 */
    j++; /* line 15 slow_hit_count: 43019, fast_hit_count: 0 */
    a += mod; /* line 16 slow_hit_count: 43019, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  printf("Yes"); /* line 18 slow_hit_count: 1, fast_hit_count: 2 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 1 */


assistant: To diagnose the performance bottleneck in the provided C program, we can follow the tasks specified in the problem statement.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The `while` loop (line 6) is where the program spends most of its time in the slow input case (hit count: 43,020 vs. 1 for the fast input).
   - The nested `for` loop (line 8) inside the `while` loop is incredibly expensive for the slow input, with a hit count of 925,370,784.

2. **Pinpoint Lines with More Hits in Slow Input:**
   - The `while` loop condition is re-evaluated 43,020 times for the slow input.
   - The `for` loop iterates massively (hit count: ~925 million) for this input, showing that it is a major source of inefficiency.

3. **Interaction with Data Structures:**
   - The array `b` is used to keep track of previous remainders (mod values).
   - As `j` increases, the `for` loop iterates over more elements, checking if a previously seen remainder (`mod`) exists in `b`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariants:**

   - **Invariant 1: Large Remainder Space**
     - "The program slows down significantly when the number of unique remainders (mod values) approaches `m`. As more remainders are checked, the cost of iterating through them increases, leading to performance degradation."
     - **Reasoning**: A large `m` means more potential unique remainders, leading to increased checks in the `for` loop.

   - **Invariant 2: High Iteration in `while` Loop**
     - "When `a` and `m` are such that the modulus operation continues to generate new remainders without reaching zero, the program may enter a performance bottleneck due to high iteration counts in the outer loop."
     - **Reasoning**: If `a % m` does not quickly reduce to zero, the loop continues, accumulating iterations.

   - **Invariant 3: Remainder Repetition Detection**
     - "The detection of previously seen remainders causes linear time complexity with respect to the number of remainders, which significantly slows down performance as the `while` loop progresses."
     - **Reasoning**: Each new remainder requires checking against all previously seen remainders, which is inefficient as `j` grows.

2. **Avoiding Specific Numeric Values:**
   - These invariants are framed in terms of conditions like the number of remainders (`j` approaching `m`) rather than specific values from the slow input.

3. **Thresholds and Input Patterns:**
   - These conditions are broad enough to capture scenarios where `m` is large, and the progression of `a` does not quickly yield a zero remainder, which aligns with the constraints `1 ≤ a, m ≤ 105`.

In summary, the primary source of inefficiency in the program is the repeated iteration over a growing list of remainders, especially when `m` is large and `a` produces many unique remainders before reaching divisibility. The conditions that lead to performance issues are well-captured by the above invariants, which abstract the slowdown causes without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
One industrial factory is reforming working plan. The director suggested to set a mythical detail production norm. If at the beginning of the day there were x details in the factory storage, then by the end of the day the factory has to produce <image> (remainder after dividing x by m) more details. Unfortunately, no customer has ever bought any mythical detail, so all the details produced stay on the factory. 

The board of directors are worried that the production by the given plan may eventually stop (that means that there will be а moment when the current number of details on the factory is divisible by m). 

Given the number of details a on the first day and number m check if the production stops at some moment.

Input

The first line contains two integers a and m (1 ≤ a, m ≤ 105).

Output

Print "Yes" (without quotes) if the production will eventually stop, otherwise print "No".

Examples

Input

1 5


Output

No


Input

3 6


Output

Yes

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here, we will translate the performance-characterizing invariants into C++ code snippets that can be used to check for potential slowdowns at runtime.

#### Invariant 1: Large Remainder Space

```cpp
void check_large_remainder_space(bool condition) {
    if (condition) {
        cerr << "Warning: Large remainder space - potential slowdown due to many unique remainders." << endl;
        abort();
    }
}
```

#### Invariant 2: High Iteration in `while` Loop

```cpp
void check_high_while_iterations(bool condition) {
    if (condition) {
        cerr << "Warning: High iteration count in while loop - potential performance bottleneck." << endl;
        abort();
    }
}
```

#### Invariant 3: Remainder Repetition Detection

```cpp
void check_remainder_repetition(bool condition) {
    if (condition) {
        cerr << "Warning: Repeated remainders detected - may cause exponential growth in checks." << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checks into the Original Program

Now, we'll integrate these checks into the provided C++ program, ensuring they are placed at effective points in the code.

```cpp
#include <bits/stdc++.h>

// Check function for large remainder space
void check_large_remainder_space(bool condition) {
    if (condition) {
        cerr << "Warning: Large remainder space - potential slowdown due to many unique remainders." << endl;
        abort();
    }
}

// Check function for high iteration count in while loop
void check_high_while_iterations(bool condition) {
    if (condition) {
        cerr << "Warning: High iteration count in while loop - potential performance bottleneck." << endl;
        abort();
    }
}

// Check function for repeated remainders
void check_remainder_repetition(bool condition) {
    if (condition) {
        cerr << "Warning: Repeated remainders detected - may cause exponential growth in checks." << endl;
        abort();
    }
}

int main() {
    int a, m, mod, j = 0;
    scanf("%d%d", &a, &m);
    int b[m];

    // Invariant checks for pre-loop conditions
    check_large_remainder_space(m > 1000); // Arbitrary threshold for large m

    int iteration_count = 0;
    while (a % m != 0) {
        mod = a % m;

        // Invariant check for high iteration in while loop
        check_high_while_iterations(iteration_count > 100000); // Threshold for iteration count
        iteration_count++;

        for (int i = 0; i < j; ++i) {
            if (b[i] == mod) {
                // Invariant check for remainder repetition detection
                check_remainder_repetition(true); // This is the situation we're checking for
                printf("No");
                return 0;
            }
        }
        b[j] = mod;
        j++;
        a += mod;
    }
    printf("Yes");
    return 0;
}
```

#### Explanation of Check Integration:

1. **`check_large_remainder_space`:** After reading the input, this check determines if `m` is large, which can lead to many unique remainders.

2. **`check_high_while_iterations`:** Placed inside the `while` loop to monitor the number of iterations, triggering if an arbitrary threshold is exceeded, indicating a potential bottleneck.

3. **`check_remainder_repetition`:** Inside the `for` loop, checks for repeated remainders, which could signal that the program is encountering multiple already-seen remainders, causing the `for` loop to execute extensively.

Each of these checks helps us identify when the program might be entering a performance bottleneck scenario, allowing us to abort and debug if needed.

