system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

One industrial factory is reforming working plan. The director suggested to set a mythical detail production norm. If at the beginning of the day there were x details in the factory storage, then by the end of the day the factory has to produce <image> (remainder after dividing x by m) more details. Unfortunately, no customer has ever bought any mythical detail, so all the details produced stay on the factory. 

The board of directors are worried that the production by the given plan may eventually stop (that means that there will be а moment when the current number of details on the factory is divisible by m). 

Given the number of details a on the first day and number m check if the production stops at some moment.

Input

The first line contains two integers a and m (1 ≤ a, m ≤ 105).

Output

Print "Yes" (without quotes) if the production will eventually stop, otherwise print "No".

Examples

Input

1 5


Output

No


Input

3 6


Output

Yes

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  long long a, m;
  cin >> a >> m;
  long long MAX = a + 9999997;
  long long cnt = 0;
  while (cnt <= MAX) {
    long long x = a % m;
    if ((x + a) % m == 0) {
      cout << "Yes" << endl;
      return 0;
    } else
      a += x;
    cnt++;
  }
  cout << "No" << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100000 101000


(G.2) Fast Input

100000 100000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long long a, m; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> a >> m; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  long long MAX = a + 9999997; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  long long cnt = 0; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  while (cnt <= MAX) { /* line 8 slow_hit_count: 10099999, fast_hit_count: 1 */
    long long x = a % m; /* line 9 slow_hit_count: 10099998, fast_hit_count: 1 */
    if ((x + a) % m == 0) { /* line 10 slow_hit_count: 10099998, fast_hit_count: 1 */
      cout << "Yes" << endl; /* line 11 slow_hit_count: 0, fast_hit_count: 1 */
      return 0; /* line 12 slow_hit_count: 0, fast_hit_count: 1 */
    } else /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
      a += x; /* line 14 slow_hit_count: 10099998, fast_hit_count: 0 */
    cnt++; /* line 15 slow_hit_count: 10099998, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "No" << endl; /* line 17 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 18 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */


assistant: **Phase 1: Identify Expensive or Inefficient Code Segments**

Based on the hit count information, it is clear that the main performance bottleneck is the loop starting at line 8. The slow input causes the loop to iterate 10,099,999 times, whereas the fast input exits the loop almost immediately with just one iteration. The lines within the loop (lines 9, 10, 14, and 15) see a similar number of hits in the slow input due to this extensive looping.

The key inefficiency seems to be the repeated calculation and update of `a` in the line `a += x;` (line 14), which is based on the result of `a % m` (line 9), and the condition `(x + a) % m == 0` (line 10) which is never met for a large number of iterations. This suggests that the loop's termination condition heavily depends on the interaction between `a` and `m`, potentially related to the properties of modular arithmetic.

**Phase 2: Derive Performance-Characterizing Invariants**

1. **Invariant on Modulo Operations:**
   - **Natural language description:** "If the initial number of details `a` is such that `(a % m)` frequently results in a sequence that never meets the divisibility condition `(x + a) % m == 0`, the loop may iterate many times without terminating soon."
   - **Explanation:** The program's slowdown occurs when `a` and `m` are such that the repeated calculation `a % m` does not lead to a state where `(x + a) % m == 0` can be true. This condition can result in the loop continuing for its maximum predefined limit without finding a solution.

2. **Invariant on Incremental Growth:**
   - **Natural language description:** "If the increment `x` (which is `a % m`) keeps `a` from being divisible by `m` despite additions, especially when `a` is large relative to `m`, it can result in prolonged execution."
   - **Explanation:** When `a` is large and close to a multiple of `m`, the increment `x` tends to cycle without reaching a termination condition. This cycling can lead to the loop hitting its iteration cap without producing a "Yes" result, thus taking a long time to conclude.

3. **Invariant on Large Initial Values:**
   - **Natural language description:** "When the initial value of `a` is large, close to the upper constraint, and `m` is also large but not a multiple of `a`, the program may exhibit slow behavior due to ineffective looping."
   - **Explanation:** Large values of `a` and `m` that do not align in a way that allows quick satisfaction of the modulo condition result in the loop iterating for a long time, trying unsuccessfully to bring about a division by `m`.

These invariants suggest that inefficiencies arise from the interaction between the values of `a` and `m`, particularly when initial conditions do not lead to quick satisfaction of the modulo-based termination condition. These insights can help flag potential inputs that may trigger slow execution in future scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
One industrial factory is reforming working plan. The director suggested to set a mythical detail production norm. If at the beginning of the day there were x details in the factory storage, then by the end of the day the factory has to produce <image> (remainder after dividing x by m) more details. Unfortunately, no customer has ever bought any mythical detail, so all the details produced stay on the factory. 

The board of directors are worried that the production by the given plan may eventually stop (that means that there will be а moment when the current number of details on the factory is divisible by m). 

Given the number of details a on the first day and number m check if the production stops at some moment.

Input

The first line contains two integers a and m (1 ≤ a, m ≤ 105).

Output

Print "Yes" (without quotes) if the production will eventually stop, otherwise print "No".

Examples

Input

1 5


Output

No


Input

3 6


Output

Yes

Solution (C++ code):
{solution}


assistant: **Phase 3: Implementing Performance Invariants in C++**

Here are the C++ code snippets that implement the performance-characterizing invariants derived in Phase 2:

1. **Invariant on Modulo Operations:**
   ```cpp
   void check_modulo_invariant(long long a, long long m, long long iteration_limit) {
       if (iteration_limit > 10000000) {  // Example arbitrary large threshold
           cerr << "Warning: Modulo invariant triggered - excessive iterations without termination" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Incremental Growth:**
   ```cpp
   void check_increment_invariant(long long a, long long m, long long x) {
       if (x == 0) {  // If x becomes 0, the increment won't change a
           cerr << "Warning: Increment invariant triggered - stagnation due to zero increment" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Large Initial Values:**
   ```cpp
   void check_large_initial_values_invariant(long long a, long long m) {
       if (a > 90000 && m > 90000) {  // Thresholds near the maximum constraints
           cerr << "Warning: Large initial values invariant triggered - potential inefficiency with large a and m" << endl;
           abort();
       }
   }
   ```

**Phase 4: Integrating Checkers into the Original C++ Program**

Now, let's integrate these checks into the provided code:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Performance invariant check functions
void check_modulo_invariant(long long a, long long m, long long iteration_limit) {
    if (iteration_limit > 10000000) {  // Example arbitrary large threshold
        cerr << "Warning: Modulo invariant triggered - excessive iterations without termination" << endl;
        abort();
    }
}

void check_increment_invariant(long long a, long long m, long long x) {
    if (x == 0) {  // If x becomes 0, the increment won't change a
        cerr << "Warning: Increment invariant triggered - stagnation due to zero increment" << endl;
        abort();
    }
}

void check_large_initial_values_invariant(long long a, long long m) {
    if (a > 90000 && m > 90000) {  // Thresholds near the maximum constraints
        cerr << "Warning: Large initial values invariant triggered - potential inefficiency with large a and m" << endl;
        abort();
    }
}

int main() {
    long long a, m;
    cin >> a >> m;

    // Check large initial values invariant
    check_large_initial_values_invariant(a, m);

    long long MAX = a + 9999997;
    long long cnt = 0;
    while (cnt <= MAX) {
        long long x = a % m;

        // Check increment invariant
        check_increment_invariant(a, m, x);

        if ((x + a) % m == 0) {
            cout << "Yes" << endl;
            return 0;
        } else {
            a += x;
        }
        cnt++;

        // Check modulo invariant
        check_modulo_invariant(a, m, cnt);
    }
    cout << "No" << endl;
    return 0;
}
```

**Explanation of Instrumentation:**

1. **Large Initial Values Check**: Before entering the main loop, the program checks if both `a` and `m` are large, potentially leading to inefficiencies. This check is placed right after reading inputs.

2. **Increment Invariant Check**: This is placed within the loop, immediately after calculating `x = a % m`, to ensure no zero increment leads to infinite looping.

3. **Modulo Invariant Check**: This is placed at the end of the loop iteration to detect when excessive iterations are happening without converging to a solution. This effectively caps the iterations to avoid prolonged execution.

These checks are designed to catch conditions that lead to slowdowns and will trigger warnings followed by program termination if such conditions are met, aiding debugging and testing processes.

