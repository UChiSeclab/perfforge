system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Students in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.

The students don’t want to use too many blocks, but they also want to be unique, so no two students’ towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.

Input

The first line of the input contains two space-separated integers n and m (0 ≤ n, m ≤ 1 000 000, n + m > 0) — the number of students using two-block pieces and the number of students using three-block pieces, respectively.

Output

Print a single integer, denoting the minimum possible height of the tallest tower.

Examples

Input

1 3


Output

9


Input

3 2


Output

8


Input

5 0


Output

10

Note

In the first case, the student using two-block pieces can make a tower of height 4, and the students using three-block pieces can make towers of height 3, 6, and 9 blocks. The tallest tower has a height of 9 blocks.

In the second case, the students can make towers of heights 2, 4, and 8 with two-block pieces and towers of heights 3 and 6 with three-block pieces, for a maximum height of 8 blocks.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MX = 30 * 1e6 + 10;
int n;
bool vi[MX];
int main() {
  int o, oo, n, m;
  cin >> o >> oo;
  for (int j = 1; j <= MX; j++) {
    int two = j / 2, three = j / 3, six = j / 6;
    two -= six;
    three -= six;
    n = o, m = oo;
    n -= min(n, two);
    m -= min(m, three);
    if (six >= n + m) {
      cout << j << endl;
      return 0;
    }
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1000000


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MX = 30 * 1e6 + 10; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
bool vi[MX]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int o, oo, n, m; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> o >> oo; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int j = 1; j <= MX; j++) { /* line 9 slow_hit_count: 3000000, fast_hit_count: 3 */
    int two = j / 2, three = j / 3, six = j / 6; /* line 10 slow_hit_count: 3000000, fast_hit_count: 3 */
    two -= six; /* line 11 slow_hit_count: 3000000, fast_hit_count: 3 */
    three -= six; /* line 12 slow_hit_count: 3000000, fast_hit_count: 3 */
    n = o, m = oo; /* line 13 slow_hit_count: 3000000, fast_hit_count: 3 */
    n -= min(n, two); /* line 14 slow_hit_count: 3000000, fast_hit_count: 3 */
    m -= min(m, three); /* line 15 slow_hit_count: 3000000, fast_hit_count: 3 */
    if (six >= n + m) { /* line 16 slow_hit_count: 3000000, fast_hit_count: 3 */
      cout << j << endl; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
      return 0; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To assess why the provided C program runs slowly for the given "slow" input, we need to examine the line-level hit counts and identify the parts of the code that are being executed far more frequently in the slow run compared to the fast run.

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Loop Analysis**: 
   - **Line 9**: The `for` loop `for (int j = 1; j <= MX; j++)` has a significantly higher hit count for the slow input (3,000,000 hits) compared to the fast input (3 hits). This indicates that the loop runs many more iterations in the slow scenario.

2. **Inside the Loop**:
   - **Lines 10-16**: These lines are executed as part of each iteration of the loop and have hit counts equal to the loop itself. This suggests that the slowdown is relate to the loop's body repeatedly executing complex operations.

3. **Condition Check**:
   - **Line 16**: The condition `if (six >= n + m)` is also checked the same number of times as the loop runs, meaning the loop continues until this condition becomes true.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the problem statement, the constraints, and the code analysis, we can derive the following performance-characterizing invariants:

1. **Ratio and Allocation of Resources**:
   - **Invariant**: "When there is a large imbalance between the number of students using two-block pieces and three-block pieces, the loop may need to run significantly longer to find a valid tower height."
   - **Reason**: The loop continues until the condition `six >= n + m` becomes true, which depends heavily on how `n` and `m` are reduced in each loop iteration. If `m` is much larger than `n`, more iterations are necessary since more offsets by division by three are required.

2. **High Iteration Count due to Large `m`**:
   - **Invariant**: "When a large number of students, particularly those using three-block pieces, need unique tower heights, the loop must iterate through many potential tower heights, increasing execution time."
   - **Reason**: The condition `six >= n + m` means that the loop needs to find a large enough `j` such that the total number of reduced tower counts (`six`) meets or exceeds the sum of students `n + m`.

3. **Loop Termination Condition**:
   - **Invariant**: "The loop's termination is directly tied to the least common multiple behavior, which is computationally intensive when the numbers of students using different block sizes are not balanced."
   - **Reason**: The iteration builds up values for `two` and `three` until the overlap (`six`) satisfies the student count. If either `two` or `three` cannot be minimized effectively due to skewed input ratios, the loop persists longer.

### Considerations for Future Cases

- **Input Patterns**: Future inputs with a large difference between `n` and `m`, especially when `m` is large, will likely trigger similar slow scenarios due to the nature of resource allocation and distribution within the loop.
- **Thresholds**: The relationship between `n`, `m`, and the loop's condition (`six >= n + m`) suggests that the program becomes inefficient as the sum increases without achieving a balanced reduction through `two` or `three`.

By understanding these invariants, we can anticipate when the program will enter a slow execution path and potentially optimize or refactor the code to handle such cases better.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Students in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.

The students don’t want to use too many blocks, but they also want to be unique, so no two students’ towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.

Input

The first line of the input contains two space-separated integers n and m (0 ≤ n, m ≤ 1 000 000, n + m > 0) — the number of students using two-block pieces and the number of students using three-block pieces, respectively.

Output

Print a single integer, denoting the minimum possible height of the tallest tower.

Examples

Input

1 3


Output

9


Input

3 2


Output

8


Input

5 0


Output

10

Note

In the first case, the student using two-block pieces can make a tower of height 4, and the students using three-block pieces can make towers of height 3, 6, and 9 blocks. The tallest tower has a height of 9 blocks.

In the second case, the students can make towers of heights 2, 4, and 8 with two-block pieces and towers of heights 3 and 6 with three-block pieces, for a maximum height of 8 blocks.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Based on the previously derived natural language invariants, we'll now implement C++ code snippets to check these conditions at runtime. The checks will help detect potential slowdowns by identifying when the program enters a performance bottleneck.

#### Invariant 1: Large Imbalance Between `n` and `m`

```cpp
void check_imbalance_invariant(int n, int m) {
    if (n == 0 || m >= 10 * n) {
        cerr << "Warning: Imbalance invariant triggered - large imbalance between `n` and `m`." << endl;
        abort();
    }
}
```

This function checks if there's a significant imbalance between the number of students using two-block and three-blocks, which could lead to inefficiencies.

#### Invariant 2: Large Number of Three-block Students

```cpp
void check_large_m_invariant(int m) {
    if (m > 500000) { // Arbitrary large threshold for demonstration
        cerr << "Warning: Large `m` invariant triggered - large number of three-block students." << endl;
        abort();
    }
}
```

This function checks if the number of students using three blocks is very large, which could cause the loop to iterate excessively.

#### Invariant 3: High Iteration Count for Loop

This invariant is more about the behavior observed during the loop execution but can be indirectly checked by the conditions above, reflecting potential trigger points.

### Phase 4: Integrating Checks into the C++ Program

Now, let's integrate these checks into the original program at strategic points to catch performance triggers without adding significant overhead inside the loop.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MX = 30 * 1e6 + 10;

void check_imbalance_invariant(int n, int m) {
    if (n == 0 || m >= 10 * n) {
        cerr << "Warning: Imbalance invariant triggered - large imbalance between `n` and `m`." << endl;
        abort();
    }
}

void check_large_m_invariant(int m) {
    if (m > 500000) { // Arbitrary large threshold for demonstration
        cerr << "Warning: Large `m` invariant triggered - large number of three-block students." << endl;
        abort();
    }
}

int main() {
    int o, oo, n, m;
    cin >> o >> oo;
    
    // Check for imbalance invariant
    check_imbalance_invariant(o, oo);
    
    // Check for large `m` invariant
    check_large_m_invariant(oo);

    for (int j = 1; j <= MX; j++) {
        int two = j / 2, three = j / 3, six = j / 6;
        two -= six;
        three -= six;
        n = o, m = oo;
        n -= min(n, two);
        m -= min(m, three);
        if (six >= n + m) {
            cout << j << endl;
            return 0;
        }
    }
}
```

### Explanation

1. **Placement of Checks**: 
   - The checks are placed after input reading and before the main loop to prevent introducing overhead during each loop iteration.

2. **Effective Points**: 
   - The `"check_imbalance_invariant"` and `"check_large_m_invariant"` functions are invoked before the computationally heavy loop to intercept inputs that are likely to lead to long runtimes.

3. **Avoiding Redundancy**: 
   - The checks are distinct and handle different potential slow scenarios, so they're not merged.

By including these checks, the program can identify and abort execution when it encounters inputs that are likely to trigger performance bottlenecks, thereby aiding in debugging and optimization efforts.

