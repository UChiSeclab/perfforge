system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Students in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.

The students don’t want to use too many blocks, but they also want to be unique, so no two students’ towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.

Input

The first line of the input contains two space-separated integers n and m (0 ≤ n, m ≤ 1 000 000, n + m > 0) — the number of students using two-block pieces and the number of students using three-block pieces, respectively.

Output

Print a single integer, denoting the minimum possible height of the tallest tower.

Examples

Input

1 3


Output

9


Input

3 2


Output

8


Input

5 0


Output

10

Note

In the first case, the student using two-block pieces can make a tower of height 4, and the students using three-block pieces can make towers of height 3, 6, and 9 blocks. The tallest tower has a height of 9 blocks.

In the second case, the students can make towers of heights 2, 4, and 8 with two-block pieces and towers of heights 3 and 6 with three-block pieces, for a maximum height of 8 blocks.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, m;
bool check(int x) {
  int num = (x - 2 * n) / 2, tmp = m, top = 0;
  while (tmp > 0) {
    top += 3;
    if (top % 6 == 0) {
      if (num > 0)
        num--;
      else
        top += 3;
    }
    tmp--;
  }
  return top <= x;
}
int main() {
  scanf("%d%d", &n, &m);
  int l = max(2 * n, 3 * m), r = 6000000, mid;
  while (l < r) {
    mid = (l + r) / 2;
    if (check(mid) == true)
      r = mid;
    else
      l = mid + 1;
  }
  printf("%d", l);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1000000


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
bool check(int x) { /* line 4 slow_hit_count: 22, fast_hit_count: 23 */
  int num = (x - 2 * n) / 2, tmp = m, top = 0; /* line 5 slow_hit_count: 22, fast_hit_count: 23 */
  while (tmp > 0) { /* line 6 slow_hit_count: 22000022, fast_hit_count: 46 */
    top += 3; /* line 7 slow_hit_count: 22000000, fast_hit_count: 23 */
    if (top % 6 == 0) { /* line 8 slow_hit_count: 22000000, fast_hit_count: 23 */
      if (num > 0) /* line 9 slow_hit_count: 11000000, fast_hit_count: 0 */
        num--; /* line 10 slow_hit_count: 11000000, fast_hit_count: 0 */
      else /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
        top += 3; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    tmp--; /* line 14 slow_hit_count: 22000000, fast_hit_count: 23 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return top <= x; /* line 16 slow_hit_count: 22, fast_hit_count: 23 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &m); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  int l = max(2 * n, 3 * m), r = 6000000, mid; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  while (l < r) { /* line 21 slow_hit_count: 23, fast_hit_count: 24 */
    mid = (l + r) / 2; /* line 22 slow_hit_count: 22, fast_hit_count: 23 */
    if (check(mid) == true) /* line 23 slow_hit_count: 22, fast_hit_count: 23 */
      r = mid; /* line 24 slow_hit_count: 22, fast_hit_count: 23 */
    else /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      l = mid + 1; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d", l); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided hit count data and the given C program, we can analyze the slow and fast inputs to identify performance bottlenecks and derive performance-characterizing invariants. Let's break down the analysis:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Function `check`:** 
   - The while loop (`while (tmp > 0)`) within the `check` function exhibits a significant hit count difference between the slow and fast runs. For the slow input, it is hit 22,000,022 times compared to 46 times for the fast input.
   - The loop is executed `m` times, and for the slow input, `m` is significantly larger, causing the loop to iterate many more times.

2. **Top Increment and Condition Check:**
   - Lines inside the loop (`top += 3`, `if (top % 6 == 0)`) are also heavily executed during the slow run, indicating repeated arithmetic and conditional evaluation.

3. **Overall Execution Flow:**
   - The main loop (`while (l < r)`) in the `main` function is executed 23 times in the slow input, showing its dependency on the `check` function's performance.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we derive the following performance-characterizing invariants:

1. **High Iteration Due to Large `m`:**
   - **Invariant:** "When the number of students using three-block pieces (`m`) is large, the number of iterations in the nested loop increases significantly, causing performance degradation."
   - **Rationale:** The loop dependent on `m` executes `m` times, which leads to a high number of iterations when `m` is large.

2. **Conditional Branching in Loop:**
   - **Invariant:** "If the condition `top % 6 == 0` is frequently true within a high iteration loop, additional operations are triggered, further compounding the execution time."
   - **Rationale:** The condition introduces a branch that modifies behavior, causing more operations as `m` increases.

3. **Binary Search Range and Loop Interplay:**
   - **Invariant:** "The interplay between the binary search range and the large iterative loop results in more binary search iterations, which can slow down performance when `m` is large."
   - **Rationale:** The binary search process (`while (l < r)`) is influenced by the results of `check`, which in turn are affected by the high loop iteration count.

### Conclusion

In situations where `m` is large, such as near the constraint `m <= 1,000,000`, the program's performance is significantly impacted due to increased iterations in the `check` function and the conditional logic within it. These invariants help diagnose and anticipate scenarios where the program may experience slowdowns, guiding optimizations or alternative approaches to mitigate the performance issues.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Students in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.

The students don’t want to use too many blocks, but they also want to be unique, so no two students’ towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.

Input

The first line of the input contains two space-separated integers n and m (0 ≤ n, m ≤ 1 000 000, n + m > 0) — the number of students using two-block pieces and the number of students using three-block pieces, respectively.

Output

Print a single integer, denoting the minimum possible height of the tallest tower.

Examples

Input

1 3


Output

9


Input

3 2


Output

8


Input

5 0


Output

10

Note

In the first case, the student using two-block pieces can make a tower of height 4, and the students using three-block pieces can make towers of height 3, 6, and 9 blocks. The tallest tower has a height of 9 blocks.

In the second case, the students can make towers of heights 2, 4, and 8 with two-block pieces and towers of heights 3 and 6 with three-block pieces, for a maximum height of 8 blocks.

Solution (C++ code):
{solution}


assistant: Certainly! Let's proceed to implement the performance-characterizing invariants as runtime checks in C++ code (Phase 3) and integrate them into the original program (Phase 4).

### Phase 3: Implement the Natural Language Invariants in C++

For each of the derived invariants, we'll create a checker function in C++. Here are the checker implementations:

1. **High Iteration Due to Large `m`:**

```cpp
void check_large_m_invariant(int m) {
    if (m > 100000) { // Threshold can be adjusted based on performance observations
        cerr << "Warning: Performance bottleneck condition triggered due to large 'm'!" << endl;
        abort();
    }
}
```

2. **Conditional Branching in Loop:**

```cpp
void check_conditional_branching_invariant(int m, int loopIterations) {
    if (m > 100000 && loopIterations > 100000) { // Example threshold values
        cerr << "Warning: Performance bottleneck condition triggered by excessive loop iterations and conditional branching!" << endl;
        abort();
    }
}
```

3. **Binary Search Range and Loop Interplay:**

```cpp
void check_binary_search_invariant(int l, int r) {
    if ((r - l) > 1000000) { // If the search space is too large
        cerr << "Warning: Performance bottleneck condition triggered by large binary search range!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code with the Original Program

We'll now integrate these checks into the original C++ program, ensuring they're placed at effective points without introducing overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, m;

// Check for large m
void check_large_m_invariant(int m) {
    if (m > 100000) { // Choose a reasonable threshold based on performance limits
        cerr << "Warning: Performance bottleneck condition triggered due to large 'm'!" << endl;
        abort();
    }
}

// Check for excessive loop iterations due to conditional branching
void check_conditional_branching_invariant(int m, int loopIterations) {
    if (m > 100000 && loopIterations > 100000) { // Example threshold values
        cerr << "Warning: Performance bottleneck condition triggered by excessive loop iterations and conditional branching!" << endl;
        abort();
    }
}

// Check for large binary search range
void check_binary_search_invariant(int l, int r) {
    if ((r - l) > 1000000) { // If the search space is too large
        cerr << "Warning: Performance bottleneck condition triggered by large binary search range!" << endl;
        abort();
    }
}

bool check(int x) {
    int num = (x - 2 * n) / 2, tmp = m, top = 0;
    int loopIterations = 0; // Track loop iterations for conditional check

    while (tmp > 0) {
        top += 3;
        if (top % 6 == 0) {
            if (num > 0)
                num--;
            else
                top += 3;
        }
        tmp--;
        loopIterations++;
    }

    // Check conditional branching and loop iterations
    check_conditional_branching_invariant(m, loopIterations);

    return top <= x;
}

int main() {
    scanf("%d%d", &n, &m);

    // Check for large m
    check_large_m_invariant(m);

    int l = max(2 * n, 3 * m), r = 6000000, mid;

    // Check for large binary search range
    check_binary_search_invariant(l, r);

    while (l < r) {
        mid = (l + r) / 2;
        if (check(mid) == true)
            r = mid;
        else
            l = mid + 1;

        // Update and check binary search range during iteration
        check_binary_search_invariant(l, r);
    }

    printf("%d", l);
    return 0;
}
```

### Explanation

- We placed the `check_large_m_invariant` after reading `m` to alert when `m` is excessively large.
- The `check_conditional_branching_invariant` is called after the loop in `check` to track excessive iteration due to large `m`.
- We check the binary search range with `check_binary_search_invariant` before and during the loop in `main` to detect when the range becomes too large.

These checks help identify potential performance bottlenecks without incurring significant overhead, thus aiding debugging and optimization efforts.

