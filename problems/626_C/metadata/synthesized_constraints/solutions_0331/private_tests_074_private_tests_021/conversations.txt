system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Students in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.

The students don’t want to use too many blocks, but they also want to be unique, so no two students’ towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.

Input

The first line of the input contains two space-separated integers n and m (0 ≤ n, m ≤ 1 000 000, n + m > 0) — the number of students using two-block pieces and the number of students using three-block pieces, respectively.

Output

Print a single integer, denoting the minimum possible height of the tallest tower.

Examples

Input

1 3


Output

9


Input

3 2


Output

8


Input

5 0


Output

10

Note

In the first case, the student using two-block pieces can make a tower of height 4, and the students using three-block pieces can make towers of height 3, 6, and 9 blocks. The tallest tower has a height of 9 blocks.

In the second case, the students can make towers of heights 2, 4, and 8 with two-block pieces and towers of heights 3 and 6 with three-block pieces, for a maximum height of 8 blocks.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, m;
int main() {
  scanf("%d %d", &n, &m);
  int mx1 = n * 2, mx2 = m * 3;
  map<int, int> mp;
  for (int i = 2; i <= n * 2; i += 2) {
    mp[i]++;
  }
  for (int j = 3; j <= m * 3; j += 3) {
    mp[j]++;
  }
  for (int i = 1; i <= max(mx1, mx2); i++) {
    if (mp[i] > 1) {
      if (mx1 + 2 < mx2 + 3) {
        mx1 += 2;
        mp[mx1]++;
      } else {
        mx2 += 3;
        mp[mx2]++;
      }
    }
  }
  printf("%d\n", max(mx1, mx2));
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1000000


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d", &n, &m); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int mx1 = n * 2, mx2 = m * 3; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  map<int, int> mp; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i <= n * 2; i += 2) { /* line 8 slow_hit_count: 2, fast_hit_count: 2 */
    mp[i]++; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  for (int j = 3; j <= m * 3; j += 3) { /* line 11 slow_hit_count: 1000001, fast_hit_count: 2 */
    mp[j]++; /* line 12 slow_hit_count: 1000000, fast_hit_count: 1 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= max(mx1, mx2); i++) { /* line 14 slow_hit_count: 3000001, fast_hit_count: 4 */
    if (mp[i] > 1) { /* line 15 slow_hit_count: 3000000, fast_hit_count: 3 */
      if (mx1 + 2 < mx2 + 3) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
        mx1 += 2; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
        mp[mx1]++; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
        mx2 += 3; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
        mp[mx2]++; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", max(mx1, mx2)); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

By analyzing the hit counts for the slow and fast inputs, we can identify where the code becomes inefficient:

1. **Map Population for Three-Block Towers**:
   - **Line 11**: `for (int j = 3; j <= m * 3; j += 3) {`
     - **Slow Input**: Hit 1,000,001 times.
     - **Fast Input**: Hit 2 times.
   - **Line 12**: `mp[j]++;`
     - **Slow Input**: Hit 1,000,000 times.
     - **Fast Input**: Hit once.
   
   The loop from line 11 to 12 is heavily executed for the slow input, indicating that populating the map for the range of three-block tower heights is costly when `m` is large.

2. **Checking for Duplicate Heights and Adjusting**:
   - **Line 14**: `for (int i = 1; i <= max(mx1, mx2); i++) {`
     - **Slow Input**: Hit 3,000,001 times.
     - **Fast Input**: Hit 4 times.
   - **Line 15**: `if (mp[i] > 1) {`
     - **Slow Input**: Hit 3,000,000 times.
     - **Fast Input**: Hit 3 times.

   This additional loop iterates over the range of potential tower heights, checking for duplicates and adjusting if necessary. It is executed a large number of times for the slow input, suggesting its execution time is significant when `m` is large.

## Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can deduce the conditions under which the program slows down:

### Performance Invariant 1: Excessive Iterations with Large `m`

- **Natural Language Description**: 
  "When the number of students using three-block pieces (m) is large, iterating over possible three-block tower heights significantly increases execution time. The program slows down when `m` approaches its upper limit within the constraint, particularly compounded by iterating through heights already checked for duplicates."

### Performance Invariant 2: Duplicate Checks Across Large Range

- **Natural Language Description**: 
  "The performance degrades when the range of potential tower heights becomes extensive due to a large `m`, necessitating repeated checks for duplicate heights across this range. Specifically, the program spends a lot of time rechecking and adjusting for overlaps when `max(mx1, mx2)` is very large."

### Recommendations for Optimization

- **Loop Optimization**: Consider reducing unnecessary iterations by optimizing map operations or by avoiding redundant checks for potential duplicate tower heights.
- **Data Structure Optimization**: Evaluate using a more efficient data structure for tracking heights to reduce the time complexity of duplicate checks and adjustments.

These invariants highlight the conditions under which the program becomes inefficient, offering insight into how you might optimize this code for large input sizes within given constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Students in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.

The students don’t want to use too many blocks, but they also want to be unique, so no two students’ towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.

Input

The first line of the input contains two space-separated integers n and m (0 ≤ n, m ≤ 1 000 000, n + m > 0) — the number of students using two-block pieces and the number of students using three-block pieces, respectively.

Output

Print a single integer, denoting the minimum possible height of the tallest tower.

Examples

Input

1 3


Output

9


Input

3 2


Output

8


Input

5 0


Output

10

Note

In the first case, the student using two-block pieces can make a tower of height 4, and the students using three-block pieces can make towers of height 3, 6, and 9 blocks. The tallest tower has a height of 9 blocks.

In the second case, the students can make towers of heights 2, 4, and 8 with two-block pieces and towers of heights 3 and 6 with three-block pieces, for a maximum height of 8 blocks.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement Checker Code Based on Invariants

### Performance Invariant 1: Excessive Iterations with Large `m`

```cpp
void check_large_m_invariant(int m) {
    if (m > 500000) { // A threshold slightly below the maximum constraint to detect potential slowdowns
        cerr << "Warning: Performance bottleneck condition triggered due to large m!" << endl;
        abort();
    }
}
```

### Performance Invariant 2: Duplicate Checks Across Large Range

```cpp
void check_large_range_invariant(int mx1, int mx2) {
    if (max(mx1, mx2) > 1500000) { // Threshold chosen to catch large ranges leading to slow execution
        cerr << "Warning: Performance bottleneck condition triggered due to large range of potential tower heights!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checker Code into Original Program

Here is the original program instrumented with the checker functions:

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, m;

// Checker functions for performance bottlenecks

void check_large_m_invariant(int m) {
    if (m > 500000) { // A threshold slightly below the maximum constraint to detect potential slowdowns
        cerr << "Warning: Performance bottleneck condition triggered due to large m!" << endl;
        abort();
    }
}

void check_large_range_invariant(int mx1, int mx2) {
    if (max(mx1, mx2) > 1500000) { // Threshold chosen to catch large ranges leading to slow execution
        cerr << "Warning: Performance bottleneck condition triggered due to large range of potential tower heights!" << endl;
        abort();
    }
}

int main() {
    scanf("%d %d", &n, &m);

    // Perform initial checks after reading inputs
    check_large_m_invariant(m);

    int mx1 = n * 2, mx2 = m * 3;
    map<int, int> mp;

    // Populate map for two-block towers
    for (int i = 2; i <= n * 2; i += 2) {
        mp[i]++;
    }

    // Populate map for three-block towers
    for (int j = 3; j <= m * 3; j += 3) {
        mp[j]++;
    }

    // Check the range before entering the loop
    check_large_range_invariant(mx1, mx2);

    // Resolve duplicate heights
    for (int i = 1; i <= max(mx1, mx2); i++) {
        if (mp[i] > 1) {
            if (mx1 + 2 < mx2 + 3) {
                mx1 += 2;
                mp[mx1]++;
            } else {
                mx2 += 3;
                mp[mx2]++;
            }
        }
    }

    printf("%d\n", max(mx1, mx2));
    return 0;
}
```

### Explanation

- **`check_large_m_invariant`**: This check is performed right after reading `m` from the input to capture any potential performance issues early due to a large `m`.
- **`check_large_range_invariant`**: This check is performed before entering the main loop to detect if the potential range of tower heights is too large, which could lead to inefficient execution due to repeated checks and adjustments.

