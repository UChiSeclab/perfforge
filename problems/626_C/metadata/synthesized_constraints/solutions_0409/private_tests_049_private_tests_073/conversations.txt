system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Students in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.

The students don’t want to use too many blocks, but they also want to be unique, so no two students’ towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.

Input

The first line of the input contains two space-separated integers n and m (0 ≤ n, m ≤ 1 000 000, n + m > 0) — the number of students using two-block pieces and the number of students using three-block pieces, respectively.

Output

Print a single integer, denoting the minimum possible height of the tallest tower.

Examples

Input

1 3


Output

9


Input

3 2


Output

8


Input

5 0


Output

10

Note

In the first case, the student using two-block pieces can make a tower of height 4, and the students using three-block pieces can make towers of height 3, 6, and 9 blocks. The tallest tower has a height of 9 blocks.

In the second case, the students can make towers of heights 2, 4, and 8 with two-block pieces and towers of heights 3 and 6 with three-block pieces, for a maximum height of 8 blocks.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  ;
  long long n, m;
  cin >> n >> m;
  if (n == 0) {
    cout << 3 * m << endl;
    return 0;
  }
  if (m == 0) {
    cout << 2 * n << endl;
    return 0;
  }
  long long u = 2, v = 3;
  priority_queue<long long> pq1, pq2;
  while (1) {
    if (u % 6 == 0) {
      u += 2;
      continue;
    } else {
      pq1.push(u);
      u += 2;
      n--;
    }
    if (n <= 0) break;
  }
  while (1) {
    if (v % 6 == 0) {
      v += 3;
      continue;
    } else {
      pq2.push(v);
      v += 3;
      m--;
    }
    if (m <= 0) break;
  }
  long long w = 6;
  while (1) {
    u = pq1.top();
    v = pq2.top();
    if (w > u && w > v) break;
    if (u > v) {
      pq1.pop();
      pq1.push(w);
      w += 6;
    } else {
      pq2.pop();
      pq2.push(w);
      w += 6;
    }
  }
  cout << max(pq1.top(), pq2.top()) << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000 1000000


(G.2) Fast Input

0 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  long long n, m; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  if (n == 0) { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 3 * m << endl; /* line 10 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 11 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  if (m == 0) { /* line 13 slow_hit_count: 1, fast_hit_count: 0 */
    cout << 2 * n << endl; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  long long u = 2, v = 3; /* line 17 slow_hit_count: 1, fast_hit_count: 0 */
  priority_queue<long long> pq1, pq2; /* line 18 slow_hit_count: 2, fast_hit_count: 0 */
  while (1) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    if (u % 6 == 0) { /* line 20 slow_hit_count: 1499999, fast_hit_count: 0 */
      u += 2; /* line 21 slow_hit_count: 499999, fast_hit_count: 0 */
      continue; /* line 22 slow_hit_count: 499999, fast_hit_count: 0 */
    } else { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      pq1.push(u); /* line 24 slow_hit_count: 1000000, fast_hit_count: 0 */
      u += 2; /* line 25 slow_hit_count: 1000000, fast_hit_count: 0 */
      n--; /* line 26 slow_hit_count: 1000000, fast_hit_count: 0 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    if (n <= 0) break; /* line 28 slow_hit_count: 1000000, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  while (1) { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    if (v % 6 == 0) { /* line 31 slow_hit_count: 1999999, fast_hit_count: 0 */
      v += 3; /* line 32 slow_hit_count: 999999, fast_hit_count: 0 */
      continue; /* line 33 slow_hit_count: 999999, fast_hit_count: 0 */
    } else { /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
      pq2.push(v); /* line 35 slow_hit_count: 1000000, fast_hit_count: 0 */
      v += 3; /* line 36 slow_hit_count: 1000000, fast_hit_count: 0 */
      m--; /* line 37 slow_hit_count: 1000000, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    if (m <= 0) break; /* line 39 slow_hit_count: 1000000, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  long long w = 6; /* line 41 slow_hit_count: 1, fast_hit_count: 0 */
  while (1) { /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    u = pq1.top(); /* line 43 slow_hit_count: 500001, fast_hit_count: 0 */
    v = pq2.top(); /* line 44 slow_hit_count: 500001, fast_hit_count: 0 */
    if (w > u && w > v) break; /* line 45 slow_hit_count: 500001, fast_hit_count: 0 */
    if (u > v) { /* line 46 slow_hit_count: 500000, fast_hit_count: 0 */
      pq1.pop(); /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      pq1.push(w); /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      w += 6; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      pq2.pop(); /* line 51 slow_hit_count: 500000, fast_hit_count: 0 */
      pq2.push(w); /* line 52 slow_hit_count: 500000, fast_hit_count: 0 */
      w += 6; /* line 53 slow_hit_count: 500000, fast_hit_count: 0 */
    } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  cout << max(pq1.top(), pq2.top()) << endl; /* line 56 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 57 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 58 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Comparison of Line-Level Hit Counts

1. **Lines with High Hit Counts in Slow Input:**
   - **Lines 20-22:** The `if (u % 6 == 0)` block is executed 1,499,999 times for the slow input.
   - **Lines 24-28:** The loop involving `pq1.push(u)` and `n--` within the `else` block is executed 1,000,000 times for the slow input.
   - **Lines 31-33:** The `if (v % 6 == 0)` block is executed 1,999,999 times for the slow input.
   - **Lines 35-39:** The loop involving `pq2.push(v)` and `m--` within the `else` block is executed 1,000,000 times for the slow input.
   - **Lines 43-45 and 51-53:** The loop processing the priority queues and updating `w` is executed 500,001 times for the slow input.

2. **Comparison Insights:**
   - The slow input causes extensive use of two loops to fill `pq1` and `pq2`. This results in a large number of push operations due to the high values of `n` and `m`.
   - The slow execution is significantly impacted by the subsequent loop (lines 42-55) that processes elements from the priority queues.

### Inferences

- The loops that run until `n` and `m` become zero are critical bottlenecks when `n` and `m` are large, as they extensively populate the priority queues.
- The additional loop that checks and updates the top elements of the priority queues is another contributing factor to the slowdown because it involves repeated operations depending on the number of elements in the queues.

## Phase 2: Derive Performance-Characterizing Invariants

### Performance Invariants

1. **Invariant 1: High Value of n or m**
   - **Natural Language Description:** "When either `n` or `m` is close to the maximum allowed value, the algorithm enters a slow path due to extensive population of priority queues."
   - **Explanation:** The priority queues are populated significantly, which leads to more operations and checks in subsequent loops affecting overall performance.

2. **Invariant 2: Balance Between n and m**
   - **Natural Language Description:** "If the values of `n` and `m` are both large, the final computation requires additional processing due to balance checks between the top elements of two populated priority queues."
   - **Explanation:** Both queues have to be managed concurrently, leading to multiple push and pop operations, which degrade performance.

3. **Invariant 3: Large Search Space due to W Increment**
   - **Natural Language Description:** "If many elements are processed through the priority queues concurrently, each step where `w` is incremented involves checking multiple conditions, slowing down the computation."
   - **Explanation:** The loop that involves updating `w` and comparing it with the top of the priority queues can become extensive with more populated queues.

### Summary

These invariants focus on the conditions where high values of `n` and `m` cause the program to undertake multiple iterations and operations on data structures, thereby affecting performance. The presence of these conditions leads to increased computation time, especially when both parameters lead to balanced filling and processing of the priority queues.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Students in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.

The students don’t want to use too many blocks, but they also want to be unique, so no two students’ towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.

Input

The first line of the input contains two space-separated integers n and m (0 ≤ n, m ≤ 1 000 000, n + m > 0) — the number of students using two-block pieces and the number of students using three-block pieces, respectively.

Output

Print a single integer, denoting the minimum possible height of the tallest tower.

Examples

Input

1 3


Output

9


Input

3 2


Output

8


Input

5 0


Output

10

Note

In the first case, the student using two-block pieces can make a tower of height 4, and the students using three-block pieces can make towers of height 3, 6, and 9 blocks. The tallest tower has a height of 9 blocks.

In the second case, the students can make towers of heights 2, 4, and 8 with two-block pieces and towers of heights 3 and 6 with three-block pieces, for a maximum height of 8 blocks.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement Natural Language Invariants as C++ Checkers

Here, I'll implement the performance-characterizing invariants derived previously as C++ code.

### Invariant 1: High Value of n or m
This invariant checks if either `n` or `m` is close to the maximum allowed value, which could lead to significant slowdown.

```cpp
void check_high_value_invariant(long long n, long long m) {
    if (n > 800000 || m > 800000) {  // Using a threshold slightly below the maximum
        cerr << "Warning: Performance bottleneck condition triggered due to high value of n or m!" << endl;
        abort();
    }
}
```

### Invariant 2: Balance Between n and m
This invariant checks if both `n` and `m` are large, leading to extensive processing.

```cpp
void check_balance_invariant(long long n, long long m) {
    if (n > 500000 && m > 500000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large values of both n and m!" << endl;
        abort();
    }
}
```

### Invariant 3: Large Search Space due to W Increment
This invariant checks whether the processing of priority queues becomes extensive.

```cpp
void check_large_search_invariant(long long queueSize1, long long queueSize2) {
    if (queueSize1 > 400000 && queueSize2 > 400000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large search space in queues!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checkers into Original Program

Below is the modified program with integrated checkers at effective points to avoid overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_high_value_invariant(long long n, long long m) {
    if (n > 800000 || m > 800000) {  // Threshold slightly below max
        cerr << "Warning: Performance bottleneck condition triggered due to high value of n or m!" << endl;
        abort();
    }
}

void check_balance_invariant(long long n, long long m) {
    if (n > 500000 && m > 500000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large values of both n and m!" << endl;
        abort();
    }
}

void check_large_search_invariant(long long queueSize1, long long queueSize2) {
    if (queueSize1 > 400000 && queueSize2 > 400000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large search space in queues!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    long long n, m;
    cin >> n >> m;

    // Check for high values of n or m before the main loops
    check_high_value_invariant(n, m);
    
    if (n == 0) {
        cout << 3 * m << endl;
        return 0;
    }
    if (m == 0) {
        cout << 2 * n << endl;
        return 0;
    }

    long long u = 2, v = 3;
    priority_queue<long long> pq1, pq2;

    // Check for balance between n and m
    check_balance_invariant(n, m);

    while (1) {
        if (u % 6 == 0) {
            u += 2;
            continue;
        } else {
            pq1.push(u);
            u += 2;
            n--;
        }
        if (n <= 0) break;
    }
    
    while (1) {
        if (v % 6 == 0) {
            v += 3;
            continue;
        } else {
            pq2.push(v);
            v += 3;
            m--;
        }
        if (m <= 0) break;
    }

    long long w = 6;

    // Check for large search space after filling the queues
    check_large_search_invariant(pq1.size(), pq2.size());

    while (1) {
        u = pq1.top();
        v = pq2.top();
        if (w > u && w > v) break;
        if (u > v) {
            pq1.pop();
            pq1.push(w);
            w += 6;
        } else {
            pq2.pop();
            pq2.push(w);
            w += 6;
        }
    }

    cout << max(pq1.top(), pq2.top()) << endl;
    return 0;
}
```

### Comments on Integration
- **Positioning of Checks:** Each invariant check is placed before loops or major computations begin to avoid adding overhead within tight loops.
- **Checker Functions:** Each checker is defined as a separate function to encapsulate the logic cleanly and maintain readability.
- **Thresholds:** The thresholds for checks are chosen to be significantly large but still below the maximum, ensuring detection of performance bottlenecks without premature termination in typical use cases.

