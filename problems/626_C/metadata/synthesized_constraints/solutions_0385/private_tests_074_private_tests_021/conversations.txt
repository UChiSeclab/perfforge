system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Students in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.

The students don’t want to use too many blocks, but they also want to be unique, so no two students’ towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.

Input

The first line of the input contains two space-separated integers n and m (0 ≤ n, m ≤ 1 000 000, n + m > 0) — the number of students using two-block pieces and the number of students using three-block pieces, respectively.

Output

Print a single integer, denoting the minimum possible height of the tallest tower.

Examples

Input

1 3


Output

9


Input

3 2


Output

8


Input

5 0


Output

10

Note

In the first case, the student using two-block pieces can make a tower of height 4, and the students using three-block pieces can make towers of height 3, 6, and 9 blocks. The tallest tower has a height of 9 blocks.

In the second case, the students can make towers of heights 2, 4, and 8 with two-block pieces and towers of heights 3 and 6 with three-block pieces, for a maximum height of 8 blocks.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, m, an, maxh, ans1, ans2, i;
map<long long, long long> mp;
long long s;
int main() {
  std::ios_base::sync_with_stdio(false);
  cin >> n >> m;
  ans1 = 0;
  ans2 = 0;
  mp[0] = 1;
  while (n != 0 && m != 0) {
    long long b1 = ans1, b2 = ans2;
    while (mp[ans1] == 1) ans1 += 2;
    while (mp[ans2] == 1) ans2 += 3;
    if (ans1 < ans2) {
      mp[ans1] = 1, n--, ans2 = b2;
    } else if (ans1 == ans2) {
      if (n <= m) {
        mp[ans2] = 1, m--, ans1 = b1;
      } else {
        mp[ans1] = 1, n--, ans2 = b2;
      }
    } else {
      mp[ans2] = 1, m--, ans1 = b1;
    }
  }
  while (n != 0) {
    while (mp[ans1] == 1) ans1 += 2;
    mp[ans1] = 1;
    n--;
  }
  while (m != 0) {
    while (mp[ans2] == 1) ans2 += 3;
    mp[ans2] = 1;
    m--;
  }
  cout << max(ans1, ans2);
  ;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1000000


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m, an, maxh, ans1, ans2, i; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
map<long long, long long> mp; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long s; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  std::ios_base::sync_with_stdio(false); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  ans1 = 0; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  ans2 = 0; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  mp[0] = 1; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  while (n != 0 && m != 0) { /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
    long long b1 = ans1, b2 = ans2; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
    while (mp[ans1] == 1) ans1 += 2; /* line 14 slow_hit_count: 2, fast_hit_count: 2 */
    while (mp[ans2] == 1) ans2 += 3; /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
    if (ans1 < ans2) { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
      mp[ans1] = 1, n--, ans2 = b2; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
    } else if (ans1 == ans2) { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      if (n <= m) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
        mp[ans2] = 1, m--, ans1 = b1; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
        mp[ans1] = 1, n--, ans2 = b2; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      mp[ans2] = 1, m--, ans1 = b1; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  while (n != 0) { /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
    while (mp[ans1] == 1) ans1 += 2; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    mp[ans1] = 1; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    n--; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  while (m != 0) { /* line 33 slow_hit_count: 1000001, fast_hit_count: 2 */
    while (mp[ans2] == 1) ans2 += 3; /* line 34 slow_hit_count: 2000000, fast_hit_count: 2 */
    mp[ans2] = 1; /* line 35 slow_hit_count: 1000000, fast_hit_count: 1 */
    m--; /* line 36 slow_hit_count: 1000000, fast_hit_count: 1 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  cout << max(ans1, ans2); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the issue of performance bottlenecks in the provided C program, we will first analyze the given code and the hit count information to identify the segments that become inefficient and lead to slowdown. Then, we will derive performance-characterizing invariants to explain these conditions in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Analysis of Hit Counts:
1. **Line 33:** This `while (m != 0)` loop has a very high hit count of 1,000,001 in the slow input, compared to just 2 in the fast input. This indicates that the loop execution is a significant factor in the slowdown.
   
2. **Line 34:** Inside the loop, the nested `while (mp[ans2] == 1) ans2 += 3;` has the highest hit count at 2,000,000 for the slow input. This nested loop appears to be the primary contributor to the slowdown, as it involves repeatedly checking and updating the `ans2` value until a unique height is found for the students using three-block pieces.

3. **Lines 35 and 36:** These lines are executed 1,000,000 times for the slow input, which corresponds to the decrement of `m` and updating the map to mark the used heights.

#### Interaction with Data Structures:
- The `map<long long, long long> mp` is being used to keep track of which tower heights have already been assigned, effectively functioning like a set. The frequent checking and updating of this map in line 34 lead to performance issues as it involves linear search operations due to the repeated adjustments of `ans2`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive performance-characterizing invariants in natural language that capture the conditions leading to slow execution:

1. **Invariant - High Frequency of Adjustments:**
   - **Natural Language Description:** "When there is a large number of students using pieces of three blocks, the program may repeatedly search for unique tower heights, leading to a high frequency of adjustments and checks in the map. This behavior is particularly pronounced when there is substantial overlap or conflict in the desired tower heights."
   - **Explanation:** The slowdown occurs due to repeatedly finding a unique height for each student using three-block pieces, which involves adjusting the candidate height (`ans2`) multiple times (often doubling the intended operations). This scenario is especially problematic when `m` is significantly larger compared to `n`, causing more iterations to resolve height conflicts.

2. **Invariant - Imbalance Between Two-Block and Three-Block Users:**
   - **Natural Language Description:** "If the number of students using three-block pieces is significantly higher than those using two-block pieces, the computation of unique tower heights can become expensive due to increased inner loop iterations seeking non-overlapping heights."
   - **Explanation:** With a much larger `m`, the loop for three-block pieces runs extensively, leading to a substantial number of operations to resolve unique block usage. This scenario leads to a high branching factor in the loop, exacerbating the slowdown.

3. **Invariant - Exhaustion of Available Heights:**
   - **Natural Language Description:** "If the program quickly exhausts available unique tower heights due to a dense assignment of initial values, it may result in repeated attempts to find the next valid height, significantly slowing down the process."
   - **Explanation:** As the map fills up with assigned heights, the likelihood of hitting already used heights increases, leading to additional iterations in the nested `while` loop. This behavior is exacerbated with larger inputs, particularly when `m` is large.

These invariants provide a high-level understanding of the conditions under which the program exhibits performance bottlenecks, avoiding specific numeric thresholds and focusing on the structural interactions of input sizes and data operations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Students in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.

The students don’t want to use too many blocks, but they also want to be unique, so no two students’ towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.

Input

The first line of the input contains two space-separated integers n and m (0 ≤ n, m ≤ 1 000 000, n + m > 0) — the number of students using two-block pieces and the number of students using three-block pieces, respectively.

Output

Print a single integer, denoting the minimum possible height of the tallest tower.

Examples

Input

1 3


Output

9


Input

3 2


Output

8


Input

5 0


Output

10

Note

In the first case, the student using two-block pieces can make a tower of height 4, and the students using three-block pieces can make towers of height 3, 6, and 9 blocks. The tallest tower has a height of 9 blocks.

In the second case, the students can make towers of heights 2, 4, and 8 with two-block pieces and towers of heights 3 and 6 with three-block pieces, for a maximum height of 8 blocks.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, we can now translate those into C++ checker code to be inserted into the original program. Below are the checkers for the identified conditions:

1. **Checker for High Frequency of Adjustments:**

```cpp
void check_high_frequency_adjustments(long long m, long long ans2) {
    if (m > 10000 && ans2 > 10000) { // Thresholds are arbitrary and based on observation
        cerr << "Warning: High frequency of adjustments detected!" << endl;
        abort();
    }
}
```

2. **Checker for Imbalance Between Two-Block and Three-Block Users:**

```cpp
void check_imbalance(long long n, long long m) {
    if (m > n * 10) { // Arbitrary threshold to indicate imbalance
        cerr << "Warning: Imbalance in number of users detected!" << endl;
        abort();
    }
}
```

3. **Checker for Exhaustion of Available Heights:**

```cpp
void check_exhaustion_of_heights(long long ans2, long long limit) {
    if (ans2 > limit) { // Arbitrary limit based on observation
        cerr << "Warning: Exhaustion of available heights detected!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into Original Program

Now, let's integrate these checks into the original C++ program to monitor for potential performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for high frequency of adjustments among students using three-block pieces
void check_high_frequency_adjustments(long long m, long long ans2) {
    if (m > 10000 && ans2 > 10000) { // Thresholds are arbitrary and based on observation
        cerr << "Warning: High frequency of adjustments detected!" << endl;
        abort();
    }
}

// Checker for imbalance between two-block and three-block users
void check_imbalance(long long n, long long m) {
    if (m > n * 10) { // Arbitrary threshold to indicate imbalance
        cerr << "Warning: Imbalance in number of users detected!" << endl;
        abort();
    }
}

// Checker for exhaustion of available heights
void check_exhaustion_of_heights(long long ans2, long long limit) {
    if (ans2 > limit) { // Arbitrary limit based on observation
        cerr << "Warning: Exhaustion of available heights detected!" << endl;
        abort();
    }
}

int main() {
    std::ios_base::sync_with_stdio(false);
    cin >> n >> m;

    // Insert checker for imbalance immediately after reading input
    check_imbalance(n, m);

    ans1 = 0;
    ans2 = 0;
    mp[0] = 1;

    while (n != 0 && m != 0) {
        long long b1 = ans1, b2 = ans2;
        while (mp[ans1] == 1) ans1 += 2;
        while (mp[ans2] == 1) ans2 += 3;

        // Insert check for high frequency of adjustments during calculation
        check_high_frequency_adjustments(m, ans2);

        if (ans1 < ans2) {
            mp[ans1] = 1, n--, ans2 = b2;
        } else if (ans1 == ans2) {
            if (n <= m) {
                mp[ans2] = 1, m--, ans1 = b1;
            } else {
                mp[ans1] = 1, n--, ans2 = b2;
            }
        } else {
            mp[ans2] = 1, m--, ans1 = b1;
        }
    }
    
    while (n != 0) {
        while (mp[ans1] == 1) ans1 += 2;
        mp[ans1] = 1;
        n--;
    }
    
    while (m != 0) {
        check_exhaustion_of_heights(ans2, 100000); // Check before updating ans2
        while (mp[ans2] == 1) ans2 += 3;
        mp[ans2] = 1;
        m--;
    }

    cout << max(ans1, ans2);
    return 0;
}
```

In this integration, the checks are strategically placed:
- **Imbalance Check:** Immediately after reading inputs to identify potential imbalance issues early.
- **High Frequency Adjustment Check:** Inside the main loop where adjustments are taking place to catch repetitive operations.
- **Exhaustion Check:** Before updating `ans2` to ensure heights are not overly exhausted.

These checks are designed to help detect and diagnose performance bottlenecks efficiently without incurring significant runtime overhead.

