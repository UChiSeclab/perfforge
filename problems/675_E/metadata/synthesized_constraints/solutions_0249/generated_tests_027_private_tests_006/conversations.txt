system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya commutes by train every day. There are n train stations in the city, and at the i-th station it's possible to buy only tickets to stations from i + 1 to ai inclusive. No tickets are sold at the last station.

Let ρi, j be the minimum number of tickets one needs to buy in order to get from stations i to station j. As Vasya is fond of different useless statistic he asks you to compute the sum of all values ρi, j among all pairs 1 ≤ i < j ≤ n.

Input

The first line of the input contains a single integer n (2 ≤ n ≤ 100 000) — the number of stations.

The second line contains n - 1 integer ai (i + 1 ≤ ai ≤ n), the i-th of them means that at the i-th station one may buy tickets to each station from i + 1 to ai inclusive.

Output

Print the sum of ρi, j among all pairs of 1 ≤ i < j ≤ n.

Examples

Input

4
4 4 4


Output

6


Input

5
2 3 5 5


Output

17

Note

In the first sample it's possible to get from any station to any other (with greater index) using only one ticket. The total number of pairs is 6, so the answer is also 6.

Consider the second sample: 

  * ρ1, 2 = 1
  * ρ1, 3 = 2
  * ρ1, 4 = 3
  * ρ1, 5 = 3
  * ρ2, 3 = 1
  * ρ2, 4 = 2
  * ρ2, 5 = 2
  * ρ3, 4 = 1
  * ρ3, 5 = 1
  * ρ4, 5 = 1



Thus the answer equals 1 + 2 + 3 + 3 + 1 + 2 + 2 + 1 + 1 + 1 = 17.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MAXN = 100005;
const int LOG = 20;
int a[MAXN];
long long dp[MAXN];
pair<long long, int> spt[MAXN][LOG];
int lg[MAXN];
int n;
void fast_io() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
}
pair<long long, int> RMQ(int lx, int rx) {
  int j = lg[rx - lx + 1];
  return max(spt[lx][j], spt[rx - (1 << j) + 1][j]);
}
int main() {
  fast_io();
  cin >> n;
  for (int i = 1; i < n; i++) {
    cin >> a[i];
  }
  for (int i = 2; i < MAXN; i++) {
    lg[i] = 1 + lg[i >> 1];
  }
  for (int i = 1; i <= n; i++) {
    spt[i][0] = make_pair(a[i], -i);
  }
  for (int j = 1; j <= lg[n]; j++) {
    for (int i = 1; i + (1 << j) < MAXN; i++)
      spt[i][j] = max(spt[i][j - 1], spt[i + (1 << (j - 1))][j - 1]);
  }
  long long ans = 0;
  for (int i = n - 1; i >= 1; i--) {
    pair<long long, int> q = RMQ(i + 1, a[i]);
    q.second *= -1;
    dp[i] = (n + q.second) - (a[i] + i) + dp[q.second];
    ans += dp[i];
  }
  printf("%lld\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8
3 3 7 8 7 7 8


(G.2) Fast Input

3
3 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 100005; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int LOG = 20; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int a[MAXN]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[MAXN]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
pair<long long, int> spt[MAXN][LOG]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int lg[MAXN]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
void fast_io() { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
pair<long long, int> RMQ(int lx, int rx) { /* line 14 slow_hit_count: 7, fast_hit_count: 2 */
  int j = lg[rx - lx + 1]; /* line 15 slow_hit_count: 7, fast_hit_count: 2 */
  return max(spt[lx][j], spt[rx - (1 << j) + 1][j]); /* line 16 slow_hit_count: 7, fast_hit_count: 2 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  fast_io(); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < n; i++) { /* line 21 slow_hit_count: 8, fast_hit_count: 3 */
    cin >> a[i]; /* line 22 slow_hit_count: 7, fast_hit_count: 2 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 2; i < MAXN; i++) { /* line 24 slow_hit_count: 100004, fast_hit_count: 100004 */
    lg[i] = 1 + lg[i >> 1]; /* line 25 slow_hit_count: 100003, fast_hit_count: 100003 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 27 slow_hit_count: 9, fast_hit_count: 4 */
    spt[i][0] = make_pair(a[i], -i); /* line 28 slow_hit_count: 8, fast_hit_count: 3 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  for (int j = 1; j <= lg[n]; j++) { /* line 30 slow_hit_count: 4, fast_hit_count: 2 */
    for (int i = 1; i + (1 << j) < MAXN; i++) /* line 31 slow_hit_count: 300001, fast_hit_count: 100003 */
      spt[i][j] = max(spt[i][j - 1], spt[i + (1 << (j - 1))][j - 1]); /* line 32 slow_hit_count: 299998, fast_hit_count: 100002 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = n - 1; i >= 1; i--) { /* line 35 slow_hit_count: 8, fast_hit_count: 3 */
    pair<long long, int> q = RMQ(i + 1, a[i]); /* line 36 slow_hit_count: 7, fast_hit_count: 2 */
    q.second *= -1; /* line 37 slow_hit_count: 7, fast_hit_count: 2 */
    dp[i] = (n + q.second) - (a[i] + i) + dp[q.second]; /* line 38 slow_hit_count: 7, fast_hit_count: 2 */
    ans += dp[i]; /* line 39 slow_hit_count: 7, fast_hit_count: 2 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", ans); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To determine why the given C program runs slowly for the "slow" input, we need to analyze the hit count information and identify which sections of the code are executed significantly more often with the slow input, leading to performance degradation. We can then derive performance-characterizing invariants based on these findings.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**
   - The loop on lines 24-25 shows high hit counts for both fast and slow inputs because it precomputes logarithms up to the maximum constraint. This is expected and doesn't directly cause the slowdown.
   - The nested loop structure starting at line 30 has significantly higher hit counts for the slow input, with line 31-32 being executed 300001 times for the slow input versus 100003 times for the fast input.
   - The loop on lines 35-39 also has higher hit counts in the slow input, with critical hits seen at line 36, where the `RMQ` function is called.

2. **Function Analysis:**
   - The `RMQ` function is called for different index ranges more frequently in the slow input (7 times vs. 2 times), suggesting that the calculation of the range maximum queries is a potential bottleneck.

3. **Data Interaction:**
   - The Sparse Table (`spt`) and the dynamic programming table (`dp`) are used heavily, with the RMQ function performing range maximum queries that result in repeated calculations.
   - These calculations are particularly expensive when the destination station `a[i]` allows tickets all the way to the last station (maximized reach), forcing more comparisons and updates in the `dp` table.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations, we can derive the following performance-characterizing invariants:

1. **Sparse Table Construction:**
   - **Invariant:** "When `n` is large and the range of stations a[i] frequently allows tickets to the end, the construction and querying over the sparse table become expensive."
   - **Explanation:** The repeated construction of maximum queries and updates over potentially long ranges leads to extensive use of nested loops, significantly increasing execution time.

2. **Dynamic Programming Updates:**
   - **Invariant:** "When `a[i]` values allow reaching further stations, especially towards `n`, the range queries for dynamic programming updates are extensive, leading to increased processing time."
   - **Explanation:** When many stations have a high reach (e.g., `a[i]` is consistently near `n`), the `dp` array requires more complex updates, causing the slowdown.

3. **RMQ Calls:**
   - **Invariant:** "Frequent and overlapping calls to the RMQ function with large range differences increase the computational load, slowing the program."
   - **Explanation:** If the RMQ function is called repeatedly with large and overlapping ranges, it indicates costly maximum queries that are a key point of inefficiency.

By understanding these performance invariants, developers can focus on optimizing the range query handling or restructuring the computation to minimize expensive operations. This insight can guide both manual optimizations and the design of automatic heuristics for detecting slowdowns in similar contexts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya commutes by train every day. There are n train stations in the city, and at the i-th station it's possible to buy only tickets to stations from i + 1 to ai inclusive. No tickets are sold at the last station.

Let ρi, j be the minimum number of tickets one needs to buy in order to get from stations i to station j. As Vasya is fond of different useless statistic he asks you to compute the sum of all values ρi, j among all pairs 1 ≤ i < j ≤ n.

Input

The first line of the input contains a single integer n (2 ≤ n ≤ 100 000) — the number of stations.

The second line contains n - 1 integer ai (i + 1 ≤ ai ≤ n), the i-th of them means that at the i-th station one may buy tickets to each station from i + 1 to ai inclusive.

Output

Print the sum of ρi, j among all pairs of 1 ≤ i < j ≤ n.

Examples

Input

4
4 4 4


Output

6


Input

5
2 3 5 5


Output

17

Note

In the first sample it's possible to get from any station to any other (with greater index) using only one ticket. The total number of pairs is 6, so the answer is also 6.

Consider the second sample: 

  * ρ1, 2 = 1
  * ρ1, 3 = 2
  * ρ1, 4 = 3
  * ρ1, 5 = 3
  * ρ2, 3 = 1
  * ρ2, 4 = 2
  * ρ2, 5 = 2
  * ρ3, 4 = 1
  * ρ3, 5 = 1
  * ρ4, 5 = 1



Thus the answer equals 1 + 2 + 3 + 3 + 1 + 2 + 2 + 1 + 1 + 1 = 17.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived in Phase 2, here are the C++ code snippets implementing these invariants as runtime checks:

```cpp
void check_sparse_table_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Sparse Table construction or querying is potentially expensive!" << endl;
        abort();
    }
}

void check_dp_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Dynamic programming updates are extensive for large ranges!" << endl;
        abort();
    }
}

void check_rmq_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: RMQ function is called with large and overlapping ranges!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checks into the Original C++ Code

Below is the instrumented C++ code with the checks integrated at appropriate points in the program:

```cpp
#include <bits/stdc++.h>
using namespace std;

const int MAXN = 100005;
const int LOG = 20;
int a[MAXN];
long long dp[MAXN];
pair<long long, int> spt[MAXN][LOG];
int lg[MAXN];
int n;

void fast_io() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
}

pair<long long, int> RMQ(int lx, int rx) {
    int j = lg[rx - lx + 1];
    return max(spt[lx][j], spt[rx - (1 << j) + 1][j]);
}

void check_sparse_table_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Sparse Table construction or querying is potentially expensive!" << endl;
        abort();
    }
}

void check_dp_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Dynamic programming updates are extensive for large ranges!" << endl;
        abort();
    }
}

void check_rmq_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: RMQ function is called with large and overlapping ranges!" << endl;
        abort();
    }
}

int main() {
    fast_io();
    cin >> n;
    for (int i = 1; i < n; i++) {
        cin >> a[i];
    }
    
    // Check for sparse table construction potential bottleneck
    check_sparse_table_invariant(n > 1000 && all_of(a + 1, a + n, [n](int ai) { return ai >= n - 1; }));

    for (int i = 2; i < MAXN; i++) {
        lg[i] = 1 + lg[i >> 1];
    }
    for (int i = 1; i <= n; i++) {
        spt[i][0] = make_pair(a[i], -i);
    }
    for (int j = 1; j <= lg[n]; j++) {
        for (int i = 1; i + (1 << j) < MAXN; i++)
            spt[i][j] = max(spt[i][j - 1], spt[i + (1 << (j - 1))][j - 1]);
    }

    long long ans = 0;
    for (int i = n - 1; i >= 1; i--) {
        pair<long long, int> q = RMQ(i + 1, a[i]);
        q.second *= -1;
        
        // Check for dynamic programming updates bottleneck
        check_dp_invariant(a[i] >= n - 1);

        dp[i] = (n + q.second) - (a[i] + i) + dp[q.second];
        ans += dp[i];
    }

    // Check for RMQ function being a bottleneck
    check_rmq_invariant(n > 1000 && any_of(a + 1, a + n, [n](int ai) { return ai >= n - 1; }));

    printf("%lld\n", ans);
    return 0;
}
```

### Explanation
- **Sparse Table Invariant:** Placed after input reading to check if the input size and range allowance could lead to expensive Sparse Table operations.
- **Dynamic Programming Invariant:** Placed in the loop where `dp` is updated to catch expensive updates due to extensive range queries.
- **RMQ Invariant:** Placed after relevant computations to detect if RMQ calls are frequent and overlapping for large ranges.

These checks aim to signal potential bottlenecks without significantly impacting the runtime of normal execution paths.

