system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Hexadecimal likes drawing. She has drawn many graphs already, both directed and not. Recently she has started to work on a still-life «interesting graph and apples». An undirected graph is called interesting, if each of its vertices belongs to one cycle only — a funny ring — and does not belong to any other cycles. A funny ring is a cycle that goes through all the vertices just once. Moreover, loops are funny rings too.

She has already drawn the apples and some of the graph edges. But now it is not clear, how to connect the rest of the vertices to get an interesting graph as a result. The answer should contain the minimal amount of added edges. And furthermore, the answer should be the lexicographically smallest one. The set of edges (x1, y1), (x2, y2), ..., (xn, yn), where xi ≤ yi, is lexicographically smaller than the set (u1, v1), (u2, v2), ..., (un, vn), where ui ≤ vi, provided that the sequence of integers x1, y1, x2, y2, ..., xn, yn is lexicographically smaller than the sequence u1, v1, u2, v2, ..., un, vn. If you do not cope, Hexadecimal will eat you. ...eat you alive.

Input

The first line of the input data contains a pair of integers n and m (1 ≤ n ≤ 50, 0 ≤ m ≤ 2500) — the amount of vertices and edges respectively. The following lines contain pairs of numbers xi and yi (1 ≤ xi, yi ≤ n) — the vertices that are already connected by edges. The initial graph may contain multiple edges and loops.

Output

In the first line output «YES» or «NO»: if it is possible or not to construct an interesting graph. If the answer is «YES», in the second line output k — the amount of edges that should be added to the initial graph. Finally, output k lines: pairs of vertices xj and yj, between which edges should be drawn. The result may contain multiple edges and loops. k can be equal to zero.

Examples

Input

3 2
1 2
2 3


Output

YES
1
1 3

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const double PI = acos(-1.0);
const int MN = 55;
int lab[MN], n, m, qu[MN];
pair<int, int> e[MN * MN];
vector<int> ke[MN];
bool mark[MN];
vector<pair<int, int> > ls;
vector<int> zero;
bool check() {
  for (int i = (1), _b = (n); i <= _b; i++) ke[i].clear();
  for (int i = (1), _b = (m); i <= _b; i++) {
    ke[e[i].first].push_back(e[i].second);
    ke[e[i].second].push_back(e[i].first);
  }
  if (m != n) return false;
  memset(mark, false, sizeof mark);
  int first = 1, last = 1;
  qu[1] = 1;
  mark[1] = true;
  while (first <= last) {
    int u = qu[first++];
    for (int i = 0, _a = (ke[u].size()); i < _a; i++) {
      int v = ke[u][i];
      if (mark[v]) continue;
      qu[++last] = v;
      mark[v] = true;
    }
  }
  if (last != n) return false;
  for (int i = (1), _b = (n); i <= _b; i++)
    if (ke[i].size() != 2) return false;
  return true;
}
int getRoot(int u) {
  if (lab[u] < 0)
    return u;
  else
    return lab[u] = getRoot(lab[u]);
}
void merge(int u, int v) {
  int x = lab[u] + lab[v];
  if (lab[u] < lab[v]) {
    lab[u] = x;
    lab[v] = u;
  } else {
    lab[v] = x;
    lab[u] = v;
  }
}
vector<pair<int, int> > res;
int deg[MN];
bool can() {
  if (check()) return true;
  bool ok = true;
  memset(deg, 0, sizeof deg);
  memset(lab, -1, sizeof lab);
  for (int i = (1), _b = (m); i <= _b; i++) {
    int u = e[i].first, v = e[i].second;
    ++deg[u];
    ++deg[v];
    u = getRoot(u);
    v = getRoot(v);
    if (u == v) {
      ok = false;
      break;
    }
    merge(u, v);
  }
  for (int i = (1), _b = (n); i <= _b; i++)
    if (deg[i] > 2) {
      ok = false;
      break;
    }
  return ok;
}
int main() {
  while (scanf("%d%d", &n, &m) == 2) {
    if (n == 1 && m == 0) {
      puts("YES");
      puts("1");
      puts("1 1");
      continue;
    }
    res.clear();
    for (int i = (1), _b = (n); i <= _b; i++) {
      ke[i].clear();
    }
    for (int i = (1), _b = (m); i <= _b; i++) {
      scanf("%d%d", &e[i].first, &e[i].second);
    }
    if (check()) {
      puts("YES");
      puts("0");
      continue;
    }
    if (!can()) {
      puts("NO");
      continue;
    }
    puts("YES");
    printf("%d\n", n - m);
    int need = n - m;
    for (int turn = (1), _b = (need); turn <= _b; turn++) {
      bool ok = false;
      for (int u = (1), _b = (n); u <= _b; u++) {
        for (int v = (u + 1), _b = (n); v <= _b; v++) {
          ++m;
          e[m] = make_pair(u, v);
          if (can()) {
            ok = true;
            break;
          } else
            --m;
        }
        if (ok) break;
      }
      printf("%d %d\n", e[m].first, e[m].second);
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50 1
2 3


(G.2) Fast Input

2 1
2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const double PI = acos(-1.0); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int MN = 55; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int lab[MN], n, m, qu[MN]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
pair<int, int> e[MN * MN]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> ke[MN]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
bool mark[MN]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int> > ls; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> zero; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
bool check() { /* line 11 slow_hit_count: 39250, fast_hit_count: 2 */
  for (int i = (1), _b = (n); i <= _b; i++) ke[i].clear(); /* line 12 slow_hit_count: 2001750, fast_hit_count: 6 */
  for (int i = (1), _b = (m); i <= _b; i++) { /* line 13 slow_hit_count: 1310704, fast_hit_count: 4 */
    ke[e[i].first].push_back(e[i].second); /* line 14 slow_hit_count: 1271454, fast_hit_count: 2 */
    ke[e[i].second].push_back(e[i].first); /* line 15 slow_hit_count: 1271454, fast_hit_count: 2 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  if (m != n) return false; /* line 17 slow_hit_count: 39250, fast_hit_count: 2 */
  memset(mark, false, sizeof mark); /* line 18 slow_hit_count: 1225, fast_hit_count: 0 */
  int first = 1, last = 1; /* line 19 slow_hit_count: 1225, fast_hit_count: 0 */
  qu[1] = 1; /* line 20 slow_hit_count: 1225, fast_hit_count: 0 */
  mark[1] = true; /* line 21 slow_hit_count: 1225, fast_hit_count: 0 */
  while (first <= last) { /* line 22 slow_hit_count: 62475, fast_hit_count: 0 */
    int u = qu[first++]; /* line 23 slow_hit_count: 61250, fast_hit_count: 0 */
    for (int i = 0, _a = (ke[u].size()); i < _a; i++) { /* line 24 slow_hit_count: 183750, fast_hit_count: 0 */
      int v = ke[u][i]; /* line 25 slow_hit_count: 122500, fast_hit_count: 0 */
      if (mark[v]) continue; /* line 26 slow_hit_count: 122500, fast_hit_count: 0 */
      qu[++last] = v; /* line 27 slow_hit_count: 60025, fast_hit_count: 0 */
      mark[v] = true; /* line 28 slow_hit_count: 60025, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  if (last != n) return false; /* line 31 slow_hit_count: 1225, fast_hit_count: 0 */
  for (int i = (1), _b = (n); i <= _b; i++) /* line 32 slow_hit_count: 20827, fast_hit_count: 0 */
    if (ke[i].size() != 2) return false; /* line 33 slow_hit_count: 20826, fast_hit_count: 0 */
  return true; /* line 34 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
int getRoot(int u) { /* line 36 slow_hit_count: 3754380, fast_hit_count: 2 */
  if (lab[u] < 0) /* line 37 slow_hit_count: 3754380, fast_hit_count: 2 */
    return u; /* line 38 slow_hit_count: 2542806, fast_hit_count: 2 */
  else /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    return lab[u] = getRoot(lab[u]); /* line 40 slow_hit_count: 1211574, fast_hit_count: 0 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
void merge(int u, int v) { /* line 42 slow_hit_count: 1250581, fast_hit_count: 0 */
  int x = lab[u] + lab[v]; /* line 43 slow_hit_count: 1250581, fast_hit_count: 0 */
  if (lab[u] < lab[v]) { /* line 44 slow_hit_count: 1250581, fast_hit_count: 0 */
    lab[u] = x; /* line 45 slow_hit_count: 1172086, fast_hit_count: 0 */
    lab[v] = u; /* line 46 slow_hit_count: 1172086, fast_hit_count: 0 */
  } else { /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    lab[v] = x; /* line 48 slow_hit_count: 78495, fast_hit_count: 0 */
    lab[u] = v; /* line 49 slow_hit_count: 78495, fast_hit_count: 0 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 51 slow_hit_count: 1250581, fast_hit_count: 0 */
vector<pair<int, int> > res; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
int deg[MN]; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
bool can() { /* line 54 slow_hit_count: 39249, fast_hit_count: 1 */
  if (check()) return true; /* line 55 slow_hit_count: 39249, fast_hit_count: 1 */
  bool ok = true; /* line 56 slow_hit_count: 39248, fast_hit_count: 1 */
  memset(deg, 0, sizeof deg); /* line 57 slow_hit_count: 39248, fast_hit_count: 1 */
  memset(lab, -1, sizeof lab); /* line 58 slow_hit_count: 39248, fast_hit_count: 1 */
  for (int i = (1), _b = (m); i <= _b; i++) { /* line 59 slow_hit_count: 1289829, fast_hit_count: 1 */
    int u = e[i].first, v = e[i].second; /* line 60 slow_hit_count: 1271403, fast_hit_count: 1 */
    ++deg[u]; /* line 61 slow_hit_count: 1271403, fast_hit_count: 1 */
    ++deg[v]; /* line 62 slow_hit_count: 1271403, fast_hit_count: 1 */
    u = getRoot(u); /* line 63 slow_hit_count: 1271403, fast_hit_count: 1 */
    v = getRoot(v); /* line 64 slow_hit_count: 1271403, fast_hit_count: 1 */
    if (u == v) { /* line 65 slow_hit_count: 1271403, fast_hit_count: 1 */
      ok = false; /* line 66 slow_hit_count: 20822, fast_hit_count: 1 */
      break; /* line 67 slow_hit_count: 20822, fast_hit_count: 1 */
    } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
    merge(u, v); /* line 69 slow_hit_count: 1250581, fast_hit_count: 0 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = (1), _b = (n); i <= _b; i++) /* line 71 slow_hit_count: 504649, fast_hit_count: 3 */
    if (deg[i] > 2) { /* line 72 slow_hit_count: 504553, fast_hit_count: 2 */
      ok = false; /* line 73 slow_hit_count: 39152, fast_hit_count: 0 */
      break; /* line 74 slow_hit_count: 39152, fast_hit_count: 0 */
    } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  return ok; /* line 76 slow_hit_count: 39248, fast_hit_count: 1 */
} /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 78 slow_hit_count: 2, fast_hit_count: 2 */
  while (scanf("%d%d", &n, &m) == 2) { /* line 79 slow_hit_count: 2, fast_hit_count: 2 */
    if (n == 1 && m == 0) { /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
      puts("YES"); /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
      puts("1"); /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
      puts("1 1"); /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
      continue; /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
    res.clear(); /* line 86 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = (1), _b = (n); i <= _b; i++) { /* line 87 slow_hit_count: 51, fast_hit_count: 3 */
      ke[i].clear(); /* line 88 slow_hit_count: 50, fast_hit_count: 2 */
    } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = (1), _b = (m); i <= _b; i++) { /* line 90 slow_hit_count: 2, fast_hit_count: 2 */
      scanf("%d%d", &e[i].first, &e[i].second); /* line 91 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
    if (check()) { /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
      puts("YES"); /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
      puts("0"); /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
      continue; /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
    if (!can()) { /* line 98 slow_hit_count: 1, fast_hit_count: 1 */
      puts("NO"); /* line 99 slow_hit_count: 0, fast_hit_count: 1 */
      continue; /* line 100 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
    puts("YES"); /* line 102 slow_hit_count: 1, fast_hit_count: 0 */
    printf("%d\n", n - m); /* line 103 slow_hit_count: 1, fast_hit_count: 0 */
    int need = n - m; /* line 104 slow_hit_count: 1, fast_hit_count: 0 */
    for (int turn = (1), _b = (need); turn <= _b; turn++) { /* line 105 slow_hit_count: 50, fast_hit_count: 0 */
      bool ok = false; /* line 106 slow_hit_count: 49, fast_hit_count: 0 */
      for (int u = (1), _b = (n); u <= _b; u++) { /* line 107 slow_hit_count: 1224, fast_hit_count: 0 */
        for (int v = (u + 1), _b = (n); v <= _b; v++) { /* line 108 slow_hit_count: 40423, fast_hit_count: 0 */
          ++m; /* line 109 slow_hit_count: 39248, fast_hit_count: 0 */
          e[m] = make_pair(u, v); /* line 110 slow_hit_count: 39248, fast_hit_count: 0 */
          if (can()) { /* line 111 slow_hit_count: 39248, fast_hit_count: 0 */
            ok = true; /* line 112 slow_hit_count: 49, fast_hit_count: 0 */
            break; /* line 113 slow_hit_count: 49, fast_hit_count: 0 */
          } else /* line 114 slow_hit_count: 0, fast_hit_count: 0 */
            --m; /* line 115 slow_hit_count: 39199, fast_hit_count: 0 */
        } /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
        if (ok) break; /* line 117 slow_hit_count: 1224, fast_hit_count: 0 */
      } /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
      printf("%d %d\n", e[m].first, e[m].second); /* line 119 slow_hit_count: 49, fast_hit_count: 0 */
    } /* line 120 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 121 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 122 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 123 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

The analysis of the provided code and the line-level hit counts highlights several areas where the slow input runs significantly more iterations compared to the fast input. These areas are likely to be bottlenecks or inefficient operations:

1. **Function `check()` (Lines 11–35):** 
   - This function is called a large number of times, especially for the slow input. Line 13 is hit over a million times, indicating a potentially inefficient graph traversal or check mechanism. A significant amount of looping and manipulation occurs within this function, especially loops over the edges (Lines 12–17) and while loops (Lines 22–30).
   
2. **Function `getRoot()` (Lines 36–41):**
   - Lines 36–40 are heavily hit during the slow input, suggesting a deep or frequent union-find operation. This indicates that the graph likely has a structure causing frequent lookups or path compressions.

3. **Function `can()` (Lines 54–77):**
   - This function is also called many times. It relies on `check()` and `getRoot()`, compounding the inefficiencies in those functions. Line 59, which iterates over edges, is particularly hit a lot, indicating potentially inefficient handling of graph connectivity.

4. **Loop in `main()` (Lines 105–120):**
   - The nested loops here (Lines 107, 108) are executed extensively, leading to repeated calls to `can()` (Line 111). This nested iteration over potential edge pairs is a significant performance drain when coupled with the frequent expensive checks.

## Phase 2: Derive Performance-Characterizing Invariants

Based on the identified code segments and their interactions with the input data, we can derive the following natural language invariants that characterize when the performance slows down:

1. **Invariant on Graph Connectivity Checks:**
   - **Description:** "When the initial graph is sparse and requires many additional edges to form a single cycle covering all vertices, repeated connectivity checks within nested loops significantly slow down the program."
   - **Threshold:** The number of additional edges required approaches `n - m`, where `n` is the number of vertices, indicating that the graph is initially far from being a single cycle.

2. **Invariant on Union-Find Operations:**
   - **Description:** "When there are numerous iterations of union-find operations due to sparse connections, especially requiring frequent path compressions or lookups, the program performance may degrade."
   - **Threshold:** Frequent calls to `getRoot()` suggest a high number of disjoint sets initially, which slows down performance.

3. **Invariant on Edge Iteration and Addition:**
   - **Description:** "If the graph requires iterating over many potential edge pairs to find valid connections that maintain single cycle property, the resulting computational overhead can lead to performance issues."
   - **Threshold:** When `m` is much less than `n-1` (the minimum number of edges needed to connect a graph fully), indicating initial sparseness.

By placing emphasis on these conditions, you can catch scenarios that lead to performance slowdowns without relying on specific numeric input values. These conditions are abstracted to guide future optimizations or debugging efforts when similar performance issues arise.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Hexadecimal likes drawing. She has drawn many graphs already, both directed and not. Recently she has started to work on a still-life «interesting graph and apples». An undirected graph is called interesting, if each of its vertices belongs to one cycle only — a funny ring — and does not belong to any other cycles. A funny ring is a cycle that goes through all the vertices just once. Moreover, loops are funny rings too.

She has already drawn the apples and some of the graph edges. But now it is not clear, how to connect the rest of the vertices to get an interesting graph as a result. The answer should contain the minimal amount of added edges. And furthermore, the answer should be the lexicographically smallest one. The set of edges (x1, y1), (x2, y2), ..., (xn, yn), where xi ≤ yi, is lexicographically smaller than the set (u1, v1), (u2, v2), ..., (un, vn), where ui ≤ vi, provided that the sequence of integers x1, y1, x2, y2, ..., xn, yn is lexicographically smaller than the sequence u1, v1, u2, v2, ..., un, vn. If you do not cope, Hexadecimal will eat you. ...eat you alive.

Input

The first line of the input data contains a pair of integers n and m (1 ≤ n ≤ 50, 0 ≤ m ≤ 2500) — the amount of vertices and edges respectively. The following lines contain pairs of numbers xi and yi (1 ≤ xi, yi ≤ n) — the vertices that are already connected by edges. The initial graph may contain multiple edges and loops.

Output

In the first line output «YES» or «NO»: if it is possible or not to construct an interesting graph. If the answer is «YES», in the second line output k — the amount of edges that should be added to the initial graph. Finally, output k lines: pairs of vertices xj and yj, between which edges should be drawn. The result may contain multiple edges and loops. k can be equal to zero.

Examples

Input

3 2
1 2
2 3


Output

YES
1
1 3

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants as C++ Checkers

Below are the C++ code snippets implementing the performance-characterizing invariants derived in Phase 2:

1. **Invariant on Graph Connectivity Checks:**
   ```cpp
   void check_connectivity_invariant(int n, int m) {
       if (n - m > n / 2) {  // Consider a threshold of half the vertices needing additional edges
           cerr << "Warning: Connectivity invariant triggered - too many edges needed to connect graph" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Union-Find Operations:**
   ```cpp
   void check_union_find_invariant(const vector<int>& lab, int n) {
       int disjointSets = count_if(lab.begin(), lab.begin() + n, [](int x) { return x < 0; });
       if (disjointSets > n / 2) {  // Too many disjoint sets indicating inefficiency
           cerr << "Warning: Union-find invariant triggered - too many disjoint sets" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Edge Iteration and Addition:**
   ```cpp
   void check_edge_iteration_invariant(int n, int m, int loopCounter) {
       if (loopCounter > n * (n - 1) / 2) {  // Threshold based on max possible edges in a complete graph
           cerr << "Warning: Edge iteration invariant triggered - excessive edge checks" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original Code

Below is the final C++ code with integrated checkers placed at effective points to catch performance bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;
const double PI = acos(-1.0);
const int MN = 55;
int lab[MN], n, m, qu[MN];
pair<int, int> e[MN * MN];
vector<int> ke[MN];
bool mark[MN];
vector<pair<int, int> > ls;
vector<int> zero;

void check_connectivity_invariant(int n, int m) {
    if (n - m > n / 2) {
        cerr << "Warning: Connectivity invariant triggered - too many edges needed to connect graph" << endl;
        abort();
    }
}

void check_union_find_invariant(const int lab[], int n) {
    int disjointSets = count_if(lab, lab + n, [](int x) { return x < 0; });
    if (disjointSets > n / 2) {
        cerr << "Warning: Union-find invariant triggered - too many disjoint sets" << endl;
        abort();
    }
}

void check_edge_iteration_invariant(int n, int loopCounter) {
    if (loopCounter > n * (n - 1) / 2) {
        cerr << "Warning: Edge iteration invariant triggered - excessive edge checks" << endl;
        abort();
    }
}

bool check() {
    for (int i = 1; i <= n; i++) ke[i].clear();
    for (int i = 1; i <= m; i++) {
        ke[e[i].first].push_back(e[i].second);
        ke[e[i].second].push_back(e[i].first);
    }
    if (m != n) return false;
    memset(mark, false, sizeof mark);
    int first = 1, last = 1;
    qu[1] = 1;
    mark[1] = true;
    while (first <= last) {
        int u = qu[first++];
        for (int i = 0, _a = ke[u].size(); i < _a; i++) {
            int v = ke[u][i];
            if (mark[v]) continue;
            qu[++last] = v;
            mark[v] = true;
        }
    }
    if (last != n) return false;
    for (int i = 1; i <= n; i++)
        if (ke[i].size() != 2) return false;
    return true;
}

int getRoot(int u) {
    if (lab[u] < 0)
        return u;
    else
        return lab[u] = getRoot(lab[u]);
}

void merge(int u, int v) {
    int x = lab[u] + lab[v];
    if (lab[u] < lab[v]) {
        lab[u] = x;
        lab[v] = u;
    } else {
        lab[v] = x;
        lab[u] = v;
    }
}

vector<pair<int, int> > res;
int deg[MN];

bool can() {
    if (check()) return true;
    bool ok = true;
    memset(deg, 0, sizeof deg);
    memset(lab, -1, sizeof lab);
    for (int i = 1; i <= m; i++) {
        int u = e[i].first, v = e[i].second;
        ++deg[u];
        ++deg[v];
        u = getRoot(u);
        v = getRoot(v);
        if (u == v) {
            ok = false;
            break;
        }
        merge(u, v);
    }

    check_union_find_invariant(lab, n);

    for (int i = 1; i <= n; i++)
        if (deg[i] > 2) {
            ok = false;
            break;
        }
    return ok;
}

int main() {
    while (scanf("%d%d", &n, &m) == 2) {
        if (n == 1 && m == 0) {
            puts("YES");
            puts("1");
            puts("1 1");
            continue;
        }
        res.clear();
        for (int i = 1; i <= n; i++) {
            ke[i].clear();
        }
        for (int i = 1; i <= m; i++) {
            scanf("%d%d", &e[i].first, &e[i].second);
        }

        check_connectivity_invariant(n, m);

        if (check()) {
            puts("YES");
            puts("0");
            continue;
        }
        if (!can()) {
            puts("NO");
            continue;
        }
        puts("YES");
        printf("%d\n", n - m);
        int need = n - m;
        int loopCounter = 0;  // Loop counter for edge iteration

        for (int turn = 1; turn <= need; turn++) {
            bool ok = false;
            for (int u = 1; u <= n; u++) {
                for (int v = u + 1; v <= n; v++) {
                    ++m;
                    e[m] = make_pair(u, v);
                    if (can()) {
                        ok = true;
                        break;
                    } else
                        --m;

                    loopCounter++;
                    check_edge_iteration_invariant(n, loopCounter);
                }
                if (ok) break;
            }
            printf("%d %d\n", e[m].first, e[m].second);
        }
    }
    return 0;
}
```

### Explanation of Inserted Checks:

- **`check_connectivity_invariant`:** Placed after reading input and before any edge additions to ensure that the graph doesn't require excessive connections to remain interesting.
- **`check_union_find_invariant`:** Called within `can()` after union-find operations, detecting too many disjoint sets which imply inefficiency.
- **`check_edge_iteration_invariant`:** Monitors the number of edge checks performed in nested loops to detect excessive operations.

