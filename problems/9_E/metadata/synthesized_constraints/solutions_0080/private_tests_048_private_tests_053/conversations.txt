system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Hexadecimal likes drawing. She has drawn many graphs already, both directed and not. Recently she has started to work on a still-life «interesting graph and apples». An undirected graph is called interesting, if each of its vertices belongs to one cycle only — a funny ring — and does not belong to any other cycles. A funny ring is a cycle that goes through all the vertices just once. Moreover, loops are funny rings too.

She has already drawn the apples and some of the graph edges. But now it is not clear, how to connect the rest of the vertices to get an interesting graph as a result. The answer should contain the minimal amount of added edges. And furthermore, the answer should be the lexicographically smallest one. The set of edges (x1, y1), (x2, y2), ..., (xn, yn), where xi ≤ yi, is lexicographically smaller than the set (u1, v1), (u2, v2), ..., (un, vn), where ui ≤ vi, provided that the sequence of integers x1, y1, x2, y2, ..., xn, yn is lexicographically smaller than the sequence u1, v1, u2, v2, ..., un, vn. If you do not cope, Hexadecimal will eat you. ...eat you alive.

Input

The first line of the input data contains a pair of integers n and m (1 ≤ n ≤ 50, 0 ≤ m ≤ 2500) — the amount of vertices and edges respectively. The following lines contain pairs of numbers xi and yi (1 ≤ xi, yi ≤ n) — the vertices that are already connected by edges. The initial graph may contain multiple edges and loops.

Output

In the first line output «YES» or «NO»: if it is possible or not to construct an interesting graph. If the answer is «YES», in the second line output k — the amount of edges that should be added to the initial graph. Finally, output k lines: pairs of vertices xj and yj, between which edges should be drawn. The result may contain multiple edges and loops. k can be equal to zero.

Examples

Input

3 2
1 2
2 3


Output

YES
1
1 3

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 100;
int deg[N], f[N], n, m;
int find(int x) {
  if (x != f[x]) return f[x] = find(f[x]);
  return x;
}
int main() {
  scanf("%d%d", &n, &m);
  if (n == 1) {
    if (m == 0) {
      puts("YES\n1\n1 1");
      return 0;
    }
    if (m == 1) {
      puts("YES\n0");
      return 0;
    }
    return puts("NO");
  }
  for (int i = 1; i <= n; i++) f[i] = i;
  bool circle = 0;
  for (int i = 1; i <= m; i++) {
    int x, y;
    scanf("%d%d", &x, &y);
    if (find(x) != find(y))
      f[find(x)] = find(y);
    else
      circle = 1;
    deg[x]++;
    deg[y]++;
  }
  for (int i = 1; i <= n; i++)
    if (deg[i] > 2) return puts("NO");
  if (circle && m != n) return puts("NO");
  if (circle) {
    for (int i = 1; i <= n; i++)
      for (int j = i + 1; j <= n; j++)
        if (find(i) != find(j)) return puts("NO");
  }
  puts("YES");
  vector<pair<int, int> > ans;
  while (m != n) {
    m++;
    bool ok = 0;
    for (int i = 1; i <= n && !ok; i++) {
      for (int j = i + 1; j <= n && !ok; j++) {
        if (find(i) != find(j) && deg[i] < 2 && deg[j] < 2) {
          f[find(i)] = find(j);
          deg[i]++;
          deg[j]++;
          ans.push_back(make_pair(i, j));
          ok = 1;
        }
      }
    }
  }
  for (int i = 1; i <= n; i++) {
    for (int j = i + 1; j <= n; j++) {
      if (deg[i] == 1 && deg[j] == 1) {
        ans.push_back(make_pair(i, j));
        deg[i]++;
        deg[j]++;
      }
    }
  }
  printf("%d\n", ans.size());
  for (int i = 0; i < ans.size(); i++) {
    printf("%d %d\n", ans[i].first, ans[i].second);
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50 1
2 3


(G.2) Fast Input

2 1
2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 100; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int deg[N], f[N], n, m; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int find(int x) { /* line 5 slow_hit_count: 138667, fast_hit_count: 2 */
  if (x != f[x]) return f[x] = find(f[x]); /* line 6 slow_hit_count: 138667, fast_hit_count: 2 */
  return x; /* line 7 slow_hit_count: 78596, fast_hit_count: 2 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &m); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  if (n == 1) { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
    if (m == 0) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
      puts("YES\n1\n1 1"); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 14 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    if (m == 1) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
      puts("YES\n0"); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    return puts("NO"); /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) f[i] = i; /* line 22 slow_hit_count: 51, fast_hit_count: 3 */
  bool circle = 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= m; i++) { /* line 24 slow_hit_count: 2, fast_hit_count: 2 */
    int x, y; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d%d", &x, &y); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    if (find(x) != find(y)) /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
      f[find(x)] = find(y); /* line 28 slow_hit_count: 1, fast_hit_count: 0 */
    else /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      circle = 1; /* line 30 slow_hit_count: 0, fast_hit_count: 1 */
    deg[x]++; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
    deg[y]++; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) /* line 34 slow_hit_count: 51, fast_hit_count: 3 */
    if (deg[i] > 2) return puts("NO"); /* line 35 slow_hit_count: 50, fast_hit_count: 2 */
  if (circle && m != n) return puts("NO"); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  if (circle) { /* line 37 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 1; i <= n; i++) /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = i + 1; j <= n; j++) /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
        if (find(i) != find(j)) return puts("NO"); /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  puts("YES"); /* line 42 slow_hit_count: 1, fast_hit_count: 0 */
  vector<pair<int, int> > ans; /* line 43 slow_hit_count: 2, fast_hit_count: 0 */
  while (m != n) { /* line 44 slow_hit_count: 50, fast_hit_count: 0 */
    m++; /* line 45 slow_hit_count: 49, fast_hit_count: 0 */
    bool ok = 0; /* line 46 slow_hit_count: 49, fast_hit_count: 0 */
    for (int i = 1; i <= n && !ok; i++) { /* line 47 slow_hit_count: 1274, fast_hit_count: 0 */
      for (int j = i + 1; j <= n && !ok; j++) { /* line 48 slow_hit_count: 40473, fast_hit_count: 0 */
        if (find(i) != find(j) && deg[i] < 2 && deg[j] < 2) { /* line 49 slow_hit_count: 39248, fast_hit_count: 0 */
          f[find(i)] = find(j); /* line 50 slow_hit_count: 48, fast_hit_count: 0 */
          deg[i]++; /* line 51 slow_hit_count: 48, fast_hit_count: 0 */
          deg[j]++; /* line 52 slow_hit_count: 48, fast_hit_count: 0 */
          ans.push_back(make_pair(i, j)); /* line 53 slow_hit_count: 48, fast_hit_count: 0 */
          ok = 1; /* line 54 slow_hit_count: 48, fast_hit_count: 0 */
        } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 59 slow_hit_count: 51, fast_hit_count: 0 */
    for (int j = i + 1; j <= n; j++) { /* line 60 slow_hit_count: 1275, fast_hit_count: 0 */
      if (deg[i] == 1 && deg[j] == 1) { /* line 61 slow_hit_count: 1225, fast_hit_count: 0 */
        ans.push_back(make_pair(i, j)); /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
        deg[i]++; /* line 63 slow_hit_count: 1, fast_hit_count: 0 */
        deg[j]++; /* line 64 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans.size()); /* line 68 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 0; i < ans.size(); i++) { /* line 69 slow_hit_count: 50, fast_hit_count: 0 */
    printf("%d %d\n", ans[i].first, ans[i].second); /* line 70 slow_hit_count: 49, fast_hit_count: 0 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 72 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To analyze the code and generate performance-characterizing invariants, we'll go through the slow and fast input hit counts, identify the bottlenecks, and derive conditions under which the performance degrades.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **High Hit Counts on Specific Lines**:
   - The `find` function (lines 5-7) is called excessively with the slow input, indicating a potential performance issue related to the disjoint-set (union-find) operations.
   - The nested loops for adding edges (lines 47-48) also show significantly higher iteration counts in the slow case.

2. **Interaction with Data Structures**:
   - The union-find structure is heavily used, suggesting that the graph's connected components are being processed repeatedly, potentially due to an inefficient path compression or union operation.
   - The loops (lines 47-48 and 59-60) indicate a combinatorial checking process that scales poorly, likely due to repeated pairwise checks on all vertex pairs.

### Phase 2: Derive Performance-Characterizing Invariants

Based on these observations, we can derive the following natural language invariants:

1. **Union-Find Operations**:
   - **Invariant**: "If the number of union-find operations becomes large due to many nearly-disconnected components, performance may degrade significantly."
   - **Rationale**: The excessive calls to the `find` function suggest a high number of union-find operations. This occurs particularly when the input graph has many small or disjoint components that lead to frequent path compression calls.

2. **Nested Loop Combinatorial Checks**:
   - **Invariant**: "If the algorithm requires numerous pairwise checks across all vertices, especially when trying to connect a sparse graph to form a cycle, performance can slow down."
   - **Rationale**: The nested loops for edge addition involve `n * (n-1)/2` complexity, which becomes a bottleneck as the graph size `n` reaches its upper limits.

3. **Graph Sparsity and Degree Checks**:
   - **Invariant**: "When the graph is initially sparse and requires multiple edges to reach a cycle, the degree and connectivity checks can lead to slow performance."
   - **Rationale**: The increase in hit counts for degree and connectivity checks (lines 49-54 and 61-64) indicates that sparse graphs lead to more intensive operations to satisfy problem constraints.

### Performance Invariant Statements

1. **Union-Find Complexity**:
   - "When a graph has many components due to sparse connections, leading to numerous union and find operations, the algorithm's performance may degrade."

2. **Combinatorial Pairwise Checks**:
   - "If the graph is close to its maximum size (n approaching 50) and requires many pairwise checks to form a cycle, the nested loops can become a performance bottleneck."

3. **Graph Sparsity and Edge Addition**:
   - "In cases where the graph starts with very few edges and needs additional ones to form a cycle, the degree checks and edge additions increase execution time significantly."

These invariants suggest that the combination of union-find operations and the exhaustive search for adding minimum edges to create a cycle in the graph are the main contributors to slowdowns. These conditions are exacerbated when the graph is sparse and large, reflecting potential future slow scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Hexadecimal likes drawing. She has drawn many graphs already, both directed and not. Recently she has started to work on a still-life «interesting graph and apples». An undirected graph is called interesting, if each of its vertices belongs to one cycle only — a funny ring — and does not belong to any other cycles. A funny ring is a cycle that goes through all the vertices just once. Moreover, loops are funny rings too.

She has already drawn the apples and some of the graph edges. But now it is not clear, how to connect the rest of the vertices to get an interesting graph as a result. The answer should contain the minimal amount of added edges. And furthermore, the answer should be the lexicographically smallest one. The set of edges (x1, y1), (x2, y2), ..., (xn, yn), where xi ≤ yi, is lexicographically smaller than the set (u1, v1), (u2, v2), ..., (un, vn), where ui ≤ vi, provided that the sequence of integers x1, y1, x2, y2, ..., xn, yn is lexicographically smaller than the sequence u1, v1, u2, v2, ..., un, vn. If you do not cope, Hexadecimal will eat you. ...eat you alive.

Input

The first line of the input data contains a pair of integers n and m (1 ≤ n ≤ 50, 0 ≤ m ≤ 2500) — the amount of vertices and edges respectively. The following lines contain pairs of numbers xi and yi (1 ≤ xi, yi ≤ n) — the vertices that are already connected by edges. The initial graph may contain multiple edges and loops.

Output

In the first line output «YES» or «NO»: if it is possible or not to construct an interesting graph. If the answer is «YES», in the second line output k — the amount of edges that should be added to the initial graph. Finally, output k lines: pairs of vertices xj and yj, between which edges should be drawn. The result may contain multiple edges and loops. k can be equal to zero.

Examples

Input

3 2
1 2
2 3


Output

YES
1
1 3

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as C++ Checkers

Here we translate each performance-characterizing invariant into C++ code that checks the condition at runtime.

#### 1. Union-Find Complexity Checker

This invariant addresses the potential slowdown due to excessive union-find operations.

```cpp
void check_union_find_invariant(int unionFindCalls, int threshold) {
    if (unionFindCalls > threshold) {
        cerr << "Warning: Performance bottleneck detected due to excessive union-find operations!" << endl;
        abort();
    }
}
```

#### 2. Combinatorial Pairwise Checks Checker

This invariant targets the inefficiency caused by many pairwise checks across all vertices.

```cpp
void check_combinatorial_checks_invariant(int n, int checksPerformed, int threshold) {
    if (checksPerformed > threshold) {
        cerr << "Warning: Performance bottleneck detected due to excessive pairwise checks!" << endl;
        abort();
    }
}
```

#### 3. Graph Sparsity and Edge Addition Checker

This invariant captures the slowdown from needing many edges to form a cycle in a sparse graph.

```cpp
void check_graph_sparsity_invariant(int addedEdges, int n, int m, int threshold) {
    if ((addedEdges + m) > threshold * n) {
        cerr << "Warning: Performance bottleneck detected due to high edge additions in sparse graph!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Program

Here is the original code with the integrated checker functions:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 100;
int deg[N], f[N], n, m;
int unionFindCalls = 0;  // Track union-find calls
int checksPerformed = 0; // Track pairwise checks performed

int find(int x) {
    unionFindCalls++;  // Increment on each find call for bottleneck detection
    if (x != f[x]) return f[x] = find(f[x]);
    return x;
}

// Function to check union-find operations
void check_union_find_invariant(int unionFindCalls, int threshold) {
    if (unionFindCalls > threshold) {
        cerr << "Warning: Performance bottleneck detected due to excessive union-find operations!" << endl;
        abort();
    }
}

// Function to check combinatorial pairwise checks
void check_combinatorial_checks_invariant(int n, int checksPerformed, int threshold) {
    if (checksPerformed > threshold) {
        cerr << "Warning: Performance bottleneck detected due to excessive pairwise checks!" << endl;
        abort();
    }
}

// Function to check graph sparsity and edge additions
void check_graph_sparsity_invariant(int addedEdges, int n, int m, int threshold) {
    if ((addedEdges + m) > threshold * n) {
        cerr << "Warning: Performance bottleneck detected due to high edge additions in sparse graph!" << endl;
        abort();
    }
}

int main() {
    scanf("%d%d", &n, &m);
    if (n == 1) {
        if (m == 0) {
            puts("YES\n1\n1 1");
            return 0;
        }
        if (m == 1) {
            puts("YES\n0");
            return 0;
        }
        return puts("NO");
    }
    for (int i = 1; i <= n; i++) f[i] = i;
    bool circle = 0;
    for (int i = 1; i <= m; i++) {
        int x, y;
        scanf("%d%d", &x, &y);
        if (find(x) != find(y))
            f[find(x)] = find(y);
        else
            circle = 1;
        deg[x]++;
        deg[y]++;
    }
    for (int i = 1; i <= n; i++)
        if (deg[i] > 2) return puts("NO");
    if (circle && m != n) return puts("NO");
    if (circle) {
        for (int i = 1; i <= n; i++)
            for (int j = i + 1; j <= n; j++)
                if (find(i) != find(j)) return puts("NO");
    }
    puts("YES");
    vector<pair<int, int>> ans;
    int addedEdges = 0;  // Track added edges

    while (m != n) {
        m++;
        bool ok = 0;
        for (int i = 1; i <= n && !ok; i++) {
            for (int j = i + 1; j <= n && !ok; j++) {
                checksPerformed++;  // Increment for each pairwise check
                if (find(i) != find(j) && deg[i] < 2 && deg[j] < 2) {
                    f[find(i)] = find(j);
                    deg[i]++;
                    deg[j]++;
                    ans.push_back(make_pair(i, j));
                    ok = 1;
                    addedEdges++;
                    // Check at this point for excessive edge additions
                    check_graph_sparsity_invariant(addedEdges, n, m, 2);
                }
            }
        }
    }
    
    // Check after loops for excessive union-find and combinatorial checks
    check_union_find_invariant(unionFindCalls, n * 10);
    check_combinatorial_checks_invariant(n, checksPerformed, n * n / 2);

    for (int i = 1; i <= n; i++) {
        for (int j = i + 1; j <= n; j++) {
            if (deg[i] == 1 && deg[j] == 1) {
                ans.push_back(make_pair(i, j));
                deg[i]++;
                deg[j]++;
            }
        }
    }
    printf("%d\n", ans.size());
    for (int i = 0; i < ans.size(); i++) {
        printf("%d %d\n", ans[i].first, ans[i].second);
    }
}
```

### Explanation

1. **Union-Find Complexity Checker**: Placed after the loops to check if the number of union-find operations exceeds a reasonable threshold, signaling excessive operations.

2. **Combinatorial Pairwise Checks Checker**: Placed after edge addition loops to ensure that the number of checks isn't too high, suggesting potential inefficiencies.

3. **Graph Sparsity and Edge Addition Checker**: Integrated within the edge-adding loop to monitor added edges and trigger if adding too many edges, aiming to form cycles.

These checkers are strategically placed to catch performance bottlenecks without adding undue overhead in tight loops.

