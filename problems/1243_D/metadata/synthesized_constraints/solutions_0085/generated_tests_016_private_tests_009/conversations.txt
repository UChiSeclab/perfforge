system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph.

It is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1; exactly m edges have weight 1, and all others have weight 0.

Since Ujan doesn't really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. (The weight of a spanning tree is the sum of all its edges.) Can you find the answer for Ujan so he stops procrastinating?

Input

The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ min((n(n-1))/(2),10^5)), the number of vertices and the number of edges of weight 1 in the graph. 

The i-th of the next m lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i), the endpoints of the i-th edge of weight 1.

It is guaranteed that no edge appears twice in the input.

Output

Output a single integer, the weight of the minimum spanning tree of the graph.

Examples

Input


6 11
1 3
1 4
1 5
1 6
2 3
2 4
2 5
2 6
3 4
3 5
3 6


Output


2


Input


3 0


Output


0

Note

The graph from the first sample is shown below. Dashed edges have weight 0, other edges have weight 1. One of the minimum spanning trees is highlighted in orange and has total weight 2.

<image>

In the second sample, all edges have weight 0 so any spanning tree has total weight 0.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
string to_string(bool x) { return x ? "true" : "false"; }
string to_string(char x) { return string(1, x); }
string to_string(string s) { return '"' + s + '"'; }
string to_string(const char *s) { return to_string((string)s); }
template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}
void debug_out() { cerr << endl; }
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}
using ll = long long;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using vi = vector<int>;
using vll = vector<ll>;
using vvi = vector<vector<int> >;
using vpii = vector<pii>;
using ld = long double;
using vs = vector<string>;
mt19937_64 rnd((unsigned long)chrono::high_resolution_clock::now()
                   .time_since_epoch()
                   .count());
const int MAXN = 1e5 + 9;
vvi gg;
int n, m;
set<int> st;
bool used[MAXN];
void bfs(int v) {
  queue<int> qq;
  used[v] = 1;
  qq.push(v);
  while (!qq.empty()) {
    int v = qq.front();
    qq.pop();
    int pos = 0;
    st.erase(v);
    sort((gg[v]).begin(), (gg[v]).end());
    set<int> tmp;
    for (int x : st) {
      while (pos < (int)(gg[v]).size() && gg[v][pos] < x) {
        pos++;
      }
      if (pos == (int)(gg[v]).size() || gg[v][pos] > x) {
        assert(used[x] == 0);
        used[x] = 1;
        qq.push(x);
        tmp.insert(x);
      }
    }
    for (auto x : tmp) {
      st.erase(x);
    }
  }
}
void solve() {
  cin >> n >> m;
  gg.resize(n);
  for (int i = 0; i < n; i++) st.insert(i);
  for (int i = 0; i < m; i++) {
    int a, b;
    cin >> a >> b;
    a--, b--;
    gg[a].push_back(b);
    gg[b].push_back(a);
  }
  int cnt = 0;
  for (int i = 0; i < n; i++) {
    if (!used[i]) {
      bfs(i);
      cnt++;
    }
  }
  cout << cnt - 1 << endl;
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.setf(ios::fixed | ios::showpoint);
  cout.precision(12);
  cerr.setf(ios::fixed | ios::showpoint);
  cerr.precision(4);
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100001 0


(G.2) Fast Input

1 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(bool x) { return x ? "true" : "false"; } /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(char x) { return string(1, x); } /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(string s) { return '"' + s + '"'; } /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(const char *s) { return to_string((string)s); } /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A, typename B> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(pair<A, B> p) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")"; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A> /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(A v) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  bool first = true; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  string res = "{"; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  for (const auto &x : v) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    if (!first) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
      res += ", "; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    first = false; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    res += to_string(x); /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  res += "}"; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
void debug_out() { cerr << endl; } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
template <typename Head, typename... Tail> /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
void debug_out(Head H, Tail... T) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << " " << to_string(H); /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  debug_out(T...); /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
using pii = pair<int, int>; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
using pll = pair<ll, ll>; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
using vi = vector<int>; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
using vll = vector<ll>; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
using vvi = vector<vector<int> >; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
using vpii = vector<pii>; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
using ld = long double; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
using vs = vector<string>; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
mt19937_64 rnd((unsigned long)chrono::high_resolution_clock::now() /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
                   .time_since_epoch() /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
                   .count()); /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 1e5 + 9; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
vvi gg; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
set<int> st; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
bool used[MAXN]; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
void bfs(int v) { /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  queue<int> qq; /* line 49 slow_hit_count: 2, fast_hit_count: 2 */
  used[v] = 1; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  qq.push(v); /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  while (!qq.empty()) { /* line 52 slow_hit_count: 100002, fast_hit_count: 2 */
    int v = qq.front(); /* line 53 slow_hit_count: 100001, fast_hit_count: 1 */
    qq.pop(); /* line 54 slow_hit_count: 100001, fast_hit_count: 1 */
    int pos = 0; /* line 55 slow_hit_count: 100001, fast_hit_count: 1 */
    st.erase(v); /* line 56 slow_hit_count: 100001, fast_hit_count: 1 */
    sort((gg[v]).begin(), (gg[v]).end()); /* line 57 slow_hit_count: 100001, fast_hit_count: 1 */
    set<int> tmp; /* line 58 slow_hit_count: 200002, fast_hit_count: 2 */
    for (int x : st) { /* line 59 slow_hit_count: 200001, fast_hit_count: 1 */
      while (pos < (int)(gg[v]).size() && gg[v][pos] < x) { /* line 60 slow_hit_count: 100000, fast_hit_count: 0 */
        pos++; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
      if (pos == (int)(gg[v]).size() || gg[v][pos] > x) { /* line 63 slow_hit_count: 100000, fast_hit_count: 0 */
        assert(used[x] == 0); /* line 64 slow_hit_count: 100000, fast_hit_count: 0 */
        used[x] = 1; /* line 65 slow_hit_count: 100000, fast_hit_count: 0 */
        qq.push(x); /* line 66 slow_hit_count: 100000, fast_hit_count: 0 */
        tmp.insert(x); /* line 67 slow_hit_count: 100000, fast_hit_count: 0 */
      } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto x : tmp) { /* line 70 slow_hit_count: 200001, fast_hit_count: 1 */
      st.erase(x); /* line 71 slow_hit_count: 100000, fast_hit_count: 0 */
    } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
void solve() { /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  gg.resize(n); /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) st.insert(i); /* line 78 slow_hit_count: 100002, fast_hit_count: 2 */
  for (int i = 0; i < m; i++) { /* line 79 slow_hit_count: 1, fast_hit_count: 1 */
    int a, b; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a >> b; /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
    a--, b--; /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
    gg[a].push_back(b); /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
    gg[b].push_back(a); /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
  int cnt = 0; /* line 86 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 87 slow_hit_count: 100002, fast_hit_count: 2 */
    if (!used[i]) { /* line 88 slow_hit_count: 100001, fast_hit_count: 1 */
      bfs(i); /* line 89 slow_hit_count: 1, fast_hit_count: 1 */
      cnt++; /* line 90 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  cout << cnt - 1 << endl; /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 94 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 95 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 96 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 97 slow_hit_count: 1, fast_hit_count: 1 */
  cout.setf(ios::fixed | ios::showpoint); /* line 98 slow_hit_count: 1, fast_hit_count: 1 */
  cout.precision(12); /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
  cerr.setf(ios::fixed | ios::showpoint); /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
  cerr.precision(4); /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 102 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 103 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 104 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issues in the provided C++ program, we need to determine why the execution time becomes significant for the "slow" input.

### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Line-Level Hit Counts:**

1. **Function `bfs`:**
   - **Line 52 (`while (!qq.empty())`):** This loop is hit 100,002 times in the slow input versus 2 times in the fast input, indicating that it is run extensively.
   - **Line 53 (`int v = qq.front();`) to Line 55 (`int pos = 0;`):** These lines are also hit 100,001 times in the slow input, suggesting they are repeatedly executed within the loop.
   - **Line 59 (`for (int x : st)`):** Hit 200,001 times in slow input, indicating a frequent iteration over the set.
   - **Lines 60 (`while (pos < (int)(gg[v]).size() && gg[v][pos] < x)`) to 67:** These are part of nested operations within the `bfs` function and are heavily hit under the slow input.

2. **Function `solve`:**
   - **Line 78 (`for (int i = 0; i < n; i++) st.insert(i);`):** Hit twice in the fast input but 100,002 times in the slow input, due to larger `n`.
   - **Line 87 (`for (int i = 0; i < n; i++)`):** This loop is similarly extensive, with 100,002 hits in the slow run.

**Inferences:**

- The primary inefficiency lies in the `bfs` function, particularly in the nested operations within the while loop.
- The hit count reflects that the `bfs` function explores a large search space due to the structure of the graph and input constraints (n=100,001).
- Operations on the set `st` and the sorting of graph adjacency lists (`sort((gg[v]).begin(), (gg[v]).end())`) are likely contributing to the slowdown due to frequent execution.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are natural language invariants explaining when the program slows down:

1. **Large Vertex Count and Graph Traversal:**
   - Natural Language Description: "If the number of vertices `n` in the undirected graph is large and approaches the upper limit, the breadth-first search (BFS) may explore extensive paths and become computationally expensive."
   - This invariant highlights that as `n` approaches 100,000, the operations within the BFS, particularly those iterating over all vertices multiple times, become the major bottleneck.

2. **Sparse Graph with BFS:**
   - Natural Language Description: "When the graph has very few edges with weight 1 (`m` is much smaller than `n`), the BFS must explore many possible edges, leading to increased computation time."
   - This suggests that when `m` is low and `n` is high, the BFS effectively processes more of the potentially vast edge set (mostly zeros) which increases its complexity.

3. **Set Operations and Sorting:**
   - Natural Language Description: "If the set operations and sorting within the BFS are invoked frequently due to the structure of the graph and size of `n`, this can degrade performance as the involved data structures grow."
   - Given that `st` and `gg` are manipulated frequently, these operations can lead to high computational costs when `n` is large.

By understanding these performance characteristics, one can optimize or reformulate parts of the algorithm to handle large graphs more efficiently, such as by avoiding unnecessary sorting or reducing the number of set operations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph.

It is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1; exactly m edges have weight 1, and all others have weight 0.

Since Ujan doesn't really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. (The weight of a spanning tree is the sum of all its edges.) Can you find the answer for Ujan so he stops procrastinating?

Input

The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ min((n(n-1))/(2),10^5)), the number of vertices and the number of edges of weight 1 in the graph. 

The i-th of the next m lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i), the endpoints of the i-th edge of weight 1.

It is guaranteed that no edge appears twice in the input.

Output

Output a single integer, the weight of the minimum spanning tree of the graph.

Examples

Input


6 11
1 3
1 4
1 5
1 6
2 3
2 4
2 5
2 6
3 4
3 5
3 6


Output


2


Input


3 0


Output


0

Note

The graph from the first sample is shown below. Dashed edges have weight 0, other edges have weight 1. One of the minimum spanning trees is highlighted in orange and has total weight 2.

<image>

In the second sample, all edges have weight 0 so any spanning tree has total weight 0.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants as C++ Checkers

Here are the checker functions for each natural language invariant derived previously, implemented in C++:

1. **Invariant Checker for Large Vertex Count:**

```cpp
void check_large_vertex_count(bool condition) {
    if (condition) {
        cerr << "Warning: Large vertex count may cause performance issues!" << endl;
        abort();
    }
}
```

2. **Invariant Checker for Sparse Graph with BFS:**

```cpp
void check_sparse_graph_with_bfs(bool condition) {
    if (condition) {
        cerr << "Warning: Sparse graph with BFS may lead to increased computation time!" << endl;
        abort();
    }
}
```

3. **Invariant Checker for Set Operations and Sorting:**

```cpp
void check_set_operations_sorting(bool condition) {
    if (condition) {
        cerr << "Warning: Frequent set operations and sorting may degrade performance!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, I'll integrate these checkers into the original C++ program at effective points to monitor potential performance bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for large vertex count
void check_large_vertex_count(bool condition) {
    if (condition) {
        cerr << "Warning: Large vertex count may cause performance issues!" << endl;
        abort();
    }
}

// Checker function for sparse graph with BFS
void check_sparse_graph_with_bfs(bool condition) {
    if (condition) {
        cerr << "Warning: Sparse graph with BFS may lead to increased computation time!" << endl;
        abort();
    }
}

// Checker function for frequent set operations and sorting
void check_set_operations_sorting(bool condition) {
    if (condition) {
        cerr << "Warning: Frequent set operations and sorting may degrade performance!" << endl;
        abort();
    }
}

using ll = long long;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using vi = vector<int>;
using vll = vector<ll>;
using vvi = vector<vector<int>>;
using vpii = vector<pii>;
using ld = long double;
using vs = vector<string>;
mt19937_64 rnd((unsigned long)chrono::high_resolution_clock::now()
                   .time_since_epoch()
                   .count());

const int MAXN = 1e5 + 9;
vvi gg;
int n, m;
set<int> st;
bool used[MAXN];

void bfs(int v) {
    queue<int> qq;
    used[v] = 1;
    qq.push(v);
    while (!qq.empty()) {
        int v = qq.front();
        qq.pop();
        int pos = 0;
        st.erase(v);
        sort((gg[v]).begin(), (gg[v]).end());
        set<int> tmp;
        for (int x : st) {
            while (pos < (int)(gg[v]).size() && gg[v][pos] < x) {
                pos++;
            }
            if (pos == (int)(gg[v]).size() || gg[v][pos] > x) {
                assert(used[x] == 0);
                used[x] = 1;
                qq.push(x);
                tmp.insert(x);
            }
        }
        for (auto x : tmp) {
            st.erase(x);
        }
    }
}

void solve() {
    cin >> n >> m;

    // Integrate the checkers
    check_large_vertex_count(n > 10000); // Adjust threshold as necessary
    check_sparse_graph_with_bfs(n > 1000 && m < n / 10); // Example condition
    check_set_operations_sorting(n > 5000); // Example condition

    gg.resize(n);
    for (int i = 0; i < n; i++) st.insert(i);
    for (int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        a--, b--;
        gg[a].push_back(b);
        gg[b].push_back(a);
    }
    int cnt = 0;
    for (int i = 0; i < n; i++) {
        if (!used[i]) {
            bfs(i);
            cnt++;
        }
    }
    cout << cnt - 1 << endl;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.setf(ios::fixed | ios::showpoint);
    cout.precision(12);
    cerr.setf(ios::fixed | ios::showpoint);
    cerr.precision(4);
    
    solve();
    return 0;
}
```

**Explanation of Integration:**
- **Before main Graph Logic:** The checkers are placed after reading inputs and before the main graph operations to avoid adding overhead in tight loops.
- **Adjust Thresholds:** Thresholds are set to values that could indicate potential performance issues based on the input constraints and analysis. These can be fine-tuned based on further profiling and testing.
- **Abort on Detection:** If a condition is met, the program outputs a warning and aborts, helping identify when and why slowdowns occur during execution.

