system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph.

It is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1; exactly m edges have weight 1, and all others have weight 0.

Since Ujan doesn't really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. (The weight of a spanning tree is the sum of all its edges.) Can you find the answer for Ujan so he stops procrastinating?

Input

The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ min((n(n-1))/(2),10^5)), the number of vertices and the number of edges of weight 1 in the graph. 

The i-th of the next m lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i), the endpoints of the i-th edge of weight 1.

It is guaranteed that no edge appears twice in the input.

Output

Output a single integer, the weight of the minimum spanning tree of the graph.

Examples

Input


6 11
1 3
1 4
1 5
1 6
2 3
2 4
2 5
2 6
3 4
3 5
3 6


Output


2


Input


3 0


Output


0

Note

The graph from the first sample is shown below. Dashed edges have weight 0, other edges have weight 1. One of the minimum spanning trees is highlighted in orange and has total weight 2.

<image>

In the second sample, all edges have weight 0 so any spanning tree has total weight 0.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, m, x, y, cnt;
set<long long> s;
map<pair<long long, long long>, bool> mp;
void dfs(int u) {
  if (s.empty()) return;
  vector<int> tmp;
  for (int v : s)
    if (!mp[{u, v}]) tmp.push_back(v);
  for (int v : tmp) s.erase(v);
  for (int v : tmp) dfs(v);
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cin >> n >> m;
  for (int i = 1; i <= n; i++) s.insert(i);
  for (int i = 1; i <= m; i++) {
    cin >> x >> y;
    mp[{x, y}] = 1;
    mp[{y, x}] = 1;
  }
  while (!s.empty()) {
    cnt++;
    int u = *s.begin();
    s.erase(u);
    dfs(u);
  }
  cout << cnt - 1;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100001 0


(G.2) Fast Input

1 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m, x, y, cnt; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
set<long long> s; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
map<pair<long long, long long>, bool> mp; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(int u) { /* line 6 slow_hit_count: 100001, fast_hit_count: 1 */
  if (s.empty()) return; /* line 7 slow_hit_count: 100001, fast_hit_count: 1 */
  vector<int> tmp; /* line 8 slow_hit_count: 2, fast_hit_count: 0 */
  for (int v : s) /* line 9 slow_hit_count: 100001, fast_hit_count: 0 */
    if (!mp[{u, v}]) tmp.push_back(v); /* line 10 slow_hit_count: 100000, fast_hit_count: 0 */
  for (int v : tmp) s.erase(v); /* line 11 slow_hit_count: 100001, fast_hit_count: 0 */
  for (int v : tmp) dfs(v); /* line 12 slow_hit_count: 100001, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) s.insert(i); /* line 19 slow_hit_count: 100002, fast_hit_count: 2 */
  for (int i = 1; i <= m; i++) { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
    cin >> x >> y; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    mp[{x, y}] = 1; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    mp[{y, x}] = 1; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  while (!s.empty()) { /* line 25 slow_hit_count: 2, fast_hit_count: 2 */
    cnt++; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    int u = *s.begin(); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
    s.erase(u); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
    dfs(u); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cout << cnt - 1; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-level Hit Counts**: 
   - **`dfs` Function Calls**: The line `void dfs(int u)` (line 6) is hit 100001 times for the slow input and only once for the fast input.
   - **Line 9-12 in the `dfs` Function**: The loop `for (int v : s)` and related operations inside the `dfs` function (lines 9-12) are executed 100001 times for the slow input but not at all for the fast input.

2. **Pinpointing Lines with More Hits**:
   - The `dfs` function is called excessively for the slow input due to a large initial set `s` containing all nodes in the graph.
   - The operations within the `dfs` function iterate over the entire set `s` (line 9), which is inefficient when `n` is large and `m` is zero, meaning no edges are connecting the vertices.

3. **Inferences**:
   - The slow input causes the `dfs` function to be called for every node, and within each call, it iterates through a large set `s`.
   - This inefficiency results from the fact that there are no weight-1 edges (since `m = 0`), so the `mp` check inside the loop always leads to adding all other vertices to `tmp`, which causes extensive recursion.

### Phase 2: Derive Performance-characterizing Invariants

1. **Natural Language Performance Invariants**:

   - **Invariant 1**: "If the number of vertices `n` is large and there are no or very few edges (`m` is zero or very low), causing the `dfs` recursion to process all nodes independently, the program can become significantly slow."
     - This invariant captures the scenario where the lack of edges leads to the inefficient processing of each node independently in the `dfs` function.

   - **Invariant 2**: "Performance may degrade significantly when the `dfs` function needs to traverse nearly all nodes due to a sparse or empty set of edges, causing extensive recursion."
     - This highlights the inefficiency in recursive calls when the graph lacks edges to connect nodes efficiently.

2. **Conditions and Thresholds**:
   - The conditions relate to having a high number of nodes (`n` is large, close to 100,000) with zero or very few edges (`m` is near zero).
   - They do not rely on specific numeric values but consider the combination of a large number of nodes and a sparse graph.

3. **Correlations to Input Patterns**:
   - The slow performance is strongly correlated with inputs where `n` is large and `m` is at its minimum, leading to excessive recursion in the `dfs` method.

These invariants and conditions provide a basis for identifying potential performance issues related to input characteristics without specific numeric dependencies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph.

It is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1; exactly m edges have weight 1, and all others have weight 0.

Since Ujan doesn't really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. (The weight of a spanning tree is the sum of all its edges.) Can you find the answer for Ujan so he stops procrastinating?

Input

The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ min((n(n-1))/(2),10^5)), the number of vertices and the number of edges of weight 1 in the graph. 

The i-th of the next m lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i), the endpoints of the i-th edge of weight 1.

It is guaranteed that no edge appears twice in the input.

Output

Output a single integer, the weight of the minimum spanning tree of the graph.

Examples

Input


6 11
1 3
1 4
1 5
1 6
2 3
2 4
2 5
2 6
3 4
3 5
3 6


Output


2


Input


3 0


Output


0

Note

The graph from the first sample is shown below. Dashed edges have weight 0, other edges have weight 1. One of the minimum spanning trees is highlighted in orange and has total weight 2.

<image>

In the second sample, all edges have weight 0 so any spanning tree has total weight 0.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Let's translate the previously-derived natural language performance invariants into C++ code.

#### Invariant 1
- Natural Language: "If the number of vertices `n` is large and there are no or very few edges (`m` is zero or very low), causing the `dfs` recursion to process all nodes independently, the program can become significantly slow."

#### Invariant 2
- Natural Language: "Performance may degrade significantly when the `dfs` function needs to traverse nearly all nodes due to a sparse or empty set of edges, causing extensive recursion."

**C++ Code for Checking These Invariants:**

```cpp
void check_large_sparse_graph_invariant(long long n, long long m) {
    if (n > 50000 && m == 0) {  // Threshold chosen based on large n, sparse m
        cerr << "Warning: Performance bottleneck condition triggered due to large, sparse graph!" << endl;
        abort();
    }
}
```

This function checks if the graph is both large and sparse, leading to potential performance bottlenecks due to excessive recursion.

### Phase 4: Integrating the Checker Code into the Original Program

Now, let's integrate these checks into the original C++ program at appropriate points.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long n, m, x, y, cnt;
set<long long> s;
map<pair<long long, long long>, bool> mp;

void dfs(int u) {
    if (s.empty()) return;
    vector<int> tmp;
    for (int v : s)
        if (!mp[{u, v}]) tmp.push_back(v);
    for (int v : tmp) s.erase(v);
    for (int v : tmp) dfs(v);
}

// Invariant check function to detect potential performance bottlenecks
void check_large_sparse_graph_invariant(long long n, long long m) {
    if (n > 50000 && m == 0) {  // Threshold for large n, sparse m
        cerr << "Warning: Performance bottleneck condition triggered due to large, sparse graph!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m;

    // Check invariants after reading input
    check_large_sparse_graph_invariant(n, m);

    for (int i = 1; i <= n; i++) s.insert(i);
    for (int i = 1; i <= m; i++) {
        cin >> x >> y;
        mp[{x, y}] = 1;
        mp[{y, x}] = 1;
    }

    while (!s.empty()) {
        cnt++;
        int u = *s.begin();
        s.erase(u);
        dfs(u);
    }
    cout << cnt - 1;
    return 0;
}
```

### Explanation of Integration:
- The `check_large_sparse_graph_invariant` function is called immediately after reading the input values for `n` and `m`. This is before the graph processing begins, ensuring that the check does not add overhead during the graph traversal and thus avoids slowing down the main computation.
- The chosen threshold for `n` and `m` reflects a scenario where the graph is large but sparse, which our analysis identified as a potential cause for performance degradation due to the extensive recursion in the `dfs` function.

