system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph.

It is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1; exactly m edges have weight 1, and all others have weight 0.

Since Ujan doesn't really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. (The weight of a spanning tree is the sum of all its edges.) Can you find the answer for Ujan so he stops procrastinating?

Input

The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ min((n(n-1))/(2),10^5)), the number of vertices and the number of edges of weight 1 in the graph. 

The i-th of the next m lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i), the endpoints of the i-th edge of weight 1.

It is guaranteed that no edge appears twice in the input.

Output

Output a single integer, the weight of the minimum spanning tree of the graph.

Examples

Input


6 11
1 3
1 4
1 5
1 6
2 3
2 4
2 5
2 6
3 4
3 5
3 6


Output


2


Input


3 0


Output


0

Note

The graph from the first sample is shown below. Dashed edges have weight 0, other edges have weight 1. One of the minimum spanning trees is highlighted in orange and has total weight 2.

<image>

In the second sample, all edges have weight 0 so any spanning tree has total weight 0.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
unordered_map<int, unordered_map<int, bool> > m;
int n, ma;
set<int> visited;
void DFS(int v) {
  if (visited.find(v) != visited.end()) visited.erase(visited.find(v));
  int cur = -1;
  while (1) {
    auto itx = visited.upper_bound(cur);
    if (itx == visited.end()) break;
    cur = *itx;
    if (m[v][*itx] == 1) continue;
    DFS(*itx);
  }
}
int main() {
  cin >> n >> ma;
  for (int i = 1; i <= ma; i++) {
    int a, b;
    cin >> a >> b;
    m[a][b] = 1;
    m[b][a] = 1;
  }
  int cnt = 0;
  for (int i = 1; i <= n; i++) {
    visited.insert(i);
  }
  int cur = -1;
  while (1) {
    auto itr = visited.upper_bound(cur);
    if (itr == visited.end()) break;
    DFS(*itr);
    cnt++;
  }
  cout << max(cnt - 1, 0);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100001 0


(G.2) Fast Input

1 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
unordered_map<int, unordered_map<int, bool> > m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, ma; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
set<int> visited; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void DFS(int v) { /* line 6 slow_hit_count: 100001, fast_hit_count: 1 */
  if (visited.find(v) != visited.end()) visited.erase(visited.find(v)); /* line 7 slow_hit_count: 100001, fast_hit_count: 1 */
  int cur = -1; /* line 8 slow_hit_count: 100001, fast_hit_count: 1 */
  while (1) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    auto itx = visited.upper_bound(cur); /* line 10 slow_hit_count: 200001, fast_hit_count: 1 */
    if (itx == visited.end()) break; /* line 11 slow_hit_count: 200001, fast_hit_count: 1 */
    cur = *itx; /* line 12 slow_hit_count: 100000, fast_hit_count: 0 */
    if (m[v][*itx] == 1) continue; /* line 13 slow_hit_count: 100000, fast_hit_count: 0 */
    DFS(*itx); /* line 14 slow_hit_count: 100000, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 100000, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 100001, fast_hit_count: 1 */
int main() { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> ma; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= ma; i++) { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    int a, b; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a >> b; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    m[a][b] = 1; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    m[b][a] = 1; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  int cnt = 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 26 slow_hit_count: 100002, fast_hit_count: 2 */
    visited.insert(i); /* line 27 slow_hit_count: 100001, fast_hit_count: 1 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  int cur = -1; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  while (1) { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    auto itr = visited.upper_bound(cur); /* line 31 slow_hit_count: 2, fast_hit_count: 2 */
    if (itr == visited.end()) break; /* line 32 slow_hit_count: 2, fast_hit_count: 2 */
    DFS(*itr); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
    cnt++; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  cout << max(cnt - 1, 0); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 37 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis**:
   - The `DFS` function is called significantly more times in the slow input (100,000 times) compared to the fast input (once). This indicates that the DFS traversal is the bottleneck.
   - Lines within the `DFS` function, particularly the loop involving `visited.upper_bound(cur)` (lines 10 to 14), are executed frequently in the slow case. This indicates that the algorithm is spending most of its time iterating over potential graph connections, even when they are non-existent (since `m = 0` for the slow input).

2. **Data Structure Interaction**:
   - The `visited` set is iterated over repeatedly, and `visited.upper_bound(cur)` is likely to be an expensive operation, especially when `n` is large.
   - The `unordered_map` `m` is used to check connectivity between nodes, but since `m = 0` in the slow input, this check doesn't contribute to early exits within the DFS calls, leading to full exploration of the graph structure.
   
3. **Input Constraints Interaction**:
   - The constraint `n <= 100,000` means that with `m = 0`, the DFS must consider each node independently, leading to `O(n^2)` operations in the worst case due to the nested nature of the DFS and set operations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant on Node Exploration**:
   - If the graph has zero or very few edges of weight 1 (`m` is small), and the number of vertices `n` is large, the algorithm may exhibit slow performance due to exhaustive exploration of each node independently. The algorithm spends excessive time in DFS traversals because each node is initially considered unvisited and disconnected from others.
   
   **Natural Language Description**: 
   - "When the graph is sparse (few or no edges of weight 1) and the number of nodes (n) is large, the program may slow down significantly as it performs exhaustive DFS traversals."

2. **Invariant on Visited Set Operations**:
   - The repeated use of `visited.upper_bound(cur)` in a large set (with size `n`) can be costly. Specifically, when `n` approaches its upper constraint and `m` is minimal, this operation does not benefit from early termination, leading to inefficiencies.
   
   **Natural Language Description**: 
   - "If the number of vertices is close to its maximum constraint and there are minimal edges, the repeated operations on the `visited` set can degrade performance, particularly due to costly set operations without early exits."

By understanding these invariants, developers can anticipate slowdowns with large and sparse graphs and optimize the code, potentially through early termination in DFS or improved data structures for managing connectivity checks.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ujan has a lot of useless stuff in his drawers, a considerable part of which are his math notebooks: it is time to sort them out. This time he found an old dusty graph theory notebook with a description of a graph.

It is an undirected weighted graph on n vertices. It is a complete graph: each pair of vertices is connected by an edge. The weight of each edge is either 0 or 1; exactly m edges have weight 1, and all others have weight 0.

Since Ujan doesn't really want to organize his notes, he decided to find the weight of the minimum spanning tree of the graph. (The weight of a spanning tree is the sum of all its edges.) Can you find the answer for Ujan so he stops procrastinating?

Input

The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ min((n(n-1))/(2),10^5)), the number of vertices and the number of edges of weight 1 in the graph. 

The i-th of the next m lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i), the endpoints of the i-th edge of weight 1.

It is guaranteed that no edge appears twice in the input.

Output

Output a single integer, the weight of the minimum spanning tree of the graph.

Examples

Input


6 11
1 3
1 4
1 5
1 6
2 3
2 4
2 5
2 6
3 4
3 5
3 6


Output


2


Input


3 0


Output


0

Note

The graph from the first sample is shown below. Dashed edges have weight 0, other edges have weight 1. One of the minimum spanning trees is highlighted in orange and has total weight 2.

<image>

In the second sample, all edges have weight 0 so any spanning tree has total weight 0.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checkers

Based on the performance-characterizing invariants we derived, we will implement the following C++ checkers:

1. **Invariant on Node Exploration**:
   - **Natural Language Description**: "When the graph is sparse (few or no edges of weight 1) and the number of nodes (n) is large, the program may slow down significantly as it performs exhaustive DFS traversals."
   - **Checker Code**:
   ```cpp
   void check_sparse_graph_invariant(int n, int m) {
       if (m == 0 && n > 10000) { // Arbitrary threshold for "large" n
           cerr << "Warning: Performance bottleneck - sparse graph with large n. Excessive DFS expected." << endl;
           abort();
       }
   }
   ```

2. **Invariant on Visited Set Operations**:
   - **Natural Language Description**: "If the number of vertices is close to its maximum constraint and there are minimal edges, the repeated operations on the `visited` set can degrade performance, particularly due to costly set operations without early exits."
   - **Checker Code**:
   ```cpp
   void check_visited_set_invariant(int n, int m) {
       if (n > 50000 && m < n / 10) { // Threshold for large n and sparse edges
           cerr << "Warning: Performance bottleneck - inefficient operations on visited set due to large n and sparse edges." << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checkers into the Original Program

We will now integrate the checker functions into the original C++ code at strategic locations to avoid impacting performance further. Here's the instrumented code:

```cpp
#include <bits/stdc++.h>
using namespace std;

unordered_map<int, unordered_map<int, bool> > m;
int n, ma;
set<int> visited;

// Checker functions for performance bottlenecks
void check_sparse_graph_invariant(int n, int m) {
    if (m == 0 && n > 10000) { // Arbitrary threshold for "large" n
        cerr << "Warning: Performance bottleneck - sparse graph with large n. Excessive DFS expected." << endl;
        abort();
    }
}

void check_visited_set_invariant(int n, int m) {
    if (n > 50000 && m < n / 10) { // Threshold for large n and sparse edges
        cerr << "Warning: Performance bottleneck - inefficient operations on visited set due to large n and sparse edges." << endl;
        abort();
    }
}

void DFS(int v) {
    if (visited.find(v) != visited.end()) visited.erase(visited.find(v));
    int cur = -1;
    while (1) {
        auto itx = visited.upper_bound(cur);
        if (itx == visited.end()) break;
        cur = *itx;
        if (m[v][*itx] == 1) continue;
        DFS(*itx);
    }
}

int main() {
    cin >> n >> ma;
    
    // Insert performance checkers
    check_sparse_graph_invariant(n, ma); // Check for sparse graph performance bottleneck
    check_visited_set_invariant(n, ma); // Check for inefficiencies in visited set operations

    for (int i = 1; i <= ma; i++) {
        int a, b;
        cin >> a >> b;
        m[a][b] = 1;
        m[b][a] = 1;
    }
    
    int cnt = 0;
    for (int i = 1; i <= n; i++) {
        visited.insert(i);
    }
    
    int cur = -1;
    while (1) {
        auto itr = visited.upper_bound(cur);
        if (itr == visited.end()) break;
        DFS(*itr);
        cnt++;
    }
    
    cout << max(cnt - 1, 0);
}
```

### Explanation:
- The `check_sparse_graph_invariant` is placed after reading the input values for `n` and `m`, as this invariant is concerned with the graph's sparseness.
- The `check_visited_set_invariant` is also placed right after input to capture inefficiencies in handling large and sparsely connected graphs.
- Both checks are strategically placed to not interfere with the main computation loop and are designed to abort if the conditions are met, alerting users to potential performance issues.

