system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

We define x mod y as the remainder of division of x by y (\% operator in C++ or Java, mod operator in Pascal).

Let's call an array of positive integers [a_1, a_2, ..., a_k] stable if for every permutation p of integers from 1 to k, and for every non-negative integer x, the following condition is met:

 (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k = (((x mod a_{p_1}) mod a_{p_2}) ... mod a_{p_{k - 1}}) mod a_{p_k}  

That is, for each non-negative integer x, the value of (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k does not change if we reorder the elements of the array a.

For two given integers n and k, calculate the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n.

Input

The only line contains two integers n and k (1 ≤ n, k ≤ 5 ⋅ 10^5).

Output

Print one integer — the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n. Since the answer may be large, print it modulo 998244353.

Examples

Input


7 3


Output


16


Input


3 7


Output


0


Input


1337 42


Output


95147305


Input


1 1


Output


1


Input


500000 1


Output


500000

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long INF = 2e9;
const long long MB = 20;
const long long MOD = 998244353;
const long long maxN = 1e6;
long long mod_pow(long long a, long long b) {
  if (!b) return 1;
  if (b % 2) return a * mod_pow(a, b - 1) % MOD;
  long long q = mod_pow(a, b / 2);
  return q * q % MOD;
}
long long fact[maxN], rev[maxN];
long long c(long long n, long long k) {
  if (n < k) return 0;
  return (fact[n] * rev[k] % MOD) * rev[n - k] % MOD;
}
void solve() {
  long long n, k;
  cin >> k >> n;
  if (n > k) {
    cout << 0;
    return;
  }
  fact[0] = 1;
  for (long long i = 1; i < maxN; i++) {
    fact[i] = fact[i - 1] * i % MOD;
  }
  for (long long i = 0; i < maxN; i++) {
    rev[i] = mod_pow(fact[i], MOD - 2);
  }
  long long ans = 0;
  for (long long i = 1; i <= k; i++) {
    long long cnt = k / i - 1;
    ans += c(cnt, n - 1);
    ans %= MOD;
  }
  cout << ans;
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  cout << fixed;
  cout.precision(12);
  srand(time(0));
  long long t = 1;
  while (t--) solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

500000 1


(G.2) Fast Input

1 500000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 2e9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long MB = 20; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 998244353; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const long long maxN = 1e6; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long mod_pow(long long a, long long b) { /* line 7 slow_hit_count: 58000000, fast_hit_count: 0 */
  if (!b) return 1; /* line 8 slow_hit_count: 58000000, fast_hit_count: 0 */
  if (b % 2) return a * mod_pow(a, b - 1) % MOD; /* line 9 slow_hit_count: 57000000, fast_hit_count: 0 */
  long long q = mod_pow(a, b / 2); /* line 10 slow_hit_count: 29000000, fast_hit_count: 0 */
  return q * q % MOD; /* line 11 slow_hit_count: 29000000, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long fact[maxN], rev[maxN]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
long long c(long long n, long long k) { /* line 14 slow_hit_count: 500000, fast_hit_count: 0 */
  if (n < k) return 0; /* line 15 slow_hit_count: 500000, fast_hit_count: 0 */
  return (fact[n] * rev[k] % MOD) * rev[n - k] % MOD; /* line 16 slow_hit_count: 500000, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, k; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> k >> n; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  if (n > k) { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0; /* line 22 slow_hit_count: 0, fast_hit_count: 1 */
    return; /* line 23 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  fact[0] = 1; /* line 25 slow_hit_count: 1, fast_hit_count: 0 */
  for (long long i = 1; i < maxN; i++) { /* line 26 slow_hit_count: 1000000, fast_hit_count: 0 */
    fact[i] = fact[i - 1] * i % MOD; /* line 27 slow_hit_count: 999999, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < maxN; i++) { /* line 29 slow_hit_count: 1000001, fast_hit_count: 0 */
    rev[i] = mod_pow(fact[i], MOD - 2); /* line 30 slow_hit_count: 1000000, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 32 slow_hit_count: 1, fast_hit_count: 0 */
  for (long long i = 1; i <= k; i++) { /* line 33 slow_hit_count: 500001, fast_hit_count: 0 */
    long long cnt = k / i - 1; /* line 34 slow_hit_count: 500000, fast_hit_count: 0 */
    ans += c(cnt, n - 1); /* line 35 slow_hit_count: 500000, fast_hit_count: 0 */
    ans %= MOD; /* line 36 slow_hit_count: 500000, fast_hit_count: 0 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 38 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(nullptr); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  cout << fixed; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  cout.precision(12); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  srand(time(0)); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  long long t = 1; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) solve(); /* line 48 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 49 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - **`mod_pow` Function Calls (Lines 7-11):** 
     - This function is heavily hit in the slow input with counts of 58,000,000 hits for line 8 and significant hits on lines 9-11. This suggests it is a recursive function that is a performance bottleneck.
   - **Factorial and Inverse Factorial Calculations (Lines 26-31):**
     - Loops at lines 26 and 29 are executed 1,000,000 times, indicating large pre-computation tasks for factorial and modular inverses.
   - **Combination Calculations (Lines 33-37):**
     - The loop iterating from 1 to `k` (500,000 iterations) interacts with the combination function `c` indicating heavy computation.

2. **Interaction with Data Structures and Constraints:**
   - The hit counts indicate that the slow input involves a large amount of modular exponentiation and pre-computation of factorials and modular inverses.
   - The loop from line 33 is a key contributor to the problem's complexity, as it iterates over a range determined by input size `k`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: Heavy Recursive Calls**
   - **Natural Language Description:** "If the program frequently calls a recursive modular exponentiation function with large powers, especially in setups requiring many factorial pre-computations (like when `k` is large), the execution time can increase significantly."
   - **Threshold Suggestion:** Recursive depth or `k` close to its maximum constraint, causing repeated recursion.

2. **Invariant 2: Pre-computation and Memory Usage**
   - **Natural Language Description:** "When `n` or `k` approaches their upper limits, the pre-computation of factorials and their inverses becomes a bottleneck due to the large size of pre-computed arrays."
   - **Threshold Suggestion:** Arrays size of `maxN`, causing intensive memory operations at initialization.

3. **Invariant 3: Iterative Combinations**
   - **Natural Language Description:** "A slowdown is likely when `k` is large and combinations are calculated multiple times in loops, as the constant recomputation becomes expensive."
   - **Threshold Suggestion:** Iteration count tied to `k`, especially when `k` is close to its upper bound.

### Output: Performance-Characterizing Invariants

- **Invariant 1: Recursive Depth and Modular Calculations**
  - "The execution may slow significantly when the recursive modular exponentiation function is called with large powers, especially in situations requiring extensive factorial pre-computations."
  
- **Invariant 2: Factorial Pre-computation**
  - "Significant slowdowns occur when the input size approaches limits, triggering large pre-computation of factorials and inverses, leading to expensive setup and memory operations."

- **Invariant 3: Intensive Loop-Based Computation**
  - "When `k` is large, and combinations are computed repeatedly in a loop, the performance degrades due to the constant overhead of these calculations." 

These invariants provide a framework for understanding potential performance bottlenecks in similar contexts, helping to identify conditions where the code might enter a path that results in prolonged execution times.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
We define x mod y as the remainder of division of x by y (\% operator in C++ or Java, mod operator in Pascal).

Let's call an array of positive integers [a_1, a_2, ..., a_k] stable if for every permutation p of integers from 1 to k, and for every non-negative integer x, the following condition is met:

 (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k = (((x mod a_{p_1}) mod a_{p_2}) ... mod a_{p_{k - 1}}) mod a_{p_k}  

That is, for each non-negative integer x, the value of (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k does not change if we reorder the elements of the array a.

For two given integers n and k, calculate the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n.

Input

The only line contains two integers n and k (1 ≤ n, k ≤ 5 ⋅ 10^5).

Output

Print one integer — the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n. Since the answer may be large, print it modulo 998244353.

Examples

Input


7 3


Output


16


Input


3 7


Output


0


Input


1337 42


Output


95147305


Input


1 1


Output


1


Input


500000 1


Output


500000

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as C++ Checkers

Let's implement the performance-characterizing invariants derived earlier into C++ checkers:

1. **Invariant 1: Recursive Depth and Modular Calculations**

```cpp
void check_mod_pow_invariant(long long b) {
    if (b > 1000000) {  // Assuming a threshold for deep recursion
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion in mod_pow!" << endl;
        abort();
    }
}
```

2. **Invariant 2: Factorial Pre-computation**

```cpp
void check_factorial_invariant(long long maxN) {
    if (maxN >= 1000000) {  // Pre-computation size that might be too large
        cerr << "Warning: Performance bottleneck condition triggered - large factorial pre-computation!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Intensive Loop-Based Computation**

```cpp
void check_combination_invariant(long long k) {
    if (k > 400000) {  // Threshold close to the problem's upper limit where loops become intensive
        cerr << "Warning: Performance bottleneck condition triggered - excessive combination calculations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Program

Now, let's integrate these checker functions into the provided C++ solution.

```cpp
#include <bits/stdc++.h>
using namespace std;

const long long INF = 2e9;
const long long MB = 20;
const long long MOD = 998244353;
const long long maxN = 1e6;

long long mod_pow(long long a, long long b) {
    check_mod_pow_invariant(b);  // Check for deep recursion
    if (!b) return 1;
    if (b % 2) return a * mod_pow(a, b - 1) % MOD;
    long long q = mod_pow(a, b / 2);
    return q * q % MOD;
}

long long fact[maxN], rev[maxN];

long long c(long long n, long long k) {
    if (n < k) return 0;
    return (fact[n] * rev[k] % MOD) * rev[n - k] % MOD;
}

void solve() {
    long long n, k;
    cin >> k >> n;
    
    if (n > k) {
        cout << 0;
        return;
    }
    
    // Check for factorial pre-computation size
    check_factorial_invariant(maxN);
    
    fact[0] = 1;
    for (long long i = 1; i < maxN; i++) {
        fact[i] = fact[i - 1] * i % MOD;
    }
    
    for (long long i = 0; i < maxN; i++) {
        rev[i] = mod_pow(fact[i], MOD - 2);
    }
    
    long long ans = 0;
    
    // Check for combination computation overhead
    check_combination_invariant(k);
    
    for (long long i = 1; i <= k; i++) {
        long long cnt = k / i - 1;
        ans += c(cnt, n - 1);
        ans %= MOD;
    }
    
    cout << ans;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    cout << fixed;
    cout.precision(12);
    srand(time(0));
    long long t = 1;
    while (t--) solve();
}
```

### Explanation

- **Integration Strategy:** The checker functions are placed at strategic points in the program to avoid adding overhead within tight loops. They serve to warn and abort the program when entering potentially slow execution paths.
- **Checker Definitions:**
  - `check_mod_pow_invariant` is called within `mod_pow` to check for recursive depths.
  - `check_factorial_invariant` is called before initializing the factorials to ensure that the pre-computation size is manageable.
  - `check_combination_invariant` is applied before the combination calculations to ensure that `k` is within a reasonable range to avoid excessive computation in the loop.

These checks will help identify when the program might enter a slow path, aiding performance debugging and optimization efforts.

