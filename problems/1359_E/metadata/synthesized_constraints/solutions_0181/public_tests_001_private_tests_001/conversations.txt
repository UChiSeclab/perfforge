system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

We define x mod y as the remainder of division of x by y (\% operator in C++ or Java, mod operator in Pascal).

Let's call an array of positive integers [a_1, a_2, ..., a_k] stable if for every permutation p of integers from 1 to k, and for every non-negative integer x, the following condition is met:

 (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k = (((x mod a_{p_1}) mod a_{p_2}) ... mod a_{p_{k - 1}}) mod a_{p_k}  

That is, for each non-negative integer x, the value of (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k does not change if we reorder the elements of the array a.

For two given integers n and k, calculate the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n.

Input

The only line contains two integers n and k (1 ≤ n, k ≤ 5 ⋅ 10^5).

Output

Print one integer — the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n. Since the answer may be large, print it modulo 998244353.

Examples

Input


7 3


Output


16


Input


3 7


Output


0


Input


1337 42


Output


95147305


Input


1 1


Output


1


Input


500000 1


Output


500000

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const double eps = 1e-8;
const int MAXN = (int)1e5 + 5;
const int MOD = 998244353;
const int INF = 0x3f3f3f3f;
const int dx[] = {-1, 1, 0, 0};
const int dy[] = {0, 0, -1, 1};
long long pow_mod(long long a, long long b) {
  long long res = 1;
  while (b) {
    if (b & 1) res = res * a % MOD;
    a = a * a % MOD;
    b >>= 1;
  }
  return res;
}
long long C(int n, int m) {
  long long resdw1 = 1;
  for (int i = 1; i <= n; i++) resdw1 = resdw1 * i % MOD;
  long long resdw2 = 1;
  for (int i = 1; i <= m - n; i++) resdw2 = resdw2 * i % MOD;
  long long resup = 1;
  for (int i = 1; i <= m; i++) resup = resup * i % MOD;
  return resup * pow_mod(resdw1, MOD - 2) % MOD * pow_mod(resdw2, MOD - 2) %
         MOD;
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  int n, k;
  long long ans = 0;
  cin >> n >> k;
  if (n < k) {
    cout << 0 << endl;
    exit(0);
  }
  for (int i = 1; i * k <= n; i++) {
    ans += C(k - 1, n / i - 1);
    ans %= MOD;
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

500000 1


(G.2) Fast Input

1 500000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const double eps = 1e-8; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = (int)1e5 + 5; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 998244353; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 0x3f3f3f3f; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const int dx[] = {-1, 1, 0, 0}; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
const int dy[] = {0, 0, -1, 1}; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long pow_mod(long long a, long long b) { /* line 9 slow_hit_count: 1000000, fast_hit_count: 0 */
  long long res = 1; /* line 10 slow_hit_count: 1000000, fast_hit_count: 0 */
  while (b) { /* line 11 slow_hit_count: 31000000, fast_hit_count: 0 */
    if (b & 1) res = res * a % MOD; /* line 12 slow_hit_count: 30000000, fast_hit_count: 0 */
    a = a * a % MOD; /* line 13 slow_hit_count: 30000000, fast_hit_count: 0 */
    b >>= 1; /* line 14 slow_hit_count: 30000000, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 16 slow_hit_count: 1000000, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
long long C(int n, int m) { /* line 18 slow_hit_count: 500000, fast_hit_count: 0 */
  long long resdw1 = 1; /* line 19 slow_hit_count: 500000, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) resdw1 = resdw1 * i % MOD; /* line 20 slow_hit_count: 500000, fast_hit_count: 0 */
  long long resdw2 = 1; /* line 21 slow_hit_count: 500000, fast_hit_count: 0 */
  for (int i = 1; i <= m - n; i++) resdw2 = resdw2 * i % MOD; /* line 22 slow_hit_count: 6638449, fast_hit_count: 0 */
  long long resup = 1; /* line 23 slow_hit_count: 500000, fast_hit_count: 0 */
  for (int i = 1; i <= m; i++) resup = resup * i % MOD; /* line 24 slow_hit_count: 6638449, fast_hit_count: 0 */
  return resup * pow_mod(resdw1, MOD - 2) % MOD * pow_mod(resdw2, MOD - 2) % /* line 25 slow_hit_count: 500000, fast_hit_count: 0 */
         MOD; /* line 26 slow_hit_count: 500000, fast_hit_count: 0 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  if (n < k) { /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0 << endl; /* line 35 slow_hit_count: 0, fast_hit_count: 1 */
    exit(0); /* line 36 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i * k <= n; i++) { /* line 38 slow_hit_count: 500001, fast_hit_count: 0 */
    ans += C(k - 1, n / i - 1); /* line 39 slow_hit_count: 500000, fast_hit_count: 0 */
    ans %= MOD; /* line 40 slow_hit_count: 500000, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 42 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 43 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 44 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided problem statement, code, and hit count information, we can begin analyzing the performance characteristics of the program. The goal is to identify why it runs slowly for certain inputs. 

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Hit Count Analysis:**

    - The `pow_mod` function (lines 9-16) is called 1,000,000 times on the slow input. The loop inside `pow_mod` (lines 11-14) is executed 30,000,000 times, indicating heavy computation due to exponentiation by squaring for large powers.
    
    - The `C` function (lines 18-26) is called 500,000 times, with its loops (lines 20 and 22-24) executed over 6,638,449 times each, contributing significantly to the slowdown.

2. **Loops and Recursion:**

    - The loop in `main` (lines 38-40) runs 500,000 times for the slow input, and within it, the `C` function is repetitively called, further invoking `pow_mod` twice for each call.

3. **Interaction with Data Structures:**

    - While no complex data structures are involved, the operations on basic variables are computationally expensive due to the nature of the computation done inside the loops.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following performance-characterizing invariants:

1. **Invariant on `n` and `k`:**

   Natural language description: "When `k` is small (especially 1), and `n` is large, the computation involves large numbers of iterations over exponentiation and factorial calculations, causing significant slowdowns."

   Explanation: With `k = 1` and a large `n`, the loop in the `main` function iterates `n` times, calling `C` repeatedly. Inside `C`, factorial calculations and power computations become expensive due to large numbers, as evident from the repeated calls to `pow_mod`.

2. **Invariant on Loop Execution:**

   Natural language description: "If the outer loop in the `main` function (i * k <= n) executes a very high number of times, the computational cost due to repeatedly calculating combinations (with potentially large factorials and power operations) may lead to performance degradation."

   Explanation: The loop's execution count is directly proportional to `n`, especially when `k` allows the loop to run its maximum iterations, resulting in expensive repeated calculations.

### Conclusion

By focusing on these conditions, we can identify when the code is likely to slow down. These invariants help in understanding the problem patterns that lead to inefficiencies, especially in real-world scenarios where `n` and `k` values can vary considerably within the given constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
We define x mod y as the remainder of division of x by y (\% operator in C++ or Java, mod operator in Pascal).

Let's call an array of positive integers [a_1, a_2, ..., a_k] stable if for every permutation p of integers from 1 to k, and for every non-negative integer x, the following condition is met:

 (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k = (((x mod a_{p_1}) mod a_{p_2}) ... mod a_{p_{k - 1}}) mod a_{p_k}  

That is, for each non-negative integer x, the value of (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k does not change if we reorder the elements of the array a.

For two given integers n and k, calculate the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n.

Input

The only line contains two integers n and k (1 ≤ n, k ≤ 5 ⋅ 10^5).

Output

Print one integer — the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n. Since the answer may be large, print it modulo 998244353.

Examples

Input


7 3


Output


16


Input


3 7


Output


0


Input


1337 42


Output


95147305


Input


1 1


Output


1


Input


500000 1


Output


500000

Solution (C++ code):
{solution}


assistant: Let's proceed with implementing the performance-characterizing invariants in C++ and integrating them into the original program.

### Phase 3: Implement Checkers for Invariants in C++

#### Invariant 1: When `k` is small and `n` is large

```cpp
void check_small_k_large_n(int n, int k) {
    if (k == 1 && n > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - Small k with large n!" << endl;
        abort();
    }
}
```

#### Invariant 2: High number of iterations in the loop

```cpp
void check_high_iteration_count(int n, int k) {
    if ((n / k) > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - High iteration count in main loop!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into Original C++ Program

We will now integrate these checks into the original C++ code at appropriate locations.

```cpp
#include <bits/stdc++.h>
using namespace std;

const int MOD = 998244353;

long long pow_mod(long long a, long long b) {
    long long res = 1;
    while (b) {
        if (b & 1) res = res * a % MOD;
        a = a * a % MOD;
        b >>= 1;
    }
    return res;
}

long long C(int n, int m) {
    long long resdw1 = 1;
    for (int i = 1; i <= n; i++) resdw1 = resdw1 * i % MOD;
    long long resdw2 = 1;
    for (int i = 1; i <= m - n; i++) resdw2 = resdw2 * i % MOD;
    long long resup = 1;
    for (int i = 1; i <= m; i++) resup = resup * i % MOD;
    return resup * pow_mod(resdw1, MOD - 2) % MOD * pow_mod(resdw2, MOD - 2) % MOD;
}

void check_small_k_large_n(int n, int k) {
    if (k == 1 && n > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - Small k with large n!" << endl;
        abort();
    }
}

void check_high_iteration_count(int n, int k) {
    if ((n / k) > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - High iteration count in main loop!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    
    int n, k;
    long long ans = 0;
    cin >> n >> k;
    
    // Check for potential performance bottlenecks
    check_small_k_large_n(n, k);
    check_high_iteration_count(n, k);
    
    if (n < k) {
        cout << 0 << endl;
        exit(0);
    }
    
    for (int i = 1; i * k <= n; i++) {
        ans += C(k - 1, n / i - 1);
        ans %= MOD;
    }
    
    cout << ans << endl;
    return 0;
}
```

### Explanation of Integration

- **Location of Checks:**
  - The checks are placed right after reading the inputs `n` and `k` but before entering the main loop, to ensure that they don't add overhead within the loop.

- **Check Conditions:**
  - The conditions in the checks are designed to catch scenarios where the program might run into performance issues as identified in the analysis phase.

- **Abort Mechanism:**
  - Using `abort()` ensures that the program halts immediately when a bottleneck condition is detected, which is useful for debugging and performance testing.

