system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

We define x mod y as the remainder of division of x by y (\% operator in C++ or Java, mod operator in Pascal).

Let's call an array of positive integers [a_1, a_2, ..., a_k] stable if for every permutation p of integers from 1 to k, and for every non-negative integer x, the following condition is met:

 (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k = (((x mod a_{p_1}) mod a_{p_2}) ... mod a_{p_{k - 1}}) mod a_{p_k}  

That is, for each non-negative integer x, the value of (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k does not change if we reorder the elements of the array a.

For two given integers n and k, calculate the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n.

Input

The only line contains two integers n and k (1 ≤ n, k ≤ 5 ⋅ 10^5).

Output

Print one integer — the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n. Since the answer may be large, print it modulo 998244353.

Examples

Input


7 3


Output


16


Input


3 7


Output


0


Input


1337 42


Output


95147305


Input


1 1


Output


1


Input


500000 1


Output


500000

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <typename A, typename B>
ostream &operator<<(ostream &os, const pair<A, B> &p) {
  return os << '(' << p.first << ' ' << p.second << ')';
}
template <typename T_container, typename T = typename enable_if<
                                    !is_same<T_container, string>::value,
                                    typename T_container::value_type>::type>
ostream &operator<<(ostream &os, const T_container &v) {
  os << '{';
  string sep;
  for (const T &x : v) os << sep << x, sep = ", ";
  return os << '}';
}
const bool MULTIPLE_TEST_CASES = false;
const long long MOD = 998244353;
const long long N = 1e5 + 5;
const long long INF = 1e12;
struct Arithmetic {
  long long MODULO;
  vector<long long> fact;
  Arithmetic(long long m = 1e9 + 7) { MODULO = m; }
  long long powMod(long long a, long long p) {
    if (p == 0) {
      return 1;
    } else if (p % 2 == 0) {
      long long val = powMod(a, p / 2);
      return (val * val) % MODULO;
    } else {
      long long val = powMod(a, (p - 1) / 2);
      return ((a % MODULO) * ((val * val) % MODULO)) % MODULO;
    }
  }
  bool _expandFactorial(long long n) {
    long long curSize = fact.size();
    if (curSize >= n + 1) {
      return false;
    }
    fact.resize(n + 1, 1);
    for (long long i = curSize; i < n + 1; i++) {
      if (i > 0) {
        fact[i] = i * fact[i - 1];
        fact[i] %= MODULO;
      }
    }
    return true;
  }
  long long ncr(long long n, long long r) {
    if (n < r) {
      return 0;
    }
    _expandFactorial(n + 1);
    long long ans = fact[n] % MODULO;
    ans *= powMod(fact[n - r], MODULO - 2);
    ans %= MODULO;
    ans *= powMod(fact[r], MODULO - 2);
    ans %= MODULO;
    return ans;
  }
  long long add(long long a, long long b) { return (a + b) % MODULO; }
  long long subtract(long long a, long long b) {
    long long ans = (a - b) % MODULO;
    if (ans < 0) {
      ans += MODULO;
    }
    return ans;
  }
  long long multiply(long long a, long long b) { return (a * b) % MODULO; }
  long long divide(long long a, long long b) {
    long long bInv = powMod(b, MODULO - 2);
    return (a * bInv) % MODULO;
  }
};
Arithmetic arithmetic(MOD);
void solve() {
  long long n, k;
  cin >> n >> k;
  if (n < k) {
    cout << "0\n";
    return;
  }
  long long ans = 0;
  for (long long mn = 1; mn <= n; mn++) {
    long long numDivisors = n / mn;
    ;
    ;
    ans += arithmetic.ncr(numDivisors - 1, k - 1);
    ans %= MOD;
  }
  cout << ans << "\n";
  return;
}
int main() {
  ios::sync_with_stdio(false);
  int t = 1;
  if (MULTIPLE_TEST_CASES) cin >> t;
  for (long long i = 0; i < t; i++) {
    solve();
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

500000 1


(G.2) Fast Input

1 500000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A, typename B> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
ostream &operator<<(ostream &os, const pair<A, B> &p) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  return os << '(' << p.first << ' ' << p.second << ')'; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T_container, typename T = typename enable_if< /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
                                    !is_same<T_container, string>::value, /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
                                    typename T_container::value_type>::type> /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
ostream &operator<<(ostream &os, const T_container &v) { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  os << '{'; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  string sep; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  for (const T &x : v) os << sep << x, sep = ", "; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  return os << '}'; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
const bool MULTIPLE_TEST_CASES = false; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 998244353; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
const long long N = 1e5 + 5; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1e12; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
struct Arithmetic { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  long long MODULO; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> fact; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  Arithmetic(long long m = 1e9 + 7) { MODULO = m; } /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  long long powMod(long long a, long long p) { /* line 24 slow_hit_count: 31000000, fast_hit_count: 0 */
    if (p == 0) { /* line 25 slow_hit_count: 31000000, fast_hit_count: 0 */
      return 1; /* line 26 slow_hit_count: 1000000, fast_hit_count: 0 */
    } else if (p % 2 == 0) { /* line 27 slow_hit_count: 30000000, fast_hit_count: 0 */
      long long val = powMod(a, p / 2); /* line 28 slow_hit_count: 2000000, fast_hit_count: 0 */
      return (val * val) % MODULO; /* line 29 slow_hit_count: 2000000, fast_hit_count: 0 */
    } else { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      long long val = powMod(a, (p - 1) / 2); /* line 31 slow_hit_count: 28000000, fast_hit_count: 0 */
      return ((a % MODULO) * ((val * val) % MODULO)) % MODULO; /* line 32 slow_hit_count: 28000000, fast_hit_count: 0 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  bool _expandFactorial(long long n) { /* line 35 slow_hit_count: 500000, fast_hit_count: 0 */
    long long curSize = fact.size(); /* line 36 slow_hit_count: 500000, fast_hit_count: 0 */
    if (curSize >= n + 1) { /* line 37 slow_hit_count: 500000, fast_hit_count: 0 */
      return false; /* line 38 slow_hit_count: 499999, fast_hit_count: 0 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    fact.resize(n + 1, 1); /* line 40 slow_hit_count: 1, fast_hit_count: 0 */
    for (long long i = curSize; i < n + 1; i++) { /* line 41 slow_hit_count: 500002, fast_hit_count: 0 */
      if (i > 0) { /* line 42 slow_hit_count: 500001, fast_hit_count: 0 */
        fact[i] = i * fact[i - 1]; /* line 43 slow_hit_count: 500000, fast_hit_count: 0 */
        fact[i] %= MODULO; /* line 44 slow_hit_count: 500000, fast_hit_count: 0 */
      } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    return true; /* line 47 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  long long ncr(long long n, long long r) { /* line 49 slow_hit_count: 500000, fast_hit_count: 0 */
    if (n < r) { /* line 50 slow_hit_count: 500000, fast_hit_count: 0 */
      return 0; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    _expandFactorial(n + 1); /* line 53 slow_hit_count: 500000, fast_hit_count: 0 */
    long long ans = fact[n] % MODULO; /* line 54 slow_hit_count: 500000, fast_hit_count: 0 */
    ans *= powMod(fact[n - r], MODULO - 2); /* line 55 slow_hit_count: 500000, fast_hit_count: 0 */
    ans %= MODULO; /* line 56 slow_hit_count: 500000, fast_hit_count: 0 */
    ans *= powMod(fact[r], MODULO - 2); /* line 57 slow_hit_count: 500000, fast_hit_count: 0 */
    ans %= MODULO; /* line 58 slow_hit_count: 500000, fast_hit_count: 0 */
    return ans; /* line 59 slow_hit_count: 500000, fast_hit_count: 0 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  long long add(long long a, long long b) { return (a + b) % MODULO; } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  long long subtract(long long a, long long b) { /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    long long ans = (a - b) % MODULO; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    if (ans < 0) { /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      ans += MODULO; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    return ans; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  long long multiply(long long a, long long b) { return (a * b) % MODULO; } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  long long divide(long long a, long long b) { /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    long long bInv = powMod(b, MODULO - 2); /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
    return (a * bInv) % MODULO; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
Arithmetic arithmetic(MOD); /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, k; /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 78 slow_hit_count: 1, fast_hit_count: 1 */
  if (n < k) { /* line 79 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "0\n"; /* line 80 slow_hit_count: 0, fast_hit_count: 1 */
    return; /* line 81 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 83 slow_hit_count: 1, fast_hit_count: 0 */
  for (long long mn = 1; mn <= n; mn++) { /* line 84 slow_hit_count: 500001, fast_hit_count: 0 */
    long long numDivisors = n / mn; /* line 85 slow_hit_count: 500000, fast_hit_count: 0 */
    ; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
    ; /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
    ans += arithmetic.ncr(numDivisors - 1, k - 1); /* line 88 slow_hit_count: 500000, fast_hit_count: 0 */
    ans %= MOD; /* line 89 slow_hit_count: 500000, fast_hit_count: 0 */
  } /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 91 slow_hit_count: 1, fast_hit_count: 0 */
  return; /* line 92 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 94 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 95 slow_hit_count: 1, fast_hit_count: 1 */
  int t = 1; /* line 96 slow_hit_count: 1, fast_hit_count: 1 */
  if (MULTIPLE_TEST_CASES) cin >> t; /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < t; i++) { /* line 98 slow_hit_count: 2, fast_hit_count: 2 */
    solve(); /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 102 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit count data, the following observations can be made about the inefficiencies in the C++ program:

1. **`powMod` Function:**
   - The function `powMod` is heavily utilized in the slow run, with **31,000,000 hits** for line 24 and associated lines. There are no hits in the fast run.
   - This function is called frequently due to the `ncr` function's recursive calls to calculate modular inverses.
  
2. **`ncr` Function:**
   - The `ncr` function is called **500,000 times** in the slow run. Each call involves multiple `powMod` operations, which contribute significantly to the overall execution time.
  
3. **Loop in `solve`:**
   - The for loop in the `solve` function (line 84) iterating over `mn` from 1 to `n` is executed **500,001 times** in the slow run.
   - Each iteration involves a call to `ncr`, which is expensive as described.

### Phase 2: Derive Performance-Characterizing Invariants

The analysis suggests potential performance bottlenecks related to the mathematical operations and loop iterations. The following invariants capture the conditions under which the code is likely to slow down:

1. **Invariant 1: High Iteration Count in Loops**
   - Natural Language Description: “When `n` is large relative to `k`, the loop iterating up to `n` results in a high number of iterations, each involving complex recursive calculations, leading to significant slowdowns.”

2. **Invariant 2: Frequent Calls to Expensive Functions**
   - Natural Language Description: “Frequent calls to the `ncr` function, which relies on `powMod`, can slow down the program considerably, especially when `n` is large and close to its constraint limit.”

3. **Invariant 3: Recursive Function Complexity**
   - Natural Language Description: “The recursive nature of `powMod` for calculating modular inverses becomes a bottleneck with deep recursive calls, particularly when processing large numbers in combinatorial calculations.”

These invariants help identify why the program runs efficiently for the fast input but slows significantly for the slow input. The emphasis is on the scale of `n` and `k` and how they trigger extensive looping and recursion, which the current implementation handles inefficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
We define x mod y as the remainder of division of x by y (\% operator in C++ or Java, mod operator in Pascal).

Let's call an array of positive integers [a_1, a_2, ..., a_k] stable if for every permutation p of integers from 1 to k, and for every non-negative integer x, the following condition is met:

 (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k = (((x mod a_{p_1}) mod a_{p_2}) ... mod a_{p_{k - 1}}) mod a_{p_k}  

That is, for each non-negative integer x, the value of (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k does not change if we reorder the elements of the array a.

For two given integers n and k, calculate the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n.

Input

The only line contains two integers n and k (1 ≤ n, k ≤ 5 ⋅ 10^5).

Output

Print one integer — the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n. Since the answer may be large, print it modulo 998244353.

Examples

Input


7 3


Output


16


Input


3 7


Output


0


Input


1337 42


Output


95147305


Input


1 1


Output


1


Input


500000 1


Output


500000

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Invariants in C++

Based on the performance-characterizing invariants derived in Phase 2, I will now provide a C++ implementation for each invariant check.

1. **Invariant 1: High Iteration Count in Loops**
   ```cpp
   void check_iteration_count(long long n, long long k) {
       if (n > 100000 && k < 50) {
           cerr << "Warning: High iteration count in loops due to large n and small k." << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Frequent Calls to Expensive Functions**
   ```cpp
   void check_expensive_function_calls(long long n, long long k) {
       if (n > 100000 && k < 50) {
           cerr << "Warning: Frequent calls to expensive functions due to large n and small k." << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Recursive Function Complexity**
   ```cpp
   void check_recursive_function_complexity(long long n) {
       if (n > 100000) {
           cerr << "Warning: High complexity in recursive function due to large n." << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checks into Original Program

The following is the updated C++ code with the invariant checks integrated into effective points in the control flow.

```cpp
#include <bits/stdc++.h>
using namespace std;

template <typename A, typename B>
ostream &operator<<(ostream &os, const pair<A, B> &p) {
  return os << '(' << p.first << ' ' << p.second << ')';
}

template <typename T_container, typename T = typename enable_if<
                                    !is_same<T_container, string>::value,
                                    typename T_container::value_type>::type>
ostream &operator<<(ostream &os, const T_container &v) {
  os << '{';
  string sep;
  for (const T &x : v) os << sep << x, sep = ", ";
  return os << '}';
}

const bool MULTIPLE_TEST_CASES = false;
const long long MOD = 998244353;
const long long N = 1e5 + 5;
const long long INF = 1e12;

struct Arithmetic {
  long long MODULO;
  vector<long long> fact;
  Arithmetic(long long m = 1e9 + 7) { MODULO = m; }
  long long powMod(long long a, long long p) {
    if (p == 0) {
      return 1;
    } else if (p % 2 == 0) {
      long long val = powMod(a, p / 2);
      return (val * val) % MODULO;
    } else {
      long long val = powMod(a, (p - 1) / 2);
      return ((a % MODULO) * ((val * val) % MODULO)) % MODULO;
    }
  }
  bool _expandFactorial(long long n) {
    long long curSize = fact.size();
    if (curSize >= n + 1) {
      return false;
    }
    fact.resize(n + 1, 1);
    for (long long i = curSize; i < n + 1; i++) {
      if (i > 0) {
        fact[i] = i * fact[i - 1];
        fact[i] %= MODULO;
      }
    }
    return true;
  }
  long long ncr(long long n, long long r) {
    if (n < r) {
      return 0;
    }
    _expandFactorial(n + 1);
    long long ans = fact[n] % MODULO;
    ans *= powMod(fact[n - r], MODULO - 2);
    ans %= MODULO;
    ans *= powMod(fact[r], MODULO - 2);
    ans %= MODULO;
    return ans;
  }
  long long add(long long a, long long b) { return (a + b) % MODULO; }
  long long subtract(long long a, long long b) {
    long long ans = (a - b) % MODULO;
    if (ans < 0) {
      ans += MODULO;
    }
    return ans;
  }
  long long multiply(long long a, long long b) { return (a * b) % MODULO; }
  long long divide(long long a, long long b) {
    long long bInv = powMod(b, MODULO - 2);
    return (a * bInv) % MODULO;
  }
};

Arithmetic arithmetic(MOD);

void check_iteration_count(long long n, long long k) {
    if (n > 100000 && k < 50) {
        cerr << "Warning: High iteration count in loops due to large n and small k." << endl;
        abort();
    }
}

void check_expensive_function_calls(long long n, long long k) {
    if (n > 100000 && k < 50) {
        cerr << "Warning: Frequent calls to expensive functions due to large n and small k." << endl;
        abort();
    }
}

void check_recursive_function_complexity(long long n) {
    if (n > 100000) {
        cerr << "Warning: High complexity in recursive function due to large n." << endl;
        abort();
    }
}

void solve() {
  long long n, k;
  cin >> n >> k;
  
  // Insert invariant checks before entering main computation loop
  check_iteration_count(n, k);
  check_expensive_function_calls(n, k);
  check_recursive_function_complexity(n);

  if (n < k) {
    cout << "0\n";
    return;
  }
  
  long long ans = 0;
  for (long long mn = 1; mn <= n; mn++) {
    long long numDivisors = n / mn;
    ans += arithmetic.ncr(numDivisors - 1, k - 1);
    ans %= MOD;
  }
  cout << ans << "\n";
  return;
}

int main() {
  ios::sync_with_stdio(false);
  int t = 1;
  if (MULTIPLE_TEST_CASES) cin >> t;
  for (long long i = 0; i < t; i++) {
    solve();
  }
  return 0;
}
```

### Explanation
- **Invariant checks** are added prior to the main computation to avoid impacting the performance inside the loop.
- **Check Functions**: Each check is implemented as a function to keep the main code clean and modular.
- The checks help identify potential slowdowns by aborting when the program reaches conditions that historically caused performance issues. This setup aids in early detection during testing and helps a fuzzer identify problematic input scenarios.

