system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

We define x mod y as the remainder of division of x by y (\% operator in C++ or Java, mod operator in Pascal).

Let's call an array of positive integers [a_1, a_2, ..., a_k] stable if for every permutation p of integers from 1 to k, and for every non-negative integer x, the following condition is met:

 (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k = (((x mod a_{p_1}) mod a_{p_2}) ... mod a_{p_{k - 1}}) mod a_{p_k}  

That is, for each non-negative integer x, the value of (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k does not change if we reorder the elements of the array a.

For two given integers n and k, calculate the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n.

Input

The only line contains two integers n and k (1 ≤ n, k ≤ 5 ⋅ 10^5).

Output

Print one integer — the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n. Since the answer may be large, print it modulo 998244353.

Examples

Input


7 3


Output


16


Input


3 7


Output


0


Input


1337 42


Output


95147305


Input


1 1


Output


1


Input


500000 1


Output


500000

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
class Debugger {
 public:
  template <typename T>
  void printVector(vector<T> const &vec, bool printSize = true) {
    if (printSize) {
      cout << vec.size() << endl;
    }
    for (auto &elem : vec) {
      cout << elem << " ";
    }
    cout << endl;
  }
  template <typename T>
  void printMatrix(vector<vector<T>> const &matrix) {
    cout << matrix.size() << " ";
    if (!matrix.empty()) {
      cout << matrix[0].size();
    }
    cout << endl;
    for (auto &vec : matrix) {
      printVector(vec, false);
    }
    cout << endl;
  }
};
const int maxN = 100005;
const int MOD = 998244353;
class TaskE {
 private:
  Debugger debugger;
  vector<int> f;
  int mul(int a, int b) { return (long long)a * b % MOD; }
  int pot(int b, int e) {
    int ans = 1;
    while (e) {
      if (e & 1) {
        ans = mul(ans, b);
      }
      b = mul(b, b);
      e /= 2;
    }
    return ans;
  }
  int inv(int x) { return pot(x, MOD - 2); }
  int comb(int n, int k) {
    int ans = f[n];
    ans = mul(ans, inv(f[n - k]));
    ans = mul(ans, inv(f[k]));
    return ans;
  }

 public:
  void solveOne(int it) {
    int limit, n;
    cin >> limit >> n;
    f.resize(limit + 1);
    f[0] = 1;
    for (int i = 1; i <= limit; i++) {
      f[i] = mul(i, f[i - 1]);
    }
    int ans = 0;
    for (int first = 1; first <= limit; first++) {
      int k = limit / first - 1;
      if (k < n - 1) {
        continue;
      }
      ans += comb(k, n - 1);
      ans %= MOD;
    }
    cout << ans << endl;
  }
  void solve() {
    int tc = 1;
    for (int it = 1; it <= tc; it++) {
      solveOne(it);
    }
  }
};
int main() {
  ios_base::sync_with_stdio(false);
  TaskE solver;
  solver.solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

500000 1


(G.2) Fast Input

1 500000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
class Debugger { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  template <typename T> /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  void printVector(vector<T> const &vec, bool printSize = true) { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
    if (printSize) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
      cout << vec.size() << endl; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto &elem : vec) { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
      cout << elem << " "; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    cout << endl; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  template <typename T> /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  void printMatrix(vector<vector<T>> const &matrix) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    cout << matrix.size() << " "; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    if (!matrix.empty()) { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      cout << matrix[0].size(); /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    cout << endl; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto &vec : matrix) { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      printVector(vec, false); /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    cout << endl; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
const int maxN = 100005; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 998244353; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
class TaskE { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
 private: /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  Debugger debugger; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> f; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  int mul(int a, int b) { return (long long)a * b % MOD; } /* line 34 slow_hit_count: 59500000, fast_hit_count: 1 */
  int pot(int b, int e) { /* line 35 slow_hit_count: 1000000, fast_hit_count: 0 */
    int ans = 1; /* line 36 slow_hit_count: 1000000, fast_hit_count: 0 */
    while (e) { /* line 37 slow_hit_count: 31000000, fast_hit_count: 0 */
      if (e & 1) { /* line 38 slow_hit_count: 30000000, fast_hit_count: 0 */
        ans = mul(ans, b); /* line 39 slow_hit_count: 28000000, fast_hit_count: 0 */
      } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
      b = mul(b, b); /* line 41 slow_hit_count: 30000000, fast_hit_count: 0 */
      e /= 2; /* line 42 slow_hit_count: 30000000, fast_hit_count: 0 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    return ans; /* line 44 slow_hit_count: 1000000, fast_hit_count: 0 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  int inv(int x) { return pot(x, MOD - 2); } /* line 46 slow_hit_count: 1000000, fast_hit_count: 0 */
  int comb(int n, int k) { /* line 47 slow_hit_count: 500000, fast_hit_count: 0 */
    int ans = f[n]; /* line 48 slow_hit_count: 500000, fast_hit_count: 0 */
    ans = mul(ans, inv(f[n - k])); /* line 49 slow_hit_count: 500000, fast_hit_count: 0 */
    ans = mul(ans, inv(f[k])); /* line 50 slow_hit_count: 500000, fast_hit_count: 0 */
    return ans; /* line 51 slow_hit_count: 500000, fast_hit_count: 0 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  void solveOne(int it) { /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
    int limit, n; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> limit >> n; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
    f.resize(limit + 1); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
    f[0] = 1; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i <= limit; i++) { /* line 60 slow_hit_count: 500001, fast_hit_count: 2 */
      f[i] = mul(i, f[i - 1]); /* line 61 slow_hit_count: 500000, fast_hit_count: 1 */
    } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    int ans = 0; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
    for (int first = 1; first <= limit; first++) { /* line 64 slow_hit_count: 500001, fast_hit_count: 2 */
      int k = limit / first - 1; /* line 65 slow_hit_count: 500000, fast_hit_count: 1 */
      if (k < n - 1) { /* line 66 slow_hit_count: 500000, fast_hit_count: 1 */
        continue; /* line 67 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
      ans += comb(k, n - 1); /* line 69 slow_hit_count: 500000, fast_hit_count: 0 */
      ans %= MOD; /* line 70 slow_hit_count: 500000, fast_hit_count: 0 */
    } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans << endl; /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  void solve() { /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
    int tc = 1; /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
    for (int it = 1; it <= tc; it++) { /* line 76 slow_hit_count: 2, fast_hit_count: 2 */
      solveOne(it); /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 79 slow_hit_count: 1, fast_hit_count: 1 */
}; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
  TaskE solver; /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
  solver.solve(); /* line 84 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 86 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the provided C++ code and derive performance-characterizing invariants, let's follow the tasks outlined:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The primary function of interest is `solveOne`, where most computation occurs.
   - Line `64` (`for (int first = 1; first <= limit; first++)`) and `66` (`if (k < n - 1) {`) are executed 500,001 times during the slow input run.
   - Line `69` (`ans += comb(k, n - 1);`) is called 500,000 times in the slow input but not at all with the fast input.
   - The function `mul` (lines `34`, `39`, `41`) and `pot` (lines `35-44`) are heavily executed in the slow input, with `mul` hit 59,500,000 times.

2. **Pinpoint Significant Lines or Functions:**
   - Lines within `pot` (recursive power calculation) and `comb` (combination calculation) are heavily used, suggesting these operations dominate the runtime for slow input.
   - The loop in `solveOne` iterates over all integers up to `limit`, and for each `first`, calculates combinations involving factorial operations, which can be costly.

3. **Interaction with Data Structures:**
   - The code initializes a factorial array `f` and makes heavy use of combinations calculated through factorial manipulation.
   - The factorial operations and combination computations (`comb`) are expensive, especially as `limit` grows large.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following natural language invariants:

1. **Invariant on Limit and Factorial Computation:**
   - **Description:** "Performance degrades significantly when the limit is large, leading to extensive factorial computations and combination calculations. Particularly, when the divisor `first` in the loop results in many valid combinations, factorials are calculated repeatedly."
   - **Threshold Suggestion:** When the limit is close to its maximum constraint and requires computing factorials and combinations frequently.

2. **Invariant on Combination Computation:**
   - **Description:** "A slowdown is observed if the combination function (`comb`) is invoked repeatedly with high values of `k`, causing intensive computation of inverse factorials."
   - **Threshold Suggestion:** When the input size `n` leads to a large number of potential combinations, especially when `k` is not trivially small.

3. **Invariant on Input Size and Loop Iterations:**
   - **Description:** "When `n` is small compared to `limit`, the outer loop (`for first`) leads to many iterations, each requiring expensive modular multiplications and power operations."
   - **Threshold Suggestion:** If `n` is small but `limit` is large, causing the loop to iterate excessively.

These invariants help identify the operational paths that lead to higher computational costs, especially around factorial and combination calculations under specific input conditions. They provide insights into the program's complexity and help anticipate slowdowns under similar future scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
We define x mod y as the remainder of division of x by y (\% operator in C++ or Java, mod operator in Pascal).

Let's call an array of positive integers [a_1, a_2, ..., a_k] stable if for every permutation p of integers from 1 to k, and for every non-negative integer x, the following condition is met:

 (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k = (((x mod a_{p_1}) mod a_{p_2}) ... mod a_{p_{k - 1}}) mod a_{p_k}  

That is, for each non-negative integer x, the value of (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k does not change if we reorder the elements of the array a.

For two given integers n and k, calculate the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n.

Input

The only line contains two integers n and k (1 ≤ n, k ≤ 5 ⋅ 10^5).

Output

Print one integer — the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n. Since the answer may be large, print it modulo 998244353.

Examples

Input


7 3


Output


16


Input


3 7


Output


0


Input


1337 42


Output


95147305


Input


1 1


Output


1


Input


500000 1


Output


500000

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, here are the C++ code snippets that implement runtime checks for each invariant:

1. **Invariant on Limit and Factorial Computation:**

```cpp
void check_factorial_invariant(int limit) {
    if (limit > 100000) { // Example threshold for large limits leading to excessive factorial computations
        cerr << "Warning: Performance bottleneck condition triggered! - Large limit causes excessive factorial computations." << endl;
        abort();
    }
}
```

2. **Invariant on Combination Computation:**

```cpp
void check_combination_invariant(int k, int n) {
    if (k > 10000 && n < 100) { // Example thresholds for excessive combination calculations
        cerr << "Warning: Performance bottleneck condition triggered! - Excessive combination calculations due to large k." << endl;
        abort();
    }
}
```

3. **Invariant on Input Size and Loop Iterations:**

```cpp
void check_loop_invariant(int n, int limit) {
    if (n < 10 && limit > 100000) { // Example condition where the loop iterations could become excessive
        cerr << "Warning: Performance bottleneck condition triggered! - Large loop iterations due to small n and large limit." << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Below is the instrumented C++ code with the performance checkers integrated at strategic points:

```cpp
#include <bits/stdc++.h>
using namespace std;

class Debugger {
public:
    template <typename T>
    void printVector(vector<T> const &vec, bool printSize = true) {
        if (printSize) {
            cout << vec.size() << endl;
        }
        for (auto &elem : vec) {
            cout << elem << " ";
        }
        cout << endl;
    }
    template <typename T>
    void printMatrix(vector<vector<T>> const &matrix) {
        cout << matrix.size() << " ";
        if (!matrix.empty()) {
            cout << matrix[0].size();
        }
        cout << endl;
        for (auto &vec : matrix) {
            printVector(vec, false);
        }
        cout << endl;
    }
};

const int maxN = 100005;
const int MOD = 998244353;

class TaskE {
private:
    Debugger debugger;
    vector<int> f;
    
    int mul(int a, int b) { return (long long)a * b % MOD; }
    
    int pot(int b, int e) {
        int ans = 1;
        while (e) {
            if (e & 1) {
                ans = mul(ans, b);
            }
            b = mul(b, b);
            e /= 2;
        }
        return ans;
    }
    
    int inv(int x) { return pot(x, MOD - 2); }
    
    int comb(int n, int k) {
        int ans = f[n];
        ans = mul(ans, inv(f[n - k]));
        ans = mul(ans, inv(f[k]));
        return ans;
    }

    void check_factorial_invariant(int limit) {
        if (limit > 100000) {
            cerr << "Warning: Performance bottleneck condition triggered! - Large limit causes excessive factorial computations." << endl;
            abort();
        }
    }
    
    void check_combination_invariant(int k, int n) {
        if (k > 10000 && n < 100) {
            cerr << "Warning: Performance bottleneck condition triggered! - Excessive combination calculations due to large k." << endl;
            abort();
        }
    }
    
    void check_loop_invariant(int n, int limit) {
        if (n < 10 && limit > 100000) {
            cerr << "Warning: Performance bottleneck condition triggered! - Large loop iterations due to small n and large limit." << endl;
            abort();
        }
    }

public:
    void solveOne(int it) {
        int limit, n;
        cin >> limit >> n;

        // Apply invariant checks
        check_factorial_invariant(limit);
        check_loop_invariant(n, limit);

        f.resize(limit + 1);
        f[0] = 1;
        for (int i = 1; i <= limit; i++) {
            f[i] = mul(i, f[i - 1]);
        }
        
        int ans = 0;
        for (int first = 1; first <= limit; first++) {
            int k = limit / first - 1;
            if (k < n - 1) {
                continue;
            }
            // Check combination invariant before calculating combinations
            check_combination_invariant(k, n);
            ans += comb(k, n - 1);
            ans %= MOD;
        }
        cout << ans << endl;
    }
    
    void solve() {
        int tc = 1;
        for (int it = 1; it <= tc; it++) {
            solveOne(it);
        }
    }
};

int main() {
    ios_base::sync_with_stdio(false);
    TaskE solver;
    solver.solve();
    return 0;
}
```

### Comments on Code

- **Factorial Invariant:** Checks if `limit` is excessive before factorial calculations begin, as high limits lead to intensive computations.
- **Combination Invariant:** Verifies if `k` is large relative to `n` before computing combinations, to avoid costly operations.
- **Loop Invariant:** Monitors the relationship between `n` and `limit` before the loop to preempt excessive iterations that slow down performance. 

These checks ensure that potential performance bottlenecks are detected early in execution, allowing for debugging and optimization opportunities.

