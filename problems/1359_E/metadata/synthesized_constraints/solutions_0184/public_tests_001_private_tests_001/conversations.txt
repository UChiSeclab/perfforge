system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

We define x mod y as the remainder of division of x by y (\% operator in C++ or Java, mod operator in Pascal).

Let's call an array of positive integers [a_1, a_2, ..., a_k] stable if for every permutation p of integers from 1 to k, and for every non-negative integer x, the following condition is met:

 (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k = (((x mod a_{p_1}) mod a_{p_2}) ... mod a_{p_{k - 1}}) mod a_{p_k}  

That is, for each non-negative integer x, the value of (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k does not change if we reorder the elements of the array a.

For two given integers n and k, calculate the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n.

Input

The only line contains two integers n and k (1 ≤ n, k ≤ 5 ⋅ 10^5).

Output

Print one integer — the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n. Since the answer may be large, print it modulo 998244353.

Examples

Input


7 3


Output


16


Input


3 7


Output


0


Input


1337 42


Output


95147305


Input


1 1


Output


1


Input


500000 1


Output


500000

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, k;
long long f[500005];
const int oo = 998244353;
bool isPrime(int u) {
  if (u <= 1) return false;
  for (int i = 2; i * i <= u; i++)
    if (u % i == 0) return false;
  return true;
}
long long pow(long long a, long long n, long long m) {
  if (n == 0) return 1;
  if (n % 2 == 0) {
    long long tg = pow(a, n / 2, m);
    return tg * tg % m;
  }
  return pow(a, n - 1, m) * a % oo;
}
long long inverseModule(long long a, long long m) { return pow(a, m - 2, m); }
long long divideModule(long long a, long long b, long long m) {
  return a * inverseModule(b, m) % m;
}
long long C(int n, int k) {
  return divideModule(divideModule(f[n], f[k], oo), f[n - k], oo);
}
void input() {
  cin >> n >> k;
  f[0] = 1;
  for (int i = 1; i <= n; i++) f[i] = f[i - 1] * i % oo;
  long long res = 0;
  for (int i = 1; i <= n; i++) {
    if (i * k <= n)
      res = (res + C(n / i - 1, k - 1)) % oo;
    else
      break;
  }
  cout << res;
}
void solve() {}
int main() {
  input();
  solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

500000 1


(G.2) Fast Input

1 500000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long f[500005]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int oo = 998244353; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool isPrime(int u) { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  if (u <= 1) return false; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 2; i * i <= u; i++) /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    if (u % i == 0) return false; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
long long pow(long long a, long long n, long long m) { /* line 12 slow_hit_count: 58000000, fast_hit_count: 0 */
  if (n == 0) return 1; /* line 13 slow_hit_count: 58000000, fast_hit_count: 0 */
  if (n % 2 == 0) { /* line 14 slow_hit_count: 57000000, fast_hit_count: 0 */
    long long tg = pow(a, n / 2, m); /* line 15 slow_hit_count: 29000000, fast_hit_count: 0 */
    return tg * tg % m; /* line 16 slow_hit_count: 29000000, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  return pow(a, n - 1, m) * a % oo; /* line 18 slow_hit_count: 28000000, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
long long inverseModule(long long a, long long m) { return pow(a, m - 2, m); } /* line 20 slow_hit_count: 1000000, fast_hit_count: 0 */
long long divideModule(long long a, long long b, long long m) { /* line 21 slow_hit_count: 1000000, fast_hit_count: 0 */
  return a * inverseModule(b, m) % m; /* line 22 slow_hit_count: 1000000, fast_hit_count: 0 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
long long C(int n, int k) { /* line 24 slow_hit_count: 500000, fast_hit_count: 0 */
  return divideModule(divideModule(f[n], f[k], oo), f[n - k], oo); /* line 25 slow_hit_count: 500000, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
void input() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  f[0] = 1; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) f[i] = f[i - 1] * i % oo; /* line 30 slow_hit_count: 500001, fast_hit_count: 2 */
  long long res = 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 32 slow_hit_count: 500001, fast_hit_count: 1 */
    if (i * k <= n) /* line 33 slow_hit_count: 500000, fast_hit_count: 1 */
      res = (res + C(n / i - 1, k - 1)) % oo; /* line 34 slow_hit_count: 500000, fast_hit_count: 0 */
    else /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      break; /* line 36 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  cout << res; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
void solve() {} /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  input(); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 44 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose why the program runs slowly for the "slow" input and derive performance-characterizing invariants, we'll follow the tasks outlined:

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Compare Line-level Hit Counts:**
   - The `pow` function (lines 12–19) is hit 58,000,000 times in the slow run but not at all in the fast run. This suggests it is a significant contributor to the slowdown.
   - The `inverseModule` and `divideModule` functions (lines 20–23) are called 1,000,000 times, indicating frequent computation.
   - The `C` function (lines 24–25) is invoked 500,000 times, further contributing to the inefficiency.
   - The loop in the `input` function (line 32) iterates 500,000 times for the slow input, leading to the aforementioned function calls.

2. **Pinpointing Lines/Functions with High Hits:**
   - The `pow` function's recursive calls (lines 14–18) are a major hotspot due to the modular exponentiation being repeatedly calculated.
   - The `C` function, which computes combinations, frequently calls the `divideModule` function, increasing overhead.
   - The loop condition based on `i * k <= n` (line 33) significantly extends the loop's duration due to large `n`.

3. **Infer Data Structure Interactions:**
   - The factorial precomputation loop (line 30) iterates through all values up to `n`, which is fine, but subsequent frequent invocations of `pow` for modular arithmetic in a nested fashion lead to inefficiencies.

### Phase 2: Deriving Performance-Characterizing Invariants

1. **Natural Language Statements Describing Slow Conditions:**

   - **Invariant #1: Modular Exponentiation Overuse**
     - Natural Language: "If the program must compute modular exponentiation recursively a large number of times, especially when iterative computation could be more efficient, performance may degrade."
     - Threshold Suggestion: High hit counts in the `pow` function suggest that recursive computations and depth could be optimized or replaced with iterative methods when `n` or `k` is large.

   - **Invariant #2: High Frequency of Combination Calculations**
     - Natural Language: "When calculating combinations frequently with a large upper limit (`n`) and smaller subset size (`k`), the repeated modular arithmetic can lead to performance bottlenecks."
     - Threshold Suggestion: Avoid recalculating combinations unnecessarily, especially when `n` and `k` are close to their maximum values, leading to many `C(n / i - 1, k - 1)` computations.

   - **Invariant #3: Large Loop Iterations with Heavy Calculations**
     - Natural Language: "If a loop iterates up to a large `n`, performing heavy computations within each iteration, such as modular arithmetic with recursive calls, it can significantly slow down the program."
     - Threshold Suggestion: Consider optimizing the loop (line 32) condition checks or computations within to mitigate repeated heavy operations.

2. **General Insights for Future Scenarios:**
   - Focus on optimizing or refactoring high-frequency, high-cost computations like modular exponentiation or combinations, especially when involving large numbers.
   - Pre-compute results where possible (e.g., caching values) and streamline recursive operations to avoid redundancy.
   - Ensure calculations within loops are minimized or optimized for larger datasets.

These performance-characterizing invariants provide guidance on focusing optimization efforts on critical sections where inefficiencies are most pronounced, especially when working with maximum constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
We define x mod y as the remainder of division of x by y (\% operator in C++ or Java, mod operator in Pascal).

Let's call an array of positive integers [a_1, a_2, ..., a_k] stable if for every permutation p of integers from 1 to k, and for every non-negative integer x, the following condition is met:

 (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k = (((x mod a_{p_1}) mod a_{p_2}) ... mod a_{p_{k - 1}}) mod a_{p_k}  

That is, for each non-negative integer x, the value of (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k does not change if we reorder the elements of the array a.

For two given integers n and k, calculate the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n.

Input

The only line contains two integers n and k (1 ≤ n, k ≤ 5 ⋅ 10^5).

Output

Print one integer — the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n. Since the answer may be large, print it modulo 998244353.

Examples

Input


7 3


Output


16


Input


3 7


Output


0


Input


1337 42


Output


95147305


Input


1 1


Output


1


Input


500000 1


Output


500000

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants as C++ Checker Code

Let's translate the natural language performance invariants derived earlier into C++ code snippets. Each snippet includes a runtime check and an abort statement if the condition is met.

#### Invariant #1: Modular Exponentiation Overuse

```cpp
void check_modular_exponentiation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive modular exponentiation!" << endl;
        abort();
    }
}

// This condition could be checked where the pow function is frequently used
// Example condition: if the pow function is called with high n values
```

#### Invariant #2: High Frequency of Combination Calculations

```cpp
void check_combination_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent combination calculations!" << endl;
        abort();
    }
}

// This condition could be checked before entering loops that make heavy combinatorial calculations
// Example condition: depending on values of n and k, such as n / i growing large
```

#### Invariant #3: Large Loop Iterations with Heavy Calculations

```cpp
void check_large_loop_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large loop with heavy calculations!" << endl;
        abort();
    }
}

// This condition could be checked before starting the main loop in the input function
// Example condition: if n is significantly large and will cause many iterations
```

### Phase 4: Integrating Checks into the Original Program

Now integrate these checks into the given C++ program at strategic points to detect when the program may encounter performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, k;
long long f[500005];
const int oo = 998244353;

bool isPrime(int u) {
    if (u <= 1) return false;
    for (int i = 2; i * i <= u; i++)
        if (u % i == 0) return false;
    return true;
}

long long pow(long long a, long long n, long long m) {
    if (n == 0) return 1;
    if (n % 2 == 0) {
        long long tg = pow(a, n / 2, m);
        return tg * tg % m;
    }
    return pow(a, n - 1, m) * a % oo;
}

long long inverseModule(long long a, long long m) {
    return pow(a, m - 2, m);
}

long long divideModule(long long a, long long b, long long m) {
    return a * inverseModule(b, m) % m;
}

long long C(int n, int k) {
    return divideModule(divideModule(f[n], f[k], oo), f[n - k], oo);
}

void input() {
    cin >> n >> k;
    f[0] = 1;
    
    // Check for large loop invariant before factorial computation
    check_large_loop_invariant(n > 100000); // Assuming large n results in heavy computation
    
    for (int i = 1; i <= n; i++) f[i] = f[i - 1] * i % oo;
    
    long long res = 0;
    
    for (int i = 1; i <= n; i++) {
        if (i * k <= n) {
            // Check for frequent combination calculations
            check_combination_invariant((n / i - 1) * (k - 1) > 100000); // Simplified condition based on frequency
            
            res = (res + C(n / i - 1, k - 1)) % oo;
        } else {
            break;
        }
    }
    cout << res;
}

void solve() {}

int main() {
    input();
    solve();
}
```

### Explanation:

- **Invariant #1** is placed conceptually where the `pow` function is called frequently, suggesting a condition based on input sizes leading to deeper recursion. It is not explicitly inserted in the code since its usage is inherent in the program's logic.
- **Invariant #2** checks before combinations are computed, particularly when large values of `n` and `k` can cause frequent calculations that could lead to inefficiencies.
- **Invariant #3** is checked before the main loop that iterates `n` times, where calculations are most resource-intensive. 

These checks help ensure the program's execution paths are clear of potential bottlenecks and can be useful for debugging or testing scenarios.

