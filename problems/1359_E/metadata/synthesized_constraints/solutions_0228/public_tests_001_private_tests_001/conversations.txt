system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

We define x mod y as the remainder of division of x by y (\% operator in C++ or Java, mod operator in Pascal).

Let's call an array of positive integers [a_1, a_2, ..., a_k] stable if for every permutation p of integers from 1 to k, and for every non-negative integer x, the following condition is met:

 (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k = (((x mod a_{p_1}) mod a_{p_2}) ... mod a_{p_{k - 1}}) mod a_{p_k}  

That is, for each non-negative integer x, the value of (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k does not change if we reorder the elements of the array a.

For two given integers n and k, calculate the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n.

Input

The only line contains two integers n and k (1 ≤ n, k ≤ 5 ⋅ 10^5).

Output

Print one integer — the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n. Since the answer may be large, print it modulo 998244353.

Examples

Input


7 3


Output


16


Input


3 7


Output


0


Input


1337 42


Output


95147305


Input


1 1


Output


1


Input


500000 1


Output


500000

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int const MAXn = 5e5 + 2, MOD = 998244353;
long long fact[MAXn];
long long qp(long long a, long long e) {
  if (e == 0) return 1;
  if (e == 1) return a;
  if (!(e & 1)) {
    a = qp(a, e / 2);
    return a * a % MOD;
  }
  return a * qp(a, e - 1) % MOD;
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  int n, k;
  cin >> n >> k;
  if (k > n) {
    cout << 0 << "\n";
    return 0;
  }
  fact[0] = 1;
  for (long long i = 1; i <= n; i++) fact[i] = fact[i - 1] * i % MOD;
  long long sol = 0;
  for (int i = 1; i <= n; i++) {
    long long x = n / i;
    if (x < k) break;
    sol =
        (sol + (fact[x - 1] *
                qp(fact[x - 1 - (k - 1)] * fact[k - 1] % MOD, MOD - 2) % MOD)) %
        MOD;
  }
  cout << sol << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

500000 1


(G.2) Fast Input

1 500000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int const MAXn = 5e5 + 2, MOD = 998244353; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long fact[MAXn]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long qp(long long a, long long e) { /* line 5 slow_hit_count: 28500000, fast_hit_count: 0 */
  if (e == 0) return 1; /* line 6 slow_hit_count: 28500000, fast_hit_count: 0 */
  if (e == 1) return a; /* line 7 slow_hit_count: 28500000, fast_hit_count: 0 */
  if (!(e & 1)) { /* line 8 slow_hit_count: 28000000, fast_hit_count: 0 */
    a = qp(a, e / 2); /* line 9 slow_hit_count: 14500000, fast_hit_count: 0 */
    return a * a % MOD; /* line 10 slow_hit_count: 14500000, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return a * qp(a, e - 1) % MOD; /* line 12 slow_hit_count: 13500000, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  if (k > n) { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0 << "\n"; /* line 21 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 22 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  fact[0] = 1; /* line 24 slow_hit_count: 1, fast_hit_count: 0 */
  for (long long i = 1; i <= n; i++) fact[i] = fact[i - 1] * i % MOD; /* line 25 slow_hit_count: 500001, fast_hit_count: 0 */
  long long sol = 0; /* line 26 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 27 slow_hit_count: 500001, fast_hit_count: 0 */
    long long x = n / i; /* line 28 slow_hit_count: 500000, fast_hit_count: 0 */
    if (x < k) break; /* line 29 slow_hit_count: 500000, fast_hit_count: 0 */
    sol = /* line 30 slow_hit_count: 500000, fast_hit_count: 0 */
        (sol + (fact[x - 1] * /* line 31 slow_hit_count: 1000000, fast_hit_count: 0 */
                qp(fact[x - 1 - (k - 1)] * fact[k - 1] % MOD, MOD - 2) % MOD)) % /* line 32 slow_hit_count: 500000, fast_hit_count: 0 */
        MOD; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  cout << sol << "\n"; /* line 35 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 36 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance characteristics of the given C++ program, let's proceed through the two phases as outlined:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **High Hit Count Analysis**:
   - The function `qp` has a significantly higher hit count for the slow input compared to the fast input. Specifically, the lines within `qp` function (lines 6-12) get hit millions of times in the slow input case.
   - The loop on line 27 through line 34 iterates extensively in the slow input scenario, i.e., up to `n` which is 500,000.
   - The recursive calls in `qp` (lines 9 and 12) imply that this function could potentially be expensive due to its recursive nature and the large exponentiation operations involved.

2. **Data Structures and Loops**:
   - The loop on line 27 is executed `n` times, and for each iteration, it calculates a modular inverse using the `qp` function, which further involves recursive calculations.
   - The calculation of `fact[x - 1]` and the subsequent computation of `qp` for the modular inverse on line 32 is computationally expensive, especially when `x` is large.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following performance-characterizing invariants in natural language:

1. **Invariant on Large `n` with Single Element Arrays**:
   - **Description**: "When `n` is large and `k` is 1, the program iterates over a large range with minimal reduction in complexity per iteration, leading to inefficient performance due to extensive repeated computations."
   - **Threshold Condition**: Given the constraints, this condition becomes critical when `n` is close to the upper limit, such as `n = 500,000`, while `k = 1`.

2. **Invariant on Recursive Exponentiation**:
   - **Description**: "If the recursive function `qp` is invoked frequently with large powers during each iteration of a loop, the computation may become inefficient due to the overhead of recursive calls and large modular exponentiations."
   - **Threshold Condition**: This is particularly relevant when `x`, derived from `n/i`, remains large across many iterations.

3. **Invariant on Factorial Computation**:
   - **Description**: "If factorial values are recalculated for large ranges multiple times, it can trigger a slowdown, especially if the factorial computation covers a significant portion of the input range frequently."
   - **Threshold Condition**: This issue arises when repeated factorial calculations are performed for values of `x` that remain large over many loop iterations.

### Conclusion

The primary slowdown for the slow input case arises from a combination of large `n` leading to extensive iterations and the recursive nature of the `qp` function, which further complicates each iteration. Recognizing these conditions helps us understand potential slow paths and optimize or refactor the code to handle such scenarios more efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
We define x mod y as the remainder of division of x by y (\% operator in C++ or Java, mod operator in Pascal).

Let's call an array of positive integers [a_1, a_2, ..., a_k] stable if for every permutation p of integers from 1 to k, and for every non-negative integer x, the following condition is met:

 (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k = (((x mod a_{p_1}) mod a_{p_2}) ... mod a_{p_{k - 1}}) mod a_{p_k}  

That is, for each non-negative integer x, the value of (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k does not change if we reorder the elements of the array a.

For two given integers n and k, calculate the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n.

Input

The only line contains two integers n and k (1 ≤ n, k ≤ 5 ⋅ 10^5).

Output

Print one integer — the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n. Since the answer may be large, print it modulo 998244353.

Examples

Input


7 3


Output


16


Input


3 7


Output


0


Input


1337 42


Output


95147305


Input


1 1


Output


1


Input


500000 1


Output


500000

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the natural language invariants derived previously, here is the C++ code to check these conditions:

1. **Checker for Large `n` with Single Element Arrays**:
   - We need to check if `n` is large and `k` is 1, indicating that the loop will execute a large number of times with minimal computational reduction.

```cpp
void check_large_n_and_single_k(int n, int k) {
    if (n > 100000 && k == 1) {  // Assuming a threshold for large n
        cerr << "Warning: Performance bottleneck - large n with single k!" << endl;
        abort();
    }
}
```

2. **Checker for Recursive Exponentiation**:
   - This checker should be placed to monitor if the recursive function `qp` is being invoked with large powers frequently during loops.

```cpp
void check_recursive_exponentiation(int x) {
    if (x > 10000) {  // Threshold for large x value
        cerr << "Warning: Performance bottleneck - frequent large exponentiations!" << endl;
        abort();
    }
}
```

3. **Checker for Expensive Factorial Computation**:
   - This invariant checks if large factorial computations are happening in many loop iterations.

```cpp
void check_expensive_factorial_computation(long long i, long long n) {
    if (i > 100000 && n > 100000) {  // Threshold values for large factorial operations
        cerr << "Warning: Performance bottleneck - expensive factorial computation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the C++ Program

Now, integrate these checkers at the appropriate positions in the original program:

```cpp
#include <bits/stdc++.h>
using namespace std;
int const MAXn = 5e5 + 2, MOD = 998244353;
long long fact[MAXn];

long long qp(long long a, long long e) {
    if (e == 0) return 1;
    if (e == 1) return a;
    if (!(e & 1)) {
        a = qp(a, e / 2);
        return a * a % MOD;
    }
    return a * qp(a, e - 1) % MOD;
}

void check_large_n_and_single_k(int n, int k) {
    if (n > 100000 && k == 1) {
        cerr << "Warning: Performance bottleneck - large n with single k!" << endl;
        abort();
    }
}

void check_recursive_exponentiation(int x) {
    if (x > 10000) {
        cerr << "Warning: Performance bottleneck - frequent large exponentiations!" << endl;
        abort();
    }
}

void check_expensive_factorial_computation(long long i, long long n) {
    if (i > 100000 && n > 100000) {
        cerr << "Warning: Performance bottleneck - expensive factorial computation!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    
    int n, k;
    cin >> n >> k;

    // Insert checker for large n with single k
    check_large_n_and_single_k(n, k);
    
    if (k > n) {
        cout << 0 << "\n";
        return 0;
    }
    
    fact[0] = 1;
    for (long long i = 1; i <= n; i++) {
        fact[i] = fact[i - 1] * i % MOD;
        // Insert checker for expensive factorial computation
        check_expensive_factorial_computation(i, n);
    }
    
    long long sol = 0;
    for (int i = 1; i <= n; i++) {
        long long x = n / i;
        if (x < k) break;
        
        // Insert checker for recursive exponentiation
        check_recursive_exponentiation(x);
        
        sol = (sol + (fact[x - 1] *
                      qp(fact[x - 1 - (k - 1)] * fact[k - 1] % MOD, MOD - 2) % MOD)) % MOD;
    }
    
    cout << sol << "\n";
    return 0;
}
```

### Explanation of Check Integration

1. **Check for Large `n` with Single `k`**:
   - This check is placed immediately after reading the inputs to quickly abort if the condition is met.

2. **Check for Recursive Exponentiation**:
   - This check is placed inside the loop that computes the number of stable arrays, ensuring that when `x` is large, it can detect potential performance issues.

3. **Check for Expensive Factorial Computation**:
   - This check is placed inside the loop that precomputes factorials to catch any excessive operations within this loop. 

These checks aim to detect potential performance bottlenecks by monitoring the conditions under which the program might slow down, as identified in the original analysis.

