system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

We define x mod y as the remainder of division of x by y (\% operator in C++ or Java, mod operator in Pascal).

Let's call an array of positive integers [a_1, a_2, ..., a_k] stable if for every permutation p of integers from 1 to k, and for every non-negative integer x, the following condition is met:

 (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k = (((x mod a_{p_1}) mod a_{p_2}) ... mod a_{p_{k - 1}}) mod a_{p_k}  

That is, for each non-negative integer x, the value of (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k does not change if we reorder the elements of the array a.

For two given integers n and k, calculate the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n.

Input

The only line contains two integers n and k (1 ≤ n, k ≤ 5 ⋅ 10^5).

Output

Print one integer — the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n. Since the answer may be large, print it modulo 998244353.

Examples

Input


7 3


Output


16


Input


3 7


Output


0


Input


1337 42


Output


95147305


Input


1 1


Output


1


Input


500000 1


Output


500000

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long md = 998244353LL;
long long inf;
long long modpow(long long x, long long n, long long m) {
  if (n == 0) return 1LL % m;
  long long u = modpow(x, n / 2, m);
  u = (u * u) % m;
  if (n % 2 == 1) u = (u * x) % m;
  return u;
}
int main() {
  ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
  inf = md * md;
  inf *= 8;
  inf++;
  int test = 1;
  for (int t = 1; t <= test; t++) {
    long long n, k;
    cin >> n >> k;
    if (k > n) {
      cout << 0 << endl;
      continue;
    }
    if (k == n) {
      cout << 1 << endl;
      continue;
    }
    long long fac[n + 1];
    fac[0] = 1LL;
    long long i = 1;
    while (i <= n) {
      fac[i] = (fac[i - 1] * i) % md;
      i++;
    }
    i = 1;
    long long ans = 0;
    while (i <= n) {
      if ((n / i) < k) break;
      long long z = ((fac[(n / i) - 1] * modpow(fac[k - 1], md - 2, md) % md) *
                     modpow(fac[(n / i) - k], md - 2, md)) %
                    md;
      ans = (ans + z) % md;
      i++;
    }
    cout << ans << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

500000 1


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long md = 998244353LL; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long inf; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long modpow(long long x, long long n, long long m) { /* line 5 slow_hit_count: 31000000, fast_hit_count: 0 */
  if (n == 0) return 1LL % m; /* line 6 slow_hit_count: 31000000, fast_hit_count: 0 */
  long long u = modpow(x, n / 2, m); /* line 7 slow_hit_count: 30000000, fast_hit_count: 0 */
  u = (u * u) % m; /* line 8 slow_hit_count: 30000000, fast_hit_count: 0 */
  if (n % 2 == 1) u = (u * x) % m; /* line 9 slow_hit_count: 30000000, fast_hit_count: 0 */
  return u; /* line 10 slow_hit_count: 30000000, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  inf = md * md; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  inf *= 8; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  inf++; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  int test = 1; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (int t = 1; t <= test; t++) { /* line 18 slow_hit_count: 2, fast_hit_count: 2 */
    long long n, k; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> n >> k; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
    if (k > n) { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
      cout << 0 << endl; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      continue; /* line 23 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    if (k == n) { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
      cout << 1 << endl; /* line 26 slow_hit_count: 0, fast_hit_count: 1 */
      continue; /* line 27 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    long long fac[n + 1]; /* line 29 slow_hit_count: 1, fast_hit_count: 0 */
    fac[0] = 1LL; /* line 30 slow_hit_count: 1, fast_hit_count: 0 */
    long long i = 1; /* line 31 slow_hit_count: 1, fast_hit_count: 0 */
    while (i <= n) { /* line 32 slow_hit_count: 500001, fast_hit_count: 0 */
      fac[i] = (fac[i - 1] * i) % md; /* line 33 slow_hit_count: 500000, fast_hit_count: 0 */
      i++; /* line 34 slow_hit_count: 500000, fast_hit_count: 0 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    i = 1; /* line 36 slow_hit_count: 1, fast_hit_count: 0 */
    long long ans = 0; /* line 37 slow_hit_count: 1, fast_hit_count: 0 */
    while (i <= n) { /* line 38 slow_hit_count: 500001, fast_hit_count: 0 */
      if ((n / i) < k) break; /* line 39 slow_hit_count: 500000, fast_hit_count: 0 */
      long long z = ((fac[(n / i) - 1] * modpow(fac[k - 1], md - 2, md) % md) * /* line 40 slow_hit_count: 500000, fast_hit_count: 0 */
                     modpow(fac[(n / i) - k], md - 2, md)) % /* line 41 slow_hit_count: 500000, fast_hit_count: 0 */
                    md; /* line 42 slow_hit_count: 500000, fast_hit_count: 0 */
      ans = (ans + z) % md; /* line 43 slow_hit_count: 500000, fast_hit_count: 0 */
      i++; /* line 44 slow_hit_count: 500000, fast_hit_count: 0 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans << endl; /* line 46 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 49 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the provided C code, we need to analyze the line-level hit counts for the fast and slow inputs and derive performance-characterizing invariants based on this analysis. Here is a step-by-step breakdown:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts**:
   - The `modpow` function (lines 5 to 10) is called 31,000,000 times for the slow input, with no calls for the fast input.
   - The loop in lines 32 to 35 initializes the factorial array and runs 500,001 times for the slow input.
   - The loop in lines 38 to 45, where the main computation happens, iterates 500,001 times for the slow input.

2. **Pinpointing Lines**:
   - The recursive calls and multiplications in `modpow` are significant contributors to the high execution time due to repetitive calculations of powers and inverses.
   - The loops in the main function (lines 32-35 and 38-45) run extensively for the slow input, indicating potential inefficiencies in handling large values of `n`.

3. **Inference on Data Interaction**:
   - The `modpow` function is called multiple times within a nested loop (once for each combination of indices involved in line 40 and 41), leading to a high number of recursive calls.
   - The factorial array initialization scales with `n`, and its computation is more intensive for the higher value of `n` in the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can generate natural language performance invariants as follows:

1. **Invariant Related to Repeated Power Calculations**:
   - **Natural Language Description**: "When the value of `n` is large, and `k` is significantly smaller than `n`, there is a large number of repeated recursive power calculations in `modpow`, leading to potential slowdowns."
   - **Rationale**: The `modpow` function is called frequently due to the breakdown of factorial terms, especially when computing combinations for `k < n`.

2. **Invariant Related to Factorial Computation**:
   - **Natural Language Description**: "If `n` is large, the precomputation of factorials and their inverses becomes computationally expensive, especially when `k` is close to 1, leading to many iterations."
   - **Rationale**: The computation of factorials up to `n` becomes a bottleneck as the loop iterates from 1 to `n`.

3. **Invariant Related to Loop Iterations**:
   - **Natural Language Description**: "When `n` is close to the maximum constraint and `k` is much smaller than `n`, the number of iterations in nested loops increases significantly, causing slow execution."
   - **Rationale**: The loops for initializing factorials and calculating results iterate extensively, leading to increased computation time.

By understanding these conditions, developers can focus optimization efforts on reducing the number of redundant calculations, perhaps by caching results or reducing the computational complexity of certain operations, especially when dealing with large values of `n`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
We define x mod y as the remainder of division of x by y (\% operator in C++ or Java, mod operator in Pascal).

Let's call an array of positive integers [a_1, a_2, ..., a_k] stable if for every permutation p of integers from 1 to k, and for every non-negative integer x, the following condition is met:

 (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k = (((x mod a_{p_1}) mod a_{p_2}) ... mod a_{p_{k - 1}}) mod a_{p_k}  

That is, for each non-negative integer x, the value of (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k does not change if we reorder the elements of the array a.

For two given integers n and k, calculate the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n.

Input

The only line contains two integers n and k (1 ≤ n, k ≤ 5 ⋅ 10^5).

Output

Print one integer — the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n. Since the answer may be large, print it modulo 998244353.

Examples

Input


7 3


Output


16


Input


3 7


Output


0


Input


1337 42


Output


95147305


Input


1 1


Output


1


Input


500000 1


Output


500000

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants in C++ as runtime checks (Phase 3), and then integrate those checks into the existing C++ code (Phase 4).

### Phase 3: Implementing Invariants as C++ Checkers

1. **Checker for Repeated Power Calculations**:
   - This checker will be triggered when `n` is large, and `k` is small enough to cause many recursive calculations in `modpow`.

```cpp
void check_power_invariant(long long n, long long k) {
    if (n > 100000 && k < n / 1000) { // Adjust threshold based on problem constraints
        cerr << "Warning: Performance bottleneck condition triggered - excessive power calculations!" << endl;
        abort();
    }
}
```

2. **Checker for Factorial Computations**:
   - This checker detects when `n` is large and `k` is close to 1, leading to many iterations in factorial computation.

```cpp
void check_factorial_invariant(long long n, long long k) {
    if (n > 100000 && k < 10) { // Adjust threshold based on problem constraints
        cerr << "Warning: Performance bottleneck condition triggered - expensive factorial computations!" << endl;
        abort();
    }
}
```

3. **Checker for Loop Iterations**:
   - This checker ensures that when `n` is maximized and `k` is much smaller, it warns about excessive loop iterations.

```cpp
void check_loop_invariant(long long n, long long k) {
    if (n > 100000 && k < n / 5000) { // Adjust threshold based on problem constraints
        cerr << "Warning: Performance bottleneck condition triggered - excessive loop iterations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into Original Code

Now, let's integrate these checkers into the provided C++ solution:

```cpp
#include <bits/stdc++.h>
using namespace std;

long long md = 998244353LL;
long long inf;

long long modpow(long long x, long long n, long long m) {
    if (n == 0) return 1LL % m;
    long long u = modpow(x, n / 2, m);
    u = (u * u) % m;
    if (n % 2 == 1) u = (u * x) % m;
    return u;
}

// Phase 3: Checkers
void check_power_invariant(long long n, long long k) {
    if (n > 100000 && k < n / 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive power calculations!" << endl;
        abort();
    }
}

void check_factorial_invariant(long long n, long long k) {
    if (n > 100000 && k < 10) {
        cerr << "Warning: Performance bottleneck condition triggered - expensive factorial computations!" << endl;
        abort();
    }
}

void check_loop_invariant(long long n, long long k) {
    if (n > 100000 && k < n / 5000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive loop iterations!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);
    inf = md * md;
    inf *= 8;
    inf++;
    int test = 1;
    for (int t = 1; t <= test; t++) {
        long long n, k;
        cin >> n >> k;
        
        // Phase 4: Insert checkers
        check_power_invariant(n, k); // Check for power calculation bottleneck
        check_factorial_invariant(n, k); // Check for factorial computation bottleneck
        check_loop_invariant(n, k); // Check for loop iteration bottleneck

        if (k > n) {
            cout << 0 << endl;
            continue;
        }
        if (k == n) {
            cout << 1 << endl;
            continue;
        }
        long long fac[n + 1];
        fac[0] = 1LL;
        long long i = 1;
        while (i <= n) {
            fac[i] = (fac[i - 1] * i) % md;
            i++;
        }
        i = 1;
        long long ans = 0;
        while (i <= n) {
            if ((n / i) < k) break;
            long long z = ((fac[(n / i) - 1] * modpow(fac[k - 1], md - 2, md) % md) *
                           modpow(fac[(n / i) - k], md - 2, md)) %
                          md;
            ans = (ans + z) % md;
            i++;
        }
        cout << ans << endl;
    }
    return 0;
}
```

**Explanation**:  
- **Placement of Checkers**: Each check is placed right after input reading, but before any loops begin, ensuring no unnecessary overhead is added to the computation loops.
- **Checker Functionality**: Each checker uses thresholds based on the analysis of potential performance bottlenecks to abort if a slow condition is detected, aiding in fuzz testing for performance issues.

