system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

We define x mod y as the remainder of division of x by y (\% operator in C++ or Java, mod operator in Pascal).

Let's call an array of positive integers [a_1, a_2, ..., a_k] stable if for every permutation p of integers from 1 to k, and for every non-negative integer x, the following condition is met:

 (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k = (((x mod a_{p_1}) mod a_{p_2}) ... mod a_{p_{k - 1}}) mod a_{p_k}  

That is, for each non-negative integer x, the value of (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k does not change if we reorder the elements of the array a.

For two given integers n and k, calculate the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n.

Input

The only line contains two integers n and k (1 ≤ n, k ≤ 5 ⋅ 10^5).

Output

Print one integer — the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n. Since the answer may be large, print it modulo 998244353.

Examples

Input


7 3


Output


16


Input


3 7


Output


0


Input


1337 42


Output


95147305


Input


1 1


Output


1


Input


500000 1


Output


500000

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long mod = 998244353;
int n, k;
long long cnt[500500];
long long pw[500500];
long long binpow(long long a, long long n) {
  if (n == 0) return 1;
  if (n % 2 == 1)
    return (binpow(a, n - 1) * a) % mod;
  else {
    long long b = binpow(a, n / 2);
    return (b * b) % mod;
  }
}
long long fact[500500], rev[500500];
long long cnk(long long n, long long k) {
  if (n < k) return 0;
  if (k == 0) return 1;
  long long result = (fact[n] * rev[k]) % mod;
  return (result * rev[n - k]) % mod;
}
void solve() {
  cin >> n >> k;
  pw[0] = 1;
  fact[0] = 1;
  rev[0] = 1;
  for (int i = 1; i <= n; ++i) {
    fact[i] = (fact[i - 1] * i) % mod;
    rev[i] = binpow(fact[i], mod - 2);
    pw[i] = (pw[i - 1] * 2) % mod;
  }
  for (int i = 1; i <= n; ++i)
    for (int j = i + i; j <= n; j += i) ++cnt[i];
  long long ans = 0;
  for (int i = 1; i <= n; ++i) {
    ans = (ans + cnk(cnt[i], k - 1)) % mod;
  }
  cout << ans << "\n";
}
int main() {
  ios_base ::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  int t = 1;
  for (int i = 1; i <= t; ++i) {
    solve();
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

500000 1


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 998244353; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long cnt[500500]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long pw[500500]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long binpow(long long a, long long n) { /* line 7 slow_hit_count: 29000000, fast_hit_count: 58 */
  if (n == 0) return 1; /* line 8 slow_hit_count: 29000000, fast_hit_count: 58 */
  if (n % 2 == 1) /* line 9 slow_hit_count: 28500000, fast_hit_count: 57 */
    return (binpow(a, n - 1) * a) % mod; /* line 10 slow_hit_count: 14000000, fast_hit_count: 28 */
  else { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    long long b = binpow(a, n / 2); /* line 12 slow_hit_count: 14500000, fast_hit_count: 29 */
    return (b * b) % mod; /* line 13 slow_hit_count: 14500000, fast_hit_count: 29 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
long long fact[500500], rev[500500]; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
long long cnk(long long n, long long k) { /* line 17 slow_hit_count: 500000, fast_hit_count: 1 */
  if (n < k) return 0; /* line 18 slow_hit_count: 500000, fast_hit_count: 1 */
  if (k == 0) return 1; /* line 19 slow_hit_count: 500000, fast_hit_count: 1 */
  long long result = (fact[n] * rev[k]) % mod; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  return (result * rev[n - k]) % mod; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  pw[0] = 1; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  fact[0] = 1; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  rev[0] = 1; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) { /* line 28 slow_hit_count: 500001, fast_hit_count: 2 */
    fact[i] = (fact[i - 1] * i) % mod; /* line 29 slow_hit_count: 500000, fast_hit_count: 1 */
    rev[i] = binpow(fact[i], mod - 2); /* line 30 slow_hit_count: 500000, fast_hit_count: 1 */
    pw[i] = (pw[i - 1] * 2) % mod; /* line 31 slow_hit_count: 500000, fast_hit_count: 1 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; ++i) /* line 33 slow_hit_count: 500001, fast_hit_count: 2 */
    for (int j = i + i; j <= n; j += i) ++cnt[i]; /* line 34 slow_hit_count: 6638449, fast_hit_count: 1 */
  long long ans = 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) { /* line 36 slow_hit_count: 500001, fast_hit_count: 2 */
    ans = (ans + cnk(cnt[i], k - 1)) % mod; /* line 37 slow_hit_count: 500000, fast_hit_count: 1 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base ::sync_with_stdio(0); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  int t = 1; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= t; ++i) { /* line 46 slow_hit_count: 2, fast_hit_count: 2 */
    solve(); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the code and comparing line-level hit counts between the fast and slow runs, we can identify several hotspots:

1. **Exponentiation Function (`binpow`)**: 
   - Line 7 (function entry) has 29,000,000 hits in the slow input versus 58 hits in the fast input.
   - Line 10 and Line 12 (recursive calls) exhibit significant recursion depth, indicating expensive computation, particularly for the `binpow` function.

2. **Nested Multiplication Loop (`cnt` array calculation)**:
   - Lines 33-34 show repeated calculations in a nested loop structure, where line 34 runs 6,638,449 times in the slow input compared to 1 time in the fast input.

3. **Combinatorial Function (`cnk`)**:
   - Lines 17, 18, and 19 have significant hit counts (500,000) in the slow input, indicating this function is heavily utilized.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis of the code and the input constraints, here are the performance-characterizing invariants in natural language:

1. **Heavy Recursion in Exponentiation**:
   - Natural Language Description: "When `n` is large, the recursive computation for inverses using exponentiation becomes costly. This happens because the `binpow` function is repeatedly invoked for each factorial computation, leading to deep recursion and high call overhead."

2. **Nested Loop for Count Calculation**:
   - Natural Language Description: "As `n` increases, especially near its upper limit, the nested loop for calculating divisor counts (`cnt[i]`) becomes expensive. This loop iteratively computes multiple counts for each number, which can lead to quadratic-like behavior in worst-case scenarios."

3. **Frequent Combinatorial Computations**:
   - Natural Language Description: "The computation of combinations (`cnk`) is performed frequently for large values of `n`, especially when `k` is small. This results in repeated calculations that stress arithmetic operations and factorial inversions, which can slow down the execution."

### Conclusion and Suggestion for Fuzzers

The critical performance bottlenecks are primarily due to recursive calculations, nested loops over large ranges, and frequent execution of combinatorial logic. To aid fuzzers in detecting slow performance triggers, checks should be placed at strategic points to monitor the size of `n` and `k`, the depth of recursion in `binpow`, and the hit counts of nested loops, ensuring they stay within expected bounds given the constraints of the problem.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
We define x mod y as the remainder of division of x by y (\% operator in C++ or Java, mod operator in Pascal).

Let's call an array of positive integers [a_1, a_2, ..., a_k] stable if for every permutation p of integers from 1 to k, and for every non-negative integer x, the following condition is met:

 (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k = (((x mod a_{p_1}) mod a_{p_2}) ... mod a_{p_{k - 1}}) mod a_{p_k}  

That is, for each non-negative integer x, the value of (((x mod a_1) mod a_2) ... mod a_{k - 1}) mod a_k does not change if we reorder the elements of the array a.

For two given integers n and k, calculate the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n.

Input

The only line contains two integers n and k (1 ≤ n, k ≤ 5 ⋅ 10^5).

Output

Print one integer — the number of stable arrays [a_1, a_2, ..., a_k] such that 1 ≤ a_1 < a_2 < ... < a_k ≤ n. Since the answer may be large, print it modulo 998244353.

Examples

Input


7 3


Output


16


Input


3 7


Output


0


Input


1337 42


Output


95147305


Input


1 1


Output


1


Input


500000 1


Output


500000

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checker Code

Based on the performance-characterizing invariants derived previously, here are the C++ checker codes:

1. **Heavy Recursion in Exponentiation:**
   - We want to ensure that the recursion depth in the `binpow` function does not grow too large due to large `n`.

```cpp
void check_recursion_invariant(long long n) {
    if (n > 30) { // Arbitrary threshold for recursion depth
        cerr << "Warning: recursion_invariant triggered - excessive recursion depth in binpow" << endl;
        abort();
    }
}
```

2. **Nested Loop for Count Calculation:**
   - We want to ensure that the nested loop for `cnt` calculations does not become too intensive.

```cpp
void check_nested_loop_invariant(long long n) {
    if (n > 10000) { // Threshold to identify potential issues with nested loops
        cerr << "Warning: nested_loop_invariant triggered - potentially expensive nested loop in cnt calculation" << endl;
        abort();
    }
}
```

3. **Frequent Combinatorial Computations:**
   - We want to check if the combinatorial function `cnk` is computed too many times for large values of `n`.

```cpp
void check_combinatorial_invariant(long long n, long long k) {
    if (n > 10000 && k < 100) { // Conditions where combinatorial calculations become very frequent
        cerr << "Warning: combinatorial_invariant triggered - excessive combinatorial calculations" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original C++ Program

Now let's integrate these checks into the existing C++ program at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long mod = 998244353;
int n, k;
long long cnt[500500];
long long pw[500500];
long long fact[500500], rev[500500];

// Checkers for performance bottlenecks
void check_recursion_invariant(long long n) {
    if (n > 30) { // Arbitrary threshold for recursion depth
        cerr << "Warning: recursion_invariant triggered - excessive recursion depth in binpow" << endl;
        abort();
    }
}

void check_nested_loop_invariant(long long n) {
    if (n > 10000) { // Threshold for nested loops
        cerr << "Warning: nested_loop_invariant triggered - potentially expensive nested loop in cnt calculation" << endl;
        abort();
    }
}

void check_combinatorial_invariant(long long n, long long k) {
    if (n > 10000 && k < 100) { // Conditions for excessive combinatorial calculations
        cerr << "Warning: combinatorial_invariant triggered - excessive combinatorial calculations" << endl;
        abort();
    }
}

long long binpow(long long a, long long n) {
    check_recursion_invariant(n); // Check recursion depth before entering
    if (n == 0) return 1;
    if (n % 2 == 1)
        return (binpow(a, n - 1) * a) % mod;
    else {
        long long b = binpow(a, n / 2);
        return (b * b) % mod;
    }
}

long long cnk(long long n, long long k) {
    if (n < k) return 0;
    if (k == 0) return 1;
    long long result = (fact[n] * rev[k]) % mod;
    return (result * rev[n - k]) % mod;
}

void solve() {
    cin >> n >> k;
    check_combinatorial_invariant(n, k); // Check combinatorial computation conditions
    pw[0] = 1;
    fact[0] = 1;
    rev[0] = 1;
    for (int i = 1; i <= n; ++i) {
        fact[i] = (fact[i - 1] * i) % mod;
        rev[i] = binpow(fact[i], mod - 2);
        pw[i] = (pw[i - 1] * 2) % mod;
    }
    check_nested_loop_invariant(n); // Check before nested loop begins
    for (int i = 1; i <= n; ++i)
        for (int j = i + i; j <= n; j += i) ++cnt[i];
    long long ans = 0;
    for (int i = 1; i <= n; ++i) {
        ans = (ans + cnk(cnt[i], k - 1)) % mod;
    }
    cout << ans << "\n";
}

int main() {
    ios_base ::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int t = 1;
    for (int i = 1; i <= t; ++i) {
        solve();
    }
    return 0;
}
```

### Explanation

- **Recursion Depth Check**: Integrated before making recursive calls in `binpow`.
- **Nested Loop Check**: Added before entering the nested loop for `cnt` calculation, ensuring it does not handle excessively large `n`.
- **Combinatorial Check**: Inserted after reading inputs to catch scenarios with small `k` and large `n` that lead to high combinatorial computation.

These checks will trigger warnings and abort the execution if the conditions indicating potential performance bottlenecks are met, aiding in debugging and optimization efforts.

