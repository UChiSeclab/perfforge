system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

In the capital city of Berland, Bertown, demonstrations are against the recent election of the King of Berland. Berland opposition, led by Mr. Ovalny, believes that the elections were not fair enough and wants to organize a demonstration at one of the squares.

Bertown has n squares, numbered from 1 to n, they are numbered in the order of increasing distance between them and the city center. That is, square number 1 is central, and square number n is the farthest from the center. Naturally, the opposition wants to hold a meeting as close to the city center as possible (that is, they want an square with the minimum number).

There are exactly k (k < n) days left before the demonstration. Now all squares are free. But the Bertown city administration never sleeps, and the approval of an application for the demonstration threatens to become a very complex process. The process of approval lasts several days, but every day the following procedure takes place:

  * The opposition shall apply to hold a demonstration at a free square (the one which isn't used by the administration). 
  * The administration tries to move the demonstration to the worst free square left. To do this, the administration organizes some long-term activities on the square, which is specified in the application of opposition. In other words, the administration starts using the square and it is no longer free. Then the administration proposes to move the opposition demonstration to the worst free square. If the opposition has applied for the worst free square then request is accepted and administration doesn't spend money. If the administration does not have enough money to organize an event on the square in question, the opposition's application is accepted. If administration doesn't have enough money to organize activity, then rest of administration's money spends and application is accepted 
  * If the application is not accepted, then the opposition can agree to the administration's proposal (that is, take the worst free square), or withdraw the current application and submit another one the next day. If there are no more days left before the meeting, the opposition has no choice but to agree to the proposal of City Hall. If application is accepted opposition can reject it. It means than opposition still can submit more applications later, but square remains free. 



In order to organize an event on the square i, the administration needs to spend ai bourles. Because of the crisis the administration has only b bourles to confront the opposition. What is the best square that the opposition can take, if the administration will keep trying to occupy the square in question each time? Note that the administration's actions always depend only on the actions of the opposition.

Input

The first line contains two integers n and k — the number of squares and days left before the meeting, correspondingly (1 ≤ k < n ≤ 105).

The second line contains a single integer b — the number of bourles the administration has (1 ≤ b ≤ 1018).

The third line contains n space-separated integers ai — the sum of money, needed to organise an event on square i (1 ≤ ai ≤ 109).

Please, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.

Output

Print a single number — the minimum number of the square where the opposition can organize the demonstration.

Examples

Input

5 2
8
2 4 5 3 1


Output

2


Input

5 2
8
3 2 4 1 5


Output

5


Input

5 4
1000000000000000
5 4 3 2 1


Output

5

Note

In the first sample the opposition can act like this. On day one it applies for square 3. The administration has to organize an event there and end up with 3 bourles. If on the second day the opposition applies for square 2, the administration won't have the money to intervene.

In the second sample the opposition has only the chance for the last square. If its first move occupies one of the first four squares, the administration is left with at least 4 bourles, which means that next day it can use its next move to move the opposition from any square to the last one.

In the third sample administration has a lot of money, so opposition can occupy only last square.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
struct td {
  int val, h, sz, l, r;
  long long sum;
};
int a[100100];
td d[100100];
inline int get_rand() { return (rand() << 16) + rand(); }
inline void calc(int v) {
  d[v].sz = d[d[v].l].sz + d[d[v].r].sz + 1;
  d[v].sum = d[d[v].l].sum + d[d[v].r].sum + d[v].val;
}
void split(int v, long long val, int &l, int &r) {
  if (v == 0) {
    l = r = 0;
    return;
  }
  if (d[v].val > val) {
    split(d[v].r, val, d[v].r, r);
    l = v;
  } else {
    split(d[v].l, val, l, d[v].l);
    r = v;
  }
  calc(v);
}
void splitsz(int v, int sz, int &l, int &r) {
  if (v == 0) {
    l = r = 0;
    return;
  }
  if (d[d[v].l].sz + 1 <= sz) {
    splitsz(d[v].r, sz - d[d[v].l].sz - 1, d[v].r, r);
    l = v;
  } else {
    splitsz(d[v].l, sz, l, d[v].l);
    r = v;
  }
  calc(v);
}
int merge(int l, int r) {
  if (l == 0) {
    return r;
  }
  if (r == 0) {
    return l;
  }
  int res;
  if (d[l].h > d[r].h) {
    d[l].r = merge(d[l].r, r);
    res = l;
  } else {
    d[r].l = merge(l, d[r].l);
    res = r;
  }
  calc(res);
  return res;
}
int main() {
  int n, k;
  long long all;
  scanf("%d %d %I64d", &n, &k, &all);
  for (int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
  }
  int cv = 0, sz = 0;
  for (int i = 0; i < n - 1; i++) {
    d[++sz].val = a[i];
    d[sz].sum = a[i];
    d[sz].h = get_rand();
    d[sz].sz = 1;
    int l, r;
    split(cv, a[i], l, r);
    cv = merge(l, merge(sz, r));
  }
  int ans = n;
  for (int i = 0; i < n - 1; i++) {
    int p1, p2, p3;
    split(cv, a[i], p1, p2);
    splitsz(p2, 1, p2, p3);
    cv = merge(p1, p3);
    splitsz(cv, k - 1, p1, p3);
    if (all - d[p1].sum < a[i]) {
      ans = i + 1;
      break;
    }
    cv = merge(p1, p3);
    split(cv, a[i], p1, p3);
    cv = merge(p1, merge(p2, p3));
  }
  printf("%d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 25
21341
129 396 227 144 72 443 77 309 192 199 293 171 331 3 243 204 191 9 261 328 60 37 105 158 305 308 411 247 216 226 290 145 254 166 352 194 471 638 729 868 769 901 654 728 526 477 546 753 750 790 514 870 808 989 711 688 718 909 687 788 733 776 875 548 946 950 809 489 539 664 961 511 781 570 811 977 686 522 533 785 708 739 515 738 753 837 841 516 867 828 534 523 855 794 602 477 590 868 938 489


(G.2) Fast Input

10 9
624
47 56 60 51 88 82 77 83 89 100


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
struct td { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  int val, h, sz, l, r; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  long long sum; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int a[100100]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
td d[100100]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
inline int get_rand() { return (rand() << 16) + rand(); } /* line 9 slow_hit_count: 99, fast_hit_count: 9 */
inline void calc(int v) { /* line 10 slow_hit_count: 6791, fast_hit_count: 243 */
  d[v].sz = d[d[v].l].sz + d[d[v].r].sz + 1; /* line 11 slow_hit_count: 6791, fast_hit_count: 243 */
  d[v].sum = d[d[v].l].sum + d[d[v].r].sum + d[v].val; /* line 12 slow_hit_count: 6791, fast_hit_count: 243 */
} /* line 13 slow_hit_count: 6791, fast_hit_count: 243 */
void split(int v, long long val, int &l, int &r) { /* line 14 slow_hit_count: 2610, fast_hit_count: 136 */
  if (v == 0) { /* line 15 slow_hit_count: 2610, fast_hit_count: 136 */
    l = r = 0; /* line 16 slow_hit_count: 297, fast_hit_count: 27 */
    return; /* line 17 slow_hit_count: 297, fast_hit_count: 27 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  if (d[v].val > val) { /* line 19 slow_hit_count: 2313, fast_hit_count: 109 */
    split(d[v].r, val, d[v].r, r); /* line 20 slow_hit_count: 934, fast_hit_count: 47 */
    l = v; /* line 21 slow_hit_count: 934, fast_hit_count: 47 */
  } else { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    split(d[v].l, val, l, d[v].l); /* line 23 slow_hit_count: 1379, fast_hit_count: 62 */
    r = v; /* line 24 slow_hit_count: 1379, fast_hit_count: 62 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  calc(v); /* line 26 slow_hit_count: 2313, fast_hit_count: 109 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
void splitsz(int v, int sz, int &l, int &r) { /* line 28 slow_hit_count: 1472, fast_hit_count: 59 */
  if (v == 0) { /* line 29 slow_hit_count: 1472, fast_hit_count: 59 */
    l = r = 0; /* line 30 slow_hit_count: 198, fast_hit_count: 18 */
    return; /* line 31 slow_hit_count: 198, fast_hit_count: 18 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  if (d[d[v].l].sz + 1 <= sz) { /* line 33 slow_hit_count: 1274, fast_hit_count: 41 */
    splitsz(d[v].r, sz - d[d[v].l].sz - 1, d[v].r, r); /* line 34 slow_hit_count: 320, fast_hit_count: 21 */
    l = v; /* line 35 slow_hit_count: 320, fast_hit_count: 21 */
  } else { /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    splitsz(d[v].l, sz, l, d[v].l); /* line 37 slow_hit_count: 954, fast_hit_count: 20 */
    r = v; /* line 38 slow_hit_count: 954, fast_hit_count: 20 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  calc(v); /* line 40 slow_hit_count: 1274, fast_hit_count: 41 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
int merge(int l, int r) { /* line 42 slow_hit_count: 3798, fast_hit_count: 147 */
  if (l == 0) { /* line 43 slow_hit_count: 3798, fast_hit_count: 147 */
    return r; /* line 44 slow_hit_count: 356, fast_hit_count: 24 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  if (r == 0) { /* line 46 slow_hit_count: 3442, fast_hit_count: 123 */
    return l; /* line 47 slow_hit_count: 238, fast_hit_count: 30 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  int res; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  if (d[l].h > d[r].h) { /* line 50 slow_hit_count: 3204, fast_hit_count: 93 */
    d[l].r = merge(d[l].r, r); /* line 51 slow_hit_count: 1015, fast_hit_count: 34 */
    res = l; /* line 52 slow_hit_count: 1015, fast_hit_count: 34 */
  } else { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    d[r].l = merge(l, d[r].l); /* line 54 slow_hit_count: 2189, fast_hit_count: 59 */
    res = r; /* line 55 slow_hit_count: 2189, fast_hit_count: 59 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  calc(res); /* line 57 slow_hit_count: 3204, fast_hit_count: 93 */
  return res; /* line 58 slow_hit_count: 3204, fast_hit_count: 93 */
} /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  long long all; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d %d %I64d", &n, &k, &all); /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 64 slow_hit_count: 101, fast_hit_count: 11 */
    scanf("%d", &a[i]); /* line 65 slow_hit_count: 100, fast_hit_count: 10 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  int cv = 0, sz = 0; /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n - 1; i++) { /* line 68 slow_hit_count: 100, fast_hit_count: 10 */
    d[++sz].val = a[i]; /* line 69 slow_hit_count: 99, fast_hit_count: 9 */
    d[sz].sum = a[i]; /* line 70 slow_hit_count: 99, fast_hit_count: 9 */
    d[sz].h = get_rand(); /* line 71 slow_hit_count: 99, fast_hit_count: 9 */
    d[sz].sz = 1; /* line 72 slow_hit_count: 99, fast_hit_count: 9 */
    int l, r; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
    split(cv, a[i], l, r); /* line 74 slow_hit_count: 99, fast_hit_count: 9 */
    cv = merge(l, merge(sz, r)); /* line 75 slow_hit_count: 99, fast_hit_count: 9 */
  } /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = n; /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n - 1; i++) { /* line 78 slow_hit_count: 100, fast_hit_count: 10 */
    int p1, p2, p3; /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
    split(cv, a[i], p1, p2); /* line 80 slow_hit_count: 99, fast_hit_count: 9 */
    splitsz(p2, 1, p2, p3); /* line 81 slow_hit_count: 99, fast_hit_count: 9 */
    cv = merge(p1, p3); /* line 82 slow_hit_count: 99, fast_hit_count: 9 */
    splitsz(cv, k - 1, p1, p3); /* line 83 slow_hit_count: 99, fast_hit_count: 9 */
    if (all - d[p1].sum < a[i]) { /* line 84 slow_hit_count: 99, fast_hit_count: 9 */
      ans = i + 1; /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
      break; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
    cv = merge(p1, p3); /* line 88 slow_hit_count: 99, fast_hit_count: 9 */
    split(cv, a[i], p1, p3); /* line 89 slow_hit_count: 99, fast_hit_count: 9 */
    cv = merge(p1, merge(p2, p3)); /* line 90 slow_hit_count: 99, fast_hit_count: 9 */
  } /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 92 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 94 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose why the program runs slowly for the slow input, we will analyze the code and its performance characteristics by examining the provided hit count data and the algorithm itself. Based on the hit counts, we identify key areas of concern and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Analysis of Hit Counts:**
   - The hit counts reveal that functions `split`, `splitsz`, and `merge` are invoked significantly more often in the slow input than the fast input. For example, `split` is called 2610 times in the slow run versus 136 times in the fast run.
   - The `calc` function, which recalculates the size and sum of nodes, is also hit a significant number of times (6791 for slow versus 243 for fast). This suggests that the manipulation of the data structure within these functions contributes heavily to execution time.

2. **Data Structure and Algorithm Interaction:**
   - The code uses a treap data structure, which involves splitting and merging operations. Given the frequent invocations of `split` and `merge`, these operations likely contribute to the slowdown.
   - Each square cost (`ai`) is inserted into this data structure and manipulated frequently to determine the best possible square for the demonstration, considering the administration's budget constraints.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, the following performance-characterizing invariants describe conditions that may lead to slow execution:

1. **Treap Manipulation Complexity:**
   - **Invariant:** "If the number of squares (`n`) is large and the cost values (`ai`) are widely dispersed, leading to frequent and complex treap operations (splits and merges), the program may experience significant slowdowns."
     - This is because the treap's efficiency depends on maintaining balance, and highly varied values increase the number of necessary operations to maintain this balance.

2. **Budget Constraints and Iterative Checks:**
   - **Invariant:** "When the administration's budget (`b`) allows for nearly full coverage of the squares' costs, the opposition is forced into multiple iterations of checking and splitting operations to find a suitable square, leading to a performance hit."
     - The check `if (all - d[p1].sum < a[i])` iteratively reduces potential choices, increasing the number of operations and comparisons.

3. **Near-Maximal Days (`k`) and Iterations:**
   - **Invariant:** "As the number of days (`k`) approaches the total number of squares (`n`), the algorithm is forced to explore almost every possible square, intensifying treap operations and resulting in performance degradation."
     - The algorithm's approach of iteratively testing each square becomes particularly costly when `k` is large.

These invariants provide insight into the performance characteristics of the program and suggest areas where optimization may be possible, such as reducing the complexity of treap operations or finding shortcuts in decision-making when budget and day constraints are nearly maximal.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
In the capital city of Berland, Bertown, demonstrations are against the recent election of the King of Berland. Berland opposition, led by Mr. Ovalny, believes that the elections were not fair enough and wants to organize a demonstration at one of the squares.

Bertown has n squares, numbered from 1 to n, they are numbered in the order of increasing distance between them and the city center. That is, square number 1 is central, and square number n is the farthest from the center. Naturally, the opposition wants to hold a meeting as close to the city center as possible (that is, they want an square with the minimum number).

There are exactly k (k < n) days left before the demonstration. Now all squares are free. But the Bertown city administration never sleeps, and the approval of an application for the demonstration threatens to become a very complex process. The process of approval lasts several days, but every day the following procedure takes place:

  * The opposition shall apply to hold a demonstration at a free square (the one which isn't used by the administration). 
  * The administration tries to move the demonstration to the worst free square left. To do this, the administration organizes some long-term activities on the square, which is specified in the application of opposition. In other words, the administration starts using the square and it is no longer free. Then the administration proposes to move the opposition demonstration to the worst free square. If the opposition has applied for the worst free square then request is accepted and administration doesn't spend money. If the administration does not have enough money to organize an event on the square in question, the opposition's application is accepted. If administration doesn't have enough money to organize activity, then rest of administration's money spends and application is accepted 
  * If the application is not accepted, then the opposition can agree to the administration's proposal (that is, take the worst free square), or withdraw the current application and submit another one the next day. If there are no more days left before the meeting, the opposition has no choice but to agree to the proposal of City Hall. If application is accepted opposition can reject it. It means than opposition still can submit more applications later, but square remains free. 



In order to organize an event on the square i, the administration needs to spend ai bourles. Because of the crisis the administration has only b bourles to confront the opposition. What is the best square that the opposition can take, if the administration will keep trying to occupy the square in question each time? Note that the administration's actions always depend only on the actions of the opposition.

Input

The first line contains two integers n and k — the number of squares and days left before the meeting, correspondingly (1 ≤ k < n ≤ 105).

The second line contains a single integer b — the number of bourles the administration has (1 ≤ b ≤ 1018).

The third line contains n space-separated integers ai — the sum of money, needed to organise an event on square i (1 ≤ ai ≤ 109).

Please, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.

Output

Print a single number — the minimum number of the square where the opposition can organize the demonstration.

Examples

Input

5 2
8
2 4 5 3 1


Output

2


Input

5 2
8
3 2 4 1 5


Output

5


Input

5 4
1000000000000000
5 4 3 2 1


Output

5

Note

In the first sample the opposition can act like this. On day one it applies for square 3. The administration has to organize an event there and end up with 3 bourles. If on the second day the opposition applies for square 2, the administration won't have the money to intervene.

In the second sample the opposition has only the chance for the last square. If its first move occupies one of the first four squares, the administration is left with at least 4 bourles, which means that next day it can use its next move to move the opposition from any square to the last one.

In the third sample administration has a lot of money, so opposition can occupy only last square.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Based on the natural language invariants derived in Phase 2, we will implement checks in C++ to identify potential performance bottlenecks.

#### Invariant Checks

1. **Treap Manipulation Complexity:**
   - **Invariant:** If the number of squares (`n`) is large and the cost values (`ai`) are widely dispersed, leading to frequent and complex treap operations (splits and merges), the program may experience significant slowdowns.

   ```cpp
   void check_treap_complexity(int n, const vector<int>& costs) {
       int maxCost = *max_element(costs.begin(), costs.end());
       int minCost = *min_element(costs.begin(), costs.end());
       if (n > 50000 && (maxCost - minCost) > 1000) { // Thresholds can be adjusted for significant variance
           cerr << "Warning: Treap complexity invariant triggered - high variance in costs with large n" << endl;
           abort();
       }
   }
   ```

2. **Budget Constraints and Iterative Checks:**
   - **Invariant:** When the administration's budget (`b`) allows for nearly full coverage of the squares' costs, the opposition is forced into multiple iterations of checking and splitting operations.

   ```cpp
   void check_budget_constraint(long long budget, const vector<int>& costs) {
       long long totalCost = accumulate(costs.begin(), costs.end(), 0LL);
       if (budget > totalCost * 0.9) { // Budget allows covering 90% of total costs
           cerr << "Warning: Budget constraint invariant triggered - high budget relative to costs" << endl;
           abort();
       }
   }
   ```

3. **Near-Maximal Days (`k`) and Iterations:**
   - **Invariant:** As the number of days (`k`) approaches the total number of squares (`n`), the algorithm is forced to explore almost every possible square.

   ```cpp
   void check_days_vs_squares(int n, int k) {
       if (k > n * 0.8) { // Days approaching the number of squares
           cerr << "Warning: Days vs squares invariant triggered - high k relative to n" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Original Program

We will now integrate these checks into the original C++ solution, placing them at appropriate locations in the program's control flow.

```cpp
#include <bits/stdc++.h>
using namespace std;

struct td {
  int val, h, sz, l, r;
  long long sum;
};

int a[100100];
td d[100100];

inline int get_rand() { return (rand() << 16) + rand(); }

inline void calc(int v) {
  d[v].sz = d[d[v].l].sz + d[d[v].r].sz + 1;
  d[v].sum = d[d[v].l].sum + d[d[v].r].sum + d[v].val;
}

void split(int v, long long val, int &l, int &r) {
  if (v == 0) {
    l = r = 0;
    return;
  }
  if (d[v].val > val) {
    split(d[v].r, val, d[v].r, r);
    l = v;
  } else {
    split(d[v].l, val, l, d[v].l);
    r = v;
  }
  calc(v);
}

void splitsz(int v, int sz, int &l, int &r) {
  if (v == 0) {
    l = r = 0;
    return;
  }
  if (d[d[v].l].sz + 1 <= sz) {
    splitsz(d[v].r, sz - d[d[v].l].sz - 1, d[v].r, r);
    l = v;
  } else {
    splitsz(d[v].l, sz, l, d[v].l);
    r = v;
  }
  calc(v);
}

int merge(int l, int r) {
  if (l == 0) {
    return r;
  }
  if (r == 0) {
    return l;
  }
  int res;
  if (d[l].h > d[r].h) {
    d[l].r = merge(d[l].r, r);
    res = l;
  } else {
    d[r].l = merge(l, d[r].l);
    res = r;
  }
  calc(res);
  return res;
}

// Checker functions for performance invariants
void check_treap_complexity(int n, const vector<int>& costs) {
    int maxCost = *max_element(costs.begin(), costs.end());
    int minCost = *min_element(costs.begin(), costs.end());
    if (n > 50000 && (maxCost - minCost) > 1000) {
        cerr << "Warning: Treap complexity invariant triggered - high variance in costs with large n" << endl;
        abort();
    }
}

void check_budget_constraint(long long budget, const vector<int>& costs) {
    long long totalCost = accumulate(costs.begin(), costs.end(), 0LL);
    if (budget > totalCost * 0.9) {
        cerr << "Warning: Budget constraint invariant triggered - high budget relative to costs" << endl;
        abort();
    }
}

void check_days_vs_squares(int n, int k) {
    if (k > n * 0.8) {
        cerr << "Warning: Days vs squares invariant triggered - high k relative to n" << endl;
        abort();
    }
}

int main() {
  int n, k;
  long long all;
  scanf("%d %d %I64d", &n, &k, &all);
  
  vector<int> costs(n);

  for (int i = 0; i < n; i++) {
    scanf("%d", &a[i]);
    costs[i] = a[i];
  }

  // Insert performance checks
  check_treap_complexity(n, costs);
  check_budget_constraint(all, costs);
  check_days_vs_squares(n, k);

  int cv = 0, sz = 0;
  for (int i = 0; i < n - 1; i++) {
    d[++sz].val = a[i];
    d[sz].sum = a[i];
    d[sz].h = get_rand();
    d[sz].sz = 1;
    int l, r;
    split(cv, a[i], l, r);
    cv = merge(l, merge(sz, r));
  }

  int ans = n;
  for (int i = 0; i < n - 1; i++) {
    int p1, p2, p3;
    split(cv, a[i], p1, p2);
    splitsz(p2, 1, p2, p3);
    cv = merge(p1, p3);
    splitsz(cv, k - 1, p1, p3);
    if (all - d[p1].sum < a[i]) {
      ans = i + 1;
      break;
    }
    cv = merge(p1, p3);
    split(cv, a[i], p1, p3);
    cv = merge(p1, merge(p2, p3));
  }

  printf("%d\n", ans);
  return 0;
}
```

### Comments on Integration:
- The performance checks are added right after reading inputs and before diving into the core logic to ensure they are evaluated once and do not introduce overhead in the computation loop.
- Each check is designed to detect distinct potential bottlenecks characterized by the problem's constraints and the program's structure.

