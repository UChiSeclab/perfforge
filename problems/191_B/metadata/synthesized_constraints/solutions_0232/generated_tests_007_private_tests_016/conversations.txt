system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

In the capital city of Berland, Bertown, demonstrations are against the recent election of the King of Berland. Berland opposition, led by Mr. Ovalny, believes that the elections were not fair enough and wants to organize a demonstration at one of the squares.

Bertown has n squares, numbered from 1 to n, they are numbered in the order of increasing distance between them and the city center. That is, square number 1 is central, and square number n is the farthest from the center. Naturally, the opposition wants to hold a meeting as close to the city center as possible (that is, they want an square with the minimum number).

There are exactly k (k < n) days left before the demonstration. Now all squares are free. But the Bertown city administration never sleeps, and the approval of an application for the demonstration threatens to become a very complex process. The process of approval lasts several days, but every day the following procedure takes place:

  * The opposition shall apply to hold a demonstration at a free square (the one which isn't used by the administration). 
  * The administration tries to move the demonstration to the worst free square left. To do this, the administration organizes some long-term activities on the square, which is specified in the application of opposition. In other words, the administration starts using the square and it is no longer free. Then the administration proposes to move the opposition demonstration to the worst free square. If the opposition has applied for the worst free square then request is accepted and administration doesn't spend money. If the administration does not have enough money to organize an event on the square in question, the opposition's application is accepted. If administration doesn't have enough money to organize activity, then rest of administration's money spends and application is accepted 
  * If the application is not accepted, then the opposition can agree to the administration's proposal (that is, take the worst free square), or withdraw the current application and submit another one the next day. If there are no more days left before the meeting, the opposition has no choice but to agree to the proposal of City Hall. If application is accepted opposition can reject it. It means than opposition still can submit more applications later, but square remains free. 



In order to organize an event on the square i, the administration needs to spend ai bourles. Because of the crisis the administration has only b bourles to confront the opposition. What is the best square that the opposition can take, if the administration will keep trying to occupy the square in question each time? Note that the administration's actions always depend only on the actions of the opposition.

Input

The first line contains two integers n and k — the number of squares and days left before the meeting, correspondingly (1 ≤ k < n ≤ 105).

The second line contains a single integer b — the number of bourles the administration has (1 ≤ b ≤ 1018).

The third line contains n space-separated integers ai — the sum of money, needed to organise an event on square i (1 ≤ ai ≤ 109).

Please, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.

Output

Print a single number — the minimum number of the square where the opposition can organize the demonstration.

Examples

Input

5 2
8
2 4 5 3 1


Output

2


Input

5 2
8
3 2 4 1 5


Output

5


Input

5 4
1000000000000000
5 4 3 2 1


Output

5

Note

In the first sample the opposition can act like this. On day one it applies for square 3. The administration has to organize an event there and end up with 3 bourles. If on the second day the opposition applies for square 2, the administration won't have the money to intervene.

In the second sample the opposition has only the chance for the last square. If its first move occupies one of the first four squares, the administration is left with at least 4 bourles, which means that next day it can use its next move to move the opposition from any square to the last one.

In the third sample administration has a lot of money, so opposition can occupy only last square.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma comment(linker, "/STACK:200000000")
using namespace std;
template <typename T>
inline T Abs(T x) {
  return (x >= 0) ? x : -x;
}
template <typename T>
inline T sqr(T x) {
  return x * x;
}
template <typename T>
string toStr(T x) {
  stringstream st;
  st << x;
  string s;
  st >> s;
  return s;
}
const int INF = (int)1E9;
const long long INF64 = (long long)1E18;
const long double EPS = 1E-9;
const long double PI = 3.1415926535897932384626433832795;
const int MAXN = 100100;
set<pair<long long, int> > st[2];
long long b, a[MAXN], sum = 0;
int n, k;
void norm() {
  while ((int)st[0].size() > k) {
    pair<long long, int> t = *st[0].begin();
    st[1].insert(t);
    st[0].erase(t);
    sum -= t.first;
  }
  while ((int)st[0].size() < k && !st[1].empty()) {
    pair<long long, int> t = *st[1].rbegin();
    st[0].insert(t);
    st[1].erase(t);
    sum += t.first;
  }
}
void add(int v) {
  sum += a[v];
  st[0].insert(make_pair(a[v], v));
  norm();
}
void erase(int v) {
  if (st[0].count(make_pair(a[v], v))) sum -= a[v];
  st[0].erase(make_pair(a[v], v));
  st[1].erase(make_pair(a[v], v));
  norm();
}
int main() {
  cin >> n >> k >> b;
  k--;
  for (int i = 0; i < (int)(n); i++) {
    scanf("%d", &a[i]);
    if (i + 1 != n) add(i);
  }
  for (int i = 0; i < (int)(n - 1); i++) {
    erase(i);
    if (b - sum < a[i]) {
      cout << i + 1 << endl;
      return 0;
    }
    add(i);
  }
  cout << n << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 25
21341
129 396 227 144 72 443 77 309 192 199 293 171 331 3 243 204 191 9 261 328 60 37 105 158 305 308 411 247 216 226 290 145 254 166 352 194 471 638 729 868 769 901 654 728 526 477 546 753 750 790 514 870 808 989 711 688 718 909 687 788 733 776 875 548 946 950 809 489 539 664 961 511 781 570 811 977 686 522 533 785 708 739 515 738 753 837 841 516 867 828 534 523 855 794 602 477 590 868 938 489


(G.2) Fast Input

10 9
624
47 56 60 51 88 82 77 83 89 100


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma comment(linker, "/STACK:200000000") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
inline T Abs(T x) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  return (x >= 0) ? x : -x; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
inline T sqr(T x) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  return x * x; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
string toStr(T x) { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  stringstream st; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  st << x; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  string s; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  st >> s; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  return s; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = (int)1E9; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF64 = (long long)1E18; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
const long double EPS = 1E-9; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
const long double PI = 3.1415926535897932384626433832795; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 100100; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
set<pair<long long, int> > st[2]; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
long long b, a[MAXN], sum = 0; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
void norm() { /* line 28 slow_hit_count: 286, fast_hit_count: 11 */
  while ((int)st[0].size() > k) { /* line 29 slow_hit_count: 286, fast_hit_count: 11 */
    pair<long long, int> t = *st[0].begin(); /* line 30 slow_hit_count: 112, fast_hit_count: 1 */
    st[1].insert(t); /* line 31 slow_hit_count: 112, fast_hit_count: 1 */
    st[0].erase(t); /* line 32 slow_hit_count: 112, fast_hit_count: 1 */
    sum -= t.first; /* line 33 slow_hit_count: 112, fast_hit_count: 1 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  while ((int)st[0].size() < k && !st[1].empty()) { /* line 35 slow_hit_count: 174, fast_hit_count: 10 */
    pair<long long, int> t = *st[1].rbegin(); /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    st[0].insert(t); /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    st[1].erase(t); /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    sum += t.first; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 41 slow_hit_count: 174, fast_hit_count: 10 */
void add(int v) { /* line 42 slow_hit_count: 136, fast_hit_count: 9 */
  sum += a[v]; /* line 43 slow_hit_count: 136, fast_hit_count: 9 */
  st[0].insert(make_pair(a[v], v)); /* line 44 slow_hit_count: 136, fast_hit_count: 9 */
  norm(); /* line 45 slow_hit_count: 136, fast_hit_count: 9 */
} /* line 46 slow_hit_count: 136, fast_hit_count: 9 */
void erase(int v) { /* line 47 slow_hit_count: 38, fast_hit_count: 1 */
  if (st[0].count(make_pair(a[v], v))) sum -= a[v]; /* line 48 slow_hit_count: 38, fast_hit_count: 1 */
  st[0].erase(make_pair(a[v], v)); /* line 49 slow_hit_count: 38, fast_hit_count: 1 */
  st[1].erase(make_pair(a[v], v)); /* line 50 slow_hit_count: 38, fast_hit_count: 1 */
  norm(); /* line 51 slow_hit_count: 38, fast_hit_count: 1 */
} /* line 52 slow_hit_count: 38, fast_hit_count: 1 */
int main() { /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k >> b; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  k--; /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (int)(n); i++) { /* line 56 slow_hit_count: 101, fast_hit_count: 11 */
    scanf("%d", &a[i]); /* line 57 slow_hit_count: 100, fast_hit_count: 10 */
    if (i + 1 != n) add(i); /* line 58 slow_hit_count: 100, fast_hit_count: 10 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < (int)(n - 1); i++) { /* line 60 slow_hit_count: 38, fast_hit_count: 1 */
    erase(i); /* line 61 slow_hit_count: 38, fast_hit_count: 1 */
    if (b - sum < a[i]) { /* line 62 slow_hit_count: 38, fast_hit_count: 1 */
      cout << i + 1 << endl; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
      return 0; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
    add(i); /* line 66 slow_hit_count: 37, fast_hit_count: 0 */
  } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  cout << n << endl; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 70 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identifying Expensive or Inefficient Code Segments

Based on the line-level hit counts, we observe the following:

1. **Function `norm()`:** 
   - `norm()` function has significantly more hits in the slow input run (`286` hits) compared to the fast input (`11` hits). 
   - Within `norm()`, the loop at line 29 (`while ((int)st[0].size() > k)`) is frequently executed in the slow run (`112` times), indicating that balancing the sets `st[0]` and `st[1]` is a costly operation.

2. **Function `add()`:**
   - The `add()` function is called `136` times in the slow run versus `9` times in the fast run.
   - Each call to `add()` results in a call to `norm()`, further increasing its execution frequency.

3. **Function `erase()`:**
   - The `erase()` function is called `38` times in the slow run compared to `1` time in the fast run.
   - Similar to `add()`, each invocation of `erase()` triggers a call to `norm()`.

4. **Loop in `main()`:**
   - The loop `for (int i = 0; i < (int)(n); i++)` at lines 56-59 is executed `101` times in the slow run versus `11` times in the fast run, suggesting that adding elements to `st[0]` during initialization is a significant part of the computation.

### Phase 2: Deriving Performance-Characterizing Invariants

We can now derive natural language statements to describe conditions under which the program might slow down:

1. **Balancing Set Operations:**
   - **Invariant:** "If the opposition's application frequently results in the administration needing to reorganize and balance the squares (where the frequency of moving elements between sets `st[0]` and `st[1]` is high), the program will likely experience slow performance."
   - **Reasoning:** This is because the repeated context switching between sets leads to a high number of set operations, which are computationally expensive.

2. **High Iteration in Main Loop:**
   - **Invariant:** "When the number of iterations required to process the squares (`n`) is large, and most squares require adjustment (either addition or removal from the sets), the program performance will degrade."
   - **Reasoning:** In both the `add()` and `erase()` functions, the operation of adjusting the set sizes propagates the cost due to the repeated calls to `norm()`.

3. **Excessive Administration Resource Balancing:**
   - **Invariant:** "If the administration's available resources (`b`) are insufficient relative to the combined costs of occupying the squares, causing frequent rebalancing across days (`k`), then performance may degrade."
   - **Reasoning:** The necessity to frequently re-evaluate and adjust the administration's response leads to increased computation in the `norm()` function, particularly when the sums of the costs approach or exceed available resources.

These invariants abstract the source of performance bottlenecks into situation-based triggers, allowing for a better understanding of potential slow paths in the program. The conditions are broad enough to capture scenarios beyond the provided input examples while staying within the problem constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
In the capital city of Berland, Bertown, demonstrations are against the recent election of the King of Berland. Berland opposition, led by Mr. Ovalny, believes that the elections were not fair enough and wants to organize a demonstration at one of the squares.

Bertown has n squares, numbered from 1 to n, they are numbered in the order of increasing distance between them and the city center. That is, square number 1 is central, and square number n is the farthest from the center. Naturally, the opposition wants to hold a meeting as close to the city center as possible (that is, they want an square with the minimum number).

There are exactly k (k < n) days left before the demonstration. Now all squares are free. But the Bertown city administration never sleeps, and the approval of an application for the demonstration threatens to become a very complex process. The process of approval lasts several days, but every day the following procedure takes place:

  * The opposition shall apply to hold a demonstration at a free square (the one which isn't used by the administration). 
  * The administration tries to move the demonstration to the worst free square left. To do this, the administration organizes some long-term activities on the square, which is specified in the application of opposition. In other words, the administration starts using the square and it is no longer free. Then the administration proposes to move the opposition demonstration to the worst free square. If the opposition has applied for the worst free square then request is accepted and administration doesn't spend money. If the administration does not have enough money to organize an event on the square in question, the opposition's application is accepted. If administration doesn't have enough money to organize activity, then rest of administration's money spends and application is accepted 
  * If the application is not accepted, then the opposition can agree to the administration's proposal (that is, take the worst free square), or withdraw the current application and submit another one the next day. If there are no more days left before the meeting, the opposition has no choice but to agree to the proposal of City Hall. If application is accepted opposition can reject it. It means than opposition still can submit more applications later, but square remains free. 



In order to organize an event on the square i, the administration needs to spend ai bourles. Because of the crisis the administration has only b bourles to confront the opposition. What is the best square that the opposition can take, if the administration will keep trying to occupy the square in question each time? Note that the administration's actions always depend only on the actions of the opposition.

Input

The first line contains two integers n and k — the number of squares and days left before the meeting, correspondingly (1 ≤ k < n ≤ 105).

The second line contains a single integer b — the number of bourles the administration has (1 ≤ b ≤ 1018).

The third line contains n space-separated integers ai — the sum of money, needed to organise an event on square i (1 ≤ ai ≤ 109).

Please, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.

Output

Print a single number — the minimum number of the square where the opposition can organize the demonstration.

Examples

Input

5 2
8
2 4 5 3 1


Output

2


Input

5 2
8
3 2 4 1 5


Output

5


Input

5 4
1000000000000000
5 4 3 2 1


Output

5

Note

In the first sample the opposition can act like this. On day one it applies for square 3. The administration has to organize an event there and end up with 3 bourles. If on the second day the opposition applies for square 2, the administration won't have the money to intervene.

In the second sample the opposition has only the chance for the last square. If its first move occupies one of the first four squares, the administration is left with at least 4 bourles, which means that next day it can use its next move to move the opposition from any square to the last one.

In the third sample administration has a lot of money, so opposition can occupy only last square.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Below are the C++ code snippets implementing the performance-characterizing invariants derived in Phase 2:

1. **Balancing Set Operations Invariant:**

```cpp
void check_balancing_invariant(int set0Size, int set1Size, int k) {
    if (set0Size > k || set1Size > (set0Size + set1Size - k)) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive balancing of sets!" << endl;
        abort();
    }
}
```

2. **High Iteration in Main Loop Invariant:**

```cpp
void check_iteration_invariant(int currentIteration, int maxIterations) {
    if (currentIteration > maxIterations) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration count!" << endl;
        abort();
    }
}
```

3. **Excessive Administration Resource Balancing Invariant:**

```cpp
void check_resource_invariant(long long sum, long long b, int k) {
    if (sum > b && k > 0) {
        cerr << "Warning: Performance bottleneck condition triggered - insufficient resources for administration's actions!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Below is the instrumented C++ code with the inserted invariant checks:

```cpp
#include <bits/stdc++.h>
#pragma comment(linker, "/STACK:200000000")
using namespace std;

const int MAXN = 100100;
set<pair<long long, int> > st[2];
long long b, a[MAXN], sum = 0;
int n, k;

void norm() {
    while ((int)st[0].size() > k) {
        pair<long long, int> t = *st[0].begin();
        st[1].insert(t);
        st[0].erase(t);
        sum -= t.first;
    }
    while ((int)st[0].size() < k && !st[1].empty()) {
        pair<long long, int> t = *st[1].rbegin();
        st[0].insert(t);
        st[1].erase(t);
        sum += t.first;
    }
}

void add(int v) {
    sum += a[v];
    st[0].insert(make_pair(a[v], v));
    norm();
}

void erase(int v) {
    if (st[0].count(make_pair(a[v], v))) sum -= a[v];
    st[0].erase(make_pair(a[v], v));
    st[1].erase(make_pair(a[v], v));
    norm();
}

void check_balancing_invariant(int set0Size, int set1Size, int k) {
    if (set0Size > k || set1Size > (set0Size + set1Size - k)) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive balancing of sets!" << endl;
        abort();
    }
}

void check_iteration_invariant(int currentIteration, int maxIterations) {
    if (currentIteration > maxIterations) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration count!" << endl;
        abort();
    }
}

void check_resource_invariant(long long sum, long long b, int k) {
    if (sum > b && k > 0) {
        cerr << "Warning: Performance bottleneck condition triggered - insufficient resources for administration's actions!" << endl;
        abort();
    }
}

int main() {
    cin >> n >> k >> b;
    k--;
    for (int i = 0; i < n; i++) {
        scanf("%d", &a[i]);
        if (i + 1 != n) add(i);
    }

    // Check balancing invariant after initialization
    check_balancing_invariant(st[0].size(), st[1].size(), k);
    
    for (int i = 0; i < n - 1; i++) {
        erase(i);
        if (b - sum < a[i]) {
            cout << i + 1 << endl;
            return 0;
        }
        add(i);

        // Check resource invariant after each operation
        check_resource_invariant(sum, b, k);

        // Check iteration invariant in the main loop
        check_iteration_invariant(i, n - 2);
    }
    cout << n << endl;
    return 0;
}
```

### Commentary

- **Balancing Check:** Placed after each `add()` and `erase()` function call, ensuring the sets are not excessively unbalanced.
- **Iteration Check:** Placed inside the main loop to monitor the loop iteration count and ensure it doesn't exceed reasonable limits.
- **Resource Check:** Placed after updating the sum to ensure the resources are sufficient for administration operations.

These checks help identify potential performance bottlenecks and can notify if any of these conditions are met during execution, assisting in proactive debugging and optimization efforts.

