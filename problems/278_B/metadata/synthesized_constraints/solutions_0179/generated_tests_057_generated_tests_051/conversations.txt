system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Coming up with a new problem isn't as easy as many people think. Sometimes it is hard enough to name it. We'll consider a title original if it doesn't occur as a substring in any titles of recent Codeforces problems. 

You've got the titles of n last problems — the strings, consisting of lowercase English letters. Your task is to find the shortest original title for the new problem. If there are multiple such titles, choose the lexicographically minimum one. Note, that title of the problem can't be an empty string.

A substring s[l... r] (1 ≤ l ≤ r ≤ |s|) of string s = s1s2... s|s| (where |s| is the length of string s) is string slsl + 1... sr.

String x = x1x2... xp is lexicographically smaller than string y = y1y2... yq, if either p < q and x1 = y1, x2 = y2, ... , xp = yp, or there exists such number r (r < p, r < q), that x1 = y1, x2 = y2, ... , xr = yr and xr + 1 < yr + 1. The string characters are compared by their ASCII codes.

Input

The first line contains integer n (1 ≤ n ≤ 30) — the number of titles you've got to consider. Then follow n problem titles, one per line. Each title only consists of lowercase English letters (specifically, it doesn't contain any spaces) and has the length from 1 to 20, inclusive.

Output

Print a string, consisting of lowercase English letters — the lexicographically minimum shortest original title.

Examples

Input

5
threehorses
goodsubstrings
secret
primematrix
beautifulyear


Output

j


Input

4
aa
bdefghijklmn
opqrstuvwxyz
c


Output

ab

Note

In the first sample the first 9 letters of the English alphabet (a, b, c, d, e, f, g, h, i) occur in the problem titles, so the answer is letter j.

In the second sample the titles contain 26 English letters, so the shortest original title cannot have length 1. Title aa occurs as a substring in the first title.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
string getNext(string s) {
  int n = s.size();
  string res = s;
  for (int i = n - 1; i >= 0; i--) {
    if (res[i] != 'z') {
      res[i] = res[i] + 1;
      break;
    }
  }
  if (res == s) {
    res = "";
    for (int i = 0; i < n + 1; i++) res += "a";
  }
  return res;
}
bool sortStr(string a, string b) {
  if (a.size() != b.size()) return a.size() < b.size();
  return a < b;
}
int main() {
  int n;
  cin >> n;
  string a[n];
  for (int i = 0; i < n; i++) cin >> a[i];
  set<string> S;
  for (int i = 0; i < n; i++) {
    for (int len = 1; len <= a[i].size(); len++) {
      string s = "";
      int j;
      for (j = 0; j < len; j++) s += a[i][j];
      S.insert(s);
      for (; j < a[i].size(); j++) {
        s.erase(0, 1);
        s += a[i][j];
        S.insert(s);
      }
    }
  }
  string arr[S.size()];
  set<string>::iterator itr;
  int i = 0;
  for (itr = S.begin(); itr != S.end(); ++itr) {
    arr[i++] = *itr;
  }
  sort(arr, arr + S.size(), sortStr);
  string ans;
  if (arr[0] != "a") {
    ans = "a";
  } else {
    string arr1[S.size()];
    int k = 0;
    for (int i = 0; i < S.size(); i++) {
      string next = getNext(arr[i]);
      if (i != S.size() - 1 && !S.count(next)) {
        arr1[k++] = next;
      }
      if (i == S.size() - 1) arr1[k++] = next;
    }
    sort(arr1, arr1 + k, sortStr);
    ans = arr1[0];
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2
dddwptbajpwxalx
tjwdymohrrszorrnomc


(G.2) Fast Input

2
kh
obso


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
string getNext(string s) { /* line 3 slow_hit_count: 292, fast_hit_count: 0 */
  int n = s.size(); /* line 4 slow_hit_count: 292, fast_hit_count: 0 */
  string res = s; /* line 5 slow_hit_count: 292, fast_hit_count: 0 */
  for (int i = n - 1; i >= 0; i--) { /* line 6 slow_hit_count: 304, fast_hit_count: 0 */
    if (res[i] != 'z') { /* line 7 slow_hit_count: 303, fast_hit_count: 0 */
      res[i] = res[i] + 1; /* line 8 slow_hit_count: 291, fast_hit_count: 0 */
      break; /* line 9 slow_hit_count: 291, fast_hit_count: 0 */
    } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  if (res == s) { /* line 12 slow_hit_count: 292, fast_hit_count: 0 */
    res = ""; /* line 13 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 0; i < n + 1; i++) res += "a"; /* line 14 slow_hit_count: 3, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 16 slow_hit_count: 292, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
bool sortStr(string a, string b) { /* line 18 slow_hit_count: 5142, fast_hit_count: 40 */
  if (a.size() != b.size()) return a.size() < b.size(); /* line 19 slow_hit_count: 5142, fast_hit_count: 40 */
  return a < b; /* line 20 slow_hit_count: 2288, fast_hit_count: 12 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  string a[n]; /* line 25 slow_hit_count: 6, fast_hit_count: 6 */
  for (int i = 0; i < n; i++) cin >> a[i]; /* line 26 slow_hit_count: 3, fast_hit_count: 3 */
  set<string> S; /* line 27 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) { /* line 28 slow_hit_count: 3, fast_hit_count: 3 */
    for (int len = 1; len <= a[i].size(); len++) { /* line 29 slow_hit_count: 36, fast_hit_count: 8 */
      string s = ""; /* line 30 slow_hit_count: 68, fast_hit_count: 12 */
      int j; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      for (j = 0; j < len; j++) s += a[i][j]; /* line 32 slow_hit_count: 344, fast_hit_count: 19 */
      S.insert(s); /* line 33 slow_hit_count: 34, fast_hit_count: 6 */
      for (; j < a[i].size(); j++) { /* line 34 slow_hit_count: 310, fast_hit_count: 13 */
        s.erase(0, 1); /* line 35 slow_hit_count: 276, fast_hit_count: 7 */
        s += a[i][j]; /* line 36 slow_hit_count: 276, fast_hit_count: 7 */
        S.insert(s); /* line 37 slow_hit_count: 276, fast_hit_count: 7 */
      } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  string arr[S.size()]; /* line 41 slow_hit_count: 586, fast_hit_count: 26 */
  set<string>::iterator itr; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  int i = 0; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  for (itr = S.begin(); itr != S.end(); ++itr) { /* line 44 slow_hit_count: 293, fast_hit_count: 13 */
    arr[i++] = *itr; /* line 45 slow_hit_count: 292, fast_hit_count: 12 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  sort(arr, arr + S.size(), sortStr); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  string ans; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  if (arr[0] != "a") { /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
    ans = "a"; /* line 50 slow_hit_count: 0, fast_hit_count: 1 */
  } else { /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    string arr1[S.size()]; /* line 52 slow_hit_count: 586, fast_hit_count: 0 */
    int k = 0; /* line 53 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 0; i < S.size(); i++) { /* line 54 slow_hit_count: 293, fast_hit_count: 0 */
      string next = getNext(arr[i]); /* line 55 slow_hit_count: 584, fast_hit_count: 0 */
      if (i != S.size() - 1 && !S.count(next)) { /* line 56 slow_hit_count: 292, fast_hit_count: 0 */
        arr1[k++] = next; /* line 57 slow_hit_count: 278, fast_hit_count: 0 */
      } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
      if (i == S.size() - 1) arr1[k++] = next; /* line 59 slow_hit_count: 292, fast_hit_count: 0 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    sort(arr1, arr1 + k, sortStr); /* line 61 slow_hit_count: 1, fast_hit_count: 0 */
    ans = arr1[0]; /* line 62 slow_hit_count: 2, fast_hit_count: 0 */
  } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 65 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 66 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided C code and the hit count data for the slow and fast inputs, we can analyze the performance characteristics as follows:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Function `getNext`:** 
   - **Hit Counts:** The `getNext` function is called 292 times on the slow input and not at all on the fast input. This suggests that this function contributes significantly to the slow performance.
   - **Analysis:** The function is used to generate the next potential candidate string which is then checked against existing strings. It involves a loop that modifies a string and checks if it matches the original, suggesting inefficiency if called repeatedly.

2. **Function `sortStr`:**
   - **Hit Counts:** The `sortStr` function is called 5142 times for the slow input vs. 40 times for the fast input. This indicates that sorting operations are a major factor in the slowdown.
   - **Analysis:** Sorting operations over potentially large sets of substrings can be very expensive, especially in a nested manner or when involving repeated comparisons.

3. **Looping over Substrings (Lines 28-40):**
   - **Hit Counts:** Significant hit counts on lines related to substring extraction and insertion into a set. Lines like 32, 34-37 have high hit counts for the slow input.
   - **Analysis:** The process of generating and storing all possible substrings is sensitive to the length of the input strings. This results in many substrings being processed, especially if the input titles are long.

4. **Array and Set Operations:**
   - **Hit Counts:** The array and set operations like initializing arrays (lines 41-43) and iterating over sets (line 44-45) are also notably high in slow cases.
   - **Analysis:** Memory and computational overhead from managing a large number of substrings stored in data structures.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants that describe conditions under which the program likely enters a slow path:

1. **Excessive Substring Extraction and Storage:**
   - **Natural Language Description:** "If the input titles are long, or if many titles are near the maximum allowed length, the number of substrings generated grows significantly, leading to performance degradation."
   - **Reasoning:** The nested loops for extracting substrings and storing them in a set have complexity related to the lengths of input strings. For titles close to 20 characters long, this can become costly.

2. **Frequent and Large Sorting Operations:**
   - **Natural Language Description:** "When the collection of substrings becomes large due to long input titles, the repeated sorting and comparison operations slow down performance."
   - **Reasoning:** The sorting operations' computational cost is exacerbated by the number of substrings, which grows with longer titles.

3. **Inefficient Incremental String Generation:**
   - **Natural Language Description:** "If `getNext` is called frequently due to many similar substrings existing in input, the cumulative cost of modifying and checking strings becomes a bottleneck."
   - **Reasoning:** This function's repetitive nature and string operations contribute to slowdown when invoked numerous times.

By understanding these conditions, a fuzzer or further optimizations could focus on input generation patterns that maximize these characteristics, allowing for better performance testing and improvements.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Coming up with a new problem isn't as easy as many people think. Sometimes it is hard enough to name it. We'll consider a title original if it doesn't occur as a substring in any titles of recent Codeforces problems. 

You've got the titles of n last problems — the strings, consisting of lowercase English letters. Your task is to find the shortest original title for the new problem. If there are multiple such titles, choose the lexicographically minimum one. Note, that title of the problem can't be an empty string.

A substring s[l... r] (1 ≤ l ≤ r ≤ |s|) of string s = s1s2... s|s| (where |s| is the length of string s) is string slsl + 1... sr.

String x = x1x2... xp is lexicographically smaller than string y = y1y2... yq, if either p < q and x1 = y1, x2 = y2, ... , xp = yp, or there exists such number r (r < p, r < q), that x1 = y1, x2 = y2, ... , xr = yr and xr + 1 < yr + 1. The string characters are compared by their ASCII codes.

Input

The first line contains integer n (1 ≤ n ≤ 30) — the number of titles you've got to consider. Then follow n problem titles, one per line. Each title only consists of lowercase English letters (specifically, it doesn't contain any spaces) and has the length from 1 to 20, inclusive.

Output

Print a string, consisting of lowercase English letters — the lexicographically minimum shortest original title.

Examples

Input

5
threehorses
goodsubstrings
secret
primematrix
beautifulyear


Output

j


Input

4
aa
bdefghijklmn
opqrstuvwxyz
c


Output

ab

Note

In the first sample the first 9 letters of the English alphabet (a, b, c, d, e, f, g, h, i) occur in the problem titles, so the answer is letter j.

In the second sample the titles contain 26 English letters, so the shortest original title cannot have length 1. Title aa occurs as a substring in the first title.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

For each invariant derived in Phase 2, we will create C++ functions to check the conditions. 

1. **Excessive Substring Extraction and Storage:**

   - **Description:** Checks if the number of substrings generated from all titles reaches a critical threshold, considering the worst-case where all possible substrings are stored.
   
   ```cpp
   void check_substring_invariant(size_t substringCount, size_t threshold) {
       if (substringCount > threshold) {
           cerr << "Warning: substring_invariant triggered - too many substrings generated!" << endl;
           abort();
       }
   }
   ```

2. **Frequent and Large Sorting Operations:**

   - **Description:** Checks if the number of elements being sorted is large, which indicates potential performance degradation due to sorting.
   
   ```cpp
   void check_sort_invariant(size_t elementCount, size_t threshold) {
       if (elementCount > threshold) {
           cerr << "Warning: sort_invariant triggered - too many elements being sorted!" << endl;
           abort();
       }
   }
   ```

3. **Inefficient Incremental String Generation:**

   - **Description:** Checks if the `getNext` function is called a large number of times, indicating inefficient incremental string generation.
   
   ```cpp
   void check_getnext_call_invariant(int callCount, int threshold) {
       if (callCount > threshold) {
           cerr << "Warning: getNext_call_invariant triggered - excessive calls to getNext!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checkers into the Original C++ Code

Below is the modified C++ program, with performance-checking code integrated at appropriate points to avoid adding overhead in tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check excessive substring generation
void check_substring_invariant(size_t substringCount, size_t threshold) {
    if (substringCount > threshold) {
        cerr << "Warning: substring_invariant triggered - too many substrings generated!" << endl;
        abort();
    }
}

// Function to check excessive sorting operations
void check_sort_invariant(size_t elementCount, size_t threshold) {
    if (elementCount > threshold) {
        cerr << "Warning: sort_invariant triggered - too many elements being sorted!" << endl;
        abort();
    }
}

// Function to check excessive calls to getNext
void check_getnext_call_invariant(int callCount, int threshold) {
    if (callCount > threshold) {
        cerr << "Warning: getNext_call_invariant triggered - excessive calls to getNext!" << endl;
        abort();
    }
}

string getNext(string s) {
    static int getNextCallCount = 0;
    getNextCallCount++;
    check_getnext_call_invariant(getNextCallCount, 500); // Threshold is arbitrary but should be reasonable

    int n = s.size();
    string res = s;
    for (int i = n - 1; i >= 0; i--) {
        if (res[i] != 'z') {
            res[i] = res[i] + 1;
            break;
        }
    }
    if (res == s) {
        res = "";
        for (int i = 0; i < n + 1; i++) res += "a";
    }
    return res;
}

bool sortStr(string a, string b) {
    if (a.size() != b.size()) return a.size() < b.size();
    return a < b;
}

int main() {
    int n;
    cin >> n;
    string a[n];
    for (int i = 0; i < n; i++) cin >> a[i];

    set<string> S;
    for (int i = 0; i < n; i++) {
        for (int len = 1; len <= a[i].size(); len++) {
            string s = "";
            int j;
            for (j = 0; j < len; j++) s += a[i][j];
            S.insert(s);
            for (; j < a[i].size(); j++) {
                s.erase(0, 1);
                s += a[i][j];
                S.insert(s);
            }
        }
    }

    check_substring_invariant(S.size(), 5000); // Adjust threshold as appropriate to catch potential slow cases

    string arr[S.size()];
    set<string>::iterator itr;
    int i = 0;
    for (itr = S.begin(); itr != S.end(); ++itr) {
        arr[i++] = *itr;
    }

    check_sort_invariant(S.size(), 5000); // Again, adjust threshold appropriately

    sort(arr, arr + S.size(), sortStr);
    string ans;
    if (arr[0] != "a") {
        ans = "a";
    } else {
        string arr1[S.size()];
        int k = 0;
        for (int i = 0; i < S.size(); i++) {
            string next = getNext(arr[i]);
            if (i != S.size() - 1 && !S.count(next)) {
                arr1[k++] = next;
            }
            if (i == S.size() - 1) arr1[k++] = next;
        }
        sort(arr1, arr1 + k, sortStr);
        ans = arr1[0];
    }

    cout << ans << endl;
    return 0;
}
```

### Explanation

- **`check_substring_invariant`**: After generating all substrings, we verify that their count doesn't exceed a threshold which indicates a potential performance issue.
  
- **`check_sort_invariant`**: We check before sorting operations to ensure that the array size is not excessively large, which would indicate a potential performance bottleneck.

- **`check_getnext_call_invariant`**: A static counter tracks the number of `getNext` calls, and we issue a warning if this number exceeds an expected threshold, suggesting inefficiency in string generation.

These checks help ensure that the program's performance characteristics are monitored and potential bottlenecks are caught early, aiding further debugging or optimization efforts.

