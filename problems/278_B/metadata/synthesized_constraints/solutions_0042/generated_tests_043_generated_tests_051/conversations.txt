system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Coming up with a new problem isn't as easy as many people think. Sometimes it is hard enough to name it. We'll consider a title original if it doesn't occur as a substring in any titles of recent Codeforces problems. 

You've got the titles of n last problems — the strings, consisting of lowercase English letters. Your task is to find the shortest original title for the new problem. If there are multiple such titles, choose the lexicographically minimum one. Note, that title of the problem can't be an empty string.

A substring s[l... r] (1 ≤ l ≤ r ≤ |s|) of string s = s1s2... s|s| (where |s| is the length of string s) is string slsl + 1... sr.

String x = x1x2... xp is lexicographically smaller than string y = y1y2... yq, if either p < q and x1 = y1, x2 = y2, ... , xp = yp, or there exists such number r (r < p, r < q), that x1 = y1, x2 = y2, ... , xr = yr and xr + 1 < yr + 1. The string characters are compared by their ASCII codes.

Input

The first line contains integer n (1 ≤ n ≤ 30) — the number of titles you've got to consider. Then follow n problem titles, one per line. Each title only consists of lowercase English letters (specifically, it doesn't contain any spaces) and has the length from 1 to 20, inclusive.

Output

Print a string, consisting of lowercase English letters — the lexicographically minimum shortest original title.

Examples

Input

5
threehorses
goodsubstrings
secret
primematrix
beautifulyear


Output

j


Input

4
aa
bdefghijklmn
opqrstuvwxyz
c


Output

ab

Note

In the first sample the first 9 letters of the English alphabet (a, b, c, d, e, f, g, h, i) occur in the problem titles, so the answer is letter j.

In the second sample the titles contain 26 English letters, so the shortest original title cannot have length 1. Title aa occurs as a substring in the first title.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
vector<string> v;
int n;
string s;
map<string, bool> m;
bool comp(string a, string b) {
  if (a.length() != b.length()) {
    return a.length() < b.length();
  }
  return a < b;
}
string sig(string mini) {
  string r = "";
  if (mini[mini.length() - 1] == 'z') {
    bool ok = 0;
    for (int i = mini.length() - 1; i >= 0; i--) {
      if (mini[i] != 'z') {
        mini[i]++;
        ok = 1;
        mini[mini.length() - 1] = 'a';
        return mini;
      }
    }
    if (!ok) {
      for (int i = 0; i <= mini.length(); i++) {
        r += "a";
      }
    }
    return r;
  } else {
    mini[mini.length() - 1]++;
    return mini;
  }
}
int main() {
  scanf("%d", &n);
  string mini = "a";
  for (int i = 0; i < n; i++) {
    cin >> s;
    for (int j = 0; j < s.length(); j++) {
      for (int r = 0; r <= s.length(); r++) {
        if (j + r > s.length()) continue;
        string aux = s.substr(j, r);
        if (!m[aux] && aux.length() > 0) v.push_back(aux);
        m[aux] = 1;
      }
    }
  }
  sort(v.begin(), v.end(), comp);
  string res = "";
  if (v[0] != "a") {
    cout << "a" << endl;
    return 0;
  }
  for (int i = 0; i < v.size() - 1; i++) {
    if (v[i + 1] != sig(v[i]) && v[i + 1] != v[i]) {
      res = v[i];
      break;
    }
  }
  if (res != "") {
    cout << sig(res) << endl;
  } else {
    cout << sig(v[v.size() - 1]) << endl;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2
dddwptbajpwxalx
tjwdxmohrrszorrnomc


(G.2) Fast Input

2
kh
obso


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
vector<string> v; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
string s; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
map<string, bool> m; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
bool comp(string a, string b) { /* line 7 slow_hit_count: 3178, fast_hit_count: 36 */
  if (a.length() != b.length()) { /* line 8 slow_hit_count: 3178, fast_hit_count: 36 */
    return a.length() < b.length(); /* line 9 slow_hit_count: 1795, fast_hit_count: 25 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  return a < b; /* line 11 slow_hit_count: 1383, fast_hit_count: 11 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
string sig(string mini) { /* line 13 slow_hit_count: 5, fast_hit_count: 0 */
  string r = ""; /* line 14 slow_hit_count: 10, fast_hit_count: 0 */
  if (mini[mini.length() - 1] == 'z') { /* line 15 slow_hit_count: 5, fast_hit_count: 0 */
    bool ok = 0; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = mini.length() - 1; i >= 0; i--) { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
      if (mini[i] != 'z') { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
        mini[i]++; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
        ok = 1; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
        mini[mini.length() - 1] = 'a'; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
        return mini; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    if (!ok) { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      for (int i = 0; i <= mini.length(); i++) { /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
        r += "a"; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    return r; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    mini[mini.length() - 1]++; /* line 32 slow_hit_count: 5, fast_hit_count: 0 */
    return mini; /* line 33 slow_hit_count: 5, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  string mini = "a"; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 39 slow_hit_count: 3, fast_hit_count: 3 */
    cin >> s; /* line 40 slow_hit_count: 2, fast_hit_count: 2 */
    for (int j = 0; j < s.length(); j++) { /* line 41 slow_hit_count: 36, fast_hit_count: 8 */
      for (int r = 0; r <= s.length(); r++) { /* line 42 slow_hit_count: 654, fast_hit_count: 32 */
        if (j + r > s.length()) continue; /* line 43 slow_hit_count: 620, fast_hit_count: 26 */
        string aux = s.substr(j, r); /* line 44 slow_hit_count: 344, fast_hit_count: 19 */
        if (!m[aux] && aux.length() > 0) v.push_back(aux); /* line 45 slow_hit_count: 344, fast_hit_count: 19 */
        m[aux] = 1; /* line 46 slow_hit_count: 344, fast_hit_count: 19 */
      } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  sort(v.begin(), v.end(), comp); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  string res = ""; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  if (v[0] != "a") { /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "a" << endl; /* line 53 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 54 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < v.size() - 1; i++) { /* line 56 slow_hit_count: 4, fast_hit_count: 0 */
    if (v[i + 1] != sig(v[i]) && v[i + 1] != v[i]) { /* line 57 slow_hit_count: 4, fast_hit_count: 0 */
      res = v[i]; /* line 58 slow_hit_count: 1, fast_hit_count: 0 */
      break; /* line 59 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  if (res != "") { /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
    cout << sig(res) << endl; /* line 63 slow_hit_count: 1, fast_hit_count: 0 */
  } else { /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
    cout << sig(v[v.size() - 1]) << endl; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 67 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C++ program, we can go through the tasks in two phases as outlined in your request: identifying expensive code segments and deriving performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - **Function `comp`:** 
     - Lines 7-11 in the `comp` function are hit significantly more often in the slow input compared to the fast input (3178 vs. 36). This suggests extensive sorting operations which are likely contributing to the slowdown.
   - **Substring Generation:**
     - Lines 41-46 iterate over the substrings of each problem title. Given the nested loops, the hit count difference (e.g., line 42: 654 vs. 32) indicates that this part of the code is heavily executed, especially when the titles are longer or have many substrings.
   - **Sorting In `main`:**
     - The call to `sort` on line 50 also shows significant activity, corresponding to the hit counts in the `comp` function. This suggests that the sorting operation on a potentially large collection of substrings is a major cause of slowdown.

2. **Interaction with Data Structures:**
   - The vector `v` and map `m` are used to store and check substrings, respectively. The creation and sorting of these substrings (lines 41-50) are key operations that grow with input complexity, particularly if the problem titles have many overlapping substrings.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, the following natural language statements describe conditions under which the program likely experiences slow performance:

1. **Substring Explosion:**
   - Condition: "When problem titles have lengths close to the maximum constraint (20 characters) with significant overlap in substrings, the number of substrings generated can grow exponentially, leading to increased sorting operations."
   - Explanation: The nested loop constructing substrings results in a quadratic number of potential substrings per title, which can significantly inflate the workload for the sorting operation.

2. **Sorting Overhead:**
   - Condition: "If the number of unique substrings generated approaches the upper limit of what can be stored efficiently (given the constraints), repeated comparisons during sort can severely impact performance."
   - Explanation: The custom comparator function (`comp`) is invoked frequently during sorting, and its complexity can impact performance when dealing with a large number of substrings.

3. **Lexicographical Comparisons:**
   - Condition: "When strings are lexicographically close together or of similar lengths, the sorting mechanism requires more detailed comparisons, further impacting runtime."
   - Explanation: For strings with similar prefixes or of equal lengths, the comparator function requires deeper lexical comparisons, increasing execution time.

These invariants reflect the program's susceptibility to specific input patterns and interactions with data structures, tailored to the constraints and problem characteristics without relying on exact values from the provided inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Coming up with a new problem isn't as easy as many people think. Sometimes it is hard enough to name it. We'll consider a title original if it doesn't occur as a substring in any titles of recent Codeforces problems. 

You've got the titles of n last problems — the strings, consisting of lowercase English letters. Your task is to find the shortest original title for the new problem. If there are multiple such titles, choose the lexicographically minimum one. Note, that title of the problem can't be an empty string.

A substring s[l... r] (1 ≤ l ≤ r ≤ |s|) of string s = s1s2... s|s| (where |s| is the length of string s) is string slsl + 1... sr.

String x = x1x2... xp is lexicographically smaller than string y = y1y2... yq, if either p < q and x1 = y1, x2 = y2, ... , xp = yp, or there exists such number r (r < p, r < q), that x1 = y1, x2 = y2, ... , xr = yr and xr + 1 < yr + 1. The string characters are compared by their ASCII codes.

Input

The first line contains integer n (1 ≤ n ≤ 30) — the number of titles you've got to consider. Then follow n problem titles, one per line. Each title only consists of lowercase English letters (specifically, it doesn't contain any spaces) and has the length from 1 to 20, inclusive.

Output

Print a string, consisting of lowercase English letters — the lexicographically minimum shortest original title.

Examples

Input

5
threehorses
goodsubstrings
secret
primematrix
beautifulyear


Output

j


Input

4
aa
bdefghijklmn
opqrstuvwxyz
c


Output

ab

Note

In the first sample the first 9 letters of the English alphabet (a, b, c, d, e, f, g, h, i) occur in the problem titles, so the answer is letter j.

In the second sample the titles contain 26 English letters, so the shortest original title cannot have length 1. Title aa occurs as a substring in the first title.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as Checker Code

Below are the C++ code snippets that implement the performance-characterizing invariants described in natural language:

1. **Invariant 1: Substring Explosion**
   ```cpp
   void check_substring_explosion(int titleLength) {
       if (titleLength > 15) {  // Threshold chosen based on maximum possible complexity
           cerr << "Warning: Performance bottleneck condition triggered - too many substrings!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Sorting Overhead**
   ```cpp
   void check_sorting_overhead(int substringCount) {
       if (substringCount > 200) {  // Arbitrary threshold for number of substrings
           cerr << "Warning: Performance bottleneck condition triggered - excessive sorting!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Lexicographical Comparisons**
   ```cpp
   void check_lexical_comparisons(int numComparisons) {
       if (numComparisons > 10000) {  // Threshold for comparison operations
           cerr << "Warning: Performance bottleneck condition triggered - excessive lexical comparisons!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checkers into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

vector<string> v;
int n;
string s;
map<string, bool> m;

bool comp(string a, string b) {
    if (a.length() != b.length()) {
        return a.length() < b.length();
    }
    return a < b;
}

string sig(string mini) {
    string r = "";
    if (mini[mini.length() - 1] == 'z') {
        bool ok = 0;
        for (int i = mini.length() - 1; i >= 0; i--) {
            if (mini[i] != 'z') {
                mini[i]++;
                ok = 1;
                mini[mini.length() - 1] = 'a';
                return mini;
            }
        }
        if (!ok) {
            for (int i = 0; i <= mini.length(); i++) {
                r += "a";
            }
        }
        return r;
    } else {
        mini[mini.length() - 1]++;
        return mini;
    }
}

// Checker functions
void check_substring_explosion(int titleLength) {
    if (titleLength > 15) {  // Threshold based on complexity
        cerr << "Warning: Performance bottleneck condition triggered - too many substrings!" << endl;
        abort();
    }
}

void check_sorting_overhead(int substringCount) {
    if (substringCount > 200) {  // Threshold for sorting overhead
        cerr << "Warning: Performance bottleneck condition triggered - excessive sorting!" << endl;
        abort();
    }
}

void check_lexical_comparisons(int numComparisons) {
    if (numComparisons > 10000) {  // Threshold for lexical comparisons
        cerr << "Warning: Performance bottleneck condition triggered - excessive lexical comparisons!" << endl;
        abort();
    }
}

int main() {
    scanf("%d", &n);
    string mini = "a";
    int totalComparisons = 0; // New variable to count comparisons

    for (int i = 0; i < n; i++) {
        cin >> s;
        check_substring_explosion(s.length()); // Check for too many substrings

        for (int j = 0; j < s.length(); j++) {
            for (int r = 0; r <= s.length(); r++) {
                if (j + r > s.length()) continue;
                string aux = s.substr(j, r);
                if (!m[aux] && aux.length() > 0) v.push_back(aux);
                m[aux] = 1;
            }
        }
    }

    check_sorting_overhead(v.size()); // Check for sorting overhead
    sort(v.begin(), v.end(), [&](string a, string b) {
        totalComparisons++; // Increment for each comparison
        return comp(a, b);
    });

    check_lexical_comparisons(totalComparisons); // Check for excessive comparisons

    string res = "";
    if (v[0] != "a") {
        cout << "a" << endl;
        return 0;
    }
    for (int i = 0; i < v.size() - 1; i++) {
        if (v[i + 1] != sig(v[i]) && v[i + 1] != v[i]) {
            res = v[i];
            break;
        }
    }
    if (res != "") {
        cout << sig(res) << endl;
    } else {
        cout << sig(v[v.size() - 1]) << endl;
    }
}
```

### Explanation of Integration:
- **Substring Explosion Check**: Placed after reading each title to catch conditions where substring generation could explode in size.
- **Sorting Overhead Check**: Inserted before the sorting to ensure the number of substrings is manageable.
- **Lexical Comparisons Check**: Counts the number of comparisons during sorting and checks if it exceeds a threshold after sorting is complete.

These checks provide a safety net against potential slowdowns by signaling performance bottlenecks effectively and aborting execution if thresholds are breached.

