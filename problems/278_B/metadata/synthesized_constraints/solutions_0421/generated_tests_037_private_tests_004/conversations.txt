system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Coming up with a new problem isn't as easy as many people think. Sometimes it is hard enough to name it. We'll consider a title original if it doesn't occur as a substring in any titles of recent Codeforces problems. 

You've got the titles of n last problems — the strings, consisting of lowercase English letters. Your task is to find the shortest original title for the new problem. If there are multiple such titles, choose the lexicographically minimum one. Note, that title of the problem can't be an empty string.

A substring s[l... r] (1 ≤ l ≤ r ≤ |s|) of string s = s1s2... s|s| (where |s| is the length of string s) is string slsl + 1... sr.

String x = x1x2... xp is lexicographically smaller than string y = y1y2... yq, if either p < q and x1 = y1, x2 = y2, ... , xp = yp, or there exists such number r (r < p, r < q), that x1 = y1, x2 = y2, ... , xr = yr and xr + 1 < yr + 1. The string characters are compared by their ASCII codes.

Input

The first line contains integer n (1 ≤ n ≤ 30) — the number of titles you've got to consider. Then follow n problem titles, one per line. Each title only consists of lowercase English letters (specifically, it doesn't contain any spaces) and has the length from 1 to 20, inclusive.

Output

Print a string, consisting of lowercase English letters — the lexicographically minimum shortest original title.

Examples

Input

5
threehorses
goodsubstrings
secret
primematrix
beautifulyear


Output

j


Input

4
aa
bdefghijklmn
opqrstuvwxyz
c


Output

ab

Note

In the first sample the first 9 letters of the English alphabet (a, b, c, d, e, f, g, h, i) occur in the problem titles, so the answer is letter j.

In the second sample the titles contain 26 English letters, so the shortest original title cannot have length 1. Title aa occurs as a substring in the first title.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <class F, class T>
T convert(F a, int p = -1) {
  stringstream ss;
  if (p >= 0) ss << fixed << setprecision(p);
  ss << a;
  T r;
  ss >> r;
  return r;
}
const int oo = int(1e9) + 7;
const int dx[] = {1, 0, 0, -1};
const int dy[] = {0, -1, 1, 0};
const int N = int(2e5) + 10;
int n, t;
bool ok;
set<string> f;
string s, res, cur;
queue<string> q;
int main() {
  cin >> n;
  while (n--) {
    cin >> s;
    t = s.length();
    for (int i = 0; i < (t); ++i)
      for (int j = (i), _b = (t - 1); j <= _b; ++j) {
        res = "";
        for (int k = (i), _b = (j); k <= _b; ++k) res = res + s[k];
        f.insert(res);
      }
  }
  q.push("");
  while (!q.empty()) {
    cur = q.front();
    q.pop();
    for (int ch = ('a'), _b = ('z'); ch <= _b; ++ch) {
      res = cur + char(ch);
      if (!f.count(res)) {
        cout << res;
        return 0;
      }
      q.push(res);
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
zzxpfk
abcdefghijjlmnopqrst
uvwxz
nlkfdlksajkgrs
vfnsdfdgfh


(G.2) Fast Input

5
splt
ohqykk
xqpz
knojbur
pmfm


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <class F, class T> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
T convert(F a, int p = -1) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  stringstream ss; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  if (p >= 0) ss << fixed << setprecision(p); /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  ss << a; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  T r; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  ss >> r; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  return r; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
const int oo = int(1e9) + 7; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
const int dx[] = {1, 0, 0, -1}; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
const int dy[] = {0, -1, 1, 0}; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
const int N = int(2e5) + 10; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int n, t; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
bool ok; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
set<string> f; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
string s, res, cur; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
queue<string> q; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  while (n--) { /* line 23 slow_hit_count: 6, fast_hit_count: 6 */
    cin >> s; /* line 24 slow_hit_count: 5, fast_hit_count: 5 */
    t = s.length(); /* line 25 slow_hit_count: 5, fast_hit_count: 5 */
    for (int i = 0; i < (t); ++i) /* line 26 slow_hit_count: 60, fast_hit_count: 30 */
      for (int j = (i), _b = (t - 1); j <= _b; ++j) { /* line 27 slow_hit_count: 461, fast_hit_count: 104 */
        res = ""; /* line 28 slow_hit_count: 406, fast_hit_count: 79 */
        for (int k = (i), _b = (j); k <= _b; ++k) res = res + s[k]; /* line 29 slow_hit_count: 2817, fast_hit_count: 279 */
        f.insert(res); /* line 30 slow_hit_count: 406, fast_hit_count: 79 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  q.push(""); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  while (!q.empty()) { /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
    cur = q.front(); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
    q.pop(); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
    for (int ch = ('a'), _b = ('z'); ch <= _b; ++ch) { /* line 37 slow_hit_count: 25, fast_hit_count: 1 */
      res = cur + char(ch); /* line 38 slow_hit_count: 25, fast_hit_count: 1 */
      if (!f.count(res)) { /* line 39 slow_hit_count: 25, fast_hit_count: 1 */
        cout << res; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
        return 0; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      q.push(res); /* line 43 slow_hit_count: 24, fast_hit_count: 0 */
    } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issue in the given C program, let's proceed in two phases as described.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Hit Count Analysis:**
   - Lines 26 and 27 are significantly more hit in the slow input than in the fast input. Specifically:
     - Line 26: Iterates over the length of each title `t`. It registers 60 hits for the slow input versus 30 for the fast input.
     - Line 27: A nested loop for each character combination generates 461 hits for the slow input versus 104 for the fast input.
   - Line 29 is also prominently hit, with 2817 hits for the slow input versus 279 for the fast input. This line is responsible for constructing substrings, which indicates it is part of a nested or repeated operation.

2. **Data Structure and Control Flow:**
   - The program uses a set `f` to store substrings of all problem titles. The double loop structure, especially lines 26 and 27, leads to exponential growth in operations due to substring construction and insertion into the set.
   - The queue `q` is used in a breadth-first search fashion to generate potential titles and check against the stored substrings. This increases the computational cost significantly when the set `f` grows large.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant #1: Substring Construction**
   - **Natural Language Description:** "If the length of the titles approaches the constraint maximum (20 characters), the number of substrings constructed can grow exponentially, leading to performance degradation."
   - **Explanation:** Each additional character in titles increases the number of possible substrings dramatically, thereby increasing operations in the nested loop.

2. **Invariant #2: Set Insertion and Count Check**
   - **Natural Language Description:** "When the set containing all substrings becomes very large, checking and managing this set can slow down due to the high number of insertions and membership tests."
   - **Explanation:** The operation `f.count(res)` becomes increasingly expensive as more substrings are added to the set `f`.

3. **Invariant #3: Queue Expansion in BFS**
   - **Natural Language Description:** "If the BFS queue grows large due to many possible title candidates, the breadth-first search operation can become costly, resulting in slower performance."
   - **Explanation:** Each non-original substring detected leads to more potential substrings being enqueued, which in turn leads to more checks and longer execution time.

### Conclusion

These performance-characterizing invariants highlight scenarios where the program's complexity can degrade performance. In particular, the nested loop for substring generation and the management of a large set of substrings are critical bottlenecks, especially when handling longer titles or when a large number of substrings need to be managed.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Coming up with a new problem isn't as easy as many people think. Sometimes it is hard enough to name it. We'll consider a title original if it doesn't occur as a substring in any titles of recent Codeforces problems. 

You've got the titles of n last problems — the strings, consisting of lowercase English letters. Your task is to find the shortest original title for the new problem. If there are multiple such titles, choose the lexicographically minimum one. Note, that title of the problem can't be an empty string.

A substring s[l... r] (1 ≤ l ≤ r ≤ |s|) of string s = s1s2... s|s| (where |s| is the length of string s) is string slsl + 1... sr.

String x = x1x2... xp is lexicographically smaller than string y = y1y2... yq, if either p < q and x1 = y1, x2 = y2, ... , xp = yp, or there exists such number r (r < p, r < q), that x1 = y1, x2 = y2, ... , xr = yr and xr + 1 < yr + 1. The string characters are compared by their ASCII codes.

Input

The first line contains integer n (1 ≤ n ≤ 30) — the number of titles you've got to consider. Then follow n problem titles, one per line. Each title only consists of lowercase English letters (specifically, it doesn't contain any spaces) and has the length from 1 to 20, inclusive.

Output

Print a string, consisting of lowercase English letters — the lexicographically minimum shortest original title.

Examples

Input

5
threehorses
goodsubstrings
secret
primematrix
beautifulyear


Output

j


Input

4
aa
bdefghijklmn
opqrstuvwxyz
c


Output

ab

Note

In the first sample the first 9 letters of the English alphabet (a, b, c, d, e, f, g, h, i) occur in the problem titles, so the answer is letter j.

In the second sample the titles contain 26 English letters, so the shortest original title cannot have length 1. Title aa occurs as a substring in the first title.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Here, I will translate the natural language performance-characterizing invariants identified earlier into C++ checker code.

1. **Invariant #1: Substring Construction**
   - **Checker Code:**
   ```cpp
   void check_substring_invariant(int title_length) {
       if (title_length > 15) { // Threshold: 15 as a proxy for potentially costly checks
           cerr << "Warning: Performance bottleneck - potential exponential growth in substrings." << endl;
           abort();
       }
   }
   ```

2. **Invariant #2: Set Insertion and Count Check**
   - **Checker Code:**
   ```cpp
   void check_set_size_invariant(int set_size) {
       if (set_size > 1000) { // Threshold: 1000 to indicate large set size
           cerr << "Warning: Performance bottleneck - large set of substrings causing slow membership checks." << endl;
           abort();
       }
   }
   ```

3. **Invariant #3: Queue Expansion in BFS**
   - **Checker Code:**
   ```cpp
   void check_queue_size_invariant(int queue_size) {
       if (queue_size > 1000) { // Threshold: 1000 to signal large queue size
           cerr << "Warning: Performance bottleneck - large BFS queue causing slow processing." << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original C++ Program

Now, I will integrate the checker code into the existing C++ program. The checkers should be placed at strategic points to avoid adding unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Phase 3 checkers integrated here
void check_substring_invariant(int title_length) {
    if (title_length > 15) { // Threshold: 15 as a proxy for potentially costly checks
        cerr << "Warning: Performance bottleneck - potential exponential growth in substrings." << endl;
        abort();
    }
}

void check_set_size_invariant(int set_size) {
    if (set_size > 1000) { // Threshold: 1000 to indicate large set size
        cerr << "Warning: Performance bottleneck - large set of substrings causing slow membership checks." << endl;
        abort();
    }
}

void check_queue_size_invariant(int queue_size) {
    if (queue_size > 1000) { // Threshold: 1000 to signal large queue size
        cerr << "Warning: Performance bottleneck - large BFS queue causing slow processing." << endl;
        abort();
    }
}

template <class F, class T>
T convert(F a, int p = -1) {
    stringstream ss;
    if (p >= 0) ss << fixed << setprecision(p);
    ss << a;
    T r;
    ss >> r;
    return r;
}

const int oo = int(1e9) + 7;
const int dx[] = {1, 0, 0, -1};
const int dy[] = {0, -1, 1, 0};
const int N = int(2e5) + 10;
int n, t;
bool ok;
set<string> f;
string s, res, cur;
queue<string> q;

int main() {
    cin >> n;
    while (n--) {
        cin >> s;
        t = s.length();
        check_substring_invariant(t); // Check length of each title for potential exponential substring growth
        for (int i = 0; i < t; ++i) {
            for (int j = i; j < t; ++j) {
                res = "";
                for (int k = i; k <= j; ++k) {
                    res = res + s[k];
                }
                f.insert(res);
            }
        }
    }
    
    check_set_size_invariant(f.size()); // Check size of the set for large number of substrings

    q.push("");
    while (!q.empty()) {
        cur = q.front();
        q.pop();
        check_queue_size_invariant(q.size()); // Check size of the queue for potential large BFS expansion
        for (int ch = 'a'; ch <= 'z'; ++ch) {
            res = cur + char(ch);
            if (!f.count(res)) {
                cout << res;
                return 0;
            }
            q.push(res);
        }
    }
    return 0;
}
```

### Explanation:

- **Checkers are integrated** at strategic points:
  - `check_substring_invariant` is called after reading each title's length, before potentially expensive nested looping for substrings.
  - `check_set_size_invariant` is called after constructing the set of substrings to ensure it doesn't grow too large.
  - `check_queue_size_invariant` is called within the BFS loop to prevent the queue from becoming unmanageably large.
  
These checks ensure that potentially slow execution paths are flagged, allowing for early detection of performance bottlenecks.

