system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Coming up with a new problem isn't as easy as many people think. Sometimes it is hard enough to name it. We'll consider a title original if it doesn't occur as a substring in any titles of recent Codeforces problems. 

You've got the titles of n last problems — the strings, consisting of lowercase English letters. Your task is to find the shortest original title for the new problem. If there are multiple such titles, choose the lexicographically minimum one. Note, that title of the problem can't be an empty string.

A substring s[l... r] (1 ≤ l ≤ r ≤ |s|) of string s = s1s2... s|s| (where |s| is the length of string s) is string slsl + 1... sr.

String x = x1x2... xp is lexicographically smaller than string y = y1y2... yq, if either p < q and x1 = y1, x2 = y2, ... , xp = yp, or there exists such number r (r < p, r < q), that x1 = y1, x2 = y2, ... , xr = yr and xr + 1 < yr + 1. The string characters are compared by their ASCII codes.

Input

The first line contains integer n (1 ≤ n ≤ 30) — the number of titles you've got to consider. Then follow n problem titles, one per line. Each title only consists of lowercase English letters (specifically, it doesn't contain any spaces) and has the length from 1 to 20, inclusive.

Output

Print a string, consisting of lowercase English letters — the lexicographically minimum shortest original title.

Examples

Input

5
threehorses
goodsubstrings
secret
primematrix
beautifulyear


Output

j


Input

4
aa
bdefghijklmn
opqrstuvwxyz
c


Output

ab

Note

In the first sample the first 9 letters of the English alphabet (a, b, c, d, e, f, g, h, i) occur in the problem titles, so the answer is letter j.

In the second sample the titles contain 26 English letters, so the shortest original title cannot have length 1. Title aa occurs as a substring in the first title.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
namespace round170 {
namespace B {
inline string next(string a) {
  for (int i = (int)a.size() - 1; i >= 0; --i) {
    if (a[i] == 'z') {
      a[i] = 'a';
      if (i == 0) a = "a" + a;
    } else {
      ++a[i];
      return a;
    }
  }
  return a;
}
inline bool cmp(const string& a, const string& b) {
  if (a.size() == b.size()) return a < b;
  return a.size() < b.size();
}
int solve(istream& in) {
  int n;
  in >> n;
  set<string> q;
  string s;
  string ans;
  for (int i = 0; i < n; ++i) {
    in >> s;
    for (int j = 0; j < (int)s.size(); ++j)
      for (int k = j + 1; k <= (int)s.size(); ++k) {
        string t;
        for (int z = j; z < k; ++z) t += s[z];
        q.insert(t);
      }
  }
  vector<string> v(q.begin(), q.end());
  sort(v.begin(), v.end(), cmp);
  int i = 0;
  s = v[i];
  if (s != "a")
    ans = "a";
  else {
    for (++i; i < (int)v.size(); ++i) {
      s = next(s);
      if (v[i] != s) {
        ans = s;
        break;
      }
    }
    if (ans.empty()) {
      ans = next(v.back());
    }
  }
  cout << ans << endl;
  return 999;
}
}  // namespace B
}  // namespace round170
int main() {
  ios_base::sync_with_stdio(false);
  int status = 0;
  do {
    status = round170::B::solve(cin);
  } while (0);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
zzxpfk
abcdefghijjlmnopqrst
uvwxz
nlkfdlksajkgrs
vgnsdfdgfh


(G.2) Fast Input

5
tpls
ohqykk
zxqp
jnokbur
mfmp


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
namespace round170 { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
namespace B { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
inline string next(string a) { /* line 5 slow_hit_count: 24, fast_hit_count: 0 */
  for (int i = (int)a.size() - 1; i >= 0; --i) { /* line 6 slow_hit_count: 24, fast_hit_count: 0 */
    if (a[i] == 'z') { /* line 7 slow_hit_count: 24, fast_hit_count: 0 */
      a[i] = 'a'; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
      if (i == 0) a = "a" + a; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
      ++a[i]; /* line 11 slow_hit_count: 24, fast_hit_count: 0 */
      return a; /* line 12 slow_hit_count: 24, fast_hit_count: 0 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  return a; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
inline bool cmp(const string& a, const string& b) { /* line 17 slow_hit_count: 3954, fast_hit_count: 532 */
  if (a.size() == b.size()) return a < b; /* line 18 slow_hit_count: 3954, fast_hit_count: 532 */
  return a.size() < b.size(); /* line 19 slow_hit_count: 1864, fast_hit_count: 182 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int solve(istream& in) { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  in >> n; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  set<string> q; /* line 24 slow_hit_count: 2, fast_hit_count: 2 */
  string s; /* line 25 slow_hit_count: 2, fast_hit_count: 2 */
  string ans; /* line 26 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; ++i) { /* line 27 slow_hit_count: 6, fast_hit_count: 6 */
    in >> s; /* line 28 slow_hit_count: 5, fast_hit_count: 5 */
    for (int j = 0; j < (int)s.size(); ++j) /* line 29 slow_hit_count: 60, fast_hit_count: 30 */
      for (int k = j + 1; k <= (int)s.size(); ++k) { /* line 30 slow_hit_count: 461, fast_hit_count: 104 */
        string t; /* line 31 slow_hit_count: 812, fast_hit_count: 158 */
        for (int z = j; z < k; ++z) t += s[z]; /* line 32 slow_hit_count: 2817, fast_hit_count: 279 */
        q.insert(t); /* line 33 slow_hit_count: 406, fast_hit_count: 79 */
      } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  vector<string> v(q.begin(), q.end()); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  sort(v.begin(), v.end(), cmp); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  int i = 0; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  s = v[i]; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  if (s != "a") /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
    ans = "a"; /* line 41 slow_hit_count: 0, fast_hit_count: 1 */
  else { /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    for (++i; i < (int)v.size(); ++i) { /* line 43 slow_hit_count: 24, fast_hit_count: 0 */
      s = next(s); /* line 44 slow_hit_count: 24, fast_hit_count: 0 */
      if (v[i] != s) { /* line 45 slow_hit_count: 24, fast_hit_count: 0 */
        ans = s; /* line 46 slow_hit_count: 1, fast_hit_count: 0 */
        break; /* line 47 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    if (ans.empty()) { /* line 50 slow_hit_count: 1, fast_hit_count: 0 */
      ans = next(v.back()); /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  return 999; /* line 55 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
}  // namespace B /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
}  // namespace round170 /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  int status = 0; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  do { /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    status = round170::B::solve(cin); /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  } while (0); /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 66 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the line-level hit counts and comparing the slow and fast runs, the following observations can be made:

1. **Function `next` (lines 5-12):** 
   - The `next` function is called with a high frequency (24 times) during the slow input and not at all in the fast input. 
   - This indicates that the generation of lexicographically next strings is a hotspot for the slow input.

2. **Function `cmp` (lines 17-19):**
   - This function is called a significantly higher number of times for the slow input (5818 times) compared to the fast input (714 times).
   - Indicates frequent comparisons, likely due to sorting or repeated set operations.

3. **Nested Loops (lines 29-33):**
   - The loops are running more iterations in the slow case. The hit counts for line 32 (constructing substrings) are much higher in the slow input (2817) compared to the fast input (279).
   - The `set<string> q` is populated with many more substrings for the slow input, leading to increased complexity in subsequent operations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis of the code and execution patterns, the following performance-characterizing invariants are derived:

1. **Invariant 1: Lexicographical Progression in `next` Function**
   - **Natural Language Description:** 
     - "When the set of substrings (`q`) generated is large and requires frequent updates, the function `next` is called repeatedly to generate the next possible string, significantly slowing down the execution."
   - **Characterization:** 
     - This situation is likely to occur when input titles have many substrings that are close in lexicographical order, causing `next` to be used frequently to find the next original title.

2. **Invariant 2: High Rate of Substring Generation and Comparison**
   - **Natural Language Description:** 
     - "If the input strings are lengthy or diverse in character composition, the generation and comparison of substrings become computationally expensive, as indicated by increased hits on substring operations and the `cmp` function."
   - **Characterization:** 
     - This is particularly impactful when the input strings have a broad range of characters resulting in many distinct substrings.

3. **Invariant 3: Large Substring Set Resulting in Intensive Sort**
   - **Natural Language Description:** 
     - "When the set `q` contains numerous substrings, the sorting operation required to find the lexicographically smallest original title becomes a performance bottleneck."
   - **Characterization:** 
     - This can be triggered when the titles have a high number of potential substrings, leading to extensive sorting and comparison.

In summary, the slow execution path is primarily triggered by the extensive generation and manipulation of substrings, which leads to frequent calls to the `next` function and heavy use of sorting and comparisons. Given the constraints (n ≤ 30, title length ≤ 20), these invariants are broadly applicable within the problem's scope.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Coming up with a new problem isn't as easy as many people think. Sometimes it is hard enough to name it. We'll consider a title original if it doesn't occur as a substring in any titles of recent Codeforces problems. 

You've got the titles of n last problems — the strings, consisting of lowercase English letters. Your task is to find the shortest original title for the new problem. If there are multiple such titles, choose the lexicographically minimum one. Note, that title of the problem can't be an empty string.

A substring s[l... r] (1 ≤ l ≤ r ≤ |s|) of string s = s1s2... s|s| (where |s| is the length of string s) is string slsl + 1... sr.

String x = x1x2... xp is lexicographically smaller than string y = y1y2... yq, if either p < q and x1 = y1, x2 = y2, ... , xp = yp, or there exists such number r (r < p, r < q), that x1 = y1, x2 = y2, ... , xr = yr and xr + 1 < yr + 1. The string characters are compared by their ASCII codes.

Input

The first line contains integer n (1 ≤ n ≤ 30) — the number of titles you've got to consider. Then follow n problem titles, one per line. Each title only consists of lowercase English letters (specifically, it doesn't contain any spaces) and has the length from 1 to 20, inclusive.

Output

Print a string, consisting of lowercase English letters — the lexicographically minimum shortest original title.

Examples

Input

5
threehorses
goodsubstrings
secret
primematrix
beautifulyear


Output

j


Input

4
aa
bdefghijklmn
opqrstuvwxyz
c


Output

ab

Note

In the first sample the first 9 letters of the English alphabet (a, b, c, d, e, f, g, h, i) occur in the problem titles, so the answer is letter j.

In the second sample the titles contain 26 English letters, so the shortest original title cannot have length 1. Title aa occurs as a substring in the first title.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checkers for Performance-Characterizing Invariants

Here are the C++ checker implementations based on the natural language invariants derived previously:

```cpp
void check_next_function_usage(int usageCount) {
    // This check detects excessive usage of the `next` function, indicating
    // potential performance slowdown due to repeated generation of substrings.
    if (usageCount > /* arbitrary threshold based on n and title length */ 100) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive calls to `next` function!" << endl;
        abort();
    }
}

void check_substring_set_size(int setSize) {
    // This check monitors the size of the substring set `q`, which can grow large
    // and cause sorting/comparison overhead.
    if (setSize > /* arbitrary threshold proportional to n * average title length */ 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - substring set too large!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate and Propagate Checkers into the Original Program

The following is the instrumented code with the checkers integrated appropriately:

```cpp
#include <bits/stdc++.h>
using namespace std;

namespace round170 {
namespace B {

inline string next(string a) {
    for (int i = (int)a.size() - 1; i >= 0; --i) {
        if (a[i] == 'z') {
            a[i] = 'a';
            if (i == 0) a = "a" + a;
        } else {
            ++a[i];
            return a;
        }
    }
    return a;
}

inline bool cmp(const string& a, const string& b) {
    if (a.size() == b.size()) return a < b;
    return a.size() < b.size();
}

void check_next_function_usage(int usageCount) {
    // This check detects excessive usage of the `next` function, indicating
    // potential performance slowdown due to repeated generation of substrings.
    if (usageCount > 100) {  // Arbitrary threshold, considering constraints
        cerr << "Warning: Performance bottleneck condition triggered - excessive calls to `next` function!" << endl;
        abort();
    }
}

void check_substring_set_size(int setSize) {
    // This check monitors the size of the substring set `q`, which can grow large
    // and cause sorting/comparison overhead.
    if (setSize > 1000) {  // Arbitrary threshold, considering constraints
        cerr << "Warning: Performance bottleneck condition triggered - substring set too large!" << endl;
        abort();
    }
}

int solve(istream& in) {
    int n;
    in >> n;
    set<string> q;
    string s;
    string ans;

    // Track usage count for the `next` function
    int nextFunctionUsageCount = 0;

    for (int i = 0; i < n; ++i) {
        in >> s;
        for (int j = 0; j < (int)s.size(); ++j)
            for (int k = j + 1; k <= (int)s.size(); ++k) {
                string t;
                for (int z = j; z < k; ++z) t += s[z];
                q.insert(t);
            }
    }

    // Check the size of the substring set `q`
    check_substring_set_size(q.size());

    vector<string> v(q.begin(), q.end());
    sort(v.begin(), v.end(), cmp);
    int i = 0;
    s = v[i];
    if (s != "a")
        ans = "a";
    else {
        for (++i; i < (int)v.size(); ++i) {
            s = next(s);
            nextFunctionUsageCount++;  // Increment usage count for `next` function
            if (v[i] != s) {
                ans = s;
                break;
            }
        }
        if (ans.empty()) {
            ans = next(v.back());
            nextFunctionUsageCount++;  // Increment usage count for `next` function
        }
    }

    // Check the `next` function usage
    check_next_function_usage(nextFunctionUsageCount);

    cout << ans << endl;
    return 999;
}

}  // namespace B
}  // namespace round170

int main() {
    ios_base::sync_with_stdio(false);
    int status = 0;
    do {
        status = round170::B::solve(cin);
    } while (0);
    return 0;
}
```

### Explanation of Checker Integration

1. **`check_next_function_usage`**: 
   - Placed after the loop where `next` is used, it checks if the function is called excessively, indicating that the algorithm is stuck trying to find the next lexicographical string repeatedly.

2. **`check_substring_set_size`**: 
   - Executed after the substring generation, it monitors the size of the `q` set to ensure it doesn't grow too large, which would cause significant performance overhead during sorting and comparison.

These checks are placed at points in the code where they can effectively detect potential bottlenecks without introducing significant overhead themselves.

