system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Coming up with a new problem isn't as easy as many people think. Sometimes it is hard enough to name it. We'll consider a title original if it doesn't occur as a substring in any titles of recent Codeforces problems. 

You've got the titles of n last problems — the strings, consisting of lowercase English letters. Your task is to find the shortest original title for the new problem. If there are multiple such titles, choose the lexicographically minimum one. Note, that title of the problem can't be an empty string.

A substring s[l... r] (1 ≤ l ≤ r ≤ |s|) of string s = s1s2... s|s| (where |s| is the length of string s) is string slsl + 1... sr.

String x = x1x2... xp is lexicographically smaller than string y = y1y2... yq, if either p < q and x1 = y1, x2 = y2, ... , xp = yp, or there exists such number r (r < p, r < q), that x1 = y1, x2 = y2, ... , xr = yr and xr + 1 < yr + 1. The string characters are compared by their ASCII codes.

Input

The first line contains integer n (1 ≤ n ≤ 30) — the number of titles you've got to consider. Then follow n problem titles, one per line. Each title only consists of lowercase English letters (specifically, it doesn't contain any spaces) and has the length from 1 to 20, inclusive.

Output

Print a string, consisting of lowercase English letters — the lexicographically minimum shortest original title.

Examples

Input

5
threehorses
goodsubstrings
secret
primematrix
beautifulyear


Output

j


Input

4
aa
bdefghijklmn
opqrstuvwxyz
c


Output

ab

Note

In the first sample the first 9 letters of the English alphabet (a, b, c, d, e, f, g, h, i) occur in the problem titles, so the answer is letter j.

In the second sample the titles contain 26 English letters, so the shortest original title cannot have length 1. Title aa occurs as a substring in the first title.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, cnt = 0;
string arr[6336], base = "abcdefghijklmnopqrstuvwxyz", a, now = "a";
bool q(string x, string y) {
  if (x.length() != y.length()) return x.length() < y.length();
  return x < y;
}
string nextperm(string x) {
  int l = x.length();
  if (x[l - 1] != 'z') {
    int tmp = (int)x[l - 1];
    tmp++;
    x[l - 1] = (char)tmp;
  } else {
    x[l - 1] = 'a';
    if (l == 1) {
      x = 'a' + x;
      l++;
    } else {
      char buff[22];
      size_t length = x.copy(buff, l - 1, 0);
      buff[length] = '\0';
      string y = buff;
      y = nextperm(y);
      x.replace(0, l - 1, y);
    }
  }
  return x;
}
int main() {
  scanf("%d\n", &n);
  for (int i = 0; i < n; i++) {
    getline(cin, a);
    for (int j = 0; j < a.length(); j++) {
      for (int k = 1; k <= a.length() - j; k++) {
        char b[22];
        size_t length = a.copy(b, k, j);
        b[length] = '\0';
        arr[cnt++] = b;
      }
    }
  }
  sort(arr, arr + cnt, q);
  for (int i = 0; i < cnt; i++) {
    if (now == arr[i]) {
      now = nextperm(now);
    }
  }
  printf("%s\n", now.c_str());
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
zzxpfk
abcdefghijjlmnopqrst
uvwxz
nlkfdlksajkgrs
vfnsdfdgfh


(G.2) Fast Input

5
splt
ohqykk
zpqx
knojbur
mfmp


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, cnt = 0; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
string arr[6336], base = "abcdefghijklmnopqrstuvwxyz", a, now = "a"; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
bool q(string x, string y) { /* line 5 slow_hit_count: 4328, fast_hit_count: 570 */
  if (x.length() != y.length()) return x.length() < y.length(); /* line 6 slow_hit_count: 4328, fast_hit_count: 570 */
  return x < y; /* line 7 slow_hit_count: 2285, fast_hit_count: 336 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
string nextperm(string x) { /* line 9 slow_hit_count: 24, fast_hit_count: 0 */
  int l = x.length(); /* line 10 slow_hit_count: 24, fast_hit_count: 0 */
  if (x[l - 1] != 'z') { /* line 11 slow_hit_count: 24, fast_hit_count: 0 */
    int tmp = (int)x[l - 1]; /* line 12 slow_hit_count: 24, fast_hit_count: 0 */
    tmp++; /* line 13 slow_hit_count: 24, fast_hit_count: 0 */
    x[l - 1] = (char)tmp; /* line 14 slow_hit_count: 24, fast_hit_count: 0 */
  } else { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    x[l - 1] = 'a'; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    if (l == 1) { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
      x = 'a' + x; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      l++; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
      char buff[22]; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      size_t length = x.copy(buff, l - 1, 0); /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      buff[length] = '\0'; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      string y = buff; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      y = nextperm(y); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      x.replace(0, l - 1, y); /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  return x; /* line 29 slow_hit_count: 24, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d\n", &n); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 33 slow_hit_count: 6, fast_hit_count: 6 */
    getline(cin, a); /* line 34 slow_hit_count: 5, fast_hit_count: 5 */
    for (int j = 0; j < a.length(); j++) { /* line 35 slow_hit_count: 60, fast_hit_count: 30 */
      for (int k = 1; k <= a.length() - j; k++) { /* line 36 slow_hit_count: 461, fast_hit_count: 104 */
        char b[22]; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
        size_t length = a.copy(b, k, j); /* line 38 slow_hit_count: 406, fast_hit_count: 79 */
        b[length] = '\0'; /* line 39 slow_hit_count: 406, fast_hit_count: 79 */
        arr[cnt++] = b; /* line 40 slow_hit_count: 406, fast_hit_count: 79 */
      } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  sort(arr, arr + cnt, q); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < cnt; i++) { /* line 45 slow_hit_count: 407, fast_hit_count: 80 */
    if (now == arr[i]) { /* line 46 slow_hit_count: 406, fast_hit_count: 79 */
      now = nextperm(now); /* line 47 slow_hit_count: 24, fast_hit_count: 0 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%s\n", now.c_str()); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 52 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Counts Analysis**: Comparing the hit counts for the fast and slow inputs, the following lines have significantly more hits for the slow input:
   - **Lines 5-7 (Function `q`)**: The comparison function `q` for sorting is hit much more often for the slow input (4328 vs. 570 total hits).
   - **Lines 35-40 (Nested Loops for Substring Extraction)**: These lines, which generate all substrings of the input titles, have more executions for the slow input. For instance, line 36 (the inner loop) is hit 461 times in the slow input compared to 104 times in the fast input.
   - **Lines 45-47 (Loop to Find Original Title)**: The loop to determine the original title also sees more iterations for the slow input (407 vs. 80 total hits).

2. **Potential Bottlenecks**:
   - The sorting function (`sort`) and the comparison function (`q`) might become heavy due to the increased number of substrings generated. This results in more frequent and costly comparisons.
   - The nested loops (lines 35-40) generate a large number of substrings, which increases linearly with the length of the input strings but quadratically with the number of titles.

## Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant: High Number of Substrings**:
   - **Natural Language Description**: "If the combined length of all problem titles leads to more than several thousand substrings, the sorting and comparison operations will become computationally expensive."
   - **Explanation**: Given that each substring of every title is generated, when titles are long and numerous, the number of substrings grows significantly, causing the sorting of these substrings to become costly. 

2. **Invariant: Costly Substring Comparisons**:
   - **Natural Language Description**: "If many different substrings of similar lengths exist, the sorting process will require numerous character comparisons, which can lead to a slowdown."
   - **Explanation**: The `q` function, used for sorting, is frequently triggered by the need to compare strings. With a high number of similar-length substrings, the function's overhead grows.

3. **Invariant: High Frequency of Permutation Generation**:
   - **Natural Language Description**: "If the original title candidates need to be frequently incremented to find a non-matching substring, the process will slow down as each candidate is generated and checked."
   - **Explanation**: When the `nextperm` function is called multiple times (indicating a lot of candidates being checked), it can slow down the program as each new candidate is incrementally generated and matched against the list of substrings.

These invariants capture the key performance issues observed when the input size or the complexity of the input leads to increased number of operations, particularly focusing on string generation and sorting operations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Coming up with a new problem isn't as easy as many people think. Sometimes it is hard enough to name it. We'll consider a title original if it doesn't occur as a substring in any titles of recent Codeforces problems. 

You've got the titles of n last problems — the strings, consisting of lowercase English letters. Your task is to find the shortest original title for the new problem. If there are multiple such titles, choose the lexicographically minimum one. Note, that title of the problem can't be an empty string.

A substring s[l... r] (1 ≤ l ≤ r ≤ |s|) of string s = s1s2... s|s| (where |s| is the length of string s) is string slsl + 1... sr.

String x = x1x2... xp is lexicographically smaller than string y = y1y2... yq, if either p < q and x1 = y1, x2 = y2, ... , xp = yp, or there exists such number r (r < p, r < q), that x1 = y1, x2 = y2, ... , xr = yr and xr + 1 < yr + 1. The string characters are compared by their ASCII codes.

Input

The first line contains integer n (1 ≤ n ≤ 30) — the number of titles you've got to consider. Then follow n problem titles, one per line. Each title only consists of lowercase English letters (specifically, it doesn't contain any spaces) and has the length from 1 to 20, inclusive.

Output

Print a string, consisting of lowercase English letters — the lexicographically minimum shortest original title.

Examples

Input

5
threehorses
goodsubstrings
secret
primematrix
beautifulyear


Output

j


Input

4
aa
bdefghijklmn
opqrstuvwxyz
c


Output

ab

Note

In the first sample the first 9 letters of the English alphabet (a, b, c, d, e, f, g, h, i) occur in the problem titles, so the answer is letter j.

In the second sample the titles contain 26 English letters, so the shortest original title cannot have length 1. Title aa occurs as a substring in the first title.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing the Performance Characterizing Invariants in C++

Below, I provide C++ code snippets that implement the performance-characterizing invariants derived earlier:

### Invariant 1: High Number of Substrings

```cpp
void check_substring_count_invariant(int substringCount) {
    if (substringCount > 5000) {  // Example threshold based on problem constraints (many titles and substrings)
        cerr << "Warning: Performance bottleneck condition triggered - too many substrings generated!" << endl;
        abort();
    }
}
```

### Invariant 2: Costly Substring Comparisons

```cpp
void check_comparison_invariant(int comparisonCount) {
    if (comparisonCount > 4000) {  // Example threshold; triggered if sorting requires many comparisons
        cerr << "Warning: Performance bottleneck condition triggered - excessive substring comparisons!" << endl;
        abort();
    }
}
```

### Invariant 3: High Frequency of Permutation Generation

```cpp
void check_permutation_invariant(int permutationCount) {
    if (permutationCount > 100) {  // Example threshold to catch frequent permutation generations
        cerr << "Warning: Performance bottleneck condition triggered - frequent permutation generation!" << endl;
        abort();
    }
}
```

## Phase 4: Integrating the Checkers into the Original C++ Program

Here is the instrumented version of the original C++ program with integrated performance bottleneck checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, cnt = 0;
string arr[6336], base = "abcdefghijklmnopqrstuvwxyz", a, now = "a";

// Checker function for too many substrings
void check_substring_count_invariant(int substringCount) {
    if (substringCount > 5000) {  // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - too many substrings generated!" << endl;
        abort();
    }
}

// Checker function for excessive comparisons
void check_comparison_invariant(int comparisonCount) {
    if (comparisonCount > 4000) {  // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - excessive substring comparisons!" << endl;
        abort();
    }
}

// Checker function for frequent permutation generation
void check_permutation_invariant(int permutationCount) {
    if (permutationCount > 100) {  // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered - frequent permutation generation!" << endl;
        abort();
    }
}

// Comparator function with invariant check
bool q(string x, string y) {
    static int comparisonCount = 0;
    comparisonCount++;
    check_comparison_invariant(comparisonCount);
    
    if (x.length() != y.length()) return x.length() < y.length();
    return x < y;
}

// Function to generate next permutation
string nextperm(string x) {
    static int permutationCount = 0;
    permutationCount++;
    check_permutation_invariant(permutationCount);

    int l = x.length();
    if (x[l - 1] != 'z') {
        int tmp = (int)x[l - 1];
        tmp++;
        x[l - 1] = (char)tmp;
    } else {
        x[l - 1] = 'a';
        if (l == 1) {
            x = 'a' + x;
            l++;
        } else {
            char buff[22];
            size_t length = x.copy(buff, l - 1, 0);
            buff[length] = '\0';
            string y = buff;
            y = nextperm(y);
            x.replace(0, l - 1, y);
        }
    }
    return x;
}

int main() {
    scanf("%d\n", &n);
    for (int i = 0; i < n; i++) {
        getline(cin, a);
        for (int j = 0; j < a.length(); j++) {
            for (int k = 1; k <= a.length() - j; k++) {
                char b[22];
                size_t length = a.copy(b, k, j);
                b[length] = '\0';
                arr[cnt++] = b;
            }
        }
    }
    
    // Check substring count invariant after all substrings are generated
    check_substring_count_invariant(cnt);

    sort(arr, arr + cnt, q);
    for (int i = 0; i < cnt; i++) {
        if (now == arr[i]) {
            now = nextperm(now);
        }
    }
    printf("%s\n", now.c_str());
    return 0;
}
```

### Explanation

- **Checker Functions**: Implemented as separate functions to check each invariant condition.
- **Integration Points**: 
  - The substring count invariant is checked after generating all substrings.
  - The comparison invariant is checked within the custom comparator function `q`.
  - The permutation invariant is checked within the `nextperm` function.

These checks are designed to catch and warn about potential performance bottlenecks as they occur in the program's execution.

