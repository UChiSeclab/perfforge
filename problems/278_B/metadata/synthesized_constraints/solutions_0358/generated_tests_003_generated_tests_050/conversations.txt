system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Coming up with a new problem isn't as easy as many people think. Sometimes it is hard enough to name it. We'll consider a title original if it doesn't occur as a substring in any titles of recent Codeforces problems. 

You've got the titles of n last problems — the strings, consisting of lowercase English letters. Your task is to find the shortest original title for the new problem. If there are multiple such titles, choose the lexicographically minimum one. Note, that title of the problem can't be an empty string.

A substring s[l... r] (1 ≤ l ≤ r ≤ |s|) of string s = s1s2... s|s| (where |s| is the length of string s) is string slsl + 1... sr.

String x = x1x2... xp is lexicographically smaller than string y = y1y2... yq, if either p < q and x1 = y1, x2 = y2, ... , xp = yp, or there exists such number r (r < p, r < q), that x1 = y1, x2 = y2, ... , xr = yr and xr + 1 < yr + 1. The string characters are compared by their ASCII codes.

Input

The first line contains integer n (1 ≤ n ≤ 30) — the number of titles you've got to consider. Then follow n problem titles, one per line. Each title only consists of lowercase English letters (specifically, it doesn't contain any spaces) and has the length from 1 to 20, inclusive.

Output

Print a string, consisting of lowercase English letters — the lexicographically minimum shortest original title.

Examples

Input

5
threehorses
goodsubstrings
secret
primematrix
beautifulyear


Output

j


Input

4
aa
bdefghijklmn
opqrstuvwxyz
c


Output

ab

Note

In the first sample the first 9 letters of the English alphabet (a, b, c, d, e, f, g, h, i) occur in the problem titles, so the answer is letter j.

In the second sample the titles contain 26 English letters, so the shortest original title cannot have length 1. Title aa occurs as a substring in the first title.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
string pl(string s) {
  int p = (int)s.size() - 1;
  string res;
  while (p >= 0 and s[p] == 'z') p--;
  if (p == -1) {
    res.push_back('a');
    for (int i = 0; i < s.size(); i++) res.push_back('a');
    return res;
  } else {
    res = s;
    res[p]++;
    return res;
  }
}
string min_str(string a, string b) {
  if (a.size() != b.size()) return (a.size() < b.size()) ? a : b;
  return min(a, b);
}
int main() {
  int n;
  cin >> n;
  set<string> q;
  q.insert("");
  for (int i = 0; i < n; i++) {
    string s;
    cin >> s;
    for (int j = 0; j < s.size(); j++)
      for (int k = 1; j + k <= s.size(); k++) q.insert(s.substr(j, k));
  }
  string ans = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz";
  for (set<string>::iterator it = q.begin(); it != q.end(); ++it) {
    string s = pl(*it);
    if (q.find(s) == q.end()) {
      ans = min_str(ans, s);
    }
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
zzxpfk
abcdefghijjlmnopqrst
uvwxz
srgkjaskldfkln
vgnsdfdgfh


(G.2) Fast Input

5
splt
ohqykk
zxqp
jnokbur
mfmp


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
string pl(string s) { /* line 3 slow_hit_count: 374, fast_hit_count: 73 */
  int p = (int)s.size() - 1; /* line 4 slow_hit_count: 374, fast_hit_count: 73 */
  string res; /* line 5 slow_hit_count: 374, fast_hit_count: 73 */
  while (p >= 0 and s[p] == 'z') p--; /* line 6 slow_hit_count: 381, fast_hit_count: 74 */
  if (p == -1) { /* line 7 slow_hit_count: 374, fast_hit_count: 73 */
    res.push_back('a'); /* line 8 slow_hit_count: 3, fast_hit_count: 2 */
    for (int i = 0; i < s.size(); i++) res.push_back('a'); /* line 9 slow_hit_count: 6, fast_hit_count: 3 */
    return res; /* line 10 slow_hit_count: 3, fast_hit_count: 2 */
  } else { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    res = s; /* line 12 slow_hit_count: 371, fast_hit_count: 71 */
    res[p]++; /* line 13 slow_hit_count: 371, fast_hit_count: 71 */
    return res; /* line 14 slow_hit_count: 371, fast_hit_count: 71 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
string min_str(string a, string b) { /* line 17 slow_hit_count: 346, fast_hit_count: 60 */
  if (a.size() != b.size()) return (a.size() < b.size()) ? a : b; /* line 18 slow_hit_count: 346, fast_hit_count: 60 */
  return min(a, b); /* line 19 slow_hit_count: 38, fast_hit_count: 4 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  set<string> q; /* line 24 slow_hit_count: 2, fast_hit_count: 2 */
  q.insert(""); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 26 slow_hit_count: 6, fast_hit_count: 6 */
    string s; /* line 27 slow_hit_count: 10, fast_hit_count: 10 */
    cin >> s; /* line 28 slow_hit_count: 5, fast_hit_count: 5 */
    for (int j = 0; j < s.size(); j++) /* line 29 slow_hit_count: 60, fast_hit_count: 30 */
      for (int k = 1; j + k <= s.size(); k++) q.insert(s.substr(j, k)); /* line 30 slow_hit_count: 461, fast_hit_count: 104 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  string ans = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  for (set<string>::iterator it = q.begin(); it != q.end(); ++it) { /* line 33 slow_hit_count: 375, fast_hit_count: 74 */
    string s = pl(*it); /* line 34 slow_hit_count: 748, fast_hit_count: 146 */
    if (q.find(s) == q.end()) { /* line 35 slow_hit_count: 374, fast_hit_count: 73 */
      ans = min_str(ans, s); /* line 36 slow_hit_count: 346, fast_hit_count: 60 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the given C program, let's break down the analysis into two phases as described: 

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**:
   - The line `for (int k = 1; j + k <= s.size(); k++) q.insert(s.substr(j, k));` (line 30) has a significantly higher hit count for the slow input (461 hits) compared to the fast input (104 hits). This indicates that the substring extraction and insertion into the set `q` are happening much more frequently for the slow input.
   - The function `pl(string s)` is also called significantly more often with the slow input (748 calls) compared to the fast input (146 calls), as seen from the hit count of line 34. The while loop within `pl` (line 6) also shows more iterations for the slow input, suggesting a slow path in its logic.
   - The `min_str` function is called 346 times with the slow input and only 60 times with the fast input, indicating repetitive comparisons to find the lexicographically smallest string.

2. **Infer Interactions with Data Structures**:
   - The `set q` grows large under the slow input, evidenced by the higher hit counts in the loop iterating over it (lines 33-38). The high frequency of substring insertions (line 30) suggests `q` gets populated with many substrings, making subsequent operations like searching and comparing (lines 34-36) more expensive.
   - The line `while (p >= 0 and s[p] == 'z') p--;` inside `pl` indicates a performance issue when there are trailing 'z' characters in the substrings.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified bottlenecks, we can derive the following invariants in natural language that characterize the conditions under which the program slows down:

1. **High Frequency of Substring Generation**:
   - **Invariant**: "When a title contains a high number of repeated or overlapping substrings, the program may slow down due to excessive substring extraction and set insertions."
   - This slow path is triggered if the input strings contain long sequences of similar or repeated characters.

2. **Handling of Trailing 'z' Characters**:
   - **Invariant**: "If many titles or substrings end with the character 'z', the `pl` function can become expensive due to repeated decrement operations searching for a non-'z' character."
   - This condition is particularly evident if there are many strings with trailing 'z's, causing the `while` loop in `pl` to iterate frequently.

3. **Population of the Set `q`**:
   - **Invariant**: "The program may become slow if there is a large number of unique substrings being inserted into the set `q`, leading to increased time complexity for subsequent insertions and lookups."
   - This is particularly true when input titles have diverse and numerous substrings.

4. **Repeated Comparisons for Lexicographical Order**:
   - **Invariant**: "If the set of candidate strings for the new title grows large, leading to numerous invocations of `min_str`, the program may slow down due to repeated lexicographical comparisons."
   - This occurs when there is a high diversity of substrings requiring frequent minimum calculations.

These invariants highlight the impact of input characteristics such as substring length, character repetition, and trailing characters on the program's performance, indicating potential areas for optimization.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Coming up with a new problem isn't as easy as many people think. Sometimes it is hard enough to name it. We'll consider a title original if it doesn't occur as a substring in any titles of recent Codeforces problems. 

You've got the titles of n last problems — the strings, consisting of lowercase English letters. Your task is to find the shortest original title for the new problem. If there are multiple such titles, choose the lexicographically minimum one. Note, that title of the problem can't be an empty string.

A substring s[l... r] (1 ≤ l ≤ r ≤ |s|) of string s = s1s2... s|s| (where |s| is the length of string s) is string slsl + 1... sr.

String x = x1x2... xp is lexicographically smaller than string y = y1y2... yq, if either p < q and x1 = y1, x2 = y2, ... , xp = yp, or there exists such number r (r < p, r < q), that x1 = y1, x2 = y2, ... , xr = yr and xr + 1 < yr + 1. The string characters are compared by their ASCII codes.

Input

The first line contains integer n (1 ≤ n ≤ 30) — the number of titles you've got to consider. Then follow n problem titles, one per line. Each title only consists of lowercase English letters (specifically, it doesn't contain any spaces) and has the length from 1 to 20, inclusive.

Output

Print a string, consisting of lowercase English letters — the lexicographically minimum shortest original title.

Examples

Input

5
threehorses
goodsubstrings
secret
primematrix
beautifulyear


Output

j


Input

4
aa
bdefghijklmn
opqrstuvwxyz
c


Output

ab

Note

In the first sample the first 9 letters of the English alphabet (a, b, c, d, e, f, g, h, i) occur in the problem titles, so the answer is letter j.

In the second sample the titles contain 26 English letters, so the shortest original title cannot have length 1. Title aa occurs as a substring in the first title.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Invariant Checks in C++

Based on the performance-characterizing invariants derived earlier, here are the corresponding C++ checks:

```cpp
void check_substring_generation(int substr_count) {
    if (substr_count > 5000) {  // Threshold depends on the maximum meaningful unique substrings
        cerr << "Warning: Performance bottleneck triggered - excessive substring generation!" << endl;
        abort();
    }
}

void check_trailing_z(const string& str) {
    int z_count = 0;
    for (int i = str.size() - 1; i >= 0 && str[i] == 'z'; --i) {
        ++z_count;
    }
    if (z_count > 10) {  // Arbitrary threshold based on observed bottleneck conditions
        cerr << "Warning: Performance bottleneck triggered - excessive trailing 'z' characters!" << endl;
        abort();
    }
}

void check_set_size(const set<string>& q) {
    if (q.size() > 10000) {  // Threshold for excessive set size impacting performance
        cerr << "Warning: Performance bottleneck triggered - large set size!" << endl;
        abort();
    }
}

void check_min_comparisons(int min_calls) {
    if (min_calls > 1000) {  // Threshold for excessive min comparisons
        cerr << "Warning: Performance bottleneck triggered - excessive min comparisons!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Invariant Checks into the Original Program

The following code integrates the invariant checks with the program, ensuring they are placed effectively to monitor potential performance bottlenecks without excessive overhead. Comments are added to explain each inserted check.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Include performance checks definitions here
// ...

string pl(string s) {
    int p = (int)s.size() - 1;
    string res;
    while (p >= 0 and s[p] == 'z') p--;
    check_trailing_z(s);  // Check for trailing 'z' characters
    if (p == -1) {
        res.push_back('a');
        for (int i = 0; i < s.size(); i++) res.push_back('a');
        return res;
    } else {
        res = s;
        res[p]++;
        return res;
    }
}

string min_str(string a, string b) {
    if (a.size() != b.size()) return (a.size() < b.size()) ? a : b;
    return min(a, b);
}

int main() {
    int n;
    cin >> n;
    set<string> q;
    q.insert("");
    for (int i = 0; i < n; i++) {
        string s;
        cin >> s;
        int substr_count = 0;
        for (int j = 0; j < s.size(); j++) {
            for (int k = 1; j + k <= s.size(); k++) {
                q.insert(s.substr(j, k));
                substr_count++;
            }
        }
        check_substring_generation(substr_count);  // Check excessive substring generation
    }
    
    check_set_size(q);  // Check if the set grows too large

    string ans = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz";
    int min_calls = 0;
    for (set<string>::iterator it = q.begin(); it != q.end(); ++it) {
        string s = pl(*it);
        if (q.find(s) == q.end()) {
            ans = min_str(ans, s);
            min_calls++;
        }
    }
    
    check_min_comparisons(min_calls);  // Check for excessive min comparisons

    cout << ans << endl;
    return 0;
}
```

This instrumented version now includes runtime checks that will trigger warnings and abort execution if the program enters any of the identified slow paths, helping to diagnose and address performance bottlenecks effectively.

