system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Coming up with a new problem isn't as easy as many people think. Sometimes it is hard enough to name it. We'll consider a title original if it doesn't occur as a substring in any titles of recent Codeforces problems. 

You've got the titles of n last problems — the strings, consisting of lowercase English letters. Your task is to find the shortest original title for the new problem. If there are multiple such titles, choose the lexicographically minimum one. Note, that title of the problem can't be an empty string.

A substring s[l... r] (1 ≤ l ≤ r ≤ |s|) of string s = s1s2... s|s| (where |s| is the length of string s) is string slsl + 1... sr.

String x = x1x2... xp is lexicographically smaller than string y = y1y2... yq, if either p < q and x1 = y1, x2 = y2, ... , xp = yp, or there exists such number r (r < p, r < q), that x1 = y1, x2 = y2, ... , xr = yr and xr + 1 < yr + 1. The string characters are compared by their ASCII codes.

Input

The first line contains integer n (1 ≤ n ≤ 30) — the number of titles you've got to consider. Then follow n problem titles, one per line. Each title only consists of lowercase English letters (specifically, it doesn't contain any spaces) and has the length from 1 to 20, inclusive.

Output

Print a string, consisting of lowercase English letters — the lexicographically minimum shortest original title.

Examples

Input

5
threehorses
goodsubstrings
secret
primematrix
beautifulyear


Output

j


Input

4
aa
bdefghijklmn
opqrstuvwxyz
c


Output

ab

Note

In the first sample the first 9 letters of the English alphabet (a, b, c, d, e, f, g, h, i) occur in the problem titles, so the answer is letter j.

In the second sample the titles contain 26 English letters, so the shortest original title cannot have length 1. Title aa occurs as a substring in the first title.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int i, j, n, t;
  map<string, int> m;
  scanf("%d", &n);
  string s, l;
  for (int i = (int)0; i < (int)n; ++i) {
    cin >> s;
    for (int j = (int)0; j < (int)int(s.size()); ++j) {
      for (int k = (int)j; k < (int)int(s.size()); ++k) {
        l = s.substr(j, k - j + 1);
        m[l]++;
      }
    }
  }
  char ch, c;
  for (i = 1; i <= 2; i++) {
    s = "";
    for (int j = (int)0; j < (int)i; ++j) s += 'a';
    for (c = 'a'; c <= 'z'; c++) {
      for (ch = 'a'; ch <= 'z'; ch++) {
        s[i - 1] = ch;
        if (i > 1) s[i - 2] = c;
        if (!m[s]) {
          cout << s << endl;
          return 0;
        }
      }
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
ihfdjifd
abcdefghijklmnopqrst
zxwvu
kopsdfgiopjipx
ytj


(G.2) Fast Input

5
tpls
ohqykk
zxqp
jnokbur
mfmp


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int i, j, n, t; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  map<string, int> m; /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
  scanf("%d", &n); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  string s, l; /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = (int)0; i < (int)n; ++i) { /* line 8 slow_hit_count: 6, fast_hit_count: 6 */
    cin >> s; /* line 9 slow_hit_count: 5, fast_hit_count: 5 */
    for (int j = (int)0; j < (int)int(s.size()); ++j) { /* line 10 slow_hit_count: 55, fast_hit_count: 30 */
      for (int k = (int)j; k < (int)int(s.size()); ++k) { /* line 11 slow_hit_count: 422, fast_hit_count: 104 */
        l = s.substr(j, k - j + 1); /* line 12 slow_hit_count: 372, fast_hit_count: 79 */
        m[l]++; /* line 13 slow_hit_count: 372, fast_hit_count: 79 */
      } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  char ch, c; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 1; i <= 2; i++) { /* line 18 slow_hit_count: 2, fast_hit_count: 1 */
    s = ""; /* line 19 slow_hit_count: 2, fast_hit_count: 1 */
    for (int j = (int)0; j < (int)i; ++j) s += 'a'; /* line 20 slow_hit_count: 5, fast_hit_count: 2 */
    for (c = 'a'; c <= 'z'; c++) { /* line 21 slow_hit_count: 28, fast_hit_count: 1 */
      for (ch = 'a'; ch <= 'z'; ch++) { /* line 22 slow_hit_count: 703, fast_hit_count: 1 */
        s[i - 1] = ch; /* line 23 slow_hit_count: 677, fast_hit_count: 1 */
        if (i > 1) s[i - 2] = c; /* line 24 slow_hit_count: 677, fast_hit_count: 1 */
        if (!m[s]) { /* line 25 slow_hit_count: 677, fast_hit_count: 1 */
          cout << s << endl; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
          return 0; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
        } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identifying Expensive or Inefficient Code Segments

**Comparison of Line-Level Hit Counts:**
1. **Lines 10-13**: These lines see a significant increase in hits during the slow input run compared to the fast input. This section of code deals with generating all possible substrings of each title and counting their occurrences using a map.
   - Fast Input: Lines hit 30, 104, 79, and 79 times respectively.
   - Slow Input: Lines hit 55, 422, 372, and 372 times respectively.

2. **Lines 21-25**: The loop for generating possible new titles and checking their presence in the map shows a vast difference in hit counts.
   - Fast Input: Lines hit 1, 1, 1, 1, and 1 time respectively.
   - Slow Input: Lines hit 28, 703, 677, 677, and 677 times respectively.

**Interaction with Data Structures:**
- **Nested Loops**: The nested loops on lines 10 and 11 iterate through the input titles to generate substrings. This results in a combinatorial explosion in the number of substrings when the titles are longer or contain more varied characters.
- **Map Operations**: Each substring is inserted into a map, resulting in increased processing time for larger or more varied titles due to more unique substrings being generated and checked.

## Phase 2: Performance-Characterizing Invariants

1. **Invariant on Substring Generation:**
   - **Natural Language**: "When problem titles are long, or have varied characters, the number of substrings generated increases drastically, leading to a slowdown. This is particularly noticeable when characters in a title are all different, maximizing the substring generation."
   - **Reasoning**: The process of generating substrings is combinatorial, and each substring is stored in a map, which is costly when the variety or length of titles increases.

2. **Invariant on Title Generation:**
   - **Natural Language**: "If the input titles cover a broad range of the alphabet, especially if they are close to covering all letters, then generating new titles will require checking many combinations, which can slow down the process."
   - **Reasoning**: The nested loops exploring possible titles for uniqueness will run longer if the existing titles cover many characters, as more combinations need to be checked against the map for originality.

3. **Invariant on Input Size and Complexity:**
   - **Natural Language**: "When the number and complexity of input titles increase, such as having longer or more diverse titles up to the constraint limit (n = 30, title lengths = 20), the processing time increases significantly due to exponential growth in the number of substrings."
   - **Reasoning**: The constraints allow titles to be relatively long and complex, and an upper-bound scenario with maximum length and character variety would exacerbate the inefficiencies in substring management.

These performance-characterizing invariants help understand conditions under which the code is likely to experience slow execution, guiding optimizations or future testing scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Coming up with a new problem isn't as easy as many people think. Sometimes it is hard enough to name it. We'll consider a title original if it doesn't occur as a substring in any titles of recent Codeforces problems. 

You've got the titles of n last problems — the strings, consisting of lowercase English letters. Your task is to find the shortest original title for the new problem. If there are multiple such titles, choose the lexicographically minimum one. Note, that title of the problem can't be an empty string.

A substring s[l... r] (1 ≤ l ≤ r ≤ |s|) of string s = s1s2... s|s| (where |s| is the length of string s) is string slsl + 1... sr.

String x = x1x2... xp is lexicographically smaller than string y = y1y2... yq, if either p < q and x1 = y1, x2 = y2, ... , xp = yp, or there exists such number r (r < p, r < q), that x1 = y1, x2 = y2, ... , xr = yr and xr + 1 < yr + 1. The string characters are compared by their ASCII codes.

Input

The first line contains integer n (1 ≤ n ≤ 30) — the number of titles you've got to consider. Then follow n problem titles, one per line. Each title only consists of lowercase English letters (specifically, it doesn't contain any spaces) and has the length from 1 to 20, inclusive.

Output

Print a string, consisting of lowercase English letters — the lexicographically minimum shortest original title.

Examples

Input

5
threehorses
goodsubstrings
secret
primematrix
beautifulyear


Output

j


Input

4
aa
bdefghijklmn
opqrstuvwxyz
c


Output

ab

Note

In the first sample the first 9 letters of the English alphabet (a, b, c, d, e, f, g, h, i) occur in the problem titles, so the answer is letter j.

In the second sample the titles contain 26 English letters, so the shortest original title cannot have length 1. Title aa occurs as a substring in the first title.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Natural Language Invariants in C++

Let's transform the performance-characterizing invariants from natural language into C++ runtime checks:

### Invariant 1: Substring Generation

**Natural Language**: When problem titles are long, or have varied characters, the number of substrings generated increases drastically, leading to a slowdown. This is particularly noticeable when characters in a title are all different, maximizing the substring generation.

**C++ Code:**

```cpp
void check_substring_invariant(int titleLength, int uniqueChars) {
    if (titleLength > 15 && uniqueChars > 10) {
        cerr << "Warning: Performance bottleneck - excessive substring generation!" << endl;
        abort();
    }
}
```

### Invariant 2: Title Generation

**Natural Language**: If the input titles cover a broad range of the alphabet, especially if they are close to covering all letters, then generating new titles will require checking many combinations, which can slow down the process.

**C++ Code:**

```cpp
void check_title_generation_invariant(set<char> uniqueChars) {
    if (uniqueChars.size() > 20) {
        cerr << "Warning: Performance bottleneck - wide character coverage in titles!" << endl;
        abort();
    }
}
```

### Invariant 3: Input Size and Complexity

**Natural Language**: When the number and complexity of input titles increase, such as having longer or more diverse titles up to the constraint limit (n = 30, title lengths = 20), the processing time increases significantly due to exponential growth in the number of substrings.

**C++ Code:**

```cpp
void check_input_complexity_invariant(int totalTitles, int maxTitleLength) {
    if (totalTitles > 25 && maxTitleLength > 15) {
        cerr << "Warning: Performance bottleneck - complex input configuration!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checkers into the Program

Below is the updated C++ program with the integrated performance-checking code:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function to monitor excessive substring generation
void check_substring_invariant(int titleLength, int uniqueChars) {
    if (titleLength > 15 && uniqueChars > 10) {
        cerr << "Warning: Performance bottleneck - excessive substring generation!" << endl;
        abort();
    }
}

// Checker function to monitor wide character coverage in titles
void check_title_generation_invariant(set<char> uniqueChars) {
    if (uniqueChars.size() > 20) {
        cerr << "Warning: Performance bottleneck - wide character coverage in titles!" << endl;
        abort();
    }
}

// Checker function to monitor input complexity
void check_input_complexity_invariant(int totalTitles, int maxTitleLength) {
    if (totalTitles > 25 && maxTitleLength > 15) {
        cerr << "Warning: Performance bottleneck - complex input configuration!" << endl;
        abort();
    }
}

int main() {
    int n;
    map<string, int> m;
    scanf("%d", &n);
    string s, l;
    int maxTitleLength = 0;
    set<char> allUniqueChars;

    // Check input complexity invariant
    check_input_complexity_invariant(n, 20);

    for (int i = 0; i < n; ++i) {
        cin >> s;
        maxTitleLength = max(maxTitleLength, (int)s.size());
        set<char> titleUniqueChars(s.begin(), s.end());
        allUniqueChars.insert(s.begin(), s.end());

        // Check substring generation invariant
        check_substring_invariant(s.size(), titleUniqueChars.size());

        for (int j = 0; j < int(s.size()); ++j) {
            for (int k = j; k < int(s.size()); ++k) {
                l = s.substr(j, k - j + 1);
                m[l]++;
            }
        }
    }

    // Check title generation invariant
    check_title_generation_invariant(allUniqueChars);

    char ch, c;
    for (int i = 1; i <= 2; i++) {
        s = "";
        for (int j = 0; j < i; ++j) s += 'a';
        for (c = 'a'; c <= 'z'; c++) {
            for (ch = 'a'; ch <= 'z'; ch++) {
                s[i - 1] = ch;
                if (i > 1) s[i - 2] = c;
                if (!m[s]) {
                    cout << s << endl;
                    return 0;
                }
            }
        }
    }
    return 0;
}
```

### Explanation of Inserted Checks:
- **`check_substring_invariant`**: Placed after reading each title to check against excessive substring creation.
- **`check_title_generation_invariant`**: Placed after processing all titles, assesses the diversity of characters.
- **`check_input_complexity_invariant`**: Placed at the start to verify if input constraints might lead to a complex processing path.

