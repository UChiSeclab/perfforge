system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given n points on a plane. All points are different.

Find the number of different groups of three points (A, B, C) such that point B is the middle of segment AC. 

The groups of three points are considered unordered, that is, if point B is the middle of segment AC, then groups (A, B, C) and (C, B, A) are considered the same.

Input

The first line contains a single integer n (3 ≤ n ≤ 3000) — the number of points. 

Next n lines contain the points. The i-th line contains coordinates of the i-th point: two space-separated integers xi, yi ( - 1000 ≤ xi, yi ≤ 1000).

It is guaranteed that all given points are different.

Output

Print the single number — the answer to the problem. 

Examples

Input

3
1 1
2 2
3 3


Output

1


Input

3
0 0
-1 0
0 1


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  int n, i, j, x, y, cont, x2, y2, x3, y3;
  cin >> n;
  map<int, set<int> > mapa;
  map<int, set<int> >::iterator it, ita;
  set<int>::iterator sit, sita;
  cont = 0;
  for (i = 0; i < n; i++) {
    cin >> x >> y;
    mapa[x].insert(y);
  }
  for (it = mapa.begin(); it != mapa.end(); ++it) {
    for (sit = it->second.begin(); sit != it->second.end(); ++sit) {
      ita = it;
      while (ita != mapa.end()) {
        if (ita == it) {
          sita = sit;
          sita++;
        } else {
          sita = ita->second.begin();
        }
        for (; sita != ita->second.end(); ++sita) {
          x = it->first;
          y = *sit;
          x2 = ita->first;
          y2 = *sita;
          if ((x != x2 || y != y2) && (x + x2) % 2 == 0 && (y + y2) % 2 == 0) {
            x3 = (x + x2) / 2;
            y3 = (y + y2) / 2;
            if (mapa[x3].find(y3) != mapa[x3].end()) {
              cont++;
            }
          }
        }
        ita++;
      }
    }
  }
  cout << cont << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

40
-8 24
2 -1
1 -18
72 -70
5 -4
-308 436
-19 40
36 -35
-178 265
-1 2
-7 30
-1 0
3 -2
200 -285
17 -16
-35 74
0 -4
-86 106
-1 4
-7 6
0 1
-5 4
-2 3
6 -5
-4 5
181 -262
76 -118
0 0
-7 18
-58 104
-5 6
-6 12
-3 4
1 0
11 -10
-86 130
-3 6
153 -14
-183 270
-43 64


(G.2) Fast Input

3
0 0
0 -1
0 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int n, i, j, x, y, cont, x2, y2, x3, y3; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  map<int, set<int> > mapa; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  map<int, set<int> >::iterator it, ita; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  set<int>::iterator sit, sita; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  cont = 0; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) { /* line 13 slow_hit_count: 41, fast_hit_count: 4 */
    cin >> x >> y; /* line 14 slow_hit_count: 40, fast_hit_count: 3 */
    mapa[x].insert(y); /* line 15 slow_hit_count: 40, fast_hit_count: 3 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  for (it = mapa.begin(); it != mapa.end(); ++it) { /* line 17 slow_hit_count: 117, fast_hit_count: 2 */
    for (sit = it->second.begin(); sit != it->second.end(); ++sit) { /* line 18 slow_hit_count: 156, fast_hit_count: 4 */
      ita = it; /* line 19 slow_hit_count: 40, fast_hit_count: 3 */
      while (ita != mapa.end()) { /* line 20 slow_hit_count: 1353, fast_hit_count: 6 */
        if (ita == it) { /* line 21 slow_hit_count: 1313, fast_hit_count: 3 */
          sita = sit; /* line 22 slow_hit_count: 40, fast_hit_count: 3 */
          sita++; /* line 23 slow_hit_count: 40, fast_hit_count: 3 */
        } else { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
          sita = ita->second.begin(); /* line 25 slow_hit_count: 1273, fast_hit_count: 0 */
        } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
        for (; sita != ita->second.end(); ++sita) { /* line 27 slow_hit_count: 2093, fast_hit_count: 6 */
          x = it->first; /* line 28 slow_hit_count: 780, fast_hit_count: 3 */
          y = *sit; /* line 29 slow_hit_count: 780, fast_hit_count: 3 */
          x2 = ita->first; /* line 30 slow_hit_count: 780, fast_hit_count: 3 */
          y2 = *sita; /* line 31 slow_hit_count: 780, fast_hit_count: 3 */
          if ((x != x2 || y != y2) && (x + x2) % 2 == 0 && (y + y2) % 2 == 0) { /* line 32 slow_hit_count: 780, fast_hit_count: 3 */
            x3 = (x + x2) / 2; /* line 33 slow_hit_count: 304, fast_hit_count: 1 */
            y3 = (y + y2) / 2; /* line 34 slow_hit_count: 304, fast_hit_count: 1 */
            if (mapa[x3].find(y3) != mapa[x3].end()) { /* line 35 slow_hit_count: 304, fast_hit_count: 1 */
              cont++; /* line 36 slow_hit_count: 54, fast_hit_count: 1 */
            } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
        ita++; /* line 40 slow_hit_count: 1313, fast_hit_count: 3 */
      } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  cout << cont << endl; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance characteristics of the given C program and derive natural language invariants, we need to identify the code segments that are significantly more active during the slow run compared to the fast run. Here's how we approach this:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**
   - The slow input shows significantly higher hit counts on lines within nested loops, particularly lines 20, 25, 27, 32, and 40. These lines are part of nested loops iterating over combinations of points.

2. **Pinpointed Lines:**
   - **Line 20 (while loop):** Engages in multiple iterations over a map structure.
   - **Line 27 (for loop):** Iterates over a set, contributing to the nested iteration.
   - **Line 32 (conditional):** Contains logic to check and calculate midpoints, heavily hit due to its presence within nested loops.

3. **Inference on Inefficiency:**
   - The nested loops are iterating over the map and set structures to calculate potential midpoint scenarios. The performance degradation stems from the number of combinations of points being checked, particularly when the map becomes dense with points along similar coordinates.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the inefficient code segments, we can derive conditions under which the program is likely to slow down:

1. **High Density of Points in Coordinate Space:**
   - Natural Language Invariant: "When there are many points with similar or close x or y coordinates, leading to a dense distribution in the map structure, the program may experience a slowdown due to increased combinations being evaluated for midpoint checks."

2. **Increased Iterations Over Map Entries:**
   - Natural Language Invariant: "If the map contains numerous entries (x-coordinates), and each entry has a large number of corresponding y values, the nested loops will iterate extensively, slowing down the execution."

3. **Nested Loop Complexity:**
   - Natural Language Invariant: "The code may slow significantly when a large number of points results in extensive nested loop iterations, causing repetitive checks for midpoints among combinations of points."

### Summary of Invariants

1. **High Point Density Invariant:**
   - When many points share similar or close x or y values, forming dense clusters in the mapping, the nested loops must evaluate more combinations, leading to a slowdown.

2. **Map Entry and Value Count Invariant:**
   - A large number of x-coordinate entries in the map, each with numerous y-coordinate values, increases inner loop iterations, causing performance degradation.

3. **Combinatorial Explosion Invariant:**
   - A significant slowdown occurs when the combinatorial nature of the problem results in excessive iterations across nested loops, checking for valid middle points among point combinations.

These invariants capture the essence of conditions leading to slow execution without relying solely on specific input values, aligning with the constraints of the problem where \( n \leq 3000 \).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given n points on a plane. All points are different.

Find the number of different groups of three points (A, B, C) such that point B is the middle of segment AC. 

The groups of three points are considered unordered, that is, if point B is the middle of segment AC, then groups (A, B, C) and (C, B, A) are considered the same.

Input

The first line contains a single integer n (3 ≤ n ≤ 3000) — the number of points. 

Next n lines contain the points. The i-th line contains coordinates of the i-th point: two space-separated integers xi, yi ( - 1000 ≤ xi, yi ≤ 1000).

It is guaranteed that all given points are different.

Output

Print the single number — the answer to the problem. 

Examples

Input

3
1 1
2 2
3 3


Output

1


Input

3
0 0
-1 0
0 1


Output

0

Solution (C++ code):
{solution}


assistant: Let's translate the performance-characterizing invariants into C++ checker code (Phase 3) and then integrate it into the original program (Phase 4).

### Phase 3: Implement the Natural Language Invariants in C++

1. **High Density of Points in Coordinate Space:**
   - We can check if there are too many points with similar x or y coordinates.

2. **Increased Iterations Over Map Entries:**
   - We can check if the map has many entries and each has many values.

3. **Nested Loop Complexity:**
   - Ensure that the number of combinations being checked is manageable.

Here's the C++ checker code for these invariants:

```cpp
#include <iostream>
#include <map>
#include <set>
#include <cmath>

void check_density_invariant(const std::map<int, std::set<int>>& mapa) {
    for (const auto& entry : mapa) {
        if (entry.second.size() > 100) { // Arbitrary threshold to trigger dense y-values for an x
            std::cerr << "Warning: High density of y-values for x-coordinate " << entry.first << "!" << std::endl;
            abort();
        }
    }
}

void check_map_size_invariant(const std::map<int, std::set<int>>& mapa) {
    if (mapa.size() > 100) { // Arbitrary threshold for number of unique x-coordinates
        std::cerr << "Warning: Large number of unique x-coordinates!" << std::endl;
        abort();
    }
}

void check_combination_invariant(int n) {
    if (n > 1000) { // Arbitrary threshold based on experiment; adjust as necessary
        std::cerr << "Warning: Too many point combinations being evaluated!" << std::endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code

Now, let's integrate these checks into the original program at strategic points to avoid adding overhead in tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_density_invariant(const map<int, set<int>>& mapa) {
    for (const auto& entry : mapa) {
        if (entry.second.size() > 100) { // Arbitrary threshold for dense y-values
            cerr << "Warning: High density of y-values for x-coordinate " << entry.first << "!" << endl;
            abort();
        }
    }
}

void check_map_size_invariant(const map<int, set<int>>& mapa) {
    if (mapa.size() > 100) { // Arbitrary threshold for number of unique x-coordinates
        cerr << "Warning: Large number of unique x-coordinates!" << endl;
        abort();
    }
}

void check_combination_invariant(int n) {
    if (n > 1000) { // Arbitrary threshold for combinations
        cerr << "Warning: Too many point combinations being evaluated!" << endl;
        abort();
    }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  int n, i, j, x, y, cont, x2, y2, x3, y3;
  cin >> n;

  check_combination_invariant(n); // Check for excessive combinations

  map<int, set<int>> mapa;
  for (i = 0; i < n; i++) {
    cin >> x >> y;
    mapa[x].insert(y);
  }

  check_map_size_invariant(mapa); // Check for too many unique x-coordinates
  check_density_invariant(mapa); // Check for dense y-values for any x-coordinate

  cont = 0;
  for (auto it = mapa.begin(); it != mapa.end(); ++it) {
    for (auto sit = it->second.begin(); sit != it->second.end(); ++sit) {
      auto ita = it;
      while (ita != mapa.end()) {
        auto sita = (ita == it) ? next(sit) : ita->second.begin();
        for (; sita != ita->second.end(); ++sita) {
          x = it->first;
          y = *sit;
          x2 = ita->first;
          y2 = *sita;
          if ((x != x2 || y != y2) && (x + x2) % 2 == 0 && (y + y2) % 2 == 0) {
            x3 = (x + x2) / 2;
            y3 = (y + y2) / 2;
            if (mapa[x3].find(y3) != mapa[x3].end()) {
              cont++;
            }
          }
        }
        ita++;
      }
    }
  }

  cout << cont << endl;
  return 0;
}
```

### Explanation of Integrated Checks

1. **Density Check:** After building the map, checks if any x-coordinate has an excessively large number of y-values, indicating high density.
2. **Map Size Check:** After map construction, checks if too many unique x-coordinates exist.
3. **Combination Check:** Before processing, ensures the number of points doesn't imply an excessive number of combinations to be evaluated.

These checks are strategically placed before the computationally expensive parts of the program to preemptively detect potential performance bottlenecks.

