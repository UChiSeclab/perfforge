=== Invariants Response ===
To analyze the performance characteristics of the given C program and derive natural language invariants, we need to identify the code segments that are significantly more active during the slow run compared to the fast run. Here's how we approach this:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**
   - The slow input shows significantly higher hit counts on lines within nested loops, particularly lines 20, 25, 27, 32, and 40. These lines are part of nested loops iterating over combinations of points.

2. **Pinpointed Lines:**
   - **Line 20 (while loop):** Engages in multiple iterations over a map structure.
   - **Line 27 (for loop):** Iterates over a set, contributing to the nested iteration.
   - **Line 32 (conditional):** Contains logic to check and calculate midpoints, heavily hit due to its presence within nested loops.

3. **Inference on Inefficiency:**
   - The nested loops are iterating over the map and set structures to calculate potential midpoint scenarios. The performance degradation stems from the number of combinations of points being checked, particularly when the map becomes dense with points along similar coordinates.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the inefficient code segments, we can derive conditions under which the program is likely to slow down:

1. **High Density of Points in Coordinate Space:**
   - Natural Language Invariant: "When there are many points with similar or close x or y coordinates, leading to a dense distribution in the map structure, the program may experience a slowdown due to increased combinations being evaluated for midpoint checks."

2. **Increased Iterations Over Map Entries:**
   - Natural Language Invariant: "If the map contains numerous entries (x-coordinates), and each entry has a large number of corresponding y values, the nested loops will iterate extensively, slowing down the execution."

3. **Nested Loop Complexity:**
   - Natural Language Invariant: "The code may slow significantly when a large number of points results in extensive nested loop iterations, causing repetitive checks for midpoints among combinations of points."

### Summary of Invariants

1. **High Point Density Invariant:**
   - When many points share similar or close x or y values, forming dense clusters in the mapping, the nested loops must evaluate more combinations, leading to a slowdown.

2. **Map Entry and Value Count Invariant:**
   - A large number of x-coordinate entries in the map, each with numerous y-coordinate values, increases inner loop iterations, causing performance degradation.

3. **Combinatorial Explosion Invariant:**
   - A significant slowdown occurs when the combinatorial nature of the problem results in excessive iterations across nested loops, checking for valid middle points among point combinations.

These invariants capture the essence of conditions leading to slow execution without relying solely on specific input values, aligning with the constraints of the problem where \( n \leq 3000 \).

=== Checker Response ===
Let's translate the performance-characterizing invariants into C++ checker code (Phase 3) and then integrate it into the original program (Phase 4).

### Phase 3: Implement the Natural Language Invariants in C++

1. **High Density of Points in Coordinate Space:**
   - We can check if there are too many points with similar x or y coordinates.

2. **Increased Iterations Over Map Entries:**
   - We can check if the map has many entries and each has many values.

3. **Nested Loop Complexity:**
   - Ensure that the number of combinations being checked is manageable.

Here's the C++ checker code for these invariants:

```cpp
#include <iostream>
#include <map>
#include <set>
#include <cmath>

void check_density_invariant(const std::map<int, std::set<int>>& mapa) {
    for (const auto& entry : mapa) {
        if (entry.second.size() > 100) { // Arbitrary threshold to trigger dense y-values for an x
            std::cerr << "Warning: High density of y-values for x-coordinate " << entry.first << "!" << std::endl;
            abort();
        }
    }
}

void check_map_size_invariant(const std::map<int, std::set<int>>& mapa) {
    if (mapa.size() > 100) { // Arbitrary threshold for number of unique x-coordinates
        std::cerr << "Warning: Large number of unique x-coordinates!" << std::endl;
        abort();
    }
}

void check_combination_invariant(int n) {
    if (n > 1000) { // Arbitrary threshold based on experiment; adjust as necessary
        std::cerr << "Warning: Too many point combinations being evaluated!" << std::endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code

Now, let's integrate these checks into the original program at strategic points to avoid adding overhead in tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_density_invariant(const map<int, set<int>>& mapa) {
    for (const auto& entry : mapa) {
        if (entry.second.size() > 100) { // Arbitrary threshold for dense y-values
            cerr << "Warning: High density of y-values for x-coordinate " << entry.first << "!" << endl;
            abort();
        }
    }
}

void check_map_size_invariant(const map<int, set<int>>& mapa) {
    if (mapa.size() > 100) { // Arbitrary threshold for number of unique x-coordinates
        cerr << "Warning: Large number of unique x-coordinates!" << endl;
        abort();
    }
}

void check_combination_invariant(int n) {
    if (n > 1000) { // Arbitrary threshold for combinations
        cerr << "Warning: Too many point combinations being evaluated!" << endl;
        abort();
    }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  int n, i, j, x, y, cont, x2, y2, x3, y3;
  cin >> n;

  check_combination_invariant(n); // Check for excessive combinations

  map<int, set<int>> mapa;
  for (i = 0; i < n; i++) {
    cin >> x >> y;
    mapa[x].insert(y);
  }

  check_map_size_invariant(mapa); // Check for too many unique x-coordinates
  check_density_invariant(mapa); // Check for dense y-values for any x-coordinate

  cont = 0;
  for (auto it = mapa.begin(); it != mapa.end(); ++it) {
    for (auto sit = it->second.begin(); sit != it->second.end(); ++sit) {
      auto ita = it;
      while (ita != mapa.end()) {
        auto sita = (ita == it) ? next(sit) : ita->second.begin();
        for (; sita != ita->second.end(); ++sita) {
          x = it->first;
          y = *sit;
          x2 = ita->first;
          y2 = *sita;
          if ((x != x2 || y != y2) && (x + x2) % 2 == 0 && (y + y2) % 2 == 0) {
            x3 = (x + x2) / 2;
            y3 = (y + y2) / 2;
            if (mapa[x3].find(y3) != mapa[x3].end()) {
              cont++;
            }
          }
        }
        ita++;
      }
    }
  }

  cout << cont << endl;
  return 0;
}
```

### Explanation of Integrated Checks

1. **Density Check:** After building the map, checks if any x-coordinate has an excessively large number of y-values, indicating high density.
2. **Map Size Check:** After map construction, checks if too many unique x-coordinates exist.
3. **Combination Check:** Before processing, ensures the number of points doesn't imply an excessive number of combinations to be evaluated.

These checks are strategically placed before the computationally expensive parts of the program to preemptively detect potential performance bottlenecks.
