system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given n points on a plane. All points are different.

Find the number of different groups of three points (A, B, C) such that point B is the middle of segment AC. 

The groups of three points are considered unordered, that is, if point B is the middle of segment AC, then groups (A, B, C) and (C, B, A) are considered the same.

Input

The first line contains a single integer n (3 ≤ n ≤ 3000) — the number of points. 

Next n lines contain the points. The i-th line contains coordinates of the i-th point: two space-separated integers xi, yi ( - 1000 ≤ xi, yi ≤ 1000).

It is guaranteed that all given points are different.

Output

Print the single number — the answer to the problem. 

Examples

Input

3
1 1
2 2
3 3


Output

1


Input

3
0 0
-1 0
0 1


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 100100;
set<pair<float, float> > s;
float x[3010], y[3010];
int main() {
  int n, ans = 0;
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> x[i] >> y[i];
    s.insert({x[i], y[i]});
  }
  for (int i = 0; i < n; i++) {
    for (int j = i + 1; j < n; j++) {
      if (i == j) continue;
      float tmpx = (x[i] + x[j]) / 2, tmpy = (y[i] + y[j]) / 2;
      if (s.find({tmpx, tmpy}) != s.end()) {
        ans++;
      }
    }
  }
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

40
-8 24
2 -1
1 -18
72 -70
5 -4
-308 436
-19 40
36 -35
-178 265
-1 2
-7 30
-1 0
3 -2
200 -285
17 -16
-35 74
0 -4
-86 106
-1 4
-7 6
0 1
-5 4
-2 3
6 -5
-4 5
181 -262
76 -118
0 0
-7 18
-58 104
-5 6
-6 12
-3 4
1 0
11 -10
-86 130
-3 6
153 -14
-183 270
-43 64


(G.2) Fast Input

3
0 0
0 -1
0 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 100100; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
set<pair<float, float> > s; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
float x[3010], y[3010]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int n, ans = 0; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 9 slow_hit_count: 41, fast_hit_count: 4 */
    cin >> x[i] >> y[i]; /* line 10 slow_hit_count: 40, fast_hit_count: 3 */
    s.insert({x[i], y[i]}); /* line 11 slow_hit_count: 40, fast_hit_count: 3 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 13 slow_hit_count: 41, fast_hit_count: 4 */
    for (int j = i + 1; j < n; j++) { /* line 14 slow_hit_count: 820, fast_hit_count: 6 */
      if (i == j) continue; /* line 15 slow_hit_count: 780, fast_hit_count: 3 */
      float tmpx = (x[i] + x[j]) / 2, tmpy = (y[i] + y[j]) / 2; /* line 16 slow_hit_count: 780, fast_hit_count: 3 */
      if (s.find({tmpx, tmpy}) != s.end()) { /* line 17 slow_hit_count: 780, fast_hit_count: 3 */
        ans++; /* line 18 slow_hit_count: 54, fast_hit_count: 1 */
      } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 23 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottlenecks in the given C program, let's analyze the provided code and the hit count information to identify which parts of the code are contributing to the slowdown and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

From the hit count information, we observe the following:

1. **Double Nested Loop**: The nested loop structure starting at line 13 is executed significantly more for the slow input (`820` hits for line 14) compared to the fast input (`6` hits). This suggests that this loop, which iterates over pairs of points, is the primary cause of the slowdown.

2. **Set Lookup**: The line `if (s.find({tmpx, tmpy}) != s.end())` (line 17) is hit `780` times in the slow input and `3` times in the fast input. This indicates that the lookup in the set of points is performed frequently, which might not be computationally expensive by itself, but when combined with the nested loop, it results in significant overhead.

3. **Condition for Middle Points**: The condition to identify if a point is the middle of a segment is checked many times (`780` for slow input), but only results in `54` increments of `ans`, indicating that the number of actual successes is relatively low compared to the number of checks performed.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Large Number of Point Pairs**: The slowdown is likely to occur when the number of point pairs (`n choose 2` combinations) becomes large. This is exacerbated by the need to compute and check the middle point for each pair, which can lead to a quadratic time complexity in terms of the number of points, `n`.

   **Invariant**: "When the number of input points is large, the quadratic growth in the number of point pairs makes the computation of middle points and set lookups expensive."

2. **Distribution of Points**: If many point pairs have the same middle point or the points are such that middle points frequently coincide with existing points, the function checking for middle points will be called more often, resulting in increased execution time.

   **Invariant**: "If the distribution of points is such that many pairs have middle points coinciding with other existing points, the set lookup operations increase significantly."

3. **Inefficient Use of Data Structures**: Using a set to store points leads to potentially unnecessary floating-point operations when computing middle points as `(x[i] + x[j]) / 2`. This could be inefficient if most computations yield fractional coordinates that do not exist in the set.

   **Invariant**: "When computations of middle points result in coordinates that do not match integer points, the performance degrades due to frequent unsuccessful set lookups."

### Conclusion

The primary performance bottleneck arises from the quadratic nature of the nested loops, which becomes particularly problematic when the input size `n` is large, close to the upper limit (e.g., `n = 3000`). Additionally, the program's performance is affected by the distribution of the points and the efficiency of the data structure operations. These performance-characterizing invariants help in understanding under what conditions the program is likely to slow down significantly.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given n points on a plane. All points are different.

Find the number of different groups of three points (A, B, C) such that point B is the middle of segment AC. 

The groups of three points are considered unordered, that is, if point B is the middle of segment AC, then groups (A, B, C) and (C, B, A) are considered the same.

Input

The first line contains a single integer n (3 ≤ n ≤ 3000) — the number of points. 

Next n lines contain the points. The i-th line contains coordinates of the i-th point: two space-separated integers xi, yi ( - 1000 ≤ xi, yi ≤ 1000).

It is guaranteed that all given points are different.

Output

Print the single number — the answer to the problem. 

Examples

Input

3
1 1
2 2
3 3


Output

1


Input

3
0 0
-1 0
0 1


Output

0

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Based on the previously identified performance-characterizing invariants, we will implement checks in C++. These checks will help detect the scenarios where the program might encounter performance bottlenecks.

#### Invariant 1: Large Number of Point Pairs

The potential slowdown is when the number of point pairs becomes large, causing quadratic growth. We will check if `n` is large enough to cause performance issues.

```cpp
void check_large_point_pairs(int n) {
    if (n > 1500) { // Arbitrary threshold chosen based on quadratic growth
        cerr << "Warning: Performance bottleneck condition triggered - large number of point pairs!" << endl;
        abort();
    }
}
```

#### Invariant 2: Distribution of Points

This invariant checks whether the distribution of points leads to frequent computation of middle points coinciding with existing points. Since this is difficult to check directly beforehand, we will rely on a proxy condition related to set operations.

```cpp
void check_point_distribution(int successfulChecks, int totalChecks) {
    if (successfulChecks > totalChecks * 0.75) { // If more than 75% of checks are successful
        cerr << "Warning: Performance bottleneck condition triggered - high frequency of valid middle points!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, we will integrate these checks into the given C++ program, placing them at strategic locations to avoid unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 100100;
set<pair<float, float>> s;
float x[3010], y[3010];

void check_large_point_pairs(int n) {
    if (n > 1500) { // Arbitrary threshold chosen based on quadratic growth
        cerr << "Warning: Performance bottleneck condition triggered - large number of point pairs!" << endl;
        abort();
    }
}

void check_point_distribution(int successfulChecks, int totalChecks) {
    if (successfulChecks > totalChecks * 0.75) { // If more than 75% of checks are successful
        cerr << "Warning: Performance bottleneck condition triggered - high frequency of valid middle points!" << endl;
        abort();
    }
}

int main() {
    int n, ans = 0;
    cin >> n;

    // Check for large number of point pairs
    check_large_point_pairs(n);

    for (int i = 0; i < n; i++) {
        cin >> x[i] >> y[i];
        s.insert({x[i], y[i]});
    }

    int successfulChecks = 0;
    int totalChecks = 0;

    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            float tmpx = (x[i] + x[j]) / 2, tmpy = (y[i] + y[j]) / 2;
            totalChecks++;
            if (s.find({tmpx, tmpy}) != s.end()) {
                successfulChecks++;
                ans++;
            }
        }
    }

    // Check for distribution of points
    check_point_distribution(successfulChecks, totalChecks);

    cout << ans;
}
```

### Explanation

1. **Checker Placement**: 
   - The `check_large_point_pairs` function is called immediately after reading `n` to catch potential performance issues early based on the input size.
   - The `check_point_distribution` function is called after the nested loops to evaluate the point distribution's impact on performance.

2. **Thresholds**:
   - The threshold for `n` is set to 1500, considering the quadratic growth in combinations.
   - The success rate threshold is set to 75% for the point distribution check, which should capture scenarios with frequent successful middle point checks.

These checks help identify scenarios where performance issues might occur, assisting developers and fuzzers in detecting and addressing these bottlenecks.

