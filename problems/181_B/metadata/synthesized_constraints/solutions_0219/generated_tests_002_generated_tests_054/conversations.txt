system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given n points on a plane. All points are different.

Find the number of different groups of three points (A, B, C) such that point B is the middle of segment AC. 

The groups of three points are considered unordered, that is, if point B is the middle of segment AC, then groups (A, B, C) and (C, B, A) are considered the same.

Input

The first line contains a single integer n (3 ≤ n ≤ 3000) — the number of points. 

Next n lines contain the points. The i-th line contains coordinates of the i-th point: two space-separated integers xi, yi ( - 1000 ≤ xi, yi ≤ 1000).

It is guaranteed that all given points are different.

Output

Print the single number — the answer to the problem. 

Examples

Input

3
1 1
2 2
3 3


Output

1


Input

3
0 0
-1 0
0 1


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  float n, ans = 0, x, y, a, b;
  int i, j, k, s, e, mid;
  cin >> n;
  vector<pair<long long, long long> > v;
  for (i = 0; i < n; i++) {
    cin >> x >> y;
    v.push_back(make_pair(x, y));
  }
  sort(v.begin(), v.end());
  for (i = 0; i < (n - 2); i++)
    for (j = i + 2; j < n; j++) {
      a = (v[i].first + v[j].first) / 2.0;
      b = (v[i].second + v[j].second) / 2.0;
      s = i + 1;
      e = j - 1;
      while (s <= e) {
        mid = (s + e) / 2;
        if (v[mid].first == a && v[mid].second == b) {
          ans++;
          break;
        } else if (v[mid].first > a)
          e = mid - 1;
        else if (v[mid].first < a)
          s = mid + 1;
        else if (v[mid].first == a) {
          if (v[mid].second > b)
            e = mid - 1;
          else if (v[mid].second < b)
            s = mid + 1;
        }
      }
    }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

40
-8 24
2 -1
1 -18
72 -70
5 -4
-308 436
-19 40
36 -35
-178 265
-1 2
-7 30
-1 0
3 -2
200 -285
17 -16
-35 74
0 -4
-86 106
-1 4
-7 6
0 1
-5 4
-2 3
6 -5
-4 5
181 -262
76 -118
0 0
-7 18
-58 104
-5 6
-6 12
-3 4
1 0
11 -10
-86 130
-3 6
153 -236
-183 270
-43 64


(G.2) Fast Input

3
1 0
0 -1
0 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  float n, ans = 0, x, y, a, b; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int i, j, k, s, e, mid; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<long long, long long> > v; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) { /* line 8 slow_hit_count: 41, fast_hit_count: 4 */
    cin >> x >> y; /* line 9 slow_hit_count: 40, fast_hit_count: 3 */
    v.push_back(make_pair(x, y)); /* line 10 slow_hit_count: 40, fast_hit_count: 3 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  sort(v.begin(), v.end()); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < (n - 2); i++) /* line 13 slow_hit_count: 39, fast_hit_count: 2 */
    for (j = i + 2; j < n; j++) { /* line 14 slow_hit_count: 779, fast_hit_count: 2 */
      a = (v[i].first + v[j].first) / 2.0; /* line 15 slow_hit_count: 741, fast_hit_count: 1 */
      b = (v[i].second + v[j].second) / 2.0; /* line 16 slow_hit_count: 741, fast_hit_count: 1 */
      s = i + 1; /* line 17 slow_hit_count: 741, fast_hit_count: 1 */
      e = j - 1; /* line 18 slow_hit_count: 741, fast_hit_count: 1 */
      while (s <= e) { /* line 19 slow_hit_count: 3285, fast_hit_count: 2 */
        mid = (s + e) / 2; /* line 20 slow_hit_count: 2599, fast_hit_count: 1 */
        if (v[mid].first == a && v[mid].second == b) { /* line 21 slow_hit_count: 2599, fast_hit_count: 1 */
          ans++; /* line 22 slow_hit_count: 55, fast_hit_count: 0 */
          break; /* line 23 slow_hit_count: 55, fast_hit_count: 0 */
        } else if (v[mid].first > a) /* line 24 slow_hit_count: 2544, fast_hit_count: 1 */
          e = mid - 1; /* line 25 slow_hit_count: 1118, fast_hit_count: 0 */
        else if (v[mid].first < a) /* line 26 slow_hit_count: 1426, fast_hit_count: 1 */
          s = mid + 1; /* line 27 slow_hit_count: 1256, fast_hit_count: 1 */
        else if (v[mid].first == a) { /* line 28 slow_hit_count: 170, fast_hit_count: 0 */
          if (v[mid].second > b) /* line 29 slow_hit_count: 170, fast_hit_count: 0 */
            e = mid - 1; /* line 30 slow_hit_count: 73, fast_hit_count: 0 */
          else if (v[mid].second < b) /* line 31 slow_hit_count: 97, fast_hit_count: 0 */
            s = mid + 1; /* line 32 slow_hit_count: 97, fast_hit_count: 0 */
        } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided code, hit counts, and problem constraints, let's analyze the potential performance bottlenecks and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Nested Loops and Binary Search:**
   - The loops starting from line 13 (`for (i = 0; i < (n - 2); i++)` and `for (j = i + 2; j < n; j++)`) are executed significantly more in the slow input case as indicated by hit counts: 39 and 779 respectively for the slow input versus 2 each for the fast input.
   - The binary search loop (`while (s <= e)`) on line 19 is hit 3285 times in the slow input compared to only 2 times for the fast input, suggesting that it is a major contributor to the slow performance.

2. **Binary Search Decisions:**
   - The conditions in the binary search (lines 21–32) are evaluated frequently with significant hits on lines 24-27 (2544, 1118, 1426, and 1256 hits). This indicates that the binary search performs many comparisons, especially on the 'x' coordinate.

### Phase 2: Derive Performance-Characterizing Invariants

1. **High Frequency of Binary Search Iterations:**
   - Natural Language Description: "If many point pairs lead to a substantial number of binary search iterations due to the spatial distribution of points, the program may slow down significantly."
   - This invariant implies that if many pairs of points `(i, j)` result in a large range for binary search (`s = i + 1` to `e = j - 1`) without quickly finding a midpoint, it leads to inefficiency. This can happen if there are many potential candidates for point B that are not exact midpoints.

2. **Dense Point Distribution in Sorted Order:**
   - Natural Language Description: "When points are densely distributed along a line or within a region where potential midpoints are not actual points, the binary search will perform more operations, slowing the execution."
   - This invariant captures scenarios where the geometric configuration of points causes the binary search to take longer due to the need to explore many s, e intervals without finding a match.

3. **Large Number of Initial Pair Combinations:**
   - Natural Language Description: "If the number of possible (i, j) combinations is large and the midpoints do not correspond to actual points frequently, the execution time will increase due to repeated checks."
   - This invariant is activated when the combination of n choose 2 is large, which could lead to many initial midpoint calculations and failed binary searches.

### Threshold Consideration and Input Constraints

- Given `n` can be as large as 3000, the nested loops iterate through a potentially large number of combinations, particularly when `n` approaches its upper bound.
- The conditions check scenarios where input `n` is significantly large within its allowed constraints, and the spatial distribution of points does not align well with problem requirements (such as forming valid midpoints).

These statements identify that inefficiencies arise when the spatial arrangement of points leads to numerous unsuccessful midpoint searches, exacerbated by large `n` values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given n points on a plane. All points are different.

Find the number of different groups of three points (A, B, C) such that point B is the middle of segment AC. 

The groups of three points are considered unordered, that is, if point B is the middle of segment AC, then groups (A, B, C) and (C, B, A) are considered the same.

Input

The first line contains a single integer n (3 ≤ n ≤ 3000) — the number of points. 

Next n lines contain the points. The i-th line contains coordinates of the i-th point: two space-separated integers xi, yi ( - 1000 ≤ xi, yi ≤ 1000).

It is guaranteed that all given points are different.

Output

Print the single number — the answer to the problem. 

Examples

Input

3
1 1
2 2
3 3


Output

1


Input

3
0 0
-1 0
0 1


Output

0

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as Checker Code in C++

Here we translate the natural language invariants into C++ checkers:

1. **High Frequency of Binary Search Iterations:**

```cpp
void check_binary_search_iterations(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high frequency of binary search iterations!" << endl;
        abort();
    }
}
```

2. **Dense Point Distribution in Sorted Order:**

```cpp
void check_dense_point_distribution(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - dense point distribution in sorted order!" << endl;
        abort();
    }
}
```

3. **Large Number of Initial Pair Combinations:**

```cpp
void check_large_number_of_combinations(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large number of initial pair combinations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Original Program

Now, we integrate these checker functions into the given C++ program by placing them effectively in the program's control flow:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_binary_search_iterations(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high frequency of binary search iterations!" << endl;
        abort();
    }
}

void check_dense_point_distribution(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - dense point distribution in sorted order!" << endl;
        abort();
    }
}

void check_large_number_of_combinations(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large number of initial pair combinations!" << endl;
        abort();
    }
}

int main() {
    float n, ans = 0, x, y, a, b;
    int i, j, k, s, e, mid;
    cin >> n;
    vector<pair<long long, long long>> v;
    for (i = 0; i < n; i++) {
        cin >> x >> y;
        v.push_back(make_pair(x, y));
    }
    sort(v.begin(), v.end());

    // Insert checkers before entering the nested loops
    check_large_number_of_combinations(n > 1000); // Example threshold for large combinations

    for (i = 0; i < (n - 2); i++) {
        for (j = i + 2; j < n; j++) {

            // Check for dense distribution based on sorted structure
            check_dense_point_distribution(j - i > 1500); // Example threshold for dense distribution

            a = (v[i].first + v[j].first) / 2.0;
            b = (v[i].second + v[j].second) / 2.0;
            s = i + 1;
            e = j - 1;

            int binary_search_count = 0; // Initialize counter for binary search iterations

            while (s <= e) {
                mid = (s + e) / 2;
                binary_search_count++; // Increment binary search iteration counter

                if (v[mid].first == a && v[mid].second == b) {
                    ans++;
                    break;
                } else if (v[mid].first > a)
                    e = mid - 1;
                else if (v[mid].first < a)
                    s = mid + 1;
                else if (v[mid].first == a) {
                    if (v[mid].second > b)
                        e = mid - 1;
                    else if (v[mid].second < b)
                        s = mid + 1;
                }
            }

            // Check for excessive binary search iterations
            check_binary_search_iterations(binary_search_count > 10); // Example threshold for binary search count
        }
    }
    cout << ans << endl;
    return 0;
}
```

### Explanation

- **High Frequency of Binary Search Iterations:** This is checked by counting the number of iterations in the binary search and aborting if it exceeds a threshold, indicating inefficient searches.
- **Dense Point Distribution in Sorted Order:** This is checked by measuring how many points are between the two endpoints of a candidate segment, indicating a dense region.
- **Large Number of Initial Pair Combinations:** This is checked prior to the nested loops, aborting if `n` is particularly high within its constraints, indicating excessive combinations.

By integrating these checks, the program is now instrumented to detect and warn about the conditions likely leading to performance issues.

