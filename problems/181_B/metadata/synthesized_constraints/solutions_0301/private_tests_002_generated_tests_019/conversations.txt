system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given n points on a plane. All points are different.

Find the number of different groups of three points (A, B, C) such that point B is the middle of segment AC. 

The groups of three points are considered unordered, that is, if point B is the middle of segment AC, then groups (A, B, C) and (C, B, A) are considered the same.

Input

The first line contains a single integer n (3 ≤ n ≤ 3000) — the number of points. 

Next n lines contain the points. The i-th line contains coordinates of the i-th point: two space-separated integers xi, yi ( - 1000 ≤ xi, yi ≤ 1000).

It is guaranteed that all given points are different.

Output

Print the single number — the answer to the problem. 

Examples

Input

3
1 1
2 2
3 3


Output

1


Input

3
0 0
-1 0
0 1


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n;
  cin >> n;
  int a[n][2], br = 0;
  for (int i = 0; i < n; i++) cin >> a[i][0] >> a[i][1];
  int p[2];
  for (int i = 0; i < n; i++)
    for (int j = i + 1; j < n; j++) {
      if (a[j][0] < a[i][0]) {
        p[0] = a[i][0];
        p[1] = a[i][1];
        a[i][0] = a[j][0];
        a[i][1] = a[j][1];
        a[j][0] = p[0];
        a[j][1] = p[1];
      } else if ((a[j][0] == a[i][0]) && (a[j][1] < a[i][1])) {
        p[0] = a[i][0];
        p[1] = a[i][1];
        a[i][0] = a[j][0];
        a[i][1] = a[j][1];
        a[j][0] = p[0];
        a[j][1] = p[1];
      }
    }
  int donjagranica = 0, gornjagranica = n - 1, sredina;
  int donjagranica2, gornjagranica2, sredina2;
  double g[2];
  for (int i = 0; i < n; i++)
    for (int j = i + 1; j < n; j++) {
      g[0] = (a[i][0] + a[j][0]) / 2.0;
      g[1] = (a[i][1] + a[j][1]) / 2.0;
      while (a[donjagranica][0] != a[gornjagranica][0]) {
        sredina = (donjagranica + gornjagranica) / 2;
        if (a[sredina][0] >= g[0])
          gornjagranica = sredina;
        else
          donjagranica = sredina + 1;
      }
      while (a[gornjagranica][0] == a[gornjagranica + 1][0]) {
        gornjagranica++;
      }
      while (a[donjagranica][0] == a[donjagranica - 1][0]) {
        donjagranica--;
      }
      donjagranica2 = donjagranica;
      gornjagranica2 = gornjagranica;
      while (donjagranica2 < gornjagranica2) {
        sredina2 = (donjagranica2 + gornjagranica2) / 2;
        if (a[sredina2][1] >= g[1])
          gornjagranica2 = sredina2;
        else
          donjagranica2 = sredina2 + 1;
      }
      if ((a[donjagranica2][0] == g[0]) && (a[donjagranica2][1] == g[1])) br++;
      gornjagranica = n - 1;
      donjagranica = 0;
    }
  cout << br;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

40
-8 24
2 -1
1 -18
72 -70
5 -4
-308 436
-19 40
36 -35
-178 265
-1 2
-7 30
-1 0
3 -2
200 -285
17 -16
-35 74
0 -4
-86 106
-1 4
-7 6
0 1
-5 4
-2 3
6 -5
-4 5
181 -262
76 -118
0 0
-7 18
-58 104
-5 6
-6 12
-3 4
1 0
11 -10
-86 130
-3 6
153 -236
-183 270
-33 64


(G.2) Fast Input

3
2 3
0 2
1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int a[n][2], br = 0; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) cin >> a[i][0] >> a[i][1]; /* line 7 slow_hit_count: 41, fast_hit_count: 4 */
  int p[2]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) /* line 9 slow_hit_count: 41, fast_hit_count: 4 */
    for (int j = i + 1; j < n; j++) { /* line 10 slow_hit_count: 820, fast_hit_count: 6 */
      if (a[j][0] < a[i][0]) { /* line 11 slow_hit_count: 780, fast_hit_count: 3 */
        p[0] = a[i][0]; /* line 12 slow_hit_count: 341, fast_hit_count: 2 */
        p[1] = a[i][1]; /* line 13 slow_hit_count: 341, fast_hit_count: 2 */
        a[i][0] = a[j][0]; /* line 14 slow_hit_count: 341, fast_hit_count: 2 */
        a[i][1] = a[j][1]; /* line 15 slow_hit_count: 341, fast_hit_count: 2 */
        a[j][0] = p[0]; /* line 16 slow_hit_count: 341, fast_hit_count: 2 */
        a[j][1] = p[1]; /* line 17 slow_hit_count: 341, fast_hit_count: 2 */
      } else if ((a[j][0] == a[i][0]) && (a[j][1] < a[i][1])) { /* line 18 slow_hit_count: 439, fast_hit_count: 1 */
        p[0] = a[i][0]; /* line 19 slow_hit_count: 72, fast_hit_count: 0 */
        p[1] = a[i][1]; /* line 20 slow_hit_count: 72, fast_hit_count: 0 */
        a[i][0] = a[j][0]; /* line 21 slow_hit_count: 72, fast_hit_count: 0 */
        a[i][1] = a[j][1]; /* line 22 slow_hit_count: 72, fast_hit_count: 0 */
        a[j][0] = p[0]; /* line 23 slow_hit_count: 72, fast_hit_count: 0 */
        a[j][1] = p[1]; /* line 24 slow_hit_count: 72, fast_hit_count: 0 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  int donjagranica = 0, gornjagranica = n - 1, sredina; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  int donjagranica2, gornjagranica2, sredina2; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  double g[2]; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) /* line 30 slow_hit_count: 41, fast_hit_count: 4 */
    for (int j = i + 1; j < n; j++) { /* line 31 slow_hit_count: 820, fast_hit_count: 6 */
      g[0] = (a[i][0] + a[j][0]) / 2.0; /* line 32 slow_hit_count: 780, fast_hit_count: 3 */
      g[1] = (a[i][1] + a[j][1]) / 2.0; /* line 33 slow_hit_count: 780, fast_hit_count: 3 */
      while (a[donjagranica][0] != a[gornjagranica][0]) { /* line 34 slow_hit_count: 4720, fast_hit_count: 8 */
        sredina = (donjagranica + gornjagranica) / 2; /* line 35 slow_hit_count: 3940, fast_hit_count: 5 */
        if (a[sredina][0] >= g[0]) /* line 36 slow_hit_count: 3940, fast_hit_count: 5 */
          gornjagranica = sredina; /* line 37 slow_hit_count: 1887, fast_hit_count: 2 */
        else /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
          donjagranica = sredina + 1; /* line 39 slow_hit_count: 2053, fast_hit_count: 3 */
      } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
      while (a[gornjagranica][0] == a[gornjagranica + 1][0]) { /* line 41 slow_hit_count: 891, fast_hit_count: 3 */
        gornjagranica++; /* line 42 slow_hit_count: 111, fast_hit_count: 0 */
      } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
      while (a[donjagranica][0] == a[donjagranica - 1][0]) { /* line 44 slow_hit_count: 780, fast_hit_count: 3 */
        donjagranica--; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
      donjagranica2 = donjagranica; /* line 47 slow_hit_count: 780, fast_hit_count: 3 */
      gornjagranica2 = gornjagranica; /* line 48 slow_hit_count: 780, fast_hit_count: 3 */
      while (donjagranica2 < gornjagranica2) { /* line 49 slow_hit_count: 1062, fast_hit_count: 3 */
        sredina2 = (donjagranica2 + gornjagranica2) / 2; /* line 50 slow_hit_count: 282, fast_hit_count: 0 */
        if (a[sredina2][1] >= g[1]) /* line 51 slow_hit_count: 282, fast_hit_count: 0 */
          gornjagranica2 = sredina2; /* line 52 slow_hit_count: 61, fast_hit_count: 0 */
        else /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
          donjagranica2 = sredina2 + 1; /* line 54 slow_hit_count: 221, fast_hit_count: 0 */
      } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      if ((a[donjagranica2][0] == g[0]) && (a[donjagranica2][1] == g[1])) br++; /* line 56 slow_hit_count: 780, fast_hit_count: 3 */
      gornjagranica = n - 1; /* line 57 slow_hit_count: 780, fast_hit_count: 3 */
      donjagranica = 0; /* line 58 slow_hit_count: 780, fast_hit_count: 3 */
    } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  cout << br; /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 61 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 62 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose why the program runs slowly for the slow input and derive performance-characterizing invariants, let's analyze the provided code and hit count data.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Comparison**:
   - **Line 9-10 (nested loops)**: These lines have a high hit count for the slow input (`41` and `820` respectively), indicating that the nested loops are being executed many times. The difference between the slow and fast input counts for line 10 suggests `O(n^2)` operations for sorting.
   - **Lines 34-39 (binary search loop)**: These lines have significantly higher hit counts during the slow run. Line 34 has `4720` hits, indicating a loop running multiple times for each pair of points.
   - **Lines 41-45 and 49-54**: These loops (for adjusting boundaries) also have high hit counts, particularly line 49 with `1062` hits for the slow input, contributing to the extra computational burden.

2. **Inference**:
   - The algorithm uses a nested loop to generate point pairs and then checks for a middle point using a kind of binary search or two-pointer technique. The performance issue arises from these nested loops and subsequent checks being executed extensively for the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the natural language performance invariants:

1. **Sorting and Search Invariant**:
   - When the dataset is large, the sorting and multiple checks for each pair of points (to see if a third point is the midpoint) result in quadratic complexity. Especially when n is close to the upper constraint (e.g., n approaching 3000), the computational cost is significant.

   Natural language description: "If the number of points `n` is large relative to the maximum constraint (close to 3000), the nested loop for sorting and midpoint checks may lead to slow performance due to quadratic complexity in iterating over pairs."

2. **Binary Search Invariant**:
   - The binary search or adjustment steps for determining boundaries (lines 34-45 and 49-54) contribute to the slowdown. These steps are repeatedly executed for each pair of points, causing excessive iterations.

   Natural language description: "If the point set is dense or contains many collinear points, causing frequent boundary adjustments during midpoint checks, the performance may degrade significantly due to excessive iterations in binary search loops."

3. **Collinearity Check Invariant**:
   - If many points are aligned in certain configurations (e.g., many collinear points), the loops for checking the middle point will iterate more, further increasing execution time.

   Natural language description: "If the input data contains a large number of collinear points or points that frequently form potential midpoints, the algorithm will spend excessive time validating midpoint conditions."

These conditions abstract the observed slow execution scenarios into patterns that trigger inefficient operations, focusing on the size of input and specific data configurations rather than specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given n points on a plane. All points are different.

Find the number of different groups of three points (A, B, C) such that point B is the middle of segment AC. 

The groups of three points are considered unordered, that is, if point B is the middle of segment AC, then groups (A, B, C) and (C, B, A) are considered the same.

Input

The first line contains a single integer n (3 ≤ n ≤ 3000) — the number of points. 

Next n lines contain the points. The i-th line contains coordinates of the i-th point: two space-separated integers xi, yi ( - 1000 ≤ xi, yi ≤ 1000).

It is guaranteed that all given points are different.

Output

Print the single number — the answer to the problem. 

Examples

Input

3
1 1
2 2
3 3


Output

1


Input

3
0 0
-1 0
0 1


Output

0

Solution (C++ code):
{solution}


assistant: Phase 3: Implement the Natural Language Invariants as C++ Checks

Based on the natural language invariants, here are the equivalent C++ code snippets for runtime checks:

1. **Sorting and Search Invariant**:
   ```cpp
   void check_large_data_invariant(int n) {
       if (n > 2500) { // Close to maximum constraint
           cerr << "Warning: Large data invariant triggered - potential quadratic complexity issues!" << endl;
           abort();
       }
   }
   ```

2. **Binary Search Invariant**:
   - This invariant checks if dense configurations cause excessive boundary adjustments.
   ```cpp
   void check_dense_point_invariant(int numberOfAdjustments) {
       if (numberOfAdjustments > 5000) { // Arbitrarily chosen threshold for excessive adjustments
           cerr << "Warning: Dense point invariant triggered - excessive boundary adjustments!" << endl;
           abort();
       }
   }
   ```

3. **Collinearity Check Invariant**:
   - This invariant checks for a large number of collinear points or potential midpoints.
   ```cpp
   void check_collinear_points_invariant(int potentialMidpoints) {
       if (potentialMidpoints > 1000) { // Arbitrarily chosen threshold for potential midpoint checks
           cerr << "Warning: Collinear points invariant triggered - too many midpoint checks!" << endl;
           abort();
       }
   }
   ```

Phase 4: Integrate Checkers into Original C++ Program

Here is the modified C++ program with the integrated runtime checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_large_data_invariant(int n) {
    if (n > 2500) { // Close to maximum constraint
        cerr << "Warning: Large data invariant triggered - potential quadratic complexity issues!" << endl;
        abort();
    }
}

void check_dense_point_invariant(int numberOfAdjustments) {
    if (numberOfAdjustments > 5000) { // Arbitrarily chosen threshold for excessive adjustments
        cerr << "Warning: Dense point invariant triggered - excessive boundary adjustments!" << endl;
        abort();
    }
}

void check_collinear_points_invariant(int potentialMidpoints) {
    if (potentialMidpoints > 1000) { // Arbitrarily chosen threshold for potential midpoint checks
        cerr << "Warning: Collinear points invariant triggered - too many midpoint checks!" << endl;
        abort();
    }
}

int main() {
    int n;
    cin >> n;
    check_large_data_invariant(n); // Check for large input size

    int a[n][2], br = 0;
    for (int i = 0; i < n; i++) cin >> a[i][0] >> a[i][1];

    int p[2];
    for (int i = 0; i < n; i++)
        for (int j = i + 1; j < n; j++) {
            if (a[j][0] < a[i][0]) {
                p[0] = a[i][0];
                p[1] = a[i][1];
                a[i][0] = a[j][0];
                a[i][1] = a[j][1];
                a[j][0] = p[0];
                a[j][1] = p[1];
            } else if ((a[j][0] == a[i][0]) && (a[j][1] < a[i][1])) {
                p[0] = a[i][0];
                p[1] = a[i][1];
                a[i][0] = a[j][0];
                a[i][1] = a[j][1];
                a[j][0] = p[0];
                a[j][1] = p[1];
            }
        }

    int donjagranica = 0, gornjagranica = n - 1, sredina;
    int donjagranica2, gornjagranica2, sredina2;
    double g[2];
    for (int i = 0; i < n; i++)
        for (int j = i + 1; j < n; j++) {
            g[0] = (a[i][0] + a[j][0]) / 2.0;
            g[1] = (a[i][1] + a[j][1]) / 2.0;

            int adjustmentCounter = 0; // Counter for boundary adjustments
            while (a[donjagranica][0] != a[gornjagranica][0]) {
                sredina = (donjagranica + gornjagranica) / 2;
                if (a[sredina][0] >= g[0])
                    gornjagranica = sredina;
                else
                    donjagranica = sredina + 1;
                adjustmentCounter++;
            }
            check_dense_point_invariant(adjustmentCounter); // Check for dense points

            while (a[gornjagranica][0] == a[gornjagranica + 1][0]) {
                gornjagranica++;
            }
            while (a[donjagranica][0] == a[donjagranica - 1][0]) {
                donjagranica--;
            }
            donjagranica2 = donjagranica;
            gornjagranica2 = gornjagranica;

            int midpointCounter = 0; // Counter for potential midpoints
            while (donjagranica2 < gornjagranica2) {
                sredina2 = (donjagranica2 + gornjagranica2) / 2;
                if (a[sredina2][1] >= g[1])
                    gornjagranica2 = sredina2;
                else
                    donjagranica2 = sredina2 + 1;
                midpointCounter++;
            }
            check_collinear_points_invariant(midpointCounter); // Check for collinear points

            if ((a[donjagranica2][0] == g[0]) && (a[donjagranica2][1] == g[1])) 
                br++;
            gornjagranica = n - 1;
            donjagranica = 0;
        }
    cout << br;
    return 0;
}
```

### Explanation of Inserted Checks

- **Large Data Check**: Positioned right after input to catch scenarios where `n` is close to its maximum value, triggering potentially excessive operations.
- **Dense Point Check**: Counts boundary adjustments in the midpoint search and checks if they exceed a reasonable threshold, indicating high point density.
- **Collinear Points Check**: Counts checks for potential midpoints and ensures they do not exceed a threshold that would signify excessive work due to configurations like collinearity. 

These runtime checks provide early warnings about scenarios that might lead to performance bottlenecks, assisting in identifying and mitigating issues during testing or fuzzing.

