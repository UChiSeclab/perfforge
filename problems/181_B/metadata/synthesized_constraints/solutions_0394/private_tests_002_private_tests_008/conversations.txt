system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given n points on a plane. All points are different.

Find the number of different groups of three points (A, B, C) such that point B is the middle of segment AC. 

The groups of three points are considered unordered, that is, if point B is the middle of segment AC, then groups (A, B, C) and (C, B, A) are considered the same.

Input

The first line contains a single integer n (3 ≤ n ≤ 3000) — the number of points. 

Next n lines contain the points. The i-th line contains coordinates of the i-th point: two space-separated integers xi, yi ( - 1000 ≤ xi, yi ≤ 1000).

It is guaranteed that all given points are different.

Output

Print the single number — the answer to the problem. 

Examples

Input

3
1 1
2 2
3 3


Output

1


Input

3
0 0
-1 0
0 1


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  long long n, i, j;
  cin >> n;
  vector<pair<double, double> > v(n);
  map<pair<double, double>, long long> mp;
  for (i = 0; i < n; i++) {
    double a, b;
    cin >> a >> b;
    mp[{a, b}] = i;
    v[i] = {a, b};
  }
  long long ans = 0;
  for (i = 0; i < n; i++) {
    for (j = i + 1; j < n; j++) {
      double a = (v[i].first + v[j].first) / 2.0;
      double b = (v[i].second + v[j].second) / 2.0;
      if (mp.find({a, b}) != mp.end()) {
        long long c = mp[{a, b}];
        if (c != i && c != j) ans++;
      }
    }
  }
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

40
-8 24
2 -1
1 -18
72 -70
5 -4
-308 436
-19 40
36 -35
-178 265
-1 2
-7 30
-1 0
3 -2
200 -285
17 -16
-35 74
0 -4
-86 106
-1 4
-7 6
0 1
-5 4
-2 3
6 -5
-4 5
181 -262
76 -118
0 0
-7 18
-58 104
-5 6
-6 12
-3 4
1 0
11 -10
-86 130
-3 6
153 -236
-183 270
-33 64


(G.2) Fast Input

3
0 0
0 -1
0 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, i, j; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<double, double> > v(n); /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  map<pair<double, double>, long long> mp; /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  for (i = 0; i < n; i++) { /* line 8 slow_hit_count: 41, fast_hit_count: 4 */
    double a, b; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a >> b; /* line 10 slow_hit_count: 40, fast_hit_count: 3 */
    mp[{a, b}] = i; /* line 11 slow_hit_count: 40, fast_hit_count: 3 */
    v[i] = {a, b}; /* line 12 slow_hit_count: 40, fast_hit_count: 3 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) { /* line 15 slow_hit_count: 41, fast_hit_count: 4 */
    for (j = i + 1; j < n; j++) { /* line 16 slow_hit_count: 820, fast_hit_count: 6 */
      double a = (v[i].first + v[j].first) / 2.0; /* line 17 slow_hit_count: 780, fast_hit_count: 3 */
      double b = (v[i].second + v[j].second) / 2.0; /* line 18 slow_hit_count: 780, fast_hit_count: 3 */
      if (mp.find({a, b}) != mp.end()) { /* line 19 slow_hit_count: 780, fast_hit_count: 3 */
        long long c = mp[{a, b}]; /* line 20 slow_hit_count: 57, fast_hit_count: 1 */
        if (c != i && c != j) ans++; /* line 21 slow_hit_count: 57, fast_hit_count: 1 */
      } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 26 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the given C program and derive performance-characterizing invariants, let's proceed through the phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - **Outer Loop (Lines 15-23):** The outer loop (line 15) runs `n` times, and the inner loop (line 16) runs approximately `n/2` times for each iteration of the outer loop. This results in a quadratic number of iterations, which is a key factor in performance differences.
   - **Midpoint Calculation and Lookup (Lines 17-19):** For each pair of points `(i, j)`, the code calculates the midpoint `(a, b)` and checks if it exists in the map `mp` (lines 17-19). This is executed frequently and contributes significantly to the slowdown, especially with larger `n`.
   - **Conditional Check and Update (Lines 20-21):** The condition and increment operations (lines 20-21) are hit less often but are crucial when they occur.

2. **Pinpointing Lines with More Hits on Slow Input:**
   - **Lines 15, 16:** Both loop lines are hit 41 and 820 times, respectively, in the slow input, compared to 4 and 6 times in the fast input. This reflects the `O(n^2)` complexity.
   - **Lines 17-19:** These calculations and lookups are also hit quite frequently, with 780 hits in the slow input compared to 3 hits in the fast input.

3. **Inference on Data Structures and Execution:**
   - The quadratic nature of the loops directly relates to the size of input `n`. The midpoint calculations and map lookups can become costly as `n` increases, especially if many midpoints match points in the input list.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

Based on the analysis of code behavior and hit counts, we can derive the following invariants:

1. **Nested Loop Complexity:**
   - **Natural Language Invariant:** "As the number of points `n` increases towards its upper limit, the nested loop structure leads to quadratic growth in computations, potentially causing significant slowdowns when `n` is large."
   - **Condition:** The loop structure effectively performs `O(n^2)` operations, which becomes a bottleneck especially as `n` approaches 3000.

2. **Midpoint Calculation and Lookup:**
   - **Natural Language Invariant:** "When many pairs of points have integer-coordinate midpoints that match other points, frequent map lookups can degrade performance significantly."
   - **Condition:** The map's operation becomes costly, especially when the number of potential midpoints to check is high and aligns with actual points.

3. **Frequent Map Access:**
   - **Natural Language Invariant:** "If the density of points allows for many pairwise midpoint mappings to existing points, repeated access and potential contention in the map can lead to performance degradation."
   - **Condition:** The efficiency of the map lookup is crucial, and excessive access patterns can bottle-neck execution, particularly at high values of `n`.

These invariants focus on the core performance risks associated with the algorithm's logic and input conditions without specifying exact input values, thus making them applicable to a broad set of potential scenarios. They align with the problem constraints and help foresee potential performance bottlenecks as `n` increases.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given n points on a plane. All points are different.

Find the number of different groups of three points (A, B, C) such that point B is the middle of segment AC. 

The groups of three points are considered unordered, that is, if point B is the middle of segment AC, then groups (A, B, C) and (C, B, A) are considered the same.

Input

The first line contains a single integer n (3 ≤ n ≤ 3000) — the number of points. 

Next n lines contain the points. The i-th line contains coordinates of the i-th point: two space-separated integers xi, yi ( - 1000 ≤ xi, yi ≤ 1000).

It is guaranteed that all given points are different.

Output

Print the single number — the answer to the problem. 

Examples

Input

3
1 1
2 2
3 3


Output

1


Input

3
0 0
-1 0
0 1


Output

0

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, we'll create C++ functions that check those conditions at runtime.

#### Invariant 1: Nested Loop Complexity
```cpp
void check_nested_loop_invariant(long long n) {
    // This checker will warn if n is near the upper limit, causing a potential O(n^2) bottleneck
    if (n > 2500) { // A threshold chosen to be close to the maximum but not too conservative
        cerr << "Warning: nested_loop_invariant triggered - potential O(n^2) performance bottleneck" << endl;
        abort();
    }
}
```

#### Invariant 2: Midpoint Calculation and Lookup
```cpp
void check_midpoint_lookup_invariant(long long potentialMidpoints, long long n) {
    // Warn if the number of potential midpoints is very high relative to the number of points
    if (potentialMidpoints > n * (n - 1) / 4) { // A heuristic threshold for excessive midpoint checks
        cerr << "Warning: midpoint_lookup_invariant triggered - excessive midpoints being checked" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now we will integrate these checks effectively into the existing C++ program, ensuring they don't add overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for nested loop complexity
void check_nested_loop_invariant(long long n) {
    if (n > 2500) {
        cerr << "Warning: nested_loop_invariant triggered - potential O(n^2) performance bottleneck" << endl;
        abort();
    }
}

// Checker for midpoint calculation and lookup
void check_midpoint_lookup_invariant(long long potentialMidpoints, long long n) {
    if (potentialMidpoints > n * (n - 1) / 4) {
        cerr << "Warning: midpoint_lookup_invariant triggered - excessive midpoints being checked" << endl;
        abort();
    }
}

int main() {
    long long n, i, j;
    cin >> n;

    // Check for potential performance bottlenecks based on input size
    check_nested_loop_invariant(n);

    vector<pair<double, double>> v(n);
    map<pair<double, double>, long long> mp;
    for (i = 0; i < n; i++) {
        double a, b;
        cin >> a >> b;
        mp[{a, b}] = i;
        v[i] = {a, b};
    }

    long long ans = 0;
    long long potentialMidpoints = 0;

    for (i = 0; i < n; i++) {
        for (j = i + 1; j < n; j++) {
            double a = (v[i].first + v[j].first) / 2.0;
            double b = (v[i].second + v[j].second) / 2.0;
            potentialMidpoints++;
            if (mp.find({a, b}) != mp.end()) {
                long long c = mp[{a, b}];
                if (c != i && c != j) ans++;
            }
        }
    }

    // Check for excessive midpoint calculations
    check_midpoint_lookup_invariant(potentialMidpoints, n);

    cout << ans;
    return 0;
}
```

### Explanation:
- **`check_nested_loop_invariant`:** This function checks if `n` is dangerously high, suggesting potential quadratic complexity issues.
- **`check_midpoint_lookup_invariant`:** This function checks if the number of potential midpoint computations is very large relative to the number of points, indicating possible performance degradation.
- **Placement of Checks:** The `check_nested_loop_invariant` is placed immediately after reading `n` to catch any input that might lead to performance concerns. The `check_midpoint_lookup_invariant` is called after the nested loops to assess the extent of midpoint calculations, ensuring the check is not within the loop body itself to avoid further performance overhead.

