system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given n points on a plane. All points are different.

Find the number of different groups of three points (A, B, C) such that point B is the middle of segment AC. 

The groups of three points are considered unordered, that is, if point B is the middle of segment AC, then groups (A, B, C) and (C, B, A) are considered the same.

Input

The first line contains a single integer n (3 ≤ n ≤ 3000) — the number of points. 

Next n lines contain the points. The i-th line contains coordinates of the i-th point: two space-separated integers xi, yi ( - 1000 ≤ xi, yi ≤ 1000).

It is guaranteed that all given points are different.

Output

Print the single number — the answer to the problem. 

Examples

Input

3
1 1
2 2
3 3


Output

1


Input

3
0 0
-1 0
0 1


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
pair<double, double> middle(pair<double, double> a, pair<double, double> b) {
  return make_pair((a.first + b.first) / 2, (b.second + a.second) / 2);
}
signed main() {
  long long n;
  cin >> n;
  vector<pair<double, double> > v(n);
  set<pair<double, double> > points;
  for (long long i = 0; i < n; i++)
    cin >> v[i].first >> v[i].second, points.insert(v[i]);
  long long res = 0;
  for (long long i = 0; i < n; i++) {
    for (long long j = i + 1; j < n; j++) {
      res += points.count(middle(v[i], v[j]));
    }
  }
  cout << res << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

40
-8 24
2 -1
1 -18
72 -70
5 -4
-308 436
-19 40
36 -35
-178 265
-1 2
-7 30
-1 0
3 -2
200 -285
17 -16
-35 74
0 -4
-86 106
-1 4
-7 6
0 1
-5 4
-2 3
6 -5
-4 5
181 -262
76 -118
0 0
-7 18
-58 104
-5 6
-6 12
-3 4
1 0
11 -10
-86 130
-3 6
153 -236
-183 270
-43 64


(G.2) Fast Input

3
1 0
0 -1
0 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
pair<double, double> middle(pair<double, double> a, pair<double, double> b) { /* line 3 slow_hit_count: 780, fast_hit_count: 3 */
  return make_pair((a.first + b.first) / 2, (b.second + a.second) / 2); /* line 4 slow_hit_count: 1560, fast_hit_count: 6 */
} /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  long long n; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<double, double> > v(n); /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
  set<pair<double, double> > points; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) /* line 11 slow_hit_count: 41, fast_hit_count: 4 */
    cin >> v[i].first >> v[i].second, points.insert(v[i]); /* line 12 slow_hit_count: 40, fast_hit_count: 3 */
  long long res = 0; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) { /* line 14 slow_hit_count: 41, fast_hit_count: 4 */
    for (long long j = i + 1; j < n; j++) { /* line 15 slow_hit_count: 820, fast_hit_count: 6 */
      res += points.count(middle(v[i], v[j])); /* line 16 slow_hit_count: 780, fast_hit_count: 3 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  cout << res << endl; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts**:
   - The `middle` function (lines 3-4) is called 780 times in the slow input, compared to just 3 times in the fast input. This is a significant difference.
   - The nested loop in the `main` function (lines 14-16) executes 820 times for the slow input and only 6 times for the fast input.

2. **Identification of High Frequency Lines**:
   - Line 16 (`res += points.count(middle(v[i], v[j]));`) is linked to both the `middle` function call and the `points.count` operation. This line is executed 780 times in the slow input, indicating that it is a performance bottleneck.

3. **Analysis of Data Structure Interaction**:
   - The `points` set is used to count the middle point. If the resulting middle point from every pair (i, j) is checked in the set, this can be costly, especially as the number of pairs grows with `n`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: High Pair Combinations**:
   - **Natural Language**: "The program may slow down when the number of point pairs (i, j) to evaluate is large, especially near the maximum input size, as this leads to excessive computation in nested loops."
   - **Explanation**: The nested loops iterate over pairs of points, and the operations within (like checking for the middle point) become expensive when `n` is large.

2. **Invariant 2: Frequent Middle Point Checks**:
   - **Natural Language**: "Performance degradation is likely if the middle point between pairs of points frequently results in valid points from the set, requiring many costly checks and additions."
   - **Explanation**: When many pairs of points have a middle point that is also a defined point from the input, it results in repeated costly checks in the set.

3. **Invariant 3: Input Distribution Complexity**:
   - **Natural Language**: "When the input points are positioned such that many pairs of points can form a valid middle point, the computation becomes more intensive, especially as `n` increases."
   - **Explanation**: Certain configurations of input points may naturally lead to more valid middle points, exacerbating the count operation tasks.

### Summary

These invariants recognize that the primary issue arises from the quadratic growth of pair combinations as `n` increases (up to 3000), leading to exponential growth in the number of times computationally expensive operations are executed. Furthermore, configurations of input points that yield many valid middle points within the set can exacerbate the situation. To mitigate this, algorithmic optimizations would need to focus on reducing unnecessary checks or employing more efficient data structures.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given n points on a plane. All points are different.

Find the number of different groups of three points (A, B, C) such that point B is the middle of segment AC. 

The groups of three points are considered unordered, that is, if point B is the middle of segment AC, then groups (A, B, C) and (C, B, A) are considered the same.

Input

The first line contains a single integer n (3 ≤ n ≤ 3000) — the number of points. 

Next n lines contain the points. The i-th line contains coordinates of the i-th point: two space-separated integers xi, yi ( - 1000 ≤ xi, yi ≤ 1000).

It is guaranteed that all given points are different.

Output

Print the single number — the answer to the problem. 

Examples

Input

3
1 1
2 2
3 3


Output

1


Input

3
0 0
-1 0
0 1


Output

0

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Below are the C++ code snippets that check the conditions identified in the natural language invariants during Phase 2:

```cpp
// Check if the number of point pairs is large, potentially leading to excessive computation.
void check_pair_combinations_invariant(long long n) {
    // The threshold is set arbitrarily close to the maximum input size.
    if ((n * (n - 1)) / 2 > 4000000) { // n choose 2, with n near maximum.
        cerr << "Warning: pair_combinations_invariant triggered - excessive point pair evaluations!" << endl;
        abort();
    }
}

// Check if there are frequent middle point checks that can degrade performance.
void check_middle_point_invariant(long long middlePointChecks) {
    // Assume a threshold for middle points checks that indicates potential performance issues.
    if (middlePointChecks > 1000000) {
        cerr << "Warning: middle_point_invariant triggered - frequent valid middle point checks!" << endl;
        abort();
    }
}

// Check if input distribution complexity can lead to intensive computation.
void check_input_distribution_invariant(long long validMiddlePoints) {
    // Threshold for valid middle point checks.
    if (validMiddlePoints > 100000) {
        cerr << "Warning: input_distribution_invariant triggered - complex input distribution!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Below is the instrumented C++ code, incorporating the checker functions to effectively detect the identified bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;

pair<double, double> middle(pair<double, double> a, pair<double, double> b) {
  return make_pair((a.first + b.first) / 2, (b.second + a.second) / 2);
}

// Check if the number of point pairs is large, potentially leading to excessive computation.
void check_pair_combinations_invariant(long long n) {
    // The threshold is set arbitrarily close to the maximum input size.
    if ((n * (n - 1)) / 2 > 4000000) { // n choose 2, with n near maximum.
        cerr << "Warning: pair_combinations_invariant triggered - excessive point pair evaluations!" << endl;
        abort();
    }
}

// Check if there are frequent middle point checks that can degrade performance.
void check_middle_point_invariant(long long middlePointChecks) {
    // Assume a threshold for middle points checks that indicates potential performance issues.
    if (middlePointChecks > 1000000) {
        cerr << "Warning: middle_point_invariant triggered - frequent valid middle point checks!" << endl;
        abort();
    }
}

// Check if input distribution complexity can lead to intensive computation.
void check_input_distribution_invariant(long long validMiddlePoints) {
    // Threshold for valid middle point checks.
    if (validMiddlePoints > 100000) {
        cerr << "Warning: input_distribution_invariant triggered - complex input distribution!" << endl;
        abort();
    }
}

signed main() {
  long long n;
  cin >> n;
  
  // Insert the check for pair combinations invariant right after reading n
  check_pair_combinations_invariant(n);
  
  vector<pair<double, double> > v(n);
  set<pair<double, double> > points;
  for (long long i = 0; i < n; i++)
    cin >> v[i].first >> v[i].second, points.insert(v[i]);
  
  long long res = 0;
  long long middlePointChecks = 0; // Count the number of middle point checks
  long long validMiddlePoints = 0; // Count the number of valid middle points

  for (long long i = 0; i < n; i++) {
    for (long long j = i + 1; j < n; j++) {
      middlePointChecks++;
      if (points.count(middle(v[i], v[j]))) {
        res++;
        validMiddlePoints++;
      }
    }
  }
  
  // Check for the middle point invariant after processing all pairs
  check_middle_point_invariant(middlePointChecks);
  check_input_distribution_invariant(validMiddlePoints);
  
  cout << res << endl;
  return 0;
}
```

### Explanation

- **Pair Combinations Invariant**: The check is placed right after reading `n`, as it depends on the number of possible pairs, which is calculated using the formula for combinations.
- **Middle Point Checks**: The count for middle point checks is tracked during the nested loop, and the check is performed after the loop to ensure it doesn't disrupt performance.
- **Valid Middle Points**: Similarly, valid middle points are counted and checked after processing, allowing the program to detect configurations that result in frequent hits.

This implementation provides a mechanism to detect potential performance bottlenecks, helping improve the understanding and optimization of the program's execution.

