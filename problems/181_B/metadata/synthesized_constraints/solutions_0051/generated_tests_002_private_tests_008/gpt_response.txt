=== Invariants Response ===
### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the hit counts for the provided code, the following observations can be made:

1. **High Hit Count in Inner Loop**: The inner loop (`line 13`) is executed significantly more times for the slow input than for the fast input. Specifically, the slow hit count is 819 compared to 5 for the fast input. This indicates the nested loops are the primary source of increased execution time.

2. **Frequent Computation and Set Lookup**: Lines 14 through 18 are executed 780 times for the slow input compared to only 3 times for the fast input. This section of code performs calculations to find the midpoint of segments and checks for existence in a set. Each operation inside this loop is potentially contributing to the slowdown due to repeated execution.

3. **Quadratic Execution Pattern**: The loop structure suggests an O(n^2) time complexity, which becomes expensive as n increases, even though n is capped at 3000. The slow input likely triggers this complexity, leading to the observed performance difference.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, here are the performance-characterizing invariants in natural language:

1. **Invariant 1**: "When the number of points `n` is close to the upper constraint, the pairwise combination check across points leads to a quadratic number of operations. This significantly increases execution time due to the nested loop structure."

2. **Invariant 2**: "The program executes slowly when a high number of midpoints must be calculated and checked for existence in a set. This occurs when the arrangement of points results in frequent midpoint checks, thus increasing computational load."

3. **Invariant 3**: "If the data structure used for storing points requires frequent lookups and recalculations within a nested loop, performance degrades. This is particularly noticeable when the input density or distribution leads to many candidate checks for each point."

4. **Invariant 4**: "The performance bottleneck is triggered when the calculated midpoints of point pairs frequently occur within the provided points set. This implies that a dense distribution of points along lines or specific geometric configurations can stress the algorithm."

These invariants avoid using specific numeric values from the slow input and are designed to capture a broad range of scenarios that could lead to slow execution, especially as `n` approaches its maximum constraint.

=== Checker Response ===
### Phase 3: Implement the Natural Language Invariants in C++

Let's translate the performance-characterizing invariants identified earlier into C++ checkers:

#### Invariant 1
**Natural Language Description**: "When the number of points `n` is close to the upper constraint, the pairwise combination check across points leads to a quadratic number of operations. This significantly increases execution time due to the nested loop structure."

**C++ Code**:
```cpp
void check_size_invariant(int n) {
    if (n > 2500) {  // Setting a threshold close to the upper limit of 3000
        cerr << "Warning: Performance bottleneck condition triggered - n is large, leading to quadratic operations." << endl;
        abort();
    }
}
```

#### Invariant 2
**Natural Language Description**: "The program executes slowly when a high number of midpoints must be calculated and checked for existence in a set."

**C++ Code**:
```cpp
void check_midpoints_invariant(int midpoint_checks, int threshold) {
    if (midpoint_checks > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many midpoint checks." << endl;
        abort();
    }
}
```

#### Invariant 3
**Natural Language Description**: "If the data structure used for storing points requires frequent lookups and recalculations within a nested loop, performance degrades."

**C++ Code**:
```cpp
void check_lookup_invariant(int lookup_count, int threshold) {
    if (lookup_count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent set lookups." << endl;
        abort();
    }
}
```

#### Invariant 4
**Natural Language Description**: "The performance bottleneck is triggered when the calculated midpoints of point pairs frequently occur within the provided points set."

**C++ Code**:
```cpp
void check_geometric_configuration_invariant(int configuration_count, int threshold) {
    if (configuration_count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - unfavorable geometric configuration." << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Original Program

Now, let's integrate these checks into the C++ program. We'll place the checks at suitable points in the control flow to avoid unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance invariants
void check_size_invariant(int n) {
    if (n > 2500) {
        cerr << "Warning: Performance bottleneck condition triggered - n is large, leading to quadratic operations." << endl;
        abort();
    }
}

void check_midpoints_invariant(int midpoint_checks, int threshold) {
    if (midpoint_checks > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many midpoint checks." << endl;
        abort();
    }
}

void check_lookup_invariant(int lookup_count, int threshold) {
    if (lookup_count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent set lookups." << endl;
        abort();
    }
}

void check_geometric_configuration_invariant(int configuration_count, int threshold) {
    if (configuration_count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - unfavorable geometric configuration." << endl;
        abort();
    }
}

int main() {
    double n, m, i, s = 0, d = 0, h, j;

    // Read the number of points
    cin >> n;
    
    // Check size invariant
    check_size_invariant(n);
    
    vector<vector<double>> b(n, vector<double>(2));
    set<pair<double, double>> a;
    for (i = 0; i < n; i++) {
        cin >> b[i][0] >> b[i][1];
        a.insert(make_pair(b[i][0], b[i][1]));
    }

    // Accumulators for checking performance characteristics
    int midpoint_checks = 0;
    int lookup_count = 0;
    int configuration_count = 0;
    const int threshold = 100000; // Example threshold for the checks

    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            d = b[i][0] + b[j][0];
            d /= 2;
            h = b[i][1] + b[j][1];
            h /= 2;
            
            midpoint_checks++;
            if (a.find(make_pair(d, h)) != a.end()) {
                s++;
                lookup_count++;
            }
        }
    }

    // Check performance invariants based on accumulators
    check_midpoints_invariant(midpoint_checks, threshold);
    check_lookup_invariant(lookup_count, threshold);
    check_geometric_configuration_invariant(configuration_count, threshold);
    
    cout << s << endl;
}
```

### Explanation

- **Size Check**: We check the size `n` after reading it, before any heavy computation, to ensure we're not performing excessive operations.
- **Midpoint and Lookup Checks**: We count the number of midpoint checks and set lookups, and evaluate these after the loops, providing a threshold to detect when these operations become excessive.
- **Geometric Configuration Check**: This invariant is conceptual; since configuration-specific checks are harder to quantify without concrete metrics, we use a placeholder approach here, but the infrastructure supports such integration.

These checks will help identify when the code might enter a slow path due to performance bottlenecks.
