system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given n points on a plane. All points are different.

Find the number of different groups of three points (A, B, C) such that point B is the middle of segment AC. 

The groups of three points are considered unordered, that is, if point B is the middle of segment AC, then groups (A, B, C) and (C, B, A) are considered the same.

Input

The first line contains a single integer n (3 ≤ n ≤ 3000) — the number of points. 

Next n lines contain the points. The i-th line contains coordinates of the i-th point: two space-separated integers xi, yi ( - 1000 ≤ xi, yi ≤ 1000).

It is guaranteed that all given points are different.

Output

Print the single number — the answer to the problem. 

Examples

Input

3
1 1
2 2
3 3


Output

1


Input

3
0 0
-1 0
0 1


Output

0

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  double n, m, i, s = 0, d = 0, h, j;
  cin >> n;
  vector<vector<double>> b(n, vector<double>(2));
  set<pair<double, double>> a;
  for (i = 0; i < n; i++) {
    cin >> b[i][0] >> b[i][1];
    a.insert(make_pair(b[i][0], b[i][1]));
  }
  for (i = 0; i < n - 1; i++)
    for (j = i + 1; j < n; j++) {
      d = b[i][0] + b[j][0];
      d /= 2;
      h = b[i][1] + b[j][1];
      h /= 2;
      if (a.find(make_pair(d, h)) != a.end()) s++;
    }
  cout << s << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

40
-8 24
2 -1
1 -18
72 -70
5 -4
-308 436
-19 40
36 -35
-178 265
-1 2
-7 30
-1 0
3 -2
200 -285
17 -16
-35 74
0 -4
-86 106
-1 4
-7 6
0 1
-5 4
-2 3
6 -5
-4 5
181 -262
76 -118
0 0
-7 18
-58 104
-5 6
-6 12
-3 4
1 0
11 -10
-86 130
-3 6
153 -236
-183 270
-43 64


(G.2) Fast Input

3
0 0
0 -1
0 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  double n, m, i, s = 0, d = 0, h, j; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vector<double>> b(n, vector<double>(2)); /* line 6 slow_hit_count: 3, fast_hit_count: 3 */
  set<pair<double, double>> a; /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  for (i = 0; i < n; i++) { /* line 8 slow_hit_count: 41, fast_hit_count: 4 */
    cin >> b[i][0] >> b[i][1]; /* line 9 slow_hit_count: 40, fast_hit_count: 3 */
    a.insert(make_pair(b[i][0], b[i][1])); /* line 10 slow_hit_count: 40, fast_hit_count: 3 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < n - 1; i++) /* line 12 slow_hit_count: 40, fast_hit_count: 3 */
    for (j = i + 1; j < n; j++) { /* line 13 slow_hit_count: 819, fast_hit_count: 5 */
      d = b[i][0] + b[j][0]; /* line 14 slow_hit_count: 780, fast_hit_count: 3 */
      d /= 2; /* line 15 slow_hit_count: 780, fast_hit_count: 3 */
      h = b[i][1] + b[j][1]; /* line 16 slow_hit_count: 780, fast_hit_count: 3 */
      h /= 2; /* line 17 slow_hit_count: 780, fast_hit_count: 3 */
      if (a.find(make_pair(d, h)) != a.end()) s++; /* line 18 slow_hit_count: 780, fast_hit_count: 3 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  cout << s << endl; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 21 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the hit counts for the provided code, the following observations can be made:

1. **High Hit Count in Inner Loop**: The inner loop (`line 13`) is executed significantly more times for the slow input than for the fast input. Specifically, the slow hit count is 819 compared to 5 for the fast input. This indicates the nested loops are the primary source of increased execution time.

2. **Frequent Computation and Set Lookup**: Lines 14 through 18 are executed 780 times for the slow input compared to only 3 times for the fast input. This section of code performs calculations to find the midpoint of segments and checks for existence in a set. Each operation inside this loop is potentially contributing to the slowdown due to repeated execution.

3. **Quadratic Execution Pattern**: The loop structure suggests an O(n^2) time complexity, which becomes expensive as n increases, even though n is capped at 3000. The slow input likely triggers this complexity, leading to the observed performance difference.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, here are the performance-characterizing invariants in natural language:

1. **Invariant 1**: "When the number of points `n` is close to the upper constraint, the pairwise combination check across points leads to a quadratic number of operations. This significantly increases execution time due to the nested loop structure."

2. **Invariant 2**: "The program executes slowly when a high number of midpoints must be calculated and checked for existence in a set. This occurs when the arrangement of points results in frequent midpoint checks, thus increasing computational load."

3. **Invariant 3**: "If the data structure used for storing points requires frequent lookups and recalculations within a nested loop, performance degrades. This is particularly noticeable when the input density or distribution leads to many candidate checks for each point."

4. **Invariant 4**: "The performance bottleneck is triggered when the calculated midpoints of point pairs frequently occur within the provided points set. This implies that a dense distribution of points along lines or specific geometric configurations can stress the algorithm."

These invariants avoid using specific numeric values from the slow input and are designed to capture a broad range of scenarios that could lead to slow execution, especially as `n` approaches its maximum constraint.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given n points on a plane. All points are different.

Find the number of different groups of three points (A, B, C) such that point B is the middle of segment AC. 

The groups of three points are considered unordered, that is, if point B is the middle of segment AC, then groups (A, B, C) and (C, B, A) are considered the same.

Input

The first line contains a single integer n (3 ≤ n ≤ 3000) — the number of points. 

Next n lines contain the points. The i-th line contains coordinates of the i-th point: two space-separated integers xi, yi ( - 1000 ≤ xi, yi ≤ 1000).

It is guaranteed that all given points are different.

Output

Print the single number — the answer to the problem. 

Examples

Input

3
1 1
2 2
3 3


Output

1


Input

3
0 0
-1 0
0 1


Output

0

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's translate the performance-characterizing invariants identified earlier into C++ checkers:

#### Invariant 1
**Natural Language Description**: "When the number of points `n` is close to the upper constraint, the pairwise combination check across points leads to a quadratic number of operations. This significantly increases execution time due to the nested loop structure."

**C++ Code**:
```cpp
void check_size_invariant(int n) {
    if (n > 2500) {  // Setting a threshold close to the upper limit of 3000
        cerr << "Warning: Performance bottleneck condition triggered - n is large, leading to quadratic operations." << endl;
        abort();
    }
}
```

#### Invariant 2
**Natural Language Description**: "The program executes slowly when a high number of midpoints must be calculated and checked for existence in a set."

**C++ Code**:
```cpp
void check_midpoints_invariant(int midpoint_checks, int threshold) {
    if (midpoint_checks > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many midpoint checks." << endl;
        abort();
    }
}
```

#### Invariant 3
**Natural Language Description**: "If the data structure used for storing points requires frequent lookups and recalculations within a nested loop, performance degrades."

**C++ Code**:
```cpp
void check_lookup_invariant(int lookup_count, int threshold) {
    if (lookup_count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent set lookups." << endl;
        abort();
    }
}
```

#### Invariant 4
**Natural Language Description**: "The performance bottleneck is triggered when the calculated midpoints of point pairs frequently occur within the provided points set."

**C++ Code**:
```cpp
void check_geometric_configuration_invariant(int configuration_count, int threshold) {
    if (configuration_count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - unfavorable geometric configuration." << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Original Program

Now, let's integrate these checks into the C++ program. We'll place the checks at suitable points in the control flow to avoid unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance invariants
void check_size_invariant(int n) {
    if (n > 2500) {
        cerr << "Warning: Performance bottleneck condition triggered - n is large, leading to quadratic operations." << endl;
        abort();
    }
}

void check_midpoints_invariant(int midpoint_checks, int threshold) {
    if (midpoint_checks > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many midpoint checks." << endl;
        abort();
    }
}

void check_lookup_invariant(int lookup_count, int threshold) {
    if (lookup_count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent set lookups." << endl;
        abort();
    }
}

void check_geometric_configuration_invariant(int configuration_count, int threshold) {
    if (configuration_count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - unfavorable geometric configuration." << endl;
        abort();
    }
}

int main() {
    double n, m, i, s = 0, d = 0, h, j;

    // Read the number of points
    cin >> n;
    
    // Check size invariant
    check_size_invariant(n);
    
    vector<vector<double>> b(n, vector<double>(2));
    set<pair<double, double>> a;
    for (i = 0; i < n; i++) {
        cin >> b[i][0] >> b[i][1];
        a.insert(make_pair(b[i][0], b[i][1]));
    }

    // Accumulators for checking performance characteristics
    int midpoint_checks = 0;
    int lookup_count = 0;
    int configuration_count = 0;
    const int threshold = 100000; // Example threshold for the checks

    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            d = b[i][0] + b[j][0];
            d /= 2;
            h = b[i][1] + b[j][1];
            h /= 2;
            
            midpoint_checks++;
            if (a.find(make_pair(d, h)) != a.end()) {
                s++;
                lookup_count++;
            }
        }
    }

    // Check performance invariants based on accumulators
    check_midpoints_invariant(midpoint_checks, threshold);
    check_lookup_invariant(lookup_count, threshold);
    check_geometric_configuration_invariant(configuration_count, threshold);
    
    cout << s << endl;
}
```

### Explanation

- **Size Check**: We check the size `n` after reading it, before any heavy computation, to ensure we're not performing excessive operations.
- **Midpoint and Lookup Checks**: We count the number of midpoint checks and set lookups, and evaluate these after the loops, providing a threshold to detect when these operations become excessive.
- **Geometric Configuration Check**: This invariant is conceptual; since configuration-specific checks are harder to quantify without concrete metrics, we use a placeholder approach here, but the infrastructure supports such integration.

These checks will help identify when the code might enter a slow path due to performance bottlenecks.

