system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Someone give a strange birthday present to Ivan. It is hedgehog — connected undirected graph in which one vertex has degree at least 3 (we will call it center) and all other vertices has degree 1. Ivan thought that hedgehog is too boring and decided to make himself k-multihedgehog.

Let us define k-multihedgehog as follows:

  * 1-multihedgehog is hedgehog: it has one vertex of degree at least 3 and some vertices of degree 1.
  * For all k ≥ 2, k-multihedgehog is (k-1)-multihedgehog in which the following changes has been made for each vertex v with degree 1: let u be its only neighbor; remove vertex v, create a new hedgehog with center at vertex w and connect vertices u and w with an edge. New hedgehogs can differ from each other and the initial gift. 



Thereby k-multihedgehog is a tree. Ivan made k-multihedgehog but he is not sure that he did not make any mistakes. That is why he asked you to check if his tree is indeed k-multihedgehog.

Input

First line of input contains 2 integers n, k (1 ≤ n ≤ 10^{5}, 1 ≤ k ≤ 10^{9}) — number of vertices and hedgehog parameter.

Next n-1 lines contains two integers u v (1 ≤ u,    v ≤ n;    u ≠ v) — indices of vertices connected by edge.

It is guaranteed that given graph is a tree.

Output

Print "Yes" (without quotes), if given graph is k-multihedgehog, and "No" (without quotes) otherwise.

Examples

Input

14 2
1 4
2 4
3 4
4 13
10 5
11 5
12 5
14 5
5 13
6 7
8 6
13 6
9 6


Output

Yes


Input

3 1
1 3
2 3


Output

No

Note

2-multihedgehog from the first example looks like this:

<image>

Its center is vertex 13. Hedgehogs created on last step are: [4 (center), 1, 2, 3], [6 (center), 7, 8, 9], [5 (center), 10, 11, 12, 13].

Tree from second example is not a hedgehog because degree of center should be at least 3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
inline long long input() {
  long long n;
  cin >> n;
  return n;
}
long long pw(long long a, long long b, long long md) {
  return (!b ? 1
             : (b & 1 ? a * pw(a * a % md, b / 2, md) % md
                      : pw(a * a % md, b / 2, md) % md));
}
const long long MAXN = 2e5 + 10;
const long long INF = 8e18;
const long long MOD = 1e9 + 7;
vector<long long> adj[MAXN];
long long n, k, v, u, mark[MAXN], cnt[MAXN];
void solve(vector<long long> vec) {
  if (vec.size() == 0) return;
  if (k == 0 && vec.size() != 1) {
    cout << "No" << '\n';
    exit(0);
  }
  set<long long> st;
  k--;
  for (long long i : vec) mark[i] = 1;
  for (long long v : vec) {
    for (long long u : adj[v]) {
      if (!mark[u]) {
        cnt[u]++;
        st.insert(u);
      }
    }
  }
  solve(vector<long long>(st.begin(), st.end()));
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  ;
  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
  ;
  cin >> n >> k;
  for (long long i = 1; i < n; i++) {
    cin >> v >> u;
    adj[v].push_back(u);
    adj[u].push_back(v);
  }
  vector<long long> vec;
  for (long long i = 1; i <= n; i++) {
    if (adj[i].size() == 1) {
      vec.push_back(i);
    }
  }
  solve(vec);
  for (long long i = 1; i <= n; i++) {
    if (cnt[i] < 3 && cnt[i] != 0) return cout << "No" << '\n', 0;
  }
  if (accumulate(cnt, cnt + MAXN, 0) != n - 1) return cout << "No" << '\n', 0;
  if (k != -1) return cout << "No" << '\n', 0;
  cout << "Yes" << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

18 2
1 4
2 4
3 4
4 13
10 5
11 5
12 5
14 5
5 13
6 7
8 6
13 6
9 6
13 15
15 16
15 17
15 18


(G.2) Fast Input

18 2
1 4
2 4
3 4
4 13
10 5
11 5
12 5
14 5
5 13
1 7
8 6
13 6
9 6
13 15
15 16
15 17
15 18


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
inline long long input() { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  long long n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  return n; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long pw(long long a, long long b, long long md) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  return (!b ? 1 /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
             : (b & 1 ? a * pw(a * a % md, b / 2, md) % md /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
                      : pw(a * a % md, b / 2, md) % md)); /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
const long long MAXN = 2e5 + 10; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 8e18; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 1e9 + 7; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> adj[MAXN]; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
long long n, k, v, u, mark[MAXN], cnt[MAXN]; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
void solve(vector<long long> vec) { /* line 18 slow_hit_count: 4, fast_hit_count: 4 */
  if (vec.size() == 0) return; /* line 19 slow_hit_count: 4, fast_hit_count: 4 */
  if (k == 0 && vec.size() != 1) { /* line 20 slow_hit_count: 3, fast_hit_count: 3 */
    cout << "No" << '\n'; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    exit(0); /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  set<long long> st; /* line 24 slow_hit_count: 3, fast_hit_count: 3 */
  k--; /* line 25 slow_hit_count: 3, fast_hit_count: 3 */
  for (long long i : vec) mark[i] = 1; /* line 26 slow_hit_count: 21, fast_hit_count: 21 */
  for (long long v : vec) { /* line 27 slow_hit_count: 21, fast_hit_count: 21 */
    for (long long u : adj[v]) { /* line 28 slow_hit_count: 52, fast_hit_count: 52 */
      if (!mark[u]) { /* line 29 slow_hit_count: 34, fast_hit_count: 34 */
        cnt[u]++; /* line 30 slow_hit_count: 17, fast_hit_count: 16 */
        st.insert(u); /* line 31 slow_hit_count: 17, fast_hit_count: 16 */
      } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  solve(vector<long long>(st.begin(), st.end())); /* line 35 slow_hit_count: 3, fast_hit_count: 3 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count()); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i < n; i++) { /* line 45 slow_hit_count: 18, fast_hit_count: 18 */
    cin >> v >> u; /* line 46 slow_hit_count: 17, fast_hit_count: 17 */
    adj[v].push_back(u); /* line 47 slow_hit_count: 17, fast_hit_count: 17 */
    adj[u].push_back(v); /* line 48 slow_hit_count: 17, fast_hit_count: 17 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long> vec; /* line 50 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long i = 1; i <= n; i++) { /* line 51 slow_hit_count: 19, fast_hit_count: 19 */
    if (adj[i].size() == 1) { /* line 52 slow_hit_count: 18, fast_hit_count: 18 */
      vec.push_back(i); /* line 53 slow_hit_count: 13, fast_hit_count: 12 */
    } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  solve(vec); /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= n; i++) { /* line 57 slow_hit_count: 19, fast_hit_count: 1 */
    if (cnt[i] < 3 && cnt[i] != 0) return cout << "No" << '\n', 0; /* line 58 slow_hit_count: 18, fast_hit_count: 1 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  if (accumulate(cnt, cnt + MAXN, 0) != n - 1) return cout << "No" << '\n', 0; /* line 60 slow_hit_count: 1, fast_hit_count: 0 */
  if (k != -1) return cout << "No" << '\n', 0; /* line 61 slow_hit_count: 1, fast_hit_count: 0 */
  cout << "Yes" << '\n'; /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 63 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 64 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks of the provided C++ code, we will focus on the differences in line-level hit counts between the slow and fast inputs and identify potential causes for the slowdown. Based on this analysis, we will derive performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line 57 (`for (long long i = 1; i <= n; i++)`):**
   - **Slow Hit Count:** 19
   - **Fast Hit Count:** 1
   - **Analysis:** This loop iterates over all vertices to check conditions based on `cnt[i]`. The fact that it is hit significantly more times for the slow input suggests that a large part of the graph is being processed, or the situation requiring this check is more prevalent in the slow input.

2. **Line 58 (`if (cnt[i] < 3 && cnt[i] != 0)`):**
   - **Slow Hit Count:** 18
   - **Fast Hit Count:** 1
   - **Analysis:** This condition is checked frequently in the slow input, indicating that there are many vertices with `cnt[i]` being less than 3 but non-zero, causing the loop to continue iterating.

3. **Line 30 and Line 31 (inside nested for-loop):**
   - **Slow Hit Count:** 17
   - **Fast Hit Count:** 16
   - **Analysis:** While these lines do have slightly more hits in the slow input, the difference is not as pronounced. These lines are part of processing edges for each vertex in the list, incrementing counts and inserting vertices into a set.

4. **The function `solve`:**
   - **Recursive Call at Line 35:** Both inputs hit this line the same number of times, indicating similar depth recursion, but the overhead for checking conditions might differ in complexity.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis of the hit counts and the nature of the slow and fast inputs, we can derive the following performance-characterizing invariants:

1. **Invariant #1: Vertex Degree Condition**
   - **Natural Language:** "The program may slow down significantly when there are many vertices with a degree of 1 that need to be processed multiple times. This might occur if these vertices are not quickly resolved as part of forming a k-multihedgehog, leading to increased checks on their connectivity."
   
2. **Invariant #2: Recursive Processing of Edges**
   - **Natural Language:** "If the recursive function encounters many vertices that lead to repeated processing of edge connections with a degree less than 3, performance can degrade. This can indicate that the tree's structure causes excessive verification steps per vertex."
   
3. **Invariant #3: Graph Structure Complexity**
   - **Natural Language:** "Complex graph structures with many low-degree vertices connected to high-degree centers can lead to performance bottlenecks. When k is large, the restructuring of hedgehogs becomes computationally intensive, especially if the tree has to resolve many such vertex connections."

These invariants should help identify slow execution paths during the program's verification of a k-multihedgehog tree structure, particularly focusing on how vertices and their connections are processed recursively.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Someone give a strange birthday present to Ivan. It is hedgehog — connected undirected graph in which one vertex has degree at least 3 (we will call it center) and all other vertices has degree 1. Ivan thought that hedgehog is too boring and decided to make himself k-multihedgehog.

Let us define k-multihedgehog as follows:

  * 1-multihedgehog is hedgehog: it has one vertex of degree at least 3 and some vertices of degree 1.
  * For all k ≥ 2, k-multihedgehog is (k-1)-multihedgehog in which the following changes has been made for each vertex v with degree 1: let u be its only neighbor; remove vertex v, create a new hedgehog with center at vertex w and connect vertices u and w with an edge. New hedgehogs can differ from each other and the initial gift. 



Thereby k-multihedgehog is a tree. Ivan made k-multihedgehog but he is not sure that he did not make any mistakes. That is why he asked you to check if his tree is indeed k-multihedgehog.

Input

First line of input contains 2 integers n, k (1 ≤ n ≤ 10^{5}, 1 ≤ k ≤ 10^{9}) — number of vertices and hedgehog parameter.

Next n-1 lines contains two integers u v (1 ≤ u,    v ≤ n;    u ≠ v) — indices of vertices connected by edge.

It is guaranteed that given graph is a tree.

Output

Print "Yes" (without quotes), if given graph is k-multihedgehog, and "No" (without quotes) otherwise.

Examples

Input

14 2
1 4
2 4
3 4
4 13
10 5
11 5
12 5
14 5
5 13
6 7
8 6
13 6
9 6


Output

Yes


Input

3 1
1 3
2 3


Output

No

Note

2-multihedgehog from the first example looks like this:

<image>

Its center is vertex 13. Hedgehogs created on last step are: [4 (center), 1, 2, 3], [6 (center), 7, 8, 9], [5 (center), 10, 11, 12, 13].

Tree from second example is not a hedgehog because degree of center should be at least 3.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Based on the performance invariants identified earlier, we will implement the corresponding checkers in C++.

1. **Invariant #1: Vertex Degree Condition**
   - **Checker Implementation:**
   ```cpp
   void check_vertex_degree_condition(const vector<long long>& cnt, long long n) {
       int lowDegreeCount = 0;
       for (long long i = 1; i <= n; i++) {
           if (cnt[i] < 3 && cnt[i] != 0) {
               lowDegreeCount++;
           }
       }
       if (lowDegreeCount > n / 10) { // Arbitrarily chosen threshold
           cerr << "Warning: Performance bottleneck - too many vertices with degree < 3" << endl;
           abort();
       }
   }
   ```

2. **Invariant #2: Recursive Edge Processing**
   - **Checker Implementation:**
   ```cpp
   void check_recursive_processing_condition(long long recursionDepth, long long threshold) {
       if (recursionDepth > threshold) {
           cerr << "Warning: Performance bottleneck - excessive recursion depth" << endl;
           abort();
       }
   }
   ```

3. **Invariant #3: Graph Structure Complexity**
   - **Checker Implementation:**
   ```cpp
   void check_graph_structure_complexity(const vector<long long>& adjSizes, long long n) {
       int complexStructureCount = 0;
       for (long long size : adjSizes) {
           if (size > 3) {
               complexStructureCount++;
           }
       }
       if (complexStructureCount > n / 20) { // Arbitrarily chosen threshold for complex structures
           cerr << "Warning: Performance bottleneck - complex graph structure" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checker Code into the Program

Now we integrate these checker functions into the original C++ code. We will place the checks at effective points in the control flow to diagnose potential performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

const long long MAXN = 2e5 + 10;
vector<long long> adj[MAXN];
long long n, k, v, u, mark[MAXN], cnt[MAXN];

void check_vertex_degree_condition(const vector<long long>& cnt, long long n) {
    int lowDegreeCount = 0;
    for (long long i = 1; i <= n; i++) {
        if (cnt[i] < 3 && cnt[i] != 0) {
            lowDegreeCount++;
        }
    }
    if (lowDegreeCount > n / 10) { // Arbitrarily chosen threshold
        cerr << "Warning: Performance bottleneck - too many vertices with degree < 3" << endl;
        abort();
    }
}

void check_recursive_processing_condition(long long recursionDepth, long long threshold) {
    if (recursionDepth > threshold) {
        cerr << "Warning: Performance bottleneck - excessive recursion depth" << endl;
        abort();
    }
}

void check_graph_structure_complexity(const vector<long long>& adjSizes, long long n) {
    int complexStructureCount = 0;
    for (long long size : adjSizes) {
        if (size > 3) {
            complexStructureCount++;
        }
    }
    if (complexStructureCount > n / 20) { // Arbitrarily chosen threshold for complex structures
        cerr << "Warning: Performance bottleneck - complex graph structure" << endl;
        abort();
    }
}

void solve(vector<long long> vec, long long recursionDepth = 0) {
    if (vec.size() == 0) return;
    if (k == 0 && vec.size() != 1) {
        cout << "No" << '\n';
        exit(0);
    }
    set<long long> st;
    k--;
    for (long long i : vec) mark[i] = 1;
    for (long long v : vec) {
        for (long long u : adj[v]) {
            if (!mark[u]) {
                cnt[u]++;
                st.insert(u);
            }
        }
    }
    check_recursive_processing_condition(++recursionDepth, 100); // Example threshold
    solve(vector<long long>(st.begin(), st.end()), recursionDepth);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    
    cin >> n >> k;
    for (long long i = 1; i < n; i++) {
        cin >> v >> u;
        adj[v].push_back(u);
        adj[u].push_back(v);
    }

    vector<long long> vec;
    for (long long i = 1; i <= n; i++) {
        if (adj[i].size() == 1) {
            vec.push_back(i);
        }
    }
    
    check_graph_structure_complexity(vector<long long>(adj, adj + n + 1), n);

    solve(vec);
    
    check_vertex_degree_condition(vector<long long>(cnt, cnt + MAXN), n);

    for (long long i = 1; i <= n; i++) {
        if (cnt[i] < 3 && cnt[i] != 0) return cout << "No" << '\n', 0;
    }
    if (accumulate(cnt, cnt + MAXN, 0) != n - 1) return cout << "No" << '\n', 0;
    if (k != -1) return cout << "No" << '\n', 0;
    cout << "Yes" << '\n';
    return 0;
}
```

### Explanation:
- **Checker Placement:** The checks are placed at points where relevant conditions can be evaluated without unnecessarily repeating checks in tight loops.
- **Thresholds:** Chosen thresholds for checks are somewhat arbitrary for illustration but should be adjusted based on typical use-case analysis and testing.
- **Performance Monitoring:** These checks are intended to catch conditions where the algorithm's complexity could degrade performance significantly based on structural analysis and recursion depth.

