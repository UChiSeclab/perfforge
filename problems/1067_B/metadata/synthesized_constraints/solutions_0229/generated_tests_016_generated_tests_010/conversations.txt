system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Someone give a strange birthday present to Ivan. It is hedgehog — connected undirected graph in which one vertex has degree at least 3 (we will call it center) and all other vertices has degree 1. Ivan thought that hedgehog is too boring and decided to make himself k-multihedgehog.

Let us define k-multihedgehog as follows:

  * 1-multihedgehog is hedgehog: it has one vertex of degree at least 3 and some vertices of degree 1.
  * For all k ≥ 2, k-multihedgehog is (k-1)-multihedgehog in which the following changes has been made for each vertex v with degree 1: let u be its only neighbor; remove vertex v, create a new hedgehog with center at vertex w and connect vertices u and w with an edge. New hedgehogs can differ from each other and the initial gift. 



Thereby k-multihedgehog is a tree. Ivan made k-multihedgehog but he is not sure that he did not make any mistakes. That is why he asked you to check if his tree is indeed k-multihedgehog.

Input

First line of input contains 2 integers n, k (1 ≤ n ≤ 10^{5}, 1 ≤ k ≤ 10^{9}) — number of vertices and hedgehog parameter.

Next n-1 lines contains two integers u v (1 ≤ u,    v ≤ n;    u ≠ v) — indices of vertices connected by edge.

It is guaranteed that given graph is a tree.

Output

Print "Yes" (without quotes), if given graph is k-multihedgehog, and "No" (without quotes) otherwise.

Examples

Input

14 2
1 4
2 4
3 4
4 13
10 5
11 5
12 5
14 5
5 13
6 7
8 6
13 6
9 6


Output

Yes


Input

3 1
1 3
2 3


Output

No

Note

2-multihedgehog from the first example looks like this:

<image>

Its center is vertex 13. Hedgehogs created on last step are: [4 (center), 1, 2, 3], [6 (center), 7, 8, 9], [5 (center), 10, 11, 12, 13].

Tree from second example is not a hedgehog because degree of center should be at least 3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, k;
  cin >> n >> k;
  unordered_map<int, unordered_set<int>> deg;
  for (int i = 0; i < n - 1; ++i) {
    int a, b;
    cin >> a >> b;
    deg[a].insert(b);
    deg[b].insert(a);
  }
  int levels = 1;
  while (levels <= 11) {
    unordered_map<int, unordered_set<int>> parents;
    for (auto& p : deg) {
      int size = p.second.size();
      if (size == 1) {
        int parent = *p.second.begin();
        parents[parent].insert(p.first);
      }
    }
    if (parents.size() == 1 && parents.begin()->second.size() > 2 &&
        parents.begin()->second.size() + 1 == deg.size()) {
      cout << ((levels == k) ? "Yes" : "No") << endl;
      return 0;
    }
    for (auto& p : parents) {
      int size = p.second.size();
      if (size < 3) {
        cout << "No" << endl;
        return 0;
      }
      for (auto& child : p.second) {
        deg.erase(child);
        deg[p.first].erase(child);
      }
    }
    ++levels;
  }
  cout << ((levels == k) ? "Yes" : "No") << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

33 2
4 13
17 3
2 6
5 33
4 18
1 2
31 5
4 19
3 16
1 3
9 2
10 3
5 1
5 28
21 4
7 2
1 4
5 24
30 5
14 3
3 11
27 5
8 2
22 4
12 3
20 4
26 5
4 23
32 1
25 5
15 3
29 5


(G.2) Fast Input

1 1
4 1
3 1
5 1
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  unordered_map<int, unordered_set<int>> deg; /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n - 1; ++i) { /* line 7 slow_hit_count: 33, fast_hit_count: 1 */
    int a, b; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a >> b; /* line 9 slow_hit_count: 32, fast_hit_count: 0 */
    deg[a].insert(b); /* line 10 slow_hit_count: 32, fast_hit_count: 0 */
    deg[b].insert(a); /* line 11 slow_hit_count: 32, fast_hit_count: 0 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  int levels = 1; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  while (levels <= 11) { /* line 14 slow_hit_count: 1, fast_hit_count: 12 */
    unordered_map<int, unordered_set<int>> parents; /* line 15 slow_hit_count: 1, fast_hit_count: 11 */
    for (auto& p : deg) { /* line 16 slow_hit_count: 34, fast_hit_count: 11 */
      int size = p.second.size(); /* line 17 slow_hit_count: 33, fast_hit_count: 0 */
      if (size == 1) { /* line 18 slow_hit_count: 33, fast_hit_count: 0 */
        int parent = *p.second.begin(); /* line 19 slow_hit_count: 28, fast_hit_count: 0 */
        parents[parent].insert(p.first); /* line 20 slow_hit_count: 28, fast_hit_count: 0 */
      } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    if (parents.size() == 1 && parents.begin()->second.size() > 2 && /* line 23 slow_hit_count: 1, fast_hit_count: 11 */
        parents.begin()->second.size() + 1 == deg.size()) { /* line 24 slow_hit_count: 1, fast_hit_count: 11 */
      cout << ((levels == k) ? "Yes" : "No") << endl; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto& p : parents) { /* line 28 slow_hit_count: 3, fast_hit_count: 11 */
      int size = p.second.size(); /* line 29 slow_hit_count: 3, fast_hit_count: 0 */
      if (size < 3) { /* line 30 slow_hit_count: 3, fast_hit_count: 0 */
        cout << "No" << endl; /* line 31 slow_hit_count: 1, fast_hit_count: 0 */
        return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      for (auto& child : p.second) { /* line 34 slow_hit_count: 13, fast_hit_count: 0 */
        deg.erase(child); /* line 35 slow_hit_count: 11, fast_hit_count: 0 */
        deg[p.first].erase(child); /* line 36 slow_hit_count: 11, fast_hit_count: 0 */
      } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    ++levels; /* line 39 slow_hit_count: 0, fast_hit_count: 11 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ((levels == k) ? "Yes" : "No") << endl; /* line 41 slow_hit_count: 0, fast_hit_count: 1 */
  return 0; /* line 42 slow_hit_count: 0, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issue and derive performance-characterizing invariants, we will go through the analysis in two phases as described:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - Notable differences are observed in lines within the loop starting at line 14. Specifically:
     - The loop on line 7 iterates 33 times for the slow input and just once for the fast input.
     - The loop on line 16 and its condition checks on lines 17-20 iterate significantly more often for the slow input.
     - The nested loop starting at line 28 and its body (lines 29-36) are also heavily executed for the slow input.

2. **Code Behavior Analysis:**
   - The line hit counts suggest that the bulk of the work is being done in the loops that check for degree-1 vertices and process parents of such vertices. These loops are central to the algorithm's performance, particularly when lines 34-36 are called multiple times, indicating frequent modification of the `deg` structure.

3. **Data Structure Interaction:**
   - The `unordered_map deg` is modified frequently, especially when multiple vertices are removed (lines 34-36). This repeated modification can be costly, particularly if the map becomes large.

4. **Condition Analysis:**
   - The code appears to iterate over the tree and attempt to process it in a layer-by-layer (or level-by-level) manner, stopping when certain conditions are met. The nested loop involvement when processing `deg` and `parents` maps suggests a potential nested complexity, which can lead to performance issues.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants:

1. **Invariant on Nested Processing of Degree-1 Nodes:**
   - **Natural Language Description:** "If the input graph has a large number of degree-1 vertices attached to the same parent node across multiple levels, the program may enter a slow path due to repeated processing and removal of these vertices."
   - **Suggested Thresholds:** A tree where a significant portion (e.g., more than 50%) of nodes are degree-1 and require processing as described may lead to performance degradation. Given the tree size constraint \( n \leq 100,000 \), this could involve thousands of such vertices.

2. **Invariant on Frequent Map Modifications:**
   - **Natural Language Description:** "When the unordered map representing the graph structure (`deg`) is frequently modified by adding and removing nodes in a nested loop, performance may degrade due to high overhead in managing these dynamic changes."
   - **Suggested Thresholds:** If the total number of operations (insertions/removals) exceeds several times the number of nodes, inefficiencies may occur. For instance, if operations exceed \( 5n \), it might indicate a performance issue.

3. **Invariant on Iterative Depth:**
   - **Natural Language Description:** "If the algorithm requires deep iterative processing of graph levels (beyond depth 10), it may enter a performance bottleneck due to excessive loop iterations."
   - **Suggested Thresholds:** If the number of levels processed (variable `levels`) exceeds 10, combined with complex operations on each level, performance may degrade.

These invariants highlight conditions under which the program is likely to slow down, abstracted from specific inputs and aligned with the problem constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Someone give a strange birthday present to Ivan. It is hedgehog — connected undirected graph in which one vertex has degree at least 3 (we will call it center) and all other vertices has degree 1. Ivan thought that hedgehog is too boring and decided to make himself k-multihedgehog.

Let us define k-multihedgehog as follows:

  * 1-multihedgehog is hedgehog: it has one vertex of degree at least 3 and some vertices of degree 1.
  * For all k ≥ 2, k-multihedgehog is (k-1)-multihedgehog in which the following changes has been made for each vertex v with degree 1: let u be its only neighbor; remove vertex v, create a new hedgehog with center at vertex w and connect vertices u and w with an edge. New hedgehogs can differ from each other and the initial gift. 



Thereby k-multihedgehog is a tree. Ivan made k-multihedgehog but he is not sure that he did not make any mistakes. That is why he asked you to check if his tree is indeed k-multihedgehog.

Input

First line of input contains 2 integers n, k (1 ≤ n ≤ 10^{5}, 1 ≤ k ≤ 10^{9}) — number of vertices and hedgehog parameter.

Next n-1 lines contains two integers u v (1 ≤ u,    v ≤ n;    u ≠ v) — indices of vertices connected by edge.

It is guaranteed that given graph is a tree.

Output

Print "Yes" (without quotes), if given graph is k-multihedgehog, and "No" (without quotes) otherwise.

Examples

Input

14 2
1 4
2 4
3 4
4 13
10 5
11 5
12 5
14 5
5 13
6 7
8 6
13 6
9 6


Output

Yes


Input

3 1
1 3
2 3


Output

No

Note

2-multihedgehog from the first example looks like this:

<image>

Its center is vertex 13. Hedgehogs created on last step are: [4 (center), 1, 2, 3], [6 (center), 7, 8, 9], [5 (center), 10, 11, 12, 13].

Tree from second example is not a hedgehog because degree of center should be at least 3.

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 first, where we will implement the natural language invariants as runtime checks in C++.

### Phase 3: Implementing the Natural Language Invariants in C++

Here are the C++ code snippets implementing the performance-characterizing invariants derived earlier:

1. **Invariant on Nested Processing of Degree-1 Nodes:**
   - **C++ Implementation:**
   ```cpp
   void check_nested_degree1_invariant(const unordered_map<int, unordered_set<int>>& deg) {
       int degree1_count = 0;
       for (const auto& entry : deg) {
           if (entry.second.size() == 1) {
               ++degree1_count;
           }
       }
       if (degree1_count > deg.size() / 2) { // If more than 50% are degree-1
           cerr << "Warning: Performance bottleneck condition triggered - excessive degree-1 node processing!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Frequent Map Modifications:**
   - **C++ Implementation:**
   ```cpp
   void check_frequent_modifications_invariant(int operations, int n) {
       if (operations > 5 * n) { // Arbitrarily setting a threshold of 5 times the number of nodes
           cerr << "Warning: Performance bottleneck condition triggered - frequent modifications in data structure!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Iterative Depth:**
   - **C++ Implementation:**
   ```cpp
   void check_iterative_depth_invariant(int levels) {
       if (levels > 10) { // More than 10 levels of processing
           cerr << "Warning: Performance bottleneck condition triggered - deep iterative processing!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checkers into the Original Program

Let's integrate these checkers at appropriate points in the original C++ code.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_nested_degree1_invariant(const unordered_map<int, unordered_set<int>>& deg) {
    int degree1_count = 0;
    for (const auto& entry : deg) {
        if (entry.second.size() == 1) {
            ++degree1_count;
        }
    }
    if (degree1_count > deg.size() / 2) { // If more than 50% are degree-1
        cerr << "Warning: Performance bottleneck condition triggered - excessive degree-1 node processing!" << endl;
        abort();
    }
}

void check_frequent_modifications_invariant(int operations, int n) {
    if (operations > 5 * n) { // Arbitrarily setting a threshold of 5 times the number of nodes
        cerr << "Warning: Performance bottleneck condition triggered - frequent modifications in data structure!" << endl;
        abort();
    }
}

void check_iterative_depth_invariant(int levels) {
    if (levels > 10) { // More than 10 levels of processing
        cerr << "Warning: Performance bottleneck condition triggered - deep iterative processing!" << endl;
        abort();
    }
}

int main() {
    int n, k;
    cin >> n >> k;
    unordered_map<int, unordered_set<int>> deg;
    int modification_count = 0; // To track the number of modifications

    for (int i = 0; i < n - 1; ++i) {
        int a, b;
        cin >> a >> b;
        deg[a].insert(b);
        deg[b].insert(a);
    }

    check_nested_degree1_invariant(deg); // Check invariant after input

    int levels = 1;
    while (levels <= 11) {
        unordered_map<int, unordered_set<int>> parents;
        for (auto& p : deg) {
            int size = p.second.size();
            if (size == 1) {
                int parent = *p.second.begin();
                parents[parent].insert(p.first);
            }
        }
        if (parents.size() == 1 && parents.begin()->second.size() > 2 &&
            parents.begin()->second.size() + 1 == deg.size()) {
            cout << ((levels == k) ? "Yes" : "No") << endl;
            return 0;
        }
        for (auto& p : parents) {
            int size = p.second.size();
            if (size < 3) {
                cout << "No" << endl;
                return 0;
            }
            for (auto& child : p.second) {
                deg.erase(child);
                deg[p.first].erase(child);
                modification_count += 2; // Two modifications per removal
            }
        }
        ++levels;
        check_iterative_depth_invariant(levels); // Check depth after each level
    }

    check_frequent_modifications_invariant(modification_count, n); // Check modifications after processing

    cout << ((levels == k) ? "Yes" : "No") << endl;
    return 0;
}
```

### Explanation

- **Degree-1 Node Check**: Added after reading the initial graph to ensure we're not starting with too many degree-1 nodes.
- **Modification Check**: Placed after processing to ensure that we aren't excessively modifying the `deg` structure.
- **Iterative Depth Check**: Inserted within the loop to catch excessive iterations. 

These checks help identify performance bottlenecks during execution, allowing for easier diagnosis and debugging.

