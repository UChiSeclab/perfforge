system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Someone give a strange birthday present to Ivan. It is hedgehog — connected undirected graph in which one vertex has degree at least 3 (we will call it center) and all other vertices has degree 1. Ivan thought that hedgehog is too boring and decided to make himself k-multihedgehog.

Let us define k-multihedgehog as follows:

  * 1-multihedgehog is hedgehog: it has one vertex of degree at least 3 and some vertices of degree 1.
  * For all k ≥ 2, k-multihedgehog is (k-1)-multihedgehog in which the following changes has been made for each vertex v with degree 1: let u be its only neighbor; remove vertex v, create a new hedgehog with center at vertex w and connect vertices u and w with an edge. New hedgehogs can differ from each other and the initial gift. 



Thereby k-multihedgehog is a tree. Ivan made k-multihedgehog but he is not sure that he did not make any mistakes. That is why he asked you to check if his tree is indeed k-multihedgehog.

Input

First line of input contains 2 integers n, k (1 ≤ n ≤ 10^{5}, 1 ≤ k ≤ 10^{9}) — number of vertices and hedgehog parameter.

Next n-1 lines contains two integers u v (1 ≤ u,    v ≤ n;    u ≠ v) — indices of vertices connected by edge.

It is guaranteed that given graph is a tree.

Output

Print "Yes" (without quotes), if given graph is k-multihedgehog, and "No" (without quotes) otherwise.

Examples

Input

14 2
1 4
2 4
3 4
4 13
10 5
11 5
12 5
14 5
5 13
6 7
8 6
13 6
9 6


Output

Yes


Input

3 1
1 3
2 3


Output

No

Note

2-multihedgehog from the first example looks like this:

<image>

Its center is vertex 13. Hedgehogs created on last step are: [4 (center), 1, 2, 3], [6 (center), 7, 8, 9], [5 (center), 10, 11, 12, 13].

Tree from second example is not a hedgehog because degree of center should be at least 3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
class Adj {
 public:
  set<int> list;
  int id;
};
int main() {
  int n, k;
  cin >> n >> k;
  if (k > 13) {
    cout << "No" << endl;
    return 0;
  }
  Adj adj[n + 1];
  adj[n].id = n;
  for (int x, y, i = 1; i < n; i++) {
    adj[i].id = i;
    cin >> x >> y;
    adj[x].list.insert(y);
    adj[y].list.insert(x);
  }
  int i = 1, depth = 0;
  bool flag = true;
  while (i < n) {
    sort(adj + i, adj + n + 1,
         [](Adj &lhs, Adj &rhs) { return lhs.list.size() < rhs.list.size(); });
    map<int, int> ref;
    for (int j = i; j <= n; j++) {
      ref[adj[j].id] = j;
    }
    int j = i;
    while (adj[i].list.size() == 1) i++;
    map<int, int> mp;
    for (; j < i; j++) {
      int x = adj[j].id;
      int y = *(adj[j].list.begin());
      mp[y]++;
      adj[ref[y]].list.erase(x);
    }
    map<int, int>::iterator it;
    for (it = mp.begin(); it != mp.end(); it++) {
      if (it->second < 3) {
        flag = false;
        break;
      }
    }
    if (!flag) break;
    depth++;
  }
  if (flag && depth == k && i == n)
    cout << "Yes" << endl;
  else
    cout << "No" << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

33 2
4 13
17 3
2 6
5 33
4 18
1 2
31 5
4 19
3 16
1 3
9 2
10 3
5 1
5 28
21 4
7 2
1 4
5 24
30 5
14 3
3 11
27 5
8 2
22 4
12 3
20 4
26 5
4 23
32 1
25 5
15 3
29 5


(G.2) Fast Input

1 2
4 1
3 2
0 1
-1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
class Adj { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  set<int> list; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  int id; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  if (k > 13) { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "No" << endl; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  Adj adj[n + 1]; /* line 15 slow_hit_count: 70, fast_hit_count: 6 */
  adj[n].id = n; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (int x, y, i = 1; i < n; i++) { /* line 17 slow_hit_count: 33, fast_hit_count: 1 */
    adj[i].id = i; /* line 18 slow_hit_count: 32, fast_hit_count: 0 */
    cin >> x >> y; /* line 19 slow_hit_count: 32, fast_hit_count: 0 */
    adj[x].list.insert(y); /* line 20 slow_hit_count: 32, fast_hit_count: 0 */
    adj[y].list.insert(x); /* line 21 slow_hit_count: 32, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  int i = 1, depth = 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  bool flag = true; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  while (i < n) { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    sort(adj + i, adj + n + 1, /* line 26 slow_hit_count: 1, fast_hit_count: 0 */
         [](Adj &lhs, Adj &rhs) { return lhs.list.size() < rhs.list.size(); }); /* line 27 slow_hit_count: 121, fast_hit_count: 0 */
    map<int, int> ref; /* line 28 slow_hit_count: 1, fast_hit_count: 0 */
    for (int j = i; j <= n; j++) { /* line 29 slow_hit_count: 34, fast_hit_count: 0 */
      ref[adj[j].id] = j; /* line 30 slow_hit_count: 33, fast_hit_count: 0 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    int j = i; /* line 32 slow_hit_count: 1, fast_hit_count: 0 */
    while (adj[i].list.size() == 1) i++; /* line 33 slow_hit_count: 29, fast_hit_count: 0 */
    map<int, int> mp; /* line 34 slow_hit_count: 1, fast_hit_count: 0 */
    for (; j < i; j++) { /* line 35 slow_hit_count: 29, fast_hit_count: 0 */
      int x = adj[j].id; /* line 36 slow_hit_count: 28, fast_hit_count: 0 */
      int y = *(adj[j].list.begin()); /* line 37 slow_hit_count: 28, fast_hit_count: 0 */
      mp[y]++; /* line 38 slow_hit_count: 28, fast_hit_count: 0 */
      adj[ref[y]].list.erase(x); /* line 39 slow_hit_count: 28, fast_hit_count: 0 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    map<int, int>::iterator it; /* line 41 slow_hit_count: 1, fast_hit_count: 0 */
    for (it = mp.begin(); it != mp.end(); it++) { /* line 42 slow_hit_count: 1, fast_hit_count: 0 */
      if (it->second < 3) { /* line 43 slow_hit_count: 1, fast_hit_count: 0 */
        flag = false; /* line 44 slow_hit_count: 1, fast_hit_count: 0 */
        break; /* line 45 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    if (!flag) break; /* line 48 slow_hit_count: 1, fast_hit_count: 0 */
    depth++; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  if (flag && depth == k && i == n) /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "Yes" << endl; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "No" << endl; /* line 54 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 55 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the slow performance of the given C program, let's follow the tasks outlined in the prompt:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The slow input shows significantly higher hit counts on certain lines, especially in the loop starting at line 25 and the operations inside it. Notably, the `sort` operation at line 26 is hit multiple times in the slow run but not in the fast run.
   - The iterations over the adjacency lists and map manipulations on lines 29, 30, 33, 35, 36, 37, 38, and 39 are also much more frequent in the slow input.

2. **Pinpoint Performance-Intensive Areas:**
   - **Sorting Operation:** The `sort` operation at line 26 is potentially expensive, especially when repeatedly called in a loop. This is a critical difference between the fast and slow runs.
   - **Map Operations:** The population of `ref` and `mp` maps inside the loop, and the iteration over these maps, contribute to the slowdown in the slow input.

3. **Interaction with Data Structures:**
   - The adjacency list and its sorting are crucial here. The map operations further exacerbate the issue, as they are executed frequently due to the structure of the input data and how the algorithm handles it.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, let's derive some potential performance-characterizing invariants in natural language:

1. **Invariant Regarding Sorting:**
   - **Description:** "If the adjacency list needs to be sorted multiple times during the execution, especially when the number of vertices `n` is large, the performance might degrade significantly."
   - **Reasoning:** The repeated use of `sort` on a dynamically changing list is computationally expensive, especially if the list is large or frequently altered.

2. **Invariant Regarding Map Usage:**
   - **Description:** "If the program frequently updates and iterates over maps that track vertex connections, particularly when `n` is at its upper bounds (close to 100,000), it may experience slowdowns."
   - **Reasoning:** Frequent insertion, deletion, and traversal of map data structures introduce overhead, which accumulates significantly with larger inputs.

3. **Invariant Regarding Loop Execution:**
   - **Description:** "When processing a tree structure with a high degree of connectivity (many nodes connected to each other), the iterations within nested loops can become a performance bottleneck, primarily if the loops are contingent on adjacency checks."
   - **Reasoning:** A tree with numerous connections often leads to nested loops iterating multiple times, especially when checking node degrees or updating adjacency information.

4. **Invariant Regarding Degree Constraints:**
   - **Description:** "If there are many vertex connections leading to frequent updates in degree checking conditions, especially under higher k-values, the performance may degrade."
   - **Reasoning:** A higher degree of nodes and larger values of k require more complex checks and modifications, particularly when ensuring conditions for a k-multihedgehog are met.

By understanding these invariants, one can identify the conditions under which the program's performance may degrade and use them to optimize or reformulate the algorithm to handle such cases more efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Someone give a strange birthday present to Ivan. It is hedgehog — connected undirected graph in which one vertex has degree at least 3 (we will call it center) and all other vertices has degree 1. Ivan thought that hedgehog is too boring and decided to make himself k-multihedgehog.

Let us define k-multihedgehog as follows:

  * 1-multihedgehog is hedgehog: it has one vertex of degree at least 3 and some vertices of degree 1.
  * For all k ≥ 2, k-multihedgehog is (k-1)-multihedgehog in which the following changes has been made for each vertex v with degree 1: let u be its only neighbor; remove vertex v, create a new hedgehog with center at vertex w and connect vertices u and w with an edge. New hedgehogs can differ from each other and the initial gift. 



Thereby k-multihedgehog is a tree. Ivan made k-multihedgehog but he is not sure that he did not make any mistakes. That is why he asked you to check if his tree is indeed k-multihedgehog.

Input

First line of input contains 2 integers n, k (1 ≤ n ≤ 10^{5}, 1 ≤ k ≤ 10^{9}) — number of vertices and hedgehog parameter.

Next n-1 lines contains two integers u v (1 ≤ u,    v ≤ n;    u ≠ v) — indices of vertices connected by edge.

It is guaranteed that given graph is a tree.

Output

Print "Yes" (without quotes), if given graph is k-multihedgehog, and "No" (without quotes) otherwise.

Examples

Input

14 2
1 4
2 4
3 4
4 13
10 5
11 5
12 5
14 5
5 13
6 7
8 6
13 6
9 6


Output

Yes


Input

3 1
1 3
2 3


Output

No

Note

2-multihedgehog from the first example looks like this:

<image>

Its center is vertex 13. Hedgehogs created on last step are: [4 (center), 1, 2, 3], [6 (center), 7, 8, 9], [5 (center), 10, 11, 12, 13].

Tree from second example is not a hedgehog because degree of center should be at least 3.

Solution (C++ code):
{solution}


assistant: Let's break down the task into two phases as requested:

### Phase 3: Implementing Invariants as C++ Checkers

Based on the natural language invariants I provided earlier, I will now create C++ code snippets to serve as runtime checks.

1. **Invariant Regarding Sorting:**
   - **Checker Code:**
     ```cpp
     void check_sort_invariant(int sortCount) {
         if (sortCount > 10) { // Arbitrary threshold for frequent sorts
             cerr << "Warning: sort_invariant triggered - repeatedly sorting data" << endl;
             abort();
         }
     }
     ```

2. **Invariant Regarding Map Usage:**
   - **Checker Code:**
     ```cpp
     void check_map_invariant(int mapSize) {
         if (mapSize > 10000) { // Arbitrary threshold for map operations
             cerr << "Warning: map_invariant triggered - excessive map updates or iterations" << endl;
             abort();
         }
     }
     ```

3. **Invariant Regarding Loop Execution:**
   - **Checker Code:**
     ```cpp
     void check_loop_invariant(int loopIterations) {
         if (loopIterations > 1000) { // Arbitrary threshold for loop iterations
             cerr << "Warning: loop_invariant triggered - too many loop iterations" << endl;
             abort();
         }
     }
     ```

4. **Invariant Regarding Degree Constraints:**
   - **Checker Code:**
     ```cpp
     void check_degree_invariant(int degree) {
         if (degree > 3) {
             cerr << "Warning: degree_invariant triggered - high degree connectivity" << endl;
             abort();
         }
     }
     ```

These checkers will need to be integrated into the original program to monitor relevant performance conditions.

### Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checks into the C++ program provided:

```cpp
#include <bits/stdc++.h>
using namespace std;

class Adj {
 public:
  set<int> list;
  int id;
};

void check_sort_invariant(int sortCount) {
    if (sortCount > 10) { // Arbitrary threshold for frequent sorts
        cerr << "Warning: sort_invariant triggered - repeatedly sorting data" << endl;
        abort();
    }
}

void check_map_invariant(int mapSize) {
    if (mapSize > 10000) { // Arbitrary threshold for map operations
        cerr << "Warning: map_invariant triggered - excessive map updates or iterations" << endl;
        abort();
    }
}

void check_loop_invariant(int loopIterations) {
    if (loopIterations > 1000) { // Arbitrary threshold for loop iterations
        cerr << "Warning: loop_invariant triggered - too many loop iterations" << endl;
        abort();
    }
}

void check_degree_invariant(int degree) {
    if (degree > 3) {
        cerr << "Warning: degree_invariant triggered - high degree connectivity" << endl;
        abort();
    }
}

int main() {
  int n, k;
  cin >> n >> k;
  if (k > 13) {
    cout << "No" << endl;
    return 0;
  }
  Adj adj[n + 1];
  adj[n].id = n;
  for (int x, y, i = 1; i < n; i++) {
    adj[i].id = i;
    cin >> x >> y;
    adj[x].list.insert(y);
    adj[y].list.insert(x);
  }
  int i = 1, depth = 0;
  bool flag = true;
  
  // Counter for sort operation
  int sortCount = 0;
  
  while (i < n) {
    sort(adj + i, adj + n + 1, [](Adj &lhs, Adj &rhs) { return lhs.list.size() < rhs.list.size(); });
    sortCount++;
    check_sort_invariant(sortCount); // Check for sort operation frequency
    
    map<int, int> ref;
    int mapSize = 0; // Track map size for invariant
    
    for (int j = i; j <= n; j++) {
      ref[adj[j].id] = j;
      mapSize++;
    }
    check_map_invariant(mapSize); // Check for map update frequency
    
    int j = i;
    int loopIterations = 0;
    
    while (adj[i].list.size() == 1) {
      i++;
      loopIterations++;
    }
    check_loop_invariant(loopIterations); // Check loop execution frequency
    
    map<int, int> mp;
    for (; j < i; j++) {
      int x = adj[j].id;
      int y = *(adj[j].list.begin());
      mp[y]++;
      adj[ref[y]].list.erase(x);
    }
    
    map<int, int>::iterator it;
    for (it = mp.begin(); it != mp.end(); it++) {
      check_degree_invariant(it->second); // Check vertex degree constraints
      if (it->second < 3) {
        flag = false;
        break;
      }
    }
    if (!flag) break;
    depth++;
  }
  
  if (flag && depth == k && i == n)
    cout << "Yes" << endl;
  else
    cout << "No" << endl;
}
```

### Explanation

- **Check placement:** Each check is placed strategically outside of tight loops or after critical operations to minimize additional runtime overhead.
- **Counters and Conditions:** I introduced counters like `sortCount`, `mapSize`, and `loopIterations` to track when to trigger invariants.
- **Warnings and Aborts:** Each invariant check prints a warning and calls `abort()` if the condition is met, signaling a potential performance issue.

This comprehensive instrumentation helps identify bottlenecks dynamically for optimization or further investigation.

