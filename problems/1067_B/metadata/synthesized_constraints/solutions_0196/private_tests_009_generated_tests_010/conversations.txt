system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Someone give a strange birthday present to Ivan. It is hedgehog — connected undirected graph in which one vertex has degree at least 3 (we will call it center) and all other vertices has degree 1. Ivan thought that hedgehog is too boring and decided to make himself k-multihedgehog.

Let us define k-multihedgehog as follows:

  * 1-multihedgehog is hedgehog: it has one vertex of degree at least 3 and some vertices of degree 1.
  * For all k ≥ 2, k-multihedgehog is (k-1)-multihedgehog in which the following changes has been made for each vertex v with degree 1: let u be its only neighbor; remove vertex v, create a new hedgehog with center at vertex w and connect vertices u and w with an edge. New hedgehogs can differ from each other and the initial gift. 



Thereby k-multihedgehog is a tree. Ivan made k-multihedgehog but he is not sure that he did not make any mistakes. That is why he asked you to check if his tree is indeed k-multihedgehog.

Input

First line of input contains 2 integers n, k (1 ≤ n ≤ 10^{5}, 1 ≤ k ≤ 10^{9}) — number of vertices and hedgehog parameter.

Next n-1 lines contains two integers u v (1 ≤ u,    v ≤ n;    u ≠ v) — indices of vertices connected by edge.

It is guaranteed that given graph is a tree.

Output

Print "Yes" (without quotes), if given graph is k-multihedgehog, and "No" (without quotes) otherwise.

Examples

Input

14 2
1 4
2 4
3 4
4 13
10 5
11 5
12 5
14 5
5 13
6 7
8 6
13 6
9 6


Output

Yes


Input

3 1
1 3
2 3


Output

No

Note

2-multihedgehog from the first example looks like this:

<image>

Its center is vertex 13. Hedgehogs created on last step are: [4 (center), 1, 2, 3], [6 (center), 7, 8, 9], [5 (center), 10, 11, 12, 13].

Tree from second example is not a hedgehog because degree of center should be at least 3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int N, K;
vector<int> E[101010];
int D[101010];
vector<int> Ds[101010];
void solve() {
  int i, j, k, l, r, x, y;
  string s;
  cin >> N >> K;
  for (i = 0; i < (N - 1); i++) {
    cin >> x >> y;
    E[x - 1].push_back(y - 1);
    E[y - 1].push_back(x - 1);
  }
  if (N == 1) return (void)printf("No\n");
  queue<int> Q;
  for (i = 0; i < (N); i++) {
    D[i] = 101010;
    if (E[i].size() == 1) {
      D[i] = 0;
      Q.push(i);
    }
  }
  while (Q.size()) {
    x = Q.front();
    Q.pop();
    Ds[D[x]].push_back(x);
    for (auto& e : E[x])
      if (D[e] > D[x] + 1) {
        D[e] = D[x] + 1;
        Q.push(e);
      }
  }
  if (K > 100000 || Ds[K].size() != 1) return (void)printf("No\n");
  x = 0;
  for (i = K + 1; i <= 101000; i++) x += Ds[i].size();
  if (x) return (void)printf("No\n");
  for (i = 0; i < (N); i++)
    if (D[i]) {
      int num = 0;
      for (auto& e : E[i]) {
        if (D[e] == D[i] + 1)
          continue;
        else if (D[e] == D[i] - 1)
          num++;
        else
          return (void)printf("No\n");
      }
      if (num < 3) return (void)printf("No\n");
    }
  (void)printf("Yes\n");
}
int main(int argc, char** argv) {
  string s;
  int i;
  if (argc == 1) ios::sync_with_stdio(false), cin.tie(0);
  for (i = 0; i < (argc - 1); i++) s += argv[i + 1], s += '\n';
  for (i = 0; i < (s.size()); i++) ungetc(s[s.size() - 1 - i], stdin);
  cout.tie(0);
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 1
4 1
3 1
5 1
1 2


(G.2) Fast Input

1 1
4 1
3 1
5 1
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int N, K; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> E[101010]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int D[101010]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> Ds[101010]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int i, j, k, l, r, x, y; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  string s; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> N >> K; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < (N - 1); i++) { /* line 11 slow_hit_count: 5, fast_hit_count: 1 */
    cin >> x >> y; /* line 12 slow_hit_count: 4, fast_hit_count: 0 */
    E[x - 1].push_back(y - 1); /* line 13 slow_hit_count: 4, fast_hit_count: 0 */
    E[y - 1].push_back(x - 1); /* line 14 slow_hit_count: 4, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  if (N == 1) return (void)printf("No\n"); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  queue<int> Q; /* line 17 slow_hit_count: 1, fast_hit_count: 0 */
  for (i = 0; i < (N); i++) { /* line 18 slow_hit_count: 6, fast_hit_count: 0 */
    D[i] = 101010; /* line 19 slow_hit_count: 5, fast_hit_count: 0 */
    if (E[i].size() == 1) { /* line 20 slow_hit_count: 5, fast_hit_count: 0 */
      D[i] = 0; /* line 21 slow_hit_count: 4, fast_hit_count: 0 */
      Q.push(i); /* line 22 slow_hit_count: 4, fast_hit_count: 0 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  while (Q.size()) { /* line 25 slow_hit_count: 6, fast_hit_count: 0 */
    x = Q.front(); /* line 26 slow_hit_count: 5, fast_hit_count: 0 */
    Q.pop(); /* line 27 slow_hit_count: 5, fast_hit_count: 0 */
    Ds[D[x]].push_back(x); /* line 28 slow_hit_count: 5, fast_hit_count: 0 */
    for (auto& e : E[x]) /* line 29 slow_hit_count: 13, fast_hit_count: 0 */
      if (D[e] > D[x] + 1) { /* line 30 slow_hit_count: 8, fast_hit_count: 0 */
        D[e] = D[x] + 1; /* line 31 slow_hit_count: 1, fast_hit_count: 0 */
        Q.push(e); /* line 32 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  if (K > 100000 || Ds[K].size() != 1) return (void)printf("No\n"); /* line 35 slow_hit_count: 1, fast_hit_count: 0 */
  x = 0; /* line 36 slow_hit_count: 1, fast_hit_count: 0 */
  for (i = K + 1; i <= 101000; i++) x += Ds[i].size(); /* line 37 slow_hit_count: 101000, fast_hit_count: 0 */
  if (x) return (void)printf("No\n"); /* line 38 slow_hit_count: 1, fast_hit_count: 0 */
  for (i = 0; i < (N); i++) /* line 39 slow_hit_count: 6, fast_hit_count: 0 */
    if (D[i]) { /* line 40 slow_hit_count: 5, fast_hit_count: 0 */
      int num = 0; /* line 41 slow_hit_count: 1, fast_hit_count: 0 */
      for (auto& e : E[i]) { /* line 42 slow_hit_count: 5, fast_hit_count: 0 */
        if (D[e] == D[i] + 1) /* line 43 slow_hit_count: 4, fast_hit_count: 0 */
          continue; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
        else if (D[e] == D[i] - 1) /* line 45 slow_hit_count: 4, fast_hit_count: 0 */
          num++; /* line 46 slow_hit_count: 4, fast_hit_count: 0 */
        else /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
          return (void)printf("No\n"); /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      if (num < 3) return (void)printf("No\n"); /* line 50 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  (void)printf("Yes\n"); /* line 52 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
int main(int argc, char** argv) { /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  string s; /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  int i; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  if (argc == 1) ios::sync_with_stdio(false), cin.tie(0); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < (argc - 1); i++) s += argv[i + 1], s += '\n'; /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < (s.size()); i++) ungetc(s[s.size() - 1 - i], stdin); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 63 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**: By comparing the line-level hit counts between the slow and fast runs, we can observe that the lines with significant discrepancy in execution counts are:
    - For loop on line 11 (`for (i = 0; i < (N - 1); i++)`) is hit 5 times in the slow input but only once in the fast input.
    - The while loop on line 25 (`while (Q.size())`) and its enclosed operations have several hits in the slow input but none in the fast input.
    - The for loop on line 37 (`for (i = K + 1; i <= 101000; i++) x += Ds[i].size();`) is hit 101,000 times in the slow input but not at all in the fast input.

2. **Potential Bottlenecks**:
    - **Initialization and Dequeuing in BFS (Lines 17-34)**: The breadth-first search initialization is fully executed in the slow run but skipped in the fast run, suggesting that the slow input triggers a full traversal.
    - **Excessive Iteration in Loop (Line 37)**: The loop iterating from `K + 1` to `101000` causes excessive execution. This is a potential bottleneck as it increments `x` based on sizes that might not even be relevant or present.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Breadth-First Search Initialization and Execution**:
   - **Invariant**: "If the number of vertices `N` is greater than a small threshold and many vertices have a degree of 1, the BFS may perform exhaustive traversal, slowing down the execution."
   
   This invariant captures the idea that a large number of leaf nodes (degree 1) in a graph can cause the BFS to explore more nodes, increasing the execution time.

2. **Excessive Iteration Over Non-Contributing Indices**:
   - **Invariant**: "If `K` is significantly smaller than `N`, the loop iterating up to a high constant (e.g., 101000) may lead to unnecessary computation, impacting performance negatively."
   
   This invariant addresses the inefficiency caused by looping over a large range that does not directly contribute to meaningful computation based on input size.

3. **Vertex Degree Checks**:
   - **Invariant**: "If within the tree structure, there are multiple nodes whose depth differs significantly from expected values, additional checks may be required, which could slow the algorithm."

   This invariant relates to the logic that checks vertex degrees and their relationships within the tree. A mismatch in expected and actual degrees can lead to further computational checks.

4. **Constraints of K-Multihedgehog Condition**:
   - **Invariant**: "If `K` is large relative to `N`, the requirement that a single node in `Ds[K]` exists can cause a bottleneck due to the exhaustive checks over depth levels and vertex relations."

   This invariant highlights the impact of the parameter `K` and its role in validating the k-multihedgehog structure, especially when `K` is disproportionate to the actual structure size.

These performance-characterizing invariants help identify scenarios where the program might slow down due to the nature of input and specific computation paths taken, without relying on exact input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Someone give a strange birthday present to Ivan. It is hedgehog — connected undirected graph in which one vertex has degree at least 3 (we will call it center) and all other vertices has degree 1. Ivan thought that hedgehog is too boring and decided to make himself k-multihedgehog.

Let us define k-multihedgehog as follows:

  * 1-multihedgehog is hedgehog: it has one vertex of degree at least 3 and some vertices of degree 1.
  * For all k ≥ 2, k-multihedgehog is (k-1)-multihedgehog in which the following changes has been made for each vertex v with degree 1: let u be its only neighbor; remove vertex v, create a new hedgehog with center at vertex w and connect vertices u and w with an edge. New hedgehogs can differ from each other and the initial gift. 



Thereby k-multihedgehog is a tree. Ivan made k-multihedgehog but he is not sure that he did not make any mistakes. That is why he asked you to check if his tree is indeed k-multihedgehog.

Input

First line of input contains 2 integers n, k (1 ≤ n ≤ 10^{5}, 1 ≤ k ≤ 10^{9}) — number of vertices and hedgehog parameter.

Next n-1 lines contains two integers u v (1 ≤ u,    v ≤ n;    u ≠ v) — indices of vertices connected by edge.

It is guaranteed that given graph is a tree.

Output

Print "Yes" (without quotes), if given graph is k-multihedgehog, and "No" (without quotes) otherwise.

Examples

Input

14 2
1 4
2 4
3 4
4 13
10 5
11 5
12 5
14 5
5 13
6 7
8 6
13 6
9 6


Output

Yes


Input

3 1
1 3
2 3


Output

No

Note

2-multihedgehog from the first example looks like this:

<image>

Its center is vertex 13. Hedgehogs created on last step are: [4 (center), 1, 2, 3], [6 (center), 7, 8, 9], [5 (center), 10, 11, 12, 13].

Tree from second example is not a hedgehog because degree of center should be at least 3.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Here are the C++ checkers for each of the performance-characterizing invariants derived earlier:

1. **Breadth-First Search Initialization and Execution**:
   - **Checker Code**:
   ```cpp
   void check_bfs_exhaustive_traversal(int N, const vector<int>& degrees) {
       int leaf_count = 0;
       for (int degree : degrees) {
           if (degree == 1) {
               leaf_count++;
           }
       }
       if (N > 10 && leaf_count > N / 2) {  // Arbitrary threshold to detect many leaves.
           cerr << "Warning: Performance bottleneck condition triggered - exhaustive BFS traversal due to many leaf nodes!" << endl;
           abort();
       }
   }
   ```

2. **Excessive Iteration Over Non-Contributing Indices**:
   - **Checker Code**:
   ```cpp
   void check_excessive_iteration(int K, int N) {
       if (K < N / 10) {  // Arbitrary threshold to detect excessive iterations.
           cerr << "Warning: Performance bottleneck condition triggered - excessive iteration due to small K!" << endl;
           abort();
       }
   }
   ```

3. **Vertex Degree Checks**:
   - **Checker Code**:
   ```cpp
   void check_vertex_degree_mismatch(const vector<int>& degrees) {
       int inconsistencies = 0;
       for (int degree : degrees) {
           if (degree != 1 && degree != 3) {  // Assumes expected degrees.
               inconsistencies++;
           }
       }
       if (inconsistencies > degrees.size() / 10) {  // Arbitrary threshold for mismatch.
           cerr << "Warning: Performance bottleneck condition triggered - vertex degree mismatches detected!" << endl;
           abort();
       }
   }
   ```

4. **Constraints of K-Multihedgehog Condition**:
   - **Checker Code**:
   ```cpp
   void check_k_multihedgehog_constraint(int K, int N) {
       if (K > N / 2) {  // Arbitrary threshold for K relative to N.
           cerr << "Warning: Performance bottleneck condition triggered - excessive K relative to N!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checks into C++ Program

Below is the modified C++ program with the integrated performance checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;

int N, K;
vector<int> E[101010];
int D[101010];
vector<int> Ds[101010];

// Function prototypes for the invariant checks
void check_bfs_exhaustive_traversal(int N, const vector<int>& degrees);
void check_excessive_iteration(int K, int N);
void check_vertex_degree_mismatch(const vector<int>& degrees);
void check_k_multihedgehog_constraint(int K, int N);

void solve() {
    int i, j, k, l, r, x, y;
    string s;
    cin >> N >> K;
    
    vector<int> degrees(N, 0);
    
    for (i = 0; i < (N - 1); i++) {
        cin >> x >> y;
        E[x - 1].push_back(y - 1);
        E[y - 1].push_back(x - 1);
        degrees[x - 1]++;
        degrees[y - 1]++;
    }

    // Insert checks based on performance-characterizing invariants
    check_bfs_exhaustive_traversal(N, degrees);
    check_excessive_iteration(K, N);
    check_vertex_degree_mismatch(degrees);
    check_k_multihedgehog_constraint(K, N);

    if (N == 1) return (void)printf("No\n");

    queue<int> Q;
    for (i = 0; i < (N); i++) {
        D[i] = 101010;
        if (E[i].size() == 1) {
            D[i] = 0;
            Q.push(i);
        }
    }
    while (Q.size()) {
        x = Q.front();
        Q.pop();
        Ds[D[x]].push_back(x);
        for (auto& e : E[x])
            if (D[e] > D[x] + 1) {
                D[e] = D[x] + 1;
                Q.push(e);
            }
    }
    if (K > 100000 || Ds[K].size() != 1) return (void)printf("No\n");
    x = 0;
    for (i = K + 1; i <= 101000; i++) x += Ds[i].size();
    if (x) return (void)printf("No\n");
    for (i = 0; i < (N); i++)
        if (D[i]) {
            int num = 0;
            for (auto& e : E[i]) {
                if (D[e] == D[i] + 1)
                    continue;
                else if (D[e] == D[i] - 1)
                    num++;
                else
                    return (void)printf("No\n");
            }
            if (num < 3) return (void)printf("No\n");
        }
    (void)printf("Yes\n");
}

int main(int argc, char** argv) {
    string s;
    int i;
    if (argc == 1) ios::sync_with_stdio(false), cin.tie(0);
    for (i = 0; i < (argc - 1); i++) s += argv[i + 1], s += '\n';
    for (i = 0; i < (s.size()); i++) ungetc(s[s.size() - 1 - i], stdin);
    cout.tie(0);
    solve();
    return 0;
}

// Function definitions for the invariant checks
void check_bfs_exhaustive_traversal(int N, const vector<int>& degrees) {
    int leaf_count = 0;
    for (int degree : degrees) {
        if (degree == 1) {
            leaf_count++;
        }
    }
    if (N > 10 && leaf_count > N / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - exhaustive BFS traversal due to many leaf nodes!" << endl;
        abort();
    }
}

void check_excessive_iteration(int K, int N) {
    if (K < N / 10) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive iteration due to small K!" << endl;
        abort();
    }
}

void check_vertex_degree_mismatch(const vector<int>& degrees) {
    int inconsistencies = 0;
    for (int degree : degrees) {
        if (degree != 1 && degree != 3) {
            inconsistencies++;
        }
    }
    if (inconsistencies > degrees.size() / 10) {
        cerr << "Warning: Performance bottleneck condition triggered - vertex degree mismatches detected!" << endl;
        abort();
    }
}

void check_k_multihedgehog_constraint(int K, int N) {
    if (K > N / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive K relative to N!" << endl;
        abort();
    }
}
```

### Explanation

- **Checker Functions**: Four functions have been added to implement the runtime checks based on the derived invariants.
- **Integration Points**: The checks are called right after input reading and before any major computation begins. This helps catch potential performance issues early.
- **Abort on Bottleneck**: If any potential bottleneck condition is detected based on the checker logic, the program issues a warning and aborts. This behavior is useful for debugging and identifying paths that trigger slow execution.

