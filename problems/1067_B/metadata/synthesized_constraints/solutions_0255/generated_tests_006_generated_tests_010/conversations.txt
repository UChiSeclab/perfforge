system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Someone give a strange birthday present to Ivan. It is hedgehog — connected undirected graph in which one vertex has degree at least 3 (we will call it center) and all other vertices has degree 1. Ivan thought that hedgehog is too boring and decided to make himself k-multihedgehog.

Let us define k-multihedgehog as follows:

  * 1-multihedgehog is hedgehog: it has one vertex of degree at least 3 and some vertices of degree 1.
  * For all k ≥ 2, k-multihedgehog is (k-1)-multihedgehog in which the following changes has been made for each vertex v with degree 1: let u be its only neighbor; remove vertex v, create a new hedgehog with center at vertex w and connect vertices u and w with an edge. New hedgehogs can differ from each other and the initial gift. 



Thereby k-multihedgehog is a tree. Ivan made k-multihedgehog but he is not sure that he did not make any mistakes. That is why he asked you to check if his tree is indeed k-multihedgehog.

Input

First line of input contains 2 integers n, k (1 ≤ n ≤ 10^{5}, 1 ≤ k ≤ 10^{9}) — number of vertices and hedgehog parameter.

Next n-1 lines contains two integers u v (1 ≤ u,    v ≤ n;    u ≠ v) — indices of vertices connected by edge.

It is guaranteed that given graph is a tree.

Output

Print "Yes" (without quotes), if given graph is k-multihedgehog, and "No" (without quotes) otherwise.

Examples

Input

14 2
1 4
2 4
3 4
4 13
10 5
11 5
12 5
14 5
5 13
6 7
8 6
13 6
9 6


Output

Yes


Input

3 1
1 3
2 3


Output

No

Note

2-multihedgehog from the first example looks like this:

<image>

Its center is vertex 13. Hedgehogs created on last step are: [4 (center), 1, 2, 3], [6 (center), 7, 8, 9], [5 (center), 10, 11, 12, 13].

Tree from second example is not a hedgehog because degree of center should be at least 3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long int n, k, l;
vector<vector<long long int> > adj;
vector<bool> visited;
long long int d[100006] = {INT_MAX};
long long int MOD = 1000000007;
long long int level[100006];
long long int dis2[100006];
long long int degree[100006] = {0};
long long int distance(long long int x) {
  long long int last = x;
  for (long long int j = 1; j <= n; j++) d[j] = INT_MAX;
  queue<long long int> q;
  q.push(x);
  d[x] = 0;
  long long int node = x;
  while (!q.empty()) {
    node = q.front();
    q.pop();
    for (auto it : adj[node]) {
      if (d[it] > (d[node] + 1)) {
        d[it] = d[node] + 1;
        q.push(it);
      }
    }
  }
  return node;
}
void get_farthest2(int node) {
  int i;
  for (i = 0; i <= 100001; i++) {
    dis2[i] = MOD;
  }
  dis2[node] = 0;
  queue<int> q;
  q.push(node);
  while (!q.empty()) {
    int x = q.front();
    q.pop();
    for (auto it : adj[x]) {
      if (dis2[it] > (dis2[x] + 1)) {
        dis2[it] = dis2[x] + 1;
        q.push(it);
      }
    }
  }
}
int main() {
  for (long long int i = 0; i <= 100001; i++) {
    level[i] = MOD;
    degree[i] = 0;
  }
  long long int i, a, b;
  cin >> n >> k;
  if (n == 1) {
    cout << "No" << endl;
    return 0;
  }
  adj.resize(n + 1);
  long long int center = 0;
  for (i = 1; i < n; i++) {
    cin >> a >> b;
    adj[a].push_back(b);
    adj[b].push_back(a);
    degree[a]++;
    degree[b]++;
  }
  long long int x = distance(1);
  long long int y = distance(x);
  get_farthest2(y);
  long long int ans = 1;
  if ((d[y] % 2 == 1) || k > n || (dis2[x] % 2 == 1)) {
    cout << "No" << endl;
    return 0;
  }
  for (i = 1; i <= n; i++)
    if ((d[i] == dis2[i]) && (adj[i].size() >= 3) && (d[i] == (d[y] / 2))) {
      center = i;
      break;
    }
  if (center == 0) {
    cout << "No" << endl;
    return 0;
  }
  queue<int> qu;
  long long int centre = center;
  qu.push(centre);
  level[centre] = 1;
  while (!qu.empty()) {
    int xx = qu.front();
    qu.pop();
    if (xx == centre && degree[xx] < 3) {
      cout << "No";
      return 0;
    } else if ((degree[xx] < 4) && (level[xx] <= k) && (xx != centre)) {
      cout << "No";
      return 0;
    } else if (level[xx] > k && degree[xx] != 1) {
      cout << "No";
      return 0;
    }
    for (auto it : adj[xx]) {
      if (level[it] > level[xx] + 1) {
        level[it] = level[xx] + 1;
        qu.push(it);
      }
    }
  }
  cout << "Yes" << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

21 2
3 1
4 1
5 1
6 2
7 2
8 2
1 2
9 1
9 10
14 11
9 12
10 13
10 14
10 15
11 16
11 17
11 18
12 19
12 20
12 21


(G.2) Fast Input

1 1
4 1
3 1
5 1
1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long int n, k, l; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<long long int> > adj; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<bool> visited; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long int d[100006] = {INT_MAX}; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long int MOD = 1000000007; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long int level[100006]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long int dis2[100006]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
long long int degree[100006] = {0}; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
long long int distance(long long int x) { /* line 11 slow_hit_count: 2, fast_hit_count: 0 */
  long long int last = x; /* line 12 slow_hit_count: 2, fast_hit_count: 0 */
  for (long long int j = 1; j <= n; j++) d[j] = INT_MAX; /* line 13 slow_hit_count: 44, fast_hit_count: 0 */
  queue<long long int> q; /* line 14 slow_hit_count: 2, fast_hit_count: 0 */
  q.push(x); /* line 15 slow_hit_count: 2, fast_hit_count: 0 */
  d[x] = 0; /* line 16 slow_hit_count: 2, fast_hit_count: 0 */
  long long int node = x; /* line 17 slow_hit_count: 2, fast_hit_count: 0 */
  while (!q.empty()) { /* line 18 slow_hit_count: 44, fast_hit_count: 0 */
    node = q.front(); /* line 19 slow_hit_count: 42, fast_hit_count: 0 */
    q.pop(); /* line 20 slow_hit_count: 42, fast_hit_count: 0 */
    for (auto it : adj[node]) { /* line 21 slow_hit_count: 122, fast_hit_count: 0 */
      if (d[it] > (d[node] + 1)) { /* line 22 slow_hit_count: 80, fast_hit_count: 0 */
        d[it] = d[node] + 1; /* line 23 slow_hit_count: 40, fast_hit_count: 0 */
        q.push(it); /* line 24 slow_hit_count: 40, fast_hit_count: 0 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  return node; /* line 28 slow_hit_count: 4, fast_hit_count: 0 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
void get_farthest2(int node) { /* line 30 slow_hit_count: 1, fast_hit_count: 0 */
  int i; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i <= 100001; i++) { /* line 32 slow_hit_count: 100003, fast_hit_count: 0 */
    dis2[i] = MOD; /* line 33 slow_hit_count: 100002, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  dis2[node] = 0; /* line 35 slow_hit_count: 1, fast_hit_count: 0 */
  queue<int> q; /* line 36 slow_hit_count: 2, fast_hit_count: 0 */
  q.push(node); /* line 37 slow_hit_count: 1, fast_hit_count: 0 */
  while (!q.empty()) { /* line 38 slow_hit_count: 22, fast_hit_count: 0 */
    int x = q.front(); /* line 39 slow_hit_count: 21, fast_hit_count: 0 */
    q.pop(); /* line 40 slow_hit_count: 21, fast_hit_count: 0 */
    for (auto it : adj[x]) { /* line 41 slow_hit_count: 61, fast_hit_count: 0 */
      if (dis2[it] > (dis2[x] + 1)) { /* line 42 slow_hit_count: 40, fast_hit_count: 0 */
        dis2[it] = dis2[x] + 1; /* line 43 slow_hit_count: 20, fast_hit_count: 0 */
        q.push(it); /* line 44 slow_hit_count: 20, fast_hit_count: 0 */
      } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 48 slow_hit_count: 1, fast_hit_count: 0 */
int main() { /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long int i = 0; i <= 100001; i++) { /* line 50 slow_hit_count: 100003, fast_hit_count: 100003 */
    level[i] = MOD; /* line 51 slow_hit_count: 100002, fast_hit_count: 100002 */
    degree[i] = 0; /* line 52 slow_hit_count: 100002, fast_hit_count: 100002 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  long long int i, a, b; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  if (n == 1) { /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "No" << endl; /* line 57 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 58 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  adj.resize(n + 1); /* line 60 slow_hit_count: 1, fast_hit_count: 0 */
  long long int center = 0; /* line 61 slow_hit_count: 1, fast_hit_count: 0 */
  for (i = 1; i < n; i++) { /* line 62 slow_hit_count: 21, fast_hit_count: 0 */
    cin >> a >> b; /* line 63 slow_hit_count: 20, fast_hit_count: 0 */
    adj[a].push_back(b); /* line 64 slow_hit_count: 20, fast_hit_count: 0 */
    adj[b].push_back(a); /* line 65 slow_hit_count: 20, fast_hit_count: 0 */
    degree[a]++; /* line 66 slow_hit_count: 20, fast_hit_count: 0 */
    degree[b]++; /* line 67 slow_hit_count: 20, fast_hit_count: 0 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  long long int x = distance(1); /* line 69 slow_hit_count: 1, fast_hit_count: 0 */
  long long int y = distance(x); /* line 70 slow_hit_count: 1, fast_hit_count: 0 */
  get_farthest2(y); /* line 71 slow_hit_count: 1, fast_hit_count: 0 */
  long long int ans = 1; /* line 72 slow_hit_count: 1, fast_hit_count: 0 */
  if ((d[y] % 2 == 1) || k > n || (dis2[x] % 2 == 1)) { /* line 73 slow_hit_count: 1, fast_hit_count: 0 */
    cout << "No" << endl; /* line 74 slow_hit_count: 1, fast_hit_count: 0 */
    return 0; /* line 75 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 1; i <= n; i++) /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
    if ((d[i] == dis2[i]) && (adj[i].size() >= 3) && (d[i] == (d[y] / 2))) { /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
      center = i; /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
      break; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  if (center == 0) { /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "No" << endl; /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
  queue<int> qu; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
  long long int centre = center; /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  qu.push(centre); /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  level[centre] = 1; /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  while (!qu.empty()) { /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
    int xx = qu.front(); /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
    qu.pop(); /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
    if (xx == centre && degree[xx] < 3) { /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
      cout << "No"; /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
    } else if ((degree[xx] < 4) && (level[xx] <= k) && (xx != centre)) { /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
      cout << "No"; /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
    } else if (level[xx] > k && degree[xx] != 1) { /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
      cout << "No"; /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto it : adj[xx]) { /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
      if (level[it] > level[xx] + 1) { /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
        level[it] = level[xx] + 1; /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
        qu.push(it); /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 107 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "Yes" << endl; /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 111 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 112 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose why the program runs slowly for the slow input, we can analyze the given code and generate performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

**Step 1: Compare Line-Level Hit Counts**
- The most significant differences in hit counts between the slow and fast inputs are noted in the `distance` and `get_farthest2` functions.
- Specifically, the line-level hit counts indicate extensive use of the `distance` function (lines 11 to 28) and `get_farthest2` function (lines 30 to 48) for the slow input, while these functions are not executed for the fast input.

**Step 2: Pinpoint Lines or Functions with More Hits**
- Lines 18-27 in the `distance` function and lines 38-47 in the `get_farthest2` function have high hit counts. These lines are in a breadth-first search (BFS) loop, indicating repeated traversal of a potential large search space.

**Step 3: Infer Interaction with Data Structures**
- The BFS in the `distance` function suggests that the tree structure is traversed multiple times, leading to potentially high computational overhead. Similarly, the use of BFS in `get_farthest2` indicates further traversal.
- The repeated execution of these loops likely relates to the structure of the input graph, which might cause more vertices or edges to be processed compared to the fast input.

### Phase 2: Derive Performance-Characterizing Invariants

**Invariant 1: Extensive BFS Traversal due to Tree Structure**
- **Natural Language Description**: "If the tree structure results in repeated traversal of many vertices within BFS loops, the computation may become expensive. This is likely when the graph has a large diameter or when degree-1 vertices are spread across different levels, causing repeated processing."
- **Reasoning**: The slow path is triggered when the BFS has to explore a larger portion of the graph, which could happen if the structure of the tree causes more levels or branches to be processed repeatedly.

**Invariant 2: Inefficient Handling of Large `k` Values**
- **Natural Language Description**: "If the value of `k` is large relative to `n`, or when `k` influences the need to verify multiple levels or distant connections in the BFS, the execution may slow down significantly."
- **Reasoning**: The variable `k` governs the multihedgehog transformation and verification. A high `k` could necessitate more checks or deeper BFS traversal, especially when `k` approaches or exceeds certain thresholds relative to `n`.

**Invariant 3: High Degree of Key Vertices**
- **Natural Language Description**: "If vertices with high degree (especially the center and its immediate connections) are positioned such that the BFS revisits these nodes multiple times, performance may degrade."
- **Reasoning**: The central vertex of the hedgehog structure may influence the BFS traversal pattern. If these vertices have high degrees and are repeatedly revisited, the overhead of processing their adjacent nodes increases.

### Summary
- The performance bottleneck is primarily related to the BFS traversal pattern and its interaction with the tree structure. 
- Reducing the impact of high-degree vertices and optimizing the BFS traversal for large `k` values can mitigate potential slowdowns.
- The natural language invariants help highlight scenarios where sluggish performance can occur, without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Someone give a strange birthday present to Ivan. It is hedgehog — connected undirected graph in which one vertex has degree at least 3 (we will call it center) and all other vertices has degree 1. Ivan thought that hedgehog is too boring and decided to make himself k-multihedgehog.

Let us define k-multihedgehog as follows:

  * 1-multihedgehog is hedgehog: it has one vertex of degree at least 3 and some vertices of degree 1.
  * For all k ≥ 2, k-multihedgehog is (k-1)-multihedgehog in which the following changes has been made for each vertex v with degree 1: let u be its only neighbor; remove vertex v, create a new hedgehog with center at vertex w and connect vertices u and w with an edge. New hedgehogs can differ from each other and the initial gift. 



Thereby k-multihedgehog is a tree. Ivan made k-multihedgehog but he is not sure that he did not make any mistakes. That is why he asked you to check if his tree is indeed k-multihedgehog.

Input

First line of input contains 2 integers n, k (1 ≤ n ≤ 10^{5}, 1 ≤ k ≤ 10^{9}) — number of vertices and hedgehog parameter.

Next n-1 lines contains two integers u v (1 ≤ u,    v ≤ n;    u ≠ v) — indices of vertices connected by edge.

It is guaranteed that given graph is a tree.

Output

Print "Yes" (without quotes), if given graph is k-multihedgehog, and "No" (without quotes) otherwise.

Examples

Input

14 2
1 4
2 4
3 4
4 13
10 5
11 5
12 5
14 5
5 13
6 7
8 6
13 6
9 6


Output

Yes


Input

3 1
1 3
2 3


Output

No

Note

2-multihedgehog from the first example looks like this:

<image>

Its center is vertex 13. Hedgehogs created on last step are: [4 (center), 1, 2, 3], [6 (center), 7, 8, 9], [5 (center), 10, 11, 12, 13].

Tree from second example is not a hedgehog because degree of center should be at least 3.

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants in C++ and integrate them into the provided program.

### Phase 3: Implement the Natural Language Invariants in C++

**Invariant 1: Extensive BFS Traversal due to Tree Structure**
```cpp
void check_bfs_traversal(int bfsCount, int n) {
    if (bfsCount > n * 2) { // Assuming traversal could be significant if more than 2x the nodes
        cerr << "Warning: Performance bottleneck condition triggered - excessive BFS traversal!" << endl;
        abort();
    }
}
```

**Invariant 2: Inefficient Handling of Large `k` Values**
```cpp
void check_k_value(long long k, long long n) {
    if (k > n / 2) { // Arbitrary threshold, k should not be overwhelmingly large compared to n
        cerr << "Warning: Performance bottleneck condition triggered - large k value!" << endl;
        abort();
    }
}
```

**Invariant 3: High Degree of Key Vertices**
```cpp
void check_high_degree(const vector<long long>& degree, int n) {
    int highDegreeCount = 0;
    for (int i = 1; i <= n; ++i) {
        if (degree[i] > 3) { // Assuming high degree if more than 3
            highDegreeCount++;
        }
    }
    if (highDegreeCount > n / 10) { // Arbitrary threshold: if too many nodes have high degree
        cerr << "Warning: Performance bottleneck condition triggered - many high-degree vertices!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checks into the Original Program

```cpp
#include <bits/stdc++.h>
using namespace std;

long long int n, k, l;
vector<vector<long long int> > adj;
vector<bool> visited;
long long int d[100006] = {INT_MAX};
long long int MOD = 1000000007;
long long int level[100006];
long long int dis2[100006];
long long int degree[100006] = {0};

void check_bfs_traversal(int bfsCount, int n) {
    if (bfsCount > n * 2) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive BFS traversal!" << endl;
        abort();
    }
}

void check_k_value(long long k, long long n) {
    if (k > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - large k value!" << endl;
        abort();
    }
}

void check_high_degree(const vector<long long>& degree, int n) {
    int highDegreeCount = 0;
    for (int i = 1; i <= n; ++i) {
        if (degree[i] > 3) {
            highDegreeCount++;
        }
    }
    if (highDegreeCount > n / 10) {
        cerr << "Warning: Performance bottleneck condition triggered - many high-degree vertices!" << endl;
        abort();
    }
}

long long int distance(long long int x) {
    long long int last = x;
    for (long long int j = 1; j <= n; j++) d[j] = INT_MAX;
    queue<long long int> q;
    q.push(x);
    d[x] = 0;
    long long int node = x;
    int bfsCount = 0; // Tracking BFS operations
    while (!q.empty()) {
        node = q.front();
        q.pop();
        bfsCount++;
        for (auto it : adj[node]) {
            if (d[it] > (d[node] + 1)) {
                d[it] = d[node] + 1;
                q.push(it);
            }
        }
    }
    check_bfs_traversal(bfsCount, n); // Check BFS traversal bottleneck
    return node;
}

void get_farthest2(int node) {
    int i;
    for (i = 0; i <= 100001; i++) {
        dis2[i] = MOD;
    }
    dis2[node] = 0;
    queue<int> q;
    q.push(node);
    while (!q.empty()) {
        int x = q.front();
        q.pop();
        for (auto it : adj[x]) {
            if (dis2[it] > (dis2[x] + 1)) {
                dis2[it] = dis2[x] + 1;
                q.push(it);
            }
        }
    }
}

int main() {
    for (long long int i = 0; i <= 100001; i++) {
        level[i] = MOD;
        degree[i] = 0;
    }
    long long int i, a, b;
    cin >> n >> k;

    check_k_value(k, n); // Check k value bottleneck

    if (n == 1) {
        cout << "No" << endl;
        return 0;
    }
    adj.resize(n + 1);
    long long int center = 0;
    for (i = 1; i < n; i++) {
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
        degree[a]++;
        degree[b]++;
    }

    check_high_degree(degree, n); // Check high degree bottleneck

    long long int x = distance(1);
    long long int y = distance(x);
    get_farthest2(y);
    
    long long int ans = 1;
    if ((d[y] % 2 == 1) || k > n || (dis2[x] % 2 == 1)) {
        cout << "No" << endl;
        return 0;
    }
    for (i = 1; i <= n; i++)
        if ((d[i] == dis2[i]) && (adj[i].size() >= 3) && (d[i] == (d[y] / 2))) {
            center = i;
            break;
        }
    if (center == 0) {
        cout << "No" << endl;
        return 0;
    }
    queue<int> qu;
    long long int centre = center;
    qu.push(centre);
    level[centre] = 1;
    while (!qu.empty()) {
        int xx = qu.front();
        qu.pop();
        if (xx == centre && degree[xx] < 3) {
            cout << "No";
            return 0;
        } else if ((degree[xx] < 4) && (level[xx] <= k) && (xx != centre)) {
            cout << "No";
            return 0;
        } else if (level[xx] > k && degree[xx] != 1) {
            cout << "No";
            return 0;
        }
        for (auto it : adj[xx]) {
            if (level[it] > level[xx] + 1) {
                level[it] = level[xx] + 1;
                qu.push(it);
            }
        }
    }
    cout << "Yes" << endl;
    return 0;
}
```

### Explanation
- **Integration of Invariants**: The checks are integrated at strategic points in the code to detect potential performance bottlenecks without adding overhead in tight loops.
- **Placement of Checks**:
  - `check_bfs_traversal` is called within the BFS function to monitor traversal overhead.
  - `check_k_value` is called early in `main` after reading input.
  - `check_high_degree` is invoked after edges are input to assess vertex degrees.

These checks aim to alert developers to conditions that could lead to slow performance, aiding in debugging and optimization efforts.

