system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Someone give a strange birthday present to Ivan. It is hedgehog — connected undirected graph in which one vertex has degree at least 3 (we will call it center) and all other vertices has degree 1. Ivan thought that hedgehog is too boring and decided to make himself k-multihedgehog.

Let us define k-multihedgehog as follows:

  * 1-multihedgehog is hedgehog: it has one vertex of degree at least 3 and some vertices of degree 1.
  * For all k ≥ 2, k-multihedgehog is (k-1)-multihedgehog in which the following changes has been made for each vertex v with degree 1: let u be its only neighbor; remove vertex v, create a new hedgehog with center at vertex w and connect vertices u and w with an edge. New hedgehogs can differ from each other and the initial gift. 



Thereby k-multihedgehog is a tree. Ivan made k-multihedgehog but he is not sure that he did not make any mistakes. That is why he asked you to check if his tree is indeed k-multihedgehog.

Input

First line of input contains 2 integers n, k (1 ≤ n ≤ 10^{5}, 1 ≤ k ≤ 10^{9}) — number of vertices and hedgehog parameter.

Next n-1 lines contains two integers u v (1 ≤ u,    v ≤ n;    u ≠ v) — indices of vertices connected by edge.

It is guaranteed that given graph is a tree.

Output

Print "Yes" (without quotes), if given graph is k-multihedgehog, and "No" (without quotes) otherwise.

Examples

Input

14 2
1 4
2 4
3 4
4 13
10 5
11 5
12 5
14 5
5 13
6 7
8 6
13 6
9 6


Output

Yes


Input

3 1
1 3
2 3


Output

No

Note

2-multihedgehog from the first example looks like this:

<image>

Its center is vertex 13. Hedgehogs created on last step are: [4 (center), 1, 2, 3], [6 (center), 7, 8, 9], [5 (center), 10, 11, 12, 13].

Tree from second example is not a hedgehog because degree of center should be at least 3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
bool is_khog(vector<int> vertices, vector<vector<int>> edges, int K);
int main() {
  int N, K;
  cin >> N >> K;
  int ms = 4;
  for (int i = 2; i <= K; ++i) {
    ms *= 3;
    if (ms > N) {
      cout << "No" << endl;
      return 0;
    }
  }
  vector<int> vertices;
  for (int i = 1; i <= N; ++i) {
    vertices.push_back(i);
  }
  vector<vector<int>> E(N + 1);
  for (int i = 1; i < N; ++i) {
    int u, v;
    cin >> u >> v;
    E[u].push_back(v);
    E[v].push_back(u);
  }
  if (is_khog(vertices, E, K)) {
    cout << "Yes" << endl;
  } else {
    cout << "No" << endl;
  }
}
bool is_khog(vector<int> vertices, vector<vector<int>> edges, int K) {
  map<int, int> deg;
  vector<int> rem;
  for (auto &v : vertices) {
    if (edges[v].size() == 1) {
      int u = edges[v][0];
      deg[u]++;
    } else {
      rem.push_back(v);
    }
  }
  for (auto &v : deg) {
    if (v.second < 3) {
      return false;
    }
  }
  if (K == 1) {
    return (deg.size() == 1);
  }
  for (auto &v : deg) {
    vector<int> &adj = edges[v.first];
    bool f = false;
    while (adj.size() > 1) {
      int u = adj.back();
      if (edges[u].size() > 1) {
        if (f) {
          return false;
        }
        f = true;
        swap(adj[adj.size() - 1], adj[0]);
      } else {
        adj.pop_back();
      }
    }
  }
  return is_khog(rem, edges, K - 1);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

33 2
3 13
17 3
2 6
5 33
4 18
1 2
31 5
4 19
3 16
1 3
9 2
10 3
5 1
5 28
21 4
7 2
1 4
5 24
30 5
14 3
3 11
27 5
8 2
22 4
12 3
20 4
26 5
4 23
32 5
25 5
15 3
29 5


(G.2) Fast Input

1 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
bool is_khog(vector<int> vertices, vector<vector<int>> edges, int K); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int N, K; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> N >> K; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int ms = 4; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i <= K; ++i) { /* line 8 slow_hit_count: 2, fast_hit_count: 1 */
    ms *= 3; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
    if (ms > N) { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
      cout << "No" << endl; /* line 11 slow_hit_count: 0, fast_hit_count: 1 */
      return 0; /* line 12 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> vertices; /* line 15 slow_hit_count: 2, fast_hit_count: 0 */
  for (int i = 1; i <= N; ++i) { /* line 16 slow_hit_count: 34, fast_hit_count: 0 */
    vertices.push_back(i); /* line 17 slow_hit_count: 33, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  vector<vector<int>> E(N + 1); /* line 19 slow_hit_count: 2, fast_hit_count: 0 */
  for (int i = 1; i < N; ++i) { /* line 20 slow_hit_count: 33, fast_hit_count: 0 */
    int u, v; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> u >> v; /* line 22 slow_hit_count: 32, fast_hit_count: 0 */
    E[u].push_back(v); /* line 23 slow_hit_count: 32, fast_hit_count: 0 */
    E[v].push_back(u); /* line 24 slow_hit_count: 32, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  if (is_khog(vertices, E, K)) { /* line 26 slow_hit_count: 1, fast_hit_count: 0 */
    cout << "Yes" << endl; /* line 27 slow_hit_count: 1, fast_hit_count: 0 */
  } else { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "No" << endl; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 31 slow_hit_count: 1, fast_hit_count: 0 */
bool is_khog(vector<int> vertices, vector<vector<int>> edges, int K) { /* line 32 slow_hit_count: 2, fast_hit_count: 0 */
  map<int, int> deg; /* line 33 slow_hit_count: 4, fast_hit_count: 0 */
  vector<int> rem; /* line 34 slow_hit_count: 4, fast_hit_count: 0 */
  for (auto &v : vertices) { /* line 35 slow_hit_count: 40, fast_hit_count: 0 */
    if (edges[v].size() == 1) { /* line 36 slow_hit_count: 38, fast_hit_count: 0 */
      int u = edges[v][0]; /* line 37 slow_hit_count: 32, fast_hit_count: 0 */
      deg[u]++; /* line 38 slow_hit_count: 32, fast_hit_count: 0 */
    } else { /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      rem.push_back(v); /* line 40 slow_hit_count: 6, fast_hit_count: 0 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto &v : deg) { /* line 43 slow_hit_count: 7, fast_hit_count: 0 */
    if (v.second < 3) { /* line 44 slow_hit_count: 5, fast_hit_count: 0 */
      return false; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  if (K == 1) { /* line 48 slow_hit_count: 2, fast_hit_count: 0 */
    return (deg.size() == 1); /* line 49 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto &v : deg) { /* line 51 slow_hit_count: 5, fast_hit_count: 0 */
    vector<int> &adj = edges[v.first]; /* line 52 slow_hit_count: 4, fast_hit_count: 0 */
    bool f = false; /* line 53 slow_hit_count: 4, fast_hit_count: 0 */
    while (adj.size() > 1) { /* line 54 slow_hit_count: 36, fast_hit_count: 0 */
      int u = adj.back(); /* line 55 slow_hit_count: 32, fast_hit_count: 0 */
      if (edges[u].size() > 1) { /* line 56 slow_hit_count: 32, fast_hit_count: 0 */
        if (f) { /* line 57 slow_hit_count: 4, fast_hit_count: 0 */
          return false; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
        f = true; /* line 60 slow_hit_count: 4, fast_hit_count: 0 */
        swap(adj[adj.size() - 1], adj[0]); /* line 61 slow_hit_count: 4, fast_hit_count: 0 */
      } else { /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
        adj.pop_back(); /* line 63 slow_hit_count: 28, fast_hit_count: 0 */
      } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  return is_khog(rem, edges, K - 1); /* line 67 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 68 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count data for the slow and fast inputs, let's identify the lines of code that contribute to performance issues:

1. **Recursive Function Calls:** The function `is_khog` (lines 32-67) is called twice for the slow input, indicating recursion. The high hit counts on lines 35-67 suggest that this function is heavily involved in performance issues.
   
2. **Degree Check Loop:** The loop and operations within `is_khog` (lines 35-42) count degrees of vertices. The operations on lines 36-38 have significant hit counts, indicating frequent processing of vertices with degree 1, which leads to incrementing the degree of their neighboring nodes.

3. **Adjacency List Processing:** The nested loop (lines 51-66) processes adjacency lists. The high hit count on line 54 (the `while` loop) signals that it iterates many times, especially popping elements from adjacency lists (line 63).

These observations suggest that the recursive nature of `is_khog`, combined with heavy processing of adjacency lists, especially in the presence of multiple leaf vertices, contributes to the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, here are the natural language performance invariants that describe conditions leading to slow execution:

1. **High Degree of Recursion:**
   - **Invariant:** "If the graph has multiple layers of leaf nodes, requiring deeper levels of recursion, performance may degrade as the `is_khog` function is called recursively for each level."
   - **Explanation:** The recursive call to `is_khog` involves processing subgraphs formed by removing leaf nodes. More recursion levels imply higher computational overhead.

2. **Extensive Degree Processing:**
   - **Invariant:** "When the number of vertices with degree 1 is high, the repeated degree counting and adjacency list processing can slow down execution significantly."
   - **Explanation:** Each degree-1 vertex increases the degree of its neighbor, potentially leading to an extensive degree-check loop, affecting performance.

3. **Large Adjacency List Operations:**
   - **Invariant:** "If many adjacency lists are processed with multiple removals, this can lead to performance bottlenecks due to frequent operations on list structures."
   - **Explanation:** Frequent popping from adjacency lists, especially in nested loops, indicates excessive manipulation of data structures, reducing efficiency.

These invariants abstractly identify the conditions under which the code becomes less efficient, focusing on recursion depth, degree distribution, and adjacency list operations. They provide insight into potential future slow scenarios without relying on specific numeric details of the slow input.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Someone give a strange birthday present to Ivan. It is hedgehog — connected undirected graph in which one vertex has degree at least 3 (we will call it center) and all other vertices has degree 1. Ivan thought that hedgehog is too boring and decided to make himself k-multihedgehog.

Let us define k-multihedgehog as follows:

  * 1-multihedgehog is hedgehog: it has one vertex of degree at least 3 and some vertices of degree 1.
  * For all k ≥ 2, k-multihedgehog is (k-1)-multihedgehog in which the following changes has been made for each vertex v with degree 1: let u be its only neighbor; remove vertex v, create a new hedgehog with center at vertex w and connect vertices u and w with an edge. New hedgehogs can differ from each other and the initial gift. 



Thereby k-multihedgehog is a tree. Ivan made k-multihedgehog but he is not sure that he did not make any mistakes. That is why he asked you to check if his tree is indeed k-multihedgehog.

Input

First line of input contains 2 integers n, k (1 ≤ n ≤ 10^{5}, 1 ≤ k ≤ 10^{9}) — number of vertices and hedgehog parameter.

Next n-1 lines contains two integers u v (1 ≤ u,    v ≤ n;    u ≠ v) — indices of vertices connected by edge.

It is guaranteed that given graph is a tree.

Output

Print "Yes" (without quotes), if given graph is k-multihedgehog, and "No" (without quotes) otherwise.

Examples

Input

14 2
1 4
2 4
3 4
4 13
10 5
11 5
12 5
14 5
5 13
6 7
8 6
13 6
9 6


Output

Yes


Input

3 1
1 3
2 3


Output

No

Note

2-multihedgehog from the first example looks like this:

<image>

Its center is vertex 13. Hedgehogs created on last step are: [4 (center), 1, 2, 3], [6 (center), 7, 8, 9], [5 (center), 10, 11, 12, 13].

Tree from second example is not a hedgehog because degree of center should be at least 3.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ code snippets implementing the performance-characterizing invariants derived from Phase 2 as runtime checks:

1. **High Degree of Recursion:**

   This check ensures that the recursion doesn't go too deep, assuming a threshold that would be reasonable given the constraints of the problem.

   ```cpp
   void check_recursion_depth(int currentDepth, int maxAllowedDepth) {
       if (currentDepth > maxAllowedDepth) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth!" << endl;
           abort();
       }
   }
   ```

2. **Extensive Degree Processing:**
   
   This check is for ensuring a reasonable number of degree-1 vertices relative to the total vertices.

   ```cpp
   void check_degree_processing(int degreeOneCount, int totalVertices) {
       if (degreeOneCount > totalVertices / 2) { // Arbitrary threshold: more than half are leaves
           cerr << "Warning: Performance bottleneck condition triggered - too many degree-1 vertices!" << endl;
           abort();
       }
   }
   ```

3. **Large Adjacency List Operations:**

   This check ensures that we do not overly manipulate adjacency lists, which could slow down performance.

   ```cpp
   void check_adjacency_operations(int adjacencyOperations, int threshold) {
       if (adjacencyOperations > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive adjacency list operations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checks with the Original Program

Now, let's integrate these runtime checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check recursion depth
void check_recursion_depth(int currentDepth, int maxAllowedDepth) {
    if (currentDepth > maxAllowedDepth) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth!" << endl;
        abort();
    }
}

// Function to check the degree processing
void check_degree_processing(int degreeOneCount, int totalVertices) {
    if (degreeOneCount > totalVertices / 2) { // Arbitrary threshold: more than half are leaves
        cerr << "Warning: Performance bottleneck condition triggered - too many degree-1 vertices!" << endl;
        abort();
    }
}

// Function to check adjacency operations
void check_adjacency_operations(int adjacencyOperations, int threshold) {
    if (adjacencyOperations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive adjacency list operations!" << endl;
        abort();
    }
}

bool is_khog(vector<int> vertices, vector<vector<int>> edges, int K, int currentDepth) {
    check_recursion_depth(currentDepth, 100);  // Assuming 100 as a reasonable depth threshold

    map<int, int> deg;
    vector<int> rem;
    int degreeOneCount = 0;
    int adjacencyOperations = 0;

    for (auto &v : vertices) {
        if (edges[v].size() == 1) {
            int u = edges[v][0];
            deg[u]++;
            degreeOneCount++;
        } else {
            rem.push_back(v);
        }
    }

    check_degree_processing(degreeOneCount, vertices.size());

    for (auto &v : deg) {
        if (v.second < 3) {
            return false;
        }
    }

    if (K == 1) {
        return (deg.size() == 1);
    }

    for (auto &v : deg) {
        vector<int> &adj = edges[v.first];
        bool f = false;
        while (adj.size() > 1) {
            int u = adj.back();
            if (edges[u].size() > 1) {
                if (f) {
                    return false;
                }
                f = true;
                swap(adj[adj.size() - 1], adj[0]);
            } else {
                adj.pop_back();
            }
            adjacencyOperations++;
        }
    }

    check_adjacency_operations(adjacencyOperations, 10 * vertices.size());

    return is_khog(rem, edges, K - 1, currentDepth + 1);
}

int main() {
    int N, K;
    cin >> N >> K;
    int ms = 4;
    for (int i = 2; i <= K; ++i) {
        ms *= 3;
        if (ms > N) {
            cout << "No" << endl;
            return 0;
        }
    }
    vector<int> vertices;
    for (int i = 1; i <= N; ++i) {
        vertices.push_back(i);
    }
    vector<vector<int>> E(N + 1);
    for (int i = 1; i < N; ++i) {
        int u, v;
        cin >> u >> v;
        E[u].push_back(v);
        E[v].push_back(u);
    }
    if (is_khog(vertices, E, K, 0)) {
        cout << "Yes" << endl;
    } else {
        cout << "No" << endl;
    }
}
```

### Explanation
- **Recursion Depth Check:** Placed at the start of the recursive `is_khog` function to detect excessive recursion.
- **Degree Processing Check:** Positioned after counting degree-1 vertices to ensure this doesn't exceed sensible limits.
- **Adjacency List Operations Check:** Added towards the end of adjacency processing to capture excessive operations.

