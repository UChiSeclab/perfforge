system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n beacons located at distinct positions on a number line. The i-th beacon has position ai and power level bi. When the i-th beacon is activated, it destroys all beacons to its left (direction of decreasing coordinates) within distance bi inclusive. The beacon itself is not destroyed however. Saitama will activate the beacons one at a time from right to left. If a beacon is destroyed, it cannot be activated.

Saitama wants Genos to add a beacon strictly to the right of all the existing beacons, with any position and any power level, such that the least possible number of beacons are destroyed. Note that Genos's placement of the beacon means it will be the first beacon activated. Help Genos by finding the minimum number of beacons that could be destroyed.

Input

The first line of input contains a single integer n (1 ≤ n ≤ 100 000) — the initial number of beacons.

The i-th of next n lines contains two integers ai and bi (0 ≤ ai ≤ 1 000 000, 1 ≤ bi ≤ 1 000 000) — the position and power level of the i-th beacon respectively. No two beacons will have the same position, so ai ≠ aj if i ≠ j.

Output

Print a single integer — the minimum number of beacons that could be destroyed if exactly one beacon is added.

Examples

Input

4
1 9
3 1
6 1
7 4


Output

1


Input

7
1 1
2 1
3 1
4 1
5 1
6 1
7 1


Output

3

Note

For the first sample case, the minimum number of beacons destroyed is 1. One way to achieve this is to place a beacon at position 9 with power level 2.

For the second sample case, the minimum number of beacons destroyed is 3. One way to achieve this is to place a beacon at position 1337 with power level 42.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, i, j, d;
  vector<pair<int, int>> ab;
  cin >> n;
  for (i = 0; i < n; i++) {
    int a, b;
    cin >> a >> b;
    ab.push_back(make_pair(a, b));
  }
  sort(ab.begin(), ab.end());
  vector<int> cnt(ab.back().first + 2);
  vector<int> dst(ab.back().first + 1);
  for (auto p : ab) {
    cnt[p.first + 1]++;
  }
  for (i = 0; i < ab.back().first + 1; i++) cnt[i + 1] += cnt[i];
  j = 0;
  d = 0;
  for (i = 0; i < n; i++) {
    for (; j < ab[i].first; j++) {
      dst[j] = d;
    }
    dst[j] = cnt[j];
    if (ab[i].second <= j) dst[j] -= cnt[j - ab[i].second];
    if (ab[i].second < j) dst[j] += dst[j - ab[i].second - 1];
    d = dst[j];
  }
  int mn = n - cnt[0];
  for (i = 0; i < ab.back().first + 1; i++) {
    mn = min(mn, n - cnt[i + 1] + dst[i]);
  }
  cout << mn << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
1000000 1000000


(G.2) Fast Input

1
0 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, i, j, d; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  vector<pair<int, int>> ab; /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> n; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) { /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
    int a, b; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a >> b; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
    ab.push_back(make_pair(a, b)); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  sort(ab.begin(), ab.end()); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> cnt(ab.back().first + 2); /* line 13 slow_hit_count: 2, fast_hit_count: 2 */
  vector<int> dst(ab.back().first + 1); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto p : ab) { /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
    cnt[p.first + 1]++; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < ab.back().first + 1; i++) cnt[i + 1] += cnt[i]; /* line 18 slow_hit_count: 1000002, fast_hit_count: 2 */
  j = 0; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  d = 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) { /* line 21 slow_hit_count: 2, fast_hit_count: 2 */
    for (; j < ab[i].first; j++) { /* line 22 slow_hit_count: 1000001, fast_hit_count: 1 */
      dst[j] = d; /* line 23 slow_hit_count: 1000000, fast_hit_count: 0 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    dst[j] = cnt[j]; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    if (ab[i].second <= j) dst[j] -= cnt[j - ab[i].second]; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    if (ab[i].second < j) dst[j] += dst[j - ab[i].second - 1]; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
    d = dst[j]; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  int mn = n - cnt[0]; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < ab.back().first + 1; i++) { /* line 31 slow_hit_count: 1000002, fast_hit_count: 2 */
    mn = min(mn, n - cnt[i + 1] + dst[i]); /* line 32 slow_hit_count: 1000001, fast_hit_count: 1 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  cout << mn << endl; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the provided C code, let's go through the code analysis and derive performance characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - The lines with significantly higher hit counts in the slow input compared to the fast input are:
     - **Line 18:** `for (i = 0; i < ab.back().first + 1; i++) cnt[i + 1] += cnt[i];` (slow: 1,000,002 hits vs fast: 2 hits)
     - **Line 22:** `for (; j < ab[i].first; j++) {` (slow: 1,000,001 hits vs fast: 1 hit)
     - **Line 23:** `dst[j] = d;` (slow: 1,000,000 hits, fast: 0 hits)
     - **Line 31:** `for (i = 0; i < ab.back().first + 1; i++) {` (slow: 1,000,002 hits vs fast: 2 hits)
     - **Line 32:** `mn = min(mn, n - cnt[i + 1] + dst[i]);` (slow: 1,000,001 hits vs fast: 1 hit)

2. **Inference on Code Interaction:**
   - The lines with high hit counts suggest that the number of iterations in the loops is directly influenced by the value of `ab.back().first`, which is determined by the position of the beacons.
   - The slow input with `ab[i].first = 1,000,000` causes these loops to execute a million times, whereas the fast input with `ab[i].first = 0` results in far fewer iterations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following performance-characterizing invariants:

1. **Invariant 1: Iterative Operations Based on Position Values**
   - **Natural Language Description:** "The program may enter a slow path when the maximum position value of the beacons is large, leading to extensive iteration over data structures. This can happen if `ai` values are high, which increases loop bounds and thus the number of iterations."

2. **Invariant 2: Linear Traversal and Processing**
   - **Natural Language Description:** "The computations can be inefficient when iterating over large position ranges, causing linearly increasing processing times as the maximum position `ai` increases, even if the number of beacons `n` is small."

3. **Invariant 3: Dense Operation on Position Range**
   - **Natural Language Description:** "If a loop iterates over a range up to the highest position value, and this value is large relative to `n`, the program may slow down significantly due to repeated access and modification of arrays over this extended range."

### Explanation & Context

- These invariants focus on the impact of beacon positions on performance, which is a more significant factor than the number of beacons given the problem constraints and the provided inputs.
- The emphasis on position values leading to large loop bounds reflects realistic scenarios where position distributions might trigger slow execution paths.

By capturing these conditions, one can identify slow performance triggers when testing the program with various input distributions and help guide optimization efforts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n beacons located at distinct positions on a number line. The i-th beacon has position ai and power level bi. When the i-th beacon is activated, it destroys all beacons to its left (direction of decreasing coordinates) within distance bi inclusive. The beacon itself is not destroyed however. Saitama will activate the beacons one at a time from right to left. If a beacon is destroyed, it cannot be activated.

Saitama wants Genos to add a beacon strictly to the right of all the existing beacons, with any position and any power level, such that the least possible number of beacons are destroyed. Note that Genos's placement of the beacon means it will be the first beacon activated. Help Genos by finding the minimum number of beacons that could be destroyed.

Input

The first line of input contains a single integer n (1 ≤ n ≤ 100 000) — the initial number of beacons.

The i-th of next n lines contains two integers ai and bi (0 ≤ ai ≤ 1 000 000, 1 ≤ bi ≤ 1 000 000) — the position and power level of the i-th beacon respectively. No two beacons will have the same position, so ai ≠ aj if i ≠ j.

Output

Print a single integer — the minimum number of beacons that could be destroyed if exactly one beacon is added.

Examples

Input

4
1 9
3 1
6 1
7 4


Output

1


Input

7
1 1
2 1
3 1
4 1
5 1
6 1
7 1


Output

3

Note

For the first sample case, the minimum number of beacons destroyed is 1. One way to achieve this is to place a beacon at position 9 with power level 2.

For the second sample case, the minimum number of beacons destroyed is 3. One way to achieve this is to place a beacon at position 1337 with power level 42.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, here are the C++ checker code snippets for each invariant:

1. **Invariant 1: Iterative Operations Based on Position Values**

```cpp
void check_position_invariant(int maxPosition) {
    if (maxPosition > 100000) { // Choose a threshold that reflects a large position value relative to typical inputs
        cerr << "Warning: Performance bottleneck condition triggered - excessively high position value leading to extensive iterations!" << endl;
        abort();
    }
}
```

2. **Invariant 2: Linear Traversal and Processing**

```cpp
void check_linear_processing_invariant(int maxPosition, int n) {
    if (maxPosition > 10 * n) { // If position max is significantly larger than number of beacons, suspect performance issue
        cerr << "Warning: Performance bottleneck condition triggered - high position range relative to number of beacons!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Dense Operation on Position Range**

```cpp
void check_dense_operation_invariant(int maxPosition) {
    if (maxPosition > 100000) { // Reuse similar threshold as invariant 1 since it implies heavy operations on large range
        cerr << "Warning: Performance bottleneck condition triggered - dense operations on large position range!" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checker Code into the Original C++ Program

Here, we integrate the checker functions in appropriate places in the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for large position values
void check_position_invariant(int maxPosition) {
    if (maxPosition > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessively high position value leading to extensive iterations!" << endl;
        abort();
    }
}

// Checker function for linear processing
void check_linear_processing_invariant(int maxPosition, int n) {
    if (maxPosition > 10 * n) {
        cerr << "Warning: Performance bottleneck condition triggered - high position range relative to number of beacons!" << endl;
        abort();
    }
}

// Checker function for dense operations
void check_dense_operation_invariant(int maxPosition) {
    if (maxPosition > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - dense operations on large position range!" << endl;
        abort();
    }
}

int main() {
    int n, i, j, d;
    vector<pair<int, int>> ab;
    cin >> n;
    for (i = 0; i < n; i++) {
        int a, b;
        cin >> a >> b;
        ab.push_back(make_pair(a, b));
    }
    sort(ab.begin(), ab.end());

    int maxPosition = ab.back().first; // Calculate the maximum position for checking
    check_position_invariant(maxPosition);
    check_linear_processing_invariant(maxPosition, n);
    check_dense_operation_invariant(maxPosition);

    vector<int> cnt(maxPosition + 2);
    vector<int> dst(maxPosition + 1);

    for (auto p : ab) {
        cnt[p.first + 1]++;
    }
    for (i = 0; i < maxPosition + 1; i++) cnt[i + 1] += cnt[i];
    j = 0;
    d = 0;
    for (i = 0; i < n; i++) {
        for (; j < ab[i].first; j++) {
            dst[j] = d;
        }
        dst[j] = cnt[j];
        if (ab[i].second <= j) dst[j] -= cnt[j - ab[i].second];
        if (ab[i].second < j) dst[j] += dst[j - ab[i].second - 1];
        d = dst[j];
    }
    int mn = n - cnt[0];
    for (i = 0; i < maxPosition + 1; i++) {
        mn = min(mn, n - cnt[i + 1] + dst[i]);
    }
    cout << mn << endl;
    return 0;
}
```

### Explanation

- **Checker Integration:** The checker functions are added after beacon positions are read and sorted to prevent them from running inside performance-critical loops.
- **Position Check:** The maximum position is determined and checked against thresholds. This helps detect when large position values could potentially lead to performance issues.
- **Linear and Dense Checks:** They emphasize conditions when the position values disproportionately exceed beacon count, prompting expensive operations.

