system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n beacons located at distinct positions on a number line. The i-th beacon has position ai and power level bi. When the i-th beacon is activated, it destroys all beacons to its left (direction of decreasing coordinates) within distance bi inclusive. The beacon itself is not destroyed however. Saitama will activate the beacons one at a time from right to left. If a beacon is destroyed, it cannot be activated.

Saitama wants Genos to add a beacon strictly to the right of all the existing beacons, with any position and any power level, such that the least possible number of beacons are destroyed. Note that Genos's placement of the beacon means it will be the first beacon activated. Help Genos by finding the minimum number of beacons that could be destroyed.

Input

The first line of input contains a single integer n (1 ≤ n ≤ 100 000) — the initial number of beacons.

The i-th of next n lines contains two integers ai and bi (0 ≤ ai ≤ 1 000 000, 1 ≤ bi ≤ 1 000 000) — the position and power level of the i-th beacon respectively. No two beacons will have the same position, so ai ≠ aj if i ≠ j.

Output

Print a single integer — the minimum number of beacons that could be destroyed if exactly one beacon is added.

Examples

Input

4
1 9
3 1
6 1
7 4


Output

1


Input

7
1 1
2 1
3 1
4 1
5 1
6 1
7 1


Output

3

Note

For the first sample case, the minimum number of beacons destroyed is 1. One way to achieve this is to place a beacon at position 9 with power level 2.

For the second sample case, the minimum number of beacons destroyed is 3. One way to achieve this is to place a beacon at position 1337 with power level 42.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  ;
  int n, ans = INT_MIN;
  cin >> n;
  int a[n];
  map<int, int> m;
  for (int i = 0; i < n; i++) {
    int x;
    cin >> a[i] >> x;
    m[a[i]] = x;
  }
  sort(a, a + n);
  int dp[a[n - 1] + 1];
  for (int i = 0; i < a[n - 1] + 1; i++) {
    if (m[i] != 0) {
      if (i - m[i] - 1 >= 0)
        dp[i] = dp[i - m[i] - 1] + 1;
      else
        dp[i] = 1;
    } else
      dp[i] = i - 1 >= 0 ? dp[i - 1] : 0;
    ans = max(ans, dp[i]);
  }
  cout << n - ans << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
1000000 1000000


(G.2) Fast Input

1
0 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  int n, ans = INT_MIN; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  int a[n]; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  map<int, int> m; /* line 11 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) { /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
    int x; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a[i] >> x; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    m[a[i]] = x; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  sort(a, a + n); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  int dp[a[n - 1] + 1]; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < a[n - 1] + 1; i++) { /* line 19 slow_hit_count: 1000002, fast_hit_count: 2 */
    if (m[i] != 0) { /* line 20 slow_hit_count: 1000001, fast_hit_count: 1 */
      if (i - m[i] - 1 >= 0) /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
        dp[i] = dp[i - m[i] - 1] + 1; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
        dp[i] = 1; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
    } else /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      dp[i] = i - 1 >= 0 ? dp[i - 1] : 0; /* line 26 slow_hit_count: 1000000, fast_hit_count: 0 */
    ans = max(ans, dp[i]); /* line 27 slow_hit_count: 1000001, fast_hit_count: 1 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  cout << n - ans << "\n"; /* line 29 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 30 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The line `for (int i = 0; i < a[n - 1] + 1; i++)` is hit 1,000,002 times in the slow input and only 2 times in the fast input. This indicates that the loop is the main bottleneck for the slow input.
   - Line `if (m[i] != 0)` is executed 1,000,001 times for the slow input, while only once for the fast input, suggesting it is a frequent check that contributes to the loop's high execution count.
   - Line `dp[i] = i - 1 >= 0 ? dp[i - 1] : 0;` is executed 1,000,000 times on the slow input, but not at all on the fast input, showing that this operation within the loop is heavily repeated.

2. **Interaction with Data Structures:**
   - The loop iterates over a range from `0` to `a[n-1]`, which depends on the position of the furthest beacon (`a[n-1]`). In the slow input, this value is very large (1,000,000), causing the loop to execute many times.
   - The `dp` array is used to store results incrementally, and its size depends on the maximum position value of beacons (`a[n-1]`), leading to a significant increase in memory usage and iterations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Iteration Over Large Ranges:**
   - Natural language statement: "When the maximum position of beacons (a[n-1]) is very large, the number of iterations in the loop increases significantly, leading to a slow path."

2. **Dependency on Beacon Positions and Powers:**
   - Natural language statement: "Performance degrades when the power levels and positions of the beacons cause frequent, repetitive calculations, particularly when many positions up to the maximum beacon position must be checked."

3. **Inefficient Usage of Data Arrays:**
   - Natural language statement: "The program may slow down if large arrays are used for dynamic programming calculations that iterate over each possible position up to the highest value of beacon positions, consuming time and space."

### Concise Performance Invariants

1. **Iterating Over Large Position Ranges:**
   - If the maximum beacon position (`a[n-1]`) is close to the upper limit of 1,000,000, the loop iterates excessively, which is a major performance bottleneck.

2. **Extensive Dynamic Programming Calculations:**
   - When the input involves large power levels and position ranges, the resulting dynamic programming array becomes large, requiring extensive iterations and updates, which can slow down computation.

3. **Frequent Checks on Non-Zero Map Entries:**
   - The condition `if (m[i] != 0)` is checked repeatedly for large position ranges, which increases the processing time for large inputs with high power levels.

By recognizing these patterns, one can anticipate slow performance scenarios without directly relying on specific input values, focusing instead on structural properties of the input data that lead to inefficiencies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n beacons located at distinct positions on a number line. The i-th beacon has position ai and power level bi. When the i-th beacon is activated, it destroys all beacons to its left (direction of decreasing coordinates) within distance bi inclusive. The beacon itself is not destroyed however. Saitama will activate the beacons one at a time from right to left. If a beacon is destroyed, it cannot be activated.

Saitama wants Genos to add a beacon strictly to the right of all the existing beacons, with any position and any power level, such that the least possible number of beacons are destroyed. Note that Genos's placement of the beacon means it will be the first beacon activated. Help Genos by finding the minimum number of beacons that could be destroyed.

Input

The first line of input contains a single integer n (1 ≤ n ≤ 100 000) — the initial number of beacons.

The i-th of next n lines contains two integers ai and bi (0 ≤ ai ≤ 1 000 000, 1 ≤ bi ≤ 1 000 000) — the position and power level of the i-th beacon respectively. No two beacons will have the same position, so ai ≠ aj if i ≠ j.

Output

Print a single integer — the minimum number of beacons that could be destroyed if exactly one beacon is added.

Examples

Input

4
1 9
3 1
6 1
7 4


Output

1


Input

7
1 1
2 1
3 1
4 1
5 1
6 1
7 1


Output

3

Note

For the first sample case, the minimum number of beacons destroyed is 1. One way to achieve this is to place a beacon at position 9 with power level 2.

For the second sample case, the minimum number of beacons destroyed is 3. One way to achieve this is to place a beacon at position 1337 with power level 42.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Based on the natural language performance-characterizing invariants identified, we need to develop runtime checks that can detect these conditions in the program execution.

1. **Iterating Over Large Position Ranges:**
   - Natural language statement: "When the maximum position of beacons (a[n-1]) is very large, the number of iterations in the loop increases significantly, leading to a slow path."
   
   ```cpp
   void check_large_position_range(int maxPosition) {
       if (maxPosition > 100000) {  // Arbitrary threshold based on problem constraints
           cerr << "Warning: Performance bottleneck condition triggered - large position range!" << endl;
           abort();
       }
   }
   ```

2. **Extensive Dynamic Programming Calculations:**
   - Natural language statement: "Performance degrades when the power levels and positions of the beacons cause frequent, repetitive calculations."
   
   ```cpp
   void check_extensive_dp_calculations(int maxPosition, int n) {
       if (maxPosition > 100000 && n > 10000) {  // Thresholds based on problem constraints
           cerr << "Warning: Performance bottleneck condition triggered - extensive dynamic programming calculations!" << endl;
           abort();
       }
   }
   ```

3. **Frequent Checks on Non-Zero Map Entries:**
   - Natural language statement: "The program may slow down if many positions up to the maximum beacon position must be checked repeatedly."
   
   ```cpp
   void check_frequent_nonzero_checks(int maxPosition) {
       if (maxPosition > 50000) {  // Arbitrary threshold to indicate frequent non-zero checks
           cerr << "Warning: Performance bottleneck condition triggered - frequent non-zero checks!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checker Code into the Original Program

Now, we'll integrate these checks into the original C++ program at effective points in the control flow.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_large_position_range(int maxPosition) {
    if (maxPosition > 100000) {  // Arbitrary threshold based on problem constraints
        cerr << "Warning: Performance bottleneck condition triggered - large position range!" << endl;
        abort();
    }
}

void check_extensive_dp_calculations(int maxPosition, int n) {
    if (maxPosition > 100000 && n > 10000) {  // Thresholds based on problem constraints
        cerr << "Warning: Performance bottleneck condition triggered - extensive dynamic programming calculations!" << endl;
        abort();
    }
}

void check_frequent_nonzero_checks(int maxPosition) {
    if (maxPosition > 50000) {  // Arbitrary threshold to indicate frequent non-zero checks
        cerr << "Warning: Performance bottleneck condition triggered - frequent non-zero checks!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int n, ans = INT_MIN;
    cin >> n;
    int a[n];
    map<int, int> m;
    for (int i = 0; i < n; i++) {
        int x;
        cin >> a[i] >> x;
        m[a[i]] = x;
    }
    sort(a, a + n);

    // Integrate checkers with the maximum position of beacons
    int maxPosition = a[n - 1];
    check_large_position_range(maxPosition);
    check_extensive_dp_calculations(maxPosition, n);
    check_frequent_nonzero_checks(maxPosition);

    int dp[maxPosition + 1];
    for (int i = 0; i < maxPosition + 1; i++) {
        if (m[i] != 0) {
            if (i - m[i] - 1 >= 0)
                dp[i] = dp[i - m[i] - 1] + 1;
            else
                dp[i] = 1;
        } else
            dp[i] = i - 1 >= 0 ? dp[i - 1] : 0;
        ans = max(ans, dp[i]);
    }
    cout << n - ans << "\n";
}
```

### Explanation

- **Checker Placement:** Each checker function is called right after determining the maximum position of beacons. This ensures that the program detects performance bottleneck conditions early and avoids executing potentially expensive loops unnecessarily.
- **Effectiveness:** The checks are placed outside of tight loops to avoid introducing additional overhead during execution.
- **Utility for Fuzzing:** These checks serve as practical guards to warn of conditions that may lead to performance degradation, which is useful for stress testing the program with diverse inputs.

