system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n beacons located at distinct positions on a number line. The i-th beacon has position ai and power level bi. When the i-th beacon is activated, it destroys all beacons to its left (direction of decreasing coordinates) within distance bi inclusive. The beacon itself is not destroyed however. Saitama will activate the beacons one at a time from right to left. If a beacon is destroyed, it cannot be activated.

Saitama wants Genos to add a beacon strictly to the right of all the existing beacons, with any position and any power level, such that the least possible number of beacons are destroyed. Note that Genos's placement of the beacon means it will be the first beacon activated. Help Genos by finding the minimum number of beacons that could be destroyed.

Input

The first line of input contains a single integer n (1 ≤ n ≤ 100 000) — the initial number of beacons.

The i-th of next n lines contains two integers ai and bi (0 ≤ ai ≤ 1 000 000, 1 ≤ bi ≤ 1 000 000) — the position and power level of the i-th beacon respectively. No two beacons will have the same position, so ai ≠ aj if i ≠ j.

Output

Print a single integer — the minimum number of beacons that could be destroyed if exactly one beacon is added.

Examples

Input

4
1 9
3 1
6 1
7 4


Output

1


Input

7
1 1
2 1
3 1
4 1
5 1
6 1
7 1


Output

3

Note

For the first sample case, the minimum number of beacons destroyed is 1. One way to achieve this is to place a beacon at position 9 with power level 2.

For the second sample case, the minimum number of beacons destroyed is 3. One way to achieve this is to place a beacon at position 1337 with power level 42.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long int no_of_ones_on_right[1000010];
long long int minimum_destroyed[1000010];
long long int power[1000010] = {0};
int main() {
  ios_base::sync_with_stdio(false);
  long long int n, a, b, max_right = 0, n_right, n_destroyed;
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> a >> b;
    power[a] = b;
    max_right = max(max_right, a);
  }
  n_right = 0;
  for (int i = max_right; i >= 0; i--) {
    no_of_ones_on_right[i] = n_right;
    if (power[i] > 0) n_right++;
  }
  minimum_destroyed[0] = 0;
  for (int i = 1; i <= max_right; i++) {
    if (power[i] > 0) {
      if (i - power[i] - 1 < 0) {
        minimum_destroyed[i] = n_right - no_of_ones_on_right[i] - 1;
      } else
        minimum_destroyed[i] =
            (no_of_ones_on_right[(i - power[i] - 1) < 0 ? 0
                                                        : (i - power[i] - 1)] -
             no_of_ones_on_right[i] - 1) +
            minimum_destroyed[(i - power[i] - 1) < 0 ? 0 : (i - power[i] - 1)];
    } else {
      minimum_destroyed[i] = minimum_destroyed[i - 1];
    }
  }
  long long int ans = LONG_MAX;
  for (int i = 0; i <= max_right; i++) {
    ans = min(ans, minimum_destroyed[i] + no_of_ones_on_right[i]);
  }
  cout << ans << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
1000000 1000000


(G.2) Fast Input

1
0 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long int no_of_ones_on_right[1000010]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long int minimum_destroyed[1000010]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long int power[1000010] = {0}; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  long long int n, a, b, max_right = 0, n_right, n_destroyed; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> a >> b; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
    power[a] = b; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
    max_right = max(max_right, a); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  n_right = 0; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = max_right; i >= 0; i--) { /* line 16 slow_hit_count: 1000002, fast_hit_count: 2 */
    no_of_ones_on_right[i] = n_right; /* line 17 slow_hit_count: 1000001, fast_hit_count: 1 */
    if (power[i] > 0) n_right++; /* line 18 slow_hit_count: 1000001, fast_hit_count: 1 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  minimum_destroyed[0] = 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= max_right; i++) { /* line 21 slow_hit_count: 1000001, fast_hit_count: 1 */
    if (power[i] > 0) { /* line 22 slow_hit_count: 1000000, fast_hit_count: 0 */
      if (i - power[i] - 1 < 0) { /* line 23 slow_hit_count: 1, fast_hit_count: 0 */
        minimum_destroyed[i] = n_right - no_of_ones_on_right[i] - 1; /* line 24 slow_hit_count: 1, fast_hit_count: 0 */
      } else /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
        minimum_destroyed[i] = /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
            (no_of_ones_on_right[(i - power[i] - 1) < 0 ? 0 /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
                                                        : (i - power[i] - 1)] - /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
             no_of_ones_on_right[i] - 1) + /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
            minimum_destroyed[(i - power[i] - 1) < 0 ? 0 : (i - power[i] - 1)]; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      minimum_destroyed[i] = minimum_destroyed[i - 1]; /* line 32 slow_hit_count: 999999, fast_hit_count: 0 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  long long int ans = LONG_MAX; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= max_right; i++) { /* line 36 slow_hit_count: 1000002, fast_hit_count: 2 */
    ans = min(ans, minimum_destroyed[i] + no_of_ones_on_right[i]); /* line 37 slow_hit_count: 1000001, fast_hit_count: 1 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the hit count analysis and the provided code, we can proceed through the tasks to identify potential performance bottlenecks and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison**:
   - The slow run heavily hits the loop that iterates through beacon positions (lines 16-18 and lines 21-37) significantly more than the fast run. Specifically:
     - The loop at line 16 (iterating backward over all positions up to `max_right`) is executed 1,000,002 times for the slow input.
     - The loop at line 21 (iterating forward through positions) is executed 1,000,001 times for the slow input.

2. **Pinpointing Significant Hits**:
   - The backward loop (lines 16-18) is significantly hit due to the large value of `max_right` (1,000,000). This indicates iterating over a large search space.
   - The forward loop (lines 21-37) iterates over potential beacon positions, where most iterations involve checking and updating arrays.

3. **Interaction Analysis**:
   - The `power` array contains beacon power levels, and the nested update operations around `minimum_destroyed` and `no_of_ones_on_right` dictate the logic's complexity.
   - The bottleneck stems from iterating over a wide range (`max_right`), performing repeated checks and array updates.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following natural language invariants that describe conditions under which the program may encounter slow performance:

1. **Invariant Related to Large Position Values**:
   - **Natural Language Description**: "If the maximum beacon position (`max_right`) is very large, the program may perform excessive iterations, leading to slow execution. This is particularly noticeable when `max_right` approaches the upper constraint."
   - **Threshold Consideration**: Since `max_right` can theoretically be up to 1,000,000 based on input constraints, consider a threshold where performance degrades significantly when `max_right` is close to this upper bound.

2. **Invariant Related to Dense Activation**:
   - **Natural Language Description**: "If a significant portion of beacons have non-zero power levels close to their positions, the algorithm may incur additional overhead in maintaining or updating state arrays, resulting in performance slowdown."
   - **Threshold Consideration**: Consider scenarios where a large proportion of the positions up to `max_right` have associated power levels (`power[i] > 0`), leading to repeated state maintenance.

3. **Invariant Related to Array Operations**:
   - **Natural Language Description**: "When the program needs to iterate over and update state arrays across a large range of positions, it might experience slowed performance due to the repeated computation and memory handling."
   - **Threshold Consideration**: Conditions where loops iterate over nearly the entire possible range of positions (close to `max_right`).

These invariants generalize the conditions under which the program may slow down, allowing for identification of potential performance issues without relying on specific input values. They focus on characteristics such as maximum position values and beacon density, which are key performance drivers in the provided C program.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n beacons located at distinct positions on a number line. The i-th beacon has position ai and power level bi. When the i-th beacon is activated, it destroys all beacons to its left (direction of decreasing coordinates) within distance bi inclusive. The beacon itself is not destroyed however. Saitama will activate the beacons one at a time from right to left. If a beacon is destroyed, it cannot be activated.

Saitama wants Genos to add a beacon strictly to the right of all the existing beacons, with any position and any power level, such that the least possible number of beacons are destroyed. Note that Genos's placement of the beacon means it will be the first beacon activated. Help Genos by finding the minimum number of beacons that could be destroyed.

Input

The first line of input contains a single integer n (1 ≤ n ≤ 100 000) — the initial number of beacons.

The i-th of next n lines contains two integers ai and bi (0 ≤ ai ≤ 1 000 000, 1 ≤ bi ≤ 1 000 000) — the position and power level of the i-th beacon respectively. No two beacons will have the same position, so ai ≠ aj if i ≠ j.

Output

Print a single integer — the minimum number of beacons that could be destroyed if exactly one beacon is added.

Examples

Input

4
1 9
3 1
6 1
7 4


Output

1


Input

7
1 1
2 1
3 1
4 1
5 1
6 1
7 1


Output

3

Note

For the first sample case, the minimum number of beacons destroyed is 1. One way to achieve this is to place a beacon at position 9 with power level 2.

For the second sample case, the minimum number of beacons destroyed is 3. One way to achieve this is to place a beacon at position 1337 with power level 42.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

For each of the performance-characterizing invariants derived previously, here is the corresponding C++ checker code:

1. **Invariant Related to Large Position Values**:
   ```cpp
   void check_large_position_invariant(long long int max_right) {
       if (max_right > 900000) { // Threshold chosen near the upper bound
           cerr << "Warning: Performance bottleneck condition triggered - large maximum position value!" << endl;
           abort();
       }
   }
   ```

2. **Invariant Related to Dense Activation**:
   ```cpp
   void check_dense_activation_invariant(long long int n_actual_beacons, long long int n_effective_beacons) {
       if (static_cast<double>(n_effective_beacons) / n_actual_beacons > 0.8) { // Threshold set to 80% active beacons
           cerr << "Warning: Performance bottleneck condition triggered - dense activation of beacons!" << endl;
           abort();
       }
   }
   ```

3. **Invariant Related to Array Operations**:
   ```cpp
   void check_array_operation_invariant(long long int max_right) {
       if (max_right > 900000) { // Use similar threshold to large position invariant
           cerr << "Warning: Performance bottleneck condition triggered - excessive array operations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into Original Program

Below is the instrumented C++ code with the checker code integrated at the appropriate points. The checks are placed to ensure they do not add overhead inside tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for large maximum position value
void check_large_position_invariant(long long int max_right) {
    if (max_right > 900000) {
        cerr << "Warning: Performance bottleneck condition triggered - large maximum position value!" << endl;
        abort();
    }
}

// Checker for dense activation of beacons
void check_dense_activation_invariant(long long int n_actual_beacons, long long int n_effective_beacons) {
    if (static_cast<double>(n_effective_beacons) / n_actual_beacons > 0.8) {
        cerr << "Warning: Performance bottleneck condition triggered - dense activation of beacons!" << endl;
        abort();
    }
}

// Checker for excessive array operations
void check_array_operation_invariant(long long int max_right) {
    if (max_right > 900000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive array operations!" << endl;
        abort();
    }
}

long long int no_of_ones_on_right[1000010];
long long int minimum_destroyed[1000010];
long long int power[1000010] = {0};

int main() {
    ios_base::sync_with_stdio(false);
    long long int n, a, b, max_right = 0, n_right, n_destroyed;
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> a >> b;
        power[a] = b;
        max_right = max(max_right, a);
    }

    // Check the large position and array operation invariants after computing max_right
    check_large_position_invariant(max_right);
    check_array_operation_invariant(max_right);

    n_right = 0;
    long long int n_effective_beacons = 0;
    for (int i = max_right; i >= 0; i--) {
        no_of_ones_on_right[i] = n_right;
        if (power[i] > 0) {
            n_right++;
            n_effective_beacons++;
        }
    }

    // Check dense activation invariant after counting effective beacons
    check_dense_activation_invariant(n, n_effective_beacons);

    minimum_destroyed[0] = 0;
    for (int i = 1; i <= max_right; i++) {
        if (power[i] > 0) {
            if (i - power[i] - 1 < 0) {
                minimum_destroyed[i] = n_right - no_of_ones_on_right[i] - 1;
            } else {
                minimum_destroyed[i] = 
                    (no_of_ones_on_right[max(0LL, i - power[i] - 1)] - no_of_ones_on_right[i] - 1) +
                    minimum_destroyed[max(0LL, i - power[i] - 1)];
            }
        } else {
            minimum_destroyed[i] = minimum_destroyed[i - 1];
        }
    }

    long long int ans = LONG_MAX;
    for (int i = 0; i <= max_right; i++) {
        ans = min(ans, minimum_destroyed[i] + no_of_ones_on_right[i]);
    }
    cout << ans << '\n';
    return 0;
}
```

### Explanation
- **Checker Placement**: Each checker is placed immediately after the computation that affects the corresponding invariant. This ensures the program catches potential bottlenecks without incurring unnecessary overhead during critical operations.
- **Thresholds**: The threshold values are chosen based on the constraints and probable performance degradation scenarios, ensuring the checks are both meaningful and not over-sensitive.

