=== Invariants Response ===
### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the line-level hit counts, the following observations can be made:

1. **Loops Over the Board Size (n) [Lines 18, 36, 54, 72]:** 
   - The loops at lines 18, 36, 54, and 72 iterate over the board size, `n`. In the slow input, these loops have significantly higher hit counts compared to the fast input. Specifically, lines 54 and 72 show a significant increase in hit counts, indicating that these sections are likely contributing to the slowdown.

2. **Vector Operations [Lines 19, 37, 55, 73]:**
   - Lines that initialize vectors `curr = row[i]`, `curr = col[i]`, `curr = dr[i]`, and `curr = ur[i]` have more hits on the slow input. Although these operations themselves do not necessarily indicate inefficiency, they suggest that the subsequent operations on these vectors may be costly.

3. **Conditional Checks and Vector Traversal [Lines 21, 39, 57, 75]:**
   - The conditions checking the size of `curr` and continuing if size <= 1 are more frequently bypassed in the slow input, indicating longer lists of queens for certain rows, columns, or diagonals.

4. **Diagonal Operations [Lines 54-89]:**
   - The loops and operations over the diagonals (`dr` and `ur`) have much higher execution counts for the slow input. This suggests that the slow input has more queens aligned along diagonals, causing more frequent and possibly more complex computations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **High Number of Queens on Shared Lines or Diagonals:**
   - **Natural Language Invariant:** "When there are many queens aligned on the same row, column, or diagonal, the number of operations grows significantly, leading to slowdowns. Particularly, if the number of queens exceeds a moderate fraction of n, performance may degrade."

2. **Repeated Traversal and Condition Checks:**
   - **Natural Language Invariant:** "When a significant number of queens are positioned such that they frequently initiate checks for minimum and maximum positions within their row, column, or diagonal, the cumulative overhead of these operations can slow down the program."

3. **Complexity of Diagonal Calculations:**
   - **Natural Language Invariant:** "If the distribution of queens results in multiple queens being processed in diagonal scans (`ur` and `dr`), especially for many diagonals, these operations become a performance bottleneck."

4. **Sparse vs. Dense Configurations:**
   - **Natural Language Invariant:** "Sparse configurations where queens are mostly isolated result in faster execution, whereas dense configurations with multiple queens threatening each other significantly increase computational time."

The key conditions that seem to trigger the slowdown involve not just the number of queens, but specifically how they are distributed across the board. Configurations that lead to more intensive row/column/diagonal operations are likely to cause slow performance, especially when the board size n is large and close to the constraint limits.

=== Checker Response ===
### Phase 3: Implement Checker Code in C++

Let's implement the invariant checks in C++ based on the derived natural language invariants:

1. **Checker for High Number of Queens on Shared Lines or Diagonals:**

```cpp
void check_shared_line_invariant(int line_size, int threshold) {
    if (line_size > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many queens on the same line or diagonal!" << endl;
        abort();
    }
}
```

2. **Checker for Repeated Traversal and Condition Checks:**

```cpp
void check_repeated_checks_invariant(int operations, int threshold) {
    if (operations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated traversal and checks!" << endl;
        abort();
    }
}
```

3. **Checker for Complexity of Diagonal Calculations:**

```cpp
void check_diagonal_complexity_invariant(int diagonal_count, int threshold) {
    if (diagonal_count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - complex diagonal calculations!" << endl;
        abort();
    }
}
```

4. **Checker for Sparse vs. Dense Configurations:**

```cpp
void check_sparse_configuration_invariant(int m, int n, double density_threshold) {
    double density = static_cast<double>(m) / (n * n);
    if (density > density_threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - dense configuration of queens!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Original Program

Now, we integrate these checks into the original C++ program. We place them in strategic locations to avoid adding overhead within tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MAX = 100007;
const int MOD = 1000000007;

// Checkers integrated as functions
void check_shared_line_invariant(int line_size, int threshold) {
    if (line_size > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many queens on the same line or diagonal!" << endl;
        abort();
    }
}
void check_repeated_checks_invariant(int operations, int threshold) {
    if (operations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated traversal and checks!" << endl;
        abort();
    }
}
void check_diagonal_complexity_invariant(int diagonal_count, int threshold) {
    if (diagonal_count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - complex diagonal calculations!" << endl;
        abort();
    }
}
void check_sparse_configuration_invariant(int m, int n, double density_threshold) {
    double density = static_cast<double>(m) / (n * n);
    if (density > density_threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - dense configuration of queens!" << endl;
        abort();
    }
}

void solve() {
    pair<int, int> a[MAX];
    int n, m;
    cin >> n >> m;

    // Check for sparse vs. dense configuration
    check_sparse_configuration_invariant(m, n, 0.01);

    map<int, vector<pair<int, int>>> row, col, dr, ur;
    map<pair<int, int>, int> mp;

    for (int i = 0; i < m; i++) {
        cin >> a[i].first >> a[i].second;
        row[a[i].second].push_back(a[i]);
        col[a[i].first].push_back(a[i]);
        dr[a[i].first - a[i].second].push_back(a[i]);
        ur[a[i].first + a[i].second].push_back(a[i]);
    }

    for (int i = 1; i <= n; i++) {
        vector<pair<int, int>> curr = row[i];
        int mn = n + 7, mx = -1;
        if (curr.size() <= 1) {
            continue;
        }

        // Check for shared lines
        check_shared_line_invariant(curr.size(), 10);

        for (pair<int, int> p : curr) {
            mn = min(mn, p.first);
            mx = max(mx, p.first);
        }
        for (pair<int, int> p : curr) {
            if (p.first == mn || p.first == mx) {
                mp[p]++;
            } else {
                mp[p] += 2;
            }
        }
    }

    for (int i = 1; i <= n; i++) {
        vector<pair<int, int>> curr = col[i];
        int mn = n + 7, mx = -1;
        if (curr.size() <= 1) {
            continue;
        }

        // Check for shared columns
        check_shared_line_invariant(curr.size(), 10);

        for (pair<int, int> p : curr) {
            mn = min(mn, p.second);
            mx = max(mx, p.second);
        }
        for (pair<int, int> p : curr) {
            if (p.second == mn || p.second == mx) {
                mp[p]++;
            } else {
                mp[p] += 2;
            }
        }
    }

    int diagonal_operations = 0;

    for (int i = 1 - n; i <= n - 1; i++) {
        vector<pair<int, int>> curr = dr[i];
        int mn = n + 7, mx = -n - 7;
        if (curr.size() <= 1) {
            continue;
        }

        // Track diagonal operations
        diagonal_operations += curr.size();

        for (pair<int, int> p : curr) {
            mn = min(mn, p.first);
            mx = max(mx, p.first);
        }
        for (pair<int, int> p : curr) {
            if (p.first == mn || p.first == mx) {
                mp[p]++;
            } else {
                mp[p] += 2;
            }
        }
    }

    for (int i = 1 + 1; i <= n + n; i++) {
        vector<pair<int, int>> curr = ur[i];
        int mn = n + 7, mx = -n - 7;
        if (curr.size() <= 1) {
            continue;
        }

        // Track diagonal operations
        diagonal_operations += curr.size();

        for (pair<int, int> p : curr) {
            mn = min(mn, p.first);
            mx = max(mx, p.first);
        }
        for (pair<int, int> p : curr) {
            if (p.first == mn || p.first == mx) {
                mp[p]++;
            } else {
                mp[p] += 2;
            }
        }
    }

    // Check for diagonal complexity
    check_diagonal_complexity_invariant(diagonal_operations, 100);

    int cnt[9] = {};
    for (int i = 0; i < m; i++) {
        cnt[mp[a[i]]]++;
    }
    for (int i = 0; i <= 8; i++) {
        cout << cnt[i] << " ";
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    solve();
}
```

This version of the program includes checks that detect potential performance bottlenecks based on the previously identified invariants. These checks help ensure that the program avoids entering known slow paths, particularly when running in a fuzzer environment.
