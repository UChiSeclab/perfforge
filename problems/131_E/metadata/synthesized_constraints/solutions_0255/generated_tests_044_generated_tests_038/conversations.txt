system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A queen is the strongest chess piece. In modern chess the queen can move any number of squares in any horizontal, vertical or diagonal direction (considering that there're no other pieces on its way). The queen combines the options given to the rook and the bishop.

There are m queens on a square n × n chessboard. You know each queen's positions, the i-th queen is positioned in the square (ri, ci), where ri is the board row number (numbered from the top to the bottom from 1 to n), and ci is the board's column number (numbered from the left to the right from 1 to n). No two queens share the same position.

For each queen one can count w — the number of other queens that the given queen threatens (attacks). For a fixed attack direction only the first queen in this direction is under attack if there are many queens are on the ray of the attack. Obviously, for any queen w is between 0 and 8, inclusive.

Print the sequence t0, t1, ..., t8, where ti is the number of queens that threaten exactly i other queens, i.e. the number of queens that their w equals i.

Input

The first line of the input contains a pair of integers n, m (1 ≤ n, m ≤ 105), where n is the size of the board and m is the number of queens on the board. Then m following lines contain positions of the queens, one per line. Each line contains a pair of integers ri, ci (1 ≤ ri, ci ≤ n) — the queen's position. No two queens stand on the same square.

Output

Print the required sequence t0, t1, ..., t8, separating the numbers with spaces.

Examples

Input

8 4
4 3
4 8
6 5
1 6


Output

0 3 0 1 0 0 0 0 0 

Input

10 3
1 1
1 2
1 3


Output

0 2 1 0 0 0 0 0 0 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MAX = 100007;
const int MOD = 1000000007;
void solve() {
  pair<int, int> a[MAX];
  int n, m;
  cin >> n >> m;
  map<int, vector<pair<int, int> > > row, col, dr, ur;
  map<pair<int, int>, int> mp;
  for (int i = 0; i < m; i++) {
    cin >> a[i].first >> a[i].second;
    row[a[i].second].push_back(a[i]);
    col[a[i].first].push_back(a[i]);
    dr[a[i].first - a[i].second].push_back(a[i]);
    ur[a[i].first + a[i].second].push_back(a[i]);
  }
  for (int i = 1; i <= n; i++) {
    vector<pair<int, int> > curr = row[i];
    int mn = n + 7, mx = -1;
    if (curr.size() <= 1) {
      continue;
    }
    for (pair<int, int> p : curr) {
      mn = min(mn, p.first);
      mx = max(mx, p.first);
    }
    for (pair<int, int> p : curr) {
      if (p.first == mn || p.first == mx) {
        mp[p]++;
      } else {
        mp[p] += 2;
      }
    }
  }
  for (int i = 1; i <= n; i++) {
    vector<pair<int, int> > curr = col[i];
    int mn = n + 7, mx = -1;
    if (curr.size() <= 1) {
      continue;
    }
    for (pair<int, int> p : curr) {
      mn = min(mn, p.second);
      mx = max(mx, p.second);
    }
    for (pair<int, int> p : curr) {
      if (p.second == mn || p.second == mx) {
        mp[p]++;
      } else {
        mp[p] += 2;
      }
    }
  }
  for (int i = 1 - n; i <= n - 1; i++) {
    vector<pair<int, int> > curr = dr[i];
    int mn = n + 7, mx = -n - 7;
    if (curr.size() <= 1) {
      continue;
    }
    for (pair<int, int> p : curr) {
      mn = min(mn, p.first);
      mx = max(mx, p.first);
    }
    for (pair<int, int> p : curr) {
      if (p.first == mn || p.first == mx) {
        mp[p]++;
      } else {
        mp[p] += 2;
      }
    }
  }
  for (int i = 1 + 1; i <= n + n; i++) {
    vector<pair<int, int> > curr = ur[i];
    int mn = n + 7, mx = -n - 7;
    if (curr.size() <= 1) {
      continue;
    }
    for (pair<int, int> p : curr) {
      mn = min(mn, p.first);
      mx = max(mx, p.first);
    }
    for (pair<int, int> p : curr) {
      if (p.first == mn || p.first == mx) {
        mp[p]++;
      } else {
        mp[p] += 2;
      }
    }
  }
  int cnt[9] = {};
  for (int i = 0; i < m; i++) {
    cnt[mp[a[i]]]++;
  }
  for (int i = 0; i <= 8; i++) {
    cout << cnt[i] << " ";
  }
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

110 10
97 3
53 35
92 86
54 34
7 6
36 2
55 27
96 94
25 96
49 24


(G.2) Fast Input

10 5
2 3
1 6
3 3
2 1
2 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MAX = 100007; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 1000000007; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  pair<int, int> a[MAX]; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  map<int, vector<pair<int, int> > > row, col, dr, ur; /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
  map<pair<int, int>, int> mp; /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < m; i++) { /* line 11 slow_hit_count: 11, fast_hit_count: 6 */
    cin >> a[i].first >> a[i].second; /* line 12 slow_hit_count: 10, fast_hit_count: 5 */
    row[a[i].second].push_back(a[i]); /* line 13 slow_hit_count: 10, fast_hit_count: 5 */
    col[a[i].first].push_back(a[i]); /* line 14 slow_hit_count: 10, fast_hit_count: 5 */
    dr[a[i].first - a[i].second].push_back(a[i]); /* line 15 slow_hit_count: 10, fast_hit_count: 5 */
    ur[a[i].first + a[i].second].push_back(a[i]); /* line 16 slow_hit_count: 10, fast_hit_count: 5 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 18 slow_hit_count: 111, fast_hit_count: 11 */
    vector<pair<int, int> > curr = row[i]; /* line 19 slow_hit_count: 110, fast_hit_count: 10 */
    int mn = n + 7, mx = -1; /* line 20 slow_hit_count: 110, fast_hit_count: 10 */
    if (curr.size() <= 1) { /* line 21 slow_hit_count: 110, fast_hit_count: 10 */
      continue; /* line 22 slow_hit_count: 110, fast_hit_count: 8 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    for (pair<int, int> p : curr) { /* line 24 slow_hit_count: 0, fast_hit_count: 6 */
      mn = min(mn, p.first); /* line 25 slow_hit_count: 0, fast_hit_count: 4 */
      mx = max(mx, p.first); /* line 26 slow_hit_count: 0, fast_hit_count: 4 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    for (pair<int, int> p : curr) { /* line 28 slow_hit_count: 0, fast_hit_count: 6 */
      if (p.first == mn || p.first == mx) { /* line 29 slow_hit_count: 0, fast_hit_count: 4 */
        mp[p]++; /* line 30 slow_hit_count: 0, fast_hit_count: 4 */
      } else { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
        mp[p] += 2; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 36 slow_hit_count: 111, fast_hit_count: 11 */
    vector<pair<int, int> > curr = col[i]; /* line 37 slow_hit_count: 110, fast_hit_count: 10 */
    int mn = n + 7, mx = -1; /* line 38 slow_hit_count: 110, fast_hit_count: 10 */
    if (curr.size() <= 1) { /* line 39 slow_hit_count: 110, fast_hit_count: 10 */
      continue; /* line 40 slow_hit_count: 110, fast_hit_count: 9 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    for (pair<int, int> p : curr) { /* line 42 slow_hit_count: 0, fast_hit_count: 4 */
      mn = min(mn, p.second); /* line 43 slow_hit_count: 0, fast_hit_count: 3 */
      mx = max(mx, p.second); /* line 44 slow_hit_count: 0, fast_hit_count: 3 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    for (pair<int, int> p : curr) { /* line 46 slow_hit_count: 0, fast_hit_count: 4 */
      if (p.second == mn || p.second == mx) { /* line 47 slow_hit_count: 0, fast_hit_count: 3 */
        mp[p]++; /* line 48 slow_hit_count: 0, fast_hit_count: 2 */
      } else { /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
        mp[p] += 2; /* line 50 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1 - n; i <= n - 1; i++) { /* line 54 slow_hit_count: 220, fast_hit_count: 20 */
    vector<pair<int, int> > curr = dr[i]; /* line 55 slow_hit_count: 219, fast_hit_count: 19 */
    int mn = n + 7, mx = -n - 7; /* line 56 slow_hit_count: 219, fast_hit_count: 19 */
    if (curr.size() <= 1) { /* line 57 slow_hit_count: 219, fast_hit_count: 19 */
      continue; /* line 58 slow_hit_count: 219, fast_hit_count: 19 */
    } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    for (pair<int, int> p : curr) { /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      mn = min(mn, p.first); /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
      mx = max(mx, p.first); /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    for (pair<int, int> p : curr) { /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      if (p.first == mn || p.first == mx) { /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
        mp[p]++; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
        mp[p] += 2; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1 + 1; i <= n + n; i++) { /* line 72 slow_hit_count: 220, fast_hit_count: 20 */
    vector<pair<int, int> > curr = ur[i]; /* line 73 slow_hit_count: 219, fast_hit_count: 19 */
    int mn = n + 7, mx = -n - 7; /* line 74 slow_hit_count: 219, fast_hit_count: 19 */
    if (curr.size() <= 1) { /* line 75 slow_hit_count: 219, fast_hit_count: 19 */
      continue; /* line 76 slow_hit_count: 218, fast_hit_count: 19 */
    } /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
    for (pair<int, int> p : curr) { /* line 78 slow_hit_count: 3, fast_hit_count: 0 */
      mn = min(mn, p.first); /* line 79 slow_hit_count: 2, fast_hit_count: 0 */
      mx = max(mx, p.first); /* line 80 slow_hit_count: 2, fast_hit_count: 0 */
    } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
    for (pair<int, int> p : curr) { /* line 82 slow_hit_count: 3, fast_hit_count: 0 */
      if (p.first == mn || p.first == mx) { /* line 83 slow_hit_count: 2, fast_hit_count: 0 */
        mp[p]++; /* line 84 slow_hit_count: 2, fast_hit_count: 0 */
      } else { /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
        mp[p] += 2; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  int cnt[9] = {}; /* line 90 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < m; i++) { /* line 91 slow_hit_count: 11, fast_hit_count: 6 */
    cnt[mp[a[i]]]++; /* line 92 slow_hit_count: 10, fast_hit_count: 5 */
  } /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= 8; i++) { /* line 94 slow_hit_count: 10, fast_hit_count: 10 */
    cout << cnt[i] << " "; /* line 95 slow_hit_count: 9, fast_hit_count: 9 */
  } /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 97 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 98 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 102 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the line-level hit counts, the following observations can be made:

1. **Loops Over the Board Size (n) [Lines 18, 36, 54, 72]:** 
   - The loops at lines 18, 36, 54, and 72 iterate over the board size, `n`. In the slow input, these loops have significantly higher hit counts compared to the fast input. Specifically, lines 54 and 72 show a significant increase in hit counts, indicating that these sections are likely contributing to the slowdown.

2. **Vector Operations [Lines 19, 37, 55, 73]:**
   - Lines that initialize vectors `curr = row[i]`, `curr = col[i]`, `curr = dr[i]`, and `curr = ur[i]` have more hits on the slow input. Although these operations themselves do not necessarily indicate inefficiency, they suggest that the subsequent operations on these vectors may be costly.

3. **Conditional Checks and Vector Traversal [Lines 21, 39, 57, 75]:**
   - The conditions checking the size of `curr` and continuing if size <= 1 are more frequently bypassed in the slow input, indicating longer lists of queens for certain rows, columns, or diagonals.

4. **Diagonal Operations [Lines 54-89]:**
   - The loops and operations over the diagonals (`dr` and `ur`) have much higher execution counts for the slow input. This suggests that the slow input has more queens aligned along diagonals, causing more frequent and possibly more complex computations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **High Number of Queens on Shared Lines or Diagonals:**
   - **Natural Language Invariant:** "When there are many queens aligned on the same row, column, or diagonal, the number of operations grows significantly, leading to slowdowns. Particularly, if the number of queens exceeds a moderate fraction of n, performance may degrade."

2. **Repeated Traversal and Condition Checks:**
   - **Natural Language Invariant:** "When a significant number of queens are positioned such that they frequently initiate checks for minimum and maximum positions within their row, column, or diagonal, the cumulative overhead of these operations can slow down the program."

3. **Complexity of Diagonal Calculations:**
   - **Natural Language Invariant:** "If the distribution of queens results in multiple queens being processed in diagonal scans (`ur` and `dr`), especially for many diagonals, these operations become a performance bottleneck."

4. **Sparse vs. Dense Configurations:**
   - **Natural Language Invariant:** "Sparse configurations where queens are mostly isolated result in faster execution, whereas dense configurations with multiple queens threatening each other significantly increase computational time."

The key conditions that seem to trigger the slowdown involve not just the number of queens, but specifically how they are distributed across the board. Configurations that lead to more intensive row/column/diagonal operations are likely to cause slow performance, especially when the board size n is large and close to the constraint limits.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A queen is the strongest chess piece. In modern chess the queen can move any number of squares in any horizontal, vertical or diagonal direction (considering that there're no other pieces on its way). The queen combines the options given to the rook and the bishop.

There are m queens on a square n × n chessboard. You know each queen's positions, the i-th queen is positioned in the square (ri, ci), where ri is the board row number (numbered from the top to the bottom from 1 to n), and ci is the board's column number (numbered from the left to the right from 1 to n). No two queens share the same position.

For each queen one can count w — the number of other queens that the given queen threatens (attacks). For a fixed attack direction only the first queen in this direction is under attack if there are many queens are on the ray of the attack. Obviously, for any queen w is between 0 and 8, inclusive.

Print the sequence t0, t1, ..., t8, where ti is the number of queens that threaten exactly i other queens, i.e. the number of queens that their w equals i.

Input

The first line of the input contains a pair of integers n, m (1 ≤ n, m ≤ 105), where n is the size of the board and m is the number of queens on the board. Then m following lines contain positions of the queens, one per line. Each line contains a pair of integers ri, ci (1 ≤ ri, ci ≤ n) — the queen's position. No two queens stand on the same square.

Output

Print the required sequence t0, t1, ..., t8, separating the numbers with spaces.

Examples

Input

8 4
4 3
4 8
6 5
1 6


Output

0 3 0 1 0 0 0 0 0 

Input

10 3
1 1
1 2
1 3


Output

0 2 1 0 0 0 0 0 0 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checker Code in C++

Let's implement the invariant checks in C++ based on the derived natural language invariants:

1. **Checker for High Number of Queens on Shared Lines or Diagonals:**

```cpp
void check_shared_line_invariant(int line_size, int threshold) {
    if (line_size > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many queens on the same line or diagonal!" << endl;
        abort();
    }
}
```

2. **Checker for Repeated Traversal and Condition Checks:**

```cpp
void check_repeated_checks_invariant(int operations, int threshold) {
    if (operations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated traversal and checks!" << endl;
        abort();
    }
}
```

3. **Checker for Complexity of Diagonal Calculations:**

```cpp
void check_diagonal_complexity_invariant(int diagonal_count, int threshold) {
    if (diagonal_count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - complex diagonal calculations!" << endl;
        abort();
    }
}
```

4. **Checker for Sparse vs. Dense Configurations:**

```cpp
void check_sparse_configuration_invariant(int m, int n, double density_threshold) {
    double density = static_cast<double>(m) / (n * n);
    if (density > density_threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - dense configuration of queens!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Original Program

Now, we integrate these checks into the original C++ program. We place them in strategic locations to avoid adding overhead within tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MAX = 100007;
const int MOD = 1000000007;

// Checkers integrated as functions
void check_shared_line_invariant(int line_size, int threshold) {
    if (line_size > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many queens on the same line or diagonal!" << endl;
        abort();
    }
}
void check_repeated_checks_invariant(int operations, int threshold) {
    if (operations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated traversal and checks!" << endl;
        abort();
    }
}
void check_diagonal_complexity_invariant(int diagonal_count, int threshold) {
    if (diagonal_count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - complex diagonal calculations!" << endl;
        abort();
    }
}
void check_sparse_configuration_invariant(int m, int n, double density_threshold) {
    double density = static_cast<double>(m) / (n * n);
    if (density > density_threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - dense configuration of queens!" << endl;
        abort();
    }
}

void solve() {
    pair<int, int> a[MAX];
    int n, m;
    cin >> n >> m;

    // Check for sparse vs. dense configuration
    check_sparse_configuration_invariant(m, n, 0.01);

    map<int, vector<pair<int, int>>> row, col, dr, ur;
    map<pair<int, int>, int> mp;

    for (int i = 0; i < m; i++) {
        cin >> a[i].first >> a[i].second;
        row[a[i].second].push_back(a[i]);
        col[a[i].first].push_back(a[i]);
        dr[a[i].first - a[i].second].push_back(a[i]);
        ur[a[i].first + a[i].second].push_back(a[i]);
    }

    for (int i = 1; i <= n; i++) {
        vector<pair<int, int>> curr = row[i];
        int mn = n + 7, mx = -1;
        if (curr.size() <= 1) {
            continue;
        }

        // Check for shared lines
        check_shared_line_invariant(curr.size(), 10);

        for (pair<int, int> p : curr) {
            mn = min(mn, p.first);
            mx = max(mx, p.first);
        }
        for (pair<int, int> p : curr) {
            if (p.first == mn || p.first == mx) {
                mp[p]++;
            } else {
                mp[p] += 2;
            }
        }
    }

    for (int i = 1; i <= n; i++) {
        vector<pair<int, int>> curr = col[i];
        int mn = n + 7, mx = -1;
        if (curr.size() <= 1) {
            continue;
        }

        // Check for shared columns
        check_shared_line_invariant(curr.size(), 10);

        for (pair<int, int> p : curr) {
            mn = min(mn, p.second);
            mx = max(mx, p.second);
        }
        for (pair<int, int> p : curr) {
            if (p.second == mn || p.second == mx) {
                mp[p]++;
            } else {
                mp[p] += 2;
            }
        }
    }

    int diagonal_operations = 0;

    for (int i = 1 - n; i <= n - 1; i++) {
        vector<pair<int, int>> curr = dr[i];
        int mn = n + 7, mx = -n - 7;
        if (curr.size() <= 1) {
            continue;
        }

        // Track diagonal operations
        diagonal_operations += curr.size();

        for (pair<int, int> p : curr) {
            mn = min(mn, p.first);
            mx = max(mx, p.first);
        }
        for (pair<int, int> p : curr) {
            if (p.first == mn || p.first == mx) {
                mp[p]++;
            } else {
                mp[p] += 2;
            }
        }
    }

    for (int i = 1 + 1; i <= n + n; i++) {
        vector<pair<int, int>> curr = ur[i];
        int mn = n + 7, mx = -n - 7;
        if (curr.size() <= 1) {
            continue;
        }

        // Track diagonal operations
        diagonal_operations += curr.size();

        for (pair<int, int> p : curr) {
            mn = min(mn, p.first);
            mx = max(mx, p.first);
        }
        for (pair<int, int> p : curr) {
            if (p.first == mn || p.first == mx) {
                mp[p]++;
            } else {
                mp[p] += 2;
            }
        }
    }

    // Check for diagonal complexity
    check_diagonal_complexity_invariant(diagonal_operations, 100);

    int cnt[9] = {};
    for (int i = 0; i < m; i++) {
        cnt[mp[a[i]]]++;
    }
    for (int i = 0; i <= 8; i++) {
        cout << cnt[i] << " ";
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    solve();
}
```

This version of the program includes checks that detect potential performance bottlenecks based on the previously identified invariants. These checks help ensure that the program avoids entering known slow paths, particularly when running in a fuzzer environment.

