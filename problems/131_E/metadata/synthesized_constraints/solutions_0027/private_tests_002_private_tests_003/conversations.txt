system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A queen is the strongest chess piece. In modern chess the queen can move any number of squares in any horizontal, vertical or diagonal direction (considering that there're no other pieces on its way). The queen combines the options given to the rook and the bishop.

There are m queens on a square n × n chessboard. You know each queen's positions, the i-th queen is positioned in the square (ri, ci), where ri is the board row number (numbered from the top to the bottom from 1 to n), and ci is the board's column number (numbered from the left to the right from 1 to n). No two queens share the same position.

For each queen one can count w — the number of other queens that the given queen threatens (attacks). For a fixed attack direction only the first queen in this direction is under attack if there are many queens are on the ray of the attack. Obviously, for any queen w is between 0 and 8, inclusive.

Print the sequence t0, t1, ..., t8, where ti is the number of queens that threaten exactly i other queens, i.e. the number of queens that their w equals i.

Input

The first line of the input contains a pair of integers n, m (1 ≤ n, m ≤ 105), where n is the size of the board and m is the number of queens on the board. Then m following lines contain positions of the queens, one per line. Each line contains a pair of integers ri, ci (1 ≤ ri, ci ≤ n) — the queen's position. No two queens stand on the same square.

Output

Print the required sequence t0, t1, ..., t8, separating the numbers with spaces.

Examples

Input

8 4
4 3
4 8
6 5
1 6


Output

0 3 0 1 0 0 0 0 0 

Input

10 3
1 1
1 2
1 3


Output

0 2 1 0 0 0 0 0 0 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  map<long long, vector<long long>> p, s, r, d;
  long long n, m, i, u, v;
  cin >> n >> m;
  vector<pair<long long, long long>> queen;
  for (i = 0; i < m; i++) {
    cin >> u >> v;
    queen.push_back(make_pair(u, v));
    p[u - v].push_back(u);
    s[u + v].push_back(u);
    r[u].push_back(v);
    d[v].push_back(u);
  }
  for (auto &i : p)
    sort(i.second.begin(), i.second.end(), greater<long long>());
  for (auto &i : s)
    sort(i.second.begin(), i.second.end(), greater<long long>());
  for (auto &i : r)
    sort(i.second.begin(), i.second.end(), greater<long long>());
  for (auto &i : d)
    sort(i.second.begin(), i.second.end(), greater<long long>());
  sort(queen.begin(), queen.end());
  map<pair<long long, long long>, long long> count;
  long long ans[9] = {0};
  for (i = 0; i < m; i++) {
    u = queen[i].first;
    v = queen[i].second;
    p[u - v].pop_back();
    s[u + v].pop_back();
    r[u].pop_back();
    d[v].pop_back();
    if (p[u - v].size()) {
      count[make_pair(u, v)]++;
      count[make_pair(*p[u - v].rbegin(), *p[u - v].rbegin() - u + v)]++;
    }
    if (s[u + v].size()) {
      count[make_pair(u, v)]++;
      count[make_pair(*s[u + v].rbegin(), -1 * (*s[u + v].rbegin()) + u + v)]++;
    }
    if (r[u].size()) {
      count[make_pair(u, v)]++;
      count[make_pair(u, *r[u].rbegin())]++;
    }
    if (d[v].size()) {
      count[make_pair(u, v)]++;
      count[make_pair(*d[v].rbegin(), v)]++;
    }
    ans[count[make_pair(u, v)]]++;
  }
  for (i = 0; i < 9; i++) cout << ans[i] << " ";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 20
6 10
3 10
10 4
5 3
9 4
10 1
10 3
10 7
8 5
7 2
4 7
5 1
2 9
5 5
6 6
9 8
2 10
9 10
1 4
7 4


(G.2) Fast Input

2 1
1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  map<long long, vector<long long>> p, s, r, d; /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  long long n, m, i, u, v; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<long long, long long>> queen; /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
  for (i = 0; i < m; i++) { /* line 11 slow_hit_count: 21, fast_hit_count: 2 */
    cin >> u >> v; /* line 12 slow_hit_count: 20, fast_hit_count: 1 */
    queen.push_back(make_pair(u, v)); /* line 13 slow_hit_count: 20, fast_hit_count: 1 */
    p[u - v].push_back(u); /* line 14 slow_hit_count: 20, fast_hit_count: 1 */
    s[u + v].push_back(u); /* line 15 slow_hit_count: 20, fast_hit_count: 1 */
    r[u].push_back(v); /* line 16 slow_hit_count: 20, fast_hit_count: 1 */
    d[v].push_back(u); /* line 17 slow_hit_count: 20, fast_hit_count: 1 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto &i : p) /* line 19 slow_hit_count: 15, fast_hit_count: 2 */
    sort(i.second.begin(), i.second.end(), greater<long long>()); /* line 20 slow_hit_count: 14, fast_hit_count: 1 */
  for (auto &i : s) /* line 21 slow_hit_count: 13, fast_hit_count: 2 */
    sort(i.second.begin(), i.second.end(), greater<long long>()); /* line 22 slow_hit_count: 12, fast_hit_count: 1 */
  for (auto &i : r) /* line 23 slow_hit_count: 11, fast_hit_count: 2 */
    sort(i.second.begin(), i.second.end(), greater<long long>()); /* line 24 slow_hit_count: 10, fast_hit_count: 1 */
  for (auto &i : d) /* line 25 slow_hit_count: 11, fast_hit_count: 2 */
    sort(i.second.begin(), i.second.end(), greater<long long>()); /* line 26 slow_hit_count: 10, fast_hit_count: 1 */
  sort(queen.begin(), queen.end()); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  map<pair<long long, long long>, long long> count; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans[9] = {0}; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < m; i++) { /* line 30 slow_hit_count: 21, fast_hit_count: 2 */
    u = queen[i].first; /* line 31 slow_hit_count: 20, fast_hit_count: 1 */
    v = queen[i].second; /* line 32 slow_hit_count: 20, fast_hit_count: 1 */
    p[u - v].pop_back(); /* line 33 slow_hit_count: 20, fast_hit_count: 1 */
    s[u + v].pop_back(); /* line 34 slow_hit_count: 20, fast_hit_count: 1 */
    r[u].pop_back(); /* line 35 slow_hit_count: 20, fast_hit_count: 1 */
    d[v].pop_back(); /* line 36 slow_hit_count: 20, fast_hit_count: 1 */
    if (p[u - v].size()) { /* line 37 slow_hit_count: 20, fast_hit_count: 1 */
      count[make_pair(u, v)]++; /* line 38 slow_hit_count: 6, fast_hit_count: 0 */
      count[make_pair(*p[u - v].rbegin(), *p[u - v].rbegin() - u + v)]++; /* line 39 slow_hit_count: 6, fast_hit_count: 0 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    if (s[u + v].size()) { /* line 41 slow_hit_count: 20, fast_hit_count: 1 */
      count[make_pair(u, v)]++; /* line 42 slow_hit_count: 8, fast_hit_count: 0 */
      count[make_pair(*s[u + v].rbegin(), -1 * (*s[u + v].rbegin()) + u + v)]++; /* line 43 slow_hit_count: 8, fast_hit_count: 0 */
    } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    if (r[u].size()) { /* line 45 slow_hit_count: 20, fast_hit_count: 1 */
      count[make_pair(u, v)]++; /* line 46 slow_hit_count: 10, fast_hit_count: 0 */
      count[make_pair(u, *r[u].rbegin())]++; /* line 47 slow_hit_count: 10, fast_hit_count: 0 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    if (d[v].size()) { /* line 49 slow_hit_count: 20, fast_hit_count: 1 */
      count[make_pair(u, v)]++; /* line 50 slow_hit_count: 10, fast_hit_count: 0 */
      count[make_pair(*d[v].rbegin(), v)]++; /* line 51 slow_hit_count: 10, fast_hit_count: 0 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    ans[count[make_pair(u, v)]]++; /* line 53 slow_hit_count: 20, fast_hit_count: 1 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < 9; i++) cout << ans[i] << " "; /* line 55 slow_hit_count: 10, fast_hit_count: 10 */
  return 0; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issues with the provided C code, let's analyze the hit counts and pinpoint which parts of the code are significantly more active during slow input runs as compared to fast input runs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line 11 and Line 30: Looping Over Input Queens**
   - Both loops are executed `m` times, where `m` is the number of queens. 
   - Significant hit differences: Fast input (2 hits), Slow input (21 hits).
   - These loops are central to data processing, iterating over the queens for setup and computation.

2. **Sorting Operations (Lines 19-26)**
   - Sorting the vectors associated with the maps `p`, `s`, `r`, and `d`.
   - These are being hit significantly (Slow: 14, 12, 10; Fast: 1), indicating that sorting operations considerably contribute to the time complexity.

3. **Count Updates (Lines 38-51)**
   - These lines execute conditional updates to the `count` map based on the presence of other queens in attack paths.
   - Although all these lines have zero hits for the fast input, they have substantial hits for the slow input, indicating increased complexity in computations when multiple queens threaten each other.

### Phase 2: Derive Performance-Characterizing Invariants

Based on our analysis, the following natural language invariants describe the conditions under which the program experiences slow execution:

1. **High Queen Density on Attack Lines:**
   - Natural Language Description: "If the queens are densely positioned such that multiple queens can attack each other in shared rows, columns, or diagonals, the program may enter slow execution paths due to increased data processing for threat calculations."
   - This invariant is evident from the hit counts on lines within the inner loop that update the threat count `count` map.

2. **Increased Sorting Operations:**
   - Natural Language Description: "When there are numerous attack lines (rows, columns, diagonals) shared by several queens, the sorting operations on these lines can significantly slow down the execution, especially when many attack lines need sorting."
   - This corresponds to the frequent sorting of attack lines (p, s, r, d) due to the potential for queens to line up in shared attack paths.

3. **Large Number of Queens Relative to Board Size:**
   - Natural Language Description: "The program's performance may degrade if the number of queens is large relative to the board's dimensions, leading to increased computational overhead in managing and comparing queen positions."
   - This invariant reflects the impact of having a high number of queens (m) and fits within constraints since `n, m ≤ 10^5`.

These invariants do not rely on the specific values from the provided slow input but are instead derived from the patterns seen in how often certain operations are triggered, based on the code logic and problem constraints. They can guide further optimization or tuning efforts by highlighting scenarios that lead to increased complexity and execution time.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A queen is the strongest chess piece. In modern chess the queen can move any number of squares in any horizontal, vertical or diagonal direction (considering that there're no other pieces on its way). The queen combines the options given to the rook and the bishop.

There are m queens on a square n × n chessboard. You know each queen's positions, the i-th queen is positioned in the square (ri, ci), where ri is the board row number (numbered from the top to the bottom from 1 to n), and ci is the board's column number (numbered from the left to the right from 1 to n). No two queens share the same position.

For each queen one can count w — the number of other queens that the given queen threatens (attacks). For a fixed attack direction only the first queen in this direction is under attack if there are many queens are on the ray of the attack. Obviously, for any queen w is between 0 and 8, inclusive.

Print the sequence t0, t1, ..., t8, where ti is the number of queens that threaten exactly i other queens, i.e. the number of queens that their w equals i.

Input

The first line of the input contains a pair of integers n, m (1 ≤ n, m ≤ 105), where n is the size of the board and m is the number of queens on the board. Then m following lines contain positions of the queens, one per line. Each line contains a pair of integers ri, ci (1 ≤ ri, ci ≤ n) — the queen's position. No two queens stand on the same square.

Output

Print the required sequence t0, t1, ..., t8, separating the numbers with spaces.

Examples

Input

8 4
4 3
4 8
6 5
1 6


Output

0 3 0 1 0 0 0 0 0 

Input

10 3
1 1
1 2
1 3


Output

0 2 1 0 0 0 0 0 0 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Runtime Checks for Performance Invariants

Based on the natural language invariants derived earlier, here are the C++ code snippets to check each condition at runtime:

```cpp
void check_high_density_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: high_density_invariant triggered - multiple queens on same attack lines" << endl;
        abort();
    }
}

void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - frequent sorting of large attack lines" << endl;
        abort();
    }
}

void check_queen_board_ratio_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: queen_board_ratio_invariant triggered - large number of queens relative to board size" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Original Program

Now, integrate these checks at strategic locations in the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check for high density of queens causing multiple attacks
void check_high_density_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: high_density_invariant triggered - multiple queens on same attack lines" << endl;
        abort();
    }
}

// Function to check for frequent sorting of large attack lines
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - frequent sorting of large attack lines" << endl;
        abort();
    }
}

// Function to check if there are too many queens relative to the board size
void check_queen_board_ratio_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: queen_board_ratio_invariant triggered - large number of queens relative to board size" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    map<long long, vector<long long>> p, s, r, d;
    long long n, m, i, u, v;
    cin >> n >> m;

    // Check for a large number of queens relative to board size
    check_queen_board_ratio_invariant(m > n * 0.1); // assuming 10% is a high density

    vector<pair<long long, long long>> queen;

    for (i = 0; i < m; i++) {
        cin >> u >> v;
        queen.push_back(make_pair(u, v));
        p[u - v].push_back(u);
        s[u + v].push_back(u);
        r[u].push_back(v);
        d[v].push_back(u);
    }

    // Check if any diagonal or row has too many queens, which would imply high density
    for (const auto& line : {p, s, r, d}) {
        for (const auto& entry : line) {
            check_high_density_invariant(entry.second.size() > 5); // arbitrary threshold for high density
        }
    }

    for (auto &i : p)
        sort(i.second.begin(), i.second.end(), greater<long long>());
    for (auto &i : s)
        sort(i.second.begin(), i.second.end(), greater<long long>());
    for (auto &i : r)
        sort(i.second.begin(), i.second.end(), greater<long long>());
    for (auto &i : d)
        sort(i.second.begin(), i.second.end(), greater<long long>());

    // Check for frequent sorting if size of any line exceeds a certain threshold
    check_sort_invariant(p.size() > 50 || s.size() > 50 || r.size() > 50 || d.size() > 50); // arbitrary choice

    sort(queen.begin(), queen.end());
    map<pair<long long, long long>, long long> count;
    long long ans[9] = {0};

    for (i = 0; i < m; i++) {
        u = queen[i].first;
        v = queen[i].second;
        p[u - v].pop_back();
        s[u + v].pop_back();
        r[u].pop_back();
        d[v].pop_back();

        if (p[u - v].size()) {
            count[make_pair(u, v)]++;
            count[make_pair(*p[u - v].rbegin(), *p[u - v].rbegin() - u + v)]++;
        }
        if (s[u + v].size()) {
            count[make_pair(u, v)]++;
            count[make_pair(*s[u + v].rbegin(), -1 * (*s[u + v].rbegin()) + u + v)]++;
        }
        if (r[u].size()) {
            count[make_pair(u, v)]++;
            count[make_pair(u, *r[u].rbegin())]++;
        }
        if (d[v].size()) {
            count[make_pair(u, v)]++;
            count[make_pair(*d[v].rbegin(), v)]++;
        }
        ans[count[make_pair(u, v)]]++;
    }
    for (i = 0; i < 9; i++) cout << ans[i] << " ";
    return 0;
}
```

### Explanation of Checks:

1. **High Density of Queens:**
   - Placed after processing queen positions to ensure we detect if multiple queens are on the same attack lines.

2. **Frequent Sorting of Large Attack Lines:**
   - Placed after sorting operations to catch frequent sorting of large data structures.

3. **Large Number of Queens Relative to Board Size:**
   - Placed after reading input parameters to immediately detect potentially problematic scenarios.

These checks can help identify performance bottlenecks during testing and provide clear warnings that can guide optimizations.

