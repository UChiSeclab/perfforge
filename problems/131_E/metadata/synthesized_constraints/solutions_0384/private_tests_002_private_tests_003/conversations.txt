system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A queen is the strongest chess piece. In modern chess the queen can move any number of squares in any horizontal, vertical or diagonal direction (considering that there're no other pieces on its way). The queen combines the options given to the rook and the bishop.

There are m queens on a square n × n chessboard. You know each queen's positions, the i-th queen is positioned in the square (ri, ci), where ri is the board row number (numbered from the top to the bottom from 1 to n), and ci is the board's column number (numbered from the left to the right from 1 to n). No two queens share the same position.

For each queen one can count w — the number of other queens that the given queen threatens (attacks). For a fixed attack direction only the first queen in this direction is under attack if there are many queens are on the ray of the attack. Obviously, for any queen w is between 0 and 8, inclusive.

Print the sequence t0, t1, ..., t8, where ti is the number of queens that threaten exactly i other queens, i.e. the number of queens that their w equals i.

Input

The first line of the input contains a pair of integers n, m (1 ≤ n, m ≤ 105), where n is the size of the board and m is the number of queens on the board. Then m following lines contain positions of the queens, one per line. Each line contains a pair of integers ri, ci (1 ≤ ri, ci ≤ n) — the queen's position. No two queens stand on the same square.

Output

Print the required sequence t0, t1, ..., t8, separating the numbers with spaces.

Examples

Input

8 4
4 3
4 8
6 5
1 6


Output

0 3 0 1 0 0 0 0 0 

Input

10 3
1 1
1 2
1 3


Output

0 2 1 0 0 0 0 0 0 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const int inf = (1 << 30) - 1;
const double eps = 1e-9;
using namespace std;
map<int, vector<int> > m1, m2, m3, m4;
vector<int>::iterator it, k;
int n, m, x[100010], y[100010], ans[77] = {0};
map<pair<int, int>, bool> ss;
int main() {
  scanf("%d%d", &n, &m);
  for (int i = 0; i < m; i++) {
    scanf("%d%d", &x[i], &y[i]);
    m1[x[i]].push_back(y[i]);
    m2[y[i]].push_back(x[i]);
    m3[x[i] + y[i] - 1].push_back(x[i]);
    m4[y[i] - x[i]].push_back(x[i]);
  }
  for (int i = 0; i < m; i++) {
    if (!ss[make_pair(1, x[i])]) {
      sort(m1[x[i]].begin(), m1[x[i]].end());
      ss[make_pair(1, x[i])] = true;
    }
    if (!ss[make_pair(2, y[i])]) {
      sort(m2[y[i]].begin(), m2[y[i]].end());
      ss[make_pair(2, y[i])] = true;
    }
    if (!ss[make_pair(3, x[i] + y[i] - 1)]) {
      sort(m3[x[i] + y[i] - 1].begin(), m3[x[i] + y[i] - 1].end());
      ss[make_pair(3, x[i] + y[i] - 1)] = true;
    }
    if (!ss[make_pair(4, y[i] - x[i])]) {
      sort(m4[y[i] - x[i]].begin(), m4[y[i] - x[i]].end());
      ss[make_pair(4, y[i] - x[i])] = true;
    }
  }
  for (int i = 0; i < m; i++) {
    int cnt = 0;
    it = lower_bound(m1[x[i]].begin(), m1[x[i]].end(), y[i]);
    k = --m1[x[i]].end();
    if (it != k && k != m1[x[i]].begin()) cnt++;
    if (it != m1[x[i]].begin()) cnt++;
    it = lower_bound(m2[y[i]].begin(), m2[y[i]].end(), x[i]);
    k = --m2[y[i]].end();
    if (it != k && k != m2[y[i]].begin()) cnt++;
    if (it != m2[y[i]].begin()) cnt++;
    it = lower_bound(m3[x[i] + y[i] - 1].begin(), m3[x[i] + y[i] - 1].end(),
                     x[i]);
    k = --m3[x[i] + y[i] - 1].end();
    if (it != k && k != m3[x[i] + y[i] - 1].begin()) cnt++;
    if (it != m3[x[i] + y[i] - 1].begin()) cnt++;
    it = lower_bound(m4[y[i] - x[i]].begin(), m4[y[i] - x[i]].end(), x[i]);
    k = --m4[y[i] - x[i]].end();
    if (it != k && k != m4[y[i] - x[i]].begin()) cnt++;
    if (it != m4[y[i] - x[i]].begin()) cnt++;
    ans[cnt]++;
  }
  for (int i = 0; i < 9; i++) printf("%d ", ans[i]);
  cout << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 20
6 10
3 10
10 4
5 3
9 4
10 1
10 3
10 7
8 5
7 2
4 7
5 1
2 9
5 5
6 6
9 8
2 10
9 10
1 4
7 4


(G.2) Fast Input

2 1
1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = (1 << 30) - 1; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const double eps = 1e-9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
map<int, vector<int> > m1, m2, m3, m4; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
vector<int>::iterator it, k; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, x[100010], y[100010], ans[77] = {0}; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
map<pair<int, int>, bool> ss; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &m); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < m; i++) { /* line 11 slow_hit_count: 21, fast_hit_count: 2 */
    scanf("%d%d", &x[i], &y[i]); /* line 12 slow_hit_count: 20, fast_hit_count: 1 */
    m1[x[i]].push_back(y[i]); /* line 13 slow_hit_count: 20, fast_hit_count: 1 */
    m2[y[i]].push_back(x[i]); /* line 14 slow_hit_count: 20, fast_hit_count: 1 */
    m3[x[i] + y[i] - 1].push_back(x[i]); /* line 15 slow_hit_count: 20, fast_hit_count: 1 */
    m4[y[i] - x[i]].push_back(x[i]); /* line 16 slow_hit_count: 20, fast_hit_count: 1 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; i++) { /* line 18 slow_hit_count: 21, fast_hit_count: 2 */
    if (!ss[make_pair(1, x[i])]) { /* line 19 slow_hit_count: 20, fast_hit_count: 1 */
      sort(m1[x[i]].begin(), m1[x[i]].end()); /* line 20 slow_hit_count: 10, fast_hit_count: 1 */
      ss[make_pair(1, x[i])] = true; /* line 21 slow_hit_count: 10, fast_hit_count: 1 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    if (!ss[make_pair(2, y[i])]) { /* line 23 slow_hit_count: 20, fast_hit_count: 1 */
      sort(m2[y[i]].begin(), m2[y[i]].end()); /* line 24 slow_hit_count: 10, fast_hit_count: 1 */
      ss[make_pair(2, y[i])] = true; /* line 25 slow_hit_count: 10, fast_hit_count: 1 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    if (!ss[make_pair(3, x[i] + y[i] - 1)]) { /* line 27 slow_hit_count: 20, fast_hit_count: 1 */
      sort(m3[x[i] + y[i] - 1].begin(), m3[x[i] + y[i] - 1].end()); /* line 28 slow_hit_count: 12, fast_hit_count: 1 */
      ss[make_pair(3, x[i] + y[i] - 1)] = true; /* line 29 slow_hit_count: 12, fast_hit_count: 1 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    if (!ss[make_pair(4, y[i] - x[i])]) { /* line 31 slow_hit_count: 20, fast_hit_count: 1 */
      sort(m4[y[i] - x[i]].begin(), m4[y[i] - x[i]].end()); /* line 32 slow_hit_count: 14, fast_hit_count: 1 */
      ss[make_pair(4, y[i] - x[i])] = true; /* line 33 slow_hit_count: 14, fast_hit_count: 1 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; i++) { /* line 36 slow_hit_count: 21, fast_hit_count: 2 */
    int cnt = 0; /* line 37 slow_hit_count: 20, fast_hit_count: 1 */
    it = lower_bound(m1[x[i]].begin(), m1[x[i]].end(), y[i]); /* line 38 slow_hit_count: 20, fast_hit_count: 1 */
    k = --m1[x[i]].end(); /* line 39 slow_hit_count: 20, fast_hit_count: 1 */
    if (it != k && k != m1[x[i]].begin()) cnt++; /* line 40 slow_hit_count: 20, fast_hit_count: 1 */
    if (it != m1[x[i]].begin()) cnt++; /* line 41 slow_hit_count: 20, fast_hit_count: 1 */
    it = lower_bound(m2[y[i]].begin(), m2[y[i]].end(), x[i]); /* line 42 slow_hit_count: 20, fast_hit_count: 1 */
    k = --m2[y[i]].end(); /* line 43 slow_hit_count: 20, fast_hit_count: 1 */
    if (it != k && k != m2[y[i]].begin()) cnt++; /* line 44 slow_hit_count: 20, fast_hit_count: 1 */
    if (it != m2[y[i]].begin()) cnt++; /* line 45 slow_hit_count: 20, fast_hit_count: 1 */
    it = lower_bound(m3[x[i] + y[i] - 1].begin(), m3[x[i] + y[i] - 1].end(), /* line 46 slow_hit_count: 20, fast_hit_count: 1 */
                     x[i]); /* line 47 slow_hit_count: 40, fast_hit_count: 2 */
    k = --m3[x[i] + y[i] - 1].end(); /* line 48 slow_hit_count: 20, fast_hit_count: 1 */
    if (it != k && k != m3[x[i] + y[i] - 1].begin()) cnt++; /* line 49 slow_hit_count: 20, fast_hit_count: 1 */
    if (it != m3[x[i] + y[i] - 1].begin()) cnt++; /* line 50 slow_hit_count: 20, fast_hit_count: 1 */
    it = lower_bound(m4[y[i] - x[i]].begin(), m4[y[i] - x[i]].end(), x[i]); /* line 51 slow_hit_count: 20, fast_hit_count: 1 */
    k = --m4[y[i] - x[i]].end(); /* line 52 slow_hit_count: 20, fast_hit_count: 1 */
    if (it != k && k != m4[y[i] - x[i]].begin()) cnt++; /* line 53 slow_hit_count: 20, fast_hit_count: 1 */
    if (it != m4[y[i] - x[i]].begin()) cnt++; /* line 54 slow_hit_count: 20, fast_hit_count: 1 */
    ans[cnt]++; /* line 55 slow_hit_count: 20, fast_hit_count: 1 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < 9; i++) printf("%d ", ans[i]); /* line 57 slow_hit_count: 10, fast_hit_count: 10 */
  cout << endl; /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 60 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Sorting Operations**: 
   - Lines 20, 24, 28, and 32 involve sorting vectors `m1[x[i]]`, `m2[y[i]]`, `m3[x[i] + y[i] - 1]`, and `m4[y[i] - x[i]]`. These lines show significantly more hit counts for the slow input, indicating frequent sorting operations.

2. **Frequent Access to Data Structures**:
   - Lines 19, 23, 27, and 31 check for the existence of entries in the map `ss`, which seems to be used to ensure sorting happens only once per unique key. The frequent access suggests an inefficiency in how data is being prepared for these operations.

3. **Lower Bound Searches**:
   - Lines 38, 42, 46, and 51 perform `lower_bound` searches on previously sorted arrays. These lines also account for significant hit counts, emphasizing repeated searching operations due to their position inside nested loops.

### Phase 2: Derive Performance-Characterizing Invariants

Given the insights from Phase 1, we can derive the following performance-characterizing invariants:

1. **Repeated Sorting Invariant**:
   - **Natural language**: If a particular row, column, or diagonal has many queens, and sorting is triggered repeatedly due to these queens, performance may degrade significantly.
   - **Condition**: This is especially true when the same list is sorted multiple times for different queens, which can happen if many queens share the same line, column, or diagonal.

2. **Frequent Search Invariant**:
   - **Natural language**: If the number of queens is large and many share similar rows, columns, or diagonals, causing frequent lower bound searches, the computation may slow down.
   - **Condition**: This slowdown is pronounced when `m` is large compared to `n`, as more queens imply more searching operations per queen.

3. **High Frequency Trigger Invariant**:
   - **Natural language**: If the same map keys (`m1`, `m2`, `m3`, `m4`) are accessed repeatedly within the loop, leading to repeated operations on the same data structures, performance will degrade.
   - **Condition**: This is especially likely when a significant portion of queens aligns along specific rows or diagonals.

4. **Threshold Complexity Invariant**:
   - **Natural language**: When the number of queens `m` approaches the upper limit relative to the board size `n`, the algorithm is more likely to exhibit performance issues due to increased complexity of sorting and searching operations.
   - **Condition**: The performance issues manifest when `m` is a considerable fraction of `n^2`, leading to closely packed queens and hence repetitive operations.

These invariants encompass conditions that may not only trigger slow execution for the current examples but also anticipate future scenarios with similar structural patterns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A queen is the strongest chess piece. In modern chess the queen can move any number of squares in any horizontal, vertical or diagonal direction (considering that there're no other pieces on its way). The queen combines the options given to the rook and the bishop.

There are m queens on a square n × n chessboard. You know each queen's positions, the i-th queen is positioned in the square (ri, ci), where ri is the board row number (numbered from the top to the bottom from 1 to n), and ci is the board's column number (numbered from the left to the right from 1 to n). No two queens share the same position.

For each queen one can count w — the number of other queens that the given queen threatens (attacks). For a fixed attack direction only the first queen in this direction is under attack if there are many queens are on the ray of the attack. Obviously, for any queen w is between 0 and 8, inclusive.

Print the sequence t0, t1, ..., t8, where ti is the number of queens that threaten exactly i other queens, i.e. the number of queens that their w equals i.

Input

The first line of the input contains a pair of integers n, m (1 ≤ n, m ≤ 105), where n is the size of the board and m is the number of queens on the board. Then m following lines contain positions of the queens, one per line. Each line contains a pair of integers ri, ci (1 ≤ ri, ci ≤ n) — the queen's position. No two queens stand on the same square.

Output

Print the required sequence t0, t1, ..., t8, separating the numbers with spaces.

Examples

Input

8 4
4 3
4 8
6 5
1 6


Output

0 3 0 1 0 0 0 0 0 

Input

10 3
1 1
1 2
1 3


Output

0 2 1 0 0 0 0 0 0 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants in C++

Here, I will translate the performance-characterizing invariants into C++ checker functions.

```cpp
void check_repeated_sorting_invariant(int m, const map<int, vector<int>>& m1, const map<int, vector<int>>& m2, const map<int, vector<int>>& m3, const map<int, vector<int>>& m4) {
    for (const auto& pair : {m1, m2, m3, m4}) {
        for (const auto& entry : pair) {
            if (entry.second.size() > m / 4) { // Assuming a threshold that implies frequent sorting
                cerr << "Warning: sort_invariant triggered - repeatedly sorting large data sets" << endl;
                abort();
            }
        }
    }
}

void check_frequent_search_invariant(int m, int n) {
    if (m > n * n / 10) { // Assume a threshold where m significantly impacts searching
        cerr << "Warning: search_invariant triggered - frequent searching due to high queen density" << endl;
        abort();
    }
}

void check_high_frequency_trigger_invariant(int m, const map<pair<int, int>, bool>& ss) {
    if (ss.size() > m / 2) { // Assuming a threshold indicating repeated access
        cerr << "Warning: high_frequency_invariant triggered - high frequency of repeated data access" << endl;
        abort();
    }
}

void check_threshold_complexity_invariant(int n, int m) {
    if (m > n * n / 4) { // If queens are densely packed
        cerr << "Warning: threshold_invariant triggered - dense queen distribution" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the C++ Program

Now, I'll integrate these checks into the provided solution. I will place them at strategic points to avoid additional overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

map<int, vector<int>> m1, m2, m3, m4;
vector<int>::iterator it, k;
int n, m, x[100010], y[100010], ans[77] = {0};
map<pair<int, int>, bool> ss;

// Function implementations for the performance checks
void check_repeated_sorting_invariant(int m, const map<int, vector<int>>& m1, const map<int, vector<int>>& m2, const map<int, vector<int>>& m3, const map<int, vector<int>>& m4) {
    for (const auto& pair : {m1, m2, m3, m4}) {
        for (const auto& entry : pair) {
            if (entry.second.size() > m / 4) {
                cerr << "Warning: sort_invariant triggered - repeatedly sorting large data sets" << endl;
                abort();
            }
        }
    }
}

void check_frequent_search_invariant(int m, int n) {
    if (m > n * n / 10) {
        cerr << "Warning: search_invariant triggered - frequent searching due to high queen density" << endl;
        abort();
    }
}

void check_high_frequency_trigger_invariant(int m, const map<pair<int, int>, bool>& ss) {
    if (ss.size() > m / 2) {
        cerr << "Warning: high_frequency_invariant triggered - high frequency of repeated data access" << endl;
        abort();
    }
}

void check_threshold_complexity_invariant(int n, int m) {
    if (m > n * n / 4) {
        cerr << "Warning: threshold_invariant triggered - dense queen distribution" << endl;
        abort();
    }
}

int main() {
    scanf("%d%d", &n, &m);
    for (int i = 0; i < m; i++) {
        scanf("%d%d", &x[i], &y[i]);
        m1[x[i]].push_back(y[i]);
        m2[y[i]].push_back(x[i]);
        m3[x[i] + y[i] - 1].push_back(x[i]);
        m4[y[i] - x[i]].push_back(x[i]);
    }

    // Insert checks after initial data structure setup
    check_threshold_complexity_invariant(n, m);

    for (int i = 0; i < m; i++) {
        if (!ss[make_pair(1, x[i])]) {
            sort(m1[x[i]].begin(), m1[x[i]].end());
            ss[make_pair(1, x[i])] = true;
        }
        if (!ss[make_pair(2, y[i])]) {
            sort(m2[y[i]].begin(), m2[y[i]].end());
            ss[make_pair(2, y[i])] = true;
        }
        if (!ss[make_pair(3, x[i] + y[i] - 1)]) {
            sort(m3[x[i] + y[i] - 1].begin(), m3[x[i] + y[i] - 1].end());
            ss[make_pair(3, x[i] + y[i] - 1)] = true;
        }
        if (!ss[make_pair(4, y[i] - x[i])]) {
            sort(m4[y[i] - x[i]].begin(), m4[y[i] - x[i]].end());
            ss[make_pair(4, y[i] - x[i])] = true;
        }
    }

    // Insert checks after potential sorting
    check_repeated_sorting_invariant(m, m1, m2, m3, m4);
    check_high_frequency_trigger_invariant(m, ss);

    for (int i = 0; i < m; i++) {
        int cnt = 0;
        it = lower_bound(m1[x[i]].begin(), m1[x[i]].end(), y[i]);
        k = --m1[x[i]].end();
        if (it != k && k != m1[x[i]].begin()) cnt++;
        if (it != m1[x[i]].begin()) cnt++;
        it = lower_bound(m2[y[i]].begin(), m2[y[i]].end(), x[i]);
        k = --m2[y[i]].end();
        if (it != k && k != m2[y[i]].begin()) cnt++;
        if (it != m2[y[i]].begin()) cnt++;
        it = lower_bound(m3[x[i] + y[i] - 1].begin(), m3[x[i] + y[i] - 1].end(), x[i]);
        k = --m3[x[i] + y[i] - 1].end();
        if (it != k && k != m3[x[i] + y[i] - 1].begin()) cnt++;
        if (it != m3[x[i] + y[i] - 1].begin()) cnt++;
        it = lower_bound(m4[y[i] - x[i]].begin(), m4[y[i] - x[i]].end(), x[i]);
        k = --m4[y[i] - x[i]].end();
        if (it != k && k != m4[y[i] - x[i]].begin()) cnt++;
        if (it != m4[y[i] - x[i]].begin()) cnt++;
        ans[cnt]++;
    }

    // Insert check for frequent searches
    check_frequent_search_invariant(m, n);
    
    for (int i = 0; i < 9; i++) 
        printf("%d ", ans[i]);
    cout << endl;
    return 0;
}
```

This integration ensures that the program is analyzed for potential performance bottlenecks without adding overhead in performance-critical loops.

