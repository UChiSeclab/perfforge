system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A card pyramid of height 1 is constructed by resting two cards against each other. For h>1, a card pyramid of height h is constructed by placing a card pyramid of height h-1 onto a base. A base consists of h pyramids of height 1, and h-1 cards on top. For example, card pyramids of heights 1, 2, and 3 look as follows:

<image>

You start with n cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?

Input

Each test consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next t lines contain descriptions of test cases.

Each test case contains a single integer n (1≤ n≤ 10^9) — the number of cards.

It is guaranteed that the sum of n over all test cases does not exceed 10^9.

Output

For each test case output a single integer — the number of pyramids you will have constructed in the end.

Example

Input


5
3
14
15
24
1


Output


1
2
1
3
0

Note

In the first test, you construct a pyramid of height 1 with 2 cards. There is 1 card remaining, which is not enough to build a pyramid.

In the second test, you build two pyramids, each of height 2, with no cards remaining.

In the third test, you build one pyramid of height 3, with no cards remaining.

In the fourth test, you build one pyramid of height 3 with 9 cards remaining. Then you build a pyramid of height 2 with 2 cards remaining. Then you build a final pyramid of height 1 with no cards remaining.

In the fifth test, one card is not enough to build any pyramids.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int tests;
long long high(long long n) { return (n * (3 * n + 1)) / 2; }
int main() {
  tests = 1;
  cin >> tests;
  while (tests--) {
    long long n;
    cin >> n;
    long long ans = 0;
    for (int i = 100000; i > 0; i--) {
      long long x = high(i);
      while (x <= n) {
        ans++;
        n = n - x;
      }
    }
    cout << ans << '\n';
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
1
12
4
1
2
1
8
2
9
9
5
1
2
11
4
4
1
9
2
2
8
1
1
4
1
4
4
5
11
1
4
6
13
4
1
5
21
1
1
2
12
6
3
6
3
1
1
10
2
2
1
1
3
5
2
5
1
7
3
4
9
5
2
3
14
8
1
5
5
2
3
3
7
2
4
7
5
14
4
10
3
4
25
3
6
13
2
3
7
6
1
2
1
4
1
4
1
3
17
6


(G.2) Fast Input

5
3
14
15
24
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int tests; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long high(long long n) { return (n * (3 * n + 1)) / 2; } /* line 4 slow_hit_count: 10000000, fast_hit_count: 500000 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  tests = 1; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> tests; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  while (tests--) { /* line 8 slow_hit_count: 101, fast_hit_count: 6 */
    long long n; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> n; /* line 10 slow_hit_count: 100, fast_hit_count: 5 */
    long long ans = 0; /* line 11 slow_hit_count: 100, fast_hit_count: 5 */
    for (int i = 100000; i > 0; i--) { /* line 12 slow_hit_count: 10000100, fast_hit_count: 500005 */
      long long x = high(i); /* line 13 slow_hit_count: 10000000, fast_hit_count: 500000 */
      while (x <= n) { /* line 14 slow_hit_count: 10000141, fast_hit_count: 500007 */
        ans++; /* line 15 slow_hit_count: 141, fast_hit_count: 7 */
        n = n - x; /* line 16 slow_hit_count: 141, fast_hit_count: 7 */
      } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans << '\n'; /* line 19 slow_hit_count: 100, fast_hit_count: 5 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

After analyzing the hit counts for both the slow and fast inputs, we can observe:

1. **Function `high(int)`**: This function is heavily hit, with 10,000,000 calls on the slow input and 500,000 calls on the fast input. This indicates that calculating the number of cards required for a pyramid of a given height is a frequent operation.

2. **Loop `for (int i = 100000; i > 0; i--)`**: This loop is responsible for iterating over possible pyramid heights. The loop has a hit count of 10,000,100 on the slow input versus 500,005 on the fast input, indicating that it runs significantly more often for the slow input.

3. **Inner `while (x <= n)` Loop**: The condition `x <= n` is checked 141 times for the slow input and 7 times for the fast input. This suggests the loop is entered more often with the slow input, resulting in more decrements of `n` and increments of `ans`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the natural language descriptions of the conditions under which the program slows down:

1. **High Iteration Counts in Loop**: 
   - **Invariant**: "The program may slow down significantly when the number of remaining cards (`n`) is such that many pyramid heights need to be checked before finding a valid one to construct. This often occurs when `n` is large but not aligned with the card requirements for taller pyramids."
   - **Explanation**: If `n` results in the loop checking many pyramid heights, it incurs a large number of calls to the `high` function, slowing down execution.

2. **Repeated Small Reductions of `n`**:
   - **Invariant**: "If `n` is such that it frequently allows small pyramids to be constructed before a significant reduction in the remaining card count, the loop will execute many iterations, causing performance degradation."
   - **Explanation**: When `n` repeatedly allows construction of small pyramids, we see more hits in the inner `while (x <= n)` loop, slowing the program due to repetitive subtraction and assignment operations.

3. **Pyramid Height Threshold**:
   - **Invariant**: "When the largest pyramid that can be built with `n` is of a small height relative to the number of iterations the loop `for (int i = 100000; i > 0; i--)` must perform, the execution time increases substantially."
   - **Explanation**: As the loop checks all possible heights down from 100,000, longer searches through this list (when high results are rarely feasible) can cause slowdowns.

4. **Excessive Function Calls**:
   - **Invariant**: "Excessive calls to the function `high` may occur when a large number of card amounts (close to large pyramid base numbers) are frequently evaluated, which can degrade performance."
   - **Explanation**: This emphasizes that when `n` stays large enough for frequent evaluations, the program performs more calculations, slowing down overall performance.

These statements provide a comprehensive overview of the likely causes of slow performance based on the data structure and logic in the provided code.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A card pyramid of height 1 is constructed by resting two cards against each other. For h>1, a card pyramid of height h is constructed by placing a card pyramid of height h-1 onto a base. A base consists of h pyramids of height 1, and h-1 cards on top. For example, card pyramids of heights 1, 2, and 3 look as follows:

<image>

You start with n cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?

Input

Each test consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next t lines contain descriptions of test cases.

Each test case contains a single integer n (1≤ n≤ 10^9) — the number of cards.

It is guaranteed that the sum of n over all test cases does not exceed 10^9.

Output

For each test case output a single integer — the number of pyramids you will have constructed in the end.

Example

Input


5
3
14
15
24
1


Output


1
2
1
3
0

Note

In the first test, you construct a pyramid of height 1 with 2 cards. There is 1 card remaining, which is not enough to build a pyramid.

In the second test, you build two pyramids, each of height 2, with no cards remaining.

In the third test, you build one pyramid of height 3, with no cards remaining.

In the fourth test, you build one pyramid of height 3 with 9 cards remaining. Then you build a pyramid of height 2 with 2 cards remaining. Then you build a final pyramid of height 1 with no cards remaining.

In the fifth test, one card is not enough to build any pyramids.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants we previously identified, let's translate them into C++ code snippets for runtime checks. 

```cpp
void check_high_iteration_invariant(long long n, int i) {
    if (n > 0 && i == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration counts in loop!" << endl;
        abort();
    }
}

void check_small_reductions_invariant(long long n, long long x) {
    if (n < 2 * x && n > 0) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated small reductions of n!" << endl;
        abort();
    }
}

void check_pyramid_height_threshold(int i, long long x, long long n) {
    if (i < 10 && n > 0 && x > n) {
        cerr << "Warning: Performance bottleneck condition triggered - pyramid height threshold!" << endl;
        abort();
    }
}

void check_excessive_function_calls(int highCalls) {
    if (highCalls > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive function calls to 'high'!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Program

Now, let's integrate the checker code into the original C++ program to monitor and detect performance bottlenecks effectively.

```cpp
#include <bits/stdc++.h>
using namespace std;

int tests;
long long high(long long n) { return (n * (3 * n + 1)) / 2; }

// Checker functions
void check_high_iteration_invariant(long long n, int i) {
    if (n > 0 && i == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration counts in loop!" << endl;
        abort();
    }
}

void check_small_reductions_invariant(long long n, long long x) {
    if (n < 2 * x && n > 0) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated small reductions of n!" << endl;
        abort();
    }
}

void check_pyramid_height_threshold(int i, long long x, long long n) {
    if (i < 10 && n > 0 && x > n) {
        cerr << "Warning: Performance bottleneck condition triggered - pyramid height threshold!" << endl;
        abort();
    }
}

void check_excessive_function_calls(int highCalls) {
    if (highCalls > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive function calls to 'high'!" << endl;
        abort();
    }
}

int main() {
    tests = 1;
    cin >> tests;
    while (tests--) {
        long long n;
        cin >> n;
        long long ans = 0;
        int highCalls = 0; // To track the number of calls to the high() function.
        
        for (int i = 100000; i > 0; i--) {
            long long x = high(i);
            highCalls++;
            
            check_excessive_function_calls(highCalls); // Check excessive high calls
            
            while (x <= n) {
                ans++;
                n = n - x;
                check_small_reductions_invariant(n, x); // Check small reductions 
            }
            
            check_high_iteration_invariant(n, i); // Check high iterations
            check_pyramid_height_threshold(i, x, n); // Check pyramid height threshold
        }
        cout << ans << '\n';
    }
    return 0;
}
```

### Explanation

- **`check_high_iteration_invariant`**: Checks if the loop is iterating excessively with no significant progress.
- **`check_small_reductions_invariant`**: Triggers if `n` allows only small pyramids repeatedly, slowing the computation.
- **`check_pyramid_height_threshold`**: Monitors pyramid height feasibility for `n`, especially when the loop checks nearly all heights.
- **`check_excessive_function_calls`**: Counts the number of calls to `high` to ensure it does not become a performance bottleneck.

These checks allow the program to abort when potential inefficiencies are detected, aiding in thorough performance analysis.

