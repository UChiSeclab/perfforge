system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A card pyramid of height 1 is constructed by resting two cards against each other. For h>1, a card pyramid of height h is constructed by placing a card pyramid of height h-1 onto a base. A base consists of h pyramids of height 1, and h-1 cards on top. For example, card pyramids of heights 1, 2, and 3 look as follows:

<image>

You start with n cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?

Input

Each test consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next t lines contain descriptions of test cases.

Each test case contains a single integer n (1≤ n≤ 10^9) — the number of cards.

It is guaranteed that the sum of n over all test cases does not exceed 10^9.

Output

For each test case output a single integer — the number of pyramids you will have constructed in the end.

Example

Input


5
3
14
15
24
1


Output


1
2
1
3
0

Note

In the first test, you construct a pyramid of height 1 with 2 cards. There is 1 card remaining, which is not enough to build a pyramid.

In the second test, you build two pyramids, each of height 2, with no cards remaining.

In the third test, you build one pyramid of height 3, with no cards remaining.

In the fourth test, you build one pyramid of height 3 with 9 cards remaining. Then you build a pyramid of height 2 with 2 cards remaining. Then you build a final pyramid of height 1 with no cards remaining.

In the fifth test, one card is not enough to build any pyramids.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  long long t, max = 0, a;
  cin >> t;
  vector<long long> v, cards;
  for (int i = 0; i < t; i++) {
    cin >> a;
    v.push_back(a);
    if (a > max) max = v[i];
  }
  for (int i = 1; ((3 * i * i + i) / 2) <= max; i++) {
    cards.push_back((3 * i * i + i) / 2);
  }
  for (int i = 0; i < v.size(); i++) {
    int count = 0;
    while (v[i] >= cards[0]) {
      auto upper1 = upper_bound(cards.begin(), cards.end(), v[i]);
      if (upper1 == cards.end()) {
      } else {
      }
      v[i] -= *(--upper1);
      count++;
    }
    cout << count << "\n";
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
1000001000


(G.2) Fast Input

1
0000011001


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long long t, max = 0, a; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> t; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> v, cards; /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < t; i++) { /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> a; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    v.push_back(a); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
    if (a > max) max = v[i]; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; ((3 * i * i + i) / 2) <= max; i++) { /* line 12 slow_hit_count: 25820, fast_hit_count: 86 */
    cards.push_back((3 * i * i + i) / 2); /* line 13 slow_hit_count: 25819, fast_hit_count: 85 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < v.size(); i++) { /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
    int count = 0; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
    while (v[i] >= cards[0]) { /* line 17 slow_hit_count: 7, fast_hit_count: 7 */
      auto upper1 = upper_bound(cards.begin(), cards.end(), v[i]); /* line 18 slow_hit_count: 6, fast_hit_count: 6 */
      if (upper1 == cards.end()) { /* line 19 slow_hit_count: 6, fast_hit_count: 6 */
      } else { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      v[i] -= *(--upper1); /* line 22 slow_hit_count: 6, fast_hit_count: 6 */
      count++; /* line 23 slow_hit_count: 6, fast_hit_count: 6 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    cout << count << "\n"; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 27 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ## Performance Analysis

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line 12 Hit Count Analysis:**
   - **Line 12** (`for (int i = 1; ((3 * i * i + i) / 2) <= max; i++)`): The slow input has 25,820 hits, whereas the fast input only has 86 hits.
   - **Line 13** (`cards.push_back((3 * i * i + i) / 2)`): Closely related to line 12, this line has been hit almost as much, indicating that the loop runs many times for the slow input, suggesting this is a computation-heavy loop.

2. **Remarks:**
   - The loop at line 12 calculates potential pyramid heights given the maximum number of cards in any test case. This loop scales with `sqrt(max)`, and when `max` is large, it can become a significant bottleneck.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis of the line hit counts and the structure of the code, we can derive the following performance-characterizing invariants:

1. **Invariant 1: Large Maximum Card Count Across Test Cases**
   - **Natural Language Description:** When the maximum number of cards across all test cases is large, the pre-calculation of pyramid structures (i.e., loop to fill the `cards` vector) can dominate the execution time. This is particularly true when `max` becomes large enough to cause many iterations in the loop calculating pyramid heights.
   - **Threshold Justification:** The threshold is implicitly defined by the complexity of the loop, which scales with the square root of the largest `n`. Given constraints (e.g., `n ≤ 10^9`), this loop could iterate over several tens of thousands of times, which is significant.

2. **Invariant 2: Excessive Card Calculations for Large `n`**
   - **Natural Language Description:** When the number of cards `n` is very large, the system spends a substantial amount of time calculating the maximum pyramid heights, which leads to increased computation in the loop responsible for determining pyramid structures.
   - **Threshold Justification:** This invariant highlights the potential computational overhead when `n` grows close to its upper constraint, causing increased iterations for each test case in determining the largest feasible pyramid height.

### General Conclusion

The performance bottleneck in the code arises primarily from the pre-calculation of possible pyramid heights when `max` is large. The loop on line 12 scales with `sqrt(max)`, which can become a dominant factor in execution time for large values of `n`. To optimize, consider reducing the number of iterations in this setup phase or caching results if multiple test cases have similar `max` values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A card pyramid of height 1 is constructed by resting two cards against each other. For h>1, a card pyramid of height h is constructed by placing a card pyramid of height h-1 onto a base. A base consists of h pyramids of height 1, and h-1 cards on top. For example, card pyramids of heights 1, 2, and 3 look as follows:

<image>

You start with n cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?

Input

Each test consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next t lines contain descriptions of test cases.

Each test case contains a single integer n (1≤ n≤ 10^9) — the number of cards.

It is guaranteed that the sum of n over all test cases does not exceed 10^9.

Output

For each test case output a single integer — the number of pyramids you will have constructed in the end.

Example

Input


5
3
14
15
24
1


Output


1
2
1
3
0

Note

In the first test, you construct a pyramid of height 1 with 2 cards. There is 1 card remaining, which is not enough to build a pyramid.

In the second test, you build two pyramids, each of height 2, with no cards remaining.

In the third test, you build one pyramid of height 3, with no cards remaining.

In the fourth test, you build one pyramid of height 3 with 9 cards remaining. Then you build a pyramid of height 2 with 2 cards remaining. Then you build a final pyramid of height 1 with no cards remaining.

In the fifth test, one card is not enough to build any pyramids.

Solution (C++ code):
{solution}


assistant: Phase 3: Implement the Natural Language Invariants in C++

1. **Invariant 1: Large Maximum Card Count Across Test Cases**

   ```cpp
   void check_max_cards_invariant(long long max) {
       if (max > 1000000) {  // Example threshold
           cerr << "Warning: Performance bottleneck condition triggered due to large max card count!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Excessive Card Calculations for Large `n`**

   ```cpp
   void check_large_n_invariant(long long n) {
       if (n > 1000000) {  // Example threshold
           cerr << "Warning: Performance bottleneck condition triggered due to large n value!" << endl;
           abort();
       }
   }
   ```

Phase 4: Integrate the Checker Code into the Original Program

Here, we integrate the checker code into the C++ program at strategic points to catch potential performance issues without adding unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for large maximum card count across test cases
void check_max_cards_invariant(long long max) {
    if (max > 1000000) {  // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered due to large max card count!" << endl;
        abort();
    }
}

// Checker for large `n` in a single test case
void check_large_n_invariant(long long n) {
    if (n > 1000000) {  // Example threshold
        cerr << "Warning: Performance bottleneck condition triggered due to large n value!" << endl;
        abort();
    }
}

int main() {
    long long t, max = 0, a;
    cin >> t;
    vector<long long> v, cards;
    for (int i = 0; i < t; i++) {
        cin >> a;
        v.push_back(a);
        if (a > max) max = v[i];
        check_large_n_invariant(a); // Check for large `n` in a single test case
    }
    check_max_cards_invariant(max); // Check for large maximum card count

    for (int i = 1; ((3 * i * i + i) / 2) <= max; i++) {
        cards.push_back((3 * i * i + i) / 2);
    }
    for (int i = 0; i < v.size(); i++) {
        int count = 0;
        while (v[i] >= cards[0]) {
            auto upper1 = upper_bound(cards.begin(), cards.end(), v[i]);
            if (upper1 == cards.end()) {
            } else {
            }
            v[i] -= *(--upper1);
            count++;
        }
        cout << count << "\n";
    }
}
```

**Explanation:**
- **Max Cards Check:** The check `check_max_cards_invariant(max)` is placed after the maximum card count is determined from all test cases. This ensures the check is performed once and avoids any redundant checks within loops.
- **Large `n` Check:** The check `check_large_n_invariant(a)` is placed inside the loop reading inputs to catch any large `n` values immediately, preventing excessive operations on very large numbers.

