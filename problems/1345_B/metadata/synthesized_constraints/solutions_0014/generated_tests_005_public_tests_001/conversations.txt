system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A card pyramid of height 1 is constructed by resting two cards against each other. For h>1, a card pyramid of height h is constructed by placing a card pyramid of height h-1 onto a base. A base consists of h pyramids of height 1, and h-1 cards on top. For example, card pyramids of heights 1, 2, and 3 look as follows:

<image>

You start with n cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?

Input

Each test consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next t lines contain descriptions of test cases.

Each test case contains a single integer n (1≤ n≤ 10^9) — the number of cards.

It is guaranteed that the sum of n over all test cases does not exceed 10^9.

Output

For each test case output a single integer — the number of pyramids you will have constructed in the end.

Example

Input


5
3
14
15
24
1


Output


1
2
1
3
0

Note

In the first test, you construct a pyramid of height 1 with 2 cards. There is 1 card remaining, which is not enough to build a pyramid.

In the second test, you build two pyramids, each of height 2, with no cards remaining.

In the third test, you build one pyramid of height 3, with no cards remaining.

In the fourth test, you build one pyramid of height 3 with 9 cards remaining. Then you build a pyramid of height 2 with 2 cards remaining. Then you build a final pyramid of height 1 with no cards remaining.

In the fifth test, one card is not enough to build any pyramids.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long p[100000];
int main() {
  for (long long i = 1; i < 100000; i++) {
    p[i] = i * i + ((i + 1) * i) / 2;
  }
  int n;
  cin >> n;
  while (n--) {
    long long m, cnt = 0;
    cin >> m;
    for (long long i = 100000 - 1; i >= 1; i--) {
      if (p[i] <= m) {
        m -= p[i];
        cnt++;
        i++;
      }
    }
    printf("%lld\n", cnt);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
1
12
4
1
2
1
8
2
9
9
5
1
2
11
4
4
1
9
2
2
8
1
1
4
1
4
4
5
11
1
4
6
13
4
1
5
21
1
1
2
12
6
3
6
3
1
1
10
2
2
1
1
3
5
2
5
1
7
3
4
9
5
2
3
14
8
1
6
5
2
3
3
7
2
2
7
5
14
4
10
3
4
25
3
6
13
2
3
7
6
1
2
1
4
1
4
1
3
17
6


(G.2) Fast Input

5
3
14
15
24
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long p[100000]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i < 100000; i++) { /* line 5 slow_hit_count: 100000, fast_hit_count: 100000 */
    p[i] = i * i + ((i + 1) * i) / 2; /* line 6 slow_hit_count: 99999, fast_hit_count: 99999 */
  } /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  int n; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  while (n--) { /* line 10 slow_hit_count: 101, fast_hit_count: 6 */
    long long m, cnt = 0; /* line 11 slow_hit_count: 100, fast_hit_count: 5 */
    cin >> m; /* line 12 slow_hit_count: 100, fast_hit_count: 5 */
    for (long long i = 100000 - 1; i >= 1; i--) { /* line 13 slow_hit_count: 10000141, fast_hit_count: 500007 */
      if (p[i] <= m) { /* line 14 slow_hit_count: 10000041, fast_hit_count: 500002 */
        m -= p[i]; /* line 15 slow_hit_count: 141, fast_hit_count: 7 */
        cnt++; /* line 16 slow_hit_count: 141, fast_hit_count: 7 */
        i++; /* line 17 slow_hit_count: 141, fast_hit_count: 7 */
      } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%lld\n", cnt); /* line 20 slow_hit_count: 100, fast_hit_count: 5 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-level Hit Counts:**
   - **Line 13 (for-loop initiation):** The hit count is **10,000,141** for the slow input versus **500,007** for the fast input. This indicates this line is running significantly more during the slow input.
   - **Line 14 (if-condition check):** The hit count is **10,000,041** for the slow input versus **500,002** for the fast input. This suggests that many iterations of the loop are spent checking this condition.
   - **Lines 15-17 (Inside the if-condition):** These lines execute **141** times for the slow input versus **7** times for the fast input. This indicates that while the loop itself runs many times, the condition `p[i] <= m` is only rarely true.

2. **Inference:**
   - The for-loop from line 13 iterates through a large range of `i` values. However, due to the nature of the problem, checking `p[i] <= m` involves a large number of unnecessary iterations, particularly when `m` is small compared to the values in the array `p`.
   - The high number of iterations in the loop suggests inefficiency as most loop iterations do not contribute to building a pyramid (i.e., the condition is not satisfied).

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariants:**
   - **Invariant 1:** "If the number of cards `m` is small relative to the largest pyramid that can be built, the program spends a large number of iterations checking if smaller pyramids can be built, resulting in inefficiency."
   - **Invariant 2:** "If the card count `m` requires many decrements before a valid decrement occurs, the time complexity increases due to repeated evaluations of the large decrement loop."
   - **Invariant 3:** "When multiple test cases have small or similarly sized card counts `m`, the program may repeatedly perform unnecessary calculations leading to high overhead."
   
2. **Explain Conditions:**
   - The inefficiency primarily arises when `m` is not sufficient to build a large pyramid, causing the loop to iterate through many values without decrementing `m`. This is exacerbated when multiple small test cases are processed sequentially.
   - When `m` is small relative to the range of `p[i]` values being checked, the loop executes many redundant iterations.
   - The issue is compounded as the loop starts from a high index and works backward, meaning it often checks values much larger than `m`, which leads to inefficiency when `m` is low.

These invariants help to identify scenarios where the program may slow down, particularly when handling small values of `m`. Additionally, they suggest avoiding unnecessarily iterating through large arrays when the condition is unlikely to be satisfied.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A card pyramid of height 1 is constructed by resting two cards against each other. For h>1, a card pyramid of height h is constructed by placing a card pyramid of height h-1 onto a base. A base consists of h pyramids of height 1, and h-1 cards on top. For example, card pyramids of heights 1, 2, and 3 look as follows:

<image>

You start with n cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?

Input

Each test consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next t lines contain descriptions of test cases.

Each test case contains a single integer n (1≤ n≤ 10^9) — the number of cards.

It is guaranteed that the sum of n over all test cases does not exceed 10^9.

Output

For each test case output a single integer — the number of pyramids you will have constructed in the end.

Example

Input


5
3
14
15
24
1


Output


1
2
1
3
0

Note

In the first test, you construct a pyramid of height 1 with 2 cards. There is 1 card remaining, which is not enough to build a pyramid.

In the second test, you build two pyramids, each of height 2, with no cards remaining.

In the third test, you build one pyramid of height 3, with no cards remaining.

In the fourth test, you build one pyramid of height 3 with 9 cards remaining. Then you build a pyramid of height 2 with 2 cards remaining. Then you build a final pyramid of height 1 with no cards remaining.

In the fifth test, one card is not enough to build any pyramids.

Solution (C++ code):
{solution}


assistant: Certainly! Let's proceed step by step.

### Phase 3: Implement Checkers in C++

For each natural language invariant from Phase 2, we will create a function to check the condition at runtime.

#### Invariant 1:

**Natural Language Description:**  
"If the number of cards `m` is small relative to the largest pyramid that can be built, the program spends a large number of iterations checking if smaller pyramids can be built, resulting in inefficiency."

**Checker Code:**

```cpp
void check_small_m_invariant(long long m, long long largestPyramidSize) {
    if (m < largestPyramidSize / 10) { // arbitrary threshold: m is significantly smaller
        cerr << "Warning: Inefficient check - m is too small relative to pyramid size" << endl;
        abort();
    }
}
```

#### Invariant 2:

**Natural Language Description:**  
"If the card count `m` requires many decrements before a valid decrement occurs, the time complexity increases due to repeated evaluations of the large decrement loop."

**Checker Code:**

```cpp
void check_pyramid_construction_invariant(long long loopCounter, long long maxIterations) {
    if (loopCounter > maxIterations) { // arbitrary threshold: too many iterations
        cerr << "Warning: Performance bottleneck - excessive loop iterations for decrement" << endl;
        abort();
    }
}
```

#### Invariant 3:

**Natural Language Description:**  
"When multiple test cases have small or similarly sized card counts `m`, the program may repeatedly perform unnecessary calculations leading to high overhead."

**Checker Code:**

```cpp
void check_multiple_small_cases(int countOfSmallCases, int threshold) {
    if (countOfSmallCases > threshold) {
        cerr << "Warning: Multiple small cases detected" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the C++ Program

Now, let's integrate these checkers into the original program:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for small `m` relative to pyramid sizes
void check_small_m_invariant(long long m, long long largestPyramidSize) {
    if (m < largestPyramidSize / 10) {
        cerr << "Warning: Inefficient check - m is too small relative to pyramid size" << endl;
        abort();
    }
}

// Checker for excessive loop iterations
void check_pyramid_construction_invariant(long long loopCounter, long long maxIterations) {
    if (loopCounter > maxIterations) {
        cerr << "Warning: Performance bottleneck - excessive loop iterations for decrement" << endl;
        abort();
    }
}

// Checker for multiple small test cases
void check_multiple_small_cases(int countOfSmallCases, int threshold) {
    if (countOfSmallCases > threshold) {
        cerr << "Warning: Multiple small cases detected" << endl;
        abort();
    }
}

long long p[100000];

int main() {
    for (long long i = 1; i < 100000; i++) {
        p[i] = i * i + ((i + 1) * i) / 2;
    }
    
    int n, countOfSmallCases = 0, smallThreshold = 50; // set threshold as needed
    cin >> n;
    
    while (n--) {
        long long m, cnt = 0;
        cin >> m;

        // Check if `m` is small relative to the largest pyramid size
        check_small_m_invariant(m, p[99999]);

        long long loopCounter = 0;
        for (long long i = 100000 - 1; i >= 1; i--) {
            loopCounter++;
            if (p[i] <= m) {
                m -= p[i];
                cnt++;
                i++;
            }
        }

        // Check for excessive loop iterations
        check_pyramid_construction_invariant(loopCounter, 500000); // arbitrary max iterations

        // Track small cases
        if (m < 100) {
            countOfSmallCases++;
        }

        printf("%lld\n", cnt);
    }
    
    // Check for multiple small cases
    check_multiple_small_cases(countOfSmallCases, smallThreshold);

    return 0;
}
```

### Explanation of Inserted Checks:

- **`check_small_m_invariant`:** Placed after reading `m` to ensure we do not waste operations.
- **`check_pyramid_construction_invariant`:** Integrated post-loop to catch excessive iteration.
- **`check_multiple_small_cases`:** Evaluates after processing all test cases to ensure significant overhead isn't from small cases.

This code should effectively identify performance bottlenecks, helping both developers and testing tools pinpoint inefficiencies.

