system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A card pyramid of height 1 is constructed by resting two cards against each other. For h>1, a card pyramid of height h is constructed by placing a card pyramid of height h-1 onto a base. A base consists of h pyramids of height 1, and h-1 cards on top. For example, card pyramids of heights 1, 2, and 3 look as follows:

<image>

You start with n cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?

Input

Each test consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next t lines contain descriptions of test cases.

Each test case contains a single integer n (1≤ n≤ 10^9) — the number of cards.

It is guaranteed that the sum of n over all test cases does not exceed 10^9.

Output

For each test case output a single integer — the number of pyramids you will have constructed in the end.

Example

Input


5
3
14
15
24
1


Output


1
2
1
3
0

Note

In the first test, you construct a pyramid of height 1 with 2 cards. There is 1 card remaining, which is not enough to build a pyramid.

In the second test, you build two pyramids, each of height 2, with no cards remaining.

In the third test, you build one pyramid of height 3, with no cards remaining.

In the fourth test, you build one pyramid of height 3 with 9 cards remaining. Then you build a pyramid of height 2 with 2 cards remaining. Then you build a final pyramid of height 1 with no cards remaining.

In the fifth test, one card is not enough to build any pyramids.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long x;
bool fun(long long mid) {
  long long sum = 0;
  for (int i = 1; i < mid; i++) {
    sum += 3 * i;
  }
  sum += 2 * (mid);
  if (sum < x) {
    return false;
  } else {
    return true;
  }
}
long long Count(long long mid) {
  long long sum = 0;
  for (int i = 1; i < mid; i++) {
    sum += 3 * i;
  }
  sum += 2 * (mid);
  return sum;
}
int main() {
  int t;
  cin >> t;
  while (t--) {
    cin >> x;
    long long s = 0;
    while (x >= 2) {
      long long l = 0, r = x / 2 + 1;
      while (l < r) {
        long long mid = l + (r - l) / 2;
        if (fun(mid)) {
          r = mid;
        } else {
          l = mid + 1;
        }
      }
      if (Count(l) == x) {
        x = 0;
        s++;
      } else if (Count(l) > x) {
        x -= Count(l - 1);
        s++;
      } else {
        x -= Count(l);
        s++;
      }
    }
    cout << s << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
333333332
333333333
94712839


(G.2) Fast Input

3
333333332
142809134
94712839


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long x; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
bool fun(long long mid) { /* line 4 slow_hit_count: 149, fast_hit_count: 145 */
  long long sum = 0; /* line 5 slow_hit_count: 149, fast_hit_count: 145 */
  for (int i = 1; i < mid; i++) { /* line 6 slow_hit_count: 381185121, fast_hit_count: 285844988 */
    sum += 3 * i; /* line 7 slow_hit_count: 381184972, fast_hit_count: 285844843 */
  } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  sum += 2 * (mid); /* line 9 slow_hit_count: 149, fast_hit_count: 145 */
  if (sum < x) { /* line 10 slow_hit_count: 149, fast_hit_count: 145 */
    return false; /* line 11 slow_hit_count: 50, fast_hit_count: 50 */
  } else { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    return true; /* line 13 slow_hit_count: 99, fast_hit_count: 95 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
long long Count(long long mid) { /* line 16 slow_hit_count: 46, fast_hit_count: 49 */
  long long sum = 0; /* line 17 slow_hit_count: 46, fast_hit_count: 49 */
  for (int i = 1; i < mid; i++) { /* line 18 slow_hit_count: 114478, fast_hit_count: 98697 */
    sum += 3 * i; /* line 19 slow_hit_count: 114432, fast_hit_count: 98648 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  sum += 2 * (mid); /* line 21 slow_hit_count: 46, fast_hit_count: 49 */
  return sum; /* line 22 slow_hit_count: 46, fast_hit_count: 49 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int t; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> t; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 27 slow_hit_count: 4, fast_hit_count: 4 */
    cin >> x; /* line 28 slow_hit_count: 3, fast_hit_count: 3 */
    long long s = 0; /* line 29 slow_hit_count: 3, fast_hit_count: 3 */
    while (x >= 2) { /* line 30 slow_hit_count: 19, fast_hit_count: 20 */
      long long l = 0, r = x / 2 + 1; /* line 31 slow_hit_count: 16, fast_hit_count: 17 */
      while (l < r) { /* line 32 slow_hit_count: 165, fast_hit_count: 162 */
        long long mid = l + (r - l) / 2; /* line 33 slow_hit_count: 149, fast_hit_count: 145 */
        if (fun(mid)) { /* line 34 slow_hit_count: 149, fast_hit_count: 145 */
          r = mid; /* line 35 slow_hit_count: 99, fast_hit_count: 95 */
        } else { /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
          l = mid + 1; /* line 37 slow_hit_count: 50, fast_hit_count: 50 */
        } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      if (Count(l) == x) { /* line 40 slow_hit_count: 16, fast_hit_count: 17 */
        x = 0; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
        s++; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
      } else if (Count(l) > x) { /* line 43 slow_hit_count: 15, fast_hit_count: 16 */
        x -= Count(l - 1); /* line 44 slow_hit_count: 15, fast_hit_count: 16 */
        s++; /* line 45 slow_hit_count: 15, fast_hit_count: 16 */
      } else { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
        x -= Count(l); /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
        s++; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    cout << s << endl; /* line 51 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck of the given C program, we need to analyze the comparison of line-level hit counts between the fast and slow runs, and derive performance-characterizing invariants in natural language. Here’s the step-by-step analysis:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The `for` loop inside the `fun` function (lines 6-7) shows significant hit count differences between the slow and fast inputs (`381,185,121` vs. `285,844,988`). This loop is a major contributor to the slowdown.
   - The `for` loop inside the `Count` function (lines 18-19) also exhibits a noticeable difference between the slow and fast runs (`114,478` vs. `98,697`).

2. **Pinpointing Problematic Lines:**
   - The loop in the `fun` function iterates from `1` to `mid`, calculating a sum. The line `sum += 3 * i;` is particularly expensive, especially with large values of `mid`.
   - This loop is invoked during a binary search process (lines 32-37) to find the tallest pyramid that can be constructed, suggesting that inefficiencies in evaluating pyramid heights might be causing the slowdown.

3. **Inferences on Loop Interactions:**
   - Given the input constraints (`n <= 10^9`), the binary search loop (`while (l < r)`) runs multiple times, and for each iteration, the `fun` function is called, leading to a high number of total iterations in the inner loop (`for (int i = 1; i < mid; i++)`).
   - The binary search attempts to find the maximum height of a pyramid that can be formed with `x` cards. As `mid` approaches larger values, the sum calculation becomes more computationally expensive.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, here are the natural language statements describing conditions under which the code slows down:

1. **Invariant on Pyramid Height Calculation:**
   - *"When the potential pyramid height (`mid`) being evaluated is large, the program may perform many redundant calculations due to an inner loop that sums values based on pyramid height. This inefficiency becomes pronounced when attempting to build larger pyramids, leading to increased computation times."*

2. **Invariant on Binary Search Iterations:**
   - *"If the range of possible pyramid heights (`l` to `r`) is large, the binary search may become inefficient, as each midpoint evaluation involves expensive calculations of potential card usage for tall pyramids. This can lead to excessive computation in determining maximum pyramid height."*

3. **Invariant on Total Cards and Loops:**
   - *"For inputs where the number of cards (`n`) is large and close to the upper constraint, each check to see if a pyramid of a certain height can be constructed becomes computationally expensive, particularly due to high iterations in nested loops. This can cause significant slowdowns as the program repeatedly evaluates similar card configurations."*

These invariants help identify scenarios where the program might slow down significantly and can guide optimizations or refactorings to address these inefficiencies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A card pyramid of height 1 is constructed by resting two cards against each other. For h>1, a card pyramid of height h is constructed by placing a card pyramid of height h-1 onto a base. A base consists of h pyramids of height 1, and h-1 cards on top. For example, card pyramids of heights 1, 2, and 3 look as follows:

<image>

You start with n cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?

Input

Each test consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next t lines contain descriptions of test cases.

Each test case contains a single integer n (1≤ n≤ 10^9) — the number of cards.

It is guaranteed that the sum of n over all test cases does not exceed 10^9.

Output

For each test case output a single integer — the number of pyramids you will have constructed in the end.

Example

Input


5
3
14
15
24
1


Output


1
2
1
3
0

Note

In the first test, you construct a pyramid of height 1 with 2 cards. There is 1 card remaining, which is not enough to build a pyramid.

In the second test, you build two pyramids, each of height 2, with no cards remaining.

In the third test, you build one pyramid of height 3, with no cards remaining.

In the fourth test, you build one pyramid of height 3 with 9 cards remaining. Then you build a pyramid of height 2 with 2 cards remaining. Then you build a final pyramid of height 1 with no cards remaining.

In the fifth test, one card is not enough to build any pyramids.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ code snippets for runtime checks based on the natural language invariants:

1. **Invariant on Pyramid Height Calculation:**

```cpp
void check_pyramid_height_invariant(long long mid) {
    if (mid > 10000) { // Assumed threshold for a large height
        cerr << "Warning: Performance bottleneck condition triggered due to large pyramid height calculation!" << endl;
        abort();
    }
}
```

2. **Invariant on Binary Search Iterations:**

```cpp
void check_binary_search_invariant(long long l, long long r) {
    if ((r - l) > 100000) { // Assumed threshold for large search space
        cerr << "Warning: Performance bottleneck condition triggered due to wide binary search range!" << endl;
        abort();
    }
}
```

3. **Invariant on Total Cards and Loops:**

```cpp
void check_total_cards_invariant(long long x) {
    if (x > 500000000) { // Assumed threshold for a large number of cards
        cerr << "Warning: Performance bottleneck condition triggered due to large number of cards!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Original Program

Here is the final instrumented C++ code with integrated checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Check for large pyramid height
void check_pyramid_height_invariant(long long mid) {
    if (mid > 10000) { // Assumed threshold for a large height
        cerr << "Warning: Performance bottleneck condition triggered due to large pyramid height calculation!" << endl;
        abort();
    }
}

// Check for wide binary search range
void check_binary_search_invariant(long long l, long long r) {
    if ((r - l) > 100000) { // Assumed threshold for large search space
        cerr << "Warning: Performance bottleneck condition triggered due to wide binary search range!" << endl;
        abort();
    }
}

// Check for large number of cards
void check_total_cards_invariant(long long x) {
    if (x > 500000000) { // Assumed threshold for a large number of cards
        cerr << "Warning: Performance bottleneck condition triggered due to large number of cards!" << endl;
        abort();
    }
}

long long x;
bool fun(long long mid) {
    check_pyramid_height_invariant(mid); // Check before expensive loop
    long long sum = 0;
    for (int i = 1; i < mid; i++) {
        sum += 3 * i;
    }
    sum += 2 * (mid);
    if (sum < x) {
        return false;
    } else {
        return true;
    }
}

long long Count(long long mid) {
    long long sum = 0;
    for (int i = 1; i < mid; i++) {
        sum += 3 * i;
    }
    sum += 2 * (mid);
    return sum;
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        cin >> x;
        check_total_cards_invariant(x); // Check based on card input
        long long s = 0;
        while (x >= 2) {
            long long l = 0, r = x / 2 + 1;
            while (l < r) {
                check_binary_search_invariant(l, r); // Check before binary search iteration
                long long mid = l + (r - l) / 2;
                if (fun(mid)) {
                    r = mid;
                } else {
                    l = mid + 1;
                }
            }
            if (Count(l) == x) {
                x = 0;
                s++;
            } else if (Count(l) > x) {
                x -= Count(l - 1);
                s++;
            } else {
                x -= Count(l);
                s++;
            }
        }
        cout << s << endl;
    }
    return 0;
}
```

### Explanation:

- The checker for the pyramid height is integrated just before the loop in the `fun` function to ensure that we catch cases where `mid` grows large.
- The checker for binary search range is inserted before the binary search loop to catch cases of wide search ranges.
- The checker for large input sizes is added right after reading the card count (`x`) for each test case. 

Each checker will abort the program with a warning if the performance bottleneck condition is triggered, aiding in identifying potential inefficiencies during testing.

