system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A card pyramid of height 1 is constructed by resting two cards against each other. For h>1, a card pyramid of height h is constructed by placing a card pyramid of height h-1 onto a base. A base consists of h pyramids of height 1, and h-1 cards on top. For example, card pyramids of heights 1, 2, and 3 look as follows:

<image>

You start with n cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?

Input

Each test consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next t lines contain descriptions of test cases.

Each test case contains a single integer n (1≤ n≤ 10^9) — the number of cards.

It is guaranteed that the sum of n over all test cases does not exceed 10^9.

Output

For each test case output a single integer — the number of pyramids you will have constructed in the end.

Example

Input


5
3
14
15
24
1


Output


1
2
1
3
0

Note

In the first test, you construct a pyramid of height 1 with 2 cards. There is 1 card remaining, which is not enough to build a pyramid.

In the second test, you build two pyramids, each of height 2, with no cards remaining.

In the third test, you build one pyramid of height 3, with no cards remaining.

In the fourth test, you build one pyramid of height 3 with 9 cards remaining. Then you build a pyramid of height 2 with 2 cards remaining. Then you build a final pyramid of height 1 with no cards remaining.

In the fifth test, one card is not enough to build any pyramids.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  long int n, i;
  cin >> n;
  long int arr[n];
  for (i = 0; i < n; i++) cin >> arr[i];
  long int m = *max_element(arr, arr + n);
  vector<long long int> brr;
  brr.push_back(2);
  i = 1;
  while (1) {
    brr.push_back(brr[i - 1] + 3 * i + 2);
    if (brr[i] > m) break;
    i++;
  }
  for (i = 0; i < n; i++) {
    long int a = arr[i];
    long int c = 0;
    while (a) {
      auto it = upper_bound(brr.begin(), brr.end(), a);
      if (it == brr.begin()) break;
      c++;
      it--;
      a = a - *it;
    }
    cout << c << endl;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
1000001000


(G.2) Fast Input

1
0000011001


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long int n, i; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  long int arr[n]; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) cin >> arr[i]; /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  long int m = *max_element(arr, arr + n); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long int> brr; /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
  brr.push_back(2); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  i = 1; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  while (1) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    brr.push_back(brr[i - 1] + 3 * i + 2); /* line 13 slow_hit_count: 25819, fast_hit_count: 85 */
    if (brr[i] > m) break; /* line 14 slow_hit_count: 25819, fast_hit_count: 85 */
    i++; /* line 15 slow_hit_count: 25818, fast_hit_count: 84 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < n; i++) { /* line 17 slow_hit_count: 2, fast_hit_count: 2 */
    long int a = arr[i]; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
    long int c = 0; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    while (a) { /* line 20 slow_hit_count: 7, fast_hit_count: 7 */
      auto it = upper_bound(brr.begin(), brr.end(), a); /* line 21 slow_hit_count: 6, fast_hit_count: 6 */
      if (it == brr.begin()) break; /* line 22 slow_hit_count: 6, fast_hit_count: 6 */
      c++; /* line 23 slow_hit_count: 6, fast_hit_count: 6 */
      it--; /* line 24 slow_hit_count: 6, fast_hit_count: 6 */
      a = a - *it; /* line 25 slow_hit_count: 6, fast_hit_count: 6 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    cout << c << endl; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 29 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottlenecks in the given C program, let's follow the tasks outlined:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts**:
   - Line 13: `brr.push_back(brr[i - 1] + 3 * i + 2);` has a significantly higher hit count for the slow input (25,819) compared to the fast input (85).
   - Line 14: `if (brr[i] > m) break;` also exhibits this higher hit count, indicating that the loop runs much longer for the slow input.
   
2. **Pinpointing Lines**:
   - The loop starting at line 12 and containing lines 13-15 appears to be critical. This loop constructs the sequence of card requirements for building increasing heights of pyramids.
   
3. **Interaction with Data Structures**:
   - The loop iteratively computes the number of cards needed for each successive pyramid height, stopping only when this number exceeds the maximum number of cards in any test case (`m`).
   
### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Statements**:
   - **Invariant 1**: "If the number of cards `n` in a test case is close to the maximum number possible (1,000,000,000), the precomputation loop will generate a large number of card requirements, leading to increased computation time."
   - **Invariant 2**: "When the maximum cards required for any pyramid is computed to be significantly larger than the available cards in multiple test cases, the loop generating card requirements will become lengthy and computationally expensive."
   - **Invariant 3**: "The program slows significantly if the number of iterations required to determine card requirements before exceeding `n` becomes excessively large, due to inefficient generation of these requirements."
   
2. **Thresholds and Constraints**:
   - These invariants focus on abstract conditions tied to the constraints (e.g., `n` being close to its upper limit), without relying on specific numeric values from the slow input.
   
3. **Correlate to Input Patterns**:
   - The slow path is primarily triggered by the loop that calculates possible pyramid heights. This loop's performance is directly tied to the values in the input, especially when a test case's `n` approaches the upper constraint.

### Conclusion

By identifying these invariants, a fuzzer or diagnostic tool can effectively predict scenarios where the program may experience slowed performance. The primary focus should be on ensuring that the precomputation of pyramid card requirements does not become disproportionately large due to the size of `n`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A card pyramid of height 1 is constructed by resting two cards against each other. For h>1, a card pyramid of height h is constructed by placing a card pyramid of height h-1 onto a base. A base consists of h pyramids of height 1, and h-1 cards on top. For example, card pyramids of heights 1, 2, and 3 look as follows:

<image>

You start with n cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?

Input

Each test consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next t lines contain descriptions of test cases.

Each test case contains a single integer n (1≤ n≤ 10^9) — the number of cards.

It is guaranteed that the sum of n over all test cases does not exceed 10^9.

Output

For each test case output a single integer — the number of pyramids you will have constructed in the end.

Example

Input


5
3
14
15
24
1


Output


1
2
1
3
0

Note

In the first test, you construct a pyramid of height 1 with 2 cards. There is 1 card remaining, which is not enough to build a pyramid.

In the second test, you build two pyramids, each of height 2, with no cards remaining.

In the third test, you build one pyramid of height 3, with no cards remaining.

In the fourth test, you build one pyramid of height 3 with 9 cards remaining. Then you build a pyramid of height 2 with 2 cards remaining. Then you build a final pyramid of height 1 with no cards remaining.

In the fifth test, one card is not enough to build any pyramids.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Let's translate the previously derived performance-characterizing invariants into C++ runtime checks.

#### Invariant 1: Large `n` causing long precomputation
```cpp
void check_large_n_invariant(long long maximum_n, long long current_n) {
    if (current_n > maximum_n * 0.9) {  // Check if n is close to the maximum possible value
        cerr << "Warning: Performance bottleneck condition triggered due to large n!" << endl;
        abort();
    }
}
```

#### Invariant 2: Excessive iteration in precomputation loop
```cpp
void check_excessive_iteration_invariant(long long iteration_count, long long threshold) {
    if (iteration_count > threshold) {  // Check if iteration count exceeds a certain threshold
        cerr << "Warning: Performance bottleneck condition triggered due to excessive iterations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original Program

Now, let's integrate these checks into the given C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Maximum bounds as described in the problem statement
const long long MAX_N = 1000000000;
const long long ITERATION_THRESHOLD = 100000; // Adjusted based on observed bottleneck behavior

// Check if n is close to its maximum, inducing potential long precomputation
void check_large_n_invariant(long long maximum_n, long long current_n) {
    if (current_n > maximum_n * 0.9) {  // Check if n is close to the maximum possible value
        cerr << "Warning: Performance bottleneck condition triggered due to large n!" << endl;
        abort();
    }
}

// Check for excessive iterations in the precomputation loop
void check_excessive_iteration_invariant(long long iteration_count, long long threshold) {
    if (iteration_count > threshold) {  // Check if iteration count exceeds a certain threshold
        cerr << "Warning: Performance bottleneck condition triggered due to excessive iterations!" << endl;
        abort();
    }
}

int main() {
    long int t, i;
    cin >> t;
    long int arr[t];
    for (i = 0; i < t; i++) cin >> arr[i];
    long int m = *max_element(arr, arr + t);
    
    // Check if the maximum n is close to the upper constraint
    check_large_n_invariant(MAX_N, m);
    
    vector<long long int> brr;
    brr.push_back(2);
    i = 1;
    long long iteration_count = 0;
    
    while (1) {
        brr.push_back(brr[i - 1] + 3 * i + 2);
        if (brr[i] > m) break;
        i++;
        iteration_count++;
        
        // Check for excessive iterations
        check_excessive_iteration_invariant(iteration_count, ITERATION_THRESHOLD);
    }
    
    for (i = 0; i < t; i++) {
        long int a = arr[i];
        long int c = 0;
        while (a) {
            auto it = upper_bound(brr.begin(), brr.end(), a);
            if (it == brr.begin()) break;
            c++;
            it--;
            a = a - *it;
        }
        cout << c << endl;
    }
}
```

### Comments on the Integration

- **Invariant 1**: The check is placed after reading the maximum `n` across all test cases to alert if `n` is close to its maximum constraint.
  
- **Invariant 2**: The check for excessive iterations is placed inside the precomputation loop, which constructs the sequence of card requirements. This helps detect if the loop becomes too lengthy in terms of iterations, which could indicate a path leading to performance degradation.

These checks should efficiently alert us about the conditions that could trigger performance issues, without significantly impacting the overall runtime of the program under normal conditions.

