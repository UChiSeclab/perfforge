system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A card pyramid of height 1 is constructed by resting two cards against each other. For h>1, a card pyramid of height h is constructed by placing a card pyramid of height h-1 onto a base. A base consists of h pyramids of height 1, and h-1 cards on top. For example, card pyramids of heights 1, 2, and 3 look as follows:

<image>

You start with n cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?

Input

Each test consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next t lines contain descriptions of test cases.

Each test case contains a single integer n (1≤ n≤ 10^9) — the number of cards.

It is guaranteed that the sum of n over all test cases does not exceed 10^9.

Output

For each test case output a single integer — the number of pyramids you will have constructed in the end.

Example

Input


5
3
14
15
24
1


Output


1
2
1
3
0

Note

In the first test, you construct a pyramid of height 1 with 2 cards. There is 1 card remaining, which is not enough to build a pyramid.

In the second test, you build two pyramids, each of height 2, with no cards remaining.

In the third test, you build one pyramid of height 3, with no cards remaining.

In the fourth test, you build one pyramid of height 3 with 9 cards remaining. Then you build a pyramid of height 2 with 2 cards remaining. Then you build a final pyramid of height 1 with no cards remaining.

In the fifth test, one card is not enough to build any pyramids.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int sum(int n) {
  int ans = 0;
  for (int ii = 1; ii <= n; ii++) {
    ans = ans + ii;
  }
  return ans;
}
int main() {
  int test, n, a, x, b, countp = 0;
  cin >> test;
  for (int ss = 0; ss < test; ss++) {
    countp = 0;
    cin >> n;
    while (n >= 2) {
      x = 1;
      while (1 == 1) {
        a = sum(x);
        b = 3 * a - x;
        if (b > n) {
          x--;
          break;
        }
        x++;
      }
      b = 3 * sum(x) - x;
      n = n - b;
      countp++;
    }
    cout << countp << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3
333333332
333333333
94712839


(G.2) Fast Input

3
333333332
142809134
94712839


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int sum(int n) { /* line 3 slow_hit_count: 38182, fast_hit_count: 32923 */
  int ans = 0; /* line 4 slow_hit_count: 38182, fast_hit_count: 32923 */
  for (int ii = 1; ii <= n; ii++) { /* line 5 slow_hit_count: 253920382, fast_hit_count: 190394782 */
    ans = ans + ii; /* line 6 slow_hit_count: 253882200, fast_hit_count: 190361859 */
  } /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 8 slow_hit_count: 38182, fast_hit_count: 32923 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  int test, n, a, x, b, countp = 0; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> test; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (int ss = 0; ss < test; ss++) { /* line 13 slow_hit_count: 4, fast_hit_count: 4 */
    countp = 0; /* line 14 slow_hit_count: 3, fast_hit_count: 3 */
    cin >> n; /* line 15 slow_hit_count: 3, fast_hit_count: 3 */
    while (n >= 2) { /* line 16 slow_hit_count: 19, fast_hit_count: 20 */
      x = 1; /* line 17 slow_hit_count: 16, fast_hit_count: 17 */
      while (1 == 1) { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
        a = sum(x); /* line 19 slow_hit_count: 38166, fast_hit_count: 32906 */
        b = 3 * a - x; /* line 20 slow_hit_count: 38166, fast_hit_count: 32906 */
        if (b > n) { /* line 21 slow_hit_count: 38166, fast_hit_count: 32906 */
          x--; /* line 22 slow_hit_count: 16, fast_hit_count: 17 */
          break; /* line 23 slow_hit_count: 16, fast_hit_count: 17 */
        } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
        x++; /* line 25 slow_hit_count: 38150, fast_hit_count: 32889 */
      } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      b = 3 * sum(x) - x; /* line 27 slow_hit_count: 16, fast_hit_count: 17 */
      n = n - b; /* line 28 slow_hit_count: 16, fast_hit_count: 17 */
      countp++; /* line 29 slow_hit_count: 16, fast_hit_count: 17 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    cout << countp << endl; /* line 31 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the given C program for performance bottlenecks and generate performance-characterizing invariants, let's go through the steps outlined:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The `sum(int n)` function, particularly lines 5 and 6, are hit significantly more often in the slow input run compared to the fast input. This loop is running a large number of times, indicating a potential bottleneck.

2. **Pinpoint Lines/Functions with More Hits:**
   - Lines 5 and 6 within the `sum(int n)` function have the largest discrepancy in hit counts between slow and fast inputs. This loop computes the arithmetic sum to determine the number of cards needed to build pyramids, and it is invoked inside nested loops in the main function logic.

3. **Infer Interaction with Data Structures/Loops:**
   - The `sum(x)` function directly affects the calculation of the cards needed for pyramid height x. The nested loop structure in the `main()` function leads to repeated calls to `sum(x)`, and as `x` grows, this results in increasing computational cost due to the arithmetic progression sum calculation.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Statements for Slow Path Conditions:**

   **Invariant 1:**
   - **Description:** “If the maximum height of a pyramid (x) increases significantly during computation, the repeated calculation of card sums for large heights can degrade performance.”
   - **Reasoning:** As `x` increases, the `sum(x)` function is called more frequently with larger inputs, leading to higher computational costs.

   **Invariant 2:**
   - **Description:** “If there are nested loops where a function like `sum()` is invoked, and the input number of cards `n` is large, the repeated evaluation over large ranges can become costly.”
   - **Reasoning:** The nested loops that repeatedly adjust `x` and recalculate card sums for each possible height lead to inefficiencies when `n` is large.

   **Invariant 3:**
   - **Description:** "If the decrement steps in card numbers (n) during each iteration are small compared to the initial card count, the loop will iterate many times, causing prolonged execution."
   - **Reasoning:** Small decrements imply that the loop continues running for many iterations, which can be performance-heavy, especially when the initial `n` is large.

2. **Threshold Values:**
   - Given the constraints (e.g., `n <= 10^9`), the invariants should focus on the number of calls to the `sum()` function and the growth of `x` during execution, emphasizing the expense of calculating large pyramid heights.

3. **Correlate Conditions to Input Patterns:**
   - For large values of `n`, where the number of cards approaches the upper constraint, the pyramids with higher heights become computationally expensive due to the repeated sum calculations, making these input sizes more likely to trigger the slow path.

### Conclusion

These invariants help capture the conditions under which the program's performance degrades. By focusing on the calculation frequency and loop interaction, they highlight critical areas that the program needs to optimize or manage carefully to avoid significant slowdowns with large input sizes.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A card pyramid of height 1 is constructed by resting two cards against each other. For h>1, a card pyramid of height h is constructed by placing a card pyramid of height h-1 onto a base. A base consists of h pyramids of height 1, and h-1 cards on top. For example, card pyramids of heights 1, 2, and 3 look as follows:

<image>

You start with n cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?

Input

Each test consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next t lines contain descriptions of test cases.

Each test case contains a single integer n (1≤ n≤ 10^9) — the number of cards.

It is guaranteed that the sum of n over all test cases does not exceed 10^9.

Output

For each test case output a single integer — the number of pyramids you will have constructed in the end.

Example

Input


5
3
14
15
24
1


Output


1
2
1
3
0

Note

In the first test, you construct a pyramid of height 1 with 2 cards. There is 1 card remaining, which is not enough to build a pyramid.

In the second test, you build two pyramids, each of height 2, with no cards remaining.

In the third test, you build one pyramid of height 3, with no cards remaining.

In the fourth test, you build one pyramid of height 3 with 9 cards remaining. Then you build a pyramid of height 2 with 2 cards remaining. Then you build a final pyramid of height 1 with no cards remaining.

In the fifth test, one card is not enough to build any pyramids.

Solution (C++ code):
{solution}


assistant: Let's translate the performance-characterizing invariants derived earlier into C++ code and integrate them into the provided program.

### Phase 3: Implementing the Invariants in C++

Here are the checker functions based on the natural language descriptions:

1. **Invariant 1 (Maximum Height of Pyramid):**
   - We need to check when the pyramid height `x` grows large during computation, as this increases the computational load.

```cpp
void check_height_invariant(int x) {
    if (x > 100000) { // arbitrary threshold for large pyramid heights
        cerr << "Warning: Performance bottleneck condition triggered - large pyramid height x!" << endl;
        abort();
    }
}
```

2. **Invariant 2 (Nested Loops with Function Calls):**
   - Monitor the number of calls to the `sum()` function, particularly if `x` becomes large.

```cpp
void check_sum_invariant(int callCount) {
    if (callCount > 100000) { // arbitrary threshold for excessive sum calls
        cerr << "Warning: Performance bottleneck condition triggered - excessive calls to sum function!" << endl;
        abort();
    }
}
```

3. **Invariant 3 (Small Decrement Steps):**
   - Check if the decrement in the number of cards `n` per iteration step is too small, leading to many loop iterations.

```cpp
void check_decrement_invariant(int n, int decrement) {
    if (decrement < n / 10) { // small decrement relative to initial n
        cerr << "Warning: Performance bottleneck condition triggered - small decrement in n!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Invariants into the Program

Now, integrate these checker functions into the original program. Place them at strategic points to catch potential performance issues without adding unnecessary overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

int sum(int n) {
    int ans = 0;
    for (int ii = 1; ii <= n; ii++) {
        ans = ans + ii;
    }
    return ans;
}

// Checker functions
void check_height_invariant(int x) {
    if (x > 100000) { // arbitrary threshold for large pyramid heights
        cerr << "Warning: Performance bottleneck condition triggered - large pyramid height x!" << endl;
        abort();
    }
}

void check_sum_invariant(int callCount) {
    if (callCount > 100000) { // arbitrary threshold for excessive sum calls
        cerr << "Warning: Performance bottleneck condition triggered - excessive calls to sum function!" << endl;
        abort();
    }
}

void check_decrement_invariant(int n, int decrement) {
    if (decrement < n / 10) { // small decrement relative to initial n
        cerr << "Warning: Performance bottleneck condition triggered - small decrement in n!" << endl;
        abort();
    }
}

int main() {
    int test, n, a, x, b, countp = 0;
    cin >> test;
    for (int ss = 0; ss < test; ss++) {
        countp = 0;
        cin >> n;
        int sumCallCount = 0; // Initialize a counter for sum function calls

        while (n >= 2) {
            x = 1;
            while (true) {
                a = sum(x);
                sumCallCount++; // Increment counter for each call to sum
                b = 3 * a - x;
                if (b > n) {
                    x--;
                    break;
                }
                x++;
                check_height_invariant(x); // Check for large pyramid height
            }

            b = 3 * sum(x) - x;
            int decrement = n - b;
            check_decrement_invariant(n, decrement); // Check small decrement
            n = n - b;
            countp++;
        }
        check_sum_invariant(sumCallCount); // Check after processing each test case
        cout << countp << endl;
    }
    return 0;
}
```

### Explanation

- **`check_height_invariant(x)`**: This is called inside the loop whenever `x` is incremented to ensure it doesn’t grow excessively.
- **`check_sum_invariant(sumCallCount)`**: Monitors the number of calls to `sum()` function across a single test case and checks at the end of each test case.
- **`check_decrement_invariant(n, decrement)`**: Checks after the decrement of `n` to ensure that the decrement is significant enough to prevent many iterations.

These checks should help in identifying the points where performance bottlenecks may occur without adding too much overhead to the program execution.

