system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A card pyramid of height 1 is constructed by resting two cards against each other. For h>1, a card pyramid of height h is constructed by placing a card pyramid of height h-1 onto a base. A base consists of h pyramids of height 1, and h-1 cards on top. For example, card pyramids of heights 1, 2, and 3 look as follows:

<image>

You start with n cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?

Input

Each test consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next t lines contain descriptions of test cases.

Each test case contains a single integer n (1≤ n≤ 10^9) — the number of cards.

It is guaranteed that the sum of n over all test cases does not exceed 10^9.

Output

For each test case output a single integer — the number of pyramids you will have constructed in the end.

Example

Input


5
3
14
15
24
1


Output


1
2
1
3
0

Note

In the first test, you construct a pyramid of height 1 with 2 cards. There is 1 card remaining, which is not enough to build a pyramid.

In the second test, you build two pyramids, each of height 2, with no cards remaining.

In the third test, you build one pyramid of height 3, with no cards remaining.

In the fourth test, you build one pyramid of height 3 with 9 cards remaining. Then you build a pyramid of height 2 with 2 cards remaining. Then you build a final pyramid of height 1 with no cards remaining.

In the fifth test, one card is not enough to build any pyramids.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const long long int INF = 1e18;
const long long int MOD = 1000000007;
const int MX = 100005;
using namespace std;
int main() {
  int test_c;
  cin >> test_c;
  while (test_c--) {
    long long int i, j;
    int n;
    cin >> n;
    int count = 0;
    vector<long long int> a(MX);
    for (i = 0; i < MX; i++) a[i] = ((i + 1) * (3 * i + 4)) / 2;
    while (n) {
      vector<long long int>::iterator it = upper_bound(a.begin(), a.end(), n);
      i = it - a.begin();
      i--;
      if (i >= 0) {
        n -= a[i];
        count++;
      } else
        break;
    }
    cout << count << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
1
12
4
1
2
1
8
2
9
9
5
1
2
11
4
4
1
9
2
2
8
1
1
4
1
4
4
5
11
1
4
6
13
4
1
5
21
1
1
2
12
6
3
6
3
1
1
10
2
2
1
1
3
5
2
5
1
7
3
4
9
5
2
3
14
8
1
6
5
2
3
3
7
2
4
7
5
14
4
10
3
4
25
3
6
13
2
3
7
6
1
2
1
4
1
4
1
3
17
6


(G.2) Fast Input

5
3
14
15
24
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const long long int INF = 1e18; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long int MOD = 1000000007; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int MX = 100005; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int test_c; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> test_c; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  while (test_c--) { /* line 9 slow_hit_count: 101, fast_hit_count: 6 */
    long long int i, j; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    int n; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> n; /* line 12 slow_hit_count: 100, fast_hit_count: 5 */
    int count = 0; /* line 13 slow_hit_count: 100, fast_hit_count: 5 */
    vector<long long int> a(MX); /* line 14 slow_hit_count: 200, fast_hit_count: 10 */
    for (i = 0; i < MX; i++) a[i] = ((i + 1) * (3 * i + 4)) / 2; /* line 15 slow_hit_count: 10000600, fast_hit_count: 500030 */
    while (n) { /* line 16 slow_hit_count: 242, fast_hit_count: 12 */
      vector<long long int>::iterator it = upper_bound(a.begin(), a.end(), n); /* line 17 slow_hit_count: 191, fast_hit_count: 9 */
      i = it - a.begin(); /* line 18 slow_hit_count: 191, fast_hit_count: 9 */
      i--; /* line 19 slow_hit_count: 191, fast_hit_count: 9 */
      if (i >= 0) { /* line 20 slow_hit_count: 191, fast_hit_count: 9 */
        n -= a[i]; /* line 21 slow_hit_count: 142, fast_hit_count: 7 */
        count++; /* line 22 slow_hit_count: 142, fast_hit_count: 7 */
      } else /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 24 slow_hit_count: 49, fast_hit_count: 2 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    cout << count << endl; /* line 26 slow_hit_count: 100, fast_hit_count: 5 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance bottlenecks in the provided C program that solves the card pyramid problem, let's analyze the code and hit counts for both the slow and fast inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line 15**: `for (i = 0; i < MX; i++) a[i] = ((i + 1) * (3 * i + 4)) / 2;`
   - This line gets a very high hit count (10,000,600 for slow input and 500,030 for fast input), indicating that the initialization of the array `a` is repeated for each test case. Since `a` doesn't change per test case, it should be initialized once outside the loop.

2. **Lines 17-19**: These lines involve using `upper_bound` to find the largest pyramid height that can be constructed with the remaining cards. The hit counts (191 for slow input and 9 for fast input) suggest that this search operation is performed frequently.

3. **Lines 21-22**: Updating the remaining number of cards `n` and incrementing the count of pyramids built is occurring frequently, especially for the slow input (142 hits compared to 7 for fast input).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following natural language statements describe conditions under which the program likely enters a slow path:

1. **Repeated Initialization of a Large Data Structure**: 
   - "If the array `a` used for pyramid height calculations is initialized repeatedly within the loop for each test case, it can cause unnecessary overhead, especially when the number of test cases is large."

2. **Frequent Use of Search Operation**:
   - "If the program frequently calls `upper_bound` to find the next largest pyramid to build, and the number of required calls is large, performance may degrade. This often occurs when the input `n` leads to many small pyramids being built consecutively."

3. **Inefficient Handling of Small Inputs**:
   - "When the input `n` is such that multiple small pyramids are built in succession, the repeated subtraction and updating of remaining cards can cause performance issues due to increased iterations."

To mitigate these issues, the array initialization should be moved outside the test case loop, reducing redundant calculations. Additionally, consideration should be given to optimizing the search operation for frequent cases.

### Suggested Code Optimizations

- **Move Array Initialization Outside Loop**: Initialize the array `a` once before processing the test cases.
  
- **Optimize `upper_bound` Usage**: Consider optimizations such as caching previous results or using a binary indexed approach to reduce the time complexity for frequent cases.

By implementing these changes and considering the above invariants, the program can be made more efficient, significantly reducing the processing time for the slow input scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A card pyramid of height 1 is constructed by resting two cards against each other. For h>1, a card pyramid of height h is constructed by placing a card pyramid of height h-1 onto a base. A base consists of h pyramids of height 1, and h-1 cards on top. For example, card pyramids of heights 1, 2, and 3 look as follows:

<image>

You start with n cards and build the tallest pyramid that you can. If there are some cards remaining, you build the tallest pyramid possible with the remaining cards. You repeat this process until it is impossible to build another pyramid. In the end, how many pyramids will you have constructed?

Input

Each test consists of multiple test cases. The first line contains a single integer t (1≤ t≤ 1000) — the number of test cases. Next t lines contain descriptions of test cases.

Each test case contains a single integer n (1≤ n≤ 10^9) — the number of cards.

It is guaranteed that the sum of n over all test cases does not exceed 10^9.

Output

For each test case output a single integer — the number of pyramids you will have constructed in the end.

Example

Input


5
3
14
15
24
1


Output


1
2
1
3
0

Note

In the first test, you construct a pyramid of height 1 with 2 cards. There is 1 card remaining, which is not enough to build a pyramid.

In the second test, you build two pyramids, each of height 2, with no cards remaining.

In the third test, you build one pyramid of height 3, with no cards remaining.

In the fourth test, you build one pyramid of height 3 with 9 cards remaining. Then you build a pyramid of height 2 with 2 cards remaining. Then you build a final pyramid of height 1 with no cards remaining.

In the fifth test, one card is not enough to build any pyramids.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants as C++ Checkers

Below are the C++ implementations of the performance-characterizing invariants:

1. **Checker for Repeated Initialization of a Large Data Structure:**

```cpp
void check_repeated_initialization(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated initialization of large data structure" << endl;
        abort();
    }
}
```

2. **Checker for Frequent Use of Search Operations:**

```cpp
void check_frequent_search(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent use of upper_bound search" << endl;
        abort();
    }
}
```

3. **Checker for Inefficient Handling of Small Inputs:**

```cpp
void check_inefficient_handling(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient handling of small inputs" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checkers into the provided C++ program:

```cpp
#include <bits/stdc++.h>
const long long int INF = 1e18;
const long long int MOD = 1000000007;
const int MX = 100005;
using namespace std;

// Checker functions as defined in Phase 3
void check_repeated_initialization(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated initialization of large data structure" << endl;
        abort();
    }
}

void check_frequent_search(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent use of upper_bound search" << endl;
        abort();
    }
}

void check_inefficient_handling(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient handling of small inputs" << endl;
        abort();
    }
}

int main() {
    int test_c;
    cin >> test_c;

    // Initialize the array `a` once outside the loop
    vector<long long int> a(MX);
    for (long long int i = 0; i < MX; i++) a[i] = ((i + 1) * (3 * i + 4)) / 2;

    while (test_c--) {
        long long int i, j;
        int n;
        cin >> n;
        int count = 0;

        // Check for repeated initialization
        check_repeated_initialization(!a.empty());

        while (n) {
            vector<long long int>::iterator it = upper_bound(a.begin(), a.end(), n);

            // Check for frequent search operations
            check_frequent_search(it == a.begin());

            i = it - a.begin();
            i--;

            if (i >= 0) {
                n -= a[i];
                count++;
            } else
                break;
        }

        // Check for inefficient handling of small inputs
        check_inefficient_handling(n < 2 && count == 0);

        cout << count << endl;
    }
    return 0;
}
```

### Explanation of Integrated Checkers

- **`check_repeated_initialization`**: This checker ensures that the array `a` is not repeatedly initialized within the test case loop by ensuring it is initialized once before the loop.

- **`check_frequent_search`**: This checker is placed inside the loop where `upper_bound` is used. It checks if the iterator points to the beginning of the array, which might indicate frequent calls that return the smallest or no valid element, hinting at unnecessary operations.

- **`check_inefficient_handling`**: This checker evaluates the scenario where `n` is very small, and no pyramids are built, indicating a potential inefficiency in the handling of such cases. 

These checkers help identify conditions that could lead to performance bottlenecks, enhancing the program’s ability to handle various input scenarios efficiently.

