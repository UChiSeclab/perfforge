system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is constraints.

Ivan plays a computer game that contains some microtransactions to make characters look cooler. Since Ivan wants his character to be really cool, he wants to use some of these microtransactions — and he won't start playing until he gets all of them.

Each day (during the morning) Ivan earns exactly one burle.

There are n types of microtransactions in the game. Each microtransaction costs 2 burles usually and 1 burle if it is on sale. Ivan has to order exactly k_i microtransactions of the i-th type (he orders microtransactions during the evening).

Ivan can order any (possibly zero) number of microtransactions of any types during any day (of course, if he has enough money to do it). If the microtransaction he wants to order is on sale then he can buy it for 1 burle and otherwise he can buy it for 2 burles.

There are also m special offers in the game shop. The j-th offer (d_j, t_j) means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Ivan wants to order all microtransactions as soon as possible. Your task is to calculate the minimum day when he can buy all microtransactions he want and actually start playing.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of types of microtransactions and the number of special offers in the game shop.

The second line of the input contains n integers k_1, k_2, ..., k_n (0 ≤ k_i ≤ 1000), where k_i is the number of copies of microtransaction of the i-th type Ivan has to order. It is guaranteed that sum of all k_i is not less than 1 and not greater than 1000.

The next m lines contain special offers. The j-th of these lines contains the j-th special offer. It is given as a pair of integers (d_j, t_j) (1 ≤ d_j ≤ 1000, 1 ≤ t_j ≤ n) and means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Output

Print one integer — the minimum day when Ivan can order all microtransactions he wants and actually start playing.

Examples

Input


5 6
1 2 0 2 0
2 4
3 3
1 5
1 2
1 5
2 3


Output


8


Input


5 3
4 2 1 3 2
3 5
4 2
2 5


Output


20

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MAXN = 200000;
int last[MAXN], k[MAXN];
pair<int, int> offer[MAXN + 1];
int n, m, sum;
bool isOK(int d) {
  int money = 0, cur = 0, hi = min(MAXN, d);
  memset(last, 0, sizeof(int) * n);
  for (int i = 0; offer[i].first <= hi; ++i)
    last[offer[i].second] = offer[i].first;
  vector<vector<int>> day(MAXN + 1);
  for (int i = 0; i < n; ++i)
    if (last[i]) day[last[i]].push_back(i);
  for (int i = 1; i <= hi; ++i) {
    ++money;
    for (auto x : day[i]) money -= min(k[x], money);
  }
  return 2 * sum + money - hi <= d;
}
int solve() {
  int lo = sum, hi = sum * 2, x = 0;
  while (lo <= hi) {
    int mid = lo + ((hi - lo) >> 1);
    if (isOK(mid))
      x = mid, hi = mid - 1;
    else
      lo = mid + 1;
  }
  return x;
}
int main() {
  scanf("%d%d", &n, &m);
  memset(last, 0, sizeof(int) * m);
  for (int i = 0; i < n; ++i) {
    scanf("%d", k + i);
    sum += k[i];
  }
  for (int i = 0; i < m; ++i) {
    int x, y;
    scanf("%d%d", &x, &y);
    offer[i] = pair<int, int>{x, y - 1};
  }
  sort(offer, offer + m);
  offer[m].first = MAXN * 4;
  cout << solve() << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 3
2 2 1 3 2
3 5
4 3
2 5


(G.2) Fast Input

5 3
2 2 1 3 2
3 5
4 2
2 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 200000; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int last[MAXN], k[MAXN]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
pair<int, int> offer[MAXN + 1]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, sum; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
bool isOK(int d) { /* line 7 slow_hit_count: 4, fast_hit_count: 3 */
  int money = 0, cur = 0, hi = min(MAXN, d); /* line 8 slow_hit_count: 4, fast_hit_count: 3 */
  memset(last, 0, sizeof(int) * n); /* line 9 slow_hit_count: 4, fast_hit_count: 3 */
  for (int i = 0; offer[i].first <= hi; ++i) /* line 10 slow_hit_count: 16, fast_hit_count: 12 */
    last[offer[i].second] = offer[i].first; /* line 11 slow_hit_count: 12, fast_hit_count: 9 */
  vector<vector<int>> day(MAXN + 1); /* line 12 slow_hit_count: 4, fast_hit_count: 3 */
  for (int i = 0; i < n; ++i) /* line 13 slow_hit_count: 24, fast_hit_count: 18 */
    if (last[i]) day[last[i]].push_back(i); /* line 14 slow_hit_count: 20, fast_hit_count: 15 */
  for (int i = 1; i <= hi; ++i) { /* line 15 slow_hit_count: 70, fast_hit_count: 52 */
    ++money; /* line 16 slow_hit_count: 66, fast_hit_count: 49 */
    for (auto x : day[i]) money -= min(k[x], money); /* line 17 slow_hit_count: 74, fast_hit_count: 55 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  return 2 * sum + money - hi <= d; /* line 19 slow_hit_count: 8, fast_hit_count: 6 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int solve() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  int lo = sum, hi = sum * 2, x = 0; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  while (lo <= hi) { /* line 23 slow_hit_count: 5, fast_hit_count: 4 */
    int mid = lo + ((hi - lo) >> 1); /* line 24 slow_hit_count: 4, fast_hit_count: 3 */
    if (isOK(mid)) /* line 25 slow_hit_count: 4, fast_hit_count: 3 */
      x = mid, hi = mid - 1; /* line 26 slow_hit_count: 2, fast_hit_count: 2 */
    else /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      lo = mid + 1; /* line 28 slow_hit_count: 2, fast_hit_count: 1 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  return x; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &m); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  memset(last, 0, sizeof(int) * m); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 35 slow_hit_count: 6, fast_hit_count: 6 */
    scanf("%d", k + i); /* line 36 slow_hit_count: 5, fast_hit_count: 5 */
    sum += k[i]; /* line 37 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; ++i) { /* line 39 slow_hit_count: 4, fast_hit_count: 4 */
    int x, y; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d%d", &x, &y); /* line 41 slow_hit_count: 3, fast_hit_count: 3 */
    offer[i] = pair<int, int>{x, y - 1}; /* line 42 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  sort(offer, offer + m); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  offer[m].first = MAXN * 4; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  cout << solve() << endl; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identification of Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The function `isOK(int d)` is called more frequently in the slow input than in the fast input (4 times vs. 3 times).
   - Inside `isOK(int d)`, the loop on line 10 (`for (int i = 0; offer[i].first <= hi; ++i)`) has more iterations for the slow input (16 vs. 12).
   - The nested loop on line 15 (`for (int i = 1; i <= hi; ++i)`) is executed significantly more in the slow input (70 vs. 52 iterations).
   - The `money` subtraction logic on line 17 is evaluated more times in the slow input, indicating repeated adjustment of money based on day-specific offers (74 vs. 55 times).

2. **Inference from Hit Counts:**
   - The hit count variations suggest that the slow input involves more complex offer conditions, requiring more iterations of the loops.
   - The binary search logic in `solve()` results in different numbers of iterations, which indicates `isOK(int d)` conditions are evaluated more often before convergence in the slow case.
   - The critical operations in `isOK` involve managing `money` against the available offers and required microtransactions (`k[i]`), suggesting that offer scheduling or availability is pivotal.

### Phase 2: Deriving Performance-Characterizing Invariants

Given the problem constraints and the analysis above, the following performance-characterizing invariants can be inferred:

1. **Invariant on Offer Scheduling:**
   - **Natural Language:** "If special offers are spread across many days, or are unavailable when demand peaks, the program may slow down significantly."
   - **Context:** This triggers inefficiencies as the algorithm has to iterate over more days to find valid offers, leading to higher loop iterations.

2. **Invariant on Microtransaction Requirement:**
   - **Natural Language:** "When the number of required microtransactions (`k[i]`) aligns poorly with the available offers, causing repeated re-evaluation of purchase capabilities, performance may degrade."
   - **Context:** Large or misaligned `k[i]` values with respect to offer days increase the complexity of determining if requirements can be met affordably, leading to increased iterations in critical loops.

3. **Invariant on Recursion Depth and Loop Iterations:**
   - **Natural Language:** "The binary search in `solve()` relies heavily on the `isOK()` function; if conditions within `isOK()` cause deeper recursion or frequent re-evaluation, performance will suffer. Particularly, when the range `hi - lo` does not narrow quickly."
   - **Context:** This underscores the importance of tight loop and recursion control, where broad search ranges increase function call overhead.

### Important Considerations

- These invariants focus on algorithmic interaction with input patterns rather than specific numeric thresholds, as bound by the `n <= 1000` constraint.
- The invariants suggest that performance is highly sensitive to the timing and availability of sales, as well as the required number of microtransactions, which impacts the efficiency of the binary search and subsequent evaluations in `isOK()`.
- These statements are designed to help a fuzzer identify slow performance scenarios through general conditions instead of specific numeric inputs, allowing for broader applicability to similar future inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is constraints.

Ivan plays a computer game that contains some microtransactions to make characters look cooler. Since Ivan wants his character to be really cool, he wants to use some of these microtransactions — and he won't start playing until he gets all of them.

Each day (during the morning) Ivan earns exactly one burle.

There are n types of microtransactions in the game. Each microtransaction costs 2 burles usually and 1 burle if it is on sale. Ivan has to order exactly k_i microtransactions of the i-th type (he orders microtransactions during the evening).

Ivan can order any (possibly zero) number of microtransactions of any types during any day (of course, if he has enough money to do it). If the microtransaction he wants to order is on sale then he can buy it for 1 burle and otherwise he can buy it for 2 burles.

There are also m special offers in the game shop. The j-th offer (d_j, t_j) means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Ivan wants to order all microtransactions as soon as possible. Your task is to calculate the minimum day when he can buy all microtransactions he want and actually start playing.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of types of microtransactions and the number of special offers in the game shop.

The second line of the input contains n integers k_1, k_2, ..., k_n (0 ≤ k_i ≤ 1000), where k_i is the number of copies of microtransaction of the i-th type Ivan has to order. It is guaranteed that sum of all k_i is not less than 1 and not greater than 1000.

The next m lines contain special offers. The j-th of these lines contains the j-th special offer. It is given as a pair of integers (d_j, t_j) (1 ≤ d_j ≤ 1000, 1 ≤ t_j ≤ n) and means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Output

Print one integer — the minimum day when Ivan can order all microtransactions he wants and actually start playing.

Examples

Input


5 6
1 2 0 2 0
2 4
3 3
1 5
1 2
1 5
2 3


Output


8


Input


5 3
4 2 1 3 2
3 5
4 2
2 5


Output


20

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checkers for Performance-Characterizing Invariants

Below are the C++ code snippets to implement the performance-characterizing invariants derived from the natural language descriptions:

1. **Invariant on Offer Scheduling:**
   - **Checker Code:**
   ```cpp
   void check_offer_scheduling(int m, int d_max) {
       if (m > 500 && d_max > 500) { // arbitrary threshold for many offers spread across days
           cerr << "Warning: Performance bottleneck condition triggered due to complex offer scheduling!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Microtransaction Requirement:**
   - **Checker Code:**
   ```cpp
   void check_microtransaction_requirement(int total_k, int m) {
       if (total_k > 700 && m < 10) { // arbitrary condition based on large k and few available offers
           cerr << "Warning: Performance bottleneck condition triggered due to misalignment of offers and needs!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Recursion Depth and Loop Iterations:**
   - **Checker Code:**
   ```cpp
   void check_recursion_depth(int hi, int lo) {
       if (hi - lo > 800) { // if binary search range is too large
           cerr << "Warning: Performance bottleneck condition triggered due to extensive recursion depth!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original C++ Program

Below is the instrumented C++ code with the checker functions integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 200000;
int last[MAXN], k[MAXN];
pair<int, int> offer[MAXN + 1];
int n, m, sum;

// Checker functions
void check_offer_scheduling(int m, int d_max) {
    if (m > 500 && d_max > 500) { // arbitrary thresholds for complex offer scheduling
        cerr << "Warning: Performance bottleneck condition triggered due to complex offer scheduling!" << endl;
        abort();
    }
}

void check_microtransaction_requirement(int total_k, int m) {
    if (total_k > 700 && m < 10) { // condition for misalignment of offers and needs
        cerr << "Warning: Performance bottleneck condition triggered due to misalignment of offers and needs!" << endl;
        abort();
    }
}

void check_recursion_depth(int hi, int lo) {
    if (hi - lo > 800) { // if binary search range is too large
        cerr << "Warning: Performance bottleneck condition triggered due to extensive recursion depth!" << endl;
        abort();
    }
}

bool isOK(int d) {
    int money = 0, cur = 0, hi = min(MAXN, d);
    memset(last, 0, sizeof(int) * n);
    for (int i = 0; offer[i].first <= hi; ++i)
        last[offer[i].second] = offer[i].first;
    vector<vector<int>> day(MAXN + 1);
    for (int i = 0; i < n; ++i)
        if (last[i]) day[last[i]].push_back(i);
    for (int i = 1; i <= hi; ++i) {
        ++money;
        for (auto x : day[i]) money -= min(k[x], money);
    }
    return 2 * sum + money - hi <= d;
}

int solve() {
    int lo = sum, hi = sum * 2, x = 0;

    // Check recursion depth before binary search
    check_recursion_depth(hi, lo);

    while (lo <= hi) {
        int mid = lo + ((hi - lo) >> 1);
        if (isOK(mid))
            x = mid, hi = mid - 1;
        else
            lo = mid + 1;
    }
    return x;
}

int main() {
    scanf("%d%d", &n, &m);
    memset(last, 0, sizeof(int) * m);
    for (int i = 0; i < n; ++i) {
        scanf("%d", k + i);
        sum += k[i];
    }
    for (int i = 0; i < m; ++i) {
        int x, y;
        scanf("%d%d", &x, &y);
        offer[i] = pair<int, int>{x, y - 1};
    }
    sort(offer, offer + m);
    offer[m].first = MAXN * 4;
    
    // Check offer scheduling before solving
    check_offer_scheduling(m, offer[m - 1].first);

    // Check microtransaction requirements
    check_microtransaction_requirement(sum, m);

    cout << solve() << endl;
    return 0;
}
```

### Explanation of Checker Placement

- **`check_offer_scheduling`:** Placed after sorting offers to ensure it evaluates the distribution of offers across days.
- **`check_microtransaction_requirement`:** Placed after reading input to evaluate whether the demand aligns with available offers.
- **`check_recursion_depth`:** Integrated before the binary search loop in `solve` to check the search range, as a large range can indicate inefficiency.

