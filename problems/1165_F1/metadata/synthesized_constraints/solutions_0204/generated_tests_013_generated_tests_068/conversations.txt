system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is constraints.

Ivan plays a computer game that contains some microtransactions to make characters look cooler. Since Ivan wants his character to be really cool, he wants to use some of these microtransactions — and he won't start playing until he gets all of them.

Each day (during the morning) Ivan earns exactly one burle.

There are n types of microtransactions in the game. Each microtransaction costs 2 burles usually and 1 burle if it is on sale. Ivan has to order exactly k_i microtransactions of the i-th type (he orders microtransactions during the evening).

Ivan can order any (possibly zero) number of microtransactions of any types during any day (of course, if he has enough money to do it). If the microtransaction he wants to order is on sale then he can buy it for 1 burle and otherwise he can buy it for 2 burles.

There are also m special offers in the game shop. The j-th offer (d_j, t_j) means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Ivan wants to order all microtransactions as soon as possible. Your task is to calculate the minimum day when he can buy all microtransactions he want and actually start playing.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of types of microtransactions and the number of special offers in the game shop.

The second line of the input contains n integers k_1, k_2, ..., k_n (0 ≤ k_i ≤ 1000), where k_i is the number of copies of microtransaction of the i-th type Ivan has to order. It is guaranteed that sum of all k_i is not less than 1 and not greater than 1000.

The next m lines contain special offers. The j-th of these lines contains the j-th special offer. It is given as a pair of integers (d_j, t_j) (1 ≤ d_j ≤ 1000, 1 ≤ t_j ≤ n) and means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Output

Print one integer — the minimum day when Ivan can order all microtransactions he wants and actually start playing.

Examples

Input


5 6
1 2 0 2 0
2 4
3 3
1 5
1 2
1 5
2 3


Output


8


Input


5 3
4 2 1 3 2
3 5
4 2
2 5


Output


20

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, m;
vector<long long int> k;
vector<pair<long long int, long long int> > deal;
bool pred(long long day) {
  vector<long long int> last(n + 1, -1);
  for (long long int i = 1; i < m + 1; i++) {
    if (deal[i].first <= day) {
      last[deal[i].second] = max(last[deal[i].second], deal[i].first);
    }
  }
  vector<vector<long long int> > off(200005);
  for (long long int i = 1; i < n + 1; i++) {
    if (last[i] != -1) {
      off[last[i]].push_back(i);
    }
  }
  vector<long long int> reqd = k;
  long long cur = 0L;
  for (long long int i = 1; i < day + 1; i++) {
    cur++;
    for (auto j : off[i]) {
      if (cur >= reqd[j]) {
        cur -= reqd[j];
        reqd[j] = 0;
      } else {
        reqd[j] -= cur;
        cur = 0;
        break;
      }
    }
  }
  long long sum = 0L;
  for (auto i : reqd) {
    sum += i;
  }
  return (sum * 2 <= cur);
}
int main() {
  cin >> n >> m;
  k.resize(n + 1);
  long long sum = 0L;
  for (long long int i = 1; i < n + 1; i++) {
    cin >> k[i];
    sum += k[i];
  }
  deal.resize(m + 1);
  for (long long int i = 1; i < m + 1; i++) {
    cin >> deal[i].first >> deal[i].second;
  }
  long long x = 0L;
  for (long long step = 2 * sum; step >= 1; step /= 2) {
    while (!pred(x + step)) x += step;
  }
  cout << x + 1;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 3
4 2 2 5 0
3 5
4 2
2 5


(G.2) Fast Input

5 3
2 2 0 0 2
5 5
4 2
2 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long int> k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<long long int, long long int> > deal; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool pred(long long day) { /* line 6 slow_hit_count: 9, fast_hit_count: 6 */
  vector<long long int> last(n + 1, -1); /* line 7 slow_hit_count: 18, fast_hit_count: 12 */
  for (long long int i = 1; i < m + 1; i++) { /* line 8 slow_hit_count: 36, fast_hit_count: 24 */
    if (deal[i].first <= day) { /* line 9 slow_hit_count: 27, fast_hit_count: 18 */
      last[deal[i].second] = max(last[deal[i].second], deal[i].first); /* line 10 slow_hit_count: 27, fast_hit_count: 18 */
    } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  vector<vector<long long int> > off(200005); /* line 13 slow_hit_count: 18, fast_hit_count: 12 */
  for (long long int i = 1; i < n + 1; i++) { /* line 14 slow_hit_count: 54, fast_hit_count: 36 */
    if (last[i] != -1) { /* line 15 slow_hit_count: 45, fast_hit_count: 30 */
      off[last[i]].push_back(i); /* line 16 slow_hit_count: 18, fast_hit_count: 12 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  vector<long long int> reqd = k; /* line 19 slow_hit_count: 9, fast_hit_count: 6 */
  long long cur = 0L; /* line 20 slow_hit_count: 9, fast_hit_count: 6 */
  for (long long int i = 1; i < day + 1; i++) { /* line 21 slow_hit_count: 212, fast_hit_count: 60 */
    cur++; /* line 22 slow_hit_count: 203, fast_hit_count: 54 */
    for (auto j : off[i]) { /* line 23 slow_hit_count: 221, fast_hit_count: 66 */
      if (cur >= reqd[j]) { /* line 24 slow_hit_count: 18, fast_hit_count: 12 */
        cur -= reqd[j]; /* line 25 slow_hit_count: 18, fast_hit_count: 12 */
        reqd[j] = 0; /* line 26 slow_hit_count: 18, fast_hit_count: 12 */
      } else { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
        reqd[j] -= cur; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
        cur = 0; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  long long sum = 0L; /* line 34 slow_hit_count: 9, fast_hit_count: 6 */
  for (auto i : reqd) { /* line 35 slow_hit_count: 63, fast_hit_count: 42 */
    sum += i; /* line 36 slow_hit_count: 54, fast_hit_count: 36 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  return (sum * 2 <= cur); /* line 38 slow_hit_count: 18, fast_hit_count: 12 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  k.resize(n + 1); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  long long sum = 0L; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long int i = 1; i < n + 1; i++) { /* line 44 slow_hit_count: 6, fast_hit_count: 6 */
    cin >> k[i]; /* line 45 slow_hit_count: 5, fast_hit_count: 5 */
    sum += k[i]; /* line 46 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  deal.resize(m + 1); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long int i = 1; i < m + 1; i++) { /* line 49 slow_hit_count: 4, fast_hit_count: 4 */
    cin >> deal[i].first >> deal[i].second; /* line 50 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  long long x = 0L; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long step = 2 * sum; step >= 1; step /= 2) { /* line 53 slow_hit_count: 6, fast_hit_count: 5 */
    while (!pred(x + step)) x += step; /* line 54 slow_hit_count: 9, fast_hit_count: 6 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  cout << x + 1; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 58 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance characteristics of the provided C program and derive conditions under which the program slows down, let's go through the phases outlined:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Analyze Hit Counts:**
   - The `pred` function is heavily invoked, with its overall structure being the most iterated, especially lines related to loops and conditionals.
   - Specific lines that have significantly higher hit counts in the slow input compared to the fast input include lines 21, 23, and 35. This suggests that these loops and their internal executions are critical to the program's runtime performance.

2. **Identify Problematic Patterns:**
   - **Loop on line 21:** This loop iterates over days, and the number of iterations is proportional to `day`. A significant difference in hit counts suggests that `day` is much larger for the slow input.
   - **Loop on line 23:** Iterates over the special offers available on each day, indicating that the handling of special offers is extensive.
   - **Loop on line 35:** Accumulates remaining microtransactions, indicating that the computation of unmet requirements is costly.

3. **Data Interaction:**
   - The interactions with `off` and `reqd` arrays within loops can cause repeated operations on potentially large datasets, especially when `day` is large.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified patterns and interactions, here are natural language statements describing conditions under which the program enters a slow path:

1. **Invariant Related to Day Iterations:**
   - **Description:** "If the number of days required to accumulate enough burles significantly exceeds the number of special offers, the code will enter a path where it continuously iterates over many days, increasing computation time."
   - **Trigger:** This occurs when Ivan cannot efficiently utilize special offers early and must wait many days to collect burles for the remaining microtransactions.

2. **Invariant Related to Special Offers Usage:**
   - **Description:** "If most microtransactions cannot be fully purchased during sale days, leading to extended iterations and updates of `reqd` and `cur` variables, the program may slow down."
   - **Trigger:** This happens when the distribution of sale days is sparse or not matched well with the microtransactions needed.

3. **Invariant Related to Remaining Transactions:**
   - **Description:** "When the sum of unmet microtransactions remains significantly high over many iterations, the program will likely take longer to complete."
   - **Trigger:** This is due to insufficient burles to leverage cheaper purchases, causing frequent checks and updates over multiple days.

### Conclusion:

The above invariants abstractly describe conditions under which the program slows down without relying on specific input values. They help identify potential performance bottlenecks related to how days and special offers interact in the computation, especially when demands exceed supply within the given constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is constraints.

Ivan plays a computer game that contains some microtransactions to make characters look cooler. Since Ivan wants his character to be really cool, he wants to use some of these microtransactions — and he won't start playing until he gets all of them.

Each day (during the morning) Ivan earns exactly one burle.

There are n types of microtransactions in the game. Each microtransaction costs 2 burles usually and 1 burle if it is on sale. Ivan has to order exactly k_i microtransactions of the i-th type (he orders microtransactions during the evening).

Ivan can order any (possibly zero) number of microtransactions of any types during any day (of course, if he has enough money to do it). If the microtransaction he wants to order is on sale then he can buy it for 1 burle and otherwise he can buy it for 2 burles.

There are also m special offers in the game shop. The j-th offer (d_j, t_j) means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Ivan wants to order all microtransactions as soon as possible. Your task is to calculate the minimum day when he can buy all microtransactions he want and actually start playing.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of types of microtransactions and the number of special offers in the game shop.

The second line of the input contains n integers k_1, k_2, ..., k_n (0 ≤ k_i ≤ 1000), where k_i is the number of copies of microtransaction of the i-th type Ivan has to order. It is guaranteed that sum of all k_i is not less than 1 and not greater than 1000.

The next m lines contain special offers. The j-th of these lines contains the j-th special offer. It is given as a pair of integers (d_j, t_j) (1 ≤ d_j ≤ 1000, 1 ≤ t_j ≤ n) and means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Output

Print one integer — the minimum day when Ivan can order all microtransactions he wants and actually start playing.

Examples

Input


5 6
1 2 0 2 0
2 4
3 3
1 5
1 2
1 5
2 3


Output


8


Input


5 3
4 2 1 3 2
3 5
4 2
2 5


Output


20

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants as C++ Checkers

Here, I'll implement the performance invariants as C++ checker functions based on the natural language descriptions provided earlier.

```cpp
#include <iostream>

// Checker for the invariant related to day iterations
void check_day_iterations_invariant(long long day, long long sum) {
    if (day > 2 * sum) {
        std::cerr << "Warning: Performance bottleneck condition triggered due to excessive day iterations!" << std::endl;
        abort();
    }
}

// Checker for the invariant related to special offers usage
void check_special_offers_invariant(const std::vector<long long>& reqd, long long cur) {
    long long unmet = 0;
    for (auto r : reqd) {
        unmet += r;
    }
    if (unmet > cur) {
        std::cerr << "Warning: Performance bottleneck condition triggered due to inefficient use of special offers!" << std::endl;
        abort();
    }
}

// Checker for the invariant related to remaining transactions
void check_remaining_transactions_invariant(const std::vector<long long>& reqd) {
    long long total_unmet = 0;
    for (auto r : reqd) {
        total_unmet += r;
    }
    if (total_unmet > 500) { // Assuming half the total maximum sum as a rough threshold
        std::cerr << "Warning: Performance bottleneck condition triggered due to high number of remaining transactions!" << std::endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Below is the instrumented C++ program that includes the checker functions. Each checker is placed at strategic locations in the code to avoid adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long n, m;
vector<long long int> k;
vector<pair<long long int, long long int>> deal;

// Checker functions
void check_day_iterations_invariant(long long day, long long sum) {
    if (day > 2 * sum) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive day iterations!" << endl;
        abort();
    }
}

void check_special_offers_invariant(const vector<long long>& reqd, long long cur) {
    long long unmet = 0;
    for (auto r : reqd) {
        unmet += r;
    }
    if (unmet > cur) {
        cerr << "Warning: Performance bottleneck condition triggered due to inefficient use of special offers!" << endl;
        abort();
    }
}

void check_remaining_transactions_invariant(const vector<long long>& reqd) {
    long long total_unmet = 0;
    for (auto r : reqd) {
        total_unmet += r;
    }
    if (total_unmet > 500) { // Assuming half the total maximum sum as a rough threshold
        cerr << "Warning: Performance bottleneck condition triggered due to high number of remaining transactions!" << endl;
        abort();
    }
}

bool pred(long long day) {
    vector<long long int> last(n + 1, -1);
    for (long long int i = 1; i < m + 1; i++) {
        if (deal[i].first <= day) {
            last[deal[i].second] = max(last[deal[i].second], deal[i].first);
        }
    }
    vector<vector<long long int>> off(200005);
    for (long long int i = 1; i < n + 1; i++) {
        if (last[i] != -1) {
            off[last[i]].push_back(i);
        }
    }
    vector<long long int> reqd = k;
    long long cur = 0L;
    for (long long int i = 1; i < day + 1; i++) {
        cur++;
        for (auto j : off[i]) {
            if (cur >= reqd[j]) {
                cur -= reqd[j];
                reqd[j] = 0;
            } else {
                reqd[j] -= cur;
                cur = 0;
                break;
            }
        }
    }
    
    // Check special offers invariant
    check_special_offers_invariant(reqd, cur);
    
    long long sum = 0L;
    for (auto i : reqd) {
        sum += i;
    }
    
    // Check remaining transactions invariant
    check_remaining_transactions_invariant(reqd);
    
    return (sum * 2 <= cur);
}

int main() {
    cin >> n >> m;
    k.resize(n + 1);
    long long sum = 0L;
    for (long long int i = 1; i < n + 1; i++) {
        cin >> k[i];
        sum += k[i];
    }
    deal.resize(m + 1);
    for (long long int i = 1; i < m + 1; i++) {
        cin >> deal[i].first >> deal[i].second;
    }
    long long x = 0L;
    for (long long step = 2 * sum; step >= 1; step /= 2) {
        while (!pred(x + step)) x += step;
    }
    
    // Check day iterations invariant
    check_day_iterations_invariant(x + 1, sum);
    
    cout << x + 1;
    return 0;
}
```

**Comments on Checker Placement:**

- **`check_day_iterations_invariant`:** Placed after determining the required day, ensuring day-related operations are efficient.
- **`check_special_offers_invariant`:** Inside the `pred` function, verifying the optimized use of special offers.
- **`check_remaining_transactions_invariant`:** Also inside the `pred` function after processing transactions, ensuring remaining transactions don't exceed an assumed threshold.

These checks are incorporated in a way that allows detection of potential bottlenecks while minimizing performance overhead.

