system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is constraints.

Ivan plays a computer game that contains some microtransactions to make characters look cooler. Since Ivan wants his character to be really cool, he wants to use some of these microtransactions — and he won't start playing until he gets all of them.

Each day (during the morning) Ivan earns exactly one burle.

There are n types of microtransactions in the game. Each microtransaction costs 2 burles usually and 1 burle if it is on sale. Ivan has to order exactly k_i microtransactions of the i-th type (he orders microtransactions during the evening).

Ivan can order any (possibly zero) number of microtransactions of any types during any day (of course, if he has enough money to do it). If the microtransaction he wants to order is on sale then he can buy it for 1 burle and otherwise he can buy it for 2 burles.

There are also m special offers in the game shop. The j-th offer (d_j, t_j) means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Ivan wants to order all microtransactions as soon as possible. Your task is to calculate the minimum day when he can buy all microtransactions he want and actually start playing.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of types of microtransactions and the number of special offers in the game shop.

The second line of the input contains n integers k_1, k_2, ..., k_n (0 ≤ k_i ≤ 1000), where k_i is the number of copies of microtransaction of the i-th type Ivan has to order. It is guaranteed that sum of all k_i is not less than 1 and not greater than 1000.

The next m lines contain special offers. The j-th of these lines contains the j-th special offer. It is given as a pair of integers (d_j, t_j) (1 ≤ d_j ≤ 1000, 1 ≤ t_j ≤ n) and means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Output

Print one integer — the minimum day when Ivan can order all microtransactions he wants and actually start playing.

Examples

Input


5 6
1 2 0 2 0
2 4
3 3
1 5
1 2
1 5
2 3


Output


8


Input


5 3
4 2 1 3 2
3 5
4 2
2 5


Output


20

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, m, a[400005], sum, le, ri, mid, mp[400005], f, ans, v[400005], cnt,
    raod;
pair<long long, long long> b[400005];
int main() {
  cin >> n >> m;
  for (int i = 1; i <= n; i++) {
    cin >> a[i];
    sum += a[i];
  }
  for (int i = 1; i <= m; i++) {
    cin >> b[i].first >> b[i].second;
  }
  sort(b + 1, b + m + 1);
  le = 1;
  ri = 2 * sum;
  while (le <= ri) {
    raod = 0;
    mid = (le + ri) / 2;
    f = 0;
    cnt = 0;
    for (int i = 1; i <= 400005; i++) {
      v[i] = 0;
      mp[i] = 0;
    }
    for (int i = 1; i <= m; i++) {
      if (b[i].first <= mid) {
        mp[b[i].second] = b[i].first;
      }
    }
    for (int i = 1; i <= n; i++) {
      if (mp[i]) v[mp[i]] += a[i];
    }
    raod = sum;
    for (int i = 1; i <= mid; i++) {
      cnt++;
      if (v[i] <= cnt) {
        cnt -= v[i];
        raod -= v[i];
      } else {
        raod -= cnt;
        cnt = 0;
      }
    }
    if (cnt - 2 * raod >= 0) {
      ans = mid;
      ri = mid - 1;
    } else {
      le = mid + 1;
    }
  }
  cout << ans << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 3
4 2 1 0 2
3 5
4 2
2 5


(G.2) Fast Input

5 3
4 0 1 0 2
3 5
4 2
2 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m, a[400005], sum, le, ri, mid, mp[400005], f, ans, v[400005], cnt, /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
    raod; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
pair<long long, long long> b[400005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 8 slow_hit_count: 6, fast_hit_count: 6 */
    cin >> a[i]; /* line 9 slow_hit_count: 5, fast_hit_count: 5 */
    sum += a[i]; /* line 10 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= m; i++) { /* line 12 slow_hit_count: 4, fast_hit_count: 4 */
    cin >> b[i].first >> b[i].second; /* line 13 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  sort(b + 1, b + m + 1); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  le = 1; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  ri = 2 * sum; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  while (le <= ri) { /* line 18 slow_hit_count: 6, fast_hit_count: 5 */
    raod = 0; /* line 19 slow_hit_count: 5, fast_hit_count: 4 */
    mid = (le + ri) / 2; /* line 20 slow_hit_count: 5, fast_hit_count: 4 */
    f = 0; /* line 21 slow_hit_count: 5, fast_hit_count: 4 */
    cnt = 0; /* line 22 slow_hit_count: 5, fast_hit_count: 4 */
    for (int i = 1; i <= 400005; i++) { /* line 23 slow_hit_count: 2000030, fast_hit_count: 1600024 */
      v[i] = 0; /* line 24 slow_hit_count: 2000025, fast_hit_count: 1600020 */
      mp[i] = 0; /* line 25 slow_hit_count: 2000025, fast_hit_count: 1600020 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 1; i <= m; i++) { /* line 27 slow_hit_count: 20, fast_hit_count: 16 */
      if (b[i].first <= mid) { /* line 28 slow_hit_count: 15, fast_hit_count: 12 */
        mp[b[i].second] = b[i].first; /* line 29 slow_hit_count: 15, fast_hit_count: 12 */
      } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 1; i <= n; i++) { /* line 32 slow_hit_count: 30, fast_hit_count: 24 */
      if (mp[i]) v[mp[i]] += a[i]; /* line 33 slow_hit_count: 25, fast_hit_count: 20 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    raod = sum; /* line 35 slow_hit_count: 5, fast_hit_count: 4 */
    for (int i = 1; i <= mid; i++) { /* line 36 slow_hit_count: 64, fast_hit_count: 47 */
      cnt++; /* line 37 slow_hit_count: 59, fast_hit_count: 43 */
      if (v[i] <= cnt) { /* line 38 slow_hit_count: 59, fast_hit_count: 43 */
        cnt -= v[i]; /* line 39 slow_hit_count: 59, fast_hit_count: 43 */
        raod -= v[i]; /* line 40 slow_hit_count: 59, fast_hit_count: 43 */
      } else { /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
        raod -= cnt; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
        cnt = 0; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    if (cnt - 2 * raod >= 0) { /* line 46 slow_hit_count: 5, fast_hit_count: 4 */
      ans = mid; /* line 47 slow_hit_count: 1, fast_hit_count: 2 */
      ri = mid - 1; /* line 48 slow_hit_count: 1, fast_hit_count: 2 */
    } else { /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      le = mid + 1; /* line 50 slow_hit_count: 4, fast_hit_count: 2 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 54 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance characteristics of the given C program, we can follow the outlined phases and derive performance-characterizing invariants based on the provided hit counts and code structure.

### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Hit Counts:**
1. **Line 23 (`for (int i = 1; i <= 400005; i++)`)** is executed significantly more times in the slow input than in the fast input (2,000,030 vs. 1,600,024). This loop initializes arrays `v` and `mp` to zero, which seems inefficient given the large fixed size of the arrays.
2. **Lines 36 to 40** within the loop for `mid` iterations show higher hit counts in the slow input, indicating more iterations are likely occurring due to larger `mid` values in the slow scenario.
3. **Lines 27 to 33** also indicate more iterations in the slow input, suggesting that the conditions for microtransactions being on sale are more frequently met or require more processing.
4. The binary search (`while (le <= ri)`) loop overall has more iterations in the slow case, which may suggest a wider search space or more complex conditions leading to slower convergence.

### Phase 2: Derive Performance-Characterizing Invariants

From these observations, we can derive the following performance-characterizing invariants:

1. **Binary Search Range and Initialization Loop:**
   - Natural Language Invariant: "If the total number of microtransactions required (`sum`) is large, and the binary search explores a wide range of potential days (`le` to `ri`), the program may slow down significantly due to extensive initialization of large arrays."
   - This invariant reflects the impact of initializing large arrays when `sum` is high, causing the binary search to potentially evaluate many days.

2. **Sale Offers and Mid-Range Evaluation:**
   - Natural Language Invariant: "If many special offers are valid within a broad range of days up to `mid`, and `mid` approaches its upper bound frequently, the program may experience increased slow iterations."
   - This invariant highlights the frequent evaluation of special offers against `mid`, causing more updates to the `mp` array and increased processing time in the slow input case.

3. **Allocation of Burles and Transactions:**
   - Natural Language Invariant: "If `mid` is consistently large relative to the number of types of microtransactions (`n`), leading to a high count of burles needing allocation across days, the program's allocation logic may slow down."
   - This invariant suggests a correlation between high `mid` values and the allocation of burles across many days, which slows down the process.

### Considerations for Fuzzers

- These invariants do not rely on specific input values but rather on patterns and ranges derived from input constraints (`n <= 1000`, `sum <= 1000`).
- By understanding these conditions, fuzzers can generate test cases that push the boundaries of these patterns to trigger potential slowdowns, such as increasing the variety or number of transactions and offers within allowed limits.

These performance invariants serve as guidelines for detecting conditions that lead to slower execution paths, optimizing the binary search, and efficiently handling large data initialization and transactions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is constraints.

Ivan plays a computer game that contains some microtransactions to make characters look cooler. Since Ivan wants his character to be really cool, he wants to use some of these microtransactions — and he won't start playing until he gets all of them.

Each day (during the morning) Ivan earns exactly one burle.

There are n types of microtransactions in the game. Each microtransaction costs 2 burles usually and 1 burle if it is on sale. Ivan has to order exactly k_i microtransactions of the i-th type (he orders microtransactions during the evening).

Ivan can order any (possibly zero) number of microtransactions of any types during any day (of course, if he has enough money to do it). If the microtransaction he wants to order is on sale then he can buy it for 1 burle and otherwise he can buy it for 2 burles.

There are also m special offers in the game shop. The j-th offer (d_j, t_j) means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Ivan wants to order all microtransactions as soon as possible. Your task is to calculate the minimum day when he can buy all microtransactions he want and actually start playing.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of types of microtransactions and the number of special offers in the game shop.

The second line of the input contains n integers k_1, k_2, ..., k_n (0 ≤ k_i ≤ 1000), where k_i is the number of copies of microtransaction of the i-th type Ivan has to order. It is guaranteed that sum of all k_i is not less than 1 and not greater than 1000.

The next m lines contain special offers. The j-th of these lines contains the j-th special offer. It is given as a pair of integers (d_j, t_j) (1 ≤ d_j ≤ 1000, 1 ≤ t_j ≤ n) and means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Output

Print one integer — the minimum day when Ivan can order all microtransactions he wants and actually start playing.

Examples

Input


5 6
1 2 0 2 0
2 4
3 3
1 5
1 2
1 5
2 3


Output


8


Input


5 3
4 2 1 3 2
3 5
4 2
2 5


Output


20

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants as Checker Functions

For each of the natural language invariants derived in Phase 2, we will create a C++ checker function to implement them as runtime checks.

#### Invariant 1: Binary Search Range and Initialization Loop

```cpp
void check_large_sum_invariant(long long totalSum) {
    if (totalSum > 500) { // Example threshold based on the problem constraints
        cerr << "Warning: Performance bottleneck due to large sum of microtransactions!" << endl;
        abort();
    }
}
```

#### Invariant 2: Sale Offers and Mid-Range Evaluation

```cpp
void check_large_mid_invariant(long long mid, long long nTypes) {
    if (mid > 2 * nTypes) { // Example threshold based on typical values and problem constraints
        cerr << "Warning: Performance bottleneck due to large mid value in binary search!" << endl;
        abort();
    }
}
```

#### Invariant 3: Allocation of Burles and Transactions

```cpp
void check_transaction_allocation_invariant(long long mid, long long nTypes) {
    if (mid > 10 * nTypes) { // Example threshold based on complexity and problem constraints
        cerr << "Warning: Performance bottleneck due to high transaction allocation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Functions into the C++ Program

We'll place the checker functions at strategic locations in the original C++ code to catch the performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_large_sum_invariant(long long totalSum) {
    if (totalSum > 500) { // Example threshold
        cerr << "Warning: Performance bottleneck due to large sum of microtransactions!" << endl;
        abort();
    }
}

void check_large_mid_invariant(long long mid, long long nTypes) {
    if (mid > 2 * nTypes) { // Example threshold
        cerr << "Warning: Performance bottleneck due to large mid value in binary search!" << endl;
        abort();
    }
}

void check_transaction_allocation_invariant(long long mid, long long nTypes) {
    if (mid > 10 * nTypes) { // Example threshold
        cerr << "Warning: Performance bottleneck due to high transaction allocation!" << endl;
        abort();
    }
}

int main() {
    long long n, m, a[400005], sum = 0, le, ri, mid, mp[400005], f, ans, v[400005], cnt, raod;
    pair<long long, long long> b[400005];
    
    cin >> n >> m;
    for (int i = 1; i <= n; i++) {
        cin >> a[i];
        sum += a[i];
    }

    // Check for large sum which affects initialization
    check_large_sum_invariant(sum);

    for (int i = 1; i <= m; i++) {
        cin >> b[i].first >> b[i].second;
    }
    sort(b + 1, b + m + 1);
    
    le = 1;
    ri = 2 * sum;
    
    while (le <= ri) {
        raod = 0;
        mid = (le + ri) / 2;
        
        // Check for large mid value affecting binary search
        check_large_mid_invariant(mid, n);

        f = 0;
        cnt = 0;
        for (int i = 1; i <= 400005; i++) {
            v[i] = 0;
            mp[i] = 0;
        }
        for (int i = 1; i <= m; i++) {
            if (b[i].first <= mid) {
                mp[b[i].second] = b[i].first;
            }
        }
        for (int i = 1; i <= n; i++) {
            if (mp[i]) v[mp[i]] += a[i];
        }
        
        // Check for high transaction allocation
        check_transaction_allocation_invariant(mid, n);

        raod = sum;
        for (int i = 1; i <= mid; i++) {
            cnt++;
            if (v[i] <= cnt) {
                cnt -= v[i];
                raod -= v[i];
            } else {
                raod -= cnt;
                cnt = 0;
            }
        }
        if (cnt - 2 * raod >= 0) {
            ans = mid;
            ri = mid - 1;
        } else {
            le = mid + 1;
        }
    }
    cout << ans << endl;
}
```

**Comments:**
- The check for `large_sum_invariant` is placed right after calculating `sum` to immediately flag potential excessive initialization.
- The `large_mid_invariant` check occurs within the binary search loop to catch when `mid` becomes inefficiently large.
- The `transaction_allocation_invariant` is also checked within the loop to detect when transaction allocation logic might slow down the program.

These insertions provide runtime checking for the conditions that could cause performance bottlenecks in the given C++ program.

