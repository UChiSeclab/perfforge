system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is constraints.

Ivan plays a computer game that contains some microtransactions to make characters look cooler. Since Ivan wants his character to be really cool, he wants to use some of these microtransactions — and he won't start playing until he gets all of them.

Each day (during the morning) Ivan earns exactly one burle.

There are n types of microtransactions in the game. Each microtransaction costs 2 burles usually and 1 burle if it is on sale. Ivan has to order exactly k_i microtransactions of the i-th type (he orders microtransactions during the evening).

Ivan can order any (possibly zero) number of microtransactions of any types during any day (of course, if he has enough money to do it). If the microtransaction he wants to order is on sale then he can buy it for 1 burle and otherwise he can buy it for 2 burles.

There are also m special offers in the game shop. The j-th offer (d_j, t_j) means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Ivan wants to order all microtransactions as soon as possible. Your task is to calculate the minimum day when he can buy all microtransactions he want and actually start playing.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of types of microtransactions and the number of special offers in the game shop.

The second line of the input contains n integers k_1, k_2, ..., k_n (0 ≤ k_i ≤ 1000), where k_i is the number of copies of microtransaction of the i-th type Ivan has to order. It is guaranteed that sum of all k_i is not less than 1 and not greater than 1000.

The next m lines contain special offers. The j-th of these lines contains the j-th special offer. It is given as a pair of integers (d_j, t_j) (1 ≤ d_j ≤ 1000, 1 ≤ t_j ≤ n) and means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Output

Print one integer — the minimum day when Ivan can order all microtransactions he wants and actually start playing.

Examples

Input


5 6
1 2 0 2 0
2 4
3 3
1 5
1 2
1 5
2 3


Output


8


Input


5 3
4 2 1 3 2
3 5
4 2
2 5


Output


20

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, m;
vector<int> k;
vector<pair<int, int>> q(1001);
bool can(int day) {
  vector<int> lst(n, -1);
  for (int i = 0; i < m; ++i) {
    if (q[i].first <= day) {
      lst[q[i].second] = max(lst[q[i].second], q[i].first);
    }
  }
  vector<vector<int>> off(1001);
  for (int i = 0; i < n; ++i) {
    if (lst[i] != -1) {
      off[lst[i]].push_back(i);
    }
  }
  vector<int> need = k;
  int money = 0;
  for (int i = 0; i <= day; ++i) {
    ++money;
    if (i > 1000) continue;
    for (auto it : off[i]) {
      if (money >= need[it]) {
        money -= need[it];
        need[it] = 0;
      } else {
        need[it] -= money;
        money = 0;
        break;
      }
    }
  }
  return accumulate(need.begin(), need.end(), 0) * 2 <= money;
}
int main() {
  cin >> n >> m;
  k = vector<int>(n);
  for (int i = 0; i < n; ++i) {
    cin >> k[i];
  }
  for (int i = 0; i < m; ++i) {
    cin >> q[i].first >> q[i].second;
    --q[i].first;
    --q[i].second;
  }
  for (int j = 0; j <= 2000; ++j) {
    if (can(j)) {
      cout << j + 1 << endl;
      return 0;
    }
  }
  assert(false);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 3
4 2 2 5 0
3 5
4 2
2 5


(G.2) Fast Input

5 3
2 2 0 0 2
5 5
4 2
2 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int>> q(1001); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool can(int day) { /* line 6 slow_hit_count: 24, fast_hit_count: 8 */
  vector<int> lst(n, -1); /* line 7 slow_hit_count: 48, fast_hit_count: 16 */
  for (int i = 0; i < m; ++i) { /* line 8 slow_hit_count: 96, fast_hit_count: 32 */
    if (q[i].first <= day) { /* line 9 slow_hit_count: 72, fast_hit_count: 24 */
      lst[q[i].second] = max(lst[q[i].second], q[i].first); /* line 10 slow_hit_count: 66, fast_hit_count: 16 */
    } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  vector<vector<int>> off(1001); /* line 13 slow_hit_count: 48, fast_hit_count: 16 */
  for (int i = 0; i < n; ++i) { /* line 14 slow_hit_count: 144, fast_hit_count: 48 */
    if (lst[i] != -1) { /* line 15 slow_hit_count: 120, fast_hit_count: 40 */
      off[lst[i]].push_back(i); /* line 16 slow_hit_count: 44, fast_hit_count: 12 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> need = k; /* line 19 slow_hit_count: 24, fast_hit_count: 8 */
  int money = 0; /* line 20 slow_hit_count: 24, fast_hit_count: 8 */
  for (int i = 0; i <= day; ++i) { /* line 21 slow_hit_count: 324, fast_hit_count: 44 */
    ++money; /* line 22 slow_hit_count: 300, fast_hit_count: 36 */
    if (i > 1000) continue; /* line 23 slow_hit_count: 300, fast_hit_count: 36 */
    for (auto it : off[i]) { /* line 24 slow_hit_count: 344, fast_hit_count: 48 */
      if (money >= need[it]) { /* line 25 slow_hit_count: 44, fast_hit_count: 12 */
        money -= need[it]; /* line 26 slow_hit_count: 44, fast_hit_count: 12 */
        need[it] = 0; /* line 27 slow_hit_count: 44, fast_hit_count: 12 */
      } else { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
        need[it] -= money; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
        money = 0; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  return accumulate(need.begin(), need.end(), 0) * 2 <= money; /* line 35 slow_hit_count: 48, fast_hit_count: 16 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  k = vector<int>(n); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 40 slow_hit_count: 6, fast_hit_count: 6 */
    cin >> k[i]; /* line 41 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; ++i) { /* line 43 slow_hit_count: 4, fast_hit_count: 4 */
    cin >> q[i].first >> q[i].second; /* line 44 slow_hit_count: 3, fast_hit_count: 3 */
    --q[i].first; /* line 45 slow_hit_count: 3, fast_hit_count: 3 */
    --q[i].second; /* line 46 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  for (int j = 0; j <= 2000; ++j) { /* line 48 slow_hit_count: 24, fast_hit_count: 8 */
    if (can(j)) { /* line 49 slow_hit_count: 24, fast_hit_count: 8 */
      cout << j + 1 << endl; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
      return 0; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  assert(false); /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 56 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issue in the given C program, we need to analyze the difference in line-level hit counts between the fast and slow inputs and determine which segments of the code are being hit significantly more often with the slow input. After identifying these segments, we will derive performance-related invariants that can explain why the code slows down under certain conditions.

### Phase 1: Identify Expensive or Inefficient Code Segments

From the provided hit counts, the following observations can be made:

1. **Function `can(int day)`**: This function is called more frequently in slow inputs (24 times) compared to fast inputs (8 times). This indicates that the `can` function's evaluation is a performance bottleneck.

2. **Loop in `can(int day)` [Line 21]**: The loop `for (int i = 0; i <= day; ++i)` is executed more frequently (324 times for slow input vs. 44 for fast input). This loop iterates over each day to calculate money and check special offers, which is quite expensive.

3. **Inner Loop in `can(int day)` [Line 24]**: The inner loop `for (auto it : off[i])` is also hit more frequently for the slow input. This loop checks each offer available on day `i` and tries to utilize them, which is computationally intensive depending on the number of days and offers.

These observations suggest that the performance bottleneck is linked to the repeated evaluation of potential scenarios to buy microtransactions, especially when the number of days required is higher.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis and observations, here are some natural language performance-characterizing invariants that can capture the slowdowns:

1. **High Iteration Count in Day Loop**:
   - **Invariant**: "If the number of days explored during the `can()` function evaluations becomes large, the performance degrades. This can occur when the required number of burles for purchasing microtransactions significantly exceeds the available burles from the days with offers."
   - **Explanation**: The number of days (`j`) in the outer loop of `main()` is directly related to the scenario exploration depth. More days mean more iterations leading to higher computational demand.
   
2. **Frequent Processing of Offers**:
   - **Invariant**: "If there are many special offers spread across distinct days, and each type of microtransaction requires different offer days for optimal purchase, the processing of offers becomes a bottleneck."
   - **Explanation**: The `can()` function processes each offer for every day. More distinct days with offers, especially when combined with scattered microtransaction needs, increase the complexity of processing these offers.

3. **Large Cumulative Need of Microtransactions**:
   - **Invariant**: "If the total number of required microtransactions of various types is high relative to the special offers' timing and discounts, the computation required to determine the optimal purchase day increases significantly."
   - **Explanation**: Large cumulative needs exacerbate the decision-making process for each day and offer, requiring more iterations within `can()`.

By focusing on these high-level patterns rather than specific numeric conditions, these invariants remain flexible yet powerful enough to predict potential slowdowns in various scenarios, within the problem's constraints (e.g., `n, m <= 1000`). These descriptions can help target optimization in the algorithm and guide the fuzzer to stress test these specific conditions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is constraints.

Ivan plays a computer game that contains some microtransactions to make characters look cooler. Since Ivan wants his character to be really cool, he wants to use some of these microtransactions — and he won't start playing until he gets all of them.

Each day (during the morning) Ivan earns exactly one burle.

There are n types of microtransactions in the game. Each microtransaction costs 2 burles usually and 1 burle if it is on sale. Ivan has to order exactly k_i microtransactions of the i-th type (he orders microtransactions during the evening).

Ivan can order any (possibly zero) number of microtransactions of any types during any day (of course, if he has enough money to do it). If the microtransaction he wants to order is on sale then he can buy it for 1 burle and otherwise he can buy it for 2 burles.

There are also m special offers in the game shop. The j-th offer (d_j, t_j) means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Ivan wants to order all microtransactions as soon as possible. Your task is to calculate the minimum day when he can buy all microtransactions he want and actually start playing.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of types of microtransactions and the number of special offers in the game shop.

The second line of the input contains n integers k_1, k_2, ..., k_n (0 ≤ k_i ≤ 1000), where k_i is the number of copies of microtransaction of the i-th type Ivan has to order. It is guaranteed that sum of all k_i is not less than 1 and not greater than 1000.

The next m lines contain special offers. The j-th of these lines contains the j-th special offer. It is given as a pair of integers (d_j, t_j) (1 ≤ d_j ≤ 1000, 1 ≤ t_j ≤ n) and means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Output

Print one integer — the minimum day when Ivan can order all microtransactions he wants and actually start playing.

Examples

Input


5 6
1 2 0 2 0
2 4
3 3
1 5
1 2
1 5
2 3


Output


8


Input


5 3
4 2 1 3 2
3 5
4 2
2 5


Output


20

Solution (C++ code):
{solution}


assistant: Let's start by translating the performance characterizing invariants from natural language into C++ checker functions as described in Phase 3.

### Phase 3: Implement the Natural Language Invariants in C++

For each invariant identified in Phase 2, we will implement a corresponding C++ checker.

#### Invariant 1: High Iteration Count in Day Loop

```cpp
// Checker for high iteration count in the day loop
void check_iteration_invariant(int day) {
    if (day > 1000) {
        cerr << "Warning: High iteration count in day loop!" << endl;
        abort();
    }
}
```

#### Invariant 2: Frequent Processing of Offers

```cpp
// Checker for frequent processing of offers
void check_offer_processing_invariant(const vector<vector<int>>& off, int day) {
    int offerDays = 0;
    for (int i = 0; i <= day; ++i) {
        if (!off[i].empty()) {
            ++offerDays;
        }
    }
    if (offerDays > 500) { // Arbitrary threshold based on potential slowdown
        cerr << "Warning: Frequent processing of offers!" << endl;
        abort();
    }
}
```

#### Invariant 3: Large Cumulative Need for Microtransactions

```cpp
// Checker for large cumulative need of microtransactions
void check_cumulative_need_invariant(const vector<int>& need) {
    int totalNeed = accumulate(need.begin(), need.end(), 0);
    if (totalNeed > 750) { // Based on the constraint that the sum of k_i is <= 1000
        cerr << "Warning: Large cumulative need for microtransactions!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Next, we will integrate these checker functions into the original C++ program code. We will place them at appropriate locations in the control flow to ensure they do not introduce significant overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, m;
vector<int> k;
vector<pair<int, int>> q(1001);

// Checker for high iteration count in the day loop
void check_iteration_invariant(int day) {
    if (day > 1000) {
        cerr << "Warning: High iteration count in day loop!" << endl;
        abort();
    }
}

// Checker for frequent processing of offers
void check_offer_processing_invariant(const vector<vector<int>>& off, int day) {
    int offerDays = 0;
    for (int i = 0; i <= day; ++i) {
        if (!off[i].empty()) {
            ++offerDays;
        }
    }
    if (offerDays > 500) { // Arbitrary threshold based on potential slowdown
        cerr << "Warning: Frequent processing of offers!" << endl;
        abort();
    }
}

// Checker for large cumulative need of microtransactions
void check_cumulative_need_invariant(const vector<int>& need) {
    int totalNeed = accumulate(need.begin(), need.end(), 0);
    if (totalNeed > 750) { // Based on the constraint that the sum of k_i is <= 1000
        cerr << "Warning: Large cumulative need for microtransactions!" << endl;
        abort();
    }
}

bool can(int day) {
    vector<int> lst(n, -1);
    for (int i = 0; i < m; ++i) {
        if (q[i].first <= day) {
            lst[q[i].second] = max(lst[q[i].second], q[i].first);
        }
    }
    vector<vector<int>> off(1001);
    for (int i = 0; i < n; ++i) {
        if (lst[i] != -1) {
            off[lst[i]].push_back(i);
        }
    }
    vector<int> need = k;

    // Check invariant for large cumulative need
    check_cumulative_need_invariant(need);

    int money = 0;
    for (int i = 0; i <= day; ++i) {
        ++money;
        if (i > 1000) continue;
        for (auto it : off[i]) {
            if (money >= need[it]) {
                money -= need[it];
                need[it] = 0;
            } else {
                need[it] -= money;
                money = 0;
                break;
            }
        }
    }

    // Check invariant for frequent processing of offers
    check_offer_processing_invariant(off, day);

    return accumulate(need.begin(), need.end(), 0) * 2 <= money;
}

int main() {
    cin >> n >> m;
    k = vector<int>(n);
    for (int i = 0; i < n; ++i) {
        cin >> k[i];
    }
    for (int i = 0; i < m; ++i) {
        cin >> q[i].first >> q[i].second;
        --q[i].first;
        --q[i].second;
    }
    for (int j = 0; j <= 2000; ++j) {
        // Check invariant for high iteration count
        check_iteration_invariant(j);

        if (can(j)) {
            cout << j + 1 << endl;
            return 0;
        }
    }
    assert(false);
    return 0;
}
```

### Explanation

- **Invariant Check for High Iteration Count**: Placed in the `main()` loop to check the number of days being processed.
- **Invariant Check for Offer Processing**: Placed in the `can()` function to check how often offers are being processed, factoring in the number of days.
- **Invariant Check for Cumulative Need**: This check is placed at the beginning of `can()` to ensure that the cumulative need for microtransactions isn't excessively large based on the problem's constraints.

These checks provide runtime warnings and abort the program when conditions likely to cause slow performance are detected, aiding in diagnosing and preventing such scenarios.

