system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is constraints.

Ivan plays a computer game that contains some microtransactions to make characters look cooler. Since Ivan wants his character to be really cool, he wants to use some of these microtransactions — and he won't start playing until he gets all of them.

Each day (during the morning) Ivan earns exactly one burle.

There are n types of microtransactions in the game. Each microtransaction costs 2 burles usually and 1 burle if it is on sale. Ivan has to order exactly k_i microtransactions of the i-th type (he orders microtransactions during the evening).

Ivan can order any (possibly zero) number of microtransactions of any types during any day (of course, if he has enough money to do it). If the microtransaction he wants to order is on sale then he can buy it for 1 burle and otherwise he can buy it for 2 burles.

There are also m special offers in the game shop. The j-th offer (d_j, t_j) means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Ivan wants to order all microtransactions as soon as possible. Your task is to calculate the minimum day when he can buy all microtransactions he want and actually start playing.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of types of microtransactions and the number of special offers in the game shop.

The second line of the input contains n integers k_1, k_2, ..., k_n (0 ≤ k_i ≤ 1000), where k_i is the number of copies of microtransaction of the i-th type Ivan has to order. It is guaranteed that sum of all k_i is not less than 1 and not greater than 1000.

The next m lines contain special offers. The j-th of these lines contains the j-th special offer. It is given as a pair of integers (d_j, t_j) (1 ≤ d_j ≤ 1000, 1 ≤ t_j ≤ n) and means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Output

Print one integer — the minimum day when Ivan can order all microtransactions he wants and actually start playing.

Examples

Input


5 6
1 2 0 2 0
2 4
3 3
1 5
1 2
1 5
2 3


Output


8


Input


5 3
4 2 1 3 2
3 5
4 2
2 5


Output


20

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, m;
vector<int> k;
vector<pair<int, int>> q(1001);
bool can(int day) {
  vector<int> lst(n, -1);
  for (int i = 0; i < m; ++i) {
    if (q[i].first <= day) {
      lst[q[i].second] = max(lst[q[i].second], q[i].first);
    }
  }
  vector<vector<int>> off(1001);
  for (int i = 0; i < n; ++i) {
    if (lst[i] != -1) {
      off[lst[i]].push_back(i);
    }
  }
  vector<int> need = k;
  int cur_money = 0;
  for (int i = 0; i <= day; ++i) {
    ++cur_money;
    if (i > 1000) continue;
    for (auto it : off[i]) {
      if (cur_money >= need[it]) {
        cur_money -= need[it];
        need[it] = 0;
      } else {
        need[it] -= cur_money;
        cur_money = 0;
      }
    }
  }
  return accumulate(need.begin(), need.end(), 0) * 2 <= cur_money;
}
int main() {
  cin >> n >> m;
  k = vector<int>(n);
  for (int i = 0; i < n; ++i) {
    cin >> k[i];
  }
  for (int i = 0; i < m; ++i) {
    cin >> q[i].first >> q[i].second;
    --q[i].first;
    --q[i].second;
  }
  for (int l = 0; l <= 2000; ++l) {
    if (can(l)) {
      cout << l + 1 << endl;
      return 0;
    }
  }
  assert(false);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 3
4 2 2 5 0
3 5
4 2
2 5


(G.2) Fast Input

5 3
2 2 0 0 2
5 5
4 2
2 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int>> q(1001); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool can(int day) { /* line 6 slow_hit_count: 24, fast_hit_count: 8 */
  vector<int> lst(n, -1); /* line 7 slow_hit_count: 48, fast_hit_count: 16 */
  for (int i = 0; i < m; ++i) { /* line 8 slow_hit_count: 96, fast_hit_count: 32 */
    if (q[i].first <= day) { /* line 9 slow_hit_count: 72, fast_hit_count: 24 */
      lst[q[i].second] = max(lst[q[i].second], q[i].first); /* line 10 slow_hit_count: 66, fast_hit_count: 16 */
    } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  vector<vector<int>> off(1001); /* line 13 slow_hit_count: 48, fast_hit_count: 16 */
  for (int i = 0; i < n; ++i) { /* line 14 slow_hit_count: 144, fast_hit_count: 48 */
    if (lst[i] != -1) { /* line 15 slow_hit_count: 120, fast_hit_count: 40 */
      off[lst[i]].push_back(i); /* line 16 slow_hit_count: 44, fast_hit_count: 12 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> need = k; /* line 19 slow_hit_count: 24, fast_hit_count: 8 */
  int cur_money = 0; /* line 20 slow_hit_count: 24, fast_hit_count: 8 */
  for (int i = 0; i <= day; ++i) { /* line 21 slow_hit_count: 324, fast_hit_count: 44 */
    ++cur_money; /* line 22 slow_hit_count: 300, fast_hit_count: 36 */
    if (i > 1000) continue; /* line 23 slow_hit_count: 300, fast_hit_count: 36 */
    for (auto it : off[i]) { /* line 24 slow_hit_count: 344, fast_hit_count: 48 */
      if (cur_money >= need[it]) { /* line 25 slow_hit_count: 44, fast_hit_count: 12 */
        cur_money -= need[it]; /* line 26 slow_hit_count: 44, fast_hit_count: 12 */
        need[it] = 0; /* line 27 slow_hit_count: 44, fast_hit_count: 12 */
      } else { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
        need[it] -= cur_money; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
        cur_money = 0; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  return accumulate(need.begin(), need.end(), 0) * 2 <= cur_money; /* line 34 slow_hit_count: 48, fast_hit_count: 16 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  k = vector<int>(n); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 39 slow_hit_count: 6, fast_hit_count: 6 */
    cin >> k[i]; /* line 40 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; ++i) { /* line 42 slow_hit_count: 4, fast_hit_count: 4 */
    cin >> q[i].first >> q[i].second; /* line 43 slow_hit_count: 3, fast_hit_count: 3 */
    --q[i].first; /* line 44 slow_hit_count: 3, fast_hit_count: 3 */
    --q[i].second; /* line 45 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  for (int l = 0; l <= 2000; ++l) { /* line 47 slow_hit_count: 24, fast_hit_count: 8 */
    if (can(l)) { /* line 48 slow_hit_count: 24, fast_hit_count: 8 */
      cout << l + 1 << endl; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
      return 0; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  assert(false); /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 55 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-level Hit Counts:**
   - The `can` function is called more times in the slow input (24 times) compared to the fast input (8 times).
   - Inside the `can` function:
     - Line 21, which iterates over days, has significantly more hits in the slow input (324) compared to the fast input (44).
     - Line 24 iterating over special offers also has more hits in the slow input (344 vs. 48).
     - Lines 25-27 involve checking and updating `cur_money` and `need`, which are hit more in the slow input.

2. **Pinpointing Specific Lines:**
   - The lines involving updating `cur_money` and `need` (25-27) are critical as they directly affect the loop's continuation and the number of days processed.
   - Line 21's loop count indicates that the slow input requires processing over more days, implicating a longer search for the earliest completion day.

3. **Inference on Data Interaction:**
   - The function attempts to determine the earliest possible day when all microtransactions can be bought. It repeatedly calls `can` to check different days, incrementing the day count.
   - This costly iteration through days is exacerbated when special offers and microtransaction requirements are not aligned optimally, leading to more days being processed.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Performance Invariants:**

   - **Invariant 1: High Number of Days Processed**
     - Natural Language: "If the number of days required to satisfy Ivan's microtransaction needs is high, the function `can` will iterate excessively, causing slow performance. This is likely when special offers are sparse or poorly aligned with high-demand microtransactions."
   
   - **Invariant 2: Mismatch Between Offers and Needs**
     - Natural Language: "If the available special offers do not align well with the types and quantities of microtransactions needed, the program may increment days unnecessarily, extending the time to find a solution."

   - **Invariant 3: Insufficient Early Offers**
     - Natural Language: "If sales for frequently needed types of microtransactions occur late in the timeline, the accumulation of burles without significant early purchases can cause the program to iterate over many days, slowing down the calculation of the earliest completion day."

2. **Explanation of Conditions:**
   - These invariants abstract away from specific input sizes but focus on the alignment and timing of special offers relative to Ivan's needs. Poor alignment leads to more days processed, directly correlating with slow execution.
   - By understanding these conditions, future slow scenarios can be identified when inputs have similar misalignments or when offers are not frequent enough to satisfy high demands quickly. 

These invariants should help in diagnosing slow scenarios, guiding optimization or debugging efforts. They don't rely on specific numeric thresholds but rather the relationship between microtransaction needs and offer timing.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is constraints.

Ivan plays a computer game that contains some microtransactions to make characters look cooler. Since Ivan wants his character to be really cool, he wants to use some of these microtransactions — and he won't start playing until he gets all of them.

Each day (during the morning) Ivan earns exactly one burle.

There are n types of microtransactions in the game. Each microtransaction costs 2 burles usually and 1 burle if it is on sale. Ivan has to order exactly k_i microtransactions of the i-th type (he orders microtransactions during the evening).

Ivan can order any (possibly zero) number of microtransactions of any types during any day (of course, if he has enough money to do it). If the microtransaction he wants to order is on sale then he can buy it for 1 burle and otherwise he can buy it for 2 burles.

There are also m special offers in the game shop. The j-th offer (d_j, t_j) means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Ivan wants to order all microtransactions as soon as possible. Your task is to calculate the minimum day when he can buy all microtransactions he want and actually start playing.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of types of microtransactions and the number of special offers in the game shop.

The second line of the input contains n integers k_1, k_2, ..., k_n (0 ≤ k_i ≤ 1000), where k_i is the number of copies of microtransaction of the i-th type Ivan has to order. It is guaranteed that sum of all k_i is not less than 1 and not greater than 1000.

The next m lines contain special offers. The j-th of these lines contains the j-th special offer. It is given as a pair of integers (d_j, t_j) (1 ≤ d_j ≤ 1000, 1 ≤ t_j ≤ n) and means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Output

Print one integer — the minimum day when Ivan can order all microtransactions he wants and actually start playing.

Examples

Input


5 6
1 2 0 2 0
2 4
3 3
1 5
1 2
1 5
2 3


Output


8


Input


5 3
4 2 1 3 2
3 5
4 2
2 5


Output


20

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Below, I'll translate the inferred invariants from Phase 2 into C++ code snippets for runtime checks.

#### Invariant 1: High Number of Days Processed
- **Natural Language:** If the number of days required to satisfy Ivan's microtransaction needs is high, the function `can` will iterate excessively, causing slow performance. This is likely when special offers are sparse or poorly aligned with high-demand microtransactions.
- **C++ Code:**

```cpp
void check_days_processed(int current_day) {
    if (current_day > 1000) { // Considering the problem constraints
        cerr << "Warning: Performance bottleneck - High number of days processed!" << endl;
        abort();
    }
}
```

#### Invariant 2: Mismatch Between Offers and Needs
- **Natural Language:** If the available special offers do not align well with the types and quantities of microtransactions needed, the program may increment days unnecessarily, extending the time to find a solution.
- **C++ Code:**

```cpp
void check_offer_mismatch(const vector<int>& need, int cur_money) {
    int total_need = accumulate(need.begin(), need.end(), 0);
    if (total_need > cur_money * 2) {
        cerr << "Warning: Offer mismatch - microtransaction needs not aligned with available offers!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original Program

Now, I'll integrate these checks into the existing C++ code to help identify when the conditions for slow performance are met.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Check for high number of days processed
void check_days_processed(int current_day) {
    if (current_day > 1000) { // Considering the problem constraints
        cerr << "Warning: Performance bottleneck - High number of days processed!" << endl;
        abort();
    }
}

// Check for mismatch between offers and needs
void check_offer_mismatch(const vector<int>& need, int cur_money) {
    int total_need = accumulate(need.begin(), need.end(), 0);
    if (total_need > cur_money * 2) {
        cerr << "Warning: Offer mismatch - microtransaction needs not aligned with available offers!" << endl;
        abort();
    }
}

int n, m;
vector<int> k;
vector<pair<int, int>> q(1001);

bool can(int day) {
    vector<int> lst(n, -1);
    for (int i = 0; i < m; ++i) {
        if (q[i].first <= day) {
            lst[q[i].second] = max(lst[q[i].second], q[i].first);
        }
    }
    vector<vector<int>> off(1001);
    for (int i = 0; i < n; ++i) {
        if (lst[i] != -1) {
            off[lst[i]].push_back(i);
        }
    }
    vector<int> need = k;
    int cur_money = 0;
    for (int i = 0; i <= day; ++i) {
        ++cur_money;
        if (i > 1000) continue;
        for (auto it : off[i]) {
            if (cur_money >= need[it]) {
                cur_money -= need[it];
                need[it] = 0;
            } else {
                need[it] -= cur_money;
                cur_money = 0;
            }
        }
    }
    check_offer_mismatch(need, cur_money); // Check inserted for offer mismatch
    return accumulate(need.begin(), need.end(), 0) * 2 <= cur_money;
}

int main() {
    cin >> n >> m;
    k = vector<int>(n);
    for (int i = 0; i < n; ++i) {
        cin >> k[i];
    }
    for (int i = 0; i < m; ++i) {
        cin >> q[i].first >> q[i].second;
        --q[i].first;
        --q[i].second;
    }
    for (int l = 0; l <= 2000; ++l) {
        check_days_processed(l); // Check inserted for high number of days processed
        if (can(l)) {
            cout << l + 1 << endl;
            return 0;
        }
    }
    assert(false);
    return 0;
}
```

### Explanation:

- **`check_days_processed(int current_day)`**: This check is placed in the loop that iterates over possible days. It warns if the number of days exceeds a reasonable threshold based on the problem's constraints.
- **`check_offer_mismatch(const vector<int>& need, int cur_money)`**: This check is inserted at the end of the `can` function to detect when the microtransaction needs do not align with available offers, causing unnecessary day increments. 

This integration aims to identify when these performance bottlenecks are potentially occurring during execution, assisting in debugging and optimization efforts.

