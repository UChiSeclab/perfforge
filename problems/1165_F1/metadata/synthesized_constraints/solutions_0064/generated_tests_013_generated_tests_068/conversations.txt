system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The only difference between easy and hard versions is constraints.

Ivan plays a computer game that contains some microtransactions to make characters look cooler. Since Ivan wants his character to be really cool, he wants to use some of these microtransactions — and he won't start playing until he gets all of them.

Each day (during the morning) Ivan earns exactly one burle.

There are n types of microtransactions in the game. Each microtransaction costs 2 burles usually and 1 burle if it is on sale. Ivan has to order exactly k_i microtransactions of the i-th type (he orders microtransactions during the evening).

Ivan can order any (possibly zero) number of microtransactions of any types during any day (of course, if he has enough money to do it). If the microtransaction he wants to order is on sale then he can buy it for 1 burle and otherwise he can buy it for 2 burles.

There are also m special offers in the game shop. The j-th offer (d_j, t_j) means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Ivan wants to order all microtransactions as soon as possible. Your task is to calculate the minimum day when he can buy all microtransactions he want and actually start playing.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of types of microtransactions and the number of special offers in the game shop.

The second line of the input contains n integers k_1, k_2, ..., k_n (0 ≤ k_i ≤ 1000), where k_i is the number of copies of microtransaction of the i-th type Ivan has to order. It is guaranteed that sum of all k_i is not less than 1 and not greater than 1000.

The next m lines contain special offers. The j-th of these lines contains the j-th special offer. It is given as a pair of integers (d_j, t_j) (1 ≤ d_j ≤ 1000, 1 ≤ t_j ≤ n) and means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Output

Print one integer — the minimum day when Ivan can order all microtransactions he wants and actually start playing.

Examples

Input


5 6
1 2 0 2 0
2 4
3 3
1 5
1 2
1 5
2 3


Output


8


Input


5 3
4 2 1 3 2
3 5
4 2
2 5


Output


20

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, m;
vector<int> a;
vector<pair<int, int> > b;
bool can(int d1) {
  vector<int> c(n, -1);
  for (int i = 0; i < m; i++) {
    if (b[i].first <= d1) c[b[i].second] = max(c[b[i].second], b[i].first);
  }
  vector<int> d[2005];
  for (int i = 0; i < n; i++) {
    if (c[i] != -1) d[c[i]].push_back(i);
  }
  vector<int> e = a;
  int k = 0;
  for (int i = 0; i <= d1; i++) {
    k++;
    for (int j = 0; j < d[i].size() && k; j++) {
      if (k >= e[d[i][j]]) {
        k -= e[d[i][j]];
        e[d[i][j]] = 0;
      } else {
        e[d[i][j]] -= k;
        k = 0;
      }
    }
  }
  int l = 0;
  for (int i = 0; i < n; i++) l += e[i];
  return l * 2 <= k;
}
int main() {
  cin >> n >> m;
  for (int i = 0; i < n; i++) {
    int t;
    cin >> t;
    a.push_back(t);
  }
  for (int i = 0; i < m; i++) {
    int v1, v2;
    cin >> v1 >> v2;
    b.push_back(make_pair(v1 - 1, v2 - 1));
  }
  int i = 0;
  while (!can(i)) i++;
  cout << i + 1;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 3
4 2 2 5 0
3 5
4 2
2 5


(G.2) Fast Input

5 3
2 2 0 0 2
5 5
4 2
2 5


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> a; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int> > b; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool can(int d1) { /* line 6 slow_hit_count: 24, fast_hit_count: 8 */
  vector<int> c(n, -1); /* line 7 slow_hit_count: 48, fast_hit_count: 16 */
  for (int i = 0; i < m; i++) { /* line 8 slow_hit_count: 96, fast_hit_count: 32 */
    if (b[i].first <= d1) c[b[i].second] = max(c[b[i].second], b[i].first); /* line 9 slow_hit_count: 72, fast_hit_count: 24 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> d[2005]; /* line 11 slow_hit_count: 96288, fast_hit_count: 32096 */
  for (int i = 0; i < n; i++) { /* line 12 slow_hit_count: 144, fast_hit_count: 48 */
    if (c[i] != -1) d[c[i]].push_back(i); /* line 13 slow_hit_count: 120, fast_hit_count: 40 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> e = a; /* line 15 slow_hit_count: 24, fast_hit_count: 8 */
  int k = 0; /* line 16 slow_hit_count: 24, fast_hit_count: 8 */
  for (int i = 0; i <= d1; i++) { /* line 17 slow_hit_count: 324, fast_hit_count: 44 */
    k++; /* line 18 slow_hit_count: 300, fast_hit_count: 36 */
    for (int j = 0; j < d[i].size() && k; j++) { /* line 19 slow_hit_count: 344, fast_hit_count: 48 */
      if (k >= e[d[i][j]]) { /* line 20 slow_hit_count: 44, fast_hit_count: 12 */
        k -= e[d[i][j]]; /* line 21 slow_hit_count: 44, fast_hit_count: 12 */
        e[d[i][j]] = 0; /* line 22 slow_hit_count: 44, fast_hit_count: 12 */
      } else { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
        e[d[i][j]] -= k; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
        k = 0; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  int l = 0; /* line 29 slow_hit_count: 24, fast_hit_count: 8 */
  for (int i = 0; i < n; i++) l += e[i]; /* line 30 slow_hit_count: 144, fast_hit_count: 48 */
  return l * 2 <= k; /* line 31 slow_hit_count: 48, fast_hit_count: 16 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 35 slow_hit_count: 6, fast_hit_count: 6 */
    int t; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> t; /* line 37 slow_hit_count: 5, fast_hit_count: 5 */
    a.push_back(t); /* line 38 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < m; i++) { /* line 40 slow_hit_count: 4, fast_hit_count: 4 */
    int v1, v2; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> v1 >> v2; /* line 42 slow_hit_count: 3, fast_hit_count: 3 */
    b.push_back(make_pair(v1 - 1, v2 - 1)); /* line 43 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  int i = 0; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  while (!can(i)) i++; /* line 46 slow_hit_count: 24, fast_hit_count: 8 */
  cout << i + 1; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 49 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the analysis of the provided code and hit count data, let's break down the performance issue into two main phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Function `can(int d1)` Iterations**:
   - The function `can` seems to be the main source of performance issues due to its repeated calls, indicated by the significantly higher hit counts for the slow input compared to the fast input.
   - **Line 17-28**: The loop iterating over `d1` is a critical part of the function, with a high hit count difference. For the slow input, this loop is executed many more times than for the fast input, which suggests that `d1` becomes large and results in prolonged computation.

2. **Nested Loops Handling Offers**:
   - **Line 19-26**: The inner loop, which iterates over `d[i]`, contributes to the high number of executions. It processes transactions within each day, where `d[i]` holds types of transactions on sale. The slow input likely forces more iterations here, possibly because of a large `d1` or complex conditions that lead to heavier processing.

3. **Vectors and Conditional Checks**:
   - Lines 8-13 involve processing the offers and setting up vectors. The conditional check on line 9 has higher hit counts under the slow input, indicating it is crucial in determining the offers that need processing.
   - The vectors `c`, `d`, and `e` represent various states and counts of transactions and offers, and their manipulation seems to significantly influence the program's performance.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the examination above, the following natural language invariants describe conditions where the code might slow down:

1. **High Number of Days with Sales**:
   - **Invariant**: "If the accumulated number of days `d1` that need to be considered for ongoing sales becomes significant, the performance degrades due to repeated evaluations of offers and transaction handling."
   - **Explanation**: The outer loop iterates over `d1`, which represents potential days to check for sales. More days mean more loops and higher computation time.

2. **Complex Sales Conditions**:
   - **Invariant**: "When there are many special offers that overlap or require complex conditions to be evaluated, especially with a higher variety of transaction types, this can result in increased processing time."
   - **Explanation**: Overlapping or numerous sales events necessitate additional checks and updates, leading to heavier processing within loops.

3. **Large Number of Transaction Requirements**:
   - **Invariant**: "If the required transactions `k_i` for one or more types are high, and those types either rarely go on sale or do so late in the timeline, it can cause a slowdown due to lack of efficient purchase options."
   - **Explanation**: High `k_i` values in combination with limited or late sales force the program into more expensive transaction paths, leading to extended loop iterations.

These performance-characterizing invariants focus on logical conditions and structural patterns in the input data that trigger slow execution paths within the constraints of the problem. They should help in identifying problematic inputs and optimizing the approach to handle such cases more efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The only difference between easy and hard versions is constraints.

Ivan plays a computer game that contains some microtransactions to make characters look cooler. Since Ivan wants his character to be really cool, he wants to use some of these microtransactions — and he won't start playing until he gets all of them.

Each day (during the morning) Ivan earns exactly one burle.

There are n types of microtransactions in the game. Each microtransaction costs 2 burles usually and 1 burle if it is on sale. Ivan has to order exactly k_i microtransactions of the i-th type (he orders microtransactions during the evening).

Ivan can order any (possibly zero) number of microtransactions of any types during any day (of course, if he has enough money to do it). If the microtransaction he wants to order is on sale then he can buy it for 1 burle and otherwise he can buy it for 2 burles.

There are also m special offers in the game shop. The j-th offer (d_j, t_j) means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Ivan wants to order all microtransactions as soon as possible. Your task is to calculate the minimum day when he can buy all microtransactions he want and actually start playing.

Input

The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of types of microtransactions and the number of special offers in the game shop.

The second line of the input contains n integers k_1, k_2, ..., k_n (0 ≤ k_i ≤ 1000), where k_i is the number of copies of microtransaction of the i-th type Ivan has to order. It is guaranteed that sum of all k_i is not less than 1 and not greater than 1000.

The next m lines contain special offers. The j-th of these lines contains the j-th special offer. It is given as a pair of integers (d_j, t_j) (1 ≤ d_j ≤ 1000, 1 ≤ t_j ≤ n) and means that microtransactions of the t_j-th type are on sale during the d_j-th day.

Output

Print one integer — the minimum day when Ivan can order all microtransactions he wants and actually start playing.

Examples

Input


5 6
1 2 0 2 0
2 4
3 3
1 5
1 2
1 5
2 3


Output


8


Input


5 3
4 2 1 3 2
3 5
4 2
2 5


Output


20

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's translate the performance-characterizing invariants we derived into C++ code snippets that can be used to check the conditions at runtime.

#### Invariant 1: High Number of Days with Sales
This invariant checks if the number of days (`d1`) being considered for ongoing sales exceeds a practical threshold, which could lead to performance degradation.

```cpp
// Checker for high number of days with sales
void check_days_invariant(int d1) {
    if (d1 > 1000) { // Given the constraints, you might not want d1 to exceed the total number of days
        cerr << "Warning: Performance bottleneck due to high number of days being checked for sales!" << endl;
        abort();
    }
}
```

#### Invariant 2: Complex Sales Conditions
This invariant checks if complex conditions related to sales transactions are being evaluated repeatedly, which can slow down the computation.

```cpp
// Checker for complex sales conditions
void check_sales_conditions_invariant(const vector<int>& c, int n) {
    int complexCount = 0;
    for (int i = 0; i < n; i++) {
        if (c[i] != -1) complexCount++;
    }
    if (complexCount > n * 0.5) { // Assuming complex conditions if more than half of the types are affected by sales
        cerr << "Warning: Performance bottleneck due to complex sales conditions!" << endl;
        abort();
    }
}
```

#### Invariant 3: Large Number of Transaction Requirements
This invariant checks if a large number of microtransactions are required for any type, especially if those types have limited sales offers.

```cpp
// Checker for large transaction requirements
void check_transaction_requirements_invariant(const vector<int>& a, const vector<int>& c, int n) {
    int highDemand = 0;
    for (int i = 0; i < n; i++) {
        if (a[i] > 500 && c[i] == -1) { // Threshold for high demand without sales offers
            highDemand++;
        }
    }
    if (highDemand > n * 0.2) { // If more than 20% of types have high demand without sales
        cerr << "Warning: Performance bottleneck due to large transaction requirements!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Program

Now, let's integrate these checks into the provided C++ solution at appropriate places to detect performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, m;
vector<int> a;
vector<pair<int, int>> b;

// Checker for high number of days with sales
void check_days_invariant(int d1) {
    if (d1 > 1000) { // Given the constraints, you might not want d1 to exceed the total number of days
        cerr << "Warning: Performance bottleneck due to high number of days being checked for sales!" << endl;
        abort();
    }
}

// Checker for complex sales conditions
void check_sales_conditions_invariant(const vector<int>& c, int n) {
    int complexCount = 0;
    for (int i = 0; i < n; i++) {
        if (c[i] != -1) complexCount++;
    }
    if (complexCount > n * 0.5) { // Assuming complex conditions if more than half of the types are affected by sales
        cerr << "Warning: Performance bottleneck due to complex sales conditions!" << endl;
        abort();
    }
}

// Checker for large transaction requirements
void check_transaction_requirements_invariant(const vector<int>& a, const vector<int>& c, int n) {
    int highDemand = 0;
    for (int i = 0; i < n; i++) {
        if (a[i] > 500 && c[i] == -1) { // Threshold for high demand without sales offers
            highDemand++;
        }
    }
    if (highDemand > n * 0.2) { // If more than 20% of types have high demand without sales
        cerr << "Warning: Performance bottleneck due to large transaction requirements!" << endl;
        abort();
    }
}

bool can(int d1) {
    vector<int> c(n, -1);
    for (int i = 0; i < m; i++) {
        if (b[i].first <= d1) c[b[i].second] = max(c[b[i].second], b[i].first);
    }
    check_sales_conditions_invariant(c, n); // Check complex sales conditions here

    vector<int> d[2005];
    for (int i = 0; i < n; i++) {
        if (c[i] != -1) d[c[i]].push_back(i);
    }
    vector<int> e = a;
    int k = 0;
    for (int i = 0; i <= d1; i++) {
        k++;
        for (int j = 0; j < d[i].size() && k; j++) {
            if (k >= e[d[i][j]]) {
                k -= e[d[i][j]];
                e[d[i][j]] = 0;
            } else {
                e[d[i][j]] -= k;
                k = 0;
            }
        }
    }
    int l = 0;
    for (int i = 0; i < n; i++) l += e[i];
    return l * 2 <= k;
}

int main() {
    cin >> n >> m;
    for (int i = 0; i < n; i++) {
        int t;
        cin >> t;
        a.push_back(t);
    }

    for (int i = 0; i < m; i++) {
        int v1, v2;
        cin >> v1 >> v2;
        b.push_back(make_pair(v1 - 1, v2 - 1));
    }
    
    check_transaction_requirements_invariant(a, vector<int>(n, -1), n); // Initial transaction requirement check

    int i = 0;
    while (!can(i)) {
        check_days_invariant(i); // Check number of days with sales
        i++;
    }
    cout << i + 1;
    return 0;
}
```

### Explanation of Integration

- **Day Check**: The check for the number of days (`d1`) is placed inside the loop in `main`, ensuring that the program doesn't progress into impractical computational territory.
- **Sales Conditions Check**: The complexity of sales conditions is checked every time the `can` function sets up offers for computation.
- **Transaction Requirements Check**: This is checked initially once the input is processed and before the main loop begins, to catch high transaction demands without sales.

These checks help ensure that the program can detect when it might run into performance issues, aiding any fuzzer or developer working on optimization.

