system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Igor is in the museum and he wants to see as many pictures as possible.

Museum can be represented as a rectangular field of n × m cells. Each cell is either empty or impassable. Empty cells are marked with '.', impassable cells are marked with '*'. Every two adjacent cells of different types (one empty and one impassable) are divided by a wall containing one picture.

At the beginning Igor is in some empty cell. At every moment he can move to any empty cell that share a side with the current one.

For several starting positions you should calculate the maximum number of pictures that Igor can see. Igor is able to see the picture only if he is in the cell adjacent to the wall with this picture. Igor have a lot of time, so he will examine every picture he can see.

Input

First line of the input contains three integers n, m and k (3 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n·m, 100 000)) — the museum dimensions and the number of starting positions to process.

Each of the next n lines contains m symbols '.', '*' — the description of the museum. It is guaranteed that all border cells are impassable, so Igor can't go out from the museum.

Each of the last k lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the row and the column of one of Igor's starting positions respectively. Rows are numbered from top to bottom, columns — from left to right. It is guaranteed that all starting positions are empty cells.

Output

Print k integers — the maximum number of pictures, that Igor can see if he starts in corresponding position.

Examples

Input

5 6 3
******
*..*.*
******
*....*
******
2 2
2 5
4 3


Output

6
4
10


Input

4 4 1
****
*..*
*.**
****
3 2


Output

8

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
char graph[1005][1005];
int cc[1005][1005];
int dx[4] = {0, 0, -1, 1};
int dy[4] = {1, -1, 0, 0};
bool visited[1005][1005];
vector<pair<int, int> > curr;
int dfs(int i, int j) {
  if (graph[i][j] == '*' || visited[i][j]) return 0;
  visited[i][j] = true;
  int count = 0;
  curr.push_back(make_pair(i, j));
  for (int idx = 0; idx < 4; ++idx) {
    if (graph[i + dx[idx]][j + dy[idx]] == '*')
      count++;
    else if (graph[i + dx[idx]][j + dy[idx]] == '.')
      count += dfs(i + dx[idx], j + dy[idx]);
  }
  return count;
}
int main() {
  int n, m, k;
  cin >> n >> m >> k;
  for (int i = 0; i < n; ++i)
    for (int j = 0; j < m; ++j) cin >> graph[i][j];
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      if (cc[i][j] != 0) continue;
      int tot = dfs(i, j);
      for (int k = 0; k < curr.size(); ++k) {
        cc[curr[k].first][curr[k].second] = tot;
      }
      curr.clear();
    }
  }
  while (k--) {
    int a, b;
    cin >> a >> b;
    cout << cc[a - 1][b - 1] << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 10 50
**********
*......***
***..**..*
***....***
**..***..*
**..**.*.*
*****..***
*.***..***
*..****.**
**********
5 9
5 9
7 7
6 4
6 7
8 7
6 7
9 2
3 9
9 2
4 7
4 6
2 5
9 2
7 7
5 8
8 7
8 6
7 7
5 9
8 7
3 8
5 8
5 9
9 8
9 3
8 7
5 9
9 2
9 8
9 3
3 8
9 2
8 6
2 4
6 9
6 3
9 3
3 9
9 8
4 5
8 6
3 4
5 9
8 7
5 8
6 9
8 2
3 9
3 9


(G.2) Fast Input

3 10 10
**********
***.*.*..*
**********
2 6
2 6
2 9
2 9
2 4
2 8
2 6
2 6
2 4
2 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
char graph[1005][1005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int cc[1005][1005]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int dx[4] = {0, 0, -1, 1}; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int dy[4] = {1, -1, 0, 0}; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
bool visited[1005][1005]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int> > curr; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int dfs(int i, int j) { /* line 9 slow_hit_count: 132, fast_hit_count: 31 */
  if (graph[i][j] == '*' || visited[i][j]) return 0; /* line 10 slow_hit_count: 132, fast_hit_count: 31 */
  visited[i][j] = true; /* line 11 slow_hit_count: 30, fast_hit_count: 4 */
  int count = 0; /* line 12 slow_hit_count: 30, fast_hit_count: 4 */
  curr.push_back(make_pair(i, j)); /* line 13 slow_hit_count: 30, fast_hit_count: 4 */
  for (int idx = 0; idx < 4; ++idx) { /* line 14 slow_hit_count: 150, fast_hit_count: 20 */
    if (graph[i + dx[idx]][j + dy[idx]] == '*') /* line 15 slow_hit_count: 120, fast_hit_count: 16 */
      count++; /* line 16 slow_hit_count: 64, fast_hit_count: 14 */
    else if (graph[i + dx[idx]][j + dy[idx]] == '.') /* line 17 slow_hit_count: 56, fast_hit_count: 2 */
      count += dfs(i + dx[idx], j + dy[idx]); /* line 18 slow_hit_count: 56, fast_hit_count: 2 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return count; /* line 20 slow_hit_count: 30, fast_hit_count: 4 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, k; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m >> k; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) /* line 25 slow_hit_count: 11, fast_hit_count: 4 */
    for (int j = 0; j < m; ++j) cin >> graph[i][j]; /* line 26 slow_hit_count: 110, fast_hit_count: 33 */
  for (int i = 0; i < n; ++i) { /* line 27 slow_hit_count: 11, fast_hit_count: 4 */
    for (int j = 0; j < m; ++j) { /* line 28 slow_hit_count: 110, fast_hit_count: 33 */
      if (cc[i][j] != 0) continue; /* line 29 slow_hit_count: 100, fast_hit_count: 30 */
      int tot = dfs(i, j); /* line 30 slow_hit_count: 76, fast_hit_count: 29 */
      for (int k = 0; k < curr.size(); ++k) { /* line 31 slow_hit_count: 106, fast_hit_count: 33 */
        cc[curr[k].first][curr[k].second] = tot; /* line 32 slow_hit_count: 30, fast_hit_count: 4 */
      } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      curr.clear(); /* line 34 slow_hit_count: 76, fast_hit_count: 29 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  while (k--) { /* line 37 slow_hit_count: 51, fast_hit_count: 11 */
    int a, b; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a >> b; /* line 39 slow_hit_count: 50, fast_hit_count: 10 */
    cout << cc[a - 1][b - 1] << endl; /* line 40 slow_hit_count: 50, fast_hit_count: 10 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided hit counts and the code, let's analyze the slow and fast runs to identify the performance bottlenecks and derive performance-characterizing invariants.

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **DFS Function (`dfs`) Call Frequency:**
   - The `dfs` function is called 132 times in the slow run compared to 31 times in the fast run. This indicates a significant difference in the number of recursive explorations done for the slow input.
   
2. **DFS Exploration Depth:**
   - The lines within the `dfs` function indicate higher recursions or deeper exploration for the slow input (`visited[i][j] = true;` hit 30 times in the slow input vs. 4 times in the fast one).
   - The recursive call `count += dfs(i + dx[idx], j + dy[idx]);` is hit 56 times for the slow input and only 2 times for the fast input, indicating more extensive exploration in the slow case.

3. **Graph Traversal (`main` function):**
   - The check `if (cc[i][j] != 0) continue;` is hit much more in the fast input (30 times) compared to the slow one (100 times), indicating that more cells are processed in the slow input as new components.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the analysis, here are natural language performance invariants that describe the conditions under which the program may slow down:

1. **Invariant 1: Extensive Exploration from Multiple Starting Points**
   - "If the DFS function is called frequently from multiple starting points, particularly when exploring large connected components of empty cells, the program may experience slowdowns. This condition is likely when the number of starting positions (`k`) is high, and the museum has large open areas."

2. **Invariant 2: Depth of DFS Exploration**
   - "If the DFS exploration frequently leads to deep recursive calls, especially when traversing expansive sections of connected empty cells, the performance may degrade. This is particularly true if the empty paths form complex or large regions within the n x m grid."

3. **Invariant 3: High Recursion due to Adjacency Complexity**
   - "When empty cells are densely packed around impassable areas, leading to high recursion on walls, it potentially increases the DFS recursion. This results in significant computational effort being spent on counting pictures on these walls, especially in grids with intricate patterns of '.' and '*' cells."

These invariants highlight the conditions that lead to high computational overhead in the given C program, focusing on recursive DFS calls and extensive grid exploration. They abstract specific input patterns into broader categories that can help identify performance issues in similar future scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Igor is in the museum and he wants to see as many pictures as possible.

Museum can be represented as a rectangular field of n × m cells. Each cell is either empty or impassable. Empty cells are marked with '.', impassable cells are marked with '*'. Every two adjacent cells of different types (one empty and one impassable) are divided by a wall containing one picture.

At the beginning Igor is in some empty cell. At every moment he can move to any empty cell that share a side with the current one.

For several starting positions you should calculate the maximum number of pictures that Igor can see. Igor is able to see the picture only if he is in the cell adjacent to the wall with this picture. Igor have a lot of time, so he will examine every picture he can see.

Input

First line of the input contains three integers n, m and k (3 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n·m, 100 000)) — the museum dimensions and the number of starting positions to process.

Each of the next n lines contains m symbols '.', '*' — the description of the museum. It is guaranteed that all border cells are impassable, so Igor can't go out from the museum.

Each of the last k lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the row and the column of one of Igor's starting positions respectively. Rows are numbered from top to bottom, columns — from left to right. It is guaranteed that all starting positions are empty cells.

Output

Print k integers — the maximum number of pictures, that Igor can see if he starts in corresponding position.

Examples

Input

5 6 3
******
*..*.*
******
*....*
******
2 2
2 5
4 3


Output

6
4
10


Input

4 4 1
****
*..*
*.**
****
3 2


Output

8

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants as C++ Code

Based on the natural language invariants identified earlier, here are the corresponding C++ runtime checks:

1. **Invariant 1: Extensive Exploration from Multiple Starting Points**

```cpp
void check_multistart_invariant(int numDFSCalls, int k) {
    if (numDFSCalls > 100 && k > 20) {
        cerr << "Warning: Performance bottleneck condition triggered - Extensive DFS exploration from multiple starting points!" << endl;
        abort();
    }
}
```

2. **Invariant 2: Depth of DFS Exploration**

```cpp
void check_dfs_depth_invariant(int recursiveCalls) {
    if (recursiveCalls > 50) {
        cerr << "Warning: Performance bottleneck condition triggered - Deep DFS exploration!" << endl;
        abort();
    }
}
```

3. **Invariant 3: High Recursion due to Adjacency Complexity**

```cpp
void check_adjacency_complexity_invariant(int recursionDepth, int branchFactor) {
    if (recursionDepth > 10 && branchFactor > 3) {
        cerr << "Warning: Performance bottleneck condition triggered - High recursion due to adjacency complexity!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original C++ Program

Now, integrate these runtime checks into the program at appropriate locations:

```cpp
#include <bits/stdc++.h>
using namespace std;

char graph[1005][1005];
int cc[1005][1005];
int dx[4] = {0, 0, -1, 1};
int dy[4] = {1, -1, 0, 0};
bool visited[1005][1005];
vector<pair<int, int>> curr;

int dfs(int i, int j) {
    if (graph[i][j] == '*' || visited[i][j]) return 0;
    visited[i][j] = true;
    int count = 0;
    curr.push_back(make_pair(i, j));
    
    int localRecursionDepth = 0; // Track depth of current DFS call
    int localBranchFactor = 0; // Track branches taken

    for (int idx = 0; idx < 4; ++idx) {
        if (graph[i + dx[idx]][j + dy[idx]] == '*')
            count++;
        else if (graph[i + dx[idx]][j + dy[idx]] == '.') {
            localBranchFactor++;
            count += dfs(i + dx[idx], j + dy[idx]);
            localRecursionDepth++;
        }
    }

    // Check adjacency complexity condition
    check_adjacency_complexity_invariant(localRecursionDepth, localBranchFactor);

    return count;
}

int main() {
    int n, m, k;
    cin >> n >> m >> k;

    for (int i = 0; i < n; ++i)
        for (int j = 0; j < m; ++j) cin >> graph[i][j];

    int totalDFSCalls = 0; // Track number of DFS calls

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (cc[i][j] != 0) continue;

            int recursiveCalls = 0; // Track calls for each DFS component
            int tot = dfs(i, j);
            recursiveCalls++;

            // Check DFS depth condition
            check_dfs_depth_invariant(recursiveCalls);

            for (int k = 0; k < curr.size(); ++k) {
                cc[curr[k].first][curr[k].second] = tot;
            }
            curr.clear();

            totalDFSCalls++;
        }
    }

    // Check multi-start condition
    check_multistart_invariant(totalDFSCalls, k);

    while (k--) {
        int a, b;
        cin >> a >> b;
        cout << cc[a - 1][b - 1] << endl;
    }

    return 0;
}
```

### Explanation of Integration

1. **Invariant 1 Check**: The total number of DFS calls is tracked by `totalDFSCalls`, and this is checked after the graph traversal is complete, comparing it with the number of starting positions `k`.

2. **Invariant 2 Check**: For each component of DFS, the `recursiveCalls` variable is used to check if the depth of exploration becomes too high.

3. **Invariant 3 Check**: During each DFS call, local recursion depth and branch factor are tracked and checked to identify high recursion and branching due to adjacency complexity.

These checks are placed at logical points in the execution flow to avoid placing them in tight loops, ensuring minimal overhead while still detecting potential performance bottlenecks effectively.

