system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Igor is in the museum and he wants to see as many pictures as possible.

Museum can be represented as a rectangular field of n × m cells. Each cell is either empty or impassable. Empty cells are marked with '.', impassable cells are marked with '*'. Every two adjacent cells of different types (one empty and one impassable) are divided by a wall containing one picture.

At the beginning Igor is in some empty cell. At every moment he can move to any empty cell that share a side with the current one.

For several starting positions you should calculate the maximum number of pictures that Igor can see. Igor is able to see the picture only if he is in the cell adjacent to the wall with this picture. Igor have a lot of time, so he will examine every picture he can see.

Input

First line of the input contains three integers n, m and k (3 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n·m, 100 000)) — the museum dimensions and the number of starting positions to process.

Each of the next n lines contains m symbols '.', '*' — the description of the museum. It is guaranteed that all border cells are impassable, so Igor can't go out from the museum.

Each of the last k lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the row and the column of one of Igor's starting positions respectively. Rows are numbered from top to bottom, columns — from left to right. It is guaranteed that all starting positions are empty cells.

Output

Print k integers — the maximum number of pictures, that Igor can see if he starts in corresponding position.

Examples

Input

5 6 3
******
*..*.*
******
*....*
******
2 2
2 5
4 3


Output

6
4
10


Input

4 4 1
****
*..*
*.**
****
3 2


Output

8

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int dx[] = {-1, 0, 1, 0}, dy[] = {0, -1, 0, 1};
int belong[1005][1005];
int n, m, k;
char g[1005][1005];
int cnt;
int ans[2000000];
void dfs(int x, int y) {
  belong[x][y] = cnt;
  int nx, ny;
  for (int i = 0; i < 4; i++) {
    nx = x + dx[i], ny = y + dy[i];
    if (nx < 1 || nx > n || ny < 1 || ny > m || g[nx][ny] == '*' ||
        belong[nx][ny])
      continue;
    dfs(nx, ny);
  }
}
int calc(int x, int y) {
  if (!belong[x][y]) return 0;
  int tmp = 0;
  int nx, ny;
  for (int i = 0; i < 4; i++) {
    nx = x + dx[i], ny = y + dy[i];
    if (nx < 1 || nx > n || ny < 1 || ny > m || belong[nx][ny]) continue;
    tmp++;
  }
  return tmp;
}
int main() {
  cin >> n >> m >> k;
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= m; j++) cin >> g[i][j];
  }
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= m; j++)
      if (g[i][j] != '*' && !belong[i][j]) ++cnt, dfs(i, j);
  }
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= m; j++) {
      ans[belong[i][j]] += calc(i, j);
    }
  }
  int x, y;
  while (k--) {
    cin >> x >> y;
    cout << ans[belong[x][y]] << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 10 50
**********
*......***
***..**..*
***....***
**..***..*
**..**.*.*
*****..***
*.***..***
*..****.**
**********
5 9
5 9
7 7
6 7
6 7
8 7
6 7
9 2
3 9
9 2
4 7
2 6
2 5
9 2
7 7
5 8
8 7
8 6
7 7
5 9
8 7
3 8
5 8
5 9
9 8
9 3
8 7
5 9
9 2
9 8
9 3
3 8
9 2
8 6
2 4
6 9
6 3
9 8
3 9
9 2
4 5
8 6
3 4
5 9
8 7
5 8
6 9
8 2
3 9
6 9


(G.2) Fast Input

3 10 10
**********
***.*.*..*
**********
2 6
2 6
2 9
2 9
2 4
2 8
2 6
2 6
2 4
2 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int dx[] = {-1, 0, 1, 0}, dy[] = {0, -1, 0, 1}; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int belong[1005][1005]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, k; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
char g[1005][1005]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int cnt; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int ans[2000000]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(int x, int y) { /* line 9 slow_hit_count: 30, fast_hit_count: 4 */
  belong[x][y] = cnt; /* line 10 slow_hit_count: 30, fast_hit_count: 4 */
  int nx, ny; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < 4; i++) { /* line 12 slow_hit_count: 150, fast_hit_count: 20 */
    nx = x + dx[i], ny = y + dy[i]; /* line 13 slow_hit_count: 120, fast_hit_count: 16 */
    if (nx < 1 || nx > n || ny < 1 || ny > m || g[nx][ny] == '*' || /* line 14 slow_hit_count: 120, fast_hit_count: 16 */
        belong[nx][ny]) /* line 15 slow_hit_count: 56, fast_hit_count: 2 */
      continue; /* line 16 slow_hit_count: 96, fast_hit_count: 15 */
    dfs(nx, ny); /* line 17 slow_hit_count: 24, fast_hit_count: 1 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 30, fast_hit_count: 4 */
int calc(int x, int y) { /* line 20 slow_hit_count: 100, fast_hit_count: 30 */
  if (!belong[x][y]) return 0; /* line 21 slow_hit_count: 100, fast_hit_count: 30 */
  int tmp = 0; /* line 22 slow_hit_count: 30, fast_hit_count: 4 */
  int nx, ny; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < 4; i++) { /* line 24 slow_hit_count: 150, fast_hit_count: 20 */
    nx = x + dx[i], ny = y + dy[i]; /* line 25 slow_hit_count: 120, fast_hit_count: 16 */
    if (nx < 1 || nx > n || ny < 1 || ny > m || belong[nx][ny]) continue; /* line 26 slow_hit_count: 120, fast_hit_count: 16 */
    tmp++; /* line 27 slow_hit_count: 64, fast_hit_count: 14 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  return tmp; /* line 29 slow_hit_count: 30, fast_hit_count: 4 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> k; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 33 slow_hit_count: 11, fast_hit_count: 4 */
    for (int j = 1; j <= m; j++) cin >> g[i][j]; /* line 34 slow_hit_count: 110, fast_hit_count: 33 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 36 slow_hit_count: 11, fast_hit_count: 4 */
    for (int j = 1; j <= m; j++) /* line 37 slow_hit_count: 110, fast_hit_count: 33 */
      if (g[i][j] != '*' && !belong[i][j]) ++cnt, dfs(i, j); /* line 38 slow_hit_count: 100, fast_hit_count: 30 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 40 slow_hit_count: 11, fast_hit_count: 4 */
    for (int j = 1; j <= m; j++) { /* line 41 slow_hit_count: 110, fast_hit_count: 33 */
      ans[belong[i][j]] += calc(i, j); /* line 42 slow_hit_count: 100, fast_hit_count: 30 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  int x, y; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  while (k--) { /* line 46 slow_hit_count: 51, fast_hit_count: 11 */
    cin >> x >> y; /* line 47 slow_hit_count: 50, fast_hit_count: 10 */
    cout << ans[belong[x][y]] << endl; /* line 48 slow_hit_count: 50, fast_hit_count: 10 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 51 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance characteristics of the given C program, let's analyze the hit count data for slow and fast inputs and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Function `dfs` (Lines 9-19):**
   - The `dfs` function shows a significantly higher hit count for the slow input (30 vs. 4 calls, with 150 vs. 20 iterations of the loop). This suggests that the function is recursively visiting many more nodes in the slow case, indicating a large connected component of empty cells.

2. **Function `calc` (Lines 20-30):**
   - The `calc` function is called more frequently in the slow run (100 vs. 30 times). This indicates more calculations per cell, likely due to larger or more numerous components.

3. **Nested Loops in `main` (Lines 36-44):**
   - The loops where `dfs` and `calc` are invoked (lines 38 and 42) display higher hit counts, suggesting larger components or more empty cell areas in the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following natural language performance invariants:

1. **Large Connected Components:**
   - **Invariant:** "If the museum contains large connected areas of empty cells ('.'), requiring extensive traversal by the `dfs` function, the program will slow down."
   - **Explanation:** This is likely because `dfs` has to process each reachable cell within a component, and larger components necessitate more recursive calls.

2. **Frequent Calculations for Picture Visibility:**
   - **Invariant:** "When there are numerous empty cells adjacent to impassable cells ('*'), resulting in frequent calculations by the `calc` function for picture counting, performance may degrade."
   - **Explanation:** The `calc` function is invoked for every empty cell, and with more adjacent cells or complex boundaries, this task becomes computationally expensive.

3. **High Density of Starting Positions:**
   - **Invariant:** "If the number of starting positions `k` is high relative to the number of unique connected components, leading to repetitive calculations, the execution time increases."
   - **Explanation:** Each starting position requires recalculating the maximum number of pictures for its component. Redundant calculations for the same component across multiple starting positions can cause inefficiency.

By addressing these invariants, potential performance bottlenecks can be identified and optimized, improving the program's runtime for future inputs with similar characteristics.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Igor is in the museum and he wants to see as many pictures as possible.

Museum can be represented as a rectangular field of n × m cells. Each cell is either empty or impassable. Empty cells are marked with '.', impassable cells are marked with '*'. Every two adjacent cells of different types (one empty and one impassable) are divided by a wall containing one picture.

At the beginning Igor is in some empty cell. At every moment he can move to any empty cell that share a side with the current one.

For several starting positions you should calculate the maximum number of pictures that Igor can see. Igor is able to see the picture only if he is in the cell adjacent to the wall with this picture. Igor have a lot of time, so he will examine every picture he can see.

Input

First line of the input contains three integers n, m and k (3 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n·m, 100 000)) — the museum dimensions and the number of starting positions to process.

Each of the next n lines contains m symbols '.', '*' — the description of the museum. It is guaranteed that all border cells are impassable, so Igor can't go out from the museum.

Each of the last k lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the row and the column of one of Igor's starting positions respectively. Rows are numbered from top to bottom, columns — from left to right. It is guaranteed that all starting positions are empty cells.

Output

Print k integers — the maximum number of pictures, that Igor can see if he starts in corresponding position.

Examples

Input

5 6 3
******
*..*.*
******
*....*
******
2 2
2 5
4 3


Output

6
4
10


Input

4 4 1
****
*..*
*.**
****
3 2


Output

8

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance Checkers in C++

Here are the C++ code snippets implementing the performance-characterizing invariants derived earlier:

```cpp
// Check for large connected components
void check_large_component_invariant(int componentSize, int threshold = 500) {
    if (componentSize > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - large connected component detected!" << endl;
        abort();
    }
}

// Check for frequent calculations in calc function
void check_frequent_calc_invariant(int calcCount, int threshold = 1000) {
    if (calcCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent calculations detected!" << endl;
        abort();
    }
}

// Check for high density of starting positions
void check_starting_positions_invariant(int k, int componentCount) {
    if ((k > 0.8 * n * m) && (k > componentCount)) {
        cerr << "Warning: Performance bottleneck condition triggered - high density of starting positions!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Program

Below is the provided C++ code with checker code integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;

int dx[] = {-1, 0, 1, 0}, dy[] = {0, -1, 0, 1};
int belong[1005][1005];
int n, m, k;
char g[1005][1005];
int cnt;
int ans[2000000];

// Check for large connected components
void check_large_component_invariant(int componentSize, int threshold = 500) {
    if (componentSize > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - large connected component detected!" << endl;
        abort();
    }
}

// Check for frequent calculations in calc function
void check_frequent_calc_invariant(int calcCount, int threshold = 1000) {
    if (calcCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent calculations detected!" << endl;
        abort();
    }
}

// Check for high density of starting positions
void check_starting_positions_invariant(int k, int componentCount) {
    if ((k > 0.8 * n * m) && (k > componentCount)) {
        cerr << "Warning: Performance bottleneck condition triggered - high density of starting positions!" << endl;
        abort();
    }
}

void dfs(int x, int y) {
    belong[x][y] = cnt;
    int nx, ny;
    for (int i = 0; i < 4; i++) {
        nx = x + dx[i], ny = y + dy[i];
        if (nx < 1 || nx > n || ny < 1 || ny > m || g[nx][ny] == '*' ||
            belong[nx][ny])
            continue;
        dfs(nx, ny);
    }
}

int calc(int x, int y) {
    if (!belong[x][y]) return 0;
    int tmp = 0;
    int nx, ny;
    for (int i = 0; i < 4; i++) {
        nx = x + dx[i], ny = y + dy[i];
        if (nx < 1 || nx > n || ny < 1 || ny > m || belong[nx][ny]) continue;
        tmp++;
    }
    return tmp;
}

int main() {
    cin >> n >> m >> k;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) cin >> g[i][j];
    }

    int componentCount = 0;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if (g[i][j] != '*' && !belong[i][j]) {
                ++cnt;
                dfs(i, j);

                // Check for large connected component size
                check_large_component_invariant(cnt);
                componentCount++;
            }
        }
    }

    int calcCount = 0;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            ans[belong[i][j]] += calc(i, j);
            calcCount++;
        }
    }

    // Check for frequent calculations
    check_frequent_calc_invariant(calcCount);

    // Check for high density of starting positions
    check_starting_positions_invariant(k, componentCount);

    int x, y;
    while (k--) {
        cin >> x >> y;
        cout << ans[belong[x][y]] << endl;
    }
    return 0;
}
```

In this integration, the checks are strategically placed:
- After the `dfs` function is called to assess the size of the connected component.
- After the `calc` function loop to check the frequency of calculations.
- After reading the input values to validate the density of starting positions against the number of components. 

These placements ensure that the checks are effective and do not introduce significant overhead into the main loop operations.

