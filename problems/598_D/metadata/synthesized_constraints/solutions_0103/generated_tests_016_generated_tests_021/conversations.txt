system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Igor is in the museum and he wants to see as many pictures as possible.

Museum can be represented as a rectangular field of n × m cells. Each cell is either empty or impassable. Empty cells are marked with '.', impassable cells are marked with '*'. Every two adjacent cells of different types (one empty and one impassable) are divided by a wall containing one picture.

At the beginning Igor is in some empty cell. At every moment he can move to any empty cell that share a side with the current one.

For several starting positions you should calculate the maximum number of pictures that Igor can see. Igor is able to see the picture only if he is in the cell adjacent to the wall with this picture. Igor have a lot of time, so he will examine every picture he can see.

Input

First line of the input contains three integers n, m and k (3 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n·m, 100 000)) — the museum dimensions and the number of starting positions to process.

Each of the next n lines contains m symbols '.', '*' — the description of the museum. It is guaranteed that all border cells are impassable, so Igor can't go out from the museum.

Each of the last k lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the row and the column of one of Igor's starting positions respectively. Rows are numbered from top to bottom, columns — from left to right. It is guaranteed that all starting positions are empty cells.

Output

Print k integers — the maximum number of pictures, that Igor can see if he starts in corresponding position.

Examples

Input

5 6 3
******
*..*.*
******
*....*
******
2 2
2 5
4 3


Output

6
4
10


Input

4 4 1
****
*..*
*.**
****
3 2


Output

8

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
vector<vector<char>> field;
vector<vector<int>> points;
int is_wall(int i, int j) { return field[i][j] == '*' ? 1 : 0; }
int forward(int i, int j) {
  if (field[i][j] == '*') return 1;
  if (points[i][j] == -1) return 0;
  points[i][j] = -1;
  int pts = forward(i - 1, j) + forward(i + 1, j) + forward(i, j - 1) +
            forward(i, j + 1);
  return pts;
}
void back(int i, int j, int pts) {
  if (field[i][j] == '*') return;
  if (points[i][j] > 0) return;
  points[i][j] = pts;
  back(i - 1, j, pts);
  back(i + 1, j, pts);
  back(i, j - 1, pts);
  back(i, j + 1, pts);
}
int calc_cell_points(int i, int j) {
  if (points[i][j] > 0) {
    return points[i][j];
  }
  int pts = forward(i, j);
  back(i, j, pts);
  return pts;
}
int main() {
  int n, m, k;
  cin >> n >> m >> k;
  field = vector<vector<char>>(n, vector<char>(m));
  points = vector<vector<int>>(n, vector<int>(m));
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      cin >> field[i][j];
    }
  }
  for (int i = 0; i < k; i++) {
    int x, y;
    cin >> x >> y;
    cout << calc_cell_points(x - 1, y - 1) << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 10 50
**********
*......***
***..**..*
***....***
**..***..*
**..**.*.*
*****..***
*.***..***
*..****.**
**********
5 9
5 9
7 7
6 7
6 7
8 7
6 7
9 2
3 9
9 2
4 7
2 6
2 5
9 2
7 7
5 8
8 7
8 6
7 7
5 9
8 7
3 8
5 8
5 9
9 8
9 3
8 7
5 9
9 2
9 8
9 3
3 8
9 2
8 6
2 4
6 9
6 3
9 8
3 9
9 2
4 5
8 6
3 4
5 9
8 7
5 8
6 9
8 2
3 9
6 9


(G.2) Fast Input

3 10 10
**********
***.*.*..*
**********
2 6
2 6
2 9
2 9
2 4
2 8
2 6
2 6
2 4
2 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<char>> field; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<int>> points; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int is_wall(int i, int j) { return field[i][j] == '*' ? 1 : 0; } /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int forward(int i, int j) { /* line 6 slow_hit_count: 126, fast_hit_count: 19 */
  if (field[i][j] == '*') return 1; /* line 7 slow_hit_count: 126, fast_hit_count: 19 */
  if (points[i][j] == -1) return 0; /* line 8 slow_hit_count: 62, fast_hit_count: 5 */
  points[i][j] = -1; /* line 9 slow_hit_count: 30, fast_hit_count: 4 */
  int pts = forward(i - 1, j) + forward(i + 1, j) + forward(i, j - 1) + /* line 10 slow_hit_count: 30, fast_hit_count: 4 */
            forward(i, j + 1); /* line 11 slow_hit_count: 30, fast_hit_count: 4 */
  return pts; /* line 12 slow_hit_count: 30, fast_hit_count: 4 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
void back(int i, int j, int pts) { /* line 14 slow_hit_count: 126, fast_hit_count: 19 */
  if (field[i][j] == '*') return; /* line 15 slow_hit_count: 126, fast_hit_count: 19 */
  if (points[i][j] > 0) return; /* line 16 slow_hit_count: 62, fast_hit_count: 5 */
  points[i][j] = pts; /* line 17 slow_hit_count: 30, fast_hit_count: 4 */
  back(i - 1, j, pts); /* line 18 slow_hit_count: 30, fast_hit_count: 4 */
  back(i + 1, j, pts); /* line 19 slow_hit_count: 30, fast_hit_count: 4 */
  back(i, j - 1, pts); /* line 20 slow_hit_count: 30, fast_hit_count: 4 */
  back(i, j + 1, pts); /* line 21 slow_hit_count: 30, fast_hit_count: 4 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
int calc_cell_points(int i, int j) { /* line 23 slow_hit_count: 50, fast_hit_count: 10 */
  if (points[i][j] > 0) { /* line 24 slow_hit_count: 50, fast_hit_count: 10 */
    return points[i][j]; /* line 25 slow_hit_count: 44, fast_hit_count: 7 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  int pts = forward(i, j); /* line 27 slow_hit_count: 6, fast_hit_count: 3 */
  back(i, j, pts); /* line 28 slow_hit_count: 6, fast_hit_count: 3 */
  return pts; /* line 29 slow_hit_count: 6, fast_hit_count: 3 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, k; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m >> k; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  field = vector<vector<char>>(n, vector<char>(m)); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  points = vector<vector<int>>(n, vector<int>(m)); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 36 slow_hit_count: 11, fast_hit_count: 4 */
    for (int j = 0; j < m; j++) { /* line 37 slow_hit_count: 110, fast_hit_count: 33 */
      cin >> field[i][j]; /* line 38 slow_hit_count: 100, fast_hit_count: 30 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < k; i++) { /* line 41 slow_hit_count: 51, fast_hit_count: 11 */
    int x, y; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> y; /* line 43 slow_hit_count: 50, fast_hit_count: 10 */
    cout << calc_cell_points(x - 1, y - 1) << endl; /* line 44 slow_hit_count: 50, fast_hit_count: 10 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the provided C program, let's first analyze the line-level hit counts, focusing on the lines with significantly different hit counts in the slow and fast runs. Then, I'll derive performance-characterizing invariants.

### Phase 1: Identifying Expensive or Inefficient Code Segments

#### Analysis of Line-Level Hit Counts:

1. **`forward` Function**:
   - Lines 6-12 in the `forward` function have a significantly higher hit count in the slow input compared to the fast input. This suggests that the recursive calls to `forward` are a major factor in the slowdown.
   - The recursive calls on lines 10-11 are particularly noteworthy, as they indicate repeated traversal of the field, likely leading to deep recursion or excessive computation.

2. **`back` Function**:
   - Lines 14-21 also show higher hits for the slow input, particularly the recursive calls on lines 18-21.
   - Similar to `forward`, this indicates potential inefficiency due to repeated operations on the same data structure.

3. **`calc_cell_points` Function**:
   - This function has a higher invocation count in the slow input, linked to repeatedly calculating points for starting positions.
   - The combination of `forward` and `back` functions suggests that overlapping computations are being redundantly performed multiple times.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the analysis, the following natural language performance invariants can be proposed:

1. **Excessive Recursion Invariant**:
   - **Description**: "If a starting position leads to a recursive exploration of empty cells that cover a large part of the museum, the program may slow down significantly. This is exacerbated if many starting positions fall within the same large connected area of empty cells."
   - **Trigger**: This invariant is triggered when the recursive exploration of connected empty cells (`'.'`) results in a deep or broad recursion, particularly affecting performance when the recursion repeatedly explores large connected components for multiple starting positions.

2. **Redundant Calculation Invariant**:
   - **Description**: "If multiple starting positions are within the same connected region of empty cells, redundant calculations may occur, leading to performance degradation. Optimizing to avoid recalculating the same connected region's picture count can improve performance."
   - **Trigger**: When starting positions are located within the same connected component of empty cells, the `calc_cell_points` function recalculates the same area multiple times.

3. **Large Connected Component Invariant**:
   - **Description**: "If the museum contains a very large connected component of empty cells, the recursive operations for measuring pictures can become expensive. The likelihood of slowdown increases when recursive functions explore large empty areas."
   - **Trigger**: This is triggered by the size and complexity of connected empty areas, especially when these require extensive recursion to determine the number of visible pictures.

### Recommendations:

- **Memoization**: Implement memoization for `calc_cell_points` to store results for connected components once calculated, avoiding repeated computation for the same region.
- **Avoid Redundancy**: Track which areas have been fully explored and avoid recalculating them for subsequent starting positions.
- **Limit Recursion**: Consider iterative approaches to reduce the overhead associated with deep recursion, which can be particularly problematic in large connected regions.

These invariants and recommendations aim to abstractly characterize and mitigate the performance issues observed in the slow input case, without relying on specific numeric values from the inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Igor is in the museum and he wants to see as many pictures as possible.

Museum can be represented as a rectangular field of n × m cells. Each cell is either empty or impassable. Empty cells are marked with '.', impassable cells are marked with '*'. Every two adjacent cells of different types (one empty and one impassable) are divided by a wall containing one picture.

At the beginning Igor is in some empty cell. At every moment he can move to any empty cell that share a side with the current one.

For several starting positions you should calculate the maximum number of pictures that Igor can see. Igor is able to see the picture only if he is in the cell adjacent to the wall with this picture. Igor have a lot of time, so he will examine every picture he can see.

Input

First line of the input contains three integers n, m and k (3 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n·m, 100 000)) — the museum dimensions and the number of starting positions to process.

Each of the next n lines contains m symbols '.', '*' — the description of the museum. It is guaranteed that all border cells are impassable, so Igor can't go out from the museum.

Each of the last k lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the row and the column of one of Igor's starting positions respectively. Rows are numbered from top to bottom, columns — from left to right. It is guaranteed that all starting positions are empty cells.

Output

Print k integers — the maximum number of pictures, that Igor can see if he starts in corresponding position.

Examples

Input

5 6 3
******
*..*.*
******
*....*
******
2 2
2 5
4 3


Output

6
4
10


Input

4 4 1
****
*..*
*.**
****
3 2


Output

8

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants as Checkers in C++

Here are the C++ checker functions based on the previously derived performance-characterizing invariants:

1. **Excessive Recursion Invariant**: Checks if the recursion depth becomes too high or if large connected components are repeatedly explored.
2. **Redundant Calculation Invariant**: Ensures that areas already calculated aren't recalculated unnecessarily.

```cpp
#include <iostream>
#include <vector>
using namespace std;

// Checker for excessive recursion or large connected components
void check_excessive_recursion(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion or large connected component!" << endl;
        abort();
    }
}

// Checker for redundant calculation
void check_redundant_calculation(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - redundant calculation of the same area!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Program

Here is the modified C++ code with the integrated runtime checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

vector<vector<char>> field;
vector<vector<int>> points;

// Checkers for performance bottlenecks
void check_excessive_recursion(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion or large connected component!" << endl;
        abort();
    }
}

void check_redundant_calculation(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - redundant calculation of the same area!" << endl;
        abort();
    }
}

int is_wall(int i, int j) { return field[i][j] == '*' ? 1 : 0; }

int forward(int i, int j) {
    if (field[i][j] == '*') return 1;
    if (points[i][j] == -1) return 0;
    points[i][j] = -1;
    int pts = forward(i - 1, j) + forward(i + 1, j) +
              forward(i, j - 1) + forward(i, j + 1);

    // Check for excessive recursion using arbitrary threshold
    int max_recursion_depth = 3000; // Example threshold based on expected field size
    check_excessive_recursion(pts > max_recursion_depth);

    return pts;
}

void back(int i, int j, int pts) {
    if (field[i][j] == '*') return;
    if (points[i][j] > 0) return;
    points[i][j] = pts;
    back(i - 1, j, pts);
    back(i + 1, j, pts);
    back(i, j - 1, pts);
    back(i, j + 1, pts);
}

int calc_cell_points(int i, int j) {
    if (points[i][j] > 0) {
        return points[i][j];
    }

    // Check for redundant calculations
    int recalculation_threshold = 100; // Example threshold for repeated calculations
    check_redundant_calculation(points[i][j] == -1 && recalculation_threshold > 0);

    int pts = forward(i, j);
    back(i, j, pts);
    return pts;
}

int main() {
    int n, m, k;
    cin >> n >> m >> k;
    field = vector<vector<char>>(n, vector<char>(m));
    points = vector<vector<int>>(n, vector<int>(m));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> field[i][j];
        }
    }
    for (int i = 0; i < k; i++) {
        int x, y;
        cin >> x >> y;
        cout << calc_cell_points(x - 1, y - 1) << endl;
    }
    return 0;
}
```

### Explanation:

- **Excessive Recursion Check**: Integrated within the `forward` function, this check aborts if the recursive exploration depth exceeds a reasonable threshold, indicating a large connected component.
- **Redundant Calculation Check**: Placed in `calc_cell_points` to catch unnecessary recalculations for the same connected area.
- **Thresholds**: The thresholds (`max_recursion_depth` and `recalculation_threshold`) are chosen based on typical problem constraints (like maximum `n` and `m`) and can be tuned based on performance analysis.
  
This modified code will help identify performance bottlenecks during execution and assist in optimization efforts.

