system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Igor is in the museum and he wants to see as many pictures as possible.

Museum can be represented as a rectangular field of n × m cells. Each cell is either empty or impassable. Empty cells are marked with '.', impassable cells are marked with '*'. Every two adjacent cells of different types (one empty and one impassable) are divided by a wall containing one picture.

At the beginning Igor is in some empty cell. At every moment he can move to any empty cell that share a side with the current one.

For several starting positions you should calculate the maximum number of pictures that Igor can see. Igor is able to see the picture only if he is in the cell adjacent to the wall with this picture. Igor have a lot of time, so he will examine every picture he can see.

Input

First line of the input contains three integers n, m and k (3 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n·m, 100 000)) — the museum dimensions and the number of starting positions to process.

Each of the next n lines contains m symbols '.', '*' — the description of the museum. It is guaranteed that all border cells are impassable, so Igor can't go out from the museum.

Each of the last k lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the row and the column of one of Igor's starting positions respectively. Rows are numbered from top to bottom, columns — from left to right. It is guaranteed that all starting positions are empty cells.

Output

Print k integers — the maximum number of pictures, that Igor can see if he starts in corresponding position.

Examples

Input

5 6 3
******
*..*.*
******
*....*
******
2 2
2 5
4 3


Output

6
4
10


Input

4 4 1
****
*..*
*.**
****
3 2


Output

8

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
vector<vector<int>> arr;
int n, m, k, last_number = 1;
unordered_map<int, int> ans;
bool inside(int y, int x) {
  if (y < 0 || y >= n || x < 0 || x >= m) return 0;
  return 1;
}
int bfs(int y, int x) {
  int walls = 0;
  queue<pair<int, int>> q;
  q.push({y, x});
  while (!q.empty()) {
    y = q.front().first, x = q.front().second;
    q.pop();
    if (arr[y][x] != -1) continue;
    arr[y][x] = last_number;
    for (int dr : {-1, 0, 1}) {
      for (int dc : {-1, 0, 1}) {
        if (abs(dr) == abs(dc)) continue;
        int new_row = y + dr;
        int new_col = x + dc;
        if (inside(new_row, new_col) && arr[new_row][new_col] == 0)
          walls++;
        else if (inside(new_row, new_col) && arr[new_row][new_col] == -1)
          q.push({new_row, new_col});
      }
    }
  }
  ans[last_number] = walls;
  last_number++;
  return walls;
}
int main() {
  cin >> n >> m >> k;
  arr = vector<vector<int>>(n, vector<int>(m, -1));
  for (int i = 0; i < n; i++) {
    string x;
    cin >> x;
    for (int j = 0; j < m; j++)
      if (x[j] == '*') arr[i][j] = 0;
  }
  while (k--) {
    int y, x;
    cin >> y >> x;
    y--, x--;
    if (ans.find(arr[y][x]) != ans.end())
      cout << ans[arr[y][x]] << endl;
    else
      cout << bfs(y, x) << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 10 50
**********
*......***
***..**..*
***....***
**..***..*
**..**.*.*
*****..***
*.***..***
*..****.**
**********
5 9
5 9
7 7
6 4
6 7
8 7
6 7
9 2
3 9
9 2
4 7
2 6
2 5
9 2
7 7
5 8
8 7
8 6
7 7
6 9
8 7
3 8
5 8
5 9
9 8
9 3
8 7
5 9
9 2
9 8
9 3
3 8
9 2
8 6
2 4
6 9
6 3
9 8
3 9
9 8
4 5
8 6
3 4
5 9
8 7
5 8
6 9
8 2
3 9
3 9


(G.2) Fast Input

3 10 10
**********
***.*.*..*
**********
2 6
2 6
2 9
2 9
2 4
2 8
2 6
2 6
2 4
2 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<int>> arr; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, k, last_number = 1; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
unordered_map<int, int> ans; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool inside(int y, int x) { /* line 6 slow_hit_count: 176, fast_hit_count: 18 */
  if (y < 0 || y >= n || x < 0 || x >= m) return 0; /* line 7 slow_hit_count: 176, fast_hit_count: 18 */
  return 1; /* line 8 slow_hit_count: 176, fast_hit_count: 18 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int bfs(int y, int x) { /* line 10 slow_hit_count: 6, fast_hit_count: 3 */
  int walls = 0; /* line 11 slow_hit_count: 6, fast_hit_count: 3 */
  queue<pair<int, int>> q; /* line 12 slow_hit_count: 6, fast_hit_count: 3 */
  q.push({y, x}); /* line 13 slow_hit_count: 6, fast_hit_count: 3 */
  while (!q.empty()) { /* line 14 slow_hit_count: 40, fast_hit_count: 7 */
    y = q.front().first, x = q.front().second; /* line 15 slow_hit_count: 34, fast_hit_count: 4 */
    q.pop(); /* line 16 slow_hit_count: 34, fast_hit_count: 4 */
    if (arr[y][x] != -1) continue; /* line 17 slow_hit_count: 34, fast_hit_count: 4 */
    arr[y][x] = last_number; /* line 18 slow_hit_count: 30, fast_hit_count: 4 */
    for (int dr : {-1, 0, 1}) { /* line 19 slow_hit_count: 120, fast_hit_count: 16 */
      for (int dc : {-1, 0, 1}) { /* line 20 slow_hit_count: 360, fast_hit_count: 48 */
        if (abs(dr) == abs(dc)) continue; /* line 21 slow_hit_count: 270, fast_hit_count: 36 */
        int new_row = y + dr; /* line 22 slow_hit_count: 120, fast_hit_count: 16 */
        int new_col = x + dc; /* line 23 slow_hit_count: 120, fast_hit_count: 16 */
        if (inside(new_row, new_col) && arr[new_row][new_col] == 0) /* line 24 slow_hit_count: 120, fast_hit_count: 16 */
          walls++; /* line 25 slow_hit_count: 64, fast_hit_count: 14 */
        else if (inside(new_row, new_col) && arr[new_row][new_col] == -1) /* line 26 slow_hit_count: 56, fast_hit_count: 2 */
          q.push({new_row, new_col}); /* line 27 slow_hit_count: 28, fast_hit_count: 1 */
      } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  ans[last_number] = walls; /* line 31 slow_hit_count: 6, fast_hit_count: 3 */
  last_number++; /* line 32 slow_hit_count: 6, fast_hit_count: 3 */
  return walls; /* line 33 slow_hit_count: 12, fast_hit_count: 6 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> k; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  arr = vector<vector<int>>(n, vector<int>(m, -1)); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 38 slow_hit_count: 11, fast_hit_count: 4 */
    string x; /* line 39 slow_hit_count: 20, fast_hit_count: 6 */
    cin >> x; /* line 40 slow_hit_count: 10, fast_hit_count: 3 */
    for (int j = 0; j < m; j++) /* line 41 slow_hit_count: 110, fast_hit_count: 33 */
      if (x[j] == '*') arr[i][j] = 0; /* line 42 slow_hit_count: 100, fast_hit_count: 30 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  while (k--) { /* line 44 slow_hit_count: 51, fast_hit_count: 11 */
    int y, x; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> y >> x; /* line 46 slow_hit_count: 50, fast_hit_count: 10 */
    y--, x--; /* line 47 slow_hit_count: 50, fast_hit_count: 10 */
    if (ans.find(arr[y][x]) != ans.end()) /* line 48 slow_hit_count: 50, fast_hit_count: 10 */
      cout << ans[arr[y][x]] << endl; /* line 49 slow_hit_count: 44, fast_hit_count: 7 */
    else /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      cout << bfs(y, x) << endl; /* line 51 slow_hit_count: 6, fast_hit_count: 3 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the slow performance of the program, let's analyze the provided C code and hit count information. The program implements a breadth-first search (BFS) to count the number of pictures Igor can see starting from several positions in a museum grid.

### Phase 1: Identify Expensive or Inefficient Code Segments

**Key Observations:**
1. **BFS Function**: The `bfs` function is called less frequently in the fast input scenario (3 times) compared to the slow input (6 times), but within each call, significantly more operations are performed for the slow input.
2. **Queue Operations**: Lines related to queue operations within the BFS loop (`while (!q.empty())`) are hit much more in the slow scenario, suggesting the BFS explores a larger area in the grid.
3. **Neighbor Checks**: The nested loop checking neighbors (lines 19-27) is executed more often in the slow input, indicating more grid cells are processed or marked during BFS.
4. **Repeated BFS Calls**: Multiple BFS calls seem to overlap in their exploration due to shared regions of interest which causes repeated work.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the hit counts and understanding of the grid search algorithm, we can derive several performance-characterizing invariants:

1. **Dense Unexplored Regions**:
   - **Natural Language Description**: "When the starting positions are distributed such that they explore overlapping regions with significant portions of unexplored cells, the BFS will process large areas redundantly, slowing down the execution."
   - **Rationale**: This invariant captures the inefficiency when multiple starting points explore the same or adjacent regions repeatedly due to insufficient marking or caching mechanisms.

2. **High Connectivity Areas**:
   - **Natural Language Description**: "If there are large contiguous areas of empty cells ('*') surrounded densely by walls, the BFS may take longer to process as it explores larger connected components before hitting boundaries."
   - **Rationale**: Empty regions with multiple adjacent walls result in more queue operations and picture counting, thus increasing computational effort.

3. **Large Number of Starting Points**:
   - **Natural Language Description**: "If the number of starting positions is high, especially with significant overlap in their exploration areas, BFS might be invoked many times over similar paths, leading to redundant computations."
   - **Rationale**: A large `k` with overlapping regions leads to repeated BFS computations over areas already processed.

These invariants abstract the conditions under which the program experiences performance degradation, focusing on the structure and configuration of the input grid, rather than specific numeric values. They reflect realistic triggers given the constraints, such as `n, m <= 1000` and `k <= 100,000`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Igor is in the museum and he wants to see as many pictures as possible.

Museum can be represented as a rectangular field of n × m cells. Each cell is either empty or impassable. Empty cells are marked with '.', impassable cells are marked with '*'. Every two adjacent cells of different types (one empty and one impassable) are divided by a wall containing one picture.

At the beginning Igor is in some empty cell. At every moment he can move to any empty cell that share a side with the current one.

For several starting positions you should calculate the maximum number of pictures that Igor can see. Igor is able to see the picture only if he is in the cell adjacent to the wall with this picture. Igor have a lot of time, so he will examine every picture he can see.

Input

First line of the input contains three integers n, m and k (3 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n·m, 100 000)) — the museum dimensions and the number of starting positions to process.

Each of the next n lines contains m symbols '.', '*' — the description of the museum. It is guaranteed that all border cells are impassable, so Igor can't go out from the museum.

Each of the last k lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the row and the column of one of Igor's starting positions respectively. Rows are numbered from top to bottom, columns — from left to right. It is guaranteed that all starting positions are empty cells.

Output

Print k integers — the maximum number of pictures, that Igor can see if he starts in corresponding position.

Examples

Input

5 6 3
******
*..*.*
******
*....*
******
2 2
2 5
4 3


Output

6
4
10


Input

4 4 1
****
*..*
*.**
****
3 2


Output

8

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

For each natural language invariant derived earlier, we will create C++ code to implement a runtime check. 

1. **Dense Unexplored Regions**: We'll check for starting positions that repeatedly lead to the exploration of the same or adjacent unexplored regions.

```cpp
void check_dense_unexplored_regions(int overlap_count) {
    if (overlap_count > 10) { // Arbitrary threshold chosen for demonstration
        cerr << "Warning: Performance bottleneck due to dense unexplored regions triggered!" << endl;
        abort();
    }
}
```

2. **High Connectivity Areas**: We'll add a checker for when BFS explores larger connected areas with many walls.

```cpp
void check_high_connectivity_areas(int explored_area_size) {
    if (explored_area_size > 50) { // Based on practical exploration threshold
        cerr << "Warning: Performance bottleneck due to high connectivity areas triggered!" << endl;
        abort();
    }
}
```

3. **Large Number of Starting Points with Overlaps**: Check for redundant processing with many starting points.

```cpp
void check_redundant_starting_points(int starting_point_overlap_count) {
    if (starting_point_overlap_count > 30) { // Arbitrary threshold
        cerr << "Warning: Performance bottleneck due to redundant starting points triggered!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Code

The following code integrates the checker functions into the main program logic without significantly affecting performance. The checkers are strategically placed to assess conditions before heavy computations are performed:

```cpp
#include <bits/stdc++.h>
using namespace std;

vector<vector<int>> arr;
int n, m, k, last_number = 1;
unordered_map<int, int> ans;

bool inside(int y, int x) {
    return (y >= 0 && y < n && x >= 0 && x < m);
}

void check_dense_unexplored_regions(int overlap_count) {
    if (overlap_count > 10) {
        cerr << "Warning: Performance bottleneck due to dense unexplored regions triggered!" << endl;
        abort();
    }
}

void check_high_connectivity_areas(int explored_area_size) {
    if (explored_area_size > 50) {
        cerr << "Warning: Performance bottleneck due to high connectivity areas triggered!" << endl;
        abort();
    }
}

void check_redundant_starting_points(int starting_point_overlap_count) {
    if (starting_point_overlap_count > 30) {
        cerr << "Warning: Performance bottleneck due to redundant starting points triggered!" << endl;
        abort();
    }
}

int bfs(int y, int x) {
    int walls = 0, area_size = 0;
    queue<pair<int, int>> q;
    q.push({y, x});
    
    while (!q.empty()) {
        y = q.front().first, x = q.front().second;
        q.pop();
        
        if (arr[y][x] != -1) continue;
        
        arr[y][x] = last_number;
        area_size++; // Count the explored area
        
        for (int dr : {-1, 0, 1}) {
            for (int dc : {-1, 0, 1}) {
                if (abs(dr) == abs(dc)) continue;
                
                int new_row = y + dr;
                int new_col = x + dc;
                
                if (inside(new_row, new_col)) {
                    if (arr[new_row][new_col] == 0)
                        walls++;
                    else if (arr[new_row][new_col] == -1)
                        q.push({new_row, new_col});
                }
            }
        }
    }
    
    check_high_connectivity_areas(area_size);
    ans[last_number] = walls;
    last_number++;
    return walls;
}

int main() {
    cin >> n >> m >> k;
    arr = vector<vector<int>>(n, vector<int>(m, -1));
    
    for (int i = 0; i < n; i++) {
        string x;
        cin >> x;
        
        for (int j = 0; j < m; j++)
            if (x[j] == '*') arr[i][j] = 0;
    }

    vector<pair<int, int>> starting_positions;
    unordered_set<int> processed_positions;
    int overlap_count = 0;
    
    while (k--) {
        int y, x;
        cin >> y >> x;
        y--, x--;
        
        starting_positions.push_back({y, x});
        int arr_value = arr[y][x];
        
        if (ans.find(arr_value) != ans.end()) {
            cout << ans[arr_value] << endl;
            if (processed_positions.find(arr_value) != processed_positions.end()) {
                overlap_count++;
            }
            processed_positions.insert(arr_value);
        }
        else {
            cout << bfs(y, x) << endl;
        }
    }
    
    check_dense_unexplored_regions(overlap_count);
    check_redundant_starting_points(processed_positions.size());
    
    return 0;
}
```

### Explanation

- **Checkers** are added to handle the conditions derived in Phase 2, ensuring that performance bottlenecks are detected during execution.
- **Strategic Placement**: The checkers are placed outside of tight loops to minimize additional overhead.
- **Thresholds**: The thresholds used in the checks are arbitrary and can be adjusted based on experimental data or additional problem-specific insights. They are included to demonstrate how such checks could be implemented in practice. These checks ensure the program can be tested for performance issues under various inputs, making it more robust and maintainable.

