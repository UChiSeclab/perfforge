system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Igor is in the museum and he wants to see as many pictures as possible.

Museum can be represented as a rectangular field of n × m cells. Each cell is either empty or impassable. Empty cells are marked with '.', impassable cells are marked with '*'. Every two adjacent cells of different types (one empty and one impassable) are divided by a wall containing one picture.

At the beginning Igor is in some empty cell. At every moment he can move to any empty cell that share a side with the current one.

For several starting positions you should calculate the maximum number of pictures that Igor can see. Igor is able to see the picture only if he is in the cell adjacent to the wall with this picture. Igor have a lot of time, so he will examine every picture he can see.

Input

First line of the input contains three integers n, m and k (3 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n·m, 100 000)) — the museum dimensions and the number of starting positions to process.

Each of the next n lines contains m symbols '.', '*' — the description of the museum. It is guaranteed that all border cells are impassable, so Igor can't go out from the museum.

Each of the last k lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the row and the column of one of Igor's starting positions respectively. Rows are numbered from top to bottom, columns — from left to right. It is guaranteed that all starting positions are empty cells.

Output

Print k integers — the maximum number of pictures, that Igor can see if he starts in corresponding position.

Examples

Input

5 6 3
******
*..*.*
******
*....*
******
2 2
2 5
4 3


Output

6
4
10


Input

4 4 1
****
*..*
*.**
****
3 2


Output

8

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, m, k, arr_x[] = {1, -1, 0, 0}, arr_y[] = {0, 0, 1, -1},
             cevap[1005][1005];
char arr[1005][1005];
bool visited[1005][1005], vis[1005][1005];
bool check(int x, int y) {
  if (x < 0 || x >= n) return false;
  if (y < 0 || y >= m) return false;
  return true;
}
int dfs(int x, int y) {
  visited[x][y] = true;
  for (int i = 0; i < 4; i++) {
    int cur_x = x + arr_x[i], cur_y = y + arr_y[i];
    if (check(cur_x, cur_y) && arr[cur_x][cur_y] == '.' &&
        visited[cur_x][cur_y] == false) {
      cevap[x][y] += dfs(cur_x, cur_y);
    } else if (check(cur_x, cur_y) && arr[cur_x][cur_y] == '*') {
      cevap[x][y]++;
    }
  }
  return cevap[x][y];
}
void esitle(int x, int y, int xx, int yy) {
  vis[x][y] = true;
  cevap[x][y] = cevap[xx][yy];
  for (int i = 0; i < 4; i++) {
    int cur_x = arr_x[i] + x, cur_y = arr_y[i] + y;
    if (check(cur_x, cur_y) && arr[cur_x][cur_y] == '.' &&
        vis[cur_x][cur_y] == false)
      esitle(cur_x, cur_y, xx, yy);
  }
}
int main() {
  vector<pair<int, int> > vec;
  cin >> n >> m >> k;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      cin >> arr[i][j];
      if (arr[i][j] == '.') vec.push_back({i, j});
    }
  }
  for (int i = 0; i < vec.size(); i++) {
    int x = vec[i].first, y = vec[i].second;
    if (visited[x][y] == false) {
      dfs(x, y);
      esitle(x, y, x, y);
    }
  }
  while (k--) {
    int x, y;
    cin >> x >> y;
    cout << cevap[--x][--y] << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 10 50
**********
*......***
***..**..*
***....***
**..***..*
**..**.*.*
*****..***
*.***..***
*..****.**
**********
5 9
5 9
7 7
6 4
6 7
8 7
6 7
9 2
3 9
9 2
4 7
4 6
2 7
9 2
7 7
5 8
8 7
8 6
7 7
5 9
8 7
3 8
5 8
5 9
9 8
9 3
8 7
5 9
9 2
9 8
9 3
3 8
9 2
8 6
2 4
6 9
6 3
9 8
3 9
9 8
4 5
8 6
3 8
5 9
6 7
5 8
6 9
8 2
3 9
3 9


(G.2) Fast Input

3 10 10
**********
***.*.*..*
**********
2 6
2 6
2 9
2 9
2 4
2 8
2 6
2 6
2 4
2 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, k, arr_x[] = {1, -1, 0, 0}, arr_y[] = {0, 0, 1, -1}, /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
             cevap[1005][1005]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
char arr[1005][1005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool visited[1005][1005], vis[1005][1005]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
bool check(int x, int y) { /* line 7 slow_hit_count: 336, fast_hit_count: 47 */
  if (x < 0 || x >= n) return false; /* line 8 slow_hit_count: 336, fast_hit_count: 47 */
  if (y < 0 || y >= m) return false; /* line 9 slow_hit_count: 336, fast_hit_count: 47 */
  return true; /* line 10 slow_hit_count: 336, fast_hit_count: 47 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int dfs(int x, int y) { /* line 12 slow_hit_count: 30, fast_hit_count: 4 */
  visited[x][y] = true; /* line 13 slow_hit_count: 30, fast_hit_count: 4 */
  for (int i = 0; i < 4; i++) { /* line 14 slow_hit_count: 150, fast_hit_count: 20 */
    int cur_x = x + arr_x[i], cur_y = y + arr_y[i]; /* line 15 slow_hit_count: 120, fast_hit_count: 16 */
    if (check(cur_x, cur_y) && arr[cur_x][cur_y] == '.' && /* line 16 slow_hit_count: 176, fast_hit_count: 18 */
        visited[cur_x][cur_y] == false) { /* line 17 slow_hit_count: 56, fast_hit_count: 2 */
      cevap[x][y] += dfs(cur_x, cur_y); /* line 18 slow_hit_count: 24, fast_hit_count: 1 */
    } else if (check(cur_x, cur_y) && arr[cur_x][cur_y] == '*') { /* line 19 slow_hit_count: 96, fast_hit_count: 15 */
      cevap[x][y]++; /* line 20 slow_hit_count: 64, fast_hit_count: 14 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  return cevap[x][y]; /* line 23 slow_hit_count: 30, fast_hit_count: 4 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
void esitle(int x, int y, int xx, int yy) { /* line 25 slow_hit_count: 30, fast_hit_count: 4 */
  vis[x][y] = true; /* line 26 slow_hit_count: 30, fast_hit_count: 4 */
  cevap[x][y] = cevap[xx][yy]; /* line 27 slow_hit_count: 30, fast_hit_count: 4 */
  for (int i = 0; i < 4; i++) { /* line 28 slow_hit_count: 150, fast_hit_count: 20 */
    int cur_x = arr_x[i] + x, cur_y = arr_y[i] + y; /* line 29 slow_hit_count: 120, fast_hit_count: 16 */
    if (check(cur_x, cur_y) && arr[cur_x][cur_y] == '.' && /* line 30 slow_hit_count: 176, fast_hit_count: 18 */
        vis[cur_x][cur_y] == false) /* line 31 slow_hit_count: 56, fast_hit_count: 2 */
      esitle(cur_x, cur_y, xx, yy); /* line 32 slow_hit_count: 24, fast_hit_count: 1 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 34 slow_hit_count: 30, fast_hit_count: 4 */
int main() { /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<int, int> > vec; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> k; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 38 slow_hit_count: 11, fast_hit_count: 4 */
    for (int j = 0; j < m; j++) { /* line 39 slow_hit_count: 110, fast_hit_count: 33 */
      cin >> arr[i][j]; /* line 40 slow_hit_count: 100, fast_hit_count: 30 */
      if (arr[i][j] == '.') vec.push_back({i, j}); /* line 41 slow_hit_count: 100, fast_hit_count: 30 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < vec.size(); i++) { /* line 44 slow_hit_count: 31, fast_hit_count: 5 */
    int x = vec[i].first, y = vec[i].second; /* line 45 slow_hit_count: 30, fast_hit_count: 4 */
    if (visited[x][y] == false) { /* line 46 slow_hit_count: 30, fast_hit_count: 4 */
      dfs(x, y); /* line 47 slow_hit_count: 6, fast_hit_count: 3 */
      esitle(x, y, x, y); /* line 48 slow_hit_count: 6, fast_hit_count: 3 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  while (k--) { /* line 51 slow_hit_count: 51, fast_hit_count: 11 */
    int x, y; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> y; /* line 53 slow_hit_count: 50, fast_hit_count: 10 */
    cout << cevap[--x][--y] << endl; /* line 54 slow_hit_count: 50, fast_hit_count: 10 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the given C program, let's analyze the code structure and hit count data provided for both the slow and fast inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **High Hit Count Discrepancies**:
   - The function `dfs` and the related lines (lines 12-23) are called significantly more often for the slow input than for the fast input. This indicates that the depth-first search (DFS) traversal is being executed more frequently or for more extensive sections of the grid in the slow scenario.
   - The lines involved in DFS (line 18 and line 20) demonstrate substantial differences in hits, suggesting more recursion or deeper exploration.
   - The function `esitle` (lines 25-34) also shows higher hit counts in the slow input, suggesting extensive exploration and state propagation across grid cells during execution.

2. **Loop Structures**:
   - The loops in `dfs` and `esitle`, particularly the nested loops (lines 14-22 and lines 28-33), are being executed more times in the slow input. This implies that the data structures or input patterns for the slow case result in more exhaustive exploration.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can formulate the following natural language performance invariants to describe conditions that may lead to slow execution:

1. **Excessive DFS Traversal**:
   - "If the museum layout has large contiguous sections of empty cells, the DFS algorithm may execute excessive recursive calls, leading to performance degradation. This is particularly notable when many starting positions are located in such sections."
   - This invariant suggests that the slowdown occurs when the DFS needs to explore large connected components of empty cells.

2. **Repeated State Propagation**:
   - "If the grid has multiple large areas of connected empty cells, the state propagation mechanism (`esitle`) will result in repeated updates across these cells, consuming additional processing time."
   - This points out that when `esitle` is called over expansive areas, it exacerbates the slow execution by propagating the same results redundantly.

3. **High Request Density**:
   - "When numerous starting queries are concentrated in or near the same large connected component of empty cells, computation is repeated unnecessarily for each query, resulting in slow performance."
   - Reflects on the impact of having multiple starting positions within the same DFS-explored area, leading to redundant calculations.

By identifying these invariants, we can better understand under what conditions the program slows down and potentially optimize the algorithm to handle these cases more efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Igor is in the museum and he wants to see as many pictures as possible.

Museum can be represented as a rectangular field of n × m cells. Each cell is either empty or impassable. Empty cells are marked with '.', impassable cells are marked with '*'. Every two adjacent cells of different types (one empty and one impassable) are divided by a wall containing one picture.

At the beginning Igor is in some empty cell. At every moment he can move to any empty cell that share a side with the current one.

For several starting positions you should calculate the maximum number of pictures that Igor can see. Igor is able to see the picture only if he is in the cell adjacent to the wall with this picture. Igor have a lot of time, so he will examine every picture he can see.

Input

First line of the input contains three integers n, m and k (3 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n·m, 100 000)) — the museum dimensions and the number of starting positions to process.

Each of the next n lines contains m symbols '.', '*' — the description of the museum. It is guaranteed that all border cells are impassable, so Igor can't go out from the museum.

Each of the last k lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the row and the column of one of Igor's starting positions respectively. Rows are numbered from top to bottom, columns — from left to right. It is guaranteed that all starting positions are empty cells.

Output

Print k integers — the maximum number of pictures, that Igor can see if he starts in corresponding position.

Examples

Input

5 6 3
******
*..*.*
******
*....*
******
2 2
2 5
4 3


Output

6
4
10


Input

4 4 1
****
*..*
*.**
****
3 2


Output

8

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as Checker Code in C++

For the previously identified invariants, we'll now create corresponding C++ code checks:

1. **Excessive DFS Traversal**:
   - We need to keep track of the number of recursive calls in `dfs` and check if it exceeds a certain threshold that indicates potential performance issues.

```cpp
int dfs_call_count = 0;  // Global or static variable to track dfs calls

void check_dfs_invariant() {
    if (dfs_call_count > 10000) {  // Example threshold; adjust based on expected patterns
        cerr << "Warning: dfs_invariant triggered - excessive DFS calls" << endl;
        abort();
    }
}
```

2. **Repeated State Propagation**:
   - We can monitor the calls to `esitle` to detect when a large area is being repeatedly processed.

```cpp
int esitle_call_count = 0;  // Global or static variable to track esitle calls

void check_esitle_invariant() {
    if (esitle_call_count > 5000) {  // Example threshold; adjust for real-world patterns
        cerr << "Warning: esitle_invariant triggered - excessive state propagation" << endl;
        abort();
    }
}
```

3. **High Request Density**:
   - This invariant requires checking if multiple queries target the same region; if this logic was exploitable by setup, we'd have to track and report it.

```cpp
set<pair<int, int>> visited_queries;

void check_request_density(int x, int y) {
    auto result = visited_queries.insert({x, y});
    if (!result.second) {  // If insertion failed, it means this query was repeated
        cerr << "Warning: density_invariant triggered - repeated queries to same region" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Program

Now, we'll integrate these checks into the C++ code, ensuring they're placed effectively to monitor performance without adding overhead to tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, m, k, arr_x[] = {1, -1, 0, 0}, arr_y[] = {0, 0, 1, -1}, cevap[1005][1005];
char arr[1005][1005];
bool visited[1005][1005], vis[1005][1005];
int dfs_call_count = 0;
int esitle_call_count = 0;
set<pair<int, int>> visited_queries;

bool check(int x, int y) {
    if (x < 0 || x >= n) return false;
    if (y < 0 || y >= m) return false;
    return true;
}

void check_dfs_invariant() {
    if (dfs_call_count > 10000) {  // Example threshold; adjust based on expected patterns
        cerr << "Warning: dfs_invariant triggered - excessive DFS calls" << endl;
        abort();
    }
}

void check_esitle_invariant() {
    if (esitle_call_count > 5000) {  // Example threshold; adjust for real-world patterns
        cerr << "Warning: esitle_invariant triggered - excessive state propagation" << endl;
        abort();
    }
}

void check_request_density(int x, int y) {
    auto result = visited_queries.insert({x, y});
    if (!result.second) {  // If insertion failed, it means this query was repeated
        cerr << "Warning: density_invariant triggered - repeated queries to same region" << endl;
        abort();
    }
}

int dfs(int x, int y) {
    dfs_call_count++;
    check_dfs_invariant();

    visited[x][y] = true;
    for (int i = 0; i < 4; i++) {
        int cur_x = x + arr_x[i], cur_y = y + arr_y[i];
        if (check(cur_x, cur_y) && arr[cur_x][cur_y] == '.' && visited[cur_x][cur_y] == false) {
            cevap[x][y] += dfs(cur_x, cur_y);
        } else if (check(cur_x, cur_y) && arr[cur_x][cur_y] == '*') {
            cevap[x][y]++;
        }
    }
    return cevap[x][y];
}

void esitle(int x, int y, int xx, int yy) {
    esitle_call_count++;
    check_esitle_invariant();

    vis[x][y] = true;
    cevap[x][y] = cevap[xx][yy];
    for (int i = 0; i < 4; i++) {
        int cur_x = arr_x[i] + x, cur_y = arr_y[i] + y;
        if (check(cur_x, cur_y) && arr[cur_x][cur_y] == '.' && vis[cur_x][cur_y] == false)
            esitle(cur_x, cur_y, xx, yy);
    }
}

int main() {
    vector<pair<int, int>> vec;
    cin >> n >> m >> k;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> arr[i][j];
            if (arr[i][j] == '.') vec.push_back({i, j});
        }
    }
    for (int i = 0; i < vec.size(); i++) {
        int x = vec[i].first, y = vec[i].second;
        if (visited[x][y] == false) {
            dfs(x, y);
            esitle(x, y, x, y);
        }
    }
    while (k--) {
        int x, y;
        cin >> x >> y;
        check_request_density(--x, --y);
        cout << cevap[x][y] << endl;
    }
    return 0;
}
```

**Comments on Integration**:
- **DFS and Esitle Checks**: We placed the `dfs_call_count` and `esitle_call_count` checks inside the `dfs` and `esitle` functions, respectively. These provide warnings when either function is called excessively, indicating potential performance bottlenecks.
- **Request Density Check**: We added a check at the start of each query handling in `main`, using a set to detect repeated queries targeting the same cell positions.
  
These checks should help identify and diagnose potential performance issues during execution, especially when combined with a fuzzer designed to detect such slow scenarios.

