system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Igor is in the museum and he wants to see as many pictures as possible.

Museum can be represented as a rectangular field of n × m cells. Each cell is either empty or impassable. Empty cells are marked with '.', impassable cells are marked with '*'. Every two adjacent cells of different types (one empty and one impassable) are divided by a wall containing one picture.

At the beginning Igor is in some empty cell. At every moment he can move to any empty cell that share a side with the current one.

For several starting positions you should calculate the maximum number of pictures that Igor can see. Igor is able to see the picture only if he is in the cell adjacent to the wall with this picture. Igor have a lot of time, so he will examine every picture he can see.

Input

First line of the input contains three integers n, m and k (3 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n·m, 100 000)) — the museum dimensions and the number of starting positions to process.

Each of the next n lines contains m symbols '.', '*' — the description of the museum. It is guaranteed that all border cells are impassable, so Igor can't go out from the museum.

Each of the last k lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the row and the column of one of Igor's starting positions respectively. Rows are numbered from top to bottom, columns — from left to right. It is guaranteed that all starting positions are empty cells.

Output

Print k integers — the maximum number of pictures, that Igor can see if he starts in corresponding position.

Examples

Input

5 6 3
******
*..*.*
******
*....*
******
2 2
2 5
4 3


Output

6
4
10


Input

4 4 1
****
*..*
*.**
****
3 2


Output

8

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, m;
int st, en;
int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};
vector<string> v;
int cell[1005][1005], visited[1005][1005];
bool valid(int xx, int yy) {
  if (xx >= 0 && yy >= 0 && xx < n && yy < m && v[xx][yy] != '*') return 1;
  return 0;
}
int bfs() {
  int wx, wy, ans = 0;
  vector<pair<int, int> > vaa;
  queue<pair<int, int> > Q;
  Q.push(make_pair(st, en));
  visited[st][en] = 1;
  while (!Q.empty()) {
    st = Q.front().first;
    en = Q.front().second;
    vaa.push_back(make_pair(st, en));
    Q.pop();
    for (int i = 0; i < 4; i++) {
      wx = st + dx[i];
      wy = en + dy[i];
      if (!valid(wx, wy)) ans++;
      if (valid(wx, wy) && !visited[wx][wy]) {
        visited[wx][wy] = 1;
        Q.push(pair<int, int>(wx, wy));
      }
    }
  }
  for (int i = 0; i < vaa.size(); i++) cell[vaa[i].first][vaa[i].second] = ans;
  return ans;
}
int main() {
  int k;
  string s;
  cin >> n >> m >> k;
  memset(cell, -1, sizeof(cell));
  memset(visited, 0, sizeof(visited));
  for (int i = 0; i < n; i++) {
    cin >> s;
    v.push_back(s);
  }
  while (k--) {
    cin >> st >> en;
    st--;
    en--;
    if (cell[st][en] != -1)
      cout << cell[st][en] << '\n';
    else
      cout << bfs() << '\n';
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 10 50
**********
*......***
***..**..*
***....***
**..***..*
**..**.*.*
*****..***
*.***..***
*..****.**
**********
5 9
5 9
7 7
6 4
6 7
8 7
6 7
9 2
3 9
9 2
4 7
4 6
2 5
9 2
7 7
5 8
8 7
8 6
7 7
5 9
8 7
3 8
5 8
5 9
9 8
9 3
8 7
5 9
9 2
9 8
9 3
3 8
9 2
8 6
2 4
6 9
6 3
9 3
3 9
9 8
4 5
8 6
3 4
5 9
8 7
5 8
6 9
8 2
3 9
3 9


(G.2) Fast Input

3 10 10
**********
***.*.*..*
**********
2 6
2 6
2 9
2 9
2 4
2 8
2 6
2 6
2 4
2 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int st, en; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int dx[] = {0, 1, 0, -1}; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int dy[] = {1, 0, -1, 0}; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
vector<string> v; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int cell[1005][1005], visited[1005][1005]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
bool valid(int xx, int yy) { /* line 9 slow_hit_count: 240, fast_hit_count: 32 */
  if (xx >= 0 && yy >= 0 && xx < n && yy < m && v[xx][yy] != '*') return 1; /* line 10 slow_hit_count: 240, fast_hit_count: 32 */
  return 0; /* line 11 slow_hit_count: 128, fast_hit_count: 28 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int bfs() { /* line 13 slow_hit_count: 6, fast_hit_count: 3 */
  int wx, wy, ans = 0; /* line 14 slow_hit_count: 6, fast_hit_count: 3 */
  vector<pair<int, int> > vaa; /* line 15 slow_hit_count: 12, fast_hit_count: 6 */
  queue<pair<int, int> > Q; /* line 16 slow_hit_count: 6, fast_hit_count: 3 */
  Q.push(make_pair(st, en)); /* line 17 slow_hit_count: 6, fast_hit_count: 3 */
  visited[st][en] = 1; /* line 18 slow_hit_count: 6, fast_hit_count: 3 */
  while (!Q.empty()) { /* line 19 slow_hit_count: 36, fast_hit_count: 7 */
    st = Q.front().first; /* line 20 slow_hit_count: 30, fast_hit_count: 4 */
    en = Q.front().second; /* line 21 slow_hit_count: 30, fast_hit_count: 4 */
    vaa.push_back(make_pair(st, en)); /* line 22 slow_hit_count: 30, fast_hit_count: 4 */
    Q.pop(); /* line 23 slow_hit_count: 30, fast_hit_count: 4 */
    for (int i = 0; i < 4; i++) { /* line 24 slow_hit_count: 150, fast_hit_count: 20 */
      wx = st + dx[i]; /* line 25 slow_hit_count: 120, fast_hit_count: 16 */
      wy = en + dy[i]; /* line 26 slow_hit_count: 120, fast_hit_count: 16 */
      if (!valid(wx, wy)) ans++; /* line 27 slow_hit_count: 120, fast_hit_count: 16 */
      if (valid(wx, wy) && !visited[wx][wy]) { /* line 28 slow_hit_count: 120, fast_hit_count: 16 */
        visited[wx][wy] = 1; /* line 29 slow_hit_count: 24, fast_hit_count: 1 */
        Q.push(pair<int, int>(wx, wy)); /* line 30 slow_hit_count: 24, fast_hit_count: 1 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < vaa.size(); i++) cell[vaa[i].first][vaa[i].second] = ans; /* line 34 slow_hit_count: 36, fast_hit_count: 7 */
  return ans; /* line 35 slow_hit_count: 12, fast_hit_count: 6 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  int k; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  string s; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> k; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  memset(cell, -1, sizeof(cell)); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  memset(visited, 0, sizeof(visited)); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 43 slow_hit_count: 11, fast_hit_count: 4 */
    cin >> s; /* line 44 slow_hit_count: 10, fast_hit_count: 3 */
    v.push_back(s); /* line 45 slow_hit_count: 10, fast_hit_count: 3 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  while (k--) { /* line 47 slow_hit_count: 51, fast_hit_count: 11 */
    cin >> st >> en; /* line 48 slow_hit_count: 50, fast_hit_count: 10 */
    st--; /* line 49 slow_hit_count: 50, fast_hit_count: 10 */
    en--; /* line 50 slow_hit_count: 50, fast_hit_count: 10 */
    if (cell[st][en] != -1) /* line 51 slow_hit_count: 50, fast_hit_count: 10 */
      cout << cell[st][en] << '\n'; /* line 52 slow_hit_count: 44, fast_hit_count: 7 */
    else /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
      cout << bfs() << '\n'; /* line 54 slow_hit_count: 6, fast_hit_count: 3 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance bottlenecks in the provided C program, we need to analyze the differences in execution between the fast and slow inputs. Based on this analysis, we can derive performance-characterizing invariants that describe the conditions under which the program slows down. Here's a step-by-step approach:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - The `bfs()` function is the primary contributor to the slowdown, with key lines being hit significantly more often in the slow input compared to the fast input. Particularly:
     - The `while (!Q.empty())` loop (line 19) and lines within this loop (lines 20-30) are hit considerably more often.
     - The `valid()` function is called frequently within this loop (lines 27 and 28), indicating a high number of validity checks.
   - The hit counts suggest that the queue operations and adjacent cell validations are much more frequent in the slow case.

2. **Data Structures and Loops:**
   - The `bfs()` function uses a queue to explore reachable cells. The high hit counts suggest that many cells are explored repeatedly, hinting at a large search space within the grid.
   - The grid exploration heavily depends on the connectivity of empty cells and the number of starting points (k).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants in natural language:

1. **High Connectivity of Empty Cells:**
   - "When a large contiguous area of empty cells forms, the breadth-first search may traverse extensively, leading to increased execution time. This is particularly true if many starting positions are within or near this area."

2. **Repeated Exploration from Multiple Starting Points:**
   - "If multiple starting positions are located in or around densely connected regions of empty cells, the BFS may reprocess the same cells multiple times, resulting in redundant computations."

3. **BFS Overhead in Complex Grids:**
   - "In grids where pathways through empty cells are convoluted or involve tight corridors bordered by impassable cells, the BFS algorithm may require many iterations to explore the same area, leading to performance degradation."

4. **Caching of Results for Visited Cells:**
   - "If the results of previously visited cells are not adequately cached and reused for queries from new starting positions, unnecessary recomputation can occur, slowing down the execution."

These invariants aim to capture the scenarios under which the program may slow down without relying on specific input values, focusing instead on patterns and structural characteristics of the input grid and starting positions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Igor is in the museum and he wants to see as many pictures as possible.

Museum can be represented as a rectangular field of n × m cells. Each cell is either empty or impassable. Empty cells are marked with '.', impassable cells are marked with '*'. Every two adjacent cells of different types (one empty and one impassable) are divided by a wall containing one picture.

At the beginning Igor is in some empty cell. At every moment he can move to any empty cell that share a side with the current one.

For several starting positions you should calculate the maximum number of pictures that Igor can see. Igor is able to see the picture only if he is in the cell adjacent to the wall with this picture. Igor have a lot of time, so he will examine every picture he can see.

Input

First line of the input contains three integers n, m and k (3 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n·m, 100 000)) — the museum dimensions and the number of starting positions to process.

Each of the next n lines contains m symbols '.', '*' — the description of the museum. It is guaranteed that all border cells are impassable, so Igor can't go out from the museum.

Each of the last k lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the row and the column of one of Igor's starting positions respectively. Rows are numbered from top to bottom, columns — from left to right. It is guaranteed that all starting positions are empty cells.

Output

Print k integers — the maximum number of pictures, that Igor can see if he starts in corresponding position.

Examples

Input

5 6 3
******
*..*.*
******
*....*
******
2 2
2 5
4 3


Output

6
4
10


Input

4 4 1
****
*..*
*.**
****
3 2


Output

8

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Based on the natural language invariants derived earlier, we implement checker functions in C++. These checkers are designed to monitor potential performance bottlenecks during the program's execution.

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <utility>
using namespace std;

// Checker for high connectivity of empty cells
void check_high_connectivity_invariant(int contiguousEmptyCellsThreshold, int contiguousEmptyCells) {
    if (contiguousEmptyCells > contiguousEmptyCellsThreshold) {
        cerr << "Warning: High connectivity of empty cells detected!" << endl;
        abort();
    }
}

// Checker for repeated exploration from multiple starting points
void check_repeated_exploration_invariant(int maxStartingPoints, int startingPointsExplored, int neighborsVisited) {
    if ((startingPointsExplored > maxStartingPoints) && (neighborsVisited > startingPointsExplored * 2)) {
        cerr << "Warning: Repeated exploration from multiple starting points detected!" << endl;
        abort();
    }
}

// Checker for BFS overhead in complex grids
void check_bfs_overhead_invariant(int maxQSize, int currentQSize) {
    if (currentQSize > maxQSize) {
        cerr << "Warning: BFS overhead in complex grids detected!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

We now integrate the checker functions into the original program, placing them before and during the BFS process while ensuring minimal performance impact.

```cpp
#include <iostream>
#include <vector>
#include <queue>
#include <utility>
#include <cstring>
using namespace std;

int n, m;
int st, en;
int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};
vector<string> v;
int cell[1005][1005], visited[1005][1005];

// Checker functions
void check_high_connectivity_invariant(int contiguousEmptyCellsThreshold, int contiguousEmptyCells) {
    if (contiguousEmptyCells > contiguousEmptyCellsThreshold) {
        cerr << "Warning: High connectivity of empty cells detected!" << endl;
        abort();
    }
}

void check_repeated_exploration_invariant(int maxStartingPoints, int startingPointsExplored, int neighborsVisited) {
    if ((startingPointsExplored > maxStartingPoints) && (neighborsVisited > startingPointsExplored * 2)) {
        cerr << "Warning: Repeated exploration from multiple starting points detected!" << endl;
        abort();
    }
}

void check_bfs_overhead_invariant(int maxQSize, int currentQSize) {
    if (currentQSize > maxQSize) {
        cerr << "Warning: BFS overhead in complex grids detected!" << endl;
        abort();
    }
}

// Validity check for cell coordinates
bool valid(int xx, int yy) {
  if (xx >= 0 && yy >= 0 && xx < n && yy < m && v[xx][yy] != '*') return 1;
  return 0;
}

// BFS function to explore the grid
int bfs() {
  int wx, wy, ans = 0;
  vector<pair<int, int> > vaa;
  queue<pair<int, int> > Q;
  Q.push(make_pair(st, en));
  visited[st][en] = 1;

  // BFS overhead checker
  check_bfs_overhead_invariant(10000, Q.size());

  while (!Q.empty()) {
    st = Q.front().first;
    en = Q.front().second;
    vaa.push_back(make_pair(st, en));
    Q.pop();

    for (int i = 0; i < 4; i++) {
      wx = st + dx[i];
      wy = en + dy[i];
      if (!valid(wx, wy)) ans++;
      if (valid(wx, wy) && !visited[wx][wy]) {
        visited[wx][wy] = 1;
        Q.push(pair<int, int>(wx, wy));

        // Check BFS overhead again as the queue grows
        check_bfs_overhead_invariant(10000, Q.size());
      }
    }
  }

  // Cache results to reduce repeated exploration
  for (int i = 0; i < vaa.size(); i++) cell[vaa[i].first][vaa[i].second] = ans;
  return ans;
}

int main() {
  int k;
  string s;
  cin >> n >> m >> k;
  memset(cell, -1, sizeof(cell));
  memset(visited, 0, sizeof(visited));

  for (int i = 0; i < n; i++) {
    cin >> s;
    v.push_back(s);
  }

  // Check high connectivity invariant at the start
  int contiguousEmptyCells = 0;
  for (const auto& row : v) {
      contiguousEmptyCells += count(row.begin(), row.end(), '.');
  }
  check_high_connectivity_invariant(500, contiguousEmptyCells);

  while (k--) {
    cin >> st >> en;
    st--;
    en--;

    if (cell[st][en] != -1) {
      cout << cell[st][en] << '\n';
    } else {
      cout << bfs() << '\n';
    }
  }

  return 0;
}
```

### Explanation

- **High Connectivity Check:** We check the number of empty cells at the onset. If it's higher than a chosen threshold, we trigger a warning. This reflects the large contiguous area of empty cells that can cause extensive BFS traversal.
  
- **Repeated Exploration Check:** This is implicit as we cache results for cells once they are computed. Although not directly implemented in the above code due to complexity, it prevents excessive re-exploration.

- **BFS Overhead Check:** We check the queue size during BFS to detect if it gets too large, suggesting excessive traversal or a complex grid structure.

These checks are strategically placed to ensure they capture potential performance issues without adding noticeable overhead during execution.

