system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Igor is in the museum and he wants to see as many pictures as possible.

Museum can be represented as a rectangular field of n × m cells. Each cell is either empty or impassable. Empty cells are marked with '.', impassable cells are marked with '*'. Every two adjacent cells of different types (one empty and one impassable) are divided by a wall containing one picture.

At the beginning Igor is in some empty cell. At every moment he can move to any empty cell that share a side with the current one.

For several starting positions you should calculate the maximum number of pictures that Igor can see. Igor is able to see the picture only if he is in the cell adjacent to the wall with this picture. Igor have a lot of time, so he will examine every picture he can see.

Input

First line of the input contains three integers n, m and k (3 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n·m, 100 000)) — the museum dimensions and the number of starting positions to process.

Each of the next n lines contains m symbols '.', '*' — the description of the museum. It is guaranteed that all border cells are impassable, so Igor can't go out from the museum.

Each of the last k lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the row and the column of one of Igor's starting positions respectively. Rows are numbered from top to bottom, columns — from left to right. It is guaranteed that all starting positions are empty cells.

Output

Print k integers — the maximum number of pictures, that Igor can see if he starts in corresponding position.

Examples

Input

5 6 3
******
*..*.*
******
*....*
******
2 2
2 5
4 3


Output

6
4
10


Input

4 4 1
****
*..*
*.**
****
3 2


Output

8

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1005;
const long long mod = 1000000007ll;
int n, m;
int cnt;
int dx[4] = {0, 0, 1, -1};
int dy[4] = {1, -1, 0, 0};
char a[N][N];
bool vis[N][N], vis2[N][N];
void bfs1(int x, int y) {
  queue<pair<int, int> > q;
  q.push({x, y});
  while (!q.empty()) {
    pair<int, int> p = q.front();
    q.pop();
    int cx = p.first, cy = p.second;
    for (int i = 0; i < 4; i++) {
      int tx = cx + dx[i], ty = cy + dy[i];
      if (tx < 1 || tx > n || ty < 1 || ty > m || vis[tx][ty]) continue;
      if (a[tx][ty] == '*') {
        cnt++;
        continue;
      }
      vis[tx][ty] = 1;
      q.push({tx, ty});
    }
  }
}
int ans[N][N];
void bfs2(int x, int y) {
  queue<pair<int, int> > q;
  q.push({x, y});
  while (!q.empty()) {
    pair<int, int> p = q.front();
    q.pop();
    int cx = p.first, cy = p.second;
    ans[cx][cy] = cnt;
    for (int i = 0; i < 4; i++) {
      int tx = cx + dx[i], ty = cy + dy[i];
      if (tx < 1 || tx > n || ty < 1 || ty > m || vis2[tx][ty]) continue;
      if (a[tx][ty] == '*') continue;
      vis2[tx][ty] = 1;
      q.push({tx, ty});
    }
  }
}
int main() {
  int i, j;
  int T;
  cin >> n >> m >> T;
  for (i = 1; i <= n; i++) {
    cin >> (a[i] + 1);
  }
  for (i = 1; i <= n; i++) {
    for (j = 1; j <= m; j++) {
      if (!vis[i][j] && a[i][j] != '*') {
        vis[i][j] = 1;
        cnt = 0;
        bfs1(i, j);
        bfs2(i, j);
      }
    }
  }
  while (T--) {
    int x, y;
    cin >> x >> y;
    cout << ans[x][y] << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 10 50
**********
*......***
***..**..*
***....***
**..***..*
**..**.*.*
*****..***
*.***..***
*..****.**
**********
5 9
5 9
7 7
6 4
6 7
8 7
6 7
9 2
3 9
9 2
4 7
2 6
2 5
9 2
7 7
5 8
8 7
8 6
7 7
6 9
8 7
3 8
5 8
5 9
9 8
9 3
8 7
5 8
9 2
9 8
9 3
3 8
9 2
8 6
2 4
6 9
6 3
9 8
3 9
9 8
4 5
8 6
3 4
5 9
8 7
5 8
6 9
8 2
3 9
3 9


(G.2) Fast Input

3 10 10
**********
***.*.*..*
**********
2 6
2 6
2 9
2 9
2 4
2 8
2 6
2 6
2 4
2 6


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1005; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1000000007ll; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int cnt; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int dx[4] = {0, 0, 1, -1}; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int dy[4] = {1, -1, 0, 0}; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
char a[N][N]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
bool vis[N][N], vis2[N][N]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
void bfs1(int x, int y) { /* line 11 slow_hit_count: 6, fast_hit_count: 3 */
  queue<pair<int, int> > q; /* line 12 slow_hit_count: 12, fast_hit_count: 6 */
  q.push({x, y}); /* line 13 slow_hit_count: 6, fast_hit_count: 3 */
  while (!q.empty()) { /* line 14 slow_hit_count: 36, fast_hit_count: 7 */
    pair<int, int> p = q.front(); /* line 15 slow_hit_count: 30, fast_hit_count: 4 */
    q.pop(); /* line 16 slow_hit_count: 30, fast_hit_count: 4 */
    int cx = p.first, cy = p.second; /* line 17 slow_hit_count: 30, fast_hit_count: 4 */
    for (int i = 0; i < 4; i++) { /* line 18 slow_hit_count: 150, fast_hit_count: 20 */
      int tx = cx + dx[i], ty = cy + dy[i]; /* line 19 slow_hit_count: 120, fast_hit_count: 16 */
      if (tx < 1 || tx > n || ty < 1 || ty > m || vis[tx][ty]) continue; /* line 20 slow_hit_count: 184, fast_hit_count: 30 */
      if (a[tx][ty] == '*') { /* line 21 slow_hit_count: 88, fast_hit_count: 15 */
        cnt++; /* line 22 slow_hit_count: 64, fast_hit_count: 14 */
        continue; /* line 23 slow_hit_count: 64, fast_hit_count: 14 */
      } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      vis[tx][ty] = 1; /* line 25 slow_hit_count: 24, fast_hit_count: 1 */
      q.push({tx, ty}); /* line 26 slow_hit_count: 24, fast_hit_count: 1 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 29 slow_hit_count: 6, fast_hit_count: 3 */
int ans[N][N]; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
void bfs2(int x, int y) { /* line 31 slow_hit_count: 6, fast_hit_count: 3 */
  queue<pair<int, int> > q; /* line 32 slow_hit_count: 12, fast_hit_count: 6 */
  q.push({x, y}); /* line 33 slow_hit_count: 6, fast_hit_count: 3 */
  while (!q.empty()) { /* line 34 slow_hit_count: 41, fast_hit_count: 8 */
    pair<int, int> p = q.front(); /* line 35 slow_hit_count: 35, fast_hit_count: 5 */
    q.pop(); /* line 36 slow_hit_count: 35, fast_hit_count: 5 */
    int cx = p.first, cy = p.second; /* line 37 slow_hit_count: 35, fast_hit_count: 5 */
    ans[cx][cy] = cnt; /* line 38 slow_hit_count: 35, fast_hit_count: 5 */
    for (int i = 0; i < 4; i++) { /* line 39 slow_hit_count: 175, fast_hit_count: 25 */
      int tx = cx + dx[i], ty = cy + dy[i]; /* line 40 slow_hit_count: 140, fast_hit_count: 20 */
      if (tx < 1 || tx > n || ty < 1 || ty > m || vis2[tx][ty]) continue; /* line 41 slow_hit_count: 219, fast_hit_count: 37 */
      if (a[tx][ty] == '*') continue; /* line 42 slow_hit_count: 108, fast_hit_count: 19 */
      vis2[tx][ty] = 1; /* line 43 slow_hit_count: 29, fast_hit_count: 2 */
      q.push({tx, ty}); /* line 44 slow_hit_count: 29, fast_hit_count: 2 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 47 slow_hit_count: 6, fast_hit_count: 3 */
int main() { /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  int i, j; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  int T; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m >> T; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 1; i <= n; i++) { /* line 52 slow_hit_count: 11, fast_hit_count: 4 */
    cin >> (a[i] + 1); /* line 53 slow_hit_count: 10, fast_hit_count: 3 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 1; i <= n; i++) { /* line 55 slow_hit_count: 11, fast_hit_count: 4 */
    for (j = 1; j <= m; j++) { /* line 56 slow_hit_count: 110, fast_hit_count: 33 */
      if (!vis[i][j] && a[i][j] != '*') { /* line 57 slow_hit_count: 100, fast_hit_count: 30 */
        vis[i][j] = 1; /* line 58 slow_hit_count: 6, fast_hit_count: 3 */
        cnt = 0; /* line 59 slow_hit_count: 6, fast_hit_count: 3 */
        bfs1(i, j); /* line 60 slow_hit_count: 6, fast_hit_count: 3 */
        bfs2(i, j); /* line 61 slow_hit_count: 6, fast_hit_count: 3 */
      } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  while (T--) { /* line 65 slow_hit_count: 51, fast_hit_count: 11 */
    int x, y; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> y; /* line 67 slow_hit_count: 50, fast_hit_count: 10 */
    cout << ans[x][y] << endl; /* line 68 slow_hit_count: 50, fast_hit_count: 10 */
  } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 71 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the line-level hit counts for both slow and fast inputs, we can observe which parts of the code are significantly more active in the slow case:

1. **BFS Traversals (`bfs1` and `bfs2` functions):**
   - `bfs1` and `bfs2` are heavily called with many iterations in the slow input compared to the fast input.
   - Lines such as `for (int i = 0; i < 4; i++)` inside both BFS functions are hit many more times, indicating that these loops are iterating over more cells in the slow input.

2. **Conditional Checks and Queue Operations:**
   - The conditions checking boundaries and cell types (e.g., `if (a[tx][ty] == '*')`) are hit more frequently in the slow run, suggesting many neighbor evaluations.
   - The lines involving queue operations (e.g., `q.push({tx, ty});` and `vis[tx][ty] = 1;`) are also more active, indicating more enqueuing and processing of cells.

3. **Initialization and Processing Logic:**
   - The loops in the main function that initialize the BFS traversal (`for (i = 1; i <= n; i++)` and `for (j = 1; j <= m; j++)`) show increased activity, reflecting more initial starting points or larger connected components of empty cells.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis of hit counts and code structure, we can derive the following natural language performance invariants:

1. **Large Connected Components:**
   - "The code slows down significantly when Igor explores a large connected component of empty cells. BFS traversal over vast areas increases the number of operations."
   - This is observed by the increased BFS iterations and enqueuing operations in the slow input.

2. **Complex Maze Structures:**
   - "When the museum layout has complex structures or narrow passages, the BFS functions can get trapped into more elaborate exploration, especially when transitions between passable and impassable areas are frequent."
   - The higher conditional checks and queue operations in the slow input indicate more intricate traversal paths.

3. **Repeated Calculations:**
   - "If there are many starting positions (`k` is large) and they fall within the same explored areas, the overhead of re-exploring known regions contributes to slow performance."
   - This is partially indicated by the repeated BFS starts despite significant overlap in exploration, as shown in the slow input.

These invariants help pinpoint scenarios leading to performance degradation while providing a generalized understanding of potential slow paths without relying on specific input values. They align well with the input constraints and problem structure (e.g., handling up to 1000x1000 grids and 100,000 starting positions).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Igor is in the museum and he wants to see as many pictures as possible.

Museum can be represented as a rectangular field of n × m cells. Each cell is either empty or impassable. Empty cells are marked with '.', impassable cells are marked with '*'. Every two adjacent cells of different types (one empty and one impassable) are divided by a wall containing one picture.

At the beginning Igor is in some empty cell. At every moment he can move to any empty cell that share a side with the current one.

For several starting positions you should calculate the maximum number of pictures that Igor can see. Igor is able to see the picture only if he is in the cell adjacent to the wall with this picture. Igor have a lot of time, so he will examine every picture he can see.

Input

First line of the input contains three integers n, m and k (3 ≤ n, m ≤ 1000, 1 ≤ k ≤ min(n·m, 100 000)) — the museum dimensions and the number of starting positions to process.

Each of the next n lines contains m symbols '.', '*' — the description of the museum. It is guaranteed that all border cells are impassable, so Igor can't go out from the museum.

Each of the last k lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) — the row and the column of one of Igor's starting positions respectively. Rows are numbered from top to bottom, columns — from left to right. It is guaranteed that all starting positions are empty cells.

Output

Print k integers — the maximum number of pictures, that Igor can see if he starts in corresponding position.

Examples

Input

5 6 3
******
*..*.*
******
*....*
******
2 2
2 5
4 3


Output

6
4
10


Input

4 4 1
****
*..*
*.**
****
3 2


Output

8

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as Checker Functions in C++

Here, I will translate the derived performance-characterizing invariants from natural language into C++ checker functions.

#### Invariant 1: Large Connected Components
The slowdown occurs when a large area of connected empty cells is traversed. We need to monitor this during BFS traversal.

```cpp
void check_large_component_invariant(int componentSize, int threshold) {
    if (componentSize > threshold) {
        cerr << "Warning: Large connected component invariant triggered - excessive BFS traversal" << endl;
        abort();
    }
}
```

#### Invariant 2: Complex Maze Structures
Complex structures with frequent transitions between empty and impassable cells may trigger a slowdown. We can detect this by counting the number of boundary walls during traversal.

```cpp
void check_complex_structure_invariant(int wallsCount, int threshold) {
    if (wallsCount > threshold) {
        cerr << "Warning: Complex structure invariant triggered - frequent transitions" << endl;
        abort();
    }
}
```

#### Invariant 3: Repeated Calculations
If multiple starting positions initiate BFS in already known areas, it's inefficient. This can be checked during the BFS initialization phase.

```cpp
void check_repeated_calculations_invariant(int startCount, int threshold) {
    if (startCount > threshold) {
        cerr << "Warning: Repeated calculations invariant triggered - multiple BFS from same components" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checker Functions into the Original C++ Code

Below is the original program, now with the checker functions integrated at appropriate places to avoid performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

const int N = 1005;
const long long mod = 1000000007ll;
int n, m;
int cnt;
int dx[4] = {0, 0, 1, -1};
int dy[4] = {1, -1, 0, 0};
char a[N][N];
bool vis[N][N], vis2[N][N];

// Checker functions
void check_large_component_invariant(int componentSize, int threshold) {
    if (componentSize > threshold) {
        cerr << "Warning: Large connected component invariant triggered - excessive BFS traversal" << endl;
        abort();
    }
}

void check_complex_structure_invariant(int wallsCount, int threshold) {
    if (wallsCount > threshold) {
        cerr << "Warning: Complex structure invariant triggered - frequent transitions" << endl;
        abort();
    }
}

void check_repeated_calculations_invariant(int startCount, int threshold) {
    if (startCount > threshold) {
        cerr << "Warning: Repeated calculations invariant triggered - multiple BFS from same components" << endl;
        abort();
    }
}

void bfs1(int x, int y) {
    queue<pair<int, int>> q;
    q.push({x, y});
    int wallsCount = 0;
    int componentSize = 0;
    
    while (!q.empty()) {
        pair<int, int> p = q.front();
        q.pop();
        int cx = p.first, cy = p.second;
        componentSize++;
        
        for (int i = 0; i < 4; i++) {
            int tx = cx + dx[i], ty = cy + dy[i];
            if (tx < 1 || tx > n || ty < 1 || ty > m || vis[tx][ty]) continue;
            if (a[tx][ty] == '*') {
                wallsCount++;
                cnt++;
                continue;
            }
            vis[tx][ty] = 1;
            q.push({tx, ty});
        }
    }
    // Check for large connected components.
    check_large_component_invariant(componentSize, 500); // Adjustable threshold
    // Check for complex structure.
    check_complex_structure_invariant(wallsCount, 100); // Adjustable threshold
}

int ans[N][N];

void bfs2(int x, int y) {
    queue<pair<int, int>> q;
    q.push({x, y});
    while (!q.empty()) {
        pair<int, int> p = q.front();
        q.pop();
        int cx = p.first, cy = p.second;
        ans[cx][cy] = cnt;
        for (int i = 0; i < 4; i++) {
            int tx = cx + dx[i], ty = cy + dy[i];
            if (tx < 1 || tx > n || ty < 1 || ty > m || vis2[tx][ty]) continue;
            if (a[tx][ty] == '*') continue;
            vis2[tx][ty] = 1;
            q.push({tx, ty});
        }
    }
}

int main() {
    int i, j;
    int T;
    cin >> n >> m >> T;
    for (i = 1; i <= n; i++) {
        cin >> (a[i] + 1);
    }
    
    int startCount = 0; // To track repeated calculations for starting points
    
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= m; j++) {
            if (!vis[i][j] && a[i][j] != '*') {
                vis[i][j] = 1;
                cnt = 0;
                bfs1(i, j);
                bfs2(i, j);
                startCount++;
            }
        }
    }
    
    // Check for repeated calculations
    check_repeated_calculations_invariant(startCount, n * m / 10); // Adjustable threshold
    
    while (T--) {
        int x, y;
        cin >> x >> y;
        cout << ans[x][y] << endl;
    }
    
    return 0;
}
```

### Explanation of Check Placement:

- **`check_large_component_invariant`**: Added after BFS traversal to warn if a connected component is too large.
- **`check_complex_structure_invariant`**: Added inside BFS to monitor the number of wall transitions.
- **`check_repeated_calculations_invariant`**: Added after the initial exploration to prevent redundant BFS traversals from similar starting positions.

These checks help identify potential slowdowns by monitoring large connected regions, complex structures, and redundant calculations without impacting the main execution flow.

