system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Sam has been teaching Jon the Game of Stones to sharpen his mind and help him devise a strategy to fight the white walkers. The rules of this game are quite simple: 

  * The game starts with n piles of stones indexed from 1 to n. The i-th pile contains si stones.
  * The players make their moves alternatively. A move is considered as removal of some number of stones from a pile. Removal of 0 stones does not count as a move.
  * The player who is unable to make a move loses.



Now Jon believes that he is ready for battle, but Sam does not think so. To prove his argument, Sam suggested that they play a modified version of the game.

In this modified version, no move can be made more than once on a pile. For example, if 4 stones are removed from a pile, 4 stones cannot be removed from that pile again.

Sam sets up the game and makes the first move. Jon believes that Sam is just trying to prevent him from going to battle. Jon wants to know if he can win if both play optimally.

Input

First line consists of a single integer n (1 ≤ n ≤ 106) — the number of piles.

Each of next n lines contains an integer si (1 ≤ si ≤ 60) — the number of stones in i-th pile.

Output

Print a single line containing "YES" (without quotes) if Jon wins, otherwise print "NO" (without quotes)

Examples

Input

1
5


Output

NO

Input

2
1
2


Output

YES

Note

In the first case, Sam removes all the stones and Jon loses.

In second case, the following moves are possible by Sam: <image>

In each of these cases, last move can be made by Jon to win the game as follows: <image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
map<pair<int, long long>, int> dp;
int n, s[1000010];
int calc(pair<int, long long> u) {
  if (dp.count(u) > 0) return dp[u];
  if (u.first == 0) return dp[u] = 0;
  vector<bool> g(61);
  for (int i = 1; i <= u.first; ++i) {
    if (u.second & (1ll << i)) continue;
    g[calc({u.first - i, u.second | (1ll << i)})] = true;
  }
  int x = 0;
  while (g[x]) ++x;
  return dp[u] = x;
}
int main() {
  scanf("%d", &n);
  int ans = 0;
  for (int i = 0; i < n; ++i) {
    scanf("%d", &s[i]);
    ans = ans ^ calc({s[i], 0});
  }
  printf("%s\n", ans != 0 ? "NO" : "YES");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

6
34
44
35
55
2
51


(G.2) Fast Input

6
34
44
35
55
2
36


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
map<pair<int, long long>, int> dp; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, s[1000010]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int calc(pair<int, long long> u) { /* line 5 slow_hit_count: 581375, fast_hit_count: 422808 */
  if (dp.count(u) > 0) return dp[u]; /* line 6 slow_hit_count: 581375, fast_hit_count: 422808 */
  if (u.first == 0) return dp[u] = 0; /* line 7 slow_hit_count: 116005, fast_hit_count: 85303 */
  vector<bool> g(61); /* line 8 slow_hit_count: 102616, fast_hit_count: 75343 */
  for (int i = 1; i <= u.first; ++i) { /* line 9 slow_hit_count: 925953, fast_hit_count: 674001 */
    if (u.second & (1ll << i)) continue; /* line 10 slow_hit_count: 823337, fast_hit_count: 598658 */
    g[calc({u.first - i, u.second | (1ll << i)})] = true; /* line 11 slow_hit_count: 581369, fast_hit_count: 422802 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  int x = 0; /* line 13 slow_hit_count: 102616, fast_hit_count: 75343 */
  while (g[x]) ++x; /* line 14 slow_hit_count: 298965, fast_hit_count: 218598 */
  return dp[u] = x; /* line 15 slow_hit_count: 102616, fast_hit_count: 75343 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 0; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 20 slow_hit_count: 7, fast_hit_count: 7 */
    scanf("%d", &s[i]); /* line 21 slow_hit_count: 6, fast_hit_count: 6 */
    ans = ans ^ calc({s[i], 0}); /* line 22 slow_hit_count: 6, fast_hit_count: 6 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%s\n", ans != 0 ? "NO" : "YES"); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks and derive performance-characterizing invariants, let's first go through the process step-by-step:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-level Hit Counts:**
   - The `calc` function is heavily called, specifically lines 5 (function entry), 9 (for loop), and 11 (recursive call) have significantly higher hit counts in the slow run compared to the fast run.

2. **Pinpoint Lines with Significant Hits in the Slow Input:**
   - **Line 9 (`for` loop):** The loop iterates over indices up to `u.first`, which represents the number of stones in the current pile. Both the slow and fast inputs have high counts here, but it's significantly higher in the slow input.
   - **Line 11 (recursive call):** The recursive call to `calc` contributes to performance degradation, with higher hit counts in the slow input indicating deeper or more frequent recursion.
   - **Line 14 (while loop):** The while loop increments `x` until it finds a `false` in the `g` vector. This line also has more hits in the slow input, indicating more iterations.

3. **Inferences:**
   - The recursion depth and the number of recursive calls are higher in the slow input, leading to performance degradation. The loop on line 9 likely causes more recursive calls due to a higher number of stones or specific stone configurations.
   - The `while (g[x]) ++x;` on line 14 suggests a longer search for a `false` value in the `g` vector, which might indicate a higher nim-sum or more complex move interactions.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some natural language statements that describe conditions under which the program likely enters a slow path:

1. **High Stone Count Invariant:**
   - *Natural Language Description:* "When a pile contains a large number of stones, leading to increased recursion depth and more recursive calls, the program may slow down significantly."
   - *Possible Implementation:* This could be checked for piles with a stone count approaching the upper limit of 60.

2. **Complex Move Invariant:**
   - *Natural Language Description:* "If the configuration of stones in a game state leads to a complex series of optimal moves, resulting in high recursion depth with many different branches, the program execution time increases."
   - *Possible Implementation:* Check if certain combinations of pile sizes, particularly those that might lead to deep recursion or encountering many game states, are present.

3. **High Recursion and State Variation Invariant:**
   - *Natural Language Description:* "When the recursion encounters many unique game states, possibly due to numerous legal moves in a given configuration, the computational overhead increases, potentially leading to slower execution."
   - *Possible Implementation:* Monitor the number of unique states being stored in the `dp` map or the depth of recursion (though the latter is more challenging without modifying the recursive function).

By focusing on these conditions, we can better understand the triggers for slow performance and guide optimizations or problem constraints for testing and development.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Sam has been teaching Jon the Game of Stones to sharpen his mind and help him devise a strategy to fight the white walkers. The rules of this game are quite simple: 

  * The game starts with n piles of stones indexed from 1 to n. The i-th pile contains si stones.
  * The players make their moves alternatively. A move is considered as removal of some number of stones from a pile. Removal of 0 stones does not count as a move.
  * The player who is unable to make a move loses.



Now Jon believes that he is ready for battle, but Sam does not think so. To prove his argument, Sam suggested that they play a modified version of the game.

In this modified version, no move can be made more than once on a pile. For example, if 4 stones are removed from a pile, 4 stones cannot be removed from that pile again.

Sam sets up the game and makes the first move. Jon believes that Sam is just trying to prevent him from going to battle. Jon wants to know if he can win if both play optimally.

Input

First line consists of a single integer n (1 ≤ n ≤ 106) — the number of piles.

Each of next n lines contains an integer si (1 ≤ si ≤ 60) — the number of stones in i-th pile.

Output

Print a single line containing "YES" (without quotes) if Jon wins, otherwise print "NO" (without quotes)

Examples

Input

1
5


Output

NO

Input

2
1
2


Output

YES

Note

In the first case, Sam removes all the stones and Jon loses.

In second case, the following moves are possible by Sam: <image>

In each of these cases, last move can be made by Jon to win the game as follows: <image>

Solution (C++ code):
{solution}


assistant: To address the tasks outlined, let's proceed through Phase 3 and Phase 4:

### Phase 3: Implementing Natural Language Invariants in C++

Based on the previously identified natural language performance-characterizing invariants, we will write C++ code snippets to check those conditions at runtime.

1. **High Stone Count Invariant:**
   - This invariant checks if any pile contains a large number of stones, leading to increased recursion depth.
   
   ```cpp
   void check_high_stone_count(int stones) {
       if (stones > 50) {  // Threshold is subjective but considering near upper limit
           cerr << "Warning: High stone count invariant triggered - large number of stones in a pile" << endl;
           abort();
       }
   }
   ```

2. **Complex Move Invariant:**
   - This invariant checks for complex move configurations that could lead to high recursion depth with many branches.
   
   ```cpp
   void check_complex_move_invariant(int recursionDepth) {
       if (recursionDepth > 20) {  // Arbitrary threshold for recursion depth
           cerr << "Warning: Complex move invariant triggered - high recursion depth" << endl;
           abort();
       }
   }
   ```

3. **High Recursion and State Variation Invariant:**
   - This invariant checks for high recursion and state variation, which could increase computational overhead.
   
   ```cpp
   void check_high_recursion(int uniqueStates) {
       if (uniqueStates > 5000) {  // Arbitrary threshold for unique game states
           cerr << "Warning: High recursion and state variation invariant triggered - many unique states" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Original Program

Now, let's integrate these checkers into the existing C++ program. We should place the checks in a way that avoids adding overhead in tight loops and ensure that they serve as effective performance bottleneck detectors.

```cpp
#include <bits/stdc++.h>
using namespace std;

map<pair<int, long long>, int> dp;
int n, s[1000010];

void check_high_stone_count(int stones) {
    if (stones > 50) {  // Threshold is subjective but considering near upper limit
        cerr << "Warning: High stone count invariant triggered - large number of stones in a pile" << endl;
        abort();
    }
}

void check_complex_move_invariant(int recursionDepth) {
    if (recursionDepth > 20) {  // Arbitrary threshold for recursion depth
        cerr << "Warning: Complex move invariant triggered - high recursion depth" << endl;
        abort();
    }
}

void check_high_recursion(int uniqueStates) {
    if (uniqueStates > 5000) {  // Arbitrary threshold for unique game states
        cerr << "Warning: High recursion and state variation invariant triggered - many unique states" << endl;
        abort();
    }
}

int calc(pair<int, long long> u) {
    if (dp.count(u) > 0) return dp[u];
    if (u.first == 0) return dp[u] = 0;
    
    vector<bool> g(61);
    for (int i = 1; i <= u.first; ++i) {
        if (u.second & (1ll << i)) continue;
        
        // Check recursion depth or state variation before recursive call
        check_complex_move_invariant(dp.size()); // Example: checking size of memoization map
        g[calc({u.first - i, u.second | (1ll << i)})] = true;
    }
    
    int x = 0;
    while (g[x]) ++x;
    return dp[u] = x;
}

int main() {
    scanf("%d", &n);
    int ans = 0;
    
    for (int i = 0; i < n; ++i) {
        scanf("%d", &s[i]);
        
        // Check high stone count before calculation
        check_high_stone_count(s[i]);
        
        ans = ans ^ calc({s[i], 0});
    }
    
    // Check high recursion and state variation at the end if needed
    check_high_recursion(dp.size());
    
    printf("%s\n", ans != 0 ? "NO" : "YES");
    return 0;
}
```
### Explanation:
- **High Stone Count Check:** Placed before calling the `calc` function for each pile to ensure that piles with a high number of stones are flagged.
- **Complex Move Invariant Check:** Inserted within the `calc` function before the recursive call to monitor recursion depth or variations in reachable game states.
- **High Recursion and State Variation Check:** Placed at the end of processing to ensure that the total number of unique states stored doesn't exceed a set threshold.

These checks are designed to help identify conditions that lead to slow performances without significantly impacting the program's efficiency.

