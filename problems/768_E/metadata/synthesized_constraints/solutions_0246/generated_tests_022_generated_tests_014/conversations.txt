system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Sam has been teaching Jon the Game of Stones to sharpen his mind and help him devise a strategy to fight the white walkers. The rules of this game are quite simple: 

  * The game starts with n piles of stones indexed from 1 to n. The i-th pile contains si stones.
  * The players make their moves alternatively. A move is considered as removal of some number of stones from a pile. Removal of 0 stones does not count as a move.
  * The player who is unable to make a move loses.



Now Jon believes that he is ready for battle, but Sam does not think so. To prove his argument, Sam suggested that they play a modified version of the game.

In this modified version, no move can be made more than once on a pile. For example, if 4 stones are removed from a pile, 4 stones cannot be removed from that pile again.

Sam sets up the game and makes the first move. Jon believes that Sam is just trying to prevent him from going to battle. Jon wants to know if he can win if both play optimally.

Input

First line consists of a single integer n (1 ≤ n ≤ 106) — the number of piles.

Each of next n lines contains an integer si (1 ≤ si ≤ 60) — the number of stones in i-th pile.

Output

Print a single line containing "YES" (without quotes) if Jon wins, otherwise print "NO" (without quotes)

Examples

Input

1
5


Output

NO

Input

2
1
2


Output

YES

Note

In the first case, Sam removes all the stones and Jon loses.

In second case, the following moves are possible by Sam: <image>

In each of these cases, last move can be made by Jon to win the game as follows: <image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n;
map<pair<int, long long>, int> m;
int f(int s, long long mask) {
  if (s == 0) {
    return 0;
  }
  pair<int, long long> node = make_pair(s, mask);
  if (m.count(node)) {
    return m[node];
  }
  vector<bool> v(s + 1, false);
  for (int i = 1; i <= s; i++) {
    if ((1LL << (i - 1)) & mask) {
      v[f(s - i, mask ^ (1LL << (i - 1)))] = true;
    }
  }
  for (int i = 0; i <= s; i++) {
    if (!v[i]) {
      m[node] = i;
      break;
    }
  }
  return m[node];
}
int main() {
  scanf("%d", &n);
  int ans = 0;
  int s;
  for (int i = 0; i < n; i++) {
    scanf("%d", &s);
    ans ^= f(s, (1LL << s) - 1);
  }
  printf("%s\n", ans == 0 ? "YES" : "NO");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

6
34
44
35
55
2
51


(G.2) Fast Input

6
34
44
35
55
2
36


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
map<pair<int, long long>, int> m; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int f(int s, long long mask) { /* line 5 slow_hit_count: 581375, fast_hit_count: 422808 */
  if (s == 0) { /* line 6 slow_hit_count: 581375, fast_hit_count: 422808 */
    return 0; /* line 7 slow_hit_count: 72363, fast_hit_count: 53141 */
  } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  pair<int, long long> node = make_pair(s, mask); /* line 9 slow_hit_count: 509012, fast_hit_count: 369667 */
  if (m.count(node)) { /* line 10 slow_hit_count: 509012, fast_hit_count: 369667 */
    return m[node]; /* line 11 slow_hit_count: 406396, fast_hit_count: 294324 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  vector<bool> v(s + 1, false); /* line 13 slow_hit_count: 102616, fast_hit_count: 75343 */
  for (int i = 1; i <= s; i++) { /* line 14 slow_hit_count: 925953, fast_hit_count: 674001 */
    if ((1LL << (i - 1)) & mask) { /* line 15 slow_hit_count: 823337, fast_hit_count: 598658 */
      v[f(s - i, mask ^ (1LL << (i - 1)))] = true; /* line 16 slow_hit_count: 581369, fast_hit_count: 422802 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= s; i++) { /* line 19 slow_hit_count: 298965, fast_hit_count: 218598 */
    if (!v[i]) { /* line 20 slow_hit_count: 298965, fast_hit_count: 218598 */
      m[node] = i; /* line 21 slow_hit_count: 102616, fast_hit_count: 75343 */
      break; /* line 22 slow_hit_count: 102616, fast_hit_count: 75343 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  return m[node]; /* line 25 slow_hit_count: 102616, fast_hit_count: 75343 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  int s; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 31 slow_hit_count: 7, fast_hit_count: 7 */
    scanf("%d", &s); /* line 32 slow_hit_count: 6, fast_hit_count: 6 */
    ans ^= f(s, (1LL << s) - 1); /* line 33 slow_hit_count: 6, fast_hit_count: 6 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%s\n", ans == 0 ? "YES" : "NO"); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issue and characterize the slow execution path for the provided C program, we can analyze the hit count information along with the program's logic. Here's a structured approach to identify potential bottlenecks and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison**:
   - The `f` function (line 5) is the most frequently called function in both the slow and fast inputs. It is a recursive function that significantly impacts performance.
   - Lines within the `f` function, especially the recursion-triggering line (line 16), show a markedly higher hit count for the slow input compared to the fast input.
   - The recursive nature of calls on line 16 (`v[f(s - i, mask ^ (1LL << (i - 1)))] = true;`) indicates that the recursion is a potential performance bottleneck.

2. **Interactions with Data Structures**:
   - The map `m` appears to be used for memoization, but lines 9 and 10 indicate a large number of lookups and insertions, suggesting frequent recalculations.
   - The vector `v` is repeatedly initialized and updated, especially seen at lines 13, 19, and 20, indicating potentially redundant operations based on input patterns.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, here are the natural language performance invariants:

1. **Invariant 1: Depth and Frequency of Recursion**
   - Natural Language Description: "If the number of stones `si` in any pile results in deep recursion due to high values of `s`, the program may slow down significantly, as the recursive function explores many states. This is particularly evident when `s` approaches its upper limit (e.g., near 60) and the recursion tree becomes large."
   
2. **Invariant 2: Inefficient Cache Usage**
   - Natural Language Description: "If the memoization map is heavily utilized but frequently results in cache misses (i.e., repeated recalculations), the program's performance may degrade. This happens when many distinct game states are explored due to high variability in `si` values, leading to inefficient caching."
   
3. **Invariant 3: High Combinatorial Complexity**
   - Natural Language Description: "When the combination of stones in the piles leads to a high number of possible moves, especially when multiple piles contain a large number of stones, the computational complexity can increase sharply. This is exacerbated when `n` is large, leading to a large combination space."

These performance-characterizing invariants highlight conditions that can trigger a slowdown in the program, focusing on the recursive nature, memoization inefficiency, and combinatorial complexity of the problem's solution. By understanding these triggers, future inputs that may cause slow performance can be anticipated and mitigated.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Sam has been teaching Jon the Game of Stones to sharpen his mind and help him devise a strategy to fight the white walkers. The rules of this game are quite simple: 

  * The game starts with n piles of stones indexed from 1 to n. The i-th pile contains si stones.
  * The players make their moves alternatively. A move is considered as removal of some number of stones from a pile. Removal of 0 stones does not count as a move.
  * The player who is unable to make a move loses.



Now Jon believes that he is ready for battle, but Sam does not think so. To prove his argument, Sam suggested that they play a modified version of the game.

In this modified version, no move can be made more than once on a pile. For example, if 4 stones are removed from a pile, 4 stones cannot be removed from that pile again.

Sam sets up the game and makes the first move. Jon believes that Sam is just trying to prevent him from going to battle. Jon wants to know if he can win if both play optimally.

Input

First line consists of a single integer n (1 ≤ n ≤ 106) — the number of piles.

Each of next n lines contains an integer si (1 ≤ si ≤ 60) — the number of stones in i-th pile.

Output

Print a single line containing "YES" (without quotes) if Jon wins, otherwise print "NO" (without quotes)

Examples

Input

1
5


Output

NO

Input

2
1
2


Output

YES

Note

In the first case, Sam removes all the stones and Jon loses.

In second case, the following moves are possible by Sam: <image>

In each of these cases, last move can be made by Jon to win the game as follows: <image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checks for Performance Invariants

Based on the performance-characterizing invariants identified previously, I will now implement the corresponding checker code in C++.

**Invariant 1: Depth and Frequency of Recursion**

```cpp
void check_recursion_depth(int s) {
    // Check for potential slowdown due to high depth of recursion
    if (s > 50) {
        cerr << "Warning: Recursion depth invariant triggered - high depth due to large s" << endl;
        abort();
    }
}
```

**Invariant 2: Inefficient Cache Usage**

```cpp
void check_cache_usage(int cacheSize, int distinctStates) {
    // Check for inefficient cache usage with a high number of distinct states
    if (cacheSize > 50000 && distinctStates > 1000) {
        cerr << "Warning: Cache usage invariant triggered - high number of distinct states with large cache size" << endl;
        abort();
    }
}
```

**Invariant 3: High Combinatorial Complexity**

```cpp
void check_combinatorial_complexity(int n, int maxStones) {
    // Check for high combinatorial complexity due to large n and high stone counts
    if (n > 500 && maxStones > 50) {
        cerr << "Warning: Combinatorial complexity invariant triggered - large n and high stone counts" << endl;
        abort();
    }
}
```

### Phase 4: Instrumenting the Original C++ Code

Now, let's integrate these checkers into the original C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n;
map<pair<int, long long>, int> m;

void check_recursion_depth(int s) {
    if (s > 50) {
        cerr << "Warning: Recursion depth invariant triggered - high depth due to large s" << endl;
        abort();
    }
}

void check_cache_usage(int cacheSize, int distinctStates) {
    if (cacheSize > 50000 && distinctStates > 1000) {
        cerr << "Warning: Cache usage invariant triggered - high number of distinct states with large cache size" << endl;
        abort();
    }
}

void check_combinatorial_complexity(int n, int maxStones) {
    if (n > 500 && maxStones > 50) {
        cerr << "Warning: Combinatorial complexity invariant triggered - large n and high stone counts" << endl;
        abort();
    }
}

int f(int s, long long mask) {
    check_recursion_depth(s);  // Check recursion depth before proceeding

    if (s == 0) {
        return 0;
    }
    pair<int, long long> node = make_pair(s, mask);
    if (m.count(node)) {
        return m[node];
    }
    vector<bool> v(s + 1, false);
    for (int i = 1; i <= s; i++) {
        if ((1LL << (i - 1)) & mask) {
            v[f(s - i, mask ^ (1LL << (i - 1)))] = true;
        }
    }
    for (int i = 0; i <= s; i++) {
        if (!v[i]) {
            m[node] = i;
            break;
        }
    }
    return m[node];
}

int main() {
    scanf("%d", &n);
    
    int maxStones = 0;
    int ans = 0;
    int s;
    
    for (int i = 0; i < n; i++) {
        scanf("%d", &s);
        maxStones = max(maxStones, s);
        ans ^= f(s, (1LL << s) - 1);
    }
    
    // Check combinatorial complexity after input processing
    check_combinatorial_complexity(n, maxStones);
    
    // Check cache usage after the computation
    check_cache_usage(m.size(), n);
    
    printf("%s\n", ans == 0 ? "YES" : "NO");
    return 0;
}
```

### Explanation

- **Recursion Depth Check**: Added before any recursive call within `f`, ensuring recursion depth does not exceed a reasonable threshold.
- **Combinatorial Complexity Check**: Added after reading all inputs, as it depends on overall problem size and maximum stones in any pile.
- **Cache Usage Check**: After completing all computations, this ensures the map size and distinct states do not reach a potentially inefficient threshold.

These checks are strategically placed to avoid significant performance overhead while ensuring any potential trigger for slow execution is caught promptly.

