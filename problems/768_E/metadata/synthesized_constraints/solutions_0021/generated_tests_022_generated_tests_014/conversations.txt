system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Sam has been teaching Jon the Game of Stones to sharpen his mind and help him devise a strategy to fight the white walkers. The rules of this game are quite simple: 

  * The game starts with n piles of stones indexed from 1 to n. The i-th pile contains si stones.
  * The players make their moves alternatively. A move is considered as removal of some number of stones from a pile. Removal of 0 stones does not count as a move.
  * The player who is unable to make a move loses.



Now Jon believes that he is ready for battle, but Sam does not think so. To prove his argument, Sam suggested that they play a modified version of the game.

In this modified version, no move can be made more than once on a pile. For example, if 4 stones are removed from a pile, 4 stones cannot be removed from that pile again.

Sam sets up the game and makes the first move. Jon believes that Sam is just trying to prevent him from going to battle. Jon wants to know if he can win if both play optimally.

Input

First line consists of a single integer n (1 ≤ n ≤ 106) — the number of piles.

Each of next n lines contains an integer si (1 ≤ si ≤ 60) — the number of stones in i-th pile.

Output

Print a single line containing "YES" (without quotes) if Jon wins, otherwise print "NO" (without quotes)

Examples

Input

1
5


Output

NO

Input

2
1
2


Output

YES

Note

In the first case, Sam removes all the stones and Jon loses.

In second case, the following moves are possible by Sam: <image>

In each of these cases, last move can be made by Jon to win the game as follows: <image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
map<pair<int, long long>, int> gru;
int grundy(int u, long long w) {
  if (u == 0) return 0;
  if (gru.find(make_pair(u, w)) != gru.end()) return gru[make_pair(u, w)];
  set<int> yo;
  for (int i = 1; i <= u; i++) {
    if ((w & (1 << i)) == 0) {
      yo.insert(grundy(u - i, (w | (1 << i))));
    }
  }
  set<int>::iterator it;
  int ans = 0;
  for (it = yo.begin(); it != yo.end(); it++) {
    if (ans != *it) {
      break;
    }
    ans++;
  }
  return gru[make_pair(u, w)] = ans;
}
int main() {
  int ans = 0;
  int n, x;
  cin >> n;
  for (int i = 0; i < n; i++) {
    scanf("%d", &x);
    ans ^= grundy(x, 0);
  }
  if (ans == 0)
    cout << "YES";
  else
    cout << "NO";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

6
34
44
35
55
2
51


(G.2) Fast Input

6
34
44
35
55
2
36


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
map<pair<int, long long>, int> gru; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int grundy(int u, long long w) { /* line 4 slow_hit_count: 571520, fast_hit_count: 415528 */
  if (u == 0) return 0; /* line 5 slow_hit_count: 571520, fast_hit_count: 415528 */
  if (gru.find(make_pair(u, w)) != gru.end()) return gru[make_pair(u, w)]; /* line 6 slow_hit_count: 501336, fast_hit_count: 363960 */
  set<int> yo; /* line 7 slow_hit_count: 99919, fast_hit_count: 73390 */
  for (int i = 1; i <= u; i++) { /* line 8 slow_hit_count: 911305, fast_hit_count: 663174 */
    if ((w & (1 << i)) == 0) { /* line 9 slow_hit_count: 811386, fast_hit_count: 589784 */
      yo.insert(grundy(u - i, (w | (1 << i)))); /* line 10 slow_hit_count: 571514, fast_hit_count: 415522 */
    } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  set<int>::iterator it; /* line 13 slow_hit_count: 99919, fast_hit_count: 73390 */
  int ans = 0; /* line 14 slow_hit_count: 99919, fast_hit_count: 73390 */
  for (it = yo.begin(); it != yo.end(); it++) { /* line 15 slow_hit_count: 292491, fast_hit_count: 213894 */
    if (ans != *it) { /* line 16 slow_hit_count: 200080, fast_hit_count: 145994 */
      break; /* line 17 slow_hit_count: 7508, fast_hit_count: 5490 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    ans++; /* line 19 slow_hit_count: 192572, fast_hit_count: 140504 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  return gru[make_pair(u, w)] = ans; /* line 21 slow_hit_count: 99919, fast_hit_count: 73390 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 0; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int n, x; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 27 slow_hit_count: 7, fast_hit_count: 7 */
    scanf("%d", &x); /* line 28 slow_hit_count: 6, fast_hit_count: 6 */
    ans ^= grundy(x, 0); /* line 29 slow_hit_count: 6, fast_hit_count: 6 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  if (ans == 0) /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "YES"; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "NO"; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the provided C program, we can follow the structured approach outlined in the task description. Here's the analysis broken down into the required phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - Line 4 (`int grundy(int u, long long w)`) and Line 5 (`if (u == 0) return 0;`) both have significantly higher hit counts for the slow input compared to the fast one, indicating that the `grundy` function is a hotspot.
   - Line 6 (`if (gru.find(make_pair(u, w)) != gru.end()) return gru[make_pair(u, w)];`) shows a higher hit count for the slow input, suggesting frequent cache misses or re-computation.
   - Line 8 (`for (int i = 1; i <= u; i++)`) and Line 9 (`if ((w & (1 << i)) == 0)`) indicate that the loop within `grundy` is iterating more times for the slow input.
   - Lines 10 (`yo.insert(grundy(u - i, (w | (1 << i))));`) and 15-19 inside the nested loop also have notably higher hit counts for the slow input, pointing to deeper recursion or larger sets being processed.

2. **Inference on Interaction with Data Structures:**
   - The `grundy` function is likely getting called recursively many times with different parameters due to the higher branching factor or lack of effective caching via the `gru` map.
   - The `yo` set is likely being populated with more elements in the slow case, resulting in more iterations in the loop over `yo`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis of the code's behavior with different inputs, here are natural language performance invariants that describe the conditions under which the program slows down:

1. **Invariant 1: High Recursive Depth and State Space Exploration**
   - **Natural Language Description:** "The performance may degrade when the recursive function `grundy` explores a large search space due to high pile sizes, leading to deep recursion and numerous state evaluations."
   - **Explanation:** The function `grundy` is called recursively, and if the number of stones in piles (`si`) is large, it can trigger deeper recursion and more state space exploration.

2. **Invariant 2: Ineffective Caching of Computed States**
   - **Natural Language Description:** "The program slows down if computed states are not effectively cached, resulting in repetitive calculations in the `grundy` function for large values of `u`."
   - **Explanation:** The map `gru` is used to cache results of subproblems, but if many unique states are encountered (due to input characteristics), the caching mechanism may miss often, leading to recomputation.

3. **Invariant 3: High Branching Factor in Recursive Calls**
   - **Natural Language Description:** "A high branching factor in recursive calls, especially when pile sizes `si` are large, can cause excessive computation as the code explores many moves."
   - **Explanation:** The inner loop in `grundy` (lines 8-10) executes `u` times, and if `u` is large (due to large `si` values), this can lead to many recursive calls.

These invariants help in understanding performance bottlenecks without relying on specific input values. They highlight conditions that may cause the program to slow down, such as large initial pile sizes, ineffective caching, and high branching factors in recursion.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Sam has been teaching Jon the Game of Stones to sharpen his mind and help him devise a strategy to fight the white walkers. The rules of this game are quite simple: 

  * The game starts with n piles of stones indexed from 1 to n. The i-th pile contains si stones.
  * The players make their moves alternatively. A move is considered as removal of some number of stones from a pile. Removal of 0 stones does not count as a move.
  * The player who is unable to make a move loses.



Now Jon believes that he is ready for battle, but Sam does not think so. To prove his argument, Sam suggested that they play a modified version of the game.

In this modified version, no move can be made more than once on a pile. For example, if 4 stones are removed from a pile, 4 stones cannot be removed from that pile again.

Sam sets up the game and makes the first move. Jon believes that Sam is just trying to prevent him from going to battle. Jon wants to know if he can win if both play optimally.

Input

First line consists of a single integer n (1 ≤ n ≤ 106) — the number of piles.

Each of next n lines contains an integer si (1 ≤ si ≤ 60) — the number of stones in i-th pile.

Output

Print a single line containing "YES" (without quotes) if Jon wins, otherwise print "NO" (without quotes)

Examples

Input

1
5


Output

NO

Input

2
1
2


Output

YES

Note

In the first case, Sam removes all the stones and Jon loses.

In second case, the following moves are possible by Sam: <image>

In each of these cases, last move can be made by Jon to win the game as follows: <image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checker Code for Performance Invariants

Below are the C++ code snippets implementing the performance-characterizing invariants translated from natural language descriptions:

1. **Invariant 1: High Recursive Depth and State Space Exploration**
   - **Checker Code:**
     ```cpp
     void check_recursive_depth_invariant(int pile_size) {
         if (pile_size > 50) { // Assuming pile_size as a threshold for exploring large states
             cerr << "Warning: Performance bottleneck due to deep recursion or large state space!" << endl;
             abort();
         }
     }
     ```

2. **Invariant 2: Ineffective Caching of Computed States**
   - **Checker Code:**
     ```cpp
     void check_caching_invariant(int map_size) {
         if (map_size > 100000) { // Assuming a large map size leads to ineffective caching
             cerr << "Warning: Performance bottleneck due to insufficient caching of states!" << endl;
             abort();
         }
     }
     ```

3. **Invariant 3: High Branching Factor in Recursive Calls**
   - **Checker Code:**
     ```cpp
     void check_branching_factor_invariant(int u) {
         if (u > 50) { // Assuming high branching factor when u is large
             cerr << "Warning: Performance bottleneck due to high branching factor in recursion!" << endl;
             abort();
         }
     }
     ```

### Phase 4: Integrate Checker Code into the Original Program

Here is the modified C++ program with the checker functions integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Map to store computed Grundy numbers
map<pair<int, long long>, int> gru;

// Checker function for large pile sizes
void check_recursive_depth_invariant(int pile_size) {
    if (pile_size > 50) { // Assuming pile_size as a threshold for exploring large states
        cerr << "Warning: Performance bottleneck due to deep recursion or large state space!" << endl;
        abort();
    }
}

// Checker function for map size indicating ineffective caching
void check_caching_invariant(int map_size) {
    if (map_size > 100000) { // Assuming a large map size leads to ineffective caching
        cerr << "Warning: Performance bottleneck due to insufficient caching of states!" << endl;
        abort();
    }
}

// Checker function for high branching factor
void check_branching_factor_invariant(int u) {
    if (u > 50) { // Assuming high branching factor when u is large
        cerr << "Warning: Performance bottleneck due to high branching factor in recursion!" << endl;
        abort();
    }
}

int grundy(int u, long long w) {
    if (u == 0) return 0;
    if (gru.find(make_pair(u, w)) != gru.end()) return gru[make_pair(u, w)];

    // Checkers integrated before processing
    check_branching_factor_invariant(u);
    
    set<int> yo;
    for (int i = 1; i <= u; i++) {
        if ((w & (1 << i)) == 0) {
            yo.insert(grundy(u - i, (w | (1 << i))));
        }
    }
    set<int>::iterator it;
    int ans = 0;
    for (it = yo.begin(); it != yo.end(); it++) {
        if (ans != *it) {
            break;
        }
        ans++;
    }
    // Check caching invariant after inserting new states
    check_caching_invariant(gru.size());
    return gru[make_pair(u, w)] = ans;
}

int main() {
    int ans = 0;
    int n, x;
    cin >> n;
    for (int i = 0; i < n; i++) {
        scanf("%d", &x);

        // Check recursive depth invariant before calling grundy
        check_recursive_depth_invariant(x);

        ans ^= grundy(x, 0);
    }
    if (ans == 0)
        cout << "YES";
    else
        cout << "NO";
    return 0;
}
```

### Explanation of Inserted Checks:
- **check_recursive_depth_invariant:** Called before invoking the `grundy` function to ensure that the pile size (`si`) isn't too large, which could lead to deep recursion.
- **check_caching_invariant:** Called after computing Grundy numbers to monitor the size of the `gru` map for caching effectiveness.
- **check_branching_factor_invariant:** Integrated inside `grundy` to monitor the input size `u` that affects the branching factor, ensuring it doesn't trigger excessive recursive calls. 

Checks are placed outside of tight loops and critical paths to avoid adding overhead during normal execution, instead focusing on strategic points where recursion depth and state exploration are likely to increase.

