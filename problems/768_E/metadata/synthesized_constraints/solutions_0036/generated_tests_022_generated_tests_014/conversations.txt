system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Sam has been teaching Jon the Game of Stones to sharpen his mind and help him devise a strategy to fight the white walkers. The rules of this game are quite simple: 

  * The game starts with n piles of stones indexed from 1 to n. The i-th pile contains si stones.
  * The players make their moves alternatively. A move is considered as removal of some number of stones from a pile. Removal of 0 stones does not count as a move.
  * The player who is unable to make a move loses.



Now Jon believes that he is ready for battle, but Sam does not think so. To prove his argument, Sam suggested that they play a modified version of the game.

In this modified version, no move can be made more than once on a pile. For example, if 4 stones are removed from a pile, 4 stones cannot be removed from that pile again.

Sam sets up the game and makes the first move. Jon believes that Sam is just trying to prevent him from going to battle. Jon wants to know if he can win if both play optimally.

Input

First line consists of a single integer n (1 ≤ n ≤ 106) — the number of piles.

Each of next n lines contains an integer si (1 ≤ si ≤ 60) — the number of stones in i-th pile.

Output

Print a single line containing "YES" (without quotes) if Jon wins, otherwise print "NO" (without quotes)

Examples

Input

1
5


Output

NO

Input

2
1
2


Output

YES

Note

In the first case, Sam removes all the stones and Jon loses.

In second case, the following moves are possible by Sam: <image>

In each of these cases, last move can be made by Jon to win the game as follows: <image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
clock_t START;
inline long double TIME() {
  return (long double)(clock() - START) / CLOCKS_PER_SEC;
}
void SHOW() {
  cout << fixed << setprecision(10);
  cout << TIME() << " SECONDS FROM START\n";
}
long double TL = 2.0;
int calls = 0;
inline bool IS() {
  if (TL - TIME() < 0.1) return true;
  return false;
}
template <typename T1, typename T2>
inline bool amin(T1 &a, T2 b) {
  if (a > b) {
    a = b;
    return true;
  }
  return false;
}
template <typename T1, typename T2>
inline bool amax(T1 &a, T2 b) {
  if (a < b) {
    a = b;
    return true;
  }
  return false;
}
template <typename T1, typename T2>
ostream &operator<<(ostream &os, pair<T1, T2> &p) {
  os << p.first << ' ' << p.second;
  return os;
}
template <typename T1, typename T2>
istream &operator>>(istream &is, pair<T1, T2> &p) {
  is >> p.first >> p.second;
  return is;
}
template <typename T>
istream &operator>>(istream &is, vector<T> &v) {
  for (auto &u : v) is >> u;
  return is;
}
template <typename T>
ostream &operator<<(ostream &os, vector<T> &v) {
  for (auto &u : v) os << u << ' ';
  return os;
}
int hash_mod[4] = {1000000007, 998244353, 1000000009, 999999937},
    mod = hash_mod[rnd() % 4];
int hash_pows[4] = {179, 239, 1007, 2003}, P = hash_pows[rnd() % 4];
int binpow(int first, int p) {
  int res = 1;
  while (p) {
    if (p % 2) res = (res * first) % mod;
    first = (first * first) % mod;
    p /= 2;
  }
  return res;
}
const int N = 1e6 + 7, NS = 2e3 + 7, lg = 20, sq = 550, inf = 2e9 + 7;
const long double eps = 1e-8, pi = 3.14159265359;
int a[N], mx = 61, cnt[N];
map<long long, int> d[62];
int calc(int i, long long mask) {
  if (d[i].count(mask)) return d[i][mask];
  cnt[i]++;
  vector<int> can(mx, 0);
  for (int k = 0; k < i; k++) {
    if (mask & (1ll << k)) {
      int val = calc(i - (k + 1), (mask ^ (1 << k)));
      can[val] = 1;
    }
  }
  for (int k = 0; k < mx; k++) {
    if (!can[k]) {
      return d[i][mask] = k;
    }
  }
}
void solve() {
  int n;
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    amax(mx, a[i]);
  }
  d[0][0] = 0;
  int ans = 0;
  for (int i = 0; i < n; i++) {
    int first = a[i];
    ans ^= calc(first, (1ll << first) - 1);
  }
  if (ans)
    cout << "NO";
  else
    cout << "YES";
}
signed main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

6
34
44
35
55
2
51


(G.2) Fast Input

6
34
44
35
55
2
36


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
clock_t START; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
inline long double TIME() { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  return (long double)(clock() - START) / CLOCKS_PER_SEC; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void SHOW() { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  cout << fixed << setprecision(10); /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  cout << TIME() << " SECONDS FROM START\n"; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
long double TL = 2.0; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int calls = 0; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
inline bool IS() { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  if (TL - TIME() < 0.1) return true; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2> /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
inline bool amin(T1 &a, T2 b) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  if (a > b) { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    a = b; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    return true; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2> /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
inline bool amax(T1 &a, T2 b) { /* line 27 slow_hit_count: 6, fast_hit_count: 6 */
  if (a < b) { /* line 28 slow_hit_count: 6, fast_hit_count: 6 */
    a = b; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    return true; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 32 slow_hit_count: 6, fast_hit_count: 6 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2> /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
ostream &operator<<(ostream &os, pair<T1, T2> &p) { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  os << p.first << ' ' << p.second; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2> /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
istream &operator>>(istream &is, pair<T1, T2> &p) { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  is >> p.first >> p.second; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  return is; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
istream &operator>>(istream &is, vector<T> &v) { /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto &u : v) is >> u; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  return is; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
ostream &operator<<(ostream &os, vector<T> &v) { /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto &u : v) os << u << ' '; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
int hash_mod[4] = {1000000007, 998244353, 1000000009, 999999937}, /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    mod = hash_mod[rnd() % 4]; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
int hash_pows[4] = {179, 239, 1007, 2003}, P = hash_pows[rnd() % 4]; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
int binpow(int first, int p) { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  int res = 1; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  while (p) { /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    if (p % 2) res = (res * first) % mod; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    first = (first * first) % mod; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    p /= 2; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e6 + 7, NS = 2e3 + 7, lg = 20, sq = 550, inf = 2e9 + 7; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
const long double eps = 1e-8, pi = 3.14159265359; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
int a[N], mx = 61, cnt[N]; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
map<long long, int> d[62]; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
int calc(int i, long long mask) { /* line 70 slow_hit_count: 577910, fast_hit_count: 420216 */
  if (d[i].count(mask)) return d[i][mask]; /* line 71 slow_hit_count: 692508, fast_hit_count: 504500 */
  cnt[i]++; /* line 72 slow_hit_count: 114598, fast_hit_count: 84284 */
  vector<int> can(mx, 0); /* line 73 slow_hit_count: 114598, fast_hit_count: 84284 */
  for (int k = 0; k < i; k++) { /* line 74 slow_hit_count: 933144, fast_hit_count: 679353 */
    if (mask & (1ll << k)) { /* line 75 slow_hit_count: 818546, fast_hit_count: 595069 */
      int val = calc(i - (k + 1), (mask ^ (1 << k))); /* line 76 slow_hit_count: 577904, fast_hit_count: 420210 */
      can[val] = 1; /* line 77 slow_hit_count: 577904, fast_hit_count: 420210 */
    } /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  for (int k = 0; k < mx; k++) { /* line 80 slow_hit_count: 309423, fast_hit_count: 226430 */
    if (!can[k]) { /* line 81 slow_hit_count: 309423, fast_hit_count: 226430 */
      return d[i][mask] = k; /* line 82 slow_hit_count: 114598, fast_hit_count: 84284 */
    } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 86 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 88 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 89 slow_hit_count: 7, fast_hit_count: 7 */
    cin >> a[i]; /* line 90 slow_hit_count: 6, fast_hit_count: 6 */
    amax(mx, a[i]); /* line 91 slow_hit_count: 6, fast_hit_count: 6 */
  } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  d[0][0] = 0; /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 0; /* line 94 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 95 slow_hit_count: 7, fast_hit_count: 7 */
    int first = a[i]; /* line 96 slow_hit_count: 6, fast_hit_count: 6 */
    ans ^= calc(first, (1ll << first) - 1); /* line 97 slow_hit_count: 6, fast_hit_count: 6 */
  } /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
  if (ans) /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "NO"; /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
  else /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "YES"; /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 103 slow_hit_count: 1, fast_hit_count: 1 */
signed main() { /* line 104 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 105 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 106 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 107 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 108 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 109 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose why the provided C program runs slowly for the "slow" input, we need to analyze and characterize the performance bottlenecks based on the hit count information and the code structure. Here's a step-by-step analysis:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - The function `calc(int i, long long mask)` is frequently called, with lines 70, 71, 74, 75, 76, and 77 having significantly higher hit counts for the slow input compared to the fast input.
   - Specifically, line 71 (checking if a result is already computed and stored in `d[i]`) and line 76 (recursive call to `calc`) are critical, indicating that the function is heavily recursive and possibly recalculating values.

2. **Recursion Analysis**:
   - The `calc` function uses recursion to compute values based on a bitmask. This recursive calculation is likely the primary source of performance bottlenecks due to the high number of recursive calls (shown by hit counts on line 76).

3. **Data Interaction**:
   - The map `d` is used to memoize results, but if many unique states are encountered, the memoization may not be effective, leading to repeated calculations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following natural language performance invariants:

1. **Invariant: Recursive Depth and State Space**:
   - When the number of stones in any pile is large (close to the maximum of 60), the recursive function `calc` explores a vast state space. This leads to many recursive calls increasing computation time.
   - **Natural Language Description**: "If the number of stones in any pile is near the upper limit, the recursion depth can increase significantly, leading to an exponential number of states being explored."

2. **Invariant: Memoization Efficiency**:
   - If the game configuration results in many unique states despite memoization, the program may recompute results frequently, slowing down the execution.
   - **Natural Language Description**: "When many unique configurations are generated by distinct stone removals, memoization becomes less effective, causing repeated calculations."

3. **Invariant: Stone Distribution**:
   - An input where stone counts in piles are diverse can lead to more complex state calculations due to varied possible moves, increasing the depth and breadth of recursion.
   - **Natural Language Description**: "If the stone distribution across piles is highly varied, it increases the complexity of state transitions, exacerbating recursive exploration."

### Conclusion

The slow performance of the program is mainly due to the deep and complex recursive calculations in the `calc` function, especially when dealing with large and varied stone numbers per pile. The memoization strategy is overwhelmed by a large number of unique recursive states. These insights help identify potential areas for optimization, such as improving memoization or restructuring the recursive strategy.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Sam has been teaching Jon the Game of Stones to sharpen his mind and help him devise a strategy to fight the white walkers. The rules of this game are quite simple: 

  * The game starts with n piles of stones indexed from 1 to n. The i-th pile contains si stones.
  * The players make their moves alternatively. A move is considered as removal of some number of stones from a pile. Removal of 0 stones does not count as a move.
  * The player who is unable to make a move loses.



Now Jon believes that he is ready for battle, but Sam does not think so. To prove his argument, Sam suggested that they play a modified version of the game.

In this modified version, no move can be made more than once on a pile. For example, if 4 stones are removed from a pile, 4 stones cannot be removed from that pile again.

Sam sets up the game and makes the first move. Jon believes that Sam is just trying to prevent him from going to battle. Jon wants to know if he can win if both play optimally.

Input

First line consists of a single integer n (1 ≤ n ≤ 106) — the number of piles.

Each of next n lines contains an integer si (1 ≤ si ≤ 60) — the number of stones in i-th pile.

Output

Print a single line containing "YES" (without quotes) if Jon wins, otherwise print "NO" (without quotes)

Examples

Input

1
5


Output

NO

Input

2
1
2


Output

YES

Note

In the first case, Sam removes all the stones and Jon loses.

In second case, the following moves are possible by Sam: <image>

In each of these cases, last move can be made by Jon to win the game as follows: <image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

We'll implement the performance-characterizing invariants as runtime checks in C++:

1. **Recursive Depth and State Space Invariant**:
   - This invariant checks if the number of stones in any pile is large, which could lead to excessive recursion.

```cpp
void check_recursive_depth_invariant(int stones) {
    if (stones >= 55) {  // Threshold chosen based on the maximum stone value (60)
        cerr << "Warning: Potential high recursion depth triggered due to large pile size!" << endl;
        abort();
    }
}
```

2. **Memoization Efficiency Invariant**:
   - This invariant checks if the memoization might be overwhelmed by a vast number of unique states.

```cpp
void check_memoization_efficiency_invariant(int uniqueStates) {
    if (uniqueStates > 100000) {  // Arbitrary large threshold for unique states
        cerr << "Warning: Memoization inefficiency triggered due to too many unique states!" << endl;
        abort();
    }
}
```

3. **Stone Distribution Invariant**:
   - This invariant checks if there's a high variance in stone distribution, suggesting complex state transitions.

```cpp
void check_stone_distribution_invariant(const vector<int>& stones) {
    int maxStone = *max_element(stones.begin(), stones.end());
    int minStone = *min_element(stones.begin(), stones.end());
    if ((maxStone - minStone) > 50) {  // Threshold based on a significant difference in stone counts
        cerr << "Warning: Complex state transitions triggered due to high stone distribution variance!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Functions into the Original C++ Program

Now, let's integrate the checker functions at appropriate places in the original program:

```cpp
#include <bits/stdc++.h>
using namespace std;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
clock_t START;
inline long double TIME() {
  return (long double)(clock() - START) / CLOCKS_PER_SEC;
}
void SHOW() {
  cout << fixed << setprecision(10);
  cout << TIME() << " SECONDS FROM START\n";
}
long double TL = 2.0;
int calls = 0;
inline bool IS() {
  if (TL - TIME() < 0.1) return true;
  return false;
}
template <typename T1, typename T2>
inline bool amin(T1 &a, T2 b) {
  if (a > b) {
    a = b;
    return true;
  }
  return false;
}
template <typename T1, typename T2>
inline bool amax(T1 &a, T2 b) {
  if (a < b) {
    a = b;
    return true;
  }
  return false;
}
template <typename T1, typename T2>
ostream &operator<<(ostream &os, pair<T1, T2> &p) {
  os << p.first << ' ' << p.second;
  return os;
}
template <typename T1, typename T2>
istream &operator>>(istream &is, pair<T1, T2> &p) {
  is >> p.first >> p.second;
  return is;
}
template <typename T>
istream &operator>>(istream &is, vector<T> &v) {
  for (auto &u : v) is >> u;
  return is;
}
template <typename T>
ostream &operator<<(ostream &os, vector<T> &v) {
  for (auto &u : v) os << u << ' ';
  return os;
}
int hash_mod[4] = {1000000007, 998244353, 1000000009, 999999937},
    mod = hash_mod[rnd() % 4];
int hash_pows[4] = {179, 239, 1007, 2003}, P = hash_pows[rnd() % 4];
int binpow(int first, int p) {
  int res = 1;
  while (p) {
    if (p % 2) res = (res * first) % mod;
    first = (first * first) % mod;
    p /= 2;
  }
  return res;
}
const int N = 1e6 + 7, NS = 2e3 + 7, lg = 20, sq = 550, inf = 2e9 + 7;
const long double eps = 1e-8, pi = 3.14159265359;
int a[N], mx = 61, cnt[N];
map<long long, int> d[62];

void check_recursive_depth_invariant(int stones) {
    if (stones >= 55) {  // Threshold chosen based on the maximum stone value (60)
        cerr << "Warning: Potential high recursion depth triggered due to large pile size!" << endl;
        abort();
    }
}

void check_memoization_efficiency_invariant(int uniqueStates) {
    if (uniqueStates > 100000) {  // Arbitrary large threshold for unique states
        cerr << "Warning: Memoization inefficiency triggered due to too many unique states!" << endl;
        abort();
    }
}

void check_stone_distribution_invariant(const vector<int>& stones) {
    int maxStone = *max_element(stones.begin(), stones.end());
    int minStone = *min_element(stones.begin(), stones.end());
    if ((maxStone - minStone) > 50) {  // Threshold based on a significant difference in stone counts
        cerr << "Warning: Complex state transitions triggered due to high stone distribution variance!" << endl;
        abort();
    }
}

int calc(int i, long long mask) {
  if (d[i].count(mask)) return d[i][mask];
  cnt[i]++;
  vector<int> can(mx, 0);
  for (int k = 0; k < i; k++) {
    if (mask & (1ll << k)) {
      int val = calc(i - (k + 1), (mask ^ (1 << k)));
      can[val] = 1;
    }
  }
  for (int k = 0; k < mx; k++) {
    if (!can[k]) {
      return d[i][mask] = k;
    }
  }
}

void solve() {
  int n;
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    amax(mx, a[i]);
  }
  
  // Insert checks after reading inputs
  for (int i = 0; i < n; i++) {
    check_recursive_depth_invariant(a[i]);
  }
  check_stone_distribution_invariant(vector<int>(a, a + n));

  d[0][0] = 0;
  int ans = 0;
  for (int i = 0; i < n; i++) {
    int first = a[i];
    ans ^= calc(first, (1ll << first) - 1);
  }
  
  // Insert check for memoization efficiency
  check_memoization_efficiency_invariant(d[0].size());

  if (ans)
    cout << "NO";
  else
    cout << "YES";
}

signed main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  solve();
}
```

**Comments on Placement:**

- **Recursive Depth Check**: Placed right after reading input for each pile to ensure we don't enter deep recursion for large piles.
- **Stone Distribution Check**: Placed after all input is read to determine if the distribution is highly varied.
- **Memoization Efficiency Check**: Placed after computing results, just before output, to verify if memoization is effective.

These checks provide early warnings about potential performance pitfalls, helping developers identify and optimize inefficient patterns in the code.

