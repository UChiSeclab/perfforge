system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Sam has been teaching Jon the Game of Stones to sharpen his mind and help him devise a strategy to fight the white walkers. The rules of this game are quite simple: 

  * The game starts with n piles of stones indexed from 1 to n. The i-th pile contains si stones.
  * The players make their moves alternatively. A move is considered as removal of some number of stones from a pile. Removal of 0 stones does not count as a move.
  * The player who is unable to make a move loses.



Now Jon believes that he is ready for battle, but Sam does not think so. To prove his argument, Sam suggested that they play a modified version of the game.

In this modified version, no move can be made more than once on a pile. For example, if 4 stones are removed from a pile, 4 stones cannot be removed from that pile again.

Sam sets up the game and makes the first move. Jon believes that Sam is just trying to prevent him from going to battle. Jon wants to know if he can win if both play optimally.

Input

First line consists of a single integer n (1 ≤ n ≤ 106) — the number of piles.

Each of next n lines contains an integer si (1 ≤ si ≤ 60) — the number of stones in i-th pile.

Output

Print a single line containing "YES" (without quotes) if Jon wins, otherwise print "NO" (without quotes)

Examples

Input

1
5


Output

NO

Input

2
1
2


Output

YES

Note

In the first case, Sam removes all the stones and Jon loses.

In second case, the following moves are possible by Sam: <image>

In each of these cases, last move can be made by Jon to win the game as follows: <image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
map<pair<long long, int>, int> memo;
int n, s, Xor;
int solve(int x, long long mask) {
  if (memo.count({mask, x})) return memo[{mask, x}];
  if (x == 0) {
    memo[{mask, x}] = 0;
    return 0;
  }
  int grundy = 0;
  map<int, int> ump;
  for (int i = 1; i <= x; i++) {
    if (mask & (1ll << i)) continue;
    ump[solve(x - i, mask | (1ll << i))] = 1;
    while (ump.count(grundy)) grundy++;
  }
  ump.clear();
  memo[{mask, x}] = grundy;
  return grundy;
}
int main() {
  scanf("%d", &n);
  while (n--) {
    scanf("%d", &s);
    Xor ^= solve(s, 0);
  }
  printf((Xor) ? "NO" : "YES");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

6
34
44
35
55
2
51


(G.2) Fast Input

6
34
44
35
55
2
36


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
map<pair<long long, int>, int> memo; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, s, Xor; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int solve(int x, long long mask) { /* line 5 slow_hit_count: 581375, fast_hit_count: 422808 */
  if (memo.count({mask, x})) return memo[{mask, x}]; /* line 6 slow_hit_count: 581375, fast_hit_count: 422808 */
  if (x == 0) { /* line 7 slow_hit_count: 116005, fast_hit_count: 85303 */
    memo[{mask, x}] = 0; /* line 8 slow_hit_count: 13389, fast_hit_count: 9960 */
    return 0; /* line 9 slow_hit_count: 13389, fast_hit_count: 9960 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  int grundy = 0; /* line 11 slow_hit_count: 102616, fast_hit_count: 75343 */
  map<int, int> ump; /* line 12 slow_hit_count: 102616, fast_hit_count: 75343 */
  for (int i = 1; i <= x; i++) { /* line 13 slow_hit_count: 925953, fast_hit_count: 674001 */
    if (mask & (1ll << i)) continue; /* line 14 slow_hit_count: 823337, fast_hit_count: 598658 */
    ump[solve(x - i, mask | (1ll << i))] = 1; /* line 15 slow_hit_count: 581369, fast_hit_count: 422802 */
    while (ump.count(grundy)) grundy++; /* line 16 slow_hit_count: 777718, fast_hit_count: 566057 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  ump.clear(); /* line 18 slow_hit_count: 102616, fast_hit_count: 75343 */
  memo[{mask, x}] = grundy; /* line 19 slow_hit_count: 102616, fast_hit_count: 75343 */
  return grundy; /* line 20 slow_hit_count: 102616, fast_hit_count: 75343 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  while (n--) { /* line 24 slow_hit_count: 7, fast_hit_count: 7 */
    scanf("%d", &s); /* line 25 slow_hit_count: 6, fast_hit_count: 6 */
    Xor ^= solve(s, 0); /* line 26 slow_hit_count: 6, fast_hit_count: 6 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  printf((Xor) ? "NO" : "YES"); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the given C program, let's go through the analysis phases and derive natural language performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Counts Comparison**:
   - The function `solve(int x, long long mask)` is called significantly more times for the slow input (~581,375 times) compared to the fast input (~422,808 times).
   - Within this function:
     - The loop at line 13 (`for (int i = 1; i <= x; i++)`) is executed many more times, indicating extensive recursion or repeated operations.
     - Line 15, where `solve` is recursively called, also shows a high number of hits, suggesting deep recursion or repeated subproblem-solving.
     - Line 16, which updates `grundy` inside the loop, is executed extensively, suggesting a large number of unique values are being checked.

2. **Inference on Interactions**:
   - The recursion depth and loops are strongly influenced by the value of `x` passed to the `solve` function. Higher values of `x` lead to deeper recursion and more iterations within the loop.
   - Since `x` corresponds to the number of stones in a pile, certain configurations of stone numbers cause the program to explore a larger search space.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis of hit counts and the interaction of code with the input data, here are some natural language performance invariants:

1. **Recursion Depth and Large Search Space**:
   - **Invariant**: "If the number of stones in any pile is large, especially near the upper bound of 60, the recursive function `solve` will explore a much larger search space, leading to increased computation time."
   - **Rationale**: The recursion depth and number of states to explore grow with larger pile sizes, causing the program to slow down.

2. **Repeated Subproblem Solving**:
   - **Invariant**: "If the sum of stones across all piles leads to many unique combinations, the function may repeatedly solve overlapping subproblems, degrading performance."
   - **Rationale**: The memoization map (`memo`) may not cover all states efficiently if there are excessive unique subproblem states due to high stone counts.

3. **High Variability in Stone Counts**:
   - **Invariant**: "If piles contain a diverse range of stone counts, especially when many piles have counts close to the maximum, the nested loops and recursive calls increase, causing a slowdown."
   - **Rationale**: Variability increases the number of unique game states, complicating the `solve` function's task.

4. **High Branching Factor in Recursion**:
   - **Invariant**: "When the effective branching factor in recursion increases due to the varied number of stones in piles, it results in a combinatorial explosion of states to explore."
   - **Rationale**: Branching happens at each stone count decrement, and higher initial counts lead to more branches.

These invariants capture scenarios where the program may slow down without relying on specific input values, thus helping in identifying potential performance issues in future inputs or configurations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Sam has been teaching Jon the Game of Stones to sharpen his mind and help him devise a strategy to fight the white walkers. The rules of this game are quite simple: 

  * The game starts with n piles of stones indexed from 1 to n. The i-th pile contains si stones.
  * The players make their moves alternatively. A move is considered as removal of some number of stones from a pile. Removal of 0 stones does not count as a move.
  * The player who is unable to make a move loses.



Now Jon believes that he is ready for battle, but Sam does not think so. To prove his argument, Sam suggested that they play a modified version of the game.

In this modified version, no move can be made more than once on a pile. For example, if 4 stones are removed from a pile, 4 stones cannot be removed from that pile again.

Sam sets up the game and makes the first move. Jon believes that Sam is just trying to prevent him from going to battle. Jon wants to know if he can win if both play optimally.

Input

First line consists of a single integer n (1 ≤ n ≤ 106) — the number of piles.

Each of next n lines contains an integer si (1 ≤ si ≤ 60) — the number of stones in i-th pile.

Output

Print a single line containing "YES" (without quotes) if Jon wins, otherwise print "NO" (without quotes)

Examples

Input

1
5


Output

NO

Input

2
1
2


Output

YES

Note

In the first case, Sam removes all the stones and Jon loses.

In second case, the following moves are possible by Sam: <image>

In each of these cases, last move can be made by Jon to win the game as follows: <image>

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing the Performance-Characterizing Invariants in C++

Below are C++ code snippets implementing the performance-checking conditions derived from the natural language invariants. Each snippet corresponds to one of the invariants identified in Phase 2.

### Invariant Code Snippets

1. **Recursion Depth and Large Search Space**

   This invariant checks if a pile contains a large number of stones, indicating a large search space for recursion.

   ```cpp
   void check_large_pile_invariant(int stoneCount) {
       if (stoneCount > 50) {  // 50 is a threshold chosen based on the upper bound of 60
           cerr << "Warning: Large pile detected, leading to deep recursion and large search space!" << endl;
           abort();
       }
   }
   ```

2. **Repeated Subproblem Solving**

   This invariant checks if the sum of stones across all piles could lead to many unique combinations.

   ```cpp
   void check_repeated_subproblem_invariant(int totalStones) {
       if (totalStones > 500) {  // Arbitrary threshold based on sum that would lead to high unique states
           cerr << "Warning: High total stone count leading to repeated subproblem solving!" << endl;
           abort();
       }
   }
   ```

3. **High Variability in Stone Counts**

   This invariant checks for high variability in stone counts across piles.

   ```cpp
   void check_high_variability_invariant(int maxStone, int minStone) {
       if (maxStone - minStone > 40) {  // High difference indicates variability
           cerr << "Warning: High variability in stone counts detected!" << endl;
           abort();
       }
   }
   ```

4. **High Branching Factor in Recursion**

   This invariant checks for a high branching factor in the recursive calls.

   ```cpp
   void check_high_branching_factor_invariant(int stoneCount) {
       if (stoneCount > 40) {  // Threshold for high branching factor
           cerr << "Warning: High branching factor detected, leading to computational explosion!" << endl;
           abort();
       }
   }
   ```

## Phase 4: Integrating the Checkers into the Original C++ Program

Next, we integrate these invariant checks into the original C++ program to monitor runtime conditions.

### Instrumented C++ Program

```cpp
#include <bits/stdc++.h>
using namespace std;

map<pair<long long, int>, int> memo;
int n, s, Xor;

// Invariant checkers
void check_large_pile_invariant(int stoneCount) {
    if (stoneCount > 50) {
        cerr << "Warning: Large pile detected, leading to deep recursion and large search space!" << endl;
        abort();
    }
}

void check_repeated_subproblem_invariant(int totalStones) {
    if (totalStones > 500) {
        cerr << "Warning: High total stone count leading to repeated subproblem solving!" << endl;
        abort();
    }
}

void check_high_variability_invariant(int maxStone, int minStone) {
    if (maxStone - minStone > 40) {
        cerr << "Warning: High variability in stone counts detected!" << endl;
        abort();
    }
}

void check_high_branching_factor_invariant(int stoneCount) {
    if (stoneCount > 40) {
        cerr << "Warning: High branching factor detected, leading to computational explosion!" << endl;
        abort();
    }
}

int solve(int x, long long mask) {
    if (memo.count({mask, x})) return memo[{mask, x}];
    if (x == 0) {
        memo[{mask, x}] = 0;
        return 0;
    }
    int grundy = 0;
    map<int, int> ump;
    for (int i = 1; i <= x; i++) {
        if (mask & (1ll << i)) continue;
        ump[solve(x - i, mask | (1ll << i))] = 1;
        while (ump.count(grundy)) grundy++;
    }
    ump.clear();
    memo[{mask, x}] = grundy;
    return grundy;
}

int main() {
    scanf("%d", &n);
    int totalStones = 0;
    int maxStone = 0;
    int minStone = INT_MAX;

    vector<int> piles(n);
    for (int i = 0; i < n; ++i) {
        scanf("%d", &s);
        piles[i] = s;
        totalStones += s;
        maxStone = max(maxStone, s);
        minStone = min(minStone, s);

        // Check large pile invariant
        check_large_pile_invariant(s);
        // Check high branching factor invariant
        check_high_branching_factor_invariant(s);
    }

    // Check repeated subproblem invariant
    check_repeated_subproblem_invariant(totalStones);
    // Check high variability invariant
    check_high_variability_invariant(maxStone, minStone);

    for (int pile : piles) {
        Xor ^= solve(pile, 0);
    }

    printf((Xor) ? "NO" : "YES");
    return 0;
}
```

### Explanation of Inserted Checks

- **`check_large_pile_invariant(s)` and `check_high_branching_factor_invariant(s)`** are called inside the loop that reads each pile count, checking conditions specific to individual pile sizes.
  
- **`check_repeated_subproblem_invariant(totalStones)` and `check_high_variability_invariant(maxStone, minStone)`** are placed after processing all inputs to evaluate aggregate properties of the input data, such as the total stone count and variability. 

These checks help identify potential performance bottlenecks at runtime, aiding in the detection of slow execution scenarios without degrading the program's performance significantly.

