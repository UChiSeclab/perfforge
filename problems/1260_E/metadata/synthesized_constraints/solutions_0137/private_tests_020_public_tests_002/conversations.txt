system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are organizing a boxing tournament, where n boxers will participate (n is a power of 2), and your friend is one of them. All boxers have different strength from 1 to n, and boxer i wins in the match against boxer j if and only if i is stronger than j.

The tournament will be organized as follows: n boxers will be divided into pairs; the loser in each pair leaves the tournament, and n/2 winners advance to the next stage, where they are divided into pairs again, and the winners in all pairs advance to the next stage, and so on, until only one boxer remains (who is declared the winner).

Your friend really wants to win the tournament, but he may be not the strongest boxer. To help your friend win the tournament, you may bribe his opponents: if your friend is fighting with a boxer you have bribed, your friend wins even if his strength is lower.

Furthermore, during each stage you distribute the boxers into pairs as you wish.

The boxer with strength i can be bribed if you pay him a_i dollars. What is the minimum number of dollars you have to spend to make your friend win the tournament, provided that you arrange the boxers into pairs during each stage as you wish?

Input

The first line contains one integer n (2 ≤ n ≤ 2^{18}) — the number of boxers. n is a power of 2.

The second line contains n integers a_1, a_2, ..., a_n, where a_i is the number of dollars you have to pay if you want to bribe the boxer with strength i. Exactly one of a_i is equal to -1 — it means that the boxer with strength i is your friend. All other values are in the range [1, 10^9].

Output

Print one integer — the minimum number of dollars you have to pay so your friend wins.

Examples

Input


4
3 9 1 -1


Output


0

Input


8
11 -1 13 19 24 7 17 5


Output


12

Note

In the first test case no matter how you will distribute boxers into pairs, your friend is the strongest boxer and anyway wins the tournament.

In the second test case you can distribute boxers as follows (your friend is number 2):

1 : 2, 8 : 5, 7 : 3, 6 : 4 (boxers 2, 8, 7 and 6 advance to the next stage);

2 : 6, 8 : 7 (boxers 2 and 8 advance to the next stage, you have to bribe the boxer with strength 6);

2 : 8 (you have to bribe the boxer with strength 8);

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, hold;
int a[(1 << 19)];
long long dp[19][(1 << 19)];
int lg() {
  int cnt = 0;
  int t = n;
  while (t) {
    t >>= 1;
    cnt++;
  }
  return cnt;
}
int main() {
  scanf("%d", &n);
  for (int i = 1; i <= n; i++) {
    scanf("%d", a + i);
    if (a[i] == -1) {
      hold = i;
      continue;
    }
    if (!hold)
      a[i] = 0;
    else
      a[i - 1] = a[i];
  }
  n--;
  int req = lg();
  for (int i = 1; i <= req; i++)
    fill(dp[i], dp[i] + (1 << 19), 100000000000000000);
  for (int cnt = 1; cnt <= req; cnt++) {
    int tot = (1 << (cnt - 1)) - 1;
    int add = (1 << (cnt - 1));
    for (int i = 1; i <= n; i++) {
      if (tot + add <= i) {
        dp[cnt][i] = min(dp[cnt][i], dp[cnt - 1][i - 1] + a[i]);
      }
      dp[cnt][i] = min(dp[cnt][i], dp[cnt][i - 1]);
    }
  }
  printf("%lld", dp[req][n]);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

32
8 4 1 -1 2 2 5 6 7 10 8 5 5 2 4 4 3 1 2 7 6 4 8 5 5 3 10 8 1 9 2 2


(G.2) Fast Input

4
3 9 1 -1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, hold; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int a[(1 << 19)]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[19][(1 << 19)]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int lg() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int cnt = 0; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int t = n; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  while (t) { /* line 9 slow_hit_count: 6, fast_hit_count: 3 */
    t >>= 1; /* line 10 slow_hit_count: 5, fast_hit_count: 2 */
    cnt++; /* line 11 slow_hit_count: 5, fast_hit_count: 2 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return cnt; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 17 slow_hit_count: 33, fast_hit_count: 5 */
    scanf("%d", a + i); /* line 18 slow_hit_count: 32, fast_hit_count: 4 */
    if (a[i] == -1) { /* line 19 slow_hit_count: 32, fast_hit_count: 4 */
      hold = i; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
      continue; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    if (!hold) /* line 23 slow_hit_count: 31, fast_hit_count: 3 */
      a[i] = 0; /* line 24 slow_hit_count: 3, fast_hit_count: 3 */
    else /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      a[i - 1] = a[i]; /* line 26 slow_hit_count: 28, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  n--; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  int req = lg(); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= req; i++) /* line 30 slow_hit_count: 6, fast_hit_count: 3 */
    fill(dp[i], dp[i] + (1 << 19), 100000000000000000); /* line 31 slow_hit_count: 5, fast_hit_count: 2 */
  for (int cnt = 1; cnt <= req; cnt++) { /* line 32 slow_hit_count: 6, fast_hit_count: 3 */
    int tot = (1 << (cnt - 1)) - 1; /* line 33 slow_hit_count: 5, fast_hit_count: 2 */
    int add = (1 << (cnt - 1)); /* line 34 slow_hit_count: 5, fast_hit_count: 2 */
    for (int i = 1; i <= n; i++) { /* line 35 slow_hit_count: 160, fast_hit_count: 8 */
      if (tot + add <= i) { /* line 36 slow_hit_count: 155, fast_hit_count: 6 */
        dp[cnt][i] = min(dp[cnt][i], dp[cnt - 1][i - 1] + a[i]); /* line 37 slow_hit_count: 103, fast_hit_count: 4 */
      } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
      dp[cnt][i] = min(dp[cnt][i], dp[cnt][i - 1]); /* line 39 slow_hit_count: 155, fast_hit_count: 6 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld", dp[req][n]); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the given C program, we will proceed with the tasks described in the problem statement.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The hit counts show that lines 17-26 have significantly more hits on the slow input compared to the fast input. This is expected because of the larger size of `n` in the slow input.
   - The lines that show a substantial difference in hit counts between the slow and fast runs are primarily focused on:
     - **Loop Execution (lines 17, 30, 32, 35):** More iterations for larger `n`.
     - **Array Initialization and Updates (lines 18-26):** Processing each boxer and adjusting the array `a`.
     - **Dynamic Programming Table Initialization (line 31)** and **Update (line 37, 39):** These lines execute often due to the nested loops.

2. **Pinpoint Lines with Significant Hits:**
   - **Line 35 (Loop over Boxers):** This loop executes `(number of boxers * number of stages)` times, which grows as `n` increases.
   - **Line 37 (DP Calculation):** This line is heavily executed due to repeated calculations of the minimum bribe cost for the current stage.
   - **Line 39 (DP State Update):** Similar to line 37, it updates the DP state frequently.

3. **Inference:**
   - The nested loops over the boxers and stages (lines 32-39) are expensive due to their cumulative execution count.
   - The dynamic memory operation, in particular, the filling and updating of the `dp` table, contributes significantly to the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Statements:**

   - **Invariant 1: High Stage Count Execution**
     - "If the number of tournament stages (log2(n)) is large, the total number of iterations in nested loops increases, leading to significant computational overhead and potential slowdowns."

   - **Invariant 2: DP Table Initialization and Update**
     - "If the dynamic programming table is initialized and updated frequently across stages and boxers (proportional to n * log2(n)), the execution time may become substantial due to repeated operations."

   - **Invariant 3: Extensive Boxer Pairing Adjustments**
     - "When the number of pairings and rearrangements (effectively bribe calculations) is high, the program may slow down due to the complexity of maintaining and updating operation states."

2. **Thresholds and Correlation to Input Patterns:**
   - These statements abstract key conditions that lead to slow performance without relying on specific input values but rather on the size `n` and the nature of the operations (logarithmic stage calculations and frequent array updates).
   - The performance issues are strongly tied to the tournament structure, where the complexity arises from increasing `n` and the associated depth of nested loops and operations.

These invariants provide a strong indication of the conditions under which the program's performance may degrade, focusing on the complexity induced by nested operations within the tournament's dynamic programming setup.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are organizing a boxing tournament, where n boxers will participate (n is a power of 2), and your friend is one of them. All boxers have different strength from 1 to n, and boxer i wins in the match against boxer j if and only if i is stronger than j.

The tournament will be organized as follows: n boxers will be divided into pairs; the loser in each pair leaves the tournament, and n/2 winners advance to the next stage, where they are divided into pairs again, and the winners in all pairs advance to the next stage, and so on, until only one boxer remains (who is declared the winner).

Your friend really wants to win the tournament, but he may be not the strongest boxer. To help your friend win the tournament, you may bribe his opponents: if your friend is fighting with a boxer you have bribed, your friend wins even if his strength is lower.

Furthermore, during each stage you distribute the boxers into pairs as you wish.

The boxer with strength i can be bribed if you pay him a_i dollars. What is the minimum number of dollars you have to spend to make your friend win the tournament, provided that you arrange the boxers into pairs during each stage as you wish?

Input

The first line contains one integer n (2 ≤ n ≤ 2^{18}) — the number of boxers. n is a power of 2.

The second line contains n integers a_1, a_2, ..., a_n, where a_i is the number of dollars you have to pay if you want to bribe the boxer with strength i. Exactly one of a_i is equal to -1 — it means that the boxer with strength i is your friend. All other values are in the range [1, 10^9].

Output

Print one integer — the minimum number of dollars you have to pay so your friend wins.

Examples

Input


4
3 9 1 -1


Output


0

Input


8
11 -1 13 19 24 7 17 5


Output


12

Note

In the first test case no matter how you will distribute boxers into pairs, your friend is the strongest boxer and anyway wins the tournament.

In the second test case you can distribute boxers as follows (your friend is number 2):

1 : 2, 8 : 5, 7 : 3, 6 : 4 (boxers 2, 8, 7 and 6 advance to the next stage);

2 : 6, 8 : 7 (boxers 2 and 8 advance to the next stage, you have to bribe the boxer with strength 6);

2 : 8 (you have to bribe the boxer with strength 8);

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, let's implement them as runtime checks in C++.

```cpp
void check_stage_count_invariant(int n) {
    // Invariant 1: High Stage Count Execution
    int stages = log2(n);
    if (stages > 10) { // Arbitrary threshold for demonstration; adjust as necessary
        cerr << "Warning: Performance bottleneck condition triggered - high stage count!" << endl;
        abort();
    }
}

void check_dp_table_invariant(int req, int n) {
    // Invariant 2: DP Table Initialization and Update
    if (req * n > 1000000) { // Arbitrary threshold; adjust as necessary
        cerr << "Warning: Performance bottleneck condition triggered - extensive DP table operations!" << endl;
        abort();
    }
}

void check_pairing_adjustments_invariant(int n, int stages) {
    // Invariant 3: Extensive Boxer Pairing Adjustments
    if (stages * n > 1000000) { // Arbitrary threshold; adjust as necessary
        cerr << "Warning: Performance bottleneck condition triggered - excessive pairing adjustments!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Original Program

Now, integrate these checks into the given C++ code at appropriate points, ensuring they do not add significant overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, hold;
int a[(1 << 19)];
long long dp[19][(1 << 19)];

int lg() {
    int cnt = 0;
    int t = n;
    while (t) {
        t >>= 1;
        cnt++;
    }
    return cnt;
}

void check_stage_count_invariant(int n) {
    int stages = log2(n);
    if (stages > 10) {
        cerr << "Warning: Performance bottleneck condition triggered - high stage count!" << endl;
        abort();
    }
}

void check_dp_table_invariant(int req, int n) {
    if (req * n > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - extensive DP table operations!" << endl;
        abort();
    }
}

void check_pairing_adjustments_invariant(int n, int stages) {
    if (stages * n > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive pairing adjustments!" << endl;
        abort();
    }
}

int main() {
    scanf("%d", &n);
    
    // Check stage count invariant
    check_stage_count_invariant(n);
    
    for (int i = 1; i <= n; i++) {
        scanf("%d", a + i);
        if (a[i] == -1) {
            hold = i;
            continue;
        }
        if (!hold)
            a[i] = 0;
        else
            a[i - 1] = a[i];
    }
    
    n--;
    int req = lg();
    
    // Check DP table invariant
    check_dp_table_invariant(req, n);
    
    for (int i = 1; i <= req; i++)
        fill(dp[i], dp[i] + (1 << 19), 100000000000000000);
    
    for (int cnt = 1; cnt <= req; cnt++) {
        int tot = (1 << (cnt - 1)) - 1;
        int add = (1 << (cnt - 1));
        for (int i = 1; i <= n; i++) {
            if (tot + add <= i) {
                dp[cnt][i] = min(dp[cnt][i], dp[cnt - 1][i - 1] + a[i]);
            }
            dp[cnt][i] = min(dp[cnt][i], dp[cnt][i - 1]);
        }
    }
    
    // Check pairing adjustments invariant
    check_pairing_adjustments_invariant(n, req);
    
    printf("%lld", dp[req][n]);
}
```

### Explanation

- **Check Placement:**
  - `check_stage_count_invariant` is called after reading `n` to confirm the potential stage count performance issue.
  - `check_dp_table_invariant` is placed after calculating `req` to ensure DP table operations do not exceed the threshold.
  - `check_pairing_adjustments_invariant` is called after the main DP loop to ensure pairing operations scale appropriately.

- **Thresholds:**
  - The thresholds used in the checks are arbitrary and based on plausible assumptions. These should be calibrated based on specific testing or profiling data.

