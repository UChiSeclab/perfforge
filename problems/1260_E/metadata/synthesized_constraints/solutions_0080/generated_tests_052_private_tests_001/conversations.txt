system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are organizing a boxing tournament, where n boxers will participate (n is a power of 2), and your friend is one of them. All boxers have different strength from 1 to n, and boxer i wins in the match against boxer j if and only if i is stronger than j.

The tournament will be organized as follows: n boxers will be divided into pairs; the loser in each pair leaves the tournament, and n/2 winners advance to the next stage, where they are divided into pairs again, and the winners in all pairs advance to the next stage, and so on, until only one boxer remains (who is declared the winner).

Your friend really wants to win the tournament, but he may be not the strongest boxer. To help your friend win the tournament, you may bribe his opponents: if your friend is fighting with a boxer you have bribed, your friend wins even if his strength is lower.

Furthermore, during each stage you distribute the boxers into pairs as you wish.

The boxer with strength i can be bribed if you pay him a_i dollars. What is the minimum number of dollars you have to spend to make your friend win the tournament, provided that you arrange the boxers into pairs during each stage as you wish?

Input

The first line contains one integer n (2 ≤ n ≤ 2^{18}) — the number of boxers. n is a power of 2.

The second line contains n integers a_1, a_2, ..., a_n, where a_i is the number of dollars you have to pay if you want to bribe the boxer with strength i. Exactly one of a_i is equal to -1 — it means that the boxer with strength i is your friend. All other values are in the range [1, 10^9].

Output

Print one integer — the minimum number of dollars you have to pay so your friend wins.

Examples

Input


4
3 9 1 -1


Output


0

Input


8
11 -1 13 19 24 7 17 5


Output


12

Note

In the first test case no matter how you will distribute boxers into pairs, your friend is the strongest boxer and anyway wins the tournament.

In the second test case you can distribute boxers as follows (your friend is number 2):

1 : 2, 8 : 5, 7 : 3, 6 : 4 (boxers 2, 8, 7 and 6 advance to the next stage);

2 : 6, 8 : 7 (boxers 2 and 8 advance to the next stage, you have to bribe the boxer with strength 6);

2 : 8 (you have to bribe the boxer with strength 8);

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long powmod(long long a, long long b) {
  long long res = 1;
  if (a >= 1000000007) a %= 1000000007;
  for (; b; b >>= 1) {
    if (b & 1) res = res * a;
    if (res >= 1000000007) res %= 1000000007;
    a = a * a;
    if (a >= 1000000007) a %= 1000000007;
  }
  return res;
}
long long gcd(long long a, long long b) { return b == 0 ? a : gcd(b, a % b); }
const long long LOGN = 20;
const long long N = (1 << LOGN) + 99;
long long dp[LOGN + 2][N];
long long sum[100];
long long n;
long long bribes[N];
long long f(long long cnt, long long idx) {
  if (dp[cnt][idx] != -1) return dp[cnt][idx];
  if (bribes[idx] == -1) return 0;
  long long remaining = sum[cnt] - idx;
  long long ans = numeric_limits<long long>::max();
  if (cnt < LOGN) ans = min(ans, f(cnt + 1, idx + 1) + bribes[idx]);
  if (remaining > 0) {
    ans = min(ans, f(cnt, idx + 1));
  }
  return dp[cnt][idx] = ans;
}
int main() {
  cin >> n;
  for (int i = 0; i < n; i++) {
    cin >> bribes[i];
  }
  memset(dp, -1, sizeof dp);
  reverse(bribes, bribes + n);
  sum[0] = 0;
  long long x = n / 2;
  for (long long i = 1; i < 100; i++) {
    sum[i] = sum[i - 1] + x;
    x /= 2;
  }
  cout << f(0, 0) << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

128
-1 37 147 12 24 35 86 39 20 27 86 95 51 8 33 32 55 35 8 75 74 79 64 51 66 32 34 45 39 89 19 11 86 32 69 58 40 58 62 11 99 54 31 10 4 70 88 22 94 23 46 20 65 97 61 39 31 65 23 31 95 78 40 25 51 14 12 48 8 63 18 57 91 75 31 26 22 84 29 22 32 64 20 12 49 92 50 4 97 17 26 88 10 56 73 22 92 94 83 100 97 83 47 15 1 48 16 77 4 91 30 38 13 46 18 76 77 2 45 70 9 41 16 22 84 81 20 43


(G.2) Fast Input

2
-1 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long powmod(long long a, long long b) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  long long res = 1; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  if (a >= 1000000007) a %= 1000000007; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  for (; b; b >>= 1) { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
    if (b & 1) res = res * a; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    if (res >= 1000000007) res %= 1000000007; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    a = a * a; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    if (a >= 1000000007) a %= 1000000007; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long a, long long b) { return b == 0 ? a : gcd(b, a % b); } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
const long long LOGN = 20; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
const long long N = (1 << LOGN) + 99; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[LOGN + 2][N]; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
long long sum[100]; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
long long n; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
long long bribes[N]; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
long long f(long long cnt, long long idx) { /* line 21 slow_hit_count: 4321, fast_hit_count: 2 */
  if (dp[cnt][idx] != -1) return dp[cnt][idx]; /* line 22 slow_hit_count: 4321, fast_hit_count: 2 */
  if (bribes[idx] == -1) return 0; /* line 23 slow_hit_count: 2245, fast_hit_count: 2 */
  long long remaining = sum[cnt] - idx; /* line 24 slow_hit_count: 2217, fast_hit_count: 1 */
  long long ans = numeric_limits<long long>::max(); /* line 25 slow_hit_count: 2217, fast_hit_count: 1 */
  if (cnt < LOGN) ans = min(ans, f(cnt + 1, idx + 1) + bribes[idx]); /* line 26 slow_hit_count: 2217, fast_hit_count: 1 */
  if (remaining > 0) { /* line 27 slow_hit_count: 2217, fast_hit_count: 1 */
    ans = min(ans, f(cnt, idx + 1)); /* line 28 slow_hit_count: 2210, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  return dp[cnt][idx] = ans; /* line 30 slow_hit_count: 2217, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 34 slow_hit_count: 129, fast_hit_count: 3 */
    cin >> bribes[i]; /* line 35 slow_hit_count: 128, fast_hit_count: 2 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  memset(dp, -1, sizeof dp); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  reverse(bribes, bribes + n); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  sum[0] = 0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  long long x = n / 2; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i < 100; i++) { /* line 41 slow_hit_count: 100, fast_hit_count: 100 */
    sum[i] = sum[i - 1] + x; /* line 42 slow_hit_count: 99, fast_hit_count: 99 */
    x /= 2; /* line 43 slow_hit_count: 99, fast_hit_count: 99 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  cout << f(0, 0) << endl; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottleneck of the given C program, we will proceed through two phases as outlined.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts**:  
   - The function `f()` is called significantly more times (4321 times) for the slow input compared to the fast input (2 times).
   - Lines within the function `f()` have high hit counts, particularly line 22 (`if (dp[cnt][idx] != -1) return dp[cnt][idx];`) and lines 26-28 which involve recursive calls.

2. **Pinpointing Bottlenecks**:
   - The key bottleneck appears to be the recursion in function `f()`, specifically the calls on lines 26 and 28: `ans = min(ans, f(cnt + 1, idx + 1) + bribes[idx]);` and `ans = min(ans, f(cnt, idx + 1));`.
   - The recursion likely leads to many redundant calculations, especially given the lack of memoization for all states.

3. **Interaction with Data Structures**:
   - The dynamic programming table `dp` is used to store intermediate results, but it seems that many states are being recalculated rather than reused effectively.
   - The problem of arranging boxers might be leading to a combinatorial explosion of possible states, thus triggering recursive calls.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the natural language invariants describing when the program tends to slow down:

1. **Invariant 1: Deep Recursion with Insufficient Memoization**:
   - **Description**: "If recursion depths are high without effective use of memoization, the program may slow down due to redundant calculations across similar states."
   - **Trigger**: This is likely to occur when n is large, causing a larger number of potential states in the recursion tree that are not being efficiently memoized.

2. **Invariant 2: High Branching Factor in Decision-Making**:
   - **Description**: "When the number of possible pairings or decision branches at each tournament stage is large, the recursive exploration can become costly."
   - **Trigger**: With a larger number of boxers (close to the maximum constraint of n = 2^18), the potential combinations for arranging and bribing opponents explode, leading to increased recursive exploration.

3. **Invariant 3: Recursive Overhead Due to Nested Calls**:
   - **Description**: "If a function makes multiple recursive calls and the overlap between these calls is not minimized, performance may degrade significantly."
   - **Trigger**: As the number of recursive calls increases with the size of n, the overhead of managing these calls becomes a bottleneck, especially if each state is not effectively cached.

### Conclusion

These invariants indicate that the program's performance is strongly linked to the recursive strategy employed. For inputs where n is large, combined with complex bribing strategy decisions, redundant calculations can lead to significant slowdowns. By optimizing memoization or altering the recursive strategy, it may be possible to enhance performance for larger inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are organizing a boxing tournament, where n boxers will participate (n is a power of 2), and your friend is one of them. All boxers have different strength from 1 to n, and boxer i wins in the match against boxer j if and only if i is stronger than j.

The tournament will be organized as follows: n boxers will be divided into pairs; the loser in each pair leaves the tournament, and n/2 winners advance to the next stage, where they are divided into pairs again, and the winners in all pairs advance to the next stage, and so on, until only one boxer remains (who is declared the winner).

Your friend really wants to win the tournament, but he may be not the strongest boxer. To help your friend win the tournament, you may bribe his opponents: if your friend is fighting with a boxer you have bribed, your friend wins even if his strength is lower.

Furthermore, during each stage you distribute the boxers into pairs as you wish.

The boxer with strength i can be bribed if you pay him a_i dollars. What is the minimum number of dollars you have to spend to make your friend win the tournament, provided that you arrange the boxers into pairs during each stage as you wish?

Input

The first line contains one integer n (2 ≤ n ≤ 2^{18}) — the number of boxers. n is a power of 2.

The second line contains n integers a_1, a_2, ..., a_n, where a_i is the number of dollars you have to pay if you want to bribe the boxer with strength i. Exactly one of a_i is equal to -1 — it means that the boxer with strength i is your friend. All other values are in the range [1, 10^9].

Output

Print one integer — the minimum number of dollars you have to pay so your friend wins.

Examples

Input


4
3 9 1 -1


Output


0

Input


8
11 -1 13 19 24 7 17 5


Output


12

Note

In the first test case no matter how you will distribute boxers into pairs, your friend is the strongest boxer and anyway wins the tournament.

In the second test case you can distribute boxers as follows (your friend is number 2):

1 : 2, 8 : 5, 7 : 3, 6 : 4 (boxers 2, 8, 7 and 6 advance to the next stage);

2 : 6, 8 : 7 (boxers 2 and 8 advance to the next stage, you have to bribe the boxer with strength 6);

2 : 8 (you have to bribe the boxer with strength 8);

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checker Code for Invariants in C++

Below is the checker code in C++ for the performance-characterizing invariants derived earlier:

1. **Invariant 1: Deep Recursion with Insufficient Memoization**

```cpp
void check_recursion_invariant(int cnt, int idx, int maxDepth) {
    if (cnt > maxDepth) {
        cerr << "Warning: Performance bottleneck condition triggered - recursion depth too high!" << endl;
        abort();
    }
}
```

2. **Invariant 2: High Branching Factor in Decision-Making**

```cpp
void check_branching_invariant(int n, int threshold) {
    if (n > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - high branching factor!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Recursive Overhead Due to Nested Calls**

```cpp
void check_recursive_calls_invariant(int callCount, int callThreshold) {
    if (callCount > callThreshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive calls!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Below is the original C++ program instrumented with the above checker functions. The checkers are placed at effective points in the program to catch potential performance issues while avoiding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_recursion_invariant(int cnt, int idx, int maxDepth) {
    if (cnt > maxDepth) {
        cerr << "Warning: Performance bottleneck condition triggered - recursion depth too high!" << endl;
        abort();
    }
}

void check_branching_invariant(int n, int threshold) {
    if (n > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - high branching factor!" << endl;
        abort();
    }
}

void check_recursive_calls_invariant(int callCount, int callThreshold) {
    if (callCount > callThreshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive calls!" << endl;
        abort();
    }
}

long long powmod(long long a, long long b) {
    long long res = 1;
    if (a >= 1000000007) a %= 1000000007;
    for (; b; b >>= 1) {
        if (b & 1) res = res * a;
        if (res >= 1000000007) res %= 1000000007;
        a = a * a;
        if (a >= 1000000007) a %= 1000000007;
    }
    return res;
}

long long gcd(long long a, long long b) { return b == 0 ? a : gcd(b, a % b); }

const long long LOGN = 20;
const long long N = (1 << LOGN) + 99;
long long dp[LOGN + 2][N];
long long sum[100];
long long n;
long long bribes[N];
int recursionCallCount = 0;

long long f(long long cnt, long long idx) {
    // Check recursion invariant
    check_recursion_invariant(cnt, idx, LOGN / 2); // Check for high recursion depth
    recursionCallCount++;
    check_recursive_calls_invariant(recursionCallCount, 5000); // Check for excessive recursive calls

    if (dp[cnt][idx] != -1) return dp[cnt][idx];
    if (bribes[idx] == -1) return 0;
    long long remaining = sum[cnt] - idx;
    long long ans = numeric_limits<long long>::max();
    if (cnt < LOGN) ans = min(ans, f(cnt + 1, idx + 1) + bribes[idx]);
    if (remaining > 0) {
        ans = min(ans, f(cnt, idx + 1));
    }
    return dp[cnt][idx] = ans;
}

int main() {
    cin >> n;
    check_branching_invariant(n, (1 << (LOGN - 2))); // Check for high branching factor

    for (int i = 0; i < n; i++) {
        cin >> bribes[i];
    }
    memset(dp, -1, sizeof dp);
    reverse(bribes, bribes + n);
    sum[0] = 0;
    long long x = n / 2;
    for (long long i = 1; i < 100; i++) {
        sum[i] = sum[i - 1] + x;
        x /= 2;
    }
    cout << f(0, 0) << endl;
    return 0;
}
```

### Explanation

- **`check_recursion_invariant`**: Called inside the recursive function `f()`. It checks the recursion depth (`cnt`) against a threshold (`LOGN / 2`), chosen based on the maximum recursion expected for dividing the problem.

- **`check_branching_invariant`**: Placed in `main()` to verify if `n` leads to a prohibitive number of branches.

- **`check_recursive_calls_invariant`**: Monitors the number of recursive calls made to `f()`, ensuring it does not exceed a set threshold, highlighting inefficiencies in handling states. Here, a threshold of `5000` is arbitrarily chosen for demonstration purposes. Adjust based on testing and profiling results.

