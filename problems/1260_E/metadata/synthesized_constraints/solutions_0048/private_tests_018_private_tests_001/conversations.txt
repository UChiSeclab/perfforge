system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are organizing a boxing tournament, where n boxers will participate (n is a power of 2), and your friend is one of them. All boxers have different strength from 1 to n, and boxer i wins in the match against boxer j if and only if i is stronger than j.

The tournament will be organized as follows: n boxers will be divided into pairs; the loser in each pair leaves the tournament, and n/2 winners advance to the next stage, where they are divided into pairs again, and the winners in all pairs advance to the next stage, and so on, until only one boxer remains (who is declared the winner).

Your friend really wants to win the tournament, but he may be not the strongest boxer. To help your friend win the tournament, you may bribe his opponents: if your friend is fighting with a boxer you have bribed, your friend wins even if his strength is lower.

Furthermore, during each stage you distribute the boxers into pairs as you wish.

The boxer with strength i can be bribed if you pay him a_i dollars. What is the minimum number of dollars you have to spend to make your friend win the tournament, provided that you arrange the boxers into pairs during each stage as you wish?

Input

The first line contains one integer n (2 ≤ n ≤ 2^{18}) — the number of boxers. n is a power of 2.

The second line contains n integers a_1, a_2, ..., a_n, where a_i is the number of dollars you have to pay if you want to bribe the boxer with strength i. Exactly one of a_i is equal to -1 — it means that the boxer with strength i is your friend. All other values are in the range [1, 10^9].

Output

Print one integer — the minimum number of dollars you have to pay so your friend wins.

Examples

Input


4
3 9 1 -1


Output


0

Input


8
11 -1 13 19 24 7 17 5


Output


12

Note

In the first test case no matter how you will distribute boxers into pairs, your friend is the strongest boxer and anyway wins the tournament.

In the second test case you can distribute boxers as follows (your friend is number 2):

1 : 2, 8 : 5, 7 : 3, 6 : 4 (boxers 2, 8, 7 and 6 advance to the next stage);

2 : 6, 8 : 7 (boxers 2 and 8 advance to the next stage, you have to bribe the boxer with strength 6);

2 : 8 (you have to bribe the boxer with strength 8);

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = (2 << 18);
const long long INF = 2e18;
long long seg[N << 2];
void build(int rt, int l, int r) {
  seg[rt] = INF;
  if (l == r) {
    return;
  }
  int mid = l + r >> 1;
  build(rt << 1, l, mid);
  build(rt << 1 | 1, mid + 1, r);
}
void update(int rt, int l, int r, int x, long long w) {
  if (l == r) {
    seg[rt] = w;
    return;
  }
  int mid = l + r >> 1;
  if (x <= mid)
    update(rt << 1, l, mid, x, w);
  else
    update(rt << 1 | 1, mid + 1, r, x, w);
  seg[rt] = min(seg[rt << 1 | 1], seg[rt << 1]);
}
long long query(int rt, int l, int r, int x, int y) {
  if (x <= l && y >= r) {
    return seg[rt];
  }
  int mid = l + r >> 1;
  long long res = INF;
  if (x <= mid) res = min(res, query(rt << 1, l, mid, x, y));
  if (y > mid) res = min(res, query(rt << 1 | 1, mid + 1, r, x, y));
  return res;
}
long long a[N], dp[N];
int main() {
  int n;
  scanf("%d", &n);
  for (int i = 1; i <= n; i++) scanf("%lld", a + i);
  int cnt = 0, m = n;
  while (m) {
    m >>= 1;
    cnt++;
  }
  build(1, 1, n);
  dp[n] = a[n];
  if (a[n] == -1) {
    printf("0\n");
    return 0;
  }
  update(1, 1, n, n, dp[n]);
  long long ans = -1;
  cnt--;
  m = 1;
  for (int i = 1; i <= cnt; i++) {
    if (ans != -1) break;
    for (int j = (1 << (cnt - i)); j <= n; j++) {
      if (j > n - i) {
        dp[j] = INF;
        update(1, 1, n, j, dp[j]);
        continue;
      }
      long long res = query(1, 1, n, j + 1, n);
      dp[j] = res + a[j];
      if (a[j] == -1) {
        ans = res;
        break;
      }
      update(1, 1, n, j, dp[j]);
    }
    m++;
  }
  printf("%lld\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

128
-1 37 90 12 24 35 86 39 20 27 86 95 51 8 33 32 55 35 8 75 74 79 64 51 66 32 34 45 39 89 19 11 86 31 69 58 40 58 62 11 99 54 31 10 4 70 88 22 94 23 46 20 65 97 61 39 31 65 23 31 95 78 40 25 51 14 12 55 8 63 18 57 91 75 31 26 22 84 29 22 32 64 20 12 49 92 50 4 97 17 26 88 10 56 73 22 92 94 83 100 97 83 47 15 1 48 16 77 4 91 30 38 13 46 18 76 77 2 45 70 9 41 16 22 84 81 20 43


(G.2) Fast Input

2
-1 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = (2 << 18); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 2e18; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long seg[N << 2]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void build(int rt, int l, int r) { /* line 6 slow_hit_count: 255, fast_hit_count: 3 */
  seg[rt] = INF; /* line 7 slow_hit_count: 255, fast_hit_count: 3 */
  if (l == r) { /* line 8 slow_hit_count: 255, fast_hit_count: 3 */
    return; /* line 9 slow_hit_count: 128, fast_hit_count: 2 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  int mid = l + r >> 1; /* line 11 slow_hit_count: 127, fast_hit_count: 1 */
  build(rt << 1, l, mid); /* line 12 slow_hit_count: 127, fast_hit_count: 1 */
  build(rt << 1 | 1, mid + 1, r); /* line 13 slow_hit_count: 127, fast_hit_count: 1 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
void update(int rt, int l, int r, int x, long long w) { /* line 15 slow_hit_count: 5192, fast_hit_count: 2 */
  if (l == r) { /* line 16 slow_hit_count: 5192, fast_hit_count: 2 */
    seg[rt] = w; /* line 17 slow_hit_count: 649, fast_hit_count: 1 */
    return; /* line 18 slow_hit_count: 649, fast_hit_count: 1 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  int mid = l + r >> 1; /* line 20 slow_hit_count: 4543, fast_hit_count: 1 */
  if (x <= mid) /* line 21 slow_hit_count: 4543, fast_hit_count: 1 */
    update(rt << 1, l, mid, x, w); /* line 22 slow_hit_count: 2148, fast_hit_count: 0 */
  else /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    update(rt << 1 | 1, mid + 1, r, x, w); /* line 24 slow_hit_count: 2395, fast_hit_count: 1 */
  seg[rt] = min(seg[rt << 1 | 1], seg[rt << 1]); /* line 25 slow_hit_count: 4543, fast_hit_count: 1 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
long long query(int rt, int l, int r, int x, int y) { /* line 27 slow_hit_count: 5919, fast_hit_count: 2 */
  if (x <= l && y >= r) { /* line 28 slow_hit_count: 5919, fast_hit_count: 2 */
    return seg[rt]; /* line 29 slow_hit_count: 2136, fast_hit_count: 1 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  int mid = l + r >> 1; /* line 31 slow_hit_count: 3783, fast_hit_count: 1 */
  long long res = INF; /* line 32 slow_hit_count: 3783, fast_hit_count: 1 */
  if (x <= mid) res = min(res, query(rt << 1, l, mid, x, y)); /* line 33 slow_hit_count: 3783, fast_hit_count: 1 */
  if (y > mid) res = min(res, query(rt << 1 | 1, mid + 1, r, x, y)); /* line 34 slow_hit_count: 3783, fast_hit_count: 1 */
  return res; /* line 35 slow_hit_count: 3783, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
long long a[N], dp[N]; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &n); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) scanf("%lld", a + i); /* line 41 slow_hit_count: 129, fast_hit_count: 3 */
  int cnt = 0, m = n; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  while (m) { /* line 43 slow_hit_count: 9, fast_hit_count: 3 */
    m >>= 1; /* line 44 slow_hit_count: 8, fast_hit_count: 2 */
    cnt++; /* line 45 slow_hit_count: 8, fast_hit_count: 2 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  build(1, 1, n); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  dp[n] = a[n]; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  if (a[n] == -1) { /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
    printf("0\n"); /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  update(1, 1, n, n, dp[n]); /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = -1; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  cnt--; /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  m = 1; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= cnt; i++) { /* line 57 slow_hit_count: 8, fast_hit_count: 2 */
    if (ans != -1) break; /* line 58 slow_hit_count: 7, fast_hit_count: 1 */
    for (int j = (1 << (cnt - i)); j <= n; j++) { /* line 59 slow_hit_count: 655, fast_hit_count: 1 */
      if (j > n - i) { /* line 60 slow_hit_count: 649, fast_hit_count: 1 */
        dp[j] = INF; /* line 61 slow_hit_count: 21, fast_hit_count: 0 */
        update(1, 1, n, j, dp[j]); /* line 62 slow_hit_count: 21, fast_hit_count: 0 */
        continue; /* line 63 slow_hit_count: 21, fast_hit_count: 0 */
      } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      long long res = query(1, 1, n, j + 1, n); /* line 65 slow_hit_count: 628, fast_hit_count: 1 */
      dp[j] = res + a[j]; /* line 66 slow_hit_count: 628, fast_hit_count: 1 */
      if (a[j] == -1) { /* line 67 slow_hit_count: 628, fast_hit_count: 1 */
        ans = res; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
        break; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
      update(1, 1, n, j, dp[j]); /* line 71 slow_hit_count: 627, fast_hit_count: 0 */
    } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
    m++; /* line 73 slow_hit_count: 7, fast_hit_count: 1 */
  } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", ans); /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 77 slow_hit_count: 0, fast_hit_count: 0 */


assistant: **Phase 1: Identify Expensive or Inefficient Code Segments**

Upon comparing the line-level hit counts between the fast and slow runs, we notice the following:

1. **Recursive Tree Building (Lines 6-13)**: The `build` function gets called significantly more in the slow input (255 times) as compared to the fast input (3 times). This is indicative of the larger input size leading to more recursive calls for constructing the segment tree.

2. **Frequent Updates (Lines 15-26)**: The `update` function is invoked 5192 times in the slow run as opposed to just 2 times in the fast run. This function is responsible for updating the segment tree nodes, and its high hit count in the slow run suggests that it is a major contributor to the slowdown.

3. **Numerous Queries (Lines 27-36)**: The `query` function is called 5919 times in the slow input, compared to 2 times in the fast input. This indicates that multiple queries are being made on the segment tree to determine the minimum bribes needed throughout the tournament, likely due to the larger number of stages and matchups present in the larger input size.

4. **Nested Loop Operations (Lines 57-73)**: The nested loops, particularly the inner loop (lines 59-72), show a significant number of iterations in the slow input, with notable operations inside the loop such as `query` and `update`. These hit counts suggest that the loop execution grows quadratically with the number of boxers, impacting the performance.

**Phase 2: Derive Performance-Characterizing Invariants**

1. **Invariant Regarding Segment Tree Operations:**
   - Natural Language Description: "If the input size is large, constructing and updating the segment tree frequently can lead to increased computational overhead. This situation arises from recursive operations and repeated updates, which expand exponentially with input size."
   - This invariant suggests that the deeper the recursion in the `build` function and the more updates in the `update` function, the more expensive the computation becomes.

2. **Invariant Concerning Recursive Data Structure Traversal:**
   - Natural Language Description: "When the number of boxers is large, recursive queries and updates on the segment tree become more frequent, leading to potential slowdowns due to repeated tree traversals."
   - Especially as `n` approaches its maximum value of `2^18`, the recursive nature of these functions becomes a bottleneck.

3. **Invariant on Nested Loop Complexity:**
   - Natural Language Description: "If the number of tournament stages is high, akin to a large input size, the nested loops responsible for managing pairings and bribes can significantly slow down the program due to the quadratic growth in operations."
   - The loops are indicative of complexity that grows with the number of rounds and matches, where each round potentially doubles the operations required.

4. **Invariant on Input Size Impact:**
   - Natural Language Description: "When handling maximum constraints like n = 2^18, the algorithm's time complexity can lead to slow performance due to the compounded effect of segment tree operations and nested loops."
   - This suggests a threshold where algorithmic inefficiencies become apparent as `n` increases, particularly towards its upper constraint.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are organizing a boxing tournament, where n boxers will participate (n is a power of 2), and your friend is one of them. All boxers have different strength from 1 to n, and boxer i wins in the match against boxer j if and only if i is stronger than j.

The tournament will be organized as follows: n boxers will be divided into pairs; the loser in each pair leaves the tournament, and n/2 winners advance to the next stage, where they are divided into pairs again, and the winners in all pairs advance to the next stage, and so on, until only one boxer remains (who is declared the winner).

Your friend really wants to win the tournament, but he may be not the strongest boxer. To help your friend win the tournament, you may bribe his opponents: if your friend is fighting with a boxer you have bribed, your friend wins even if his strength is lower.

Furthermore, during each stage you distribute the boxers into pairs as you wish.

The boxer with strength i can be bribed if you pay him a_i dollars. What is the minimum number of dollars you have to spend to make your friend win the tournament, provided that you arrange the boxers into pairs during each stage as you wish?

Input

The first line contains one integer n (2 ≤ n ≤ 2^{18}) — the number of boxers. n is a power of 2.

The second line contains n integers a_1, a_2, ..., a_n, where a_i is the number of dollars you have to pay if you want to bribe the boxer with strength i. Exactly one of a_i is equal to -1 — it means that the boxer with strength i is your friend. All other values are in the range [1, 10^9].

Output

Print one integer — the minimum number of dollars you have to pay so your friend wins.

Examples

Input


4
3 9 1 -1


Output


0

Input


8
11 -1 13 19 24 7 17 5


Output


12

Note

In the first test case no matter how you will distribute boxers into pairs, your friend is the strongest boxer and anyway wins the tournament.

In the second test case you can distribute boxers as follows (your friend is number 2):

1 : 2, 8 : 5, 7 : 3, 6 : 4 (boxers 2, 8, 7 and 6 advance to the next stage);

2 : 6, 8 : 7 (boxers 2 and 8 advance to the next stage, you have to bribe the boxer with strength 6);

2 : 8 (you have to bribe the boxer with strength 8);

Solution (C++ code):
{solution}


assistant: **Phase 3: Implement the Natural Language Invariants in C++**

Let's translate the natural language invariants into C++ code snippets. Each code snippet will check a specific performance bottleneck condition:

1. **Invariant Regarding Segment Tree Operations:**

   ```cpp
   void check_segment_tree_operations(int n, long long operationCount) {
       if (operationCount > n * log2(n)) { // Checking if operations exceed a reasonable threshold
           cerr << "Warning: Performance bottleneck in segment tree operations!" << endl;
           abort();
       }
   }
   ```

2. **Invariant Concerning Recursive Data Structure Traversal:**

   ```cpp
   void check_recursive_traversal(int recursionDepth, int n) {
       if (recursionDepth > log2(n) + 10) { // A threshold slightly exceeding log2(n) to account for worst cases
           cerr << "Warning: Recursion depth exceeding expected limits!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Nested Loop Complexity:**

   ```cpp
   void check_nested_loops(int loopIterations, int n) {
       if (loopIterations > n * log2(n)) { // Checking if nested loops are iterated excessively
           cerr << "Warning: Excessive iterations in nested loops!" << endl;
           abort();
       }
   }
   ```

4. **Invariant on Input Size Impact:**

   ```cpp
   void check_input_size(int n) {
       if (n >= (1 << 18)) { // Max constraint as per problem statement
           cerr << "Warning: Input size at maximum constraint, potential slowdown!" << endl;
           abort();
       }
   }
   ```

**Phase 4: Integrate the Checker Code into the Original Program**

Now, we integrate these checker functions into the original C++ program to monitor the potential performance bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = (2 << 18);
const long long INF = 2e18;
long long seg[N << 2];

void check_segment_tree_operations(int n, long long operationCount) {
    if (operationCount > n * log2(n)) {
        cerr << "Warning: Performance bottleneck in segment tree operations!" << endl;
        abort();
    }
}

void check_recursive_traversal(int recursionDepth, int n) {
    if (recursionDepth > log2(n) + 10) {
        cerr << "Warning: Recursion depth exceeding expected limits!" << endl;
        abort();
    }
}

void check_nested_loops(int loopIterations, int n) {
    if (loopIterations > n * log2(n)) {
        cerr << "Warning: Excessive iterations in nested loops!" << endl;
        abort();
    }
}

void check_input_size(int n) {
    if (n >= (1 << 18)) {
        cerr << "Warning: Input size at maximum constraint, potential slowdown!" << endl;
        abort();
    }
}

void build(int rt, int l, int r, int depth) {
    check_recursive_traversal(depth, N);
    seg[rt] = INF;
    if (l == r) {
        return;
    }
    int mid = l + r >> 1;
    build(rt << 1, l, mid, depth + 1);
    build(rt << 1 | 1, mid + 1, r, depth + 1);
}

void update(int rt, int l, int r, int x, long long w, long long& updateCount) {
    updateCount++;
    if (l == r) {
        seg[rt] = w;
        return;
    }
    int mid = l + r >> 1;
    if (x <= mid)
        update(rt << 1, l, mid, x, w, updateCount);
    else
        update(rt << 1 | 1, mid + 1, r, x, w, updateCount);
    seg[rt] = min(seg[rt << 1 | 1], seg[rt << 1]);
}

long long query(int rt, int l, int r, int x, int y, long long& queryCount) {
    queryCount++;
    if (x <= l && y >= r) {
        return seg[rt];
    }
    int mid = l + r >> 1;
    long long res = INF;
    if (x <= mid) res = min(res, query(rt << 1, l, mid, x, y, queryCount));
    if (y > mid) res = min(res, query(rt << 1 | 1, mid + 1, r, x, y, queryCount));
    return res;
}

long long a[N], dp[N];

int main() {
    int n;
    scanf("%d", &n);
    
    // Check input size for potential slowdown
    check_input_size(n);
    
    for (int i = 1; i <= n; i++) scanf("%lld", a + i);
    int cnt = 0, m = n;
    while (m) {
        m >>= 1;
        cnt++;
    }

    build(1, 1, n, 0); // Initialize the segment tree, track recursion depth

    long long updateCount = 0, queryCount = 0;
    
    dp[n] = a[n];
    if (a[n] == -1) {
        printf("0\n");
        return 0;
    }
    
    update(1, 1, n, n, dp[n], updateCount);
    long long ans = -1;
    cnt--;
    m = 1;

    int loopIterations = 0;

    for (int i = 1; i <= cnt; i++) {
        if (ans != -1) break;
        for (int j = (1 << (cnt - i)); j <= n; j++) {
            loopIterations++;
            if (j > n - i) {
                dp[j] = INF;
                update(1, 1, n, j, dp[j], updateCount);
                continue;
            }
            long long res = query(1, 1, n, j + 1, n, queryCount);
            dp[j] = res + a[j];
            if (a[j] == -1) {
                ans = res;
                break;
            }
            update(1, 1, n, j, dp[j], updateCount);
        }
        m++;
    }

    // Check for excessive nested loop iterations
    check_nested_loops(loopIterations, n);

    // Check the segment tree operation counts
    check_segment_tree_operations(n, updateCount + queryCount);

    printf("%lld\n", ans);
    return 0;
}
```

### Explanation:
- **Recursion Depth Checker**: Added to the `build` function to ensure the recursion doesn't exceed expected limits.
- **Segment Tree Operation Checkers**: Track the number of `update` and `query` operations to detect excessive operations.
- **Nested Loop Checker**: Counts iterations of nested loops to ensure they don't exceed expected bounds.
- **Input Size Checker**: Immediately checks the size of `n` to detect when it's at the upper end of constraints.

