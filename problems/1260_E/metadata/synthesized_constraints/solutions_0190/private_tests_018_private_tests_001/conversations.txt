system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are organizing a boxing tournament, where n boxers will participate (n is a power of 2), and your friend is one of them. All boxers have different strength from 1 to n, and boxer i wins in the match against boxer j if and only if i is stronger than j.

The tournament will be organized as follows: n boxers will be divided into pairs; the loser in each pair leaves the tournament, and n/2 winners advance to the next stage, where they are divided into pairs again, and the winners in all pairs advance to the next stage, and so on, until only one boxer remains (who is declared the winner).

Your friend really wants to win the tournament, but he may be not the strongest boxer. To help your friend win the tournament, you may bribe his opponents: if your friend is fighting with a boxer you have bribed, your friend wins even if his strength is lower.

Furthermore, during each stage you distribute the boxers into pairs as you wish.

The boxer with strength i can be bribed if you pay him a_i dollars. What is the minimum number of dollars you have to spend to make your friend win the tournament, provided that you arrange the boxers into pairs during each stage as you wish?

Input

The first line contains one integer n (2 ≤ n ≤ 2^{18}) — the number of boxers. n is a power of 2.

The second line contains n integers a_1, a_2, ..., a_n, where a_i is the number of dollars you have to pay if you want to bribe the boxer with strength i. Exactly one of a_i is equal to -1 — it means that the boxer with strength i is your friend. All other values are in the range [1, 10^9].

Output

Print one integer — the minimum number of dollars you have to pay so your friend wins.

Examples

Input


4
3 9 1 -1


Output


0

Input


8
11 -1 13 19 24 7 17 5


Output


12

Note

In the first test case no matter how you will distribute boxers into pairs, your friend is the strongest boxer and anyway wins the tournament.

In the second test case you can distribute boxers as follows (your friend is number 2):

1 : 2, 8 : 5, 7 : 3, 6 : 4 (boxers 2, 8, 7 and 6 advance to the next stage);

2 : 6, 8 : 7 (boxers 2 and 8 advance to the next stage, you have to bribe the boxer with strength 6);

2 : 8 (you have to bribe the boxer with strength 8);

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int N = 1 << 19;
const ll oo = 1e18;
int n, a[N];
int used[N];
ll dp[N][19];
ll dn[N][19];
ll fn(int i, int j, int k) {
  if (j == 0) return dp[i][k];
  if (~dn[i][j]) return dn[i][j];
  return dn[i][j] = min(fn(i, j - 1, k), fn(i + (1 << (j - 1)), j - 1, k));
}
int lg(int x) { return 31 - __builtin_clz(x); }
ll getmn(int l, int r, int k) {
  l = max(l, 0);
  if (l > r) return oo;
  int lz = lg(r - l + 1);
  return min(fn(l, lz, k), fn(r - (1 << lz) + 1, lz, k));
}
int main() {
  scanf("%d", &n);
  for (int i = 0; i < n; i++) scanf("%d", a + i);
  int id = 0;
  while (a[id] != -1) id++;
  for (int i = 0; i <= id; i++) a[i] = 0;
  ll ans = 0;
  for (int i = 0; i < n; i++) dp[i][0] = oo;
  dp[1][0] = a[1];
  for (int i = 1; i < n; i++) dp[i][0] = a[i];
  ans = a[n - 1];
  for (int lvl = 1; (1 << lvl) < n; lvl++) {
    memset(dn, -1, sizeof dn);
    int max_right = n - (1 << (lvl + 1));
    int removed = n - (1 << (lvl));
    ll mn = oo;
    dp[0][lvl] = oo;
    for (int i = 1; i < n; i++) {
      if (n - 1 - i > max_right) {
        dp[i][lvl] = oo;
      } else {
        dp[i][lvl] = getmn(n - 1 - removed, i - 1, lvl - 1) + a[i];
      }
      mn = min(mn, dp[i][lvl - 1]);
    }
    ans = dp[n - 1][lvl];
  }
  printf("%lld\n", ans);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

128
-1 37 90 12 24 35 86 39 20 27 86 95 51 8 33 32 55 35 8 75 74 79 64 51 66 32 34 45 39 89 19 11 86 31 69 58 40 58 62 11 99 54 31 10 4 70 88 22 94 23 46 20 65 97 61 39 31 65 23 31 95 78 40 25 51 14 12 55 8 63 18 57 91 75 31 26 22 84 29 22 32 64 20 12 49 92 50 4 97 17 26 88 10 56 73 22 92 94 83 100 97 83 47 15 1 48 16 77 4 91 30 38 13 46 18 76 77 2 45 70 9 41 16 22 84 81 20 43


(G.2) Fast Input

2
-1 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1 << 19; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const ll oo = 1e18; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int n, a[N]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int used[N]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
ll dp[N][19]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
ll dn[N][19]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
ll fn(int i, int j, int k) { /* line 10 slow_hit_count: 6906, fast_hit_count: 0 */
  if (j == 0) return dp[i][k]; /* line 11 slow_hit_count: 6906, fast_hit_count: 0 */
  if (~dn[i][j]) return dn[i][j]; /* line 12 slow_hit_count: 5696, fast_hit_count: 0 */
  return dn[i][j] = min(fn(i, j - 1, k), fn(i + (1 << (j - 1)), j - 1, k)); /* line 13 slow_hit_count: 2931, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int lg(int x) { return 31 - __builtin_clz(x); } /* line 15 slow_hit_count: 522, fast_hit_count: 0 */
ll getmn(int l, int r, int k) { /* line 16 slow_hit_count: 522, fast_hit_count: 0 */
  l = max(l, 0); /* line 17 slow_hit_count: 522, fast_hit_count: 0 */
  if (l > r) return oo; /* line 18 slow_hit_count: 522, fast_hit_count: 0 */
  int lz = lg(r - l + 1); /* line 19 slow_hit_count: 522, fast_hit_count: 0 */
  return min(fn(l, lz, k), fn(r - (1 << lz) + 1, lz, k)); /* line 20 slow_hit_count: 522, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) scanf("%d", a + i); /* line 24 slow_hit_count: 129, fast_hit_count: 3 */
  int id = 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  while (a[id] != -1) id++; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= id; i++) a[i] = 0; /* line 27 slow_hit_count: 2, fast_hit_count: 2 */
  ll ans = 0; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) dp[i][0] = oo; /* line 29 slow_hit_count: 129, fast_hit_count: 3 */
  dp[1][0] = a[1]; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < n; i++) dp[i][0] = a[i]; /* line 31 slow_hit_count: 128, fast_hit_count: 2 */
  ans = a[n - 1]; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  for (int lvl = 1; (1 << lvl) < n; lvl++) { /* line 33 slow_hit_count: 7, fast_hit_count: 1 */
    memset(dn, -1, sizeof dn); /* line 34 slow_hit_count: 6, fast_hit_count: 0 */
    int max_right = n - (1 << (lvl + 1)); /* line 35 slow_hit_count: 6, fast_hit_count: 0 */
    int removed = n - (1 << (lvl)); /* line 36 slow_hit_count: 6, fast_hit_count: 0 */
    ll mn = oo; /* line 37 slow_hit_count: 6, fast_hit_count: 0 */
    dp[0][lvl] = oo; /* line 38 slow_hit_count: 6, fast_hit_count: 0 */
    for (int i = 1; i < n; i++) { /* line 39 slow_hit_count: 768, fast_hit_count: 0 */
      if (n - 1 - i > max_right) { /* line 40 slow_hit_count: 762, fast_hit_count: 0 */
        dp[i][lvl] = oo; /* line 41 slow_hit_count: 240, fast_hit_count: 0 */
      } else { /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
        dp[i][lvl] = getmn(n - 1 - removed, i - 1, lvl - 1) + a[i]; /* line 43 slow_hit_count: 522, fast_hit_count: 0 */
      } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      mn = min(mn, dp[i][lvl - 1]); /* line 45 slow_hit_count: 762, fast_hit_count: 0 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    ans = dp[n - 1][lvl]; /* line 47 slow_hit_count: 6, fast_hit_count: 0 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", ans); /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 50 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Based on the problem statement, given C code, and the hit count data, I have identified potential performance bottlenecks and formulated performance-characterizing invariants. Below are the steps and findings for each phase:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Function `fn(i, j, k)`**: This function demonstrates high hit counts for the slow input, particularly for recursive calls on line 13. This suggests a deep or repeated recursion, which contributes significantly to the program's execution time.

2. **Loop Levels in `main()`**: The nested loops, particularly starting on line 33 (`for (int lvl = 1; (1 << lvl) < n; lvl++)`), contribute to the high number of calls to `fn(i, j, k)`, which is further intensified when `getmn` is called inside another loop on line 43.

3. **Recursive Call Depth and Data Processing**: The recursive nature and depth of calls in `fn()` suggest that certain combinations of parameters (i.e., `i`, `j`, `k`) and conditions might be leading to repeated calculations or deeper recursion for the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following natural language invariants describe conditions under which the program is likely to run slowly:

1. **Invariant for Recursive Depth and Branching**:
   - Natural Language Description: "If the recursive function `fn` is called with a high depth and branching factor due to large input sizes, the computation may become expensive. This is particularly true when the difference between the pair indices becomes significant in later rounds."
   - Explanation: As the recursion depth increases and branching becomes significant, the function evaluates combinations repeatedly, creating overhead.

2. **Invariant for Large Input Size with Recursive Pairing**:
   - Natural Language Description: "If the number of boxers `n` is large, nearing the upper constraint, and multiple recursive calls are required to evaluate pairing costs at each level, the program may slow down due to excessive recalculations."
   - Explanation: Larger input sizes significantly increase the number of possible pairs and recursive evaluations needed to determine the optimal bribe cost.

3. **Invariant for Efficient Memory Use**:
   - Natural Language Description: "If the levels of recursion and the use of memoization tables (`dp` and `dn`) are not managed efficiently across large input sizes, memory operations might incur overhead, slowing the program."
   - Explanation: Inefficient management of states or recomputation in the memoization tables increases execution time for larger input scenarios.

### Summary

These invariants highlight the recursive depth and complexity, the interplay of input size, and the efficiency of memory usage as critical factors influencing performance. By understanding these conditions, we can better predict and potentially mitigate slow execution paths in this tournament bribe optimization problem.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are organizing a boxing tournament, where n boxers will participate (n is a power of 2), and your friend is one of them. All boxers have different strength from 1 to n, and boxer i wins in the match against boxer j if and only if i is stronger than j.

The tournament will be organized as follows: n boxers will be divided into pairs; the loser in each pair leaves the tournament, and n/2 winners advance to the next stage, where they are divided into pairs again, and the winners in all pairs advance to the next stage, and so on, until only one boxer remains (who is declared the winner).

Your friend really wants to win the tournament, but he may be not the strongest boxer. To help your friend win the tournament, you may bribe his opponents: if your friend is fighting with a boxer you have bribed, your friend wins even if his strength is lower.

Furthermore, during each stage you distribute the boxers into pairs as you wish.

The boxer with strength i can be bribed if you pay him a_i dollars. What is the minimum number of dollars you have to spend to make your friend win the tournament, provided that you arrange the boxers into pairs during each stage as you wish?

Input

The first line contains one integer n (2 ≤ n ≤ 2^{18}) — the number of boxers. n is a power of 2.

The second line contains n integers a_1, a_2, ..., a_n, where a_i is the number of dollars you have to pay if you want to bribe the boxer with strength i. Exactly one of a_i is equal to -1 — it means that the boxer with strength i is your friend. All other values are in the range [1, 10^9].

Output

Print one integer — the minimum number of dollars you have to pay so your friend wins.

Examples

Input


4
3 9 1 -1


Output


0

Input


8
11 -1 13 19 24 7 17 5


Output


12

Note

In the first test case no matter how you will distribute boxers into pairs, your friend is the strongest boxer and anyway wins the tournament.

In the second test case you can distribute boxers as follows (your friend is number 2):

1 : 2, 8 : 5, 7 : 3, 6 : 4 (boxers 2, 8, 7 and 6 advance to the next stage);

2 : 6, 8 : 7 (boxers 2 and 8 advance to the next stage, you have to bribe the boxer with strength 6);

2 : 8 (you have to bribe the boxer with strength 8);

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below is the C++ code to check the conditions described in the performance-characterizing invariants.

```cpp
#include <iostream>
#include <cmath>

// Checker for recursion depth and branching factor
void check_recursion_invariant(int depth, int branching) {
    if (depth > 18 && branching > 2) {
        std::cerr << "Warning: Performance bottleneck condition triggered - high recursion depth or branching factor!" << std::endl;
        abort();
    }
}

// Checker for large input sizes with recursive pairing
void check_input_size_invariant(int n) {
    if (n >= (1 << 18)) {
        std::cerr << "Warning: Performance bottleneck condition triggered - large input size!" << std::endl;
        abort();
    }
}

// Checker for memory usage and efficiency
void check_memory_usage_invariant(int levelsUsed, int maxLevels) {
    if (levelsUsed > maxLevels) {
        std::cerr << "Warning: Performance bottleneck condition triggered - inefficient memory usage!" << std::endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Next, integrate these checkers into the original program. Place them at effective points to monitor potential bottlenecks without adding much overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
const int N = 1 << 19;
const ll oo = 1e18;
int n, a[N];
int used[N];
ll dp[N][19];
ll dn[N][19];

// Checker for recursion depth and branching factor
void check_recursion_invariant(int depth, int branching) {
    if (depth > 18 && branching > 2) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth or branching factor!" << endl;
        abort();
    }
}

// Checker for large input sizes with recursive pairing
void check_input_size_invariant(int n) {
    if (n >= (1 << 18)) {
        cerr << "Warning: Performance bottleneck condition triggered - large input size!" << endl;
        abort();
    }
}

// Checker for memory usage and efficiency
void check_memory_usage_invariant(int levelsUsed, int maxLevels) {
    if (levelsUsed > maxLevels) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient memory usage!" << endl;
        abort();
    }
}

ll fn(int i, int j, int k) {
    check_recursion_invariant(j, 2); // Check recursion depth and branching factor
    if (j == 0) return dp[i][k];
    if (~dn[i][j]) return dn[i][j];
    return dn[i][j] = min(fn(i, j - 1, k), fn(i + (1 << (j - 1)), j - 1, k));
}

int lg(int x) { return 31 - __builtin_clz(x); }

ll getmn(int l, int r, int k) {
    l = max(l, 0);
    if (l > r) return oo;
    int lz = lg(r - l + 1);
    return min(fn(l, lz, k), fn(r - (1 << lz) + 1, lz, k));
}

int main() {
    scanf("%d", &n);

    check_input_size_invariant(n); // Check input size

    for (int i = 0; i < n; i++) scanf("%d", a + i);
    int id = 0;
    while (a[id] != -1) id++;
    for (int i = 0; i <= id; i++) a[i] = 0;
    ll ans = 0;
    for (int i = 0; i < n; i++) dp[i][0] = oo;
    dp[1][0] = a[1];
    for (int i = 1; i < n; i++) dp[i][0] = a[i];
    ans = a[n - 1];

    int levelsUsed = 0; // Track levels used for memory usage check
    for (int lvl = 1; (1 << lvl) < n; lvl++) {
        check_memory_usage_invariant(levelsUsed, 19); // Check memory usage efficiency
        memset(dn, -1, sizeof dn);
        int max_right = n - (1 << (lvl + 1));
        int removed = n - (1 << (lvl));
        ll mn = oo;
        dp[0][lvl] = oo;
        for (int i = 1; i < n; i++) {
            if (n - 1 - i > max_right) {
                dp[i][lvl] = oo;
            } else {
                dp[i][lvl] = getmn(n - 1 - removed, i - 1, lvl - 1) + a[i];
            }
            mn = min(mn, dp[i][lvl - 1]);
        }
        ans = dp[n - 1][lvl];
        levelsUsed++;
    }
    printf("%lld\n", ans);
}
```

### Explanation of Integrated Checks

- **Recursion Depth and Branching Factor**: This check is placed inside the function `fn()` to capture if the recursion depth (`j`) exceeds typical levels with significant branching.
  
- **Input Size**: This check is placed right after reading the input value `n` to ensure the input size doesn't reach a critical threshold that could cause performance issues.

- **Memory Usage Efficiency**: This check is inside the loop that deals with levels, ensuring that the memory used in terms of levels processed doesn't exceed a reasonable threshold, thus preventing inefficient memory usage.

These checks help in identifying conditions that could lead to performance bottlenecks and provide immediate feedback if such conditions are about to be met.

