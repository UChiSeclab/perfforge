system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are organizing a boxing tournament, where n boxers will participate (n is a power of 2), and your friend is one of them. All boxers have different strength from 1 to n, and boxer i wins in the match against boxer j if and only if i is stronger than j.

The tournament will be organized as follows: n boxers will be divided into pairs; the loser in each pair leaves the tournament, and n/2 winners advance to the next stage, where they are divided into pairs again, and the winners in all pairs advance to the next stage, and so on, until only one boxer remains (who is declared the winner).

Your friend really wants to win the tournament, but he may be not the strongest boxer. To help your friend win the tournament, you may bribe his opponents: if your friend is fighting with a boxer you have bribed, your friend wins even if his strength is lower.

Furthermore, during each stage you distribute the boxers into pairs as you wish.

The boxer with strength i can be bribed if you pay him a_i dollars. What is the minimum number of dollars you have to spend to make your friend win the tournament, provided that you arrange the boxers into pairs during each stage as you wish?

Input

The first line contains one integer n (2 ≤ n ≤ 2^{18}) — the number of boxers. n is a power of 2.

The second line contains n integers a_1, a_2, ..., a_n, where a_i is the number of dollars you have to pay if you want to bribe the boxer with strength i. Exactly one of a_i is equal to -1 — it means that the boxer with strength i is your friend. All other values are in the range [1, 10^9].

Output

Print one integer — the minimum number of dollars you have to pay so your friend wins.

Examples

Input


4
3 9 1 -1


Output


0

Input


8
11 -1 13 19 24 7 17 5


Output


12

Note

In the first test case no matter how you will distribute boxers into pairs, your friend is the strongest boxer and anyway wins the tournament.

In the second test case you can distribute boxers as follows (your friend is number 2):

1 : 2, 8 : 5, 7 : 3, 6 : 4 (boxers 2, 8, 7 and 6 advance to the next stage);

2 : 6, 8 : 7 (boxers 2 and 8 advance to the next stage, you have to bribe the boxer with strength 6);

2 : 8 (you have to bribe the boxer with strength 8);

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const double pi = 2 * acos(0.0);
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
const int dx8[] = {-1, 0, 1, 0, 1, 1, -1, -1};
const int dy8[] = {0, -1, 0, 1, 1, -1, 1, -1};
long long min(long long a, long long b) {
  if (a < b) return a;
  return b;
}
long long max(long long a, long long b) {
  if (a > b) return a;
  return b;
}
long long ceil1(long long a, long long b) { return (a + b - 1) / b; }
void read(vector<long long>& arr) {
  for (long long i = 0; i < int(arr.size()); i++) cin >> arr[i];
}
void read_graph(vector<vector<long long>>& g, long long m) {
  while (m--) {
    long long x, y;
    cin >> x >> y;
    x--, y--;
    g[x].push_back(y);
    g[y].push_back(x);
  }
}
long long n;
long long inf = numeric_limits<long long>::max();
long long lim = 30;
vector<vector<long long>> dp;
vector<long long> cnt, arr;
long long calc(long long pos, long long fuel, long long c) {
  if (pos == n) return 0;
  long long res = inf;
  if (arr[pos] == -1) return 0;
  if (c == lim) return 0;
  if (dp[pos][c] != -1) return dp[pos][c];
  if (fuel == 0) {
    res = min(res, calc(pos + 1, fuel + cnt[c + 1], c + 1) + arr[pos]);
  } else {
    res = min(res, calc(pos + 1, fuel - 1, c));
    res = min(res, calc(pos + 1, fuel + cnt[c + 1], c + 1) + arr[pos]);
  }
  dp[pos][c] = res;
  return res;
}
void solve() {
  cin >> n;
  lim = min(lim, n);
  arr = vector<long long>(n);
  read(arr);
  cnt = vector<long long>(lim + 3, 0);
  long long pw = n / 2;
  for (long long i = 1; i <= lim; i++) {
    cnt[i] = pw - 1;
    pw /= 2;
  }
  reverse(arr.begin(), arr.end());
  dp = vector<vector<long long>>(n + 3, vector<long long>(lim, -1));
  cout << calc(0, 0, 0);
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

128
-1 37 147 12 24 35 86 39 20 27 86 95 51 8 33 32 55 35 8 75 74 79 64 51 66 32 34 45 39 89 19 11 86 31 69 58 40 58 62 11 99 54 31 10 4 70 88 22 94 23 46 20 65 97 61 39 31 65 23 31 95 78 40 25 51 14 12 55 8 63 18 57 91 75 31 26 22 84 29 22 32 64 20 12 49 92 50 4 97 17 26 88 10 56 73 22 92 94 83 100 97 83 47 15 1 48 16 77 4 91 30 38 13 46 18 76 77 2 45 70 9 41 16 22 84 81 20 43


(G.2) Fast Input

2
-1 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const double pi = 2 * acos(0.0); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int dx[] = {-1, 0, 1, 0}; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int dy[] = {0, -1, 0, 1}; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const int dx8[] = {-1, 0, 1, 0, 1, 1, -1, -1}; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const int dy8[] = {0, -1, 0, 1, 1, -1, 1, -1}; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long min(long long a, long long b) { /* line 8 slow_hit_count: 6264, fast_hit_count: 2 */
  if (a < b) return a; /* line 9 slow_hit_count: 6264, fast_hit_count: 2 */
  return b; /* line 10 slow_hit_count: 3190, fast_hit_count: 2 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
long long max(long long a, long long b) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  if (a > b) return a; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  return b; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
long long ceil1(long long a, long long b) { return (a + b - 1) / b; } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
void read(vector<long long>& arr) { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < int(arr.size()); i++) cin >> arr[i]; /* line 18 slow_hit_count: 129, fast_hit_count: 3 */
} /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
void read_graph(vector<vector<long long>>& g, long long m) { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  while (m--) { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    long long x, y; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> y; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    x--, y--; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    g[x].push_back(y); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    g[y].push_back(x); /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
long long n; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
long long inf = numeric_limits<long long>::max(); /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
long long lim = 30; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<long long>> dp; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> cnt, arr; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
long long calc(long long pos, long long fuel, long long c) { /* line 34 slow_hit_count: 6264, fast_hit_count: 2 */
  if (pos == n) return 0; /* line 35 slow_hit_count: 6264, fast_hit_count: 2 */
  long long res = inf; /* line 36 slow_hit_count: 6264, fast_hit_count: 2 */
  if (arr[pos] == -1) return 0; /* line 37 slow_hit_count: 6264, fast_hit_count: 2 */
  if (c == lim) return 0; /* line 38 slow_hit_count: 6217, fast_hit_count: 1 */
  if (dp[pos][c] != -1) return dp[pos][c]; /* line 39 slow_hit_count: 6120, fast_hit_count: 1 */
  if (fuel == 0) { /* line 40 slow_hit_count: 3135, fast_hit_count: 1 */
    res = min(res, calc(pos + 1, fuel + cnt[c + 1], c + 1) + arr[pos]); /* line 41 slow_hit_count: 7, fast_hit_count: 1 */
  } else { /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    res = min(res, calc(pos + 1, fuel - 1, c)); /* line 43 slow_hit_count: 3128, fast_hit_count: 0 */
    res = min(res, calc(pos + 1, fuel + cnt[c + 1], c + 1) + arr[pos]); /* line 44 slow_hit_count: 3128, fast_hit_count: 0 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  dp[pos][c] = res; /* line 46 slow_hit_count: 3135, fast_hit_count: 1 */
  return res; /* line 47 slow_hit_count: 3135, fast_hit_count: 1 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  lim = min(lim, n); /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  arr = vector<long long>(n); /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  read(arr); /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  cnt = vector<long long>(lim + 3, 0); /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  long long pw = n / 2; /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= lim; i++) { /* line 56 slow_hit_count: 31, fast_hit_count: 3 */
    cnt[i] = pw - 1; /* line 57 slow_hit_count: 30, fast_hit_count: 2 */
    pw /= 2; /* line 58 slow_hit_count: 30, fast_hit_count: 2 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  reverse(arr.begin(), arr.end()); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  dp = vector<vector<long long>>(n + 3, vector<long long>(lim, -1)); /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  cout << calc(0, 0, 0); /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 68 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison**:
   - The function `calc` (line 34) is hit 6264 times for the slow input and only 2 times for the fast input. This is a significant difference.
   - Inside `calc`, line 39 (`if (dp[pos][c] != -1) return dp[pos][c];`) is hit 6120 times for the slow input, implying that memoization might not be effectively pruning the recursive calls.
   - The recursive calls on lines 41, 43, and 44 are executed multiple times with significant hits, indicating deep or repeated recursive exploration.

2. **Inference on Code Interactions**:
   - The recursive function `calc` is the main computational driver. The recursion depth and frequency are influenced by `pos`, `fuel`, and `c`.
   - The slow input leads to a large number of recursive calls, likely exploring many combinations of bribing decisions.
   - The memoization (`dp[pos][c]`) seems to have limited effectiveness, possibly due to the uniqueness of state parameters across calls.

### Phase 2: Derive Performance-Characterizing Invariants

1. **High Recursive Call Frequency**:
   - **Invariant**: "If the number of boxers `n` is large, such as near the upper constraint, the recursive function `calc` explores many states, leading to performance degradation. This occurs when the memoization table is insufficiently utilized due to varying `pos`, `fuel`, and `c` combinations."
   - **Explanation**: With larger `n`, the number of possible matches grows, increasing the recursive state space. When `n` is large and strategic bribing is complex, the recursive exploration intensifies.

2. **Limited Effectiveness of Memoization**:
   - **Invariant**: "When the memoization (dp table) is sparsely hit, indicating limited reuse of computed results, the recursive exploration becomes costly. This is likely when the variety of state parameters (`pos`, `fuel`, `c`) results in unique calls that prevent effective pruning."
   - **Explanation**: The effectiveness of the DP solution depends on revisiting states. Diverse inputs lead to unique state combinations, limiting memoization benefits.

3. **Complex Pairing Scenarios**:
   - **Invariant**: "When forming pairs in the tournament involves complex decisions due to many possible strong opponents or costly bribes, the function `calc` may enter inefficient recursive paths. This complexity scales with larger `n` and diverse strength and bribe costs."
   - **Explanation**: With more boxers and varied costs, the decision tree for pair formations that benefit the friend while minimizing costs grows, leading to more recursive evaluations.

These invariants abstractly describe the performance bottlenecks without relying on specific input values but rather on structural and combinatorial aspects of the problem. They reflect conditions under which the recursive and DP approach becomes costly, helping guide potential optimizations or trigger warnings in fuzz testing.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are organizing a boxing tournament, where n boxers will participate (n is a power of 2), and your friend is one of them. All boxers have different strength from 1 to n, and boxer i wins in the match against boxer j if and only if i is stronger than j.

The tournament will be organized as follows: n boxers will be divided into pairs; the loser in each pair leaves the tournament, and n/2 winners advance to the next stage, where they are divided into pairs again, and the winners in all pairs advance to the next stage, and so on, until only one boxer remains (who is declared the winner).

Your friend really wants to win the tournament, but he may be not the strongest boxer. To help your friend win the tournament, you may bribe his opponents: if your friend is fighting with a boxer you have bribed, your friend wins even if his strength is lower.

Furthermore, during each stage you distribute the boxers into pairs as you wish.

The boxer with strength i can be bribed if you pay him a_i dollars. What is the minimum number of dollars you have to spend to make your friend win the tournament, provided that you arrange the boxers into pairs during each stage as you wish?

Input

The first line contains one integer n (2 ≤ n ≤ 2^{18}) — the number of boxers. n is a power of 2.

The second line contains n integers a_1, a_2, ..., a_n, where a_i is the number of dollars you have to pay if you want to bribe the boxer with strength i. Exactly one of a_i is equal to -1 — it means that the boxer with strength i is your friend. All other values are in the range [1, 10^9].

Output

Print one integer — the minimum number of dollars you have to pay so your friend wins.

Examples

Input


4
3 9 1 -1


Output


0

Input


8
11 -1 13 19 24 7 17 5


Output


12

Note

In the first test case no matter how you will distribute boxers into pairs, your friend is the strongest boxer and anyway wins the tournament.

In the second test case you can distribute boxers as follows (your friend is number 2):

1 : 2, 8 : 5, 7 : 3, 6 : 4 (boxers 2, 8, 7 and 6 advance to the next stage);

2 : 6, 8 : 7 (boxers 2 and 8 advance to the next stage, you have to bribe the boxer with strength 6);

2 : 8 (you have to bribe the boxer with strength 8);

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as Runtime Checks in C++

Below are the checker functions corresponding to the performance-characterizing invariants described earlier:

1. **High Recursive Call Frequency**:
   - This invariant is checked by estimating the number of recursive states explored. We can check if `n` is large and the recursive exploration is significant.

```cpp
void check_recursive_calls(long long recursiveCalls, long long n) {
    if (recursiveCalls > 10000 && n > 10000) { // Thresholds based on potential computational limits
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive calls!" << endl;
        abort();
    }
}
```

2. **Limited Effectiveness of Memoization**:
   - This can be checked by seeing if `dp` is not hit often enough to prune recursive calls efficiently.

```cpp
void check_memoization_usage(long long memoHits, long long totalCalls) {
    if (memoHits < 0.1 * totalCalls) { // Less than 10% of calls being cached
        cerr << "Warning: Memoization inefficiency detected!" << endl;
        abort();
    }
}
```

3. **Complex Pairing Scenarios**:
   - This can be checked by observing complex pairing decisions through the number of unique configurations explored.

```cpp
void check_pairing_complexity(long long uniqueConfigurations, long long n) {
    if (uniqueConfigurations > n * log2(n)) { // Arbitrary logic to flag too many unique configurations
        cerr << "Warning: Performance bottleneck condition triggered - excessive pairing complexities!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checks into the C++ Program

Here's how to integrate the above checks into the provided C++ program. I'll place these checks at the start of the computation to detect inefficiencies early.

```cpp
#include <bits/stdc++.h>
using namespace std;
const double pi = 2 * acos(0.0);
const int dx[] = {-1, 0, 1, 0};
const int dy[] = {0, -1, 0, 1};
const int dx8[] = {-1, 0, 1, 0, 1, 1, -1, -1};
const int dy8[] = {0, -1, 0, 1, 1, -1, 1, -1};

long long min(long long a, long long b) {
    if (a < b) return a;
    return b;
}
long long max(long long a, long long b) {
    if (a > b) return a;
    return b;
}
long long ceil1(long long a, long long b) { return (a + b - 1) / b; }

void read(vector<long long>& arr) {
    for (long long i = 0; i < int(arr.size()); i++) cin >> arr[i];
}

void read_graph(vector<vector<long long>>& g, long long m) {
    while (m--) {
        long long x, y;
        cin >> x >> y;
        x--, y--;
        g[x].push_back(y);
        g[y].push_back(x);
    }
}

long long n;
long long inf = numeric_limits<long long>::max();
long long lim = 30;
vector<vector<long long>> dp;
vector<long long> cnt, arr;

long long calc(long long pos, long long fuel, long long c, long long& recursiveCalls, long long& memoHits) {
    recursiveCalls++;
    if (pos == n) return 0;
    long long res = inf;
    if (arr[pos] == -1) return 0;
    if (c == lim) return 0;
    if (dp[pos][c] != -1) {
        memoHits++;
        return dp[pos][c];
    }
    if (fuel == 0) {
        res = min(res, calc(pos + 1, fuel + cnt[c + 1], c + 1, recursiveCalls, memoHits) + arr[pos]);
    } else {
        res = min(res, calc(pos + 1, fuel - 1, c, recursiveCalls, memoHits));
        res = min(res, calc(pos + 1, fuel + cnt[c + 1], c + 1, recursiveCalls, memoHits) + arr[pos]);
    }
    dp[pos][c] = res;
    return res;
}

void solve() {
    cin >> n;
    lim = min(lim, n);
    arr = vector<long long>(n);
    read(arr);
    cnt = vector<long long>(lim + 3, 0);
    long long pw = n / 2;
    for (long long i = 1; i <= lim; i++) {
        cnt[i] = pw - 1;
        pw /= 2;
    }
    reverse(arr.begin(), arr.end());
    dp = vector<vector<long long>>(n + 3, vector<long long>(lim, -1));

    long long recursiveCalls = 0;
    long long memoHits = 0;

    // Run calculation and check performance characteristics
    long long result = calc(0, 0, 0, recursiveCalls, memoHits);
    check_recursive_calls(recursiveCalls, n);
    check_memoization_usage(memoHits, recursiveCalls);

    cout << result;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    solve();
}
```
**Comments on Integration**:
- **Check for Recursive Calls**: This check is placed after the main computation in `solve` to observe the total count.
- **Check for Memoization Efficiency**: The memoization hit check is also inserted after the computation for a consolidated view of its effectiveness.
- **Complex Pairing Checks**: Due to the nature of this program, we do not have a straightforward metric to measure pairing complexity directly from the available data structures without altering core logic drastically. Thus, it is omitted in this version but can be extrapolated based on `recursiveCalls` and logic restructuring if needed.

