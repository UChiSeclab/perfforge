system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are organizing a boxing tournament, where n boxers will participate (n is a power of 2), and your friend is one of them. All boxers have different strength from 1 to n, and boxer i wins in the match against boxer j if and only if i is stronger than j.

The tournament will be organized as follows: n boxers will be divided into pairs; the loser in each pair leaves the tournament, and n/2 winners advance to the next stage, where they are divided into pairs again, and the winners in all pairs advance to the next stage, and so on, until only one boxer remains (who is declared the winner).

Your friend really wants to win the tournament, but he may be not the strongest boxer. To help your friend win the tournament, you may bribe his opponents: if your friend is fighting with a boxer you have bribed, your friend wins even if his strength is lower.

Furthermore, during each stage you distribute the boxers into pairs as you wish.

The boxer with strength i can be bribed if you pay him a_i dollars. What is the minimum number of dollars you have to spend to make your friend win the tournament, provided that you arrange the boxers into pairs during each stage as you wish?

Input

The first line contains one integer n (2 ≤ n ≤ 2^{18}) — the number of boxers. n is a power of 2.

The second line contains n integers a_1, a_2, ..., a_n, where a_i is the number of dollars you have to pay if you want to bribe the boxer with strength i. Exactly one of a_i is equal to -1 — it means that the boxer with strength i is your friend. All other values are in the range [1, 10^9].

Output

Print one integer — the minimum number of dollars you have to pay so your friend wins.

Examples

Input


4
3 9 1 -1


Output


0

Input


8
11 -1 13 19 24 7 17 5


Output


12

Note

In the first test case no matter how you will distribute boxers into pairs, your friend is the strongest boxer and anyway wins the tournament.

In the second test case you can distribute boxers as follows (your friend is number 2):

1 : 2, 8 : 5, 7 : 3, 6 : 4 (boxers 2, 8, 7 and 6 advance to the next stage);

2 : 6, 8 : 7 (boxers 2 and 8 advance to the next stage, you have to bribe the boxer with strength 6);

2 : 8 (you have to bribe the boxer with strength 8);

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 3e5 + 10;
int a[maxn], n;
map<int, int> mp;
int main() {
  cin >> n;
  for (int i = 1; i <= n; i++) cin >> a[i];
  for (int i = 1; i <= n; i = i * 2) mp[i] = 1;
  long long ans = 0;
  multiset<int> s;
  for (int i = n; i >= 1; i--) {
    if (a[i] == -1) break;
    s.insert(a[i]);
    if (mp[i]) {
      ans += *s.begin();
      s.erase(s.begin());
    }
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

128
-1 37 147 12 24 35 86 39 20 27 86 95 51 8 33 32 55 35 8 75 74 79 64 51 66 32 34 45 39 89 19 11 86 32 69 58 40 58 62 11 99 54 31 10 4 70 88 22 94 23 46 20 65 97 61 39 31 65 23 31 95 78 40 25 51 14 12 55 8 63 18 57 91 75 31 26 22 84 29 22 32 64 20 12 49 92 50 4 97 17 26 88 10 56 73 22 92 94 83 100 97 83 47 15 1 48 16 77 4 91 30 38 13 46 18 76 77 2 45 70 9 41 16 22 84 81 20 43


(G.2) Fast Input

2
-1 1000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 3e5 + 10; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int a[maxn], n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
map<int, int> mp; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) cin >> a[i]; /* line 8 slow_hit_count: 129, fast_hit_count: 3 */
  for (int i = 1; i <= n; i = i * 2) mp[i] = 1; /* line 9 slow_hit_count: 9, fast_hit_count: 3 */
  long long ans = 0; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  multiset<int> s; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = n; i >= 1; i--) { /* line 12 slow_hit_count: 128, fast_hit_count: 2 */
    if (a[i] == -1) break; /* line 13 slow_hit_count: 128, fast_hit_count: 2 */
    s.insert(a[i]); /* line 14 slow_hit_count: 127, fast_hit_count: 1 */
    if (mp[i]) { /* line 15 slow_hit_count: 127, fast_hit_count: 1 */
      ans += *s.begin(); /* line 16 slow_hit_count: 7, fast_hit_count: 1 */
      s.erase(s.begin()); /* line 17 slow_hit_count: 7, fast_hit_count: 1 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance of the provided C program and generate performance-characterizing invariants, we can follow the steps outlined in the problem statement.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare line-level hit counts**: 
    - Lines 12 to 14 are hit significantly more in the slow input compared to the fast input.
    - Specifically, line 14 (`s.insert(a[i]);`) and lines 16–17 (operations involving `s.begin()`) are involved in manipulating the multiset, which could be causing the performance bottleneck.

2. **Pinpoint lines or functions that get significantly more hits**: 
    - The loop starting at line 12 is hit 128 times in the slow input but only 2 times in the fast input.
    - Lines 16 and 17 are associated with operations on a multiset, suggesting frequent insertions and deletions in this data structure.

3. **Infer interaction with data structures**:
    - The multiset operations within the loop are likely the main contributors to the slowdown. Frequent insertion and deletion from a multiset are computationally expensive, especially under certain input conditions.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

1. **Generate natural language statements**:

   - **Invariant 1**: "Frequent insertions into and deletions from a multiset can lead to performance degradation. This is likely to happen when the size of the multiset is large, and the operations are repeatedly invoked within a loop."
   
   - **Invariant 2**: "If the number of boxers, `n`, is large and close to the upper limit (e.g., a power of 2 close to 2^18), and the program's logic requires repeated operations on a dynamic data structure like a multiset, the execution time may increase significantly."
   
2. **Avoid using specific numeric values from the slow input**:
   - These statements abstract away from specific values, focusing on the general behavior of the code and the structures involved.

3. **Correlate these conditions to input patterns**:
   - The slow path is correlated with large datasets and the need for frequent manipulations of the multiset as per the tournament's progression logic.
   
4. **Ensure statements reflect realistic triggers**:
   - The conditions specified in the invariants are realistic within the problem's constraints, emphasizing operations on dynamic data structures and their implications on performance.

These invariants should help understand and diagnose performance issues for future scenarios that mirror the conditions of the slow input without needing specific value thresholds.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are organizing a boxing tournament, where n boxers will participate (n is a power of 2), and your friend is one of them. All boxers have different strength from 1 to n, and boxer i wins in the match against boxer j if and only if i is stronger than j.

The tournament will be organized as follows: n boxers will be divided into pairs; the loser in each pair leaves the tournament, and n/2 winners advance to the next stage, where they are divided into pairs again, and the winners in all pairs advance to the next stage, and so on, until only one boxer remains (who is declared the winner).

Your friend really wants to win the tournament, but he may be not the strongest boxer. To help your friend win the tournament, you may bribe his opponents: if your friend is fighting with a boxer you have bribed, your friend wins even if his strength is lower.

Furthermore, during each stage you distribute the boxers into pairs as you wish.

The boxer with strength i can be bribed if you pay him a_i dollars. What is the minimum number of dollars you have to spend to make your friend win the tournament, provided that you arrange the boxers into pairs during each stage as you wish?

Input

The first line contains one integer n (2 ≤ n ≤ 2^{18}) — the number of boxers. n is a power of 2.

The second line contains n integers a_1, a_2, ..., a_n, where a_i is the number of dollars you have to pay if you want to bribe the boxer with strength i. Exactly one of a_i is equal to -1 — it means that the boxer with strength i is your friend. All other values are in the range [1, 10^9].

Output

Print one integer — the minimum number of dollars you have to pay so your friend wins.

Examples

Input


4
3 9 1 -1


Output


0

Input


8
11 -1 13 19 24 7 17 5


Output


12

Note

In the first test case no matter how you will distribute boxers into pairs, your friend is the strongest boxer and anyway wins the tournament.

In the second test case you can distribute boxers as follows (your friend is number 2):

1 : 2, 8 : 5, 7 : 3, 6 : 4 (boxers 2, 8, 7 and 6 advance to the next stage);

2 : 6, 8 : 7 (boxers 2 and 8 advance to the next stage, you have to bribe the boxer with strength 6);

2 : 8 (you have to bribe the boxer with strength 8);

Solution (C++ code):
{solution}


assistant: Phase 3 involves translating the performance-characterizing invariants derived from Phase 2 into C++ code that can be used to check these conditions at runtime.

### Phase 3: Implementing Invariants in C++

Based on the natural language invariants previously described, let's implement the checking logic in C++.

#### Invariant 1: Frequent insertions into and deletions from a multiset

This invariant checks if the multiset size exceeds a threshold, indicating potentially expensive operations due to frequent insertions and deletions.

```cpp
void check_multiset_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large multiset size with frequent operations!" << endl;
        abort();
    }
}
```

#### Invariant 2: Large number of boxers approaching the upper limit

This invariant checks if `n` is close to its upper bound, which can trigger the slow path due to increased operations.

```cpp
void check_large_n_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large number of boxers!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Program

Now, let's integrate these checker functions into the original C++ code. We will place these checks at logical points to avoid adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 3e5 + 10;
int a[maxn], n;
map<int, int> mp;

void check_multiset_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large multiset size with frequent operations!" << endl;
        abort();
    }
}

void check_large_n_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large number of boxers!" << endl;
        abort();
    }
}

int main() {
    cin >> n;
    for (int i = 1; i <= n; i++) cin >> a[i];
    for (int i = 1; i <= n; i = i * 2) mp[i] = 1;
    
    // Check if n is close to the upper limit
    check_large_n_invariant(n >= (1 << 17)); // Use a threshold close to 2^18

    long long ans = 0;
    multiset<int> s;
    for (int i = n; i >= 1; i--) {
        if (a[i] == -1) break;
        s.insert(a[i]);
        
        // Check multiset size only if it's a stage where comparisons happen
        if (mp[i]) {
            ans += *s.begin();
            s.erase(s.begin());
            
            // Check if multiset size is large
            check_multiset_invariant(s.size() > (n / 4)); // Threshold based on tournament stage
        }
    }
    cout << ans << endl;
    return 0;
}
```

### Explanation of Integration

- **Multiset Invariant Check**: This check is placed within the if-block that handles the tournament stage operations. It ensures we check the size when insertion and deletion are likely to be most expensive.
  
- **Large `n` Invariant Check**: This check is placed right after reading `n`. If `n` is large, close to the upper bound of `2^18`, it could potentially lead to more operations overall, thus slowing down the program.

These checks should help a fuzzer or a developer to identify potential performance bottlenecks during execution under different scenarios.

