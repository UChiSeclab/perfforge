system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n players sitting at the card table. Each player has a favorite number. The favorite number of the j-th player is f_j.

There are k ⋅ n cards on the table. Each card contains a single integer: the i-th card contains number c_i. Also, you are given a sequence h_1, h_2, ..., h_k. Its meaning will be explained below.

The players have to distribute all the cards in such a way that each of them will hold exactly k cards. After all the cards are distributed, each player counts the number of cards he has that contains his favorite number. The joy level of a player equals h_t if the player holds t cards containing his favorite number. If a player gets no cards with his favorite number (i.e., t=0), his joy level is 0.

Print the maximum possible total joy levels of the players after the cards are distributed. Note that the sequence h_1, ..., h_k is the same for all the players.

Input

The first line of input contains two integers n and k (1 ≤ n ≤ 500, 1 ≤ k ≤ 10) — the number of players and the number of cards each player will get.

The second line contains k ⋅ n integers c_1, c_2, ..., c_{k ⋅ n} (1 ≤ c_i ≤ 10^5) — the numbers written on the cards.

The third line contains n integers f_1, f_2, ..., f_n (1 ≤ f_j ≤ 10^5) — the favorite numbers of the players.

The fourth line contains k integers h_1, h_2, ..., h_k (1 ≤ h_t ≤ 10^5), where h_t is the joy level of a player if he gets exactly t cards with his favorite number written on them. It is guaranteed that the condition h_{t - 1} < h_t holds for each t ∈ [2..k].

Output

Print one integer — the maximum possible total joy levels of the players among all possible card distributions.

Examples

Input

4 3
1 3 2 8 5 5 8 2 2 8 5 2
1 2 2 5
2 6 7


Output

21


Input

3 3
9 9 9 9 9 9 9 9 9
1 2 3
1 2 3


Output

0

Note

In the first example, one possible optimal card distribution is the following:

  * Player 1 gets cards with numbers [1, 3, 8]; 
  * Player 2 gets cards with numbers [2, 2, 8]; 
  * Player 3 gets cards with numbers [2, 2, 8]; 
  * Player 4 gets cards with numbers [5, 5, 5]. 



Thus, the answer is 2 + 6 + 6 + 7 = 21.

In the second example, no player can get a card with his favorite number. Thus, the answer is 0.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <typename T>
using V = vector<T>;
template <typename T>
using VV = vector<V<T>>;
template <typename T>
istream& operator>>(istream& cin, V<T>& arr) {
  for (T& val : arr) {
    cin >> val;
  }
  return cin;
}
template <typename T>
ostream& operator<<(ostream& cout, V<T>& arr) {
  for (T& val : arr) {
    cout << val << ' ';
  }
  return cout;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  long long n, k;
  cin >> n >> k;
  vector<long long> c(n * k);
  cin >> c;
  vector<long long> f(n);
  cin >> f;
  vector<long long> h(k);
  cin >> h;
  sort(c.begin(), c.end());
  sort(f.begin(), f.end());
  vector<vector<long long>> ma(5001, vector<long long>(501));
  for (long long i = 1; i < 5001; i++) {
    for (long long j = 1; j < 501LL; j++) {
      if (j * k <= i) {
        ma[i][j] = h[k - 1] * j;
      } else {
        ma[i][j] = ma[i][j - 1];
        for (long long q = 1; q <= k && i - q >= 0; q++) {
          ma[i][j] = max(ma[i][j], h[q - 1] + ma[i - q][j - 1]);
        }
      }
    }
  }
  long long i = 0;
  long long j = 0;
  long long ans = 0;
  while (i < n) {
    long long cntPeople = 0;
    while (i + cntPeople < n && f[i + cntPeople] == f[i]) {
      cntPeople++;
    }
    while (j < n * k && c[j] < f[i]) {
      j++;
    }
    if (j < n * k && c[j] == f[i]) {
      long long cntCards = 0;
      while (j + cntCards < n * k && c[j + cntCards] == c[j]) {
        cntCards++;
      }
      ans += ma[cntCards][cntPeople];
    }
    i += cntPeople;
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4 3
1 3 2 8 5 5 8 2 2 8 5 2
1 2 2 5
2 6 7


(G.2) Fast Input

1 1
1
7
2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using V = vector<T>; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
using VV = vector<V<T>>; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
istream& operator>>(istream& cin, V<T>& arr) { /* line 8 slow_hit_count: 3, fast_hit_count: 3 */
  for (T& val : arr) { /* line 9 slow_hit_count: 22, fast_hit_count: 6 */
    cin >> val; /* line 10 slow_hit_count: 19, fast_hit_count: 3 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return cin; /* line 12 slow_hit_count: 3, fast_hit_count: 3 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& cout, V<T>& arr) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  for (T& val : arr) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    cout << val << ' '; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  return cout; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, k; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> c(n * k); /* line 27 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> c; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> f(n); /* line 29 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> f; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> h(k); /* line 31 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> h; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  sort(c.begin(), c.end()); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  sort(f.begin(), f.end()); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vector<long long>> ma(5001, vector<long long>(501)); /* line 35 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long i = 1; i < 5001; i++) { /* line 36 slow_hit_count: 5001, fast_hit_count: 5001 */
    for (long long j = 1; j < 501LL; j++) { /* line 37 slow_hit_count: 2505000, fast_hit_count: 2505000 */
      if (j * k <= i) { /* line 38 slow_hit_count: 2500000, fast_hit_count: 2500000 */
        ma[i][j] = h[k - 1] * j; /* line 39 slow_hit_count: 2124750, fast_hit_count: 2375250 */
      } else { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
        ma[i][j] = ma[i][j - 1]; /* line 41 slow_hit_count: 375250, fast_hit_count: 124750 */
        for (long long q = 1; q <= k && i - q >= 0; q++) { /* line 42 slow_hit_count: 1499500, fast_hit_count: 249500 */
          ma[i][j] = max(ma[i][j], h[q - 1] + ma[i - q][j - 1]); /* line 43 slow_hit_count: 1124250, fast_hit_count: 124750 */
        } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  long long i = 0; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  long long j = 0; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  while (i < n) { /* line 51 slow_hit_count: 4, fast_hit_count: 2 */
    long long cntPeople = 0; /* line 52 slow_hit_count: 3, fast_hit_count: 1 */
    while (i + cntPeople < n && f[i + cntPeople] == f[i]) { /* line 53 slow_hit_count: 7, fast_hit_count: 2 */
      cntPeople++; /* line 54 slow_hit_count: 4, fast_hit_count: 1 */
    } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    while (j < n * k && c[j] < f[i]) { /* line 56 slow_hit_count: 9, fast_hit_count: 2 */
      j++; /* line 57 slow_hit_count: 6, fast_hit_count: 1 */
    } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
    if (j < n * k && c[j] == f[i]) { /* line 59 slow_hit_count: 3, fast_hit_count: 1 */
      long long cntCards = 0; /* line 60 slow_hit_count: 3, fast_hit_count: 0 */
      while (j + cntCards < n * k && c[j + cntCards] == c[j]) { /* line 61 slow_hit_count: 11, fast_hit_count: 0 */
        cntCards++; /* line 62 slow_hit_count: 8, fast_hit_count: 0 */
      } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
      ans += ma[cntCards][cntPeople]; /* line 64 slow_hit_count: 3, fast_hit_count: 0 */
    } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
    i += cntPeople; /* line 66 slow_hit_count: 3, fast_hit_count: 1 */
  } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 70 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information, we can identify the following areas in the code where performance may degrade:

1. **Matrix Initialization and Dynamic Programming Table Calculation:**
   - The double loop (lines 36-47) that initializes and calculates the `ma` matrix has a very high hit count (2505000 times for the inner loop), indicating it is a significant contributor to the execution time.
   - Within this, the inner loop (lines 42-44) that potentially updates each entry in the matrix through a recursive-like comparison is particularly expensive due to its nested nature and the conditions it checks.

2. **Card and Favorite Number Matching:**
   - The loops at lines 51-66 contribute to the execution time, particularly the nested loops that count players (lines 53-54) and cards (lines 61-62). These loops iterate over player and card arrays multiple times.

3. **Condition Checks and Accumulation:**
   - The lines where conditions are evaluated (lines 38, 56, and 59) and the joy levels are accumulated (line 64) are also hot spots, although less so than the matrix initialization.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified expensive operations, we can derive the following performance-characterizing invariants:

1. **Matrix Size and Dynamic Programming Overhead:**
   - **Invariant 1:** "If the number of cards and players leads to a large dynamic programming table, and the table requires filling with multiple nested conditions and calculations, the program may experience significant slowdowns."
   - This invariant implies that when `n` is large, close to 500, and `k` is around 10, the table size and the complexity of operations for each cell (`ma[i][j]`) grow substantially.

2. **Repeated Card Distribution and Matching:**
   - **Invariant 2:** "When many players share the same favorite number or when cards closely match a player's favorite number, excessive counting and matching can occur, leading to slow execution."
   - This invariant highlights scenarios where favorite numbers (`f`) are not diverse, resulting in repeated operations for counting (lines 53-54 and 61-62).

3. **Joy Level Calculation Complexity:**
   - **Invariant 3:** "If joy levels (`h`) have large values or varied increments, and many calculations depend on these values, the computation of maximum possible joy can become computationally expensive."
   - This recognizes the fact that larger or more complex `h` values can add to the processing overhead during dynamic programming table updates (lines 42-44).

By identifying the above invariants, we aim to catch performance pitfalls that may arise from input characteristics such as distribution of favorite numbers, card similarities, and large input sizes relative to the constraints. These invariants serve as abstract conditions under which similar performance issues might surface in future input cases.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n players sitting at the card table. Each player has a favorite number. The favorite number of the j-th player is f_j.

There are k ⋅ n cards on the table. Each card contains a single integer: the i-th card contains number c_i. Also, you are given a sequence h_1, h_2, ..., h_k. Its meaning will be explained below.

The players have to distribute all the cards in such a way that each of them will hold exactly k cards. After all the cards are distributed, each player counts the number of cards he has that contains his favorite number. The joy level of a player equals h_t if the player holds t cards containing his favorite number. If a player gets no cards with his favorite number (i.e., t=0), his joy level is 0.

Print the maximum possible total joy levels of the players after the cards are distributed. Note that the sequence h_1, ..., h_k is the same for all the players.

Input

The first line of input contains two integers n and k (1 ≤ n ≤ 500, 1 ≤ k ≤ 10) — the number of players and the number of cards each player will get.

The second line contains k ⋅ n integers c_1, c_2, ..., c_{k ⋅ n} (1 ≤ c_i ≤ 10^5) — the numbers written on the cards.

The third line contains n integers f_1, f_2, ..., f_n (1 ≤ f_j ≤ 10^5) — the favorite numbers of the players.

The fourth line contains k integers h_1, h_2, ..., h_k (1 ≤ h_t ≤ 10^5), where h_t is the joy level of a player if he gets exactly t cards with his favorite number written on them. It is guaranteed that the condition h_{t - 1} < h_t holds for each t ∈ [2..k].

Output

Print one integer — the maximum possible total joy levels of the players among all possible card distributions.

Examples

Input

4 3
1 3 2 8 5 5 8 2 2 8 5 2
1 2 2 5
2 6 7


Output

21


Input

3 3
9 9 9 9 9 9 9 9 9
1 2 3
1 2 3


Output

0

Note

In the first example, one possible optimal card distribution is the following:

  * Player 1 gets cards with numbers [1, 3, 8]; 
  * Player 2 gets cards with numbers [2, 2, 8]; 
  * Player 3 gets cards with numbers [2, 2, 8]; 
  * Player 4 gets cards with numbers [5, 5, 5]. 



Thus, the answer is 2 + 6 + 6 + 7 = 21.

In the second example, no player can get a card with his favorite number. Thus, the answer is 0.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Below are the C++ code snippets implementing the natural language invariants derived in Phase 2:

1. **Matrix Size and Dynamic Programming Overhead:**

```cpp
void check_matrix_size_invariant(long long n, long long k) {
    if (n > 400 && k >= 10) {
        cerr << "Warning: Performance bottleneck condition triggered due to large matrix operations!" << endl;
        abort();
    }
}
```

2. **Repeated Card Distribution and Matching:**

```cpp
void check_repeated_card_matching(long long uniqueFavoriteNumbers, long long n) {
    if (uniqueFavoriteNumbers < n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered due to repeated card distribution and matching!" << endl;
        abort();
    }
}
```

3. **Joy Level Calculation Complexity:**

```cpp
void check_joy_level_invariant(const vector<long long>& h) {
    if (h[k-1] > 90000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large joy level calculations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Original C++ Code

Below is the instrumented C++ code with the integrated checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;
template <typename T>
using V = vector<T>;
template <typename T>
using VV = vector<V<T>>;
template <typename T>
istream& operator>>(istream& cin, V<T>& arr) {
  for (T& val : arr) {
    cin >> val;
  }
  return cin;
}
template <typename T>
ostream& operator<<(ostream& cout, V<T>& arr) {
  for (T& val : arr) {
    cout << val << ' ';
  }
  return cout;
}

void check_matrix_size_invariant(long long n, long long k) {
    if (n > 400 && k >= 10) {
        cerr << "Warning: Performance bottleneck condition triggered due to large matrix operations!" << endl;
        abort();
    }
}

void check_repeated_card_matching(long long uniqueFavoriteNumbers, long long n) {
    if (uniqueFavoriteNumbers < n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered due to repeated card distribution and matching!" << endl;
        abort();
    }
}

void check_joy_level_invariant(const vector<long long>& h) {
    if (h.back() > 90000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large joy level calculations!" << endl;
        abort();
    }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  long long n, k;
  cin >> n >> k;
  vector<long long> c(n * k);
  cin >> c;
  vector<long long> f(n);
  cin >> f;
  vector<long long> h(k);
  cin >> h;

  // Check for potential performance bottlenecks
  check_matrix_size_invariant(n, k);
  check_joy_level_invariant(h);
  
  // Count unique favorite numbers
  set<long long> uniqueFavorites(f.begin(), f.end());
  check_repeated_card_matching(uniqueFavorites.size(), n);
  
  sort(c.begin(), c.end());
  sort(f.begin(), f.end());
  vector<vector<long long>> ma(5001, vector<long long>(501));
  for (long long i = 1; i < 5001; i++) {
    for (long long j = 1; j < 501LL; j++) {
      if (j * k <= i) {
        ma[i][j] = h[k - 1] * j;
      } else {
        ma[i][j] = ma[i][j - 1];
        for (long long q = 1; q <= k && i - q >= 0; q++) {
          ma[i][j] = max(ma[i][j], h[q - 1] + ma[i - q][j - 1]);
        }
      }
    }
  }
  long long i = 0;
  long long j = 0;
  long long ans = 0;
  while (i < n) {
    long long cntPeople = 0;
    while (i + cntPeople < n && f[i + cntPeople] == f[i]) {
      cntPeople++;
    }
    while (j < n * k && c[j] < f[i]) {
      j++;
    }
    if (j < n * k && c[j] == f[i]) {
      long long cntCards = 0;
      while (j + cntCards < n * k && c[j + cntCards] == c[j]) {
        cntCards++;
      }
      ans += ma[cntCards][cntPeople];
    }
    i += cntPeople;
  }
  cout << ans;
  return 0;
}
```

### Comments:
- **Matrix Size Invariant:** The check is placed after reading `n` and `k` to ensure the matrix will not become too large.
- **Repeated Card Matching:** This check ensures a diverse set of favorite numbers to avoid excessive repeated operations.
- **Joy Level Calculation:** This check ensures that the joy levels do not introduce significant computation overhead.

These checks help detect potential performance bottlenecks before the computation becomes too demanding, assisting fuzzers in identifying problematic inputs.

