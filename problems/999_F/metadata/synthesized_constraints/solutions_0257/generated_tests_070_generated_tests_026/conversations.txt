system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n players sitting at the card table. Each player has a favorite number. The favorite number of the j-th player is f_j.

There are k ⋅ n cards on the table. Each card contains a single integer: the i-th card contains number c_i. Also, you are given a sequence h_1, h_2, ..., h_k. Its meaning will be explained below.

The players have to distribute all the cards in such a way that each of them will hold exactly k cards. After all the cards are distributed, each player counts the number of cards he has that contains his favorite number. The joy level of a player equals h_t if the player holds t cards containing his favorite number. If a player gets no cards with his favorite number (i.e., t=0), his joy level is 0.

Print the maximum possible total joy levels of the players after the cards are distributed. Note that the sequence h_1, ..., h_k is the same for all the players.

Input

The first line of input contains two integers n and k (1 ≤ n ≤ 500, 1 ≤ k ≤ 10) — the number of players and the number of cards each player will get.

The second line contains k ⋅ n integers c_1, c_2, ..., c_{k ⋅ n} (1 ≤ c_i ≤ 10^5) — the numbers written on the cards.

The third line contains n integers f_1, f_2, ..., f_n (1 ≤ f_j ≤ 10^5) — the favorite numbers of the players.

The fourth line contains k integers h_1, h_2, ..., h_k (1 ≤ h_t ≤ 10^5), where h_t is the joy level of a player if he gets exactly t cards with his favorite number written on them. It is guaranteed that the condition h_{t - 1} < h_t holds for each t ∈ [2..k].

Output

Print one integer — the maximum possible total joy levels of the players among all possible card distributions.

Examples

Input

4 3
1 3 2 8 5 5 8 2 2 8 5 2
1 2 2 5
2 6 7


Output

21


Input

3 3
9 9 9 9 9 9 9 9 9
1 2 3
1 2 3


Output

0

Note

In the first example, one possible optimal card distribution is the following:

  * Player 1 gets cards with numbers [1, 3, 8]; 
  * Player 2 gets cards with numbers [2, 2, 8]; 
  * Player 3 gets cards with numbers [2, 2, 8]; 
  * Player 4 gets cards with numbers [5, 5, 5]. 



Thus, the answer is 2 + 6 + 6 + 7 = 21.

In the second example, no player can get a card with his favorite number. Thus, the answer is 0.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long power(long long x, long long y, long long m);
long long modInverse(long long n, long long m);
long long nCr(long long n, long long r, long long m);
long long ceiling(long long x, long long y);
bool sortbyth(const tuple<long long, int, int>& a,
              const tuple<long long, int, int>& b) {
  if (get<0>(a) != get<0>(b))
    return get<0>(a) > get<0>(b);
  else
    return get<1>(a) < get<1>(b);
}
int dx[] = {-1, -1, -1, 0, 1, 1, 1, 0};
int dy[] = {-1, 0, 1, 1, 1, 0, -1, -1};
void aksayushx() {
  long long n, k;
  cin >> n >> k;
  vector<long long> cards(n * k);
  for (long long i = 0; i < n * k; i++) cin >> cards[i];
  vector<long long> f(n), h(k);
  for (long long i = 0; i < n; i++) cin >> f[i];
  for (long long i = 0; i < k; i++) cin >> h[i];
  vector<vector<long long>> dp(n + 1, vector<long long>(k * n + 1, -1));
  for (long long i = 0; i <= k * n; i++) dp[0][i] = 0;
  for (long long i = 0; i <= n; i++) dp[i][0] = 0;
  for (long long i = 1; i <= n; i++) {
    for (long long j = 1; j <= k * n; j++) {
      for (long long give = 0; give <= k; give++) {
        if (give > j) break;
        long long happiness = give == 0 ? 0 : h[give - 1];
        happiness += dp[i - 1][j - give];
        dp[i][j] = max(dp[i][j], happiness);
      }
    }
  }
  map<long long, long long> cf, pf;
  for (long long i = 0; i < n; i++) pf[f[i]]++;
  for (long long i = 0; i < n * k; i++) cf[cards[i]]++;
  long long ans = 0;
  for (auto& e : cf) {
    long long cardsav = e.second;
    long long people = pf[e.first];
    ans += dp[people][cardsav];
  }
  cout << ans << '\n';
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int t = 1;
  while (t--) aksayushx();
  return 0;
}
long long power(long long x, long long y, long long m) {
  long long res = 1;
  x = x % m;
  if (x == 0) return 0;
  while (y > 0) {
    if (y & 1) res = (res * x) % m;
    y = y >> 1;
    x = (x * x) % m;
  }
  return res;
}
long long modInverse(long long n, long long m) { return power(n, m - 2, m); }
long long ceiling(long long x, long long y) { return (x + y - 1) / y; }


(G) The Slow & Fast Inputs

(G.1) Slow Input

50 1
52 96 99 37 178 148 10 140 131 29 1 134 56 73 121 57 98 101 134 5 139 10 155 70 4 167 102 36 149 47 136 87 4 127 26 105 78 10 192 75 67 149 81 78 34 79 62 12 72 146
31 132 59 75 4 135 138 33 33 7 135 10 30 127 64 74 45 131 12 16 74 4 101 74 70 45 29 12 137 59 24 52 25 122 64 147 92 77 23 6 19 76 26 33 64 130 4 148 86 3
94393


(G.2) Fast Input

1 1
1
7
3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long power(long long x, long long y, long long m); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long modInverse(long long n, long long m); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long nCr(long long n, long long r, long long m); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long ceiling(long long x, long long y); /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
bool sortbyth(const tuple<long long, int, int>& a, /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
              const tuple<long long, int, int>& b) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  if (get<0>(a) != get<0>(b)) /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    return get<0>(a) > get<0>(b); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    return get<1>(a) < get<1>(b); /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int dx[] = {-1, -1, -1, 0, 1, 1, 1, 0}; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int dy[] = {-1, 0, 1, 1, 1, 0, -1, -1}; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
void aksayushx() { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, k; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> cards(n * k); /* line 19 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long i = 0; i < n * k; i++) cin >> cards[i]; /* line 20 slow_hit_count: 51, fast_hit_count: 2 */
  vector<long long> f(n), h(k); /* line 21 slow_hit_count: 3, fast_hit_count: 3 */
  for (long long i = 0; i < n; i++) cin >> f[i]; /* line 22 slow_hit_count: 51, fast_hit_count: 2 */
  for (long long i = 0; i < k; i++) cin >> h[i]; /* line 23 slow_hit_count: 2, fast_hit_count: 2 */
  vector<vector<long long>> dp(n + 1, vector<long long>(k * n + 1, -1)); /* line 24 slow_hit_count: 3, fast_hit_count: 3 */
  for (long long i = 0; i <= k * n; i++) dp[0][i] = 0; /* line 25 slow_hit_count: 52, fast_hit_count: 3 */
  for (long long i = 0; i <= n; i++) dp[i][0] = 0; /* line 26 slow_hit_count: 52, fast_hit_count: 3 */
  for (long long i = 1; i <= n; i++) { /* line 27 slow_hit_count: 51, fast_hit_count: 2 */
    for (long long j = 1; j <= k * n; j++) { /* line 28 slow_hit_count: 2550, fast_hit_count: 2 */
      for (long long give = 0; give <= k; give++) { /* line 29 slow_hit_count: 7500, fast_hit_count: 3 */
        if (give > j) break; /* line 30 slow_hit_count: 5000, fast_hit_count: 2 */
        long long happiness = give == 0 ? 0 : h[give - 1]; /* line 31 slow_hit_count: 5000, fast_hit_count: 2 */
        happiness += dp[i - 1][j - give]; /* line 32 slow_hit_count: 5000, fast_hit_count: 2 */
        dp[i][j] = max(dp[i][j], happiness); /* line 33 slow_hit_count: 5000, fast_hit_count: 2 */
      } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  map<long long, long long> cf, pf; /* line 37 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long i = 0; i < n; i++) pf[f[i]]++; /* line 38 slow_hit_count: 51, fast_hit_count: 2 */
  for (long long i = 0; i < n * k; i++) cf[cards[i]]++; /* line 39 slow_hit_count: 51, fast_hit_count: 2 */
  long long ans = 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto& e : cf) { /* line 41 slow_hit_count: 45, fast_hit_count: 2 */
    long long cardsav = e.second; /* line 42 slow_hit_count: 44, fast_hit_count: 1 */
    long long people = pf[e.first]; /* line 43 slow_hit_count: 44, fast_hit_count: 1 */
    ans += dp[people][cardsav]; /* line 44 slow_hit_count: 44, fast_hit_count: 1 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  int t = 1; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) aksayushx(); /* line 53 slow_hit_count: 2, fast_hit_count: 2 */
  return 0; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
long long power(long long x, long long y, long long m) { /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  long long res = 1; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  x = x % m; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  if (x == 0) return 0; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  while (y > 0) { /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    if (y & 1) res = (res * x) % m; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    y = y >> 1; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    x = (x * x) % m; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
long long modInverse(long long n, long long m) { return power(n, m - 2, m); } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
long long ceiling(long long x, long long y) { return (x + y - 1) / y; } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identifying Expensive or Inefficient Code Segments

Based on the provided hit counts, here are the key observations and potential bottlenecks:

1. **Line 27-36: Nested Loop Structure in Dynamic Programming Setup**
   - The loop structure here is significant, particularly the nested loops which iterate over the players (`n`), the total cards (`k * n`), and the number of cards to give to each player (`k`).
   - The inner loop (lines 29-33) shows a high hit count in the slow input, indicating repeated operations for combinations of player and card allocation. This is typical of a dynamic programming (DP) approach.

2. **Line 41-44: Calculation of Total Joy Using Map**
   - The loop over the `cf` map (line 41) indicates significant repeated operations, particularly the accesses to the `dp` array (lines 42-44). The map tracks the frequency of card values, while the DP table is used to calculate the joy for players with available card distributions.
   - The hit counts here suggest that a large number of operations are performed for each unique card value and its associated players, potentially leading to repeated and expensive DP table lookups.

### Phase 2: Performance-Characterizing Invariants

Based on the observations, here are some natural language invariants that characterize performance bottlenecks:

1. **Invariant #1: Dynamic Programming Complexity**
   - **Description**: "The program slows down significantly when the number of players (`n`) and the number of cards each player receives (`k`) are large, as this results in a higher number of iterations over possible card distributions due to the nested loop structure of the dynamic programming solution."
   - **Threshold**: The slowdown is likely when `n` approaches its upper bound of 500, as the DP table size and associated computations grow quadratically with `n` and `k`.

2. **Invariant #2: Map and Frequency Calculation Overhead**
   - **Description**: "The execution time increases substantially when there are many unique card values, each mapped to multiple players’ favorite numbers, causing the map operations and associated DP table lookups to be executed repeatedly."
   - **Threshold**: Performance bottlenecks occur when the number of unique card values is large relative to the number of players, leading to numerous iterations over the frequency map.

3. **Invariant #3: DP Table Access Frequency**
   - **Description**: "Frequent access and updates to the dynamic programming table for each player and card distribution scenario can lead to slow performance, especially when computations for the combination of `k` cards per player and `n` players are extensive."
   - **Threshold**: This is exacerbated when `k` is at its maximum (10), leading to more possibilities and thus more DP table interactions for combinations of distributed cards.

These invariants highlight the conditions under which the algorithm's complexity and memory access patterns likely result in slower execution times. They provide insights into possible optimizations, such as reducing the DP table size or optimizing the frequency map operations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n players sitting at the card table. Each player has a favorite number. The favorite number of the j-th player is f_j.

There are k ⋅ n cards on the table. Each card contains a single integer: the i-th card contains number c_i. Also, you are given a sequence h_1, h_2, ..., h_k. Its meaning will be explained below.

The players have to distribute all the cards in such a way that each of them will hold exactly k cards. After all the cards are distributed, each player counts the number of cards he has that contains his favorite number. The joy level of a player equals h_t if the player holds t cards containing his favorite number. If a player gets no cards with his favorite number (i.e., t=0), his joy level is 0.

Print the maximum possible total joy levels of the players after the cards are distributed. Note that the sequence h_1, ..., h_k is the same for all the players.

Input

The first line of input contains two integers n and k (1 ≤ n ≤ 500, 1 ≤ k ≤ 10) — the number of players and the number of cards each player will get.

The second line contains k ⋅ n integers c_1, c_2, ..., c_{k ⋅ n} (1 ≤ c_i ≤ 10^5) — the numbers written on the cards.

The third line contains n integers f_1, f_2, ..., f_n (1 ≤ f_j ≤ 10^5) — the favorite numbers of the players.

The fourth line contains k integers h_1, h_2, ..., h_k (1 ≤ h_t ≤ 10^5), where h_t is the joy level of a player if he gets exactly t cards with his favorite number written on them. It is guaranteed that the condition h_{t - 1} < h_t holds for each t ∈ [2..k].

Output

Print one integer — the maximum possible total joy levels of the players among all possible card distributions.

Examples

Input

4 3
1 3 2 8 5 5 8 2 2 8 5 2
1 2 2 5
2 6 7


Output

21


Input

3 3
9 9 9 9 9 9 9 9 9
1 2 3
1 2 3


Output

0

Note

In the first example, one possible optimal card distribution is the following:

  * Player 1 gets cards with numbers [1, 3, 8]; 
  * Player 2 gets cards with numbers [2, 2, 8]; 
  * Player 3 gets cards with numbers [2, 2, 8]; 
  * Player 4 gets cards with numbers [5, 5, 5]. 



Thus, the answer is 2 + 6 + 6 + 7 = 21.

In the second example, no player can get a card with his favorite number. Thus, the answer is 0.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checker Code for Performance Invariants

Let's implement the checker functions for each of the identified performance-characterizing invariants.

1. **Invariant #1: Dynamic Programming Complexity**

```cpp
void check_dp_table_size(long long n, long long k) {
    if (n >= 500 && k >= 10) {
        cerr << "Warning: Performance bottleneck condition triggered - large DP table size!" << endl;
        abort();
    }
}
```

2. **Invariant #2: Map and Frequency Calculation Overhead**

```cpp
void check_unique_card_values(const map<long long, long long>& cf, long long n) {
    if (cf.size() > n) {
        cerr << "Warning: Performance bottleneck condition triggered - too many unique card values!" << endl;
        abort();
    }
}
```

3. **Invariant #3: DP Table Access Frequency**

```cpp
void check_dp_access_frequency(long long n, long long k) {
    if (n * k > 2500) { // arbitrary choice for a large number of DP accesses
        cerr << "Warning: Performance bottleneck condition triggered - excessive DP table accesses!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checker functions into the provided C++ program. We'll place the checks at appropriate locations to ensure they are evaluated before bottlenecks occur.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long power(long long x, long long y, long long m);
long long modInverse(long long n, long long m);
long long nCr(long long n, long long r, long long m);
long long ceiling(long long x, long long y);
bool sortbyth(const tuple<long long, int, int>& a,
              const tuple<long long, int, int>& b) {
    if (get<0>(a) != get<0>(b))
        return get<0>(a) > get<0>(b);
    else
        return get<1>(a) < get<1>(b);
}

int dx[] = {-1, -1, -1, 0, 1, 1, 1, 0};
int dy[] = {-1, 0, 1, 1, 1, 0, -1, -1};

// Checker function for DP table size
void check_dp_table_size(long long n, long long k) {
    if (n >= 500 && k >= 10) {
        cerr << "Warning: Performance bottleneck condition triggered - large DP table size!" << endl;
        abort();
    }
}

// Checker function for unique card values
void check_unique_card_values(const map<long long, long long>& cf, long long n) {
    if (cf.size() > n) {
        cerr << "Warning: Performance bottleneck condition triggered - too many unique card values!" << endl;
        abort();
    }
}

// Checker function for DP table access frequency
void check_dp_access_frequency(long long n, long long k) {
    if (n * k > 2500) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive DP table accesses!" << endl;
        abort();
    }
}

void aksayushx() {
    long long n, k;
    cin >> n >> k;
    
    // Check for large DP table size
    check_dp_table_size(n, k);

    vector<long long> cards(n * k);
    for (long long i = 0; i < n * k; i++) cin >> cards[i];
    vector<long long> f(n), h(k);
    for (long long i = 0; i < n; i++) cin >> f[i];
    for (long long i = 0; i < k; i++) cin >> h[i];
    
    vector<vector<long long>> dp(n + 1, vector<long long>(k * n + 1, -1));
    for (long long i = 0; i <= k * n; i++) dp[0][i] = 0;
    for (long long i = 0; i <= n; i++) dp[i][0] = 0;
    
    // Check for excessive DP table accesses
    check_dp_access_frequency(n, k);
    
    for (long long i = 1; i <= n; i++) {
        for (long long j = 1; j <= k * n; j++) {
            for (long long give = 0; give <= k; give++) {
                if (give > j) break;
                long long happiness = give == 0 ? 0 : h[give - 1];
                happiness += dp[i - 1][j - give];
                dp[i][j] = max(dp[i][j], happiness);
            }
        }
    }
    
    map<long long, long long> cf, pf;
    for (long long i = 0; i < n; i++) pf[f[i]]++;
    for (long long i = 0; i < n * k; i++) cf[cards[i]]++;

    // Check for too many unique card values
    check_unique_card_values(cf, n);

    long long ans = 0;
    for (auto& e : cf) {
        long long cardsav = e.second;
        long long people = pf[e.first];
        ans += dp[people][cardsav];
    }
    cout << ans << '\n';
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    while (t--) aksayushx();
    return 0;
}

long long power(long long x, long long y, long long m) {
    long long res = 1;
    x = x % m;
    if (x == 0) return 0;
    while (y > 0) {
        if (y & 1) res = (res * x) % m;
        y = y >> 1;
        x = (x * x) % m;
    }
    return res;
}

long long modInverse(long long n, long long m) { return power(n, m - 2, m); }
long long ceiling(long long x, long long y) { return (x + y - 1) / y; }
```

### Explanation

- **`check_dp_table_size`**: Added after reading `n` and `k` to detect potential slowdowns due to large DP tables.
- **`check_unique_card_values`**: Invoked after counting card frequencies to ensure the number of unique card values isn't excessively high compared to `n`.
- **`check_dp_access_frequency`**: Placed before the DP computation loop to ensure the number of accesses doesn't reach a problematic level. 

By placing these checks strategically, the code can detect potential performance bottlenecks without adding significant overhead during execution.

