system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n players sitting at the card table. Each player has a favorite number. The favorite number of the j-th player is f_j.

There are k ⋅ n cards on the table. Each card contains a single integer: the i-th card contains number c_i. Also, you are given a sequence h_1, h_2, ..., h_k. Its meaning will be explained below.

The players have to distribute all the cards in such a way that each of them will hold exactly k cards. After all the cards are distributed, each player counts the number of cards he has that contains his favorite number. The joy level of a player equals h_t if the player holds t cards containing his favorite number. If a player gets no cards with his favorite number (i.e., t=0), his joy level is 0.

Print the maximum possible total joy levels of the players after the cards are distributed. Note that the sequence h_1, ..., h_k is the same for all the players.

Input

The first line of input contains two integers n and k (1 ≤ n ≤ 500, 1 ≤ k ≤ 10) — the number of players and the number of cards each player will get.

The second line contains k ⋅ n integers c_1, c_2, ..., c_{k ⋅ n} (1 ≤ c_i ≤ 10^5) — the numbers written on the cards.

The third line contains n integers f_1, f_2, ..., f_n (1 ≤ f_j ≤ 10^5) — the favorite numbers of the players.

The fourth line contains k integers h_1, h_2, ..., h_k (1 ≤ h_t ≤ 10^5), where h_t is the joy level of a player if he gets exactly t cards with his favorite number written on them. It is guaranteed that the condition h_{t - 1} < h_t holds for each t ∈ [2..k].

Output

Print one integer — the maximum possible total joy levels of the players among all possible card distributions.

Examples

Input

4 3
1 3 2 8 5 5 8 2 2 8 5 2
1 2 2 5
2 6 7


Output

21


Input

3 3
9 9 9 9 9 9 9 9 9
1 2 3
1 2 3


Output

0

Note

In the first example, one possible optimal card distribution is the following:

  * Player 1 gets cards with numbers [1, 3, 8]; 
  * Player 2 gets cards with numbers [2, 2, 8]; 
  * Player 3 gets cards with numbers [2, 2, 8]; 
  * Player 4 gets cards with numbers [5, 5, 5]. 



Thus, the answer is 2 + 6 + 6 + 7 = 21.

In the second example, no player can get a card with his favorite number. Thus, the answer is 0.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using namespace std;
long long dp[501][5001];
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  long long card[5001], f[501], h[11], n, k, i, j, p, q, r, demand[100001],
      supply[100001], ans = 0;
  for (i = 0; i < 100001; i++) demand[i] = supply[i] = 0;
  map<long long, long long> make_pair;
  cin >> n >> k;
  for (i = 0; i < n * k; i++) {
    cin >> card[i];
    supply[card[i]]++;
  }
  for (i = 0; i < n; i++) {
    cin >> f[i];
    demand[f[i]]++;
  }
  h[0] = 0;
  for (i = 1; i < k + 1; i++) cin >> h[i];
  for (j = 0; j < 501; j++) dp[0][j] = 0;
  for (p = 1; p < 501; p++) {
    for (q = 1; q < 5001; q++) {
      dp[p][q] = dp[p - 1][q];
      for (r = 1; r < q + 1; r++) {
        if (r > k) break;
        dp[p][q] = max(dp[p][q], dp[p - 1][q - r] + h[r]);
      }
    }
  }
  for (i = 1; i < 100001; i++) {
    ans += dp[demand[i]][supply[i]];
  }
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4 3
1 3 2 8 5 5 8 2 2 8 5 2
1 2 2 5
2 6 7


(G.2) Fast Input

1 1
1
7
2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[501][5001]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  long long card[5001], f[501], h[11], n, k, i, j, p, q, r, demand[100001], /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
      supply[100001], ans = 0; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < 100001; i++) demand[i] = supply[i] = 0; /* line 11 slow_hit_count: 100002, fast_hit_count: 100002 */
  map<long long, long long> make_pair; /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> n >> k; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n * k; i++) { /* line 14 slow_hit_count: 13, fast_hit_count: 2 */
    cin >> card[i]; /* line 15 slow_hit_count: 12, fast_hit_count: 1 */
    supply[card[i]]++; /* line 16 slow_hit_count: 12, fast_hit_count: 1 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < n; i++) { /* line 18 slow_hit_count: 5, fast_hit_count: 2 */
    cin >> f[i]; /* line 19 slow_hit_count: 4, fast_hit_count: 1 */
    demand[f[i]]++; /* line 20 slow_hit_count: 4, fast_hit_count: 1 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  h[0] = 0; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 1; i < k + 1; i++) cin >> h[i]; /* line 23 slow_hit_count: 4, fast_hit_count: 2 */
  for (j = 0; j < 501; j++) dp[0][j] = 0; /* line 24 slow_hit_count: 502, fast_hit_count: 502 */
  for (p = 1; p < 501; p++) { /* line 25 slow_hit_count: 501, fast_hit_count: 501 */
    for (q = 1; q < 5001; q++) { /* line 26 slow_hit_count: 2500500, fast_hit_count: 2500500 */
      dp[p][q] = dp[p - 1][q]; /* line 27 slow_hit_count: 2500000, fast_hit_count: 2500000 */
      for (r = 1; r < q + 1; r++) { /* line 28 slow_hit_count: 9998500, fast_hit_count: 5000000 */
        if (r > k) break; /* line 29 slow_hit_count: 9997000, fast_hit_count: 4999500 */
        dp[p][q] = max(dp[p][q], dp[p - 1][q - r] + h[r]); /* line 30 slow_hit_count: 7498500, fast_hit_count: 2500000 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 1; i < 100001; i++) { /* line 34 slow_hit_count: 100001, fast_hit_count: 100001 */
    ans += dp[demand[i]][supply[i]]; /* line 35 slow_hit_count: 100000, fast_hit_count: 100000 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 38 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose and potentially improve the performance of the given C program, we need to analyze the line-level hit counts and identify where the slow input causes significantly more computational effort compared to the fast input. Afterward, we should articulate the performance characteristics in terms of natural language invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Loop Analysis**:
   - The loop at line 26 (`for (q = 1; q < 5001; q++)`) and the nested loop at line 28 (`for (r = 1; r < q + 1; r++)`) have a high number of hits.
   - The inner loop at line 28 has significantly more hits for the slow input compared to the fast input. Particularly, the significant increase in hit counts for lines 28, 29, and 30 indicates that these loops are critical areas of inefficiency.

2. **Condition Analysis**:
   - Line 29 (`if (r > k) break;`) suggests that the inner loop breaks early depending on the value of `k`. Since `k` is relatively small (maximum value 10), the excessive hits in the slow input imply that `q` often grows large, causing the loop to execute many times.

3. **Dynamic Programming Table**:
   - The dynamic programming table `dp[p][q]` is updated in nested loops, which contributes to a high number of operations. Given that `p` and `q` are iterated over large ranges, the computation can become expensive quickly.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive several performance-characterizing invariants:

1. **Large Search Space Invariant**:
   - Natural Language Description: "If the number of unique card numbers or favorite numbers is high, this may cause the dynamic programming table to be accessed and updated frequently, leading to a slowdown."
   - This invariant considers the combined effects of large supplies and demands of distinct card numbers, causing the nested loops to have high computational overhead.

2. **Excessive Loop Execution Invariant**:
   - Natural Language Description: "If the number of cards or players approaches the upper constraint limits, and players have varied favorite numbers, the dynamic programming approach may repeatedly calculate subproblems, causing performance degradation."
   - This invariant highlights how the program's performance may be impacted by n being close to 500 and the distribution of favorite numbers causing the `dp` table to be filled extensively.

3. **DP Table Size Invariant**:
   - Natural Language Description: "When the supply or demand for certain card values is large, and many players share these as favorite numbers, the dynamic programming table can grow significantly, increasing computational load."
   - This invariant indicates that large values in the `demand` and `supply` arrays lead to extensive iterations over the DP table, especially if many players favor the same numbers.

### Conclusion

The analysis points towards loops, particularly those managing the dynamic programming table, as key contributors to the slowdown for large input scenarios. The derived invariants provide a guideline that helps foresee performance issues without hardcoding specific input values. Such analysis aids in understanding and potentially optimizing the program by limiting or better managing the transitions within these loops, thereby reducing unnecessary computations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n players sitting at the card table. Each player has a favorite number. The favorite number of the j-th player is f_j.

There are k ⋅ n cards on the table. Each card contains a single integer: the i-th card contains number c_i. Also, you are given a sequence h_1, h_2, ..., h_k. Its meaning will be explained below.

The players have to distribute all the cards in such a way that each of them will hold exactly k cards. After all the cards are distributed, each player counts the number of cards he has that contains his favorite number. The joy level of a player equals h_t if the player holds t cards containing his favorite number. If a player gets no cards with his favorite number (i.e., t=0), his joy level is 0.

Print the maximum possible total joy levels of the players after the cards are distributed. Note that the sequence h_1, ..., h_k is the same for all the players.

Input

The first line of input contains two integers n and k (1 ≤ n ≤ 500, 1 ≤ k ≤ 10) — the number of players and the number of cards each player will get.

The second line contains k ⋅ n integers c_1, c_2, ..., c_{k ⋅ n} (1 ≤ c_i ≤ 10^5) — the numbers written on the cards.

The third line contains n integers f_1, f_2, ..., f_n (1 ≤ f_j ≤ 10^5) — the favorite numbers of the players.

The fourth line contains k integers h_1, h_2, ..., h_k (1 ≤ h_t ≤ 10^5), where h_t is the joy level of a player if he gets exactly t cards with his favorite number written on them. It is guaranteed that the condition h_{t - 1} < h_t holds for each t ∈ [2..k].

Output

Print one integer — the maximum possible total joy levels of the players among all possible card distributions.

Examples

Input

4 3
1 3 2 8 5 5 8 2 2 8 5 2
1 2 2 5
2 6 7


Output

21


Input

3 3
9 9 9 9 9 9 9 9 9
1 2 3
1 2 3


Output

0

Note

In the first example, one possible optimal card distribution is the following:

  * Player 1 gets cards with numbers [1, 3, 8]; 
  * Player 2 gets cards with numbers [2, 2, 8]; 
  * Player 3 gets cards with numbers [2, 2, 8]; 
  * Player 4 gets cards with numbers [5, 5, 5]. 



Thus, the answer is 2 + 6 + 6 + 7 = 21.

In the second example, no player can get a card with his favorite number. Thus, the answer is 0.

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 and Phase 4 as outlined in the task.

### Phase 3: Implementing the Invariants as Checker Code in C++

Below are the runtime checks for each of the previously derived performance-characterizing invariants:

1. **Large Search Space Invariant**:
   - Check if the number of unique card numbers or favorite numbers is high.

```cpp
void check_large_search_space(int uniqueCardNumbers, int uniqueFavoriteNumbers) {
    if (uniqueCardNumbers > 10000 || uniqueFavoriteNumbers > 100) {
        cerr << "Warning: Performance bottleneck due to large search space!" << endl;
        abort();
    }
}
```

2. **Excessive Loop Execution Invariant**:
   - Check for conditions where the number of cards or players approaches the upper constraint limits with varied favorite numbers.

```cpp
void check_excessive_loop_execution(int n, int k) {
    if (n > 400 && k > 8) {
        cerr << "Warning: Performance bottleneck due to excessive loop execution!" << endl;
        abort();
    }
}
```

3. **DP Table Size Invariant**:
   - Check for large values in the `demand` and `supply` arrays leading to extensive DP table use.

```cpp
void check_dp_table_size(int maxSupply, int maxDemand) {
    if (maxSupply > 5000 || maxDemand > 500) {
        cerr << "Warning: Performance bottleneck due to large DP table usage!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checker Code with the Original Program

Now we will integrate these checks into the original C++ code. We'll place the checks at appropriate points in the program flow to avoid additional overhead within critical loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions implemented as suggested
void check_large_search_space(int uniqueCardNumbers, int uniqueFavoriteNumbers) {
    if (uniqueCardNumbers > 10000 || uniqueFavoriteNumbers > 100) {
        cerr << "Warning: Performance bottleneck due to large search space!" << endl;
        abort();
    }
}

void check_excessive_loop_execution(int n, int k) {
    if (n > 400 && k > 8) {
        cerr << "Warning: Performance bottleneck due to excessive loop execution!" << endl;
        abort();
    }
}

void check_dp_table_size(int maxSupply, int maxDemand) {
    if (maxSupply > 5000 || maxDemand > 500) {
        cerr << "Warning: Performance bottleneck due to large DP table usage!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    long long card[5001], f[501], h[11], n, k, i, j, p, q, r, demand[100001], supply[100001], ans = 0;
    map<long long, long long> make_pair;

    for (i = 0; i < 100001; i++) demand[i] = supply[i] = 0;

    cin >> n >> k;

    // Insert check for excessive loop execution based on n and k
    check_excessive_loop_execution(n, k);

    int uniqueCardNumbers = 0;
    for (i = 0; i < n * k; i++) {
        cin >> card[i];
        if (supply[card[i]] == 0) {
            uniqueCardNumbers++;
        }
        supply[card[i]]++;
    }

    int uniqueFavoriteNumbers = 0;
    for (i = 0; i < n; i++) {
        cin >> f[i];
        if (demand[f[i]] == 0) {
            uniqueFavoriteNumbers++;
        }
        demand[f[i]]++;
    }

    // Insert check for large search space
    check_large_search_space(uniqueCardNumbers, uniqueFavoriteNumbers);

    h[0] = 0;
    for (i = 1; i < k + 1; i++) cin >> h[i];

    for (j = 0; j < 501; j++) dp[0][j] = 0;

    for (p = 1; p < 501; p++) {
        for (q = 1; q < 5001; q++) {
            dp[p][q] = dp[p - 1][q];
            for (r = 1; r < q + 1; r++) {
                if (r > k) break;
                dp[p][q] = max(dp[p][q], dp[p - 1][q - r] + h[r]);
            }
        }
    }

    int maxSupply = 0, maxDemand = 0;
    for (i = 1; i < 100001; i++) {
        maxSupply = max(maxSupply, supply[i]);
        maxDemand = max(maxDemand, demand[i]);
        ans += dp[demand[i]][supply[i]];
    }

    // Insert check for large DP table usage
    check_dp_table_size(maxSupply, maxDemand);

    cout << ans;
}
```

### Explanation:

- **Placement of Checks**: 
  - Checks are placed after the input reading phase and before the critical loops to ensure they do not add overhead to the main computation.
  - The `check_excessive_loop_execution` is placed immediately after reading `n` and `k`.
  - The `check_large_search_space` is placed after calculating unique card and favorite numbers.
  - The `check_dp_table_size` is placed after evaluating the `supply` and `demand` arrays.

- **Checker Functions**: Each checker function evaluates a condition based on the corresponding performance invariant and reports a warning before aborting the program if the condition is met. This helps in identifying potential bottlenecks during testing and debugging.

