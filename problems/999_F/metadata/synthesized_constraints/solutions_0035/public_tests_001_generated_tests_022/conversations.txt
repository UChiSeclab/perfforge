system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n players sitting at the card table. Each player has a favorite number. The favorite number of the j-th player is f_j.

There are k ⋅ n cards on the table. Each card contains a single integer: the i-th card contains number c_i. Also, you are given a sequence h_1, h_2, ..., h_k. Its meaning will be explained below.

The players have to distribute all the cards in such a way that each of them will hold exactly k cards. After all the cards are distributed, each player counts the number of cards he has that contains his favorite number. The joy level of a player equals h_t if the player holds t cards containing his favorite number. If a player gets no cards with his favorite number (i.e., t=0), his joy level is 0.

Print the maximum possible total joy levels of the players after the cards are distributed. Note that the sequence h_1, ..., h_k is the same for all the players.

Input

The first line of input contains two integers n and k (1 ≤ n ≤ 500, 1 ≤ k ≤ 10) — the number of players and the number of cards each player will get.

The second line contains k ⋅ n integers c_1, c_2, ..., c_{k ⋅ n} (1 ≤ c_i ≤ 10^5) — the numbers written on the cards.

The third line contains n integers f_1, f_2, ..., f_n (1 ≤ f_j ≤ 10^5) — the favorite numbers of the players.

The fourth line contains k integers h_1, h_2, ..., h_k (1 ≤ h_t ≤ 10^5), where h_t is the joy level of a player if he gets exactly t cards with his favorite number written on them. It is guaranteed that the condition h_{t - 1} < h_t holds for each t ∈ [2..k].

Output

Print one integer — the maximum possible total joy levels of the players among all possible card distributions.

Examples

Input

4 3
1 3 2 8 5 5 8 2 2 8 5 2
1 2 2 5
2 6 7


Output

21


Input

3 3
9 9 9 9 9 9 9 9 9
1 2 3
1 2 3


Output

0

Note

In the first example, one possible optimal card distribution is the following:

  * Player 1 gets cards with numbers [1, 3, 8]; 
  * Player 2 gets cards with numbers [2, 2, 8]; 
  * Player 3 gets cards with numbers [2, 2, 8]; 
  * Player 4 gets cards with numbers [5, 5, 5]. 



Thus, the answer is 2 + 6 + 6 + 7 = 21.

In the second example, no player can get a card with his favorite number. Thus, the answer is 0.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma 03
using namespace std;
long long n, k;
long long cnt1[200005];
long long cnt2[200005];
long long c[5005];
long long f[505];
long long h[15];
long long dp[5005][505];
int main() {
  cin >> n >> k;
  for (int i = 0; i < 200005; i++) {
    cnt1[i] = 0;
    cnt2[i] = 0;
  }
  for (long long i = 0; i < k * n; i++) {
    cin >> c[i];
    cnt1[c[i]]++;
  }
  for (long long i = 0; i < n; i++) {
    cin >> f[i];
    cnt2[f[i]]++;
  }
  h[0] = 0;
  for (long long i = 1; i <= k; i++) cin >> h[i];
  for (long long i = 0; i < 505; i++) dp[0][i] = 0;
  for (long long i = 1; i < 5005; i++) {
    for (long long j = 1; j < 505; j++) {
      long long r = min(k, i);
      for (long long a = 0; a <= r; a++)
        dp[i][j] = max(dp[i - a][j - 1] + h[a], dp[i][j]);
    }
  }
  long long ans = 0;
  for (long long i = 0; i < 200005; i++) ans += dp[cnt1[i]][cnt2[i]];
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4 3
1 3 2 8 5 5 8 2 2 8 5 2
1 2 2 5
2 6 7


(G.2) Fast Input

1 1
1
7
2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma 03 /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long n, k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long cnt1[200005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long cnt2[200005]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long c[5005]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long f[505]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long h[15]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[5005][505]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 200005; i++) { /* line 13 slow_hit_count: 200006, fast_hit_count: 200006 */
    cnt1[i] = 0; /* line 14 slow_hit_count: 200005, fast_hit_count: 200005 */
    cnt2[i] = 0; /* line 15 slow_hit_count: 200005, fast_hit_count: 200005 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < k * n; i++) { /* line 17 slow_hit_count: 13, fast_hit_count: 2 */
    cin >> c[i]; /* line 18 slow_hit_count: 12, fast_hit_count: 1 */
    cnt1[c[i]]++; /* line 19 slow_hit_count: 12, fast_hit_count: 1 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < n; i++) { /* line 21 slow_hit_count: 5, fast_hit_count: 2 */
    cin >> f[i]; /* line 22 slow_hit_count: 4, fast_hit_count: 1 */
    cnt2[f[i]]++; /* line 23 slow_hit_count: 4, fast_hit_count: 1 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  h[0] = 0; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= k; i++) cin >> h[i]; /* line 26 slow_hit_count: 4, fast_hit_count: 2 */
  for (long long i = 0; i < 505; i++) dp[0][i] = 0; /* line 27 slow_hit_count: 506, fast_hit_count: 506 */
  for (long long i = 1; i < 5005; i++) { /* line 28 slow_hit_count: 5005, fast_hit_count: 5005 */
    for (long long j = 1; j < 505; j++) { /* line 29 slow_hit_count: 2527020, fast_hit_count: 2527020 */
      long long r = min(k, i); /* line 30 slow_hit_count: 2522016, fast_hit_count: 2522016 */
      for (long long a = 0; a <= r; a++) /* line 31 slow_hit_count: 12608568, fast_hit_count: 7566048 */
        dp[i][j] = max(dp[i - a][j - 1] + h[a], dp[i][j]); /* line 32 slow_hit_count: 10086552, fast_hit_count: 5044032 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < 200005; i++) ans += dp[cnt1[i]][cnt2[i]]; /* line 36 slow_hit_count: 200006, fast_hit_count: 200006 */
  cout << ans << endl; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the provided C program, we need to examine the hit count information for the lines of code executed during the slow and fast input scenarios. Based on this analysis, we can derive performance-characterizing invariants that describe when the program is likely to enter a slow execution path.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hotspot Identification:**
   - **Line 31 (`for (long long a = 0; a <= r; a++)`):** This line has a significantly higher hit count for the slow input compared to the fast input. It indicates that this loop is being executed a large number of times, particularly for the slow input.
   - **Line 32 (`dp[i][j] = max(dp[i - a][j - 1] + h[a], dp[i][j]);`):** This line is also hit significantly more often in the slow input scenario, suggesting that the dynamic programming (DP) update operation is being performed very frequently.

2. **Interaction with Data Structures:**
   - The nested loops, particularly the one starting at line 31, are key contributors to the increased computational cost. This loop iterates over possible numbers of favorite cards a player can have, which directly affects how many times the DP table is updated.

3. **Input Constraints and Loop Behavior:**
   - The constraints `1 ≤ n ≤ 500` and `1 ≤ k ≤ 10` imply that the size of the DP table (`dp[i][j]`) is influenced by these values. The matrix size and the depth of nested loops contribute to the number of operations.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

Based on the analysis, here are conditions under which the program likely encounters performance bottlenecks:

1. **Nested Loop Iterations:**
   - **Natural Language Invariant:** "When the number of players (n) is large and each player must receive many cards (k is close to 10), the nested loops in the dynamic programming section can lead to excessive iterations, significantly slowing down execution."

2. **Dynamic Programming Table Updates:**
   - **Natural Language Invariant:** "If the number of distinct favorite numbers among players is high, and the variety of card numbers is also large, the dynamic programming table will undergo frequent updates, causing a performance hit."

3. **Card and Favorite Number Distribution:**
   - **Natural Language Invariant:** "When there is a high variance in the distribution of favorite numbers and card numbers, the algorithm's complexity increases due to more complex decision-making in distributing cards to maximize joy."

These invariants focus on capturing major factors that cause the program to slow down, without relying on specific numeric values from slow inputs. This approach helps identify potential future slow scenarios by considering input patterns and structural complexities in the code.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n players sitting at the card table. Each player has a favorite number. The favorite number of the j-th player is f_j.

There are k ⋅ n cards on the table. Each card contains a single integer: the i-th card contains number c_i. Also, you are given a sequence h_1, h_2, ..., h_k. Its meaning will be explained below.

The players have to distribute all the cards in such a way that each of them will hold exactly k cards. After all the cards are distributed, each player counts the number of cards he has that contains his favorite number. The joy level of a player equals h_t if the player holds t cards containing his favorite number. If a player gets no cards with his favorite number (i.e., t=0), his joy level is 0.

Print the maximum possible total joy levels of the players after the cards are distributed. Note that the sequence h_1, ..., h_k is the same for all the players.

Input

The first line of input contains two integers n and k (1 ≤ n ≤ 500, 1 ≤ k ≤ 10) — the number of players and the number of cards each player will get.

The second line contains k ⋅ n integers c_1, c_2, ..., c_{k ⋅ n} (1 ≤ c_i ≤ 10^5) — the numbers written on the cards.

The third line contains n integers f_1, f_2, ..., f_n (1 ≤ f_j ≤ 10^5) — the favorite numbers of the players.

The fourth line contains k integers h_1, h_2, ..., h_k (1 ≤ h_t ≤ 10^5), where h_t is the joy level of a player if he gets exactly t cards with his favorite number written on them. It is guaranteed that the condition h_{t - 1} < h_t holds for each t ∈ [2..k].

Output

Print one integer — the maximum possible total joy levels of the players among all possible card distributions.

Examples

Input

4 3
1 3 2 8 5 5 8 2 2 8 5 2
1 2 2 5
2 6 7


Output

21


Input

3 3
9 9 9 9 9 9 9 9 9
1 2 3
1 2 3


Output

0

Note

In the first example, one possible optimal card distribution is the following:

  * Player 1 gets cards with numbers [1, 3, 8]; 
  * Player 2 gets cards with numbers [2, 2, 8]; 
  * Player 3 gets cards with numbers [2, 2, 8]; 
  * Player 4 gets cards with numbers [5, 5, 5]. 



Thus, the answer is 2 + 6 + 6 + 7 = 21.

In the second example, no player can get a card with his favorite number. Thus, the answer is 0.

Solution (C++ code):
{solution}


assistant: Let's proceed with implementing the performance-characterizing invariants from Phase 2 into runtime checks in C++.

### Phase 3: Implementing Natural Language Invariants in C++

For each of the natural language invariants previously identified, we will create corresponding C++ checker code:

1. **Nested Loop Iterations:**
   - Check if the number of players (`n`) is large and each player receives many cards (`k` is close to 10), which can lead to excessive iterations in nested loops.
   
   ```cpp
   void check_nested_loop_invariant(int n, int k) {
       if (n > 400 && k == 10) { // These thresholds are chosen for illustration based on input constraints
           cerr << "Warning: Performance bottleneck due to excessive nested loop iterations!" << endl;
           abort();
       }
   }
   ```

2. **Dynamic Programming Table Updates:**
   - Check if the process involves a high number of distinct favorite numbers and card numbers, leading to frequent DP updates.
   
   ```cpp
   void check_dp_update_invariant(int numDistinctFavNums, int numDistinctCardNums) {
       if (numDistinctFavNums > 350 && numDistinctCardNums > 450) { // Hypothetical thresholds for illustration
           cerr << "Warning: Performance bottleneck due to frequent dynamic programming updates!" << endl;
           abort();
       }
   }
   ```

3. **Card and Favorite Number Distribution:**
   - Check for high variance in distribution of favorite numbers and card numbers which complicates joy maximization.
   
   ```cpp
   void check_distribution_invariant(int varianceFavNums, int varianceCardNums) {
       if (varianceFavNums > 200 && varianceCardNums > 300) { // Hypothetical variance thresholds
           cerr << "Warning: Performance bottleneck due to complex distribution of numbers!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checks into the original C++ program, ensuring they are placed at effective points to detect potential performance issues without introducing significant overhead.

```cpp
#include <bits/stdc++.h>
#pragma 03
using namespace std;

long long n, k;
long long cnt1[200005];
long long cnt2[200005];
long long c[5005];
long long f[505];
long long h[15];
long long dp[5005][505];

void check_nested_loop_invariant(int n, int k) {
    if (n > 400 && k == 10) {
        cerr << "Warning: Performance bottleneck due to excessive nested loop iterations!" << endl;
        abort();
    }
}

void check_dp_update_invariant(int numDistinctFavNums, int numDistinctCardNums) {
    if (numDistinctFavNums > 350 && numDistinctCardNums > 450) {
        cerr << "Warning: Performance bottleneck due to frequent dynamic programming updates!" << endl;
        abort();
    }
}

void check_distribution_invariant(int varianceFavNums, int varianceCardNums) {
    if (varianceFavNums > 200 && varianceCardNums > 300) {
        cerr << "Warning: Performance bottleneck due to complex distribution of numbers!" << endl;
        abort();
    }
}

int main() {
    cin >> n >> k;
    
    // Check for potential bottlenecks before proceeding with main logic
    check_nested_loop_invariant(n, k);
    
    for (int i = 0; i < 200005; i++) {
        cnt1[i] = 0;
        cnt2[i] = 0;
    }
    for (long long i = 0; i < k * n; i++) {
        cin >> c[i];
        cnt1[c[i]]++;
    }
    
    for (long long i = 0; i < n; i++) {
        cin >> f[i];
        cnt2[f[i]]++;
    }
    
    // Calculate distinct counts (hypothetical function calls)
    int numDistinctFavNums = set<int>(f, f + n).size();
    int numDistinctCardNums = set<int>(c, c + k * n).size();
    
    check_dp_update_invariant(numDistinctFavNums, numDistinctCardNums);
    
    h[0] = 0;
    for (long long i = 1; i <= k; i++) cin >> h[i];
    
    for (long long i = 0; i < 505; i++) dp[0][i] = 0;
    for (long long i = 1; i < 5005; i++) {
        for (long long j = 1; j < 505; j++) {
            long long r = min(k, i);
            for (long long a = 0; a <= r; a++)
                dp[i][j] = max(dp[i - a][j - 1] + h[a], dp[i][j]);
        }
    }
    
    long long ans = 0;
    for (long long i = 0; i < 200005; i++) ans += dp[cnt1[i]][cnt2[i]];
    cout << ans << endl;
    
    return 0;
}
```

**Notes:**
- The above instrumented code integrates runtime checks at the start and before heavy computation sections based on the natural language invariants.
- Hypothetical threshold values are used to illustrate the checks; these values can be adjusted based on deeper profiling and understanding of the problem constraints.
- The checks are placed to not introduce overhead inside the nested loops themselves but are instead before critical sections.

