system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

At first, let's define function f(x) as follows: $$$ \begin{matrix} f(x) & = & \left\{ \begin{matrix} x/2 & \mbox{if } x  is even \\\ x - 1 & \mbox{otherwise } \end{matrix} \right. \end{matrix} $$$

We can see that if we choose some value v and will apply function f to it, then apply f to f(v), and so on, we'll eventually get 1. Let's write down all values we get in this process in a list and denote this list as path(v). For example, path(1) = [1], path(15) = [15, 14, 7, 6, 3, 2, 1], path(32) = [32, 16, 8, 4, 2, 1].

Let's write all lists path(x) for every x from 1 to n. The question is next: what is the maximum value y such that y is contained in at least k different lists path(x)?

Formally speaking, you need to find maximum y such that \left| \{ x ~|~ 1 ≤ x ≤ n, y ∈ path(x) \} \right| ≥ k.

Input

The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^{18}).

Output

Print the only integer — the maximum value that is contained in at least k paths.

Examples

Input


11 3


Output


5


Input


11 6


Output


4


Input


20 20


Output


1


Input


14 5


Output


6


Input


1000000 100


Output


31248

Note

In the first example, the answer is 5, since 5 occurs in path(5), path(10) and path(11).

In the second example, the answer is 4, since 4 occurs in path(4), path(5), path(8), path(9), path(10) and path(11).

In the third example n = k, so the answer is 1, since 1 is the only number occuring in all paths for integers from 1 to 20.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
ll lim, n, k;
map<ll, ll> cnt;
struct data {
  ll l, r, x, y;
};
vector<data> dp;
ll get(ll x) {
  if (x > lim) return 0;
  if (cnt.count(x)) {
    return cnt[x];
  }
  for (auto it : dp)
    if (it.l <= x && it.r >= x) {
      if (x & 1)
        return it.y;
      else
        return it.x;
    }
}
ll getcnt(ll x) {
  if (x & 1) return 1 + get(2ll * x);
  return 1 + get(2ll * x) + get(x + 1);
}
int main() {
  cin >> n >> k;
  lim = n;
  cnt[n] = 1;
  for (int step = 2;; step++) {
    if (n <= 50) {
      for (ll i = n; i > 0; i--) cnt[i] = getcnt(i);
      break;
    }
    ll x = n / 2;
    while (2 * x <= n) x++;
    for (ll i = n;; i--) {
      cnt[i] = getcnt(i);
      if (i + 2 <= n && cnt[i] == cnt[i + 2]) {
        dp.push_back({x, i + 1, cnt[i], cnt[i + 1]});
        int sz = dp.size();
        if (i & 1) swap(dp[sz - 1].x, dp[sz - 1].y);
        break;
      }
    }
    n = x - 1;
  }
  ll ans = -1;
  for (auto it : cnt) {
    if (it.second >= k) ans = max(ans, it.first);
  }
  cout << ans << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

769845965585325522 1


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
ll lim, n, k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
map<ll, ll> cnt; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
struct data { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  ll l, r, x, y; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
vector<data> dp; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
ll get(ll x) { /* line 10 slow_hit_count: 418, fast_hit_count: 1 */
  if (x > lim) return 0; /* line 11 slow_hit_count: 418, fast_hit_count: 1 */
  if (cnt.count(x)) { /* line 12 slow_hit_count: 413, fast_hit_count: 0 */
    return cnt[x]; /* line 13 slow_hit_count: 234, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto it : dp) /* line 15 slow_hit_count: 5373, fast_hit_count: 0 */
    if (it.l <= x && it.r >= x) { /* line 16 slow_hit_count: 5373, fast_hit_count: 0 */
      if (x & 1) /* line 17 slow_hit_count: 179, fast_hit_count: 0 */
        return it.y; /* line 18 slow_hit_count: 179, fast_hit_count: 0 */
      else /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
        return it.x; /* line 20 slow_hit_count: 156, fast_hit_count: 0 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
ll getcnt(ll x) { /* line 23 slow_hit_count: 289, fast_hit_count: 1 */
  if (x & 1) return 1 + get(2ll * x); /* line 24 slow_hit_count: 289, fast_hit_count: 1 */
  return 1 + get(2ll * x) + get(x + 1); /* line 25 slow_hit_count: 129, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  lim = n; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  cnt[n] = 1; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  for (int step = 2;; step++) { /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
    if (n <= 50) { /* line 32 slow_hit_count: 55, fast_hit_count: 1 */
      for (ll i = n; i > 0; i--) cnt[i] = getcnt(i); /* line 33 slow_hit_count: 43, fast_hit_count: 2 */
      break; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    ll x = n / 2; /* line 36 slow_hit_count: 54, fast_hit_count: 0 */
    while (2 * x <= n) x++; /* line 37 slow_hit_count: 108, fast_hit_count: 0 */
    for (ll i = n;; i--) { /* line 38 slow_hit_count: 54, fast_hit_count: 0 */
      cnt[i] = getcnt(i); /* line 39 slow_hit_count: 247, fast_hit_count: 0 */
      if (i + 2 <= n && cnt[i] == cnt[i + 2]) { /* line 40 slow_hit_count: 247, fast_hit_count: 0 */
        dp.push_back({x, i + 1, cnt[i], cnt[i + 1]}); /* line 41 slow_hit_count: 54, fast_hit_count: 0 */
        int sz = dp.size(); /* line 42 slow_hit_count: 54, fast_hit_count: 0 */
        if (i & 1) swap(dp[sz - 1].x, dp[sz - 1].y); /* line 43 slow_hit_count: 54, fast_hit_count: 0 */
        break; /* line 44 slow_hit_count: 54, fast_hit_count: 0 */
      } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 46 slow_hit_count: 193, fast_hit_count: 0 */
    n = x - 1; /* line 47 slow_hit_count: 54, fast_hit_count: 0 */
  } /* line 48 slow_hit_count: 54, fast_hit_count: 0 */
  ll ans = -1; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto it : cnt) { /* line 50 slow_hit_count: 290, fast_hit_count: 2 */
    if (it.second >= k) ans = max(ans, it.first); /* line 51 slow_hit_count: 289, fast_hit_count: 1 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 55 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Line-Level Hit Counts:**
   - The lines with significant differences in hit counts between the slow and fast inputs are lines 10-20, 23-25, 31-52.
   - Specifically, the function `get()` (lines 10-22) and `getcnt()` (lines 23-26) are hit repeatedly in the slow input compared to the fast input.

2. **Pinpointing Lines/Functions with More Hits:**
   - The `get()` function on line 10 is invoked 418 times in the slow input, but only once in the fast input.
   - The loop at line 15 inside `get()` is executed 5373 times in the slow case, indicating a potential inefficiency.
   - The function `getcnt()` on line 23 is called 289 times in the slow input, compared to just once for the fast input.
   - Line 33, which involves computing counts over a range, runs 43 times for the slow input and 2 times for the fast input.

3. **Inferring Interactions:**
   - The high hit count within `get()` and `getcnt()` suggests these functions are being called recursively or repeatedly within nested loops.
   - The `dp` vector is used to potentially store ranges or precomputed values, but its construction and lookup within `get()` may introduce overhead.
   - The repeated call to `getcnt()` suggests the formation and evaluation of ranges or sequences that grow or change dynamically with each iteration.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariants:**

   - **Invariant 1:**
     "The program experiences slowdowns when the `get()` function is invoked frequently due to lack of memoization or repeated calculations. This is triggered when the recursion or loop structure around `get()` does not efficiently leverage precomputed results, especially when `n` is very large."

   - **Invariant 2:**
     "When `getcnt()` is called repeatedly within the loop, especially in the context of large values of `n`, there is potential for significant slowdown. This function's repeated invocation suggests insufficient caching or reliance on recalculations."

   - **Invariant 3:**
     "A slowdown is likely when the `dp` structure is heavily iterated over to find matching conditions, implying the lack of efficient indexing or range checks. This is exacerbated when `dp` grows large without proportional efficiency in look-ups."

   - **Invariant 4:**
     "The computational cost increases significantly when the program continuously updates the `cnt` mapping during each loop iteration without efficient exits or conditions. This is especially true when `n` is large and the loop iterates through many steps."

These invariants highlight conditions under which the performance bottlenecks observed are likely to arise, focusing on inefficient function calls, cache inefficiencies, and overhead in data manipulation operations. These statements abstract the specific numeric values and focus on broader categories or conditions that may trigger similar slow performance in future scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
At first, let's define function f(x) as follows: $$$ \begin{matrix} f(x) & = & \left\{ \begin{matrix} x/2 & \mbox{if } x  is even \\\ x - 1 & \mbox{otherwise } \end{matrix} \right. \end{matrix} $$$

We can see that if we choose some value v and will apply function f to it, then apply f to f(v), and so on, we'll eventually get 1. Let's write down all values we get in this process in a list and denote this list as path(v). For example, path(1) = [1], path(15) = [15, 14, 7, 6, 3, 2, 1], path(32) = [32, 16, 8, 4, 2, 1].

Let's write all lists path(x) for every x from 1 to n. The question is next: what is the maximum value y such that y is contained in at least k different lists path(x)?

Formally speaking, you need to find maximum y such that \left| \{ x ~|~ 1 ≤ x ≤ n, y ∈ path(x) \} \right| ≥ k.

Input

The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^{18}).

Output

Print the only integer — the maximum value that is contained in at least k paths.

Examples

Input


11 3


Output


5


Input


11 6


Output


4


Input


20 20


Output


1


Input


14 5


Output


6


Input


1000000 100


Output


31248

Note

In the first example, the answer is 5, since 5 occurs in path(5), path(10) and path(11).

In the second example, the answer is 4, since 4 occurs in path(4), path(5), path(8), path(9), path(10) and path(11).

In the third example n = k, so the answer is 1, since 1 is the only number occuring in all paths for integers from 1 to 20.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ code snippets to check the performance-characterizing invariants:

1. **Invariant 1: Repeated `get()` Invocation**

   ```cpp
   void check_get_invocation_count(int count, int threshold) {
       if (count > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive get() invocations!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Repeated `getcnt()` Invocation**

   ```cpp
   void check_getcnt_invocation_count(int count, int threshold) {
       if (count > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive getcnt() invocations!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Inefficient `dp` Lookups**

   ```cpp
   void check_dp_size(int size, int threshold) {
       if (size > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered - large dp structure causing inefficient lookups!" << endl;
           abort();
       }
   }
   ```

4. **Invariant 4: Inefficient `cnt` Updates**

   ```cpp
   void check_cnt_updates(int count, int threshold) {
       if (count > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive cnt updates!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Below is the instrumented C++ code with integrated checkers. These checkers are placed at strategic points in the program to detect potential performance bottlenecks. The thresholds are chosen based on reasonable expectations for performance issues, given the high values of `n`:

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;

ll lim, n, k;
map<ll, ll> cnt;
struct data {
  ll l, r, x, y;
};
vector<data> dp;

// Checkers implementation
void check_get_invocation_count(int count, int threshold) {
    if (count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive get() invocations!" << endl;
        abort();
    }
}

void check_getcnt_invocation_count(int count, int threshold) {
    if (count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive getcnt() invocations!" << endl;
        abort();
    }
}

void check_dp_size(int size, int threshold) {
    if (size > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - large dp structure causing inefficient lookups!" << endl;
        abort();
    }
}

void check_cnt_updates(int count, int threshold) {
    if (count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive cnt updates!" << endl;
        abort();
    }
}

int get_invocation_count = 0;
int getcnt_invocation_count = 0;
int cnt_update_count = 0;

ll get(ll x) {
  get_invocation_count++;
  if (x > lim) return 0;
  if (cnt.count(x)) {
    return cnt[x];
  }
  for (auto it : dp)
    if (it.l <= x && it.r >= x) {
      if (x & 1)
        return it.y;
      else
        return it.x;
    }
}

ll getcnt(ll x) {
  getcnt_invocation_count++;
  if (x & 1) return 1 + get(2ll * x);
  return 1 + get(2ll * x) + get(x + 1);
}

int main() {
  cin >> n >> k;
  lim = n;
  cnt[n] = 1;
  for (int step = 2;; step++) {
    if (n <= 50) {
      for (ll i = n; i > 0; i--) {
          cnt[i] = getcnt(i);
          cnt_update_count++;
      }
      break;
    }
    ll x = n / 2;
    while (2 * x <= n) x++;
    for (ll i = n;; i--) {
      cnt[i] = getcnt(i);
      cnt_update_count++;
      if (i + 2 <= n && cnt[i] == cnt[i + 2]) {
        dp.push_back({x, i + 1, cnt[i], cnt[i + 1]});
        int sz = dp.size();
        if (i & 1) swap(dp[sz - 1].x, dp[sz - 1].y);
        break;
      }
    }
    n = x - 1;
  }
  
  // Place checks here to avoid checking inside tight loops
  check_get_invocation_count(get_invocation_count, 10000);
  check_getcnt_invocation_count(getcnt_invocation_count, 1000);
  check_dp_size(dp.size(), 1000); // Arbitrary thresholds
  check_cnt_updates(cnt_update_count, 10000);

  ll ans = -1;
  for (auto it : cnt) {
    if (it.second >= k) ans = max(ans, it.first);
  }
  cout << ans << "\n";
  return 0;
}
```

### Explanation of Integrations

- **`get_invocation_count`** and **`getcnt_invocation_count`** are counters that track how many times the `get()` and `getcnt()` functions are invoked. These are checked after the loop, ensuring that the program aborts if the invocations exceed a reasonable threshold.
- **`dp.size()`** is checked outside the loops to ensure the size of `dp` does not grow too large, which would cause inefficiencies.
- **`cnt_update_count`** tracks how many updates to the `cnt` map occur, ensuring the program aborts if updates exceed a predetermined limit. This helps identify inefficiency in data manipulation.

