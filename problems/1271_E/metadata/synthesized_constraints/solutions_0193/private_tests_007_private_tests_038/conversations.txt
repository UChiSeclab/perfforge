system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

At first, let's define function f(x) as follows: $$$ \begin{matrix} f(x) & = & \left\{ \begin{matrix} x/2 & \mbox{if } x  is even \\\ x - 1 & \mbox{otherwise } \end{matrix} \right. \end{matrix} $$$

We can see that if we choose some value v and will apply function f to it, then apply f to f(v), and so on, we'll eventually get 1. Let's write down all values we get in this process in a list and denote this list as path(v). For example, path(1) = [1], path(15) = [15, 14, 7, 6, 3, 2, 1], path(32) = [32, 16, 8, 4, 2, 1].

Let's write all lists path(x) for every x from 1 to n. The question is next: what is the maximum value y such that y is contained in at least k different lists path(x)?

Formally speaking, you need to find maximum y such that \left| \{ x ~|~ 1 ≤ x ≤ n, y ∈ path(x) \} \right| ≥ k.

Input

The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^{18}).

Output

Print the only integer — the maximum value that is contained in at least k paths.

Examples

Input


11 3


Output


5


Input


11 6


Output


4


Input


20 20


Output


1


Input


14 5


Output


6


Input


1000000 100


Output


31248

Note

In the first example, the answer is 5, since 5 occurs in path(5), path(10) and path(11).

In the second example, the answer is 4, since 4 occurs in path(4), path(5), path(8), path(9), path(10) and path(11).

In the third example n = k, so the answer is 1, since 1 is the only number occuring in all paths for integers from 1 to 20.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  long long(n), (k);
  scanf("%lld%lld", &(n), &(k));
  ;
  long long n2 = n;
  vector<long long> vec;
  while (n) {
    vec.push_back(n);
    if (n - 1 > 0) vec.push_back(n - 1);
    n /= 2;
  }
  long long maxi = 1;
  auto allok = [&](long long v) {
    long long mi = v, ma = (v % 2) ? v : v + 1;
    long long c = ma - mi + 1;
    while (ma <= n2) {
      mi *= 2;
      ma = 2 * ma + 1;
      if (mi < n2) c += min(ma, n2) - mi + 1;
    }
    return c >= k;
  };
  for (auto i : vec) {
    while (i <= n2) {
      if (allok(i)) maxi = max(maxi, i);
      i *= 2;
    }
  }
  printf("%lld\n", maxi);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

769845965585325522 1


(G.2) Fast Input

1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long long(n), (k); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%lld%lld", &(n), &(k)); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  long long n2 = n; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> vec; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  while (n) { /* line 9 slow_hit_count: 61, fast_hit_count: 2 */
    vec.push_back(n); /* line 10 slow_hit_count: 60, fast_hit_count: 1 */
    if (n - 1 > 0) vec.push_back(n - 1); /* line 11 slow_hit_count: 60, fast_hit_count: 1 */
    n /= 2; /* line 12 slow_hit_count: 60, fast_hit_count: 1 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  long long maxi = 1; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  auto allok = [&](long long v) { /* line 15 slow_hit_count: 3601, fast_hit_count: 1 */
    long long mi = v, ma = (v % 2) ? v : v + 1; /* line 16 slow_hit_count: 3601, fast_hit_count: 1 */
    long long c = ma - mi + 1; /* line 17 slow_hit_count: 3601, fast_hit_count: 1 */
    while (ma <= n2) { /* line 18 slow_hit_count: 77279, fast_hit_count: 2 */
      mi *= 2; /* line 19 slow_hit_count: 73678, fast_hit_count: 1 */
      ma = 2 * ma + 1; /* line 20 slow_hit_count: 73678, fast_hit_count: 1 */
      if (mi < n2) c += min(ma, n2) - mi + 1; /* line 21 slow_hit_count: 73678, fast_hit_count: 1 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    return c >= k; /* line 23 slow_hit_count: 3601, fast_hit_count: 1 */
  }; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto i : vec) { /* line 25 slow_hit_count: 120, fast_hit_count: 2 */
    while (i <= n2) { /* line 26 slow_hit_count: 3720, fast_hit_count: 2 */
      if (allok(i)) maxi = max(maxi, i); /* line 27 slow_hit_count: 3601, fast_hit_count: 1 */
      i *= 2; /* line 28 slow_hit_count: 3601, fast_hit_count: 1 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", maxi); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the slow performance of the provided C program, let's break down the tasks according to your instructions.

### Phase 1: Identify Expensive or Inefficient Code Segments

**1. Line-Level Hit Count Comparison**

By examining the hit counts, the following observations can be made:
- **Lines 9-12 (while loop)**: The `while (n)` loop executes 61 times for the slow input and only 2 times for the fast input. This indicates that the vector `vec` grows significantly larger for the slow input.
- **Lines 15-23 (allok function)**: The `allok` function is invoked 3601 times with the slow input and only once with the fast input. Within this function:
  - **Line 18 (inner while loop)**: Executes 77279 times for the slow input and only twice for the fast input, suggesting this loop has a significant impact on runtime.
  - **Lines 19-21**: These lines (multiplying and adjusting `mi`, `ma`, and updating `c`) are critical as they are executed tens of thousands of times for the slow input.
- **Lines 25-28 (outer loop)**: The outer loop iterates over the vector `vec`, executing 3720 times for the slow input compared to only twice for the fast input.

**2. Data Structure and Loop Interactions**

- The `vec` vector accumulates elements based on the division of `n` by 2, causing a large number of iterations for large values of `n`.
- The two nested loops (lines 25-28 and within `allok`) exacerbate the issue due to their nature of multiplying `i` and adjusting `mi` and `ma`, especially with large input values of `n`.

### Phase 2: Derive Performance-Characterizing Invariants

**1. Natural Language Performance Invariants**

Based on the analysis, the following invariants describe conditions that trigger slow paths:

- **Invariant #1**: "The program experiences slowdown when the number of elements in the vector `vec` significantly increases. This happens when `n` is large, resulting in numerous elements due to repeated halving until `n` becomes zero. The large size of `vec` leads to increased iterations in subsequent loops."

- **Invariant #2**: "A performance bottleneck occurs when the `allok` function is invoked excessively due to a large number of elements in `vec`. The high frequency of function calls results in repeated and costly computations, especially with large initial `n` values."

- **Invariant #3**: "Nested loops in the `allok` function become inefficient when the calculated range (`mi` to `ma`) covers a significant portion of `n2`, leading to a high number of iterations. This is particularly noticeable when `n` is close to its maximum constraint."

**2. Thresholds and Conditions**

- While exact numbers from the slow input are avoided, we can infer that when `n` is large (close to the upper constraint of `10^{18}`), the inefficiencies become pronounced.
- The conditions primarily relate to the growth of the `vec` vector and the repeated calls to the `allok` function, both of which are exacerbated when `n` is large and requires many halving operations.

These invariants should assist in diagnosing and potentially optimizing the program for handling large input values efficiently, ensuring that similar performance degradation is detected and addressed in future scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
At first, let's define function f(x) as follows: $$$ \begin{matrix} f(x) & = & \left\{ \begin{matrix} x/2 & \mbox{if } x  is even \\\ x - 1 & \mbox{otherwise } \end{matrix} \right. \end{matrix} $$$

We can see that if we choose some value v and will apply function f to it, then apply f to f(v), and so on, we'll eventually get 1. Let's write down all values we get in this process in a list and denote this list as path(v). For example, path(1) = [1], path(15) = [15, 14, 7, 6, 3, 2, 1], path(32) = [32, 16, 8, 4, 2, 1].

Let's write all lists path(x) for every x from 1 to n. The question is next: what is the maximum value y such that y is contained in at least k different lists path(x)?

Formally speaking, you need to find maximum y such that \left| \{ x ~|~ 1 ≤ x ≤ n, y ∈ path(x) \} \right| ≥ k.

Input

The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^{18}).

Output

Print the only integer — the maximum value that is contained in at least k paths.

Examples

Input


11 3


Output


5


Input


11 6


Output


4


Input


20 20


Output


1


Input


14 5


Output


6


Input


1000000 100


Output


31248

Note

In the first example, the answer is 5, since 5 occurs in path(5), path(10) and path(11).

In the second example, the answer is 4, since 4 occurs in path(4), path(5), path(8), path(9), path(10) and path(11).

In the third example n = k, so the answer is 1, since 1 is the only number occuring in all paths for integers from 1 to 20.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checkers

Let's translate each invariant into C++ checker code:

1. **Invariant #1: Vector Size**
   - "The program experiences slowdown when the number of elements in the vector `vec` significantly increases."

   ```cpp
   void check_vector_size_invariant(const vector<long long>& vec) {
       if (vec.size() > 100000) { // Arbitrarily chosen large threshold
           cerr << "Warning: Performance bottleneck - vector 'vec' too large!" << endl;
           abort();
       }
   }
   ```

2. **Invariant #2: Function Calls**
   - "A performance bottleneck occurs when the `allok` function is invoked excessively."

   ```cpp
   void check_function_call_invariant(int callCount) {
       if (callCount > 1000000) { // Arbitrarily chosen large threshold
           cerr << "Warning: Performance bottleneck - 'allok' function called excessively!" << endl;
           abort();
       }
   }
   ```

3. **Invariant #3: Nested Loop Iterations**
   - "Nested loops in the `allok` function become inefficient when the calculated range covers a significant portion of `n2`."

   ```cpp
   void check_nested_loop_invariant(long long mi, long long ma, long long n2) {
       if (ma - mi > n2 / 10) { // Arbitrarily chosen threshold as a fraction of n2
           cerr << "Warning: Performance bottleneck - inefficient nested loop range!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Now, integrate these checkers into the original C++ program to detect performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for vector size
void check_vector_size_invariant(const vector<long long>& vec) {
    if (vec.size() > 100000) { // Arbitrarily chosen large threshold
        cerr << "Warning: Performance bottleneck - vector 'vec' too large!" << endl;
        abort();
    }
}

// Checker for excessive function calls
void check_function_call_invariant(int callCount) {
    if (callCount > 1000000) { // Arbitrarily chosen large threshold
        cerr << "Warning: Performance bottleneck - 'allok' function called excessively!" << endl;
        abort();
    }
}

// Checker for inefficient nested loop range
void check_nested_loop_invariant(long long mi, long long ma, long long n2) {
    if (ma - mi > n2 / 10) { // Arbitrarily chosen threshold as a fraction of n2
        cerr << "Warning: Performance bottleneck - inefficient nested loop range!" << endl;
        abort();
    }
}

int main() {
    long long(n), (k);
    scanf("%lld%lld", &(n), &(k));
    long long n2 = n;
    vector<long long> vec;

    while (n) {
        vec.push_back(n);
        if (n - 1 > 0) vec.push_back(n - 1);
        n /= 2;
    }

    // Check vector size invariant after the vector is populated
    check_vector_size_invariant(vec);

    long long maxi = 1;
    int functionCallCount = 0; // To count calls to allok

    auto allok = [&](long long v) {
        functionCallCount++;
        long long mi = v, ma = (v % 2) ? v : v + 1;
        long long c = ma - mi + 1;
        while (ma <= n2) {
            mi *= 2;
            ma = 2 * ma + 1;

            // Check nested loop invariant inside the loop
            check_nested_loop_invariant(mi, ma, n2);

            if (mi < n2) c += min(ma, n2) - mi + 1;
        }
        return c >= k;
    };

    for (auto i : vec) {
        while (i <= n2) {
            if (allok(i)) maxi = max(maxi, i);
            i *= 2;
        }
    }

    // Check function call invariant after the loop
    check_function_call_invariant(functionCallCount);

    printf("%lld\n", maxi);
    return 0;
}
```

### Explanation of Integration

1. **Vector Size Checker**: Placed immediately after the `vec` vector is populated to catch excessive growth early.
2. **Function Call Checker**: Counts calls to `allok` and checks after all potential calls to detect excessive function invocations.
3. **Nested Loop Checker**: Placed within the `allok` function's nested loop to detect inefficient loop ranges during execution.

These checkers are strategically placed to monitor specific conditions that could lead to performance bottlenecks without adding overhead to tight loops.

