system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The zombies are gathering in their secret lair! Heidi will strike hard to destroy them once and for all. But there is a little problem... Before she can strike, she needs to know where the lair is. And the intel she has is not very good.

Heidi knows that the lair can be represented as a rectangle on a lattice, with sides parallel to the axes. Each vertex of the polygon occupies an integer point on the lattice. For each cell of the lattice, Heidi can check the level of Zombie Contamination. This level is an integer between 0 and 4, equal to the number of corners of the cell that are inside or on the border of the rectangle.

As a test, Heidi wants to check that her Zombie Contamination level checker works. Given the output of the checker, Heidi wants to know whether it could have been produced by a single non-zero area rectangular-shaped lair (with axis-parallel sides). <image>

Input

The first line of each test case contains one integer N, the size of the lattice grid (5 ≤ N ≤ 50). The next N lines each contain N characters, describing the level of Zombie Contamination of each cell in the lattice. Every character of every line is a digit between 0 and 4.

Cells are given in the same order as they are shown in the picture above: rows go in the decreasing value of y coordinate, and in one row cells go in the order of increasing x coordinate. This means that the first row corresponds to cells with coordinates (1, N), ..., (N, N) and the last row corresponds to cells with coordinates (1, 1), ..., (N, 1).

Output

The first line of the output should contain Yes if there exists a single non-zero area rectangular lair with corners on the grid for which checking the levels of Zombie Contamination gives the results given in the input, and No otherwise.

Example

Input

6
000000
000000
012100
024200
012100
000000


Output

Yes

Note

The lair, if it exists, has to be rectangular (that is, have corners at some grid points with coordinates (x1, y1), (x1, y2), (x2, y1), (x2, y2)), has a non-zero area and be contained inside of the grid (that is, 0 ≤ x1 < x2 ≤ N, 0 ≤ y1 < y2 ≤ N), and result in the levels of Zombie Contamination as reported in the input.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma comment(linker, "/STACK:256000000")
using namespace std;
mt19937 ggen;
int n;
int f[500][500];
int nf[500][500];
int u[500][500];
int timer;
vector<pair<int, int> > ones;
vector<pair<int, int> > cand;
int sm = 0;
void inc(int x, int y) {
  if (x < 0 || y < 0 || x >= n || y >= n) return;
  if (u[x][y] != timer) {
    cand.push_back(pair<int, int>(x, y));
    nf[x][y] = 0;
    u[x][y] = timer;
  }
  nf[x][y]++;
}
bool check(int x1, int yy1, int x2, int y2) {
  if (x1 < 0 || x1 > n || x2 < 0 || x2 > n || yy1 < 0 || yy1 > n || y2 < 0 ||
      y2 > n)
    return false;
  if (x1 >= x2 || yy1 >= y2) return false;
  memset(nf, 0, sizeof nf);
  cand.clear();
  timer++;
  for (int i = x1; i <= x2; i++) {
    for (int j = yy1; j <= y2; j++) {
      inc(i, j);
      inc(i, j - 1);
      inc(i - 1, j);
      inc(i - 1, j - 1);
    }
  }
  int ssm = 0;
  timer++;
  for (int i = 0; i < (int)cand.size(); i++) {
    int x = cand[i].first;
    int y = cand[i].second;
    if (u[x][y] == timer) continue;
    u[x][y] = timer;
    if (f[x][y] != nf[x][y]) return false;
    ssm += nf[x][y];
  }
  return (sm == ssm);
}
void print_nf() {
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) cout << nf[i][j];
    cout << '\n';
  }
}
void solve() {
  cin >> n;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      char c;
      cin >> c;
      f[i][j] = c - '0';
      sm += f[i][j];
      if (f[i][j]) ones.push_back(pair<int, int>(i, j));
    }
  }
  sort(ones.begin(), ones.end());
  if (ones.size() == 0) {
    cout << "No";
    return;
  }
  int vars = 0;
  int x1 = ((int)(1e9) + 1337), x2 = -((int)(1e9) + 1337),
      yy1 = ((int)(1e9) + 1337), y2 = -((int)(1e9) + 1337);
  for (int i = 0; i < (int)ones.size(); i++) {
    x1 = min(x1, ones[i].first);
    x2 = max(x2, ones[i].first);
    yy1 = min(yy1, ones[i].second);
    y2 = max(y2, ones[i].second);
  }
  if (x1 - x2 == 0 || yy1 - y2 == 0) {
    cout << "No";
    return;
  }
  for (int i = -3; i <= 3; i++) {
    for (int j = -3; j <= 3; j++) {
      for (int ii = -3; ii <= 3; ii++) {
        for (int jj = -3; jj <= 3; jj++) {
          if (check(x1 + i, yy1 + j, x2 + ii, y2 + jj)) {
            vars++;
          }
        }
      }
    }
  }
  if (vars > 0)
    cout << "Yes";
  else
    cout << "No";
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  srand(1313);
  ggen = mt19937(13);
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8
00000100
10000000
01210000
02420000
01210000
00000000
00000000
00000000


(G.2) Fast Input

8
00000000
10000000
01210000
02420000
01210000
00000000
00000000
00000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma comment(linker, "/STACK:256000000") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
mt19937 ggen; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int f[500][500]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int nf[500][500]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int u[500][500]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int timer; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int> > ones; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int> > cand; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int sm = 0; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
void inc(int x, int y) { /* line 13 slow_hit_count: 47616, fast_hit_count: 29400 */
  if (x < 0 || y < 0 || x >= n || y >= n) return; /* line 14 slow_hit_count: 47616, fast_hit_count: 29400 */
  if (u[x][y] != timer) { /* line 15 slow_hit_count: 43845, fast_hit_count: 27202 */
    cand.push_back(pair<int, int>(x, y)); /* line 16 slow_hit_count: 15318, fast_hit_count: 10086 */
    nf[x][y] = 0; /* line 17 slow_hit_count: 15318, fast_hit_count: 10086 */
    u[x][y] = timer; /* line 18 slow_hit_count: 15318, fast_hit_count: 10086 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  nf[x][y]++; /* line 20 slow_hit_count: 43845, fast_hit_count: 27202 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
bool check(int x1, int yy1, int x2, int y2) { /* line 22 slow_hit_count: 2401, fast_hit_count: 2401 */
  if (x1 < 0 || x1 > n || x2 < 0 || x2 > n || yy1 < 0 || yy1 > n || y2 < 0 || /* line 23 slow_hit_count: 2401, fast_hit_count: 2401 */
      y2 > n) /* line 24 slow_hit_count: 784, fast_hit_count: 980 */
    return false; /* line 25 slow_hit_count: 1617, fast_hit_count: 1421 */
  if (x1 >= x2 || yy1 >= y2) return false; /* line 26 slow_hit_count: 784, fast_hit_count: 980 */
  memset(nf, 0, sizeof nf); /* line 27 slow_hit_count: 550, fast_hit_count: 450 */
  cand.clear(); /* line 28 slow_hit_count: 550, fast_hit_count: 450 */
  timer++; /* line 29 slow_hit_count: 550, fast_hit_count: 450 */
  for (int i = x1; i <= x2; i++) { /* line 30 slow_hit_count: 2950, fast_hit_count: 2340 */
    for (int j = yy1; j <= y2; j++) { /* line 31 slow_hit_count: 14304, fast_hit_count: 9240 */
      inc(i, j); /* line 32 slow_hit_count: 11904, fast_hit_count: 7350 */
      inc(i, j - 1); /* line 33 slow_hit_count: 11904, fast_hit_count: 7350 */
      inc(i - 1, j); /* line 34 slow_hit_count: 11904, fast_hit_count: 7350 */
      inc(i - 1, j - 1); /* line 35 slow_hit_count: 11904, fast_hit_count: 7350 */
    } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  int ssm = 0; /* line 38 slow_hit_count: 550, fast_hit_count: 450 */
  timer++; /* line 39 slow_hit_count: 550, fast_hit_count: 450 */
  for (int i = 0; i < (int)cand.size(); i++) { /* line 40 slow_hit_count: 657, fast_hit_count: 525 */
    int x = cand[i].first; /* line 41 slow_hit_count: 656, fast_hit_count: 524 */
    int y = cand[i].second; /* line 42 slow_hit_count: 656, fast_hit_count: 524 */
    if (u[x][y] == timer) continue; /* line 43 slow_hit_count: 656, fast_hit_count: 524 */
    u[x][y] = timer; /* line 44 slow_hit_count: 656, fast_hit_count: 524 */
    if (f[x][y] != nf[x][y]) return false; /* line 45 slow_hit_count: 656, fast_hit_count: 524 */
    ssm += nf[x][y]; /* line 46 slow_hit_count: 107, fast_hit_count: 75 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  return (sm == ssm); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
void print_nf() { /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = 0; j < n; j++) cout << nf[i][j]; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    cout << '\n'; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 58 slow_hit_count: 9, fast_hit_count: 9 */
    for (int j = 0; j < n; j++) { /* line 59 slow_hit_count: 72, fast_hit_count: 72 */
      char c; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      cin >> c; /* line 61 slow_hit_count: 64, fast_hit_count: 64 */
      f[i][j] = c - '0'; /* line 62 slow_hit_count: 64, fast_hit_count: 64 */
      sm += f[i][j]; /* line 63 slow_hit_count: 64, fast_hit_count: 64 */
      if (f[i][j]) ones.push_back(pair<int, int>(i, j)); /* line 64 slow_hit_count: 64, fast_hit_count: 64 */
    } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  sort(ones.begin(), ones.end()); /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  if (ones.size() == 0) { /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "No"; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  int vars = 0; /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  int x1 = ((int)(1e9) + 1337), x2 = -((int)(1e9) + 1337), /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
      yy1 = ((int)(1e9) + 1337), y2 = -((int)(1e9) + 1337); /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (int)ones.size(); i++) { /* line 75 slow_hit_count: 12, fast_hit_count: 11 */
    x1 = min(x1, ones[i].first); /* line 76 slow_hit_count: 11, fast_hit_count: 10 */
    x2 = max(x2, ones[i].first); /* line 77 slow_hit_count: 11, fast_hit_count: 10 */
    yy1 = min(yy1, ones[i].second); /* line 78 slow_hit_count: 11, fast_hit_count: 10 */
    y2 = max(y2, ones[i].second); /* line 79 slow_hit_count: 11, fast_hit_count: 10 */
  } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  if (x1 - x2 == 0 || yy1 - y2 == 0) { /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "No"; /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = -3; i <= 3; i++) { /* line 85 slow_hit_count: 8, fast_hit_count: 8 */
    for (int j = -3; j <= 3; j++) { /* line 86 slow_hit_count: 56, fast_hit_count: 56 */
      for (int ii = -3; ii <= 3; ii++) { /* line 87 slow_hit_count: 392, fast_hit_count: 392 */
        for (int jj = -3; jj <= 3; jj++) { /* line 88 slow_hit_count: 2744, fast_hit_count: 2744 */
          if (check(x1 + i, yy1 + j, x2 + ii, y2 + jj)) { /* line 89 slow_hit_count: 2401, fast_hit_count: 2401 */
            vars++; /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  if (vars > 0) /* line 96 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "Yes"; /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "No"; /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 102 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 103 slow_hit_count: 1, fast_hit_count: 1 */
  srand(1313); /* line 104 slow_hit_count: 1, fast_hit_count: 1 */
  ggen = mt19937(13); /* line 105 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 106 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 107 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 108 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

By comparing the hit counts from the slow and fast inputs, we can identify the following potential performance bottlenecks:

1. **Function `inc`:** The `inc` function is called significantly more times in the slow input (47,616 times) compared to the fast input (29,400 times). This indicates that the loops invoking `inc` are executing more iterations in the slow case.
   
2. **Nested Loop Structure (`check` function):** Within the `check` function, the nested loops for `i`, `j`, `ii`, and `jj` cause the repeated invocation of the `inc` function. The variables `x1`, `yy1`, `x2`, and `y2` are adjusted in a range of -3 to 3, which creates a highly repetitive pattern that can lead to inefficiency, especially when the candidate rectangle coordinates cover a large area with many candidate points.
   
3. **Line 40 in `check`:** The line `for (int i = 0; i < (int)cand.size(); i++)` is hit significantly more times in the slow case (657 vs. 525), suggesting that the candidate list `cand` grows larger for the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants:

1. **Invariant on Candidate Points:**
   - **Natural Language:** "If the list of candidate points grows large, especially when the suspected rectangle's area is large, performance might degrade significantly due to repeated checks over a wide area."
   - **Reasoning:** The number of candidate points (`cand.size()`) affects the loop in `check` where each candidate point is verified, causing a slowdown with a larger candidate set.

2. **Invariant on Nested Loop Iterations:**
   - **Natural Language:** "When the algorithm checks over a larger area for potential rectangles, causing multiple nested loops to iterate extensively, the number of operations increases significantly, leading to slower performance."
   - **Reasoning:** The `check` function uses nested loops that iterate over potential rectangle corners, and the inefficiency grows with the range of indices being checked, especially when the rectangle and surrounding areas are large.

3. **Invariant on Zombie Contamination Levels:**
   - **Natural Language:** "If the grid contains widespread non-zero contamination levels, especially with many points having contamination level 1, the increased number of candidate checks could slow down execution considerably."
   - **Reasoning:** The presence of many level 1 contamination points can increase the complexity of the search space, leading to more checks and validations.

4. **Invariant on Edge Case Areas:**
   - **Natural Language:** "Rectangles near the borders of the grid or those spanning widely across the grid may induce inefficient boundary checks that can result in unnecessary computations."
   - **Reasoning:** Boundary conditions on coordinate checks (`x1`, `x2`, `yy1`, `y2`) contribute to the inefficiency if the suspected rectangle encompasses boundary or large areas.

These invariants abstract away from specific input values and instead focus on conditions that lead to computational complexity, aiding in detecting scenarios that would likely trigger inefficiencies in similar contexts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The zombies are gathering in their secret lair! Heidi will strike hard to destroy them once and for all. But there is a little problem... Before she can strike, she needs to know where the lair is. And the intel she has is not very good.

Heidi knows that the lair can be represented as a rectangle on a lattice, with sides parallel to the axes. Each vertex of the polygon occupies an integer point on the lattice. For each cell of the lattice, Heidi can check the level of Zombie Contamination. This level is an integer between 0 and 4, equal to the number of corners of the cell that are inside or on the border of the rectangle.

As a test, Heidi wants to check that her Zombie Contamination level checker works. Given the output of the checker, Heidi wants to know whether it could have been produced by a single non-zero area rectangular-shaped lair (with axis-parallel sides). <image>

Input

The first line of each test case contains one integer N, the size of the lattice grid (5 ≤ N ≤ 50). The next N lines each contain N characters, describing the level of Zombie Contamination of each cell in the lattice. Every character of every line is a digit between 0 and 4.

Cells are given in the same order as they are shown in the picture above: rows go in the decreasing value of y coordinate, and in one row cells go in the order of increasing x coordinate. This means that the first row corresponds to cells with coordinates (1, N), ..., (N, N) and the last row corresponds to cells with coordinates (1, 1), ..., (N, 1).

Output

The first line of the output should contain Yes if there exists a single non-zero area rectangular lair with corners on the grid for which checking the levels of Zombie Contamination gives the results given in the input, and No otherwise.

Example

Input

6
000000
000000
012100
024200
012100
000000


Output

Yes

Note

The lair, if it exists, has to be rectangular (that is, have corners at some grid points with coordinates (x1, y1), (x1, y2), (x2, y1), (x2, y2)), has a non-zero area and be contained inside of the grid (that is, 0 ≤ x1 < x2 ≤ N, 0 ≤ y1 < y2 ≤ N), and result in the levels of Zombie Contamination as reported in the input.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Let's translate each of the previously identified invariants into C++ code snippets that trigger an alert when specific performance bottlenecks are detected.

1. **Checking the Size of the Candidate List:**
   - This invariant checks if the size of the `cand` list grows beyond a certain threshold, indicating inefficiency due to extensive candidate checks.

```cpp
void check_candidate_size_invariant(size_t candidateSize) {
    if (candidateSize > 1000) { // Threshold chosen based on reasonable expectation for n <= 50
        cerr << "Warning: Candidate size invariant triggered - too many candidate points!" << endl;
        abort();
    }
}
```

2. **Checking Nested Loop Iterations:**
   - This invariant checks if the nested loops iterate over a large area, which can lead to performance degradation.

```cpp
void check_nested_loop_invariant(int x1, int x2, int yy1, int y2) {
    int area = (x2 - x1 + 1) * (y2 - yy1 + 1);
    if (area > 400) { // Threshold based on the maximum grid size n*n = 50*50
        cerr << "Warning: Nested loop invariant triggered - large area checked!" << endl;
        abort();
    }
}
```

3. **Checking the Distribution of Level 1 Contamination Points:**
   - This invariant checks if a large number of contamination level 1 points exist, which could slow the algorithm.

```cpp
void check_contamination_level_invariant(size_t levelOneCount) {
    if (levelOneCount > 100) { // Arbitrary high threshold for testing
        cerr << "Warning: Contamination level invariant triggered - excessive level 1 points!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checkers into the Original Program

Now we integrate these checks into the original C++ code provided:

```cpp
#include <bits/stdc++.h>
#pragma comment(linker, "/STACK:256000000")
using namespace std;

mt19937 ggen;
int n;
int f[500][500];
int nf[500][500];
int u[500][500];
int timer;
vector<pair<int, int> > ones;
vector<pair<int, int> > cand;
int sm = 0;

// Function to check candidate size invariant
void check_candidate_size_invariant(size_t candidateSize) {
    if (candidateSize > 1000) {
        cerr << "Warning: Candidate size invariant triggered - too many candidate points!" << endl;
        abort();
    }
}

// Function to check nested loop invariant
void check_nested_loop_invariant(int x1, int x2, int yy1, int y2) {
    int area = (x2 - x1 + 1) * (y2 - yy1 + 1);
    if (area > 400) {
        cerr << "Warning: Nested loop invariant triggered - large area checked!" << endl;
        abort();
    }
}

// Function to check contamination level invariant
void check_contamination_level_invariant(size_t levelOneCount) {
    if (levelOneCount > 100) {
        cerr << "Warning: Contamination level invariant triggered - excessive level 1 points!" << endl;
        abort();
    }
}

void inc(int x, int y) {
    if (x < 0 || y < 0 || x >= n || y >= n) return;
    if (u[x][y] != timer) {
        cand.push_back(pair<int, int>(x, y));
        nf[x][y] = 0;
        u[x][y] = timer;
    }
    nf[x][y]++;
}

bool check(int x1, int yy1, int x2, int y2) {
    if (x1 < 0 || x1 > n || x2 < 0 || x2 > n || yy1 < 0 || yy1 > n || y2 < 0 || y2 > n)
        return false;
    if (x1 >= x2 || yy1 >= y2) return false;

    // Check the nested loop invariant
    check_nested_loop_invariant(x1, x2, yy1, y2);

    memset(nf, 0, sizeof nf);
    cand.clear();
    timer++;
    for (int i = x1; i <= x2; i++) {
        for (int j = yy1; j <= y2; j++) {
            inc(i, j);
            inc(i, j - 1);
            inc(i - 1, j);
            inc(i - 1, j - 1);
        }
    }
    int ssm = 0;
    timer++;
    for (int i = 0; i < (int)cand.size(); i++) {
        int x = cand[i].first;
        int y = cand[i].second;
        if (u[x][y] == timer) continue;
        u[x][y] = timer;
        if (f[x][y] != nf[x][y]) return false;
        ssm += nf[x][y];
    }
    // Check the candidate size invariant
    check_candidate_size_invariant(cand.size());
    return (sm == ssm);
}

void solve() {
    cin >> n;
    int levelOneCount = 0;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            char c;
            cin >> c;
            f[i][j] = c - '0';
            sm += f[i][j];
            if (f[i][j]) ones.push_back(pair<int, int>(i, j));
            if (f[i][j] == 1) levelOneCount++;
        }
    }

    // Check the contamination level invariant
    check_contamination_level_invariant(levelOneCount);

    sort(ones.begin(), ones.end());
    if (ones.size() == 0) {
        cout << "No";
        return;
    }
    int vars = 0;
    int x1 = ((int)(1e9) + 1337), x2 = -((int)(1e9) + 1337),
        yy1 = ((int)(1e9) + 1337), y2 = -((int)(1e9) + 1337);

    for (int i = 0; i < (int)ones.size(); i++) {
        x1 = min(x1, ones[i].first);
        x2 = max(x2, ones[i].first);
        yy1 = min(yy1, ones[i].second);
        y2 = max(y2, ones[i].second);
    }
    if (x1 - x2 == 0 || yy1 - y2 == 0) {
        cout << "No";
        return;
    }
    for (int i = -3; i <= 3; i++) {
        for (int j = -3; j <= 3; j++) {
            for (int ii = -3; ii <= 3; ii++) {
                for (int jj = -3; jj <= 3; jj++) {
                    if (check(x1 + i, yy1 + j, x2 + ii, y2 + jj)) {
                        vars++;
                    }
                }
            }
        }
    }
    if (vars > 0)
        cout << "Yes";
    else
        cout << "No";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    srand(1313);
    ggen = mt19937(13);
    solve();
    return 0;
}
```

### Explanation

- **Candidate Size Check:** `check_candidate_size_invariant` is called after filling the `cand` list to ensure it doesn't grow too large and degrade performance.
  
- **Nested Loop Check:** `check_nested_loop_invariant` is called within `check` to ensure the area computed isn't too large, preventing excessive iteration.
  
- **Contamination Level Check:** `check_contamination_level_invariant` is called in `solve` to ensure the number of level 1 contamination points is not excessive, slowing down processing.

These checks help identify potential performance bottlenecks dynamically during execution, ensuring the program remains within efficient operational bounds.

