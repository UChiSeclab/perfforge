system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Once upon a time in the Kingdom of Far Far Away lived Sir Lancelot, the chief Royal General. He was very proud of his men and he liked to invite the King to come and watch drill exercises which demonstrated the fighting techniques and tactics of the squad he was in charge of. But time went by and one day Sir Lancelot had a major argument with the Fairy Godmother (there were rumors that the argument occurred after the general spoke badly of the Godmother's flying techniques. That seemed to hurt the Fairy Godmother very deeply). 

As the result of the argument, the Godmother put a rather strange curse upon the general. It sounded all complicated and quite harmless: "If the squared distance between some two soldiers equals to 5, then those soldiers will conflict with each other!"

The drill exercises are held on a rectangular n × m field, split into nm square 1 × 1 segments for each soldier. Thus, the square of the distance between the soldiers that stand on squares (x1, y1) and (x2, y2) equals exactly (x1 - x2)2 + (y1 - y2)2. Now not all nm squad soldiers can participate in the drill exercises as it was before the Fairy Godmother's curse. Unless, of course, the general wants the soldiers to fight with each other or even worse... For example, if he puts a soldier in the square (2, 2), then he cannot put soldiers in the squares (1, 4), (3, 4), (4, 1) and (4, 3) — each of them will conflict with the soldier in the square (2, 2).

Your task is to help the general. You are given the size of the drill exercise field. You are asked to calculate the maximum number of soldiers that can be simultaneously positioned on this field, so that no two soldiers fall under the Fairy Godmother's curse.

Input

The single line contains space-separated integers n and m (1 ≤ n, m ≤ 1000) that represent the size of the drill exercise field.

Output

Print the desired maximum number of warriors.

Examples

Input

2 4


Output

4

Input

3 4


Output

6

Note

In the first sample test Sir Lancelot can place his 4 soldiers on the 2 × 4 court as follows (the soldiers' locations are marked with gray circles on the scheme):

<image>

In the second sample test he can place 6 soldiers on the 3 × 4 site in the following manner:

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
typedef struct d3point {
  long double x;
  long double y;
  long double z;
  d3point(int arg1, int arg2, int arg3) {
    x = arg1;
    y = arg2;
    z = arg3;
  }
} d3point;
const double eps = 1e-15;
const int maxN = 1 * 10000 + 10, mod = (int)1e9 + 7;
long long chooseM(int, int);
void primeM(int);
long long powerM(int, int);
long double distanceM(d3point, d3point);
int gcdM(int, int);
int n, m;
vector<int> v[maxN];
bool mark[maxN];
bool color[maxN];
int cot[2];
void dfsm(int i, bool c) {
  mark[i] = 1;
  color[i] = c;
  ++cot[c];
  for (int j = 0; j < v[i].size(); ++j)
    if (!mark[v[i][j]]) dfsm(v[i][j], 1 - c);
}
int main(void) {
  ios_base::sync_with_stdio(0);
  cin >> n >> m;
  int p = 0;
  if (m < 10 || n < 10) {
    for (int i = 0; i < n - 2; ++i)
      for (int j = 0; j < m - 1; ++j)
        v[i * m + j].push_back((i + 2) * m + j + 1),
            v[(i + 2) * m + j + 1].push_back(i * m + j);
    for (int i = 0; i < n - 1; ++i)
      for (int j = 0; j < m - 2; ++j)
        v[i * m + j].push_back((i + 1) * m + j + 2),
            v[(i + 1) * m + j + 2].push_back(i * m + j);
    for (int i = 1; i < n; ++i)
      for (int j = 0; j < m - 2; ++j)
        v[i * m + j].push_back((i - 1) * m + j + 2),
            v[(i - 1) * m + j + 2].push_back(i * m + j);
    for (int i = 2; i < n; ++i)
      for (int j = 0; j < m - 1; ++j)
        v[i * m + j].push_back((i - 2) * m + j + 1),
            v[(i - 2) * m + j + 1].push_back(i * m + j);
    for (int i = 0; i < m * n; ++i) {
      if (!mark[i]) {
        cot[0] = 0;
        cot[1] = 0;
        dfsm(i, 0);
        p += max(cot[0], cot[1]);
      }
    }
  } else
    p = m * n / 2 + (m * n) % 2;
  cout << p;
  return 0;
}
long long chooseM(int arg1, int arg2) {
  long long tmp1 = 1, tmp2 = 1;
  if (arg2 > arg1 / 2) arg2 = arg1 - arg2;
  for (int i = 1; i <= arg2; ++i) {
    tmp1 = (tmp1 * i) % mod;
    tmp2 = (tmp2 * (arg1 - i + 1)) % mod;
  }
  return tmp2 * powerM(tmp1, mod - 2);
}
void primeM(int last) {
  bool isNotPrime[maxN] = {};
  int minPrime[maxN];
  vector<int> prime;
  for (int i = 2; i < last; ++i)
    if (!isNotPrime[i]) {
      prime.push_back(i);
      for (int j = 2; j < last / i + 1; ++j) {
        isNotPrime[j * i] = 1;
        minPrime[i * j] = i;
      }
    }
  prime.push_back(last);
}
long double distanceM(d3point d1, d3point d2) {
  return sqrt(pow(d1.x - d2.x, 2) + pow(d1.y - d2.y, 2) + pow(d1.z - d2.z, 2));
}
long long powerM(int arg1, int arg2) {
  if (arg2 == 0) return 1;
  long long pow = powerM(arg1, arg2 / 2);
  pow = (pow * pow) % mod;
  if (arg2 % 2 == 1) pow = (pow * arg1) % mod;
  return pow;
}
int gcdM(int arg1, int arg2) {
  if (arg1 < arg2) swap(arg1, arg2);
  while (0 < arg2) {
    arg1 -= (arg1 / arg2) * arg2;
    swap(arg1, arg2);
  }
  return arg1;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

997 4


(G.2) Fast Input

997 997


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
typedef struct d3point { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  long double x; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  long double y; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  long double z; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  d3point(int arg1, int arg2, int arg3) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    x = arg1; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    y = arg2; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    z = arg3; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
} d3point; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
const double eps = 1e-15; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
const int maxN = 1 * 10000 + 10, mod = (int)1e9 + 7; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
long long chooseM(int, int); /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
void primeM(int); /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
long long powerM(int, int); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
long double distanceM(d3point, d3point); /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int gcdM(int, int); /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> v[maxN]; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
bool mark[maxN]; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
bool color[maxN]; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
int cot[2]; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
void dfsm(int i, bool c) { /* line 25 slow_hit_count: 3988, fast_hit_count: 0 */
  mark[i] = 1; /* line 26 slow_hit_count: 3988, fast_hit_count: 0 */
  color[i] = c; /* line 27 slow_hit_count: 3988, fast_hit_count: 0 */
  ++cot[c]; /* line 28 slow_hit_count: 3988, fast_hit_count: 0 */
  for (int j = 0; j < v[i].size(); ++j) /* line 29 slow_hit_count: 23896, fast_hit_count: 0 */
    if (!mark[v[i][j]]) dfsm(v[i][j], 1 - c); /* line 30 slow_hit_count: 19908, fast_hit_count: 0 */
} /* line 31 slow_hit_count: 3988, fast_hit_count: 0 */
int main(void) { /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  int p = 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  if (m < 10 || n < 10) { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i < n - 2; ++i) /* line 37 slow_hit_count: 996, fast_hit_count: 0 */
      for (int j = 0; j < m - 1; ++j) /* line 38 slow_hit_count: 3980, fast_hit_count: 0 */
        v[i * m + j].push_back((i + 2) * m + j + 1), /* line 39 slow_hit_count: 2985, fast_hit_count: 0 */
            v[(i + 2) * m + j + 1].push_back(i * m + j); /* line 40 slow_hit_count: 2985, fast_hit_count: 0 */
    for (int i = 0; i < n - 1; ++i) /* line 41 slow_hit_count: 997, fast_hit_count: 0 */
      for (int j = 0; j < m - 2; ++j) /* line 42 slow_hit_count: 2988, fast_hit_count: 0 */
        v[i * m + j].push_back((i + 1) * m + j + 2), /* line 43 slow_hit_count: 1992, fast_hit_count: 0 */
            v[(i + 1) * m + j + 2].push_back(i * m + j); /* line 44 slow_hit_count: 1992, fast_hit_count: 0 */
    for (int i = 1; i < n; ++i) /* line 45 slow_hit_count: 997, fast_hit_count: 0 */
      for (int j = 0; j < m - 2; ++j) /* line 46 slow_hit_count: 2988, fast_hit_count: 0 */
        v[i * m + j].push_back((i - 1) * m + j + 2), /* line 47 slow_hit_count: 1992, fast_hit_count: 0 */
            v[(i - 1) * m + j + 2].push_back(i * m + j); /* line 48 slow_hit_count: 1992, fast_hit_count: 0 */
    for (int i = 2; i < n; ++i) /* line 49 slow_hit_count: 996, fast_hit_count: 0 */
      for (int j = 0; j < m - 1; ++j) /* line 50 slow_hit_count: 3980, fast_hit_count: 0 */
        v[i * m + j].push_back((i - 2) * m + j + 1), /* line 51 slow_hit_count: 2985, fast_hit_count: 0 */
            v[(i - 2) * m + j + 1].push_back(i * m + j); /* line 52 slow_hit_count: 2985, fast_hit_count: 0 */
    for (int i = 0; i < m * n; ++i) { /* line 53 slow_hit_count: 3989, fast_hit_count: 0 */
      if (!mark[i]) { /* line 54 slow_hit_count: 3988, fast_hit_count: 0 */
        cot[0] = 0; /* line 55 slow_hit_count: 1, fast_hit_count: 0 */
        cot[1] = 0; /* line 56 slow_hit_count: 1, fast_hit_count: 0 */
        dfsm(i, 0); /* line 57 slow_hit_count: 1, fast_hit_count: 0 */
        p += max(cot[0], cot[1]); /* line 58 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 60 slow_hit_count: 1, fast_hit_count: 0 */
  } else /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    p = m * n / 2 + (m * n) % 2; /* line 62 slow_hit_count: 0, fast_hit_count: 1 */
  cout << p; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
long long chooseM(int arg1, int arg2) { /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  long long tmp1 = 1, tmp2 = 1; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  if (arg2 > arg1 / 2) arg2 = arg1 - arg2; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= arg2; ++i) { /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    tmp1 = (tmp1 * i) % mod; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    tmp2 = (tmp2 * (arg1 - i + 1)) % mod; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  return tmp2 * powerM(tmp1, mod - 2); /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
void primeM(int last) { /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  bool isNotPrime[maxN] = {}; /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  int minPrime[maxN]; /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> prime; /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 2; i < last; ++i) /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
    if (!isNotPrime[i]) { /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
      prime.push_back(i); /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = 2; j < last / i + 1; ++j) { /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
        isNotPrime[j * i] = 1; /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
        minPrime[i * j] = i; /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
  prime.push_back(last); /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
long double distanceM(d3point d1, d3point d2) { /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  return sqrt(pow(d1.x - d2.x, 2) + pow(d1.y - d2.y, 2) + pow(d1.z - d2.z, 2)); /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
long long powerM(int arg1, int arg2) { /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  if (arg2 == 0) return 1; /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  long long pow = powerM(arg1, arg2 / 2); /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  pow = (pow * pow) % mod; /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  if (arg2 % 2 == 1) pow = (pow * arg1) % mod; /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
  return pow; /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
int gcdM(int arg1, int arg2) { /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
  if (arg1 < arg2) swap(arg1, arg2); /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
  while (0 < arg2) { /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
    arg1 -= (arg1 / arg2) * arg2; /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
    swap(arg1, arg2); /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
  return arg1; /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 106 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the given C program based on the problem statement and hit count information, we need to identify where the code is inefficient and why it performs differently on the "slow" and "fast" inputs.  

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Function and Line-Level Hit Counts:**
   - The function `dfsm` and the loop structure surrounding it in `main()` are highly utilized in the slow input run but not in the fast input run.
   - Lines 25-31 in the `dfsm` function have significant hit counts for the slow input, indicating heavy usage of this depth-first search (DFS) mechanism.
   - Lines 37-57 in the `main()` function, specifically the nested loops and the DFS initiation, contribute heavily to the slow input.

2. **Loop and Data Structure Interaction:**
   - The code constructs and processes a graph using adjacency lists stored in vector `v`. This graph mimics the constraints based on the square distance rule.
   - The DFS (`dfsm`) is applied to traverse connected components in this graph.
   - The extensive hit counts in the loops (lines 37-52) imply that for the "slow" input, a substantial portion of the grid is being processed in a way that is computationally expensive.

3. **Conditions Triggering Slow Path:**
   - The code enters a different logic path depending on the grid size (conditions `m < 10 || n < 10`). The slow input satisfies this condition, leading to graph construction and DFS traversal.
   - The adjacency list `v` is filled with possible conflicting positions, and the DFS explores these, which is expensive given the input constraints.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants that describe conditions under which the program might slow down:

1. **Graph Construction and DFS Traversal:**
   - **Natural Language Invariant:** When one of the field dimensions is below 10 (i.e., `n < 10` or `m < 10`), the algorithm constructs a graph representing possible conflicts and performs DFS on the grid. This path involves creating and processing many edges, leading to a computationally expensive traversal.
   - **Abstracted Threshold:** The condition `min(n, m) < 10` triggers the graph logic, where the DFS explores a large number of nodes and connections.

2. **Grid Loop Overhead:**
   - **Natural Language Invariant:** If the grid is small in one dimension but long in another (e.g., `n` or `m` is close to 1000 while the other is small), the nested loops used for graph edges construction become extensive and costly.
   - **Abstracted Threshold:** When one dimension is large (near the maximum constraint of 1000) and the other is small, the number of operations increases significantly.

### Performance Invariants Summary

1. **When `min(n, m) < 10`, the DFS and graph construction incurs heavy computational overhead due to extensive node processing and traversal.**

2. **When one dimension of the grid is small and the other is large, the loops for constructing edges can become a significant performance bottleneck, leading to slow program execution.**

These invariants help identify scenarios leading to performance degradation without relying on specific input values, ensuring robust detection across various inputs within the constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Once upon a time in the Kingdom of Far Far Away lived Sir Lancelot, the chief Royal General. He was very proud of his men and he liked to invite the King to come and watch drill exercises which demonstrated the fighting techniques and tactics of the squad he was in charge of. But time went by and one day Sir Lancelot had a major argument with the Fairy Godmother (there were rumors that the argument occurred after the general spoke badly of the Godmother's flying techniques. That seemed to hurt the Fairy Godmother very deeply). 

As the result of the argument, the Godmother put a rather strange curse upon the general. It sounded all complicated and quite harmless: "If the squared distance between some two soldiers equals to 5, then those soldiers will conflict with each other!"

The drill exercises are held on a rectangular n × m field, split into nm square 1 × 1 segments for each soldier. Thus, the square of the distance between the soldiers that stand on squares (x1, y1) and (x2, y2) equals exactly (x1 - x2)2 + (y1 - y2)2. Now not all nm squad soldiers can participate in the drill exercises as it was before the Fairy Godmother's curse. Unless, of course, the general wants the soldiers to fight with each other or even worse... For example, if he puts a soldier in the square (2, 2), then he cannot put soldiers in the squares (1, 4), (3, 4), (4, 1) and (4, 3) — each of them will conflict with the soldier in the square (2, 2).

Your task is to help the general. You are given the size of the drill exercise field. You are asked to calculate the maximum number of soldiers that can be simultaneously positioned on this field, so that no two soldiers fall under the Fairy Godmother's curse.

Input

The single line contains space-separated integers n and m (1 ≤ n, m ≤ 1000) that represent the size of the drill exercise field.

Output

Print the desired maximum number of warriors.

Examples

Input

2 4


Output

4

Input

3 4


Output

6

Note

In the first sample test Sir Lancelot can place his 4 soldiers on the 2 × 4 court as follows (the soldiers' locations are marked with gray circles on the scheme):

<image>

In the second sample test he can place 6 soldiers on the 3 × 4 site in the following manner:

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

In this phase, I will translate the previously derived natural language performance invariants into C++ code. 

#### Invariant 1: Graph Construction and DFS Traversal
- **Natural Language Invariant:** When one of the field dimensions is below 10 (i.e., `n < 10` or `m < 10`), the algorithm constructs a graph representing possible conflicts and performs DFS on the grid. This can be computationally expensive.
  
```cpp
void check_graph_construction_invariant(int n, int m) {
    if (n < 10 || m < 10) {
        cerr << "Warning: Performance bottleneck condition triggered - graph construction and DFS traversal!" << endl;
        abort();
    }
}
```

#### Invariant 2: Grid Loop Overhead
- **Natural Language Invariant:** If one dimension of the grid is small and the other is large, the nested loops for constructing edges can become a bottleneck.
  
```cpp
void check_grid_loop_invariant(int n, int m) {
    if ((n < 10 && m > 900) || (m < 10 && n > 900)) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive grid loop overhead!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now, let's integrate these checks into the C++ program. The checks will be placed right after reading the input values, as that's the earliest point we can decide on the path the program will take.

Here is the full instrumented program with the performance checks included:

```cpp
#include <bits/stdc++.h>
using namespace std;

typedef struct d3point {
  long double x;
  long double y;
  long double z;
  d3point(int arg1, int arg2, int arg3) {
    x = arg1;
    y = arg2;
    z = arg3;
  }
} d3point;

const double eps = 1e-15;
const int maxN = 1 * 10000 + 10, mod = (int)1e9 + 7;
long long chooseM(int, int);
void primeM(int);
long long powerM(int, int);
long double distanceM(d3point, d3point);
int gcdM(int, int);
int n, m;
vector<int> v[maxN];
bool mark[maxN];
bool color[maxN];
int cot[2];

void dfsm(int i, bool c) {
  mark[i] = 1;
  color[i] = c;
  ++cot[c];
  for (int j = 0; j < v[i].size(); ++j)
    if (!mark[v[i][j]]) dfsm(v[i][j], 1 - c);
}

void check_graph_construction_invariant(int n, int m) {
    if (n < 10 || m < 10) {
        cerr << "Warning: Performance bottleneck condition triggered - graph construction and DFS traversal!" << endl;
        abort();
    }
}

void check_grid_loop_invariant(int n, int m) {
    if ((n < 10 && m > 900) || (m < 10 && n > 900)) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive grid loop overhead!" << endl;
        abort();
    }
}

int main(void) {
  ios_base::sync_with_stdio(0);
  cin >> n >> m;

  // Performance checks
  check_graph_construction_invariant(n, m);
  check_grid_loop_invariant(n, m);

  int p = 0;
  if (m < 10 || n < 10) {
    for (int i = 0; i < n - 2; ++i)
      for (int j = 0; j < m - 1; ++j)
        v[i * m + j].push_back((i + 2) * m + j + 1),
            v[(i + 2) * m + j + 1].push_back(i * m + j);
    for (int i = 0; i < n - 1; ++i)
      for (int j = 0; j < m - 2; ++j)
        v[i * m + j].push_back((i + 1) * m + j + 2),
            v[(i + 1) * m + j + 2].push_back(i * m + j);
    for (int i = 1; i < n; ++i)
      for (int j = 0; j < m - 2; ++j)
        v[i * m + j].push_back((i - 1) * m + j + 2),
            v[(i - 1) * m + j + 2].push_back(i * m + j);
    for (int i = 2; i < n; ++i)
      for (int j = 0; j < m - 1; ++j)
        v[i * m + j].push_back((i - 2) * m + j + 1),
            v[(i - 2) * m + j + 1].push_back(i * m + j);
    for (int i = 0; i < m * n; ++i) {
      if (!mark[i]) {
        cot[0] = 0;
        cot[1] = 0;
        dfsm(i, 0);
        p += max(cot[0], cot[1]);
      }
    }
  } else
    p = m * n / 2 + (m * n) % 2;
  cout << p;
  return 0;
}

long long chooseM(int arg1, int arg2) {
  long long tmp1 = 1, tmp2 = 1;
  if (arg2 > arg1 / 2) arg2 = arg1 - arg2;
  for (int i = 1; i <= arg2; ++i) {
    tmp1 = (tmp1 * i) % mod;
    tmp2 = (tmp2 * (arg1 - i + 1)) % mod;
  }
  return tmp2 * powerM(tmp1, mod - 2);
}

void primeM(int last) {
  bool isNotPrime[maxN] = {};
  int minPrime[maxN];
  vector<int> prime;
  for (int i = 2; i < last; ++i)
    if (!isNotPrime[i]) {
      prime.push_back(i);
      for (int j = 2; j < last / i + 1; ++j) {
        isNotPrime[j * i] = 1;
        minPrime[i * j] = i;
      }
    }
  prime.push_back(last);
}

long double distanceM(d3point d1, d3point d2) {
  return sqrt(pow(d1.x - d2.x, 2) + pow(d1.y - d2.y, 2) + pow(d1.z - d2.z, 2));
}

long long powerM(int arg1, int arg2) {
  if (arg2 == 0) return 1;
  long long pow = powerM(arg1, arg2 / 2);
  pow = (pow * pow) % mod;
  if (arg2 % 2 == 1) pow = (pow * arg1) % mod;
  return pow;
}

int gcdM(int arg1, int arg2) {
  if (arg1 < arg2) swap(arg1, arg2);
  while (0 < arg2) {
    arg1 -= (arg1 / arg2) * arg2;
    swap(arg1, arg2);
  }
  return arg1;
}
```

### Explanation

- **Performance Checks:** The two invariant checks are placed after the input is read (`cin >> n >> m;`) to ensure we immediately capture conditions that lead to performance degradation.
- **Abort on Trigger:** Each check will abort the program if the conditions are met, helping identify performance bottlenecks during testing or fuzzing.
- **Comments:** Included comments describe which bottleneck each check is intended to detect. This helps future developers understand the purpose of these checks easily.

