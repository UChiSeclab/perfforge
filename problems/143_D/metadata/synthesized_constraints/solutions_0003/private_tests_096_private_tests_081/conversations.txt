system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Once upon a time in the Kingdom of Far Far Away lived Sir Lancelot, the chief Royal General. He was very proud of his men and he liked to invite the King to come and watch drill exercises which demonstrated the fighting techniques and tactics of the squad he was in charge of. But time went by and one day Sir Lancelot had a major argument with the Fairy Godmother (there were rumors that the argument occurred after the general spoke badly of the Godmother's flying techniques. That seemed to hurt the Fairy Godmother very deeply). 

As the result of the argument, the Godmother put a rather strange curse upon the general. It sounded all complicated and quite harmless: "If the squared distance between some two soldiers equals to 5, then those soldiers will conflict with each other!"

The drill exercises are held on a rectangular n × m field, split into nm square 1 × 1 segments for each soldier. Thus, the square of the distance between the soldiers that stand on squares (x1, y1) and (x2, y2) equals exactly (x1 - x2)2 + (y1 - y2)2. Now not all nm squad soldiers can participate in the drill exercises as it was before the Fairy Godmother's curse. Unless, of course, the general wants the soldiers to fight with each other or even worse... For example, if he puts a soldier in the square (2, 2), then he cannot put soldiers in the squares (1, 4), (3, 4), (4, 1) and (4, 3) — each of them will conflict with the soldier in the square (2, 2).

Your task is to help the general. You are given the size of the drill exercise field. You are asked to calculate the maximum number of soldiers that can be simultaneously positioned on this field, so that no two soldiers fall under the Fairy Godmother's curse.

Input

The single line contains space-separated integers n and m (1 ≤ n, m ≤ 1000) that represent the size of the drill exercise field.

Output

Print the desired maximum number of warriors.

Examples

Input

2 4


Output

4

Input

3 4


Output

6

Note

In the first sample test Sir Lancelot can place his 4 soldiers on the 2 × 4 court as follows (the soldiers' locations are marked with gray circles on the scheme):

<image>

In the second sample test he can place 6 soldiers on the 3 × 4 site in the following manner:

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, m, ans, i, j;
int main() {
  scanf("%d%d", &n, &m);
  if (n == 1 || m == 1)
    printf("%d", max(n, m));
  else if (n == 2 || m == 2) {
    ans = max(n, m) / 4;
    ans = ans * 2;
    if (max(n, m) % 4 == 3)
      ans += 2;
    else
      ans += max(n, m) % 4;
    ans *= 2;
    printf("%d", ans);
  } else {
    for (i = 1; i <= n; i++)
      for (j = 1; j <= m; j++)
        if ((i % 2 == 1 && j % 2 == 1) || (i % 2 == 0 && j % 2 == 0)) ans++;
    printf("%d", ans);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000 1000


(G.2) Fast Input

2 1000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, ans, i, j; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d", &n, &m); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  if (n == 1 || m == 1) /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
    printf("%d", max(n, m)); /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  else if (n == 2 || m == 2) { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    ans = max(n, m) / 4; /* line 9 slow_hit_count: 0, fast_hit_count: 1 */
    ans = ans * 2; /* line 10 slow_hit_count: 0, fast_hit_count: 1 */
    if (max(n, m) % 4 == 3) /* line 11 slow_hit_count: 0, fast_hit_count: 1 */
      ans += 2; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
      ans += max(n, m) % 4; /* line 14 slow_hit_count: 0, fast_hit_count: 1 */
    ans *= 2; /* line 15 slow_hit_count: 0, fast_hit_count: 1 */
    printf("%d", ans); /* line 16 slow_hit_count: 0, fast_hit_count: 1 */
  } else { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    for (i = 1; i <= n; i++) /* line 18 slow_hit_count: 1001, fast_hit_count: 0 */
      for (j = 1; j <= m; j++) /* line 19 slow_hit_count: 1001000, fast_hit_count: 0 */
        if ((i % 2 == 1 && j % 2 == 1) || (i % 2 == 0 && j % 2 == 0)) ans++; /* line 20 slow_hit_count: 1000000, fast_hit_count: 0 */
    printf("%d", ans); /* line 21 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze why the program runs slowly for the "slow" input compared to the "fast" input, let's break down the problem using the provided hit count data.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - **Lines with Significant Hits in the Slow Input**:
     - Line 18: `for (i = 1; i <= n; i++)` has 1001 hits.
     - Line 19: `for (j = 1; j <= m; j++)` has 1,001,000 hits.
     - Line 20: `if ((i % 2 == 1 && j % 2 == 1) || (i % 2 == 0 && j % 2 == 0))` has 1,000,000 hits.

2. **Inference**:
   - The nested loops (lines 18 and 19) iterate over each combination of `i` and `j` within the field dimensions, leading to a time complexity of \(O(n \times m)\). For large `n` and `m`, such as 1000, this becomes problematic.
   - The condition at line 20 is checked for every cell in the grid, which is a substantial computational overhead given the input sizes.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, let's derive some natural language invariants that characterize when the program enters a slow execution path:

1. **Nested Loop Over Large Grid**:
   - Natural language invariant: "When both dimensions of the field are large, approaching the upper constraint, the nested loops cause the execution time to increase significantly due to the quadratic growth in operations."

2. **Efficient Special Case Handling**:
   - Natural language invariant: "The program can execute more efficiently if it handles smaller dimensions or special cases (like one or two rows/columns) without iterating over every cell."

3. **Optimizing the Inner Condition**:
   - Natural language invariant: "If the logic inside the nested loops can be reduced or optimized, particularly for larger grid sizes, it could alleviate the performance bottleneck."

### Suggestions for Performance Conditions

To help detect these slow paths and optimize future use cases, you can implement checks or logs to flag when the program might be entering a slow execution path:

```cpp
void check_grid_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: grid_size_invariant triggered - large field dimensions causing slow execution." << endl;
        abort();
    }
}

// Usage after reading n and m
check_grid_size_invariant(n > 500 && m > 500); // Arbitrary, but large enough threshold
```

This set of invariants and the associated considerations can help guide optimization or flag potential slow execution paths when dealing with large field sizes in the context of the problem constraints (e.g., \(n, m \leq 1000\)).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Once upon a time in the Kingdom of Far Far Away lived Sir Lancelot, the chief Royal General. He was very proud of his men and he liked to invite the King to come and watch drill exercises which demonstrated the fighting techniques and tactics of the squad he was in charge of. But time went by and one day Sir Lancelot had a major argument with the Fairy Godmother (there were rumors that the argument occurred after the general spoke badly of the Godmother's flying techniques. That seemed to hurt the Fairy Godmother very deeply). 

As the result of the argument, the Godmother put a rather strange curse upon the general. It sounded all complicated and quite harmless: "If the squared distance between some two soldiers equals to 5, then those soldiers will conflict with each other!"

The drill exercises are held on a rectangular n × m field, split into nm square 1 × 1 segments for each soldier. Thus, the square of the distance between the soldiers that stand on squares (x1, y1) and (x2, y2) equals exactly (x1 - x2)2 + (y1 - y2)2. Now not all nm squad soldiers can participate in the drill exercises as it was before the Fairy Godmother's curse. Unless, of course, the general wants the soldiers to fight with each other or even worse... For example, if he puts a soldier in the square (2, 2), then he cannot put soldiers in the squares (1, 4), (3, 4), (4, 1) and (4, 3) — each of them will conflict with the soldier in the square (2, 2).

Your task is to help the general. You are given the size of the drill exercise field. You are asked to calculate the maximum number of soldiers that can be simultaneously positioned on this field, so that no two soldiers fall under the Fairy Godmother's curse.

Input

The single line contains space-separated integers n and m (1 ≤ n, m ≤ 1000) that represent the size of the drill exercise field.

Output

Print the desired maximum number of warriors.

Examples

Input

2 4


Output

4

Input

3 4


Output

6

Note

In the first sample test Sir Lancelot can place his 4 soldiers on the 2 × 4 court as follows (the soldiers' locations are marked with gray circles on the scheme):

<image>

In the second sample test he can place 6 soldiers on the 3 × 4 site in the following manner:

<image>

Solution (C++ code):
{solution}


assistant: Sure, let's implement the performance-checking code based on the performance-characterizing invariants derived previously. We'll do this in two phases as described.

### Phase 3: Implement the Natural Language Invariants as C++ Checks

1. **Invariant: Nested Loop Over Large Grid**
   - This invariant checks if both `n` and `m` are large, leading to potential performance issues due to the nested loops.

```cpp
void check_grid_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: grid_size_invariant triggered - large field dimensions causing slow execution." << endl;
        abort();
    }
}
```

2. **Invariant: Efficient Special Case Handling**
   - This invariant doesn't require additional code as it is inherently part of the performance optimization logic.

3. **Invariant: Optimizing the Inner Loop Condition**
   - This invariant also doesn't need a separate check, as it is a suggestion for code optimization rather than a runtime condition.

### Phase 4: Integrate the Checks into the Original C++ Program

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check grid size for potential performance bottleneck
void check_grid_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: grid_size_invariant triggered - large field dimensions causing slow execution." << endl;
        abort();
    }
}

int main() {
    int n, m, ans = 0, i, j;
    scanf("%d%d", &n, &m);

    // Check for potential performance bottleneck due to large grid size
    check_grid_size_invariant(n > 500 && m > 500); // Arbitrary threshold for demonstration

    if (n == 1 || m == 1) {
        printf("%d", max(n, m));
    } else if (n == 2 || m == 2) {
        ans = max(n, m) / 4;
        ans = ans * 2;
        if (max(n, m) % 4 == 3)
            ans += 2;
        else
            ans += max(n, m) % 4;
        ans *= 2;
        printf("%d", ans);
    } else {
        for (i = 1; i <= n; i++)
            for (j = 1; j <= m; j++)
                if ((i % 2 == 1 && j % 2 == 1) || (i % 2 == 0 && j % 2 == 0)) ans++;
        printf("%d", ans);
    }
    return 0;
}
```

### Explanation

- **Grid Size Check**: The `check_grid_size_invariant` function is called after reading the input values for `n` and `m`. It checks if both dimensions are greater than 500, which is an arbitrary threshold indicating potential performance issues due to the nested loops.
- The checker function aborts the program execution if the condition is met, providing a warning message about the potential performance bottleneck.

This integration points out the potential bottleneck without adding significant overhead to the program's runtime, as the check is done outside of the critical loops.

