system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Once upon a time in the Kingdom of Far Far Away lived Sir Lancelot, the chief Royal General. He was very proud of his men and he liked to invite the King to come and watch drill exercises which demonstrated the fighting techniques and tactics of the squad he was in charge of. But time went by and one day Sir Lancelot had a major argument with the Fairy Godmother (there were rumors that the argument occurred after the general spoke badly of the Godmother's flying techniques. That seemed to hurt the Fairy Godmother very deeply). 

As the result of the argument, the Godmother put a rather strange curse upon the general. It sounded all complicated and quite harmless: "If the squared distance between some two soldiers equals to 5, then those soldiers will conflict with each other!"

The drill exercises are held on a rectangular n × m field, split into nm square 1 × 1 segments for each soldier. Thus, the square of the distance between the soldiers that stand on squares (x1, y1) and (x2, y2) equals exactly (x1 - x2)2 + (y1 - y2)2. Now not all nm squad soldiers can participate in the drill exercises as it was before the Fairy Godmother's curse. Unless, of course, the general wants the soldiers to fight with each other or even worse... For example, if he puts a soldier in the square (2, 2), then he cannot put soldiers in the squares (1, 4), (3, 4), (4, 1) and (4, 3) — each of them will conflict with the soldier in the square (2, 2).

Your task is to help the general. You are given the size of the drill exercise field. You are asked to calculate the maximum number of soldiers that can be simultaneously positioned on this field, so that no two soldiers fall under the Fairy Godmother's curse.

Input

The single line contains space-separated integers n and m (1 ≤ n, m ≤ 1000) that represent the size of the drill exercise field.

Output

Print the desired maximum number of warriors.

Examples

Input

2 4


Output

4

Input

3 4


Output

6

Note

In the first sample test Sir Lancelot can place his 4 soldiers on the 2 × 4 court as follows (the soldiers' locations are marked with gray circles on the scheme):

<image>

In the second sample test he can place 6 soldiers on the 3 × 4 site in the following manner:

<image>

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using ll = long long;
int dx[] = {-2, -2, -1, -1, 1, 1, 2, 2};
int dy[] = {-1, +1, -2, +2, -2, +2, -1, +1};
struct HopcroftKarp {
  std::vector<std::vector<ll>> graph;
  std::vector<ll> level, match;
  std::vector<bool> used, vv;
  HopcroftKarp(ll n, ll m) : graph(n), match(m, -1), used(n) {}
  void add_edge(ll u, ll v) { graph[u].push_back(v); }
  void bfs() {
    level.assign(graph.size(), -1);
    std::queue<ll> q;
    for (int i = 0; i < graph.size(); i++) {
      if (!used[i]) {
        q.push(i);
        level[i] = 0;
      }
    }
    while (!q.empty()) {
      ll u = q.front();
      q.pop();
      for (auto v : graph[u]) {
        ll c = match[v];
        if (level[c] == -1 && c >= 0) {
          level[c] = level[u] + 1;
          q.push(c);
        }
      }
    }
  }
  bool dfs(ll u) {
    vv[u] = true;
    for (auto v : graph[u]) {
      ll c = match[v];
      if (c < 0 || (!vv[c] && level[c] == level[u] + 1 && dfs(c))) {
        match[v] = u;
        used[u] = true;
        return true;
      }
    }
    return false;
  }
  ll bipartite_matching() {
    ll ret = 0LL;
    while (1) {
      bfs();
      vv.assign(graph.size(), false);
      ll flow = 0LL;
      for (int i = 0; i < graph.size(); i++) {
        if (!used[i] && dfs(i)) {
          flow++;
        }
      }
      if (flow == 0) {
        return ret;
      }
      ret += flow;
    }
  }
  void print() {
    for (int i = 0; i < match.size(); i++) {
      if (match[i] >= 0) {
        std::cout << match[i] << " " << i << std::endl;
      }
    }
  }
};
int main() {
  ll n, m;
  std::cin >> n >> m;
  HopcroftKarp bm(n * m, n * m);
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      for (int k = 0; k < 4; k++) {
        int x = i + dx[k], y = j + dy[k];
        if (0 <= x && x < n && 0 <= y && y < m) {
          if ((i + j) % 2 == 0) {
            bm.add_edge(m * i + j, m * x + y);
          } else {
            bm.add_edge(m * x + y, m * i + j);
          }
        }
      }
    }
  }
  std::cout << n * m - bm.bipartite_matching() << std::endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

997 997


(G.2) Fast Input

997 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int dx[] = {-2, -2, -1, -1, 1, 1, 2, 2}; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int dy[] = {-1, +1, -2, +2, -2, +2, -1, +1}; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
struct HopcroftKarp { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  std::vector<std::vector<ll>> graph; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  std::vector<ll> level, match; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  std::vector<bool> used, vv; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  HopcroftKarp(ll n, ll m) : graph(n), match(m, -1), used(n) {} /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  void add_edge(ll u, ll v) { graph[u].push_back(v); } /* line 10 slow_hit_count: 3964080, fast_hit_count: 0 */
  void bfs() { /* line 11 slow_hit_count: 4, fast_hit_count: 1 */
    level.assign(graph.size(), -1); /* line 12 slow_hit_count: 4, fast_hit_count: 1 */
    std::queue<ll> q; /* line 13 slow_hit_count: 8, fast_hit_count: 2 */
    for (int i = 0; i < graph.size(); i++) { /* line 14 slow_hit_count: 3976040, fast_hit_count: 998 */
      if (!used[i]) { /* line 15 slow_hit_count: 3976036, fast_hit_count: 997 */
        q.push(i); /* line 16 slow_hit_count: 2485274, fast_hit_count: 997 */
        level[i] = 0; /* line 17 slow_hit_count: 2485274, fast_hit_count: 997 */
      } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    while (!q.empty()) { /* line 20 slow_hit_count: 3976040, fast_hit_count: 998 */
      ll u = q.front(); /* line 21 slow_hit_count: 3976036, fast_hit_count: 997 */
      q.pop(); /* line 22 slow_hit_count: 3976036, fast_hit_count: 997 */
      for (auto v : graph[u]) { /* line 23 slow_hit_count: 19832356, fast_hit_count: 997 */
        ll c = match[v]; /* line 24 slow_hit_count: 15856320, fast_hit_count: 0 */
        if (level[c] == -1 && c >= 0) { /* line 25 slow_hit_count: 15856320, fast_hit_count: 0 */
          level[c] = level[u] + 1; /* line 26 slow_hit_count: 1490762, fast_hit_count: 0 */
          q.push(c); /* line 27 slow_hit_count: 1490762, fast_hit_count: 0 */
        } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 4, fast_hit_count: 1 */
  bool dfs(ll u) { /* line 32 slow_hit_count: 3912052, fast_hit_count: 997 */
    vv[u] = true; /* line 33 slow_hit_count: 3912052, fast_hit_count: 997 */
    for (auto v : graph[u]) { /* line 34 slow_hit_count: 17027289, fast_hit_count: 997 */
      ll c = match[v]; /* line 35 slow_hit_count: 13612984, fast_hit_count: 0 */
      if (c < 0 || (!vv[c] && level[c] == level[u] + 1 && dfs(c))) { /* line 36 slow_hit_count: 13612984, fast_hit_count: 0 */
        match[v] = u; /* line 37 slow_hit_count: 497747, fast_hit_count: 0 */
        used[u] = true; /* line 38 slow_hit_count: 497747, fast_hit_count: 0 */
        return true; /* line 39 slow_hit_count: 497747, fast_hit_count: 0 */
      } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    return false; /* line 42 slow_hit_count: 3414305, fast_hit_count: 997 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  ll bipartite_matching() { /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
    ll ret = 0LL; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
    while (1) { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
      bfs(); /* line 47 slow_hit_count: 4, fast_hit_count: 1 */
      vv.assign(graph.size(), false); /* line 48 slow_hit_count: 4, fast_hit_count: 1 */
      ll flow = 0LL; /* line 49 slow_hit_count: 4, fast_hit_count: 1 */
      for (int i = 0; i < graph.size(); i++) { /* line 50 slow_hit_count: 3976040, fast_hit_count: 998 */
        if (!used[i] && dfs(i)) { /* line 51 slow_hit_count: 3976036, fast_hit_count: 997 */
          flow++; /* line 52 slow_hit_count: 497004, fast_hit_count: 0 */
        } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      if (flow == 0) { /* line 55 slow_hit_count: 4, fast_hit_count: 1 */
        return ret; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
      ret += flow; /* line 58 slow_hit_count: 3, fast_hit_count: 0 */
    } /* line 59 slow_hit_count: 3, fast_hit_count: 0 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  void print() { /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < match.size(); i++) { /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
      if (match[i] >= 0) { /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
        std::cout << match[i] << " " << i << std::endl; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  ll n, m; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  std::cin >> n >> m; /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  HopcroftKarp bm(n * m, n * m); /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 73 slow_hit_count: 998, fast_hit_count: 998 */
    for (int j = 0; j < m; j++) { /* line 74 slow_hit_count: 995006, fast_hit_count: 1994 */
      for (int k = 0; k < 4; k++) { /* line 75 slow_hit_count: 4970045, fast_hit_count: 4985 */
        int x = i + dx[k], y = j + dy[k]; /* line 76 slow_hit_count: 3976036, fast_hit_count: 3988 */
        if (0 <= x && x < n && 0 <= y && y < m) { /* line 77 slow_hit_count: 3976036, fast_hit_count: 3988 */
          if ((i + j) % 2 == 0) { /* line 78 slow_hit_count: 3964080, fast_hit_count: 0 */
            bm.add_edge(m * i + j, m * x + y); /* line 79 slow_hit_count: 1982040, fast_hit_count: 0 */
          } else { /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
            bm.add_edge(m * x + y, m * i + j); /* line 81 slow_hit_count: 1982040, fast_hit_count: 0 */
          } /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
  std::cout << n * m - bm.bipartite_matching() << std::endl; /* line 87 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 88 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 89 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identifying Expensive or Inefficient Code Segments

Based on the line-level hit counts provided for both the fast and slow inputs, we can identify the following lines of code as having significantly more hits in the slow run:

1. **Line 10 (`add_edge` function call):** In the slow run, this line is hit 3,964,080 times, indicating heavy use of edge additions to the graph structure. In contrast, it is not hit at all in the fast run.
   
2. **Lines inside `bfs()` and `dfs()` functions (especially lines 23, 24, 25, 26, 27, 34, 35, 36):** These lines show that the BFS and DFS algorithms are called extensively and repeatedly in the slow run. The lines are hit millions of times, whereas they are hit significantly fewer times (or not at all) in the fast run. Notably, lines 24, 25, 35, and 36 are critical as they involve checking and updating matches and levels.

3. **Lines in the nested loops in the `main` function (lines 73, 74, 75):** These loops iterate over the entire grid, constructing the graph by checking possible conflicting positions. The slow run hits these lines a lot more due to the size of the input grid being almost square (997x997), compared to a single-column grid (997x1) in the fast input.

### Phase 2: Performance-Characterizing Invariants

Based on the observations made during Phase 1, here are the natural language statements that describe the conditions under which the program slows down:

1. **Graph Construction Overhead:**
   - *Invariant Description:* "When both dimensions of the grid are large, the construction of the graph becomes computationally expensive due to the dense connections being established between potential soldier positions that conflict."
   - *Trigger Condition:* This condition is triggered when both `n` and `m` are large, leading to a dense bipartite graph construction, especially when both dimensions are closer to their upper limit (e.g., n and m both approaching 1000).

2. **Excessive Use of BFS and DFS:**
   - *Invariant Description:* "In scenarios where the grid is nearly square and large, the BFS and DFS operations used in the Hopcroft-Karp algorithm become the bottleneck due to extensive searching and matching over numerous nodes."
   - *Trigger Condition:* This occurs when the grid dimensions are sufficiently large to cause a high number of potential matches and searches, notably when the area (n * m) is maximized while maintaining a roughly equal distribution between `n` and `m`.

3. **High Edge Count in the Graph:**
   - *Invariant Description:* "If the number of edges added to the graph is high due to dense conflicts, further computations involving these edges slow down the execution, especially affecting the DFS operations."
   - *Trigger Condition:* This is likely when the grid is such that many potential positions for soldiers result in conflicts, maximizing the complexity of the match finding process, notably when `n` and `m` both approach their maximum constraints.

These invariants abstract the conditions under which the algorithm's performance degrades, focusing on structural aspects of the input that lead to inefficiencies in the graph-based approach used in the solution.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Once upon a time in the Kingdom of Far Far Away lived Sir Lancelot, the chief Royal General. He was very proud of his men and he liked to invite the King to come and watch drill exercises which demonstrated the fighting techniques and tactics of the squad he was in charge of. But time went by and one day Sir Lancelot had a major argument with the Fairy Godmother (there were rumors that the argument occurred after the general spoke badly of the Godmother's flying techniques. That seemed to hurt the Fairy Godmother very deeply). 

As the result of the argument, the Godmother put a rather strange curse upon the general. It sounded all complicated and quite harmless: "If the squared distance between some two soldiers equals to 5, then those soldiers will conflict with each other!"

The drill exercises are held on a rectangular n × m field, split into nm square 1 × 1 segments for each soldier. Thus, the square of the distance between the soldiers that stand on squares (x1, y1) and (x2, y2) equals exactly (x1 - x2)2 + (y1 - y2)2. Now not all nm squad soldiers can participate in the drill exercises as it was before the Fairy Godmother's curse. Unless, of course, the general wants the soldiers to fight with each other or even worse... For example, if he puts a soldier in the square (2, 2), then he cannot put soldiers in the squares (1, 4), (3, 4), (4, 1) and (4, 3) — each of them will conflict with the soldier in the square (2, 2).

Your task is to help the general. You are given the size of the drill exercise field. You are asked to calculate the maximum number of soldiers that can be simultaneously positioned on this field, so that no two soldiers fall under the Fairy Godmother's curse.

Input

The single line contains space-separated integers n and m (1 ≤ n, m ≤ 1000) that represent the size of the drill exercise field.

Output

Print the desired maximum number of warriors.

Examples

Input

2 4


Output

4

Input

3 4


Output

6

Note

In the first sample test Sir Lancelot can place his 4 soldiers on the 2 × 4 court as follows (the soldiers' locations are marked with gray circles on the scheme):

<image>

In the second sample test he can place 6 soldiers on the 3 × 4 site in the following manner:

<image>

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants as C++ Checkers

Based on the natural language invariants derived earlier, we will create runtime checkers to detect potential performance bottlenecks in the program.

#### Checker 1: Graph Construction Overhead

```cpp
void check_graph_construction(bool condition) {
    if (condition) {
        std::cerr << "Warning: Performance bottleneck condition triggered - Graph construction overhead due to large grid dimensions." << std::endl;
        abort();
    }
}
```

#### Checker 2: Excessive Use of BFS and DFS

```cpp
void check_bfs_dfs_overuse(bool condition) {
    if (condition) {
        std::cerr << "Warning: Performance bottleneck condition triggered - Excessive use of BFS and DFS on a large grid." << std::endl;
        abort();
    }
}
```

#### Checker 3: High Edge Count in the Graph

```cpp
void check_high_edge_count(bool condition) {
    if (condition) {
        std::cerr << "Warning: Performance bottleneck condition triggered - High edge count in graph causing excessive DFS operations." << std::endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Program

We will now integrate the checkers into the original program at appropriate points to ensure they do not add unnecessary overhead and accurately detect the conditions described.

```cpp
#include <bits/stdc++.h>
using ll = long long;

int dx[] = {-2, -2, -1, -1, 1, 1, 2, 2};
int dy[] = {-1, +1, -2, +2, -2, +2, -1, +1};

void check_graph_construction(bool condition) {
    if (condition) {
        std::cerr << "Warning: Performance bottleneck condition triggered - Graph construction overhead due to large grid dimensions." << std::endl;
        abort();
    }
}

void check_bfs_dfs_overuse(bool condition) {
    if (condition) {
        std::cerr << "Warning: Performance bottleneck condition triggered - Excessive use of BFS and DFS on a large grid." << std::endl;
        abort();
    }
}

void check_high_edge_count(bool condition) {
    if (condition) {
        std::cerr << "Warning: Performance bottleneck condition triggered - High edge count in graph causing excessive DFS operations." << std::endl;
        abort();
    }
}

struct HopcroftKarp {
    std::vector<std::vector<ll>> graph;
    std::vector<ll> level, match;
    std::vector<bool> used, vv;

    HopcroftKarp(ll n, ll m) : graph(n), match(m, -1), used(n) {}

    void add_edge(ll u, ll v) { graph[u].push_back(v); }

    void bfs() {
        level.assign(graph.size(), -1);
        std::queue<ll> q;
        for (int i = 0; i < graph.size(); i++) {
            if (!used[i]) {
                q.push(i);
                level[i] = 0;
            }
        }
        while (!q.empty()) {
            ll u = q.front();
            q.pop();
            for (auto v : graph[u]) {
                ll c = match[v];
                if (level[c] == -1 && c >= 0) {
                    level[c] = level[u] + 1;
                    q.push(c);
                }
            }
        }
    }

    bool dfs(ll u) {
        vv[u] = true;
        for (auto v : graph[u]) {
            ll c = match[v];
            if (c < 0 || (!vv[c] && level[c] == level[u] + 1 && dfs(c))) {
                match[v] = u;
                used[u] = true;
                return true;
            }
        }
        return false;
    }

    ll bipartite_matching() {
        ll ret = 0LL;
        while (1) {
            bfs();
            vv.assign(graph.size(), false);
            ll flow = 0LL;
            for (int i = 0; i < graph.size(); i++) {
                if (!used[i] && dfs(i)) {
                    flow++;
                }
            }
            if (flow == 0) {
                return ret;
            }
            ret += flow;
        }
    }

    void print() {
        for (int i = 0; i < match.size(); i++) {
            if (match[i] >= 0) {
                std::cout << match[i] << " " << i << std::endl;
            }
        }
    }
};

int main() {
    ll n, m;
    std::cin >> n >> m;
    
    // Performance checkers
    check_graph_construction(n > 900 && m > 900);
    check_bfs_dfs_overuse(n * m > 800000);
    check_high_edge_count(n * m * 4 > 3000000);

    HopcroftKarp bm(n * m, n * m);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            for (int k = 0; k < 4; k++) {
                int x = i + dx[k], y = j + dy[k];
                if (0 <= x && x < n && 0 <= y && y < m) {
                    if ((i + j) % 2 == 0) {
                        bm.add_edge(m * i + j, m * x + y);
                    } else {
                        bm.add_edge(m * x + y, m * i + j);
                    }
                }
            }
        }
    }
    std::cout << n * m - bm.bipartite_matching() << std::endl;
    return 0;
}
```

#### Explanation:

- **Graph Construction Check:** This check is placed after input reading because it is based on the grid dimensions, which are the primary factors in determining the potential graph size.
- **BFS/DFS Overuse Check:** This check is also placed after input reading to estimate potential excessive searching behavior due to a large grid area.
- **High Edge Count Check:** Placed similarly to detect if the potential number of edges becomes impractically high.

These checks are strategically positioned to give early warnings about potential performance issues without adding unnecessary overhead within loops.

