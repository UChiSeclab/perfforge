system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya will fancy any number as long as it is an integer power of two. Petya, on the other hand, is very conservative and only likes a single integer p (which may be positive, negative, or zero). To combine their tastes, they invented p-binary numbers of the form 2^x + p, where x is a non-negative integer.

For example, some -9-binary ("minus nine" binary) numbers are: -8 (minus eight), 7 and 1015 (-8=2^0-9, 7=2^4-9, 1015=2^{10}-9).

The boys now use p-binary numbers to represent everything. They now face a problem: given a positive integer n, what's the smallest number of p-binary numbers (not necessarily distinct) they need to represent n as their sum? It may be possible that representation is impossible altogether. Help them solve this problem.

For example, if p=0 we can represent 7 as 2^0 + 2^1 + 2^2.

And if p=-9 we can represent 7 as one number (2^4-9).

Note that negative p-binary numbers are allowed to be in the sum (see the Notes section for an example).

Input

The only line contains two integers n and p (1 ≤ n ≤ 10^9, -1000 ≤ p ≤ 1000).

Output

If it is impossible to represent n as the sum of any number of p-binary numbers, print a single integer -1. Otherwise, print the smallest possible number of summands.

Examples

Input


24 0


Output


2


Input


24 1


Output


3


Input


24 -1


Output


4


Input


4 -7


Output


2


Input


1 1


Output


-1

Note

0-binary numbers are just regular binary powers, thus in the first sample case we can represent 24 = (2^4 + 0) + (2^3 + 0).

In the second sample case, we can represent 24 = (2^4 + 1) + (2^2 + 1) + (2^0 + 1).

In the third sample case, we can represent 24 = (2^4 - 1) + (2^2 - 1) + (2^2 - 1) + (2^2 - 1). Note that repeated summands are allowed.

In the fourth sample case, we can represent 4 = (2^4 - 7) + (2^1 - 7). Note that the second summand is negative, which is allowed.

In the fifth sample case, no representation is possible.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int32_t main() {
  ios_base::sync_with_stdio(false);
  int64_t n, p;
  cin >> n >> p;
  for (int64_t i = 1; i < 1e6; ++i) {
    n -= p;
    if (__builtin_popcount(n) > i) {
      continue;
    }
    if (n < i) {
      continue;
    }
    cout << i;
    return 0;
  }
  cout << -1;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1


(G.2) Fast Input

2 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int64_t n, p; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> p; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int64_t i = 1; i < 1e6; ++i) { /* line 7 slow_hit_count: 1000000, fast_hit_count: 1 */
    n -= p; /* line 8 slow_hit_count: 999999, fast_hit_count: 1 */
    if (__builtin_popcount(n) > i) { /* line 9 slow_hit_count: 999999, fast_hit_count: 1 */
      continue; /* line 10 slow_hit_count: 27, fast_hit_count: 0 */
    } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    if (n < i) { /* line 12 slow_hit_count: 999972, fast_hit_count: 1 */
      continue; /* line 13 slow_hit_count: 999972, fast_hit_count: 0 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    cout << i; /* line 15 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 16 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  cout << -1; /* line 18 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck and derive performance-characterizing invariants, let's break down the provided code and its behavior under the given inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Hit Counts:**

- The main performance difference between the fast and slow inputs is apparent in the loop (lines 7-14). The loop executes 1,000,000 times for the slow input (1 1), but only once for the fast input (2 1).
- The conditions in the loop (lines 9 and 12) are often not satisfied for the slow input, leading to repeated iterations.

**Code Segment Interaction:**

- The code uses a loop to decrement `n` by `p` and checks two conditions involving the `__builtin_popcount` and a simple comparison. The loop continues if these conditions are not met.
- For the slow input, both conditions fail to break the loop early, resulting in near-maximum iterations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, let's derive natural language invariants that might describe conditions resulting in slow execution:

1. **Invariant Related to Loop Execution:**
   - **Natural Language Description:** "When the value of `n` is such that repeated subtraction of `p` rarely satisfies the count of set bits or the condition `n < i`, the loop may iterate many times, causing slow execution."
   - **Reasoning:** This invariant highlights the situation where the operations within each loop iteration do not progress towards a loop exit condition quickly enough, resulting in excessive iterations.

2. **Invariant Related to Input Constraints:**
   - **Natural Language Description:** "When `p` and `n` are such that even after reducing `n` by `p`, the Hamming weight (`popcount`) of `n` remains high relative to the number of iterations, the computation may become unnecessarily prolonged."
   - **Reasoning:** This condition focuses on the inefficiency caused by the relationship between `n`, `p`, and the loop variable `i`. If `n` adjusted by `p` retains too many set bits, the loop continues longer.

3. **Invariant Related to Possible Impossibility:**
   - **Natural Language Description:** "If the conditions for representing `n` using `p`-binary numbers are inherently unsatisfiable, the program may resort to performing many unnecessary operations before concluding it's impossible."
   - **Reasoning:** The loop's structure may lead to extended execution times when the combination of `n` and `p` leads to an unsolvable scenario where no valid decomposition exists.

These invariants aim to encapsulate the situations that lead to slow execution without relying on specific numerical values from the inputs but rather on the general structure and behavior of the code. By observing these patterns, one can anticipate potential performance issues under similar input conditions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya will fancy any number as long as it is an integer power of two. Petya, on the other hand, is very conservative and only likes a single integer p (which may be positive, negative, or zero). To combine their tastes, they invented p-binary numbers of the form 2^x + p, where x is a non-negative integer.

For example, some -9-binary ("minus nine" binary) numbers are: -8 (minus eight), 7 and 1015 (-8=2^0-9, 7=2^4-9, 1015=2^{10}-9).

The boys now use p-binary numbers to represent everything. They now face a problem: given a positive integer n, what's the smallest number of p-binary numbers (not necessarily distinct) they need to represent n as their sum? It may be possible that representation is impossible altogether. Help them solve this problem.

For example, if p=0 we can represent 7 as 2^0 + 2^1 + 2^2.

And if p=-9 we can represent 7 as one number (2^4-9).

Note that negative p-binary numbers are allowed to be in the sum (see the Notes section for an example).

Input

The only line contains two integers n and p (1 ≤ n ≤ 10^9, -1000 ≤ p ≤ 1000).

Output

If it is impossible to represent n as the sum of any number of p-binary numbers, print a single integer -1. Otherwise, print the smallest possible number of summands.

Examples

Input


24 0


Output


2


Input


24 1


Output


3


Input


24 -1


Output


4


Input


4 -7


Output


2


Input


1 1


Output


-1

Note

0-binary numbers are just regular binary powers, thus in the first sample case we can represent 24 = (2^4 + 0) + (2^3 + 0).

In the second sample case, we can represent 24 = (2^4 + 1) + (2^2 + 1) + (2^0 + 1).

In the third sample case, we can represent 24 = (2^4 - 1) + (2^2 - 1) + (2^2 - 1) + (2^2 - 1). Note that repeated summands are allowed.

In the fourth sample case, we can represent 4 = (2^4 - 7) + (2^1 - 7). Note that the second summand is negative, which is allowed.

In the fifth sample case, no representation is possible.

Solution (C++ code):
{solution}


assistant: Let's proceed with implementing the performance-characterizing invariants derived earlier into the C++ code.

### Phase 3: Implement the Invariants as C++ Code Checks

Below are the C++ code snippets for the invariants described in Phase 2. These snippets will check the conditions that might lead to performance bottlenecks.

```cpp
void check_loop_execution_invariant(int64_t n, int64_t p, int64_t i) {
    if (__builtin_popcountll(n) > i && n >= i) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive loop iterations!" << endl;
        abort();
    }
}

void check_popcount_invariant(int64_t n, int64_t p, int64_t i) {
    if (__builtin_popcountll(n) > i) {
        cerr << "Warning: Performance bottleneck condition triggered - high popcount relative to iteration!" << endl;
        abort();
    }
}

void check_impossibility_invariant(int64_t n, int64_t p) {
    if (n < p) {
        cerr << "Warning: Performance bottleneck condition triggered - inherently unsatisfiable scenario!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into Original Code

Now, we'll integrate these checks into the given C++ program. We'll place these checks strategically to avoid adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_loop_execution_invariant(int64_t n, int64_t p, int64_t i) {
    if (__builtin_popcountll(n) > i && n >= i) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive loop iterations!" << endl;
        abort();
    }
}

void check_popcount_invariant(int64_t n, int64_t p, int64_t i) {
    if (__builtin_popcountll(n) > i) {
        cerr << "Warning: Performance bottleneck condition triggered - high popcount relative to iteration!" << endl;
        abort();
    }
}

void check_impossibility_invariant(int64_t n, int64_t p) {
    if (n < p) {
        cerr << "Warning: Performance bottleneck condition triggered - inherently unsatisfiable scenario!" << endl;
        abort();
    }
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    int64_t n, p;
    cin >> n >> p;
    
    // Check for impossible scenario early
    check_impossibility_invariant(n, p);
    
    for (int64_t i = 1; i < 1e6; ++i) {
        n -= p;
        
        // Check potential performance bottlenecks
        check_loop_execution_invariant(n, p, i);
        check_popcount_invariant(n, p, i);
        
        if (__builtin_popcountll(n) > i) {
            continue;
        }
        if (n < i) {
            continue;
        }
        cout << i;
        return 0;
    }
    cout << -1;
}
```

### Explanation

1. **`check_loop_execution_invariant`:** This check ensures that if the loop iterates excessively without satisfying the exit conditions, a warning is triggered.
   
2. **`check_popcount_invariant`:** This check ensures that if the popcount of `n` remains high relative to `i`, indicating potential inefficiency, a warning is triggered.

3. **`check_impossibility_invariant`:** This check is invoked before entering the loop to catch scenarios that are inherently unsatisfiable, preventing unnecessary iterations.

These checks are integrated at points before or during loop iterations to detect and abort on conditions that could cause significant performance degradation.

