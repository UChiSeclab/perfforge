system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Vasya will fancy any number as long as it is an integer power of two. Petya, on the other hand, is very conservative and only likes a single integer p (which may be positive, negative, or zero). To combine their tastes, they invented p-binary numbers of the form 2^x + p, where x is a non-negative integer.

For example, some -9-binary ("minus nine" binary) numbers are: -8 (minus eight), 7 and 1015 (-8=2^0-9, 7=2^4-9, 1015=2^{10}-9).

The boys now use p-binary numbers to represent everything. They now face a problem: given a positive integer n, what's the smallest number of p-binary numbers (not necessarily distinct) they need to represent n as their sum? It may be possible that representation is impossible altogether. Help them solve this problem.

For example, if p=0 we can represent 7 as 2^0 + 2^1 + 2^2.

And if p=-9 we can represent 7 as one number (2^4-9).

Note that negative p-binary numbers are allowed to be in the sum (see the Notes section for an example).

Input

The only line contains two integers n and p (1 ≤ n ≤ 10^9, -1000 ≤ p ≤ 1000).

Output

If it is impossible to represent n as the sum of any number of p-binary numbers, print a single integer -1. Otherwise, print the smallest possible number of summands.

Examples

Input


24 0


Output


2


Input


24 1


Output


3


Input


24 -1


Output


4


Input


4 -7


Output


2


Input


1 1


Output


-1

Note

0-binary numbers are just regular binary powers, thus in the first sample case we can represent 24 = (2^4 + 0) + (2^3 + 0).

In the second sample case, we can represent 24 = (2^4 + 1) + (2^2 + 1) + (2^0 + 1).

In the third sample case, we can represent 24 = (2^4 - 1) + (2^2 - 1) + (2^2 - 1) + (2^2 - 1). Note that repeated summands are allowed.

In the fourth sample case, we can represent 4 = (2^4 - 7) + (2^1 - 7). Note that the second summand is negative, which is allowed.

In the fifth sample case, no representation is possible.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int QQ = 3e5 + 10;
const int maxN = 2e5 + 100;
const int maxM = 3e5 + 10;
const long long oo = 1e18;
const int module = 1e9 + 7;
const long double du = 1e-9;
void doc() {
  freopen(
      "solve"
      ".inp",
      "r", stdin);
  freopen(
      "solve"
      ".out",
      "w", stdout);
}
void solve() {
  long long n, p;
  cin >> n >> p;
  for (int i = 1; i <= 2000000; i++) {
    long long m = n - p * i;
    long long value = 0;
    for (int j = 0; j < 40; j++) {
      if ((m >> j) & 1) value += 1;
    }
    if (value <= i && i <= m) {
      cout << i;
      return;
    }
  }
  cout << -1;
}
int main(int argc, char *argv[]) {
  ios_base::sync_with_stdio(0);
  cin.tie(nullptr);
  cout.tie(nullptr);
  solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1


(G.2) Fast Input

1 0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int QQ = 3e5 + 10; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int maxN = 2e5 + 100; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int maxM = 3e5 + 10; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const long long oo = 1e18; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const int module = 1e9 + 7; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
const long double du = 1e-9; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
void doc() { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  freopen( /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
      "solve" /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
      ".inp", /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
      "r", stdin); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  freopen( /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
      "solve" /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
      ".out", /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
      "w", stdout); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, p; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> p; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 2000000; i++) { /* line 22 slow_hit_count: 2000001, fast_hit_count: 1 */
    long long m = n - p * i; /* line 23 slow_hit_count: 2000000, fast_hit_count: 1 */
    long long value = 0; /* line 24 slow_hit_count: 2000000, fast_hit_count: 1 */
    for (int j = 0; j < 40; j++) { /* line 25 slow_hit_count: 82000000, fast_hit_count: 41 */
      if ((m >> j) & 1) value += 1; /* line 26 slow_hit_count: 80000000, fast_hit_count: 40 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    if (value <= i && i <= m) { /* line 28 slow_hit_count: 2000000, fast_hit_count: 1 */
      cout << i; /* line 29 slow_hit_count: 0, fast_hit_count: 1 */
      return; /* line 30 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  cout << -1; /* line 33 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
int main(int argc, char *argv[]) { /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(nullptr); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 40 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance of the provided C program and identify conditions that lead to slower execution times, let's follow the tasks outlined in Phases 1 and 2. 

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Analysis of Hit Counts:

1. **Outer Loop (Line 22):** 
   - **Slow Input:** Executes 2,000,001 times.
   - **Fast Input:** Executes only once.
   - **Significance:** The outer loop is a major contributor to the slow performance since it iterates a large number of times for the slow input.

2. **Inner Loop (Line 25):**
   - **Slow Input:** Executes 82,000,000 times.
   - **Fast Input:** Executes 41 times.
   - **Significance:** The inner loop, nested within the outer loop, significantly contributes to inefficiency by iterating over 40 bits of `m`, potentially contributing to quadratic complexity with respect to some conditions.

3. **Conditional Check (Line 28):**
   - **Slow Input:** Evaluated 2,000,000 times.
   - **Fast Input:** Evaluated once.
   - **Significance:** This condition fails to satisfy early for the slow input, leading to the maximum iterations in both loops.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following natural language invariants are derived to describe conditions likely causing slow execution:

1. **High Iteration Count in Outer Loop:**
   - **Invariant:** "If the condition to break out of the outer loop (i <= m) is rarely satisfied early in the loop iterations, the algorithm may enter a slow path. Specifically, when the decrement from `p * i` does not rapidly adjust `m` to meet the condition, excessive iterations occur."

2. **Significant Bit Manipulation:**
   - **Invariant:** "When `m` frequently maintains high bit values (leading to many `1s` in the binary representation), the inner loop iterates 40 times for each outer loop iteration. This results in excessive bit checking operations, slowing down the computation."

3. **Unfavorable Relationship Between `n`, `p`, and Loop Variables:**
   - **Invariant:** "If the combination of `n` and `p` results in an `m` value that remains large or negative for many iterations, the program is unable to meet the condition `(value <= i && i <= m)` early, leading to exhaustive execution up to 2,000,000 iterations."

### Conclusion

The condition for breaking the outer loop and the number of bits set in `m` are key determinants of performance. The slow input likely maintains an `m` that remains large or negative for far longer due to the interaction between `p` and the loop index `i`, causing the program to execute a vast number of unnecessary iterations.

These invariants provide insight into potential future inputs that could also trigger slowdowns, by maintaining these unfavorable conditions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Vasya will fancy any number as long as it is an integer power of two. Petya, on the other hand, is very conservative and only likes a single integer p (which may be positive, negative, or zero). To combine their tastes, they invented p-binary numbers of the form 2^x + p, where x is a non-negative integer.

For example, some -9-binary ("minus nine" binary) numbers are: -8 (minus eight), 7 and 1015 (-8=2^0-9, 7=2^4-9, 1015=2^{10}-9).

The boys now use p-binary numbers to represent everything. They now face a problem: given a positive integer n, what's the smallest number of p-binary numbers (not necessarily distinct) they need to represent n as their sum? It may be possible that representation is impossible altogether. Help them solve this problem.

For example, if p=0 we can represent 7 as 2^0 + 2^1 + 2^2.

And if p=-9 we can represent 7 as one number (2^4-9).

Note that negative p-binary numbers are allowed to be in the sum (see the Notes section for an example).

Input

The only line contains two integers n and p (1 ≤ n ≤ 10^9, -1000 ≤ p ≤ 1000).

Output

If it is impossible to represent n as the sum of any number of p-binary numbers, print a single integer -1. Otherwise, print the smallest possible number of summands.

Examples

Input


24 0


Output


2


Input


24 1


Output


3


Input


24 -1


Output


4


Input


4 -7


Output


2


Input


1 1


Output


-1

Note

0-binary numbers are just regular binary powers, thus in the first sample case we can represent 24 = (2^4 + 0) + (2^3 + 0).

In the second sample case, we can represent 24 = (2^4 + 1) + (2^2 + 1) + (2^0 + 1).

In the third sample case, we can represent 24 = (2^4 - 1) + (2^2 - 1) + (2^2 - 1) + (2^2 - 1). Note that repeated summands are allowed.

In the fourth sample case, we can represent 4 = (2^4 - 7) + (2^1 - 7). Note that the second summand is negative, which is allowed.

In the fifth sample case, no representation is possible.

Solution (C++ code):
{solution}


assistant: Let's proceed with implementing the performance-characteristic invariants as runtime checks in C++. 

### Phase 3: Implementing the Invariants as C++ Checks

1. **High Iteration Count in Outer Loop**  
   The outer loop executes up to 2,000,000 times. If `m` remains such that `i` rarely satisfies the condition `i <= m`, we can suspect a bottleneck.

   ```cpp
   void check_outer_loop_invariant(long long m, int i) {
       if (i > m) {
           cerr << "Warning: Performance bottleneck condition in outer loop - excessive iterations!" << endl;
           abort();
       }
   }
   ```

2. **Significant Bit Manipulation**  
   When `m` has many bits set (1s in its binary representation), the inner loop iterates 40 times frequently. We should check if `m` has a high number of bits set often.

   ```cpp
   void check_inner_loop_bit_invariant(long long m) {
       int bitCount = 0;
       for (int j = 0; j < 40; ++j) {
           if ((m >> j) & 1) bitCount++;
       }
       // Assuming a threshold for "high" is more than 20
       if (bitCount > 20) {
           cerr << "Warning: Performance bottleneck condition in inner loop - high bit count in m!" << endl;
           abort();
       }
   }
   ```

3. **Unfavorable Relationship Between `n`, `p`, and Loop Variables**  
   This checks whether the combination of `n`, `p`, and `i` results in an `m` that remains large or negative for many iterations.

   ```cpp
   void check_m_value_invariant(long long m, long long n, long long p, int i) {
       if (m < 0 || m > n) {
           cerr << "Warning: Performance bottleneck due to unfavorable m value!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Propagating and Integrating Checks into the Original Program

Now we will integrate these checks into the original C++ code, placing them strategically to avoid unnecessary overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_outer_loop_invariant(long long m, int i) {
    if (i > m) {
        cerr << "Warning: Performance bottleneck condition in outer loop - excessive iterations!" << endl;
        abort();
    }
}

void check_inner_loop_bit_invariant(long long m) {
    int bitCount = 0;
    for (int j = 0; j < 40; ++j) {
        if ((m >> j) & 1) bitCount++;
    }
    if (bitCount > 20) {
        cerr << "Warning: Performance bottleneck condition in inner loop - high bit count in m!" << endl;
        abort();
    }
}

void check_m_value_invariant(long long m, long long n, long long p, int i) {
    if (m < 0 || m > n) {
        cerr << "Warning: Performance bottleneck due to unfavorable m value!" << endl;
        abort();
    }
}

const int max_iterations = 2000000;

void solve() {
    long long n, p;
    cin >> n >> p;
    for (int i = 1; i <= max_iterations; i++) {
        long long m = n - p * i;
        
        // Insert checks before entering the inner loop
        check_outer_loop_invariant(m, i);
        check_m_value_invariant(m, n, p, i);

        long long value = 0;
        for (int j = 0; j < 40; j++) {
            if ((m >> j) & 1) value += 1;
        }

        // Insert check after calculating the bit value
        check_inner_loop_bit_invariant(m);

        if (value <= i && i <= m) {
            cout << i;
            return;
        }
    }
    cout << -1;
}

int main(int argc, char *argv[]) {
    ios_base::sync_with_stdio(0);
    cin.tie(nullptr);
    cout.tie(nullptr);
    solve();
}
```

### Explanation of Integration:

- Checks are placed strategically before and after significant computational steps to capture potential performance bottlenecks.
- This setup ensures that the checks are not within tight loops directly, thus minimizing the overhead while still providing effective performance warnings.
- Each check corresponds to a specific invariant identified in Phase 2, providing diagnostic output and aborting execution when a potential bottleneck is detected.

