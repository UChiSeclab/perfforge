system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is xk. 

Output the sum of costs over all non-empty subsets of people.

Input

Only line of input contains two integers N (1 ≤ N ≤ 109) representing total number of people and k (1 ≤ k ≤ 5000).

Output

Output the sum of costs for all non empty subsets modulo 109 + 7.

Examples

Input

1 1


Output

1


Input

3 2


Output

24

Note

In the first example, there is only one non-empty subset {1} with cost 11 = 1.

In the second example, there are seven non-empty subsets.

- {1} with cost 12 = 1

- {2} with cost 12 = 1

- {1, 2} with cost 22 = 4

- {3} with cost 12 = 1

- {1, 3} with cost 22 = 4

- {2, 3} with cost 22 = 4

- {1, 2, 3} with cost 32 = 9

The total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7;
int power(int a, int b) {
  int res = 1;
  while (b) {
    if (b % 2 != 0) {
      res = (1LL * res * a) % mod;
    }
    a = (1LL * a * a) % mod;
    b /= 2;
  }
  return res;
}
int ans[5005][5005];
int main() {
  int n, k;
  scanf("%d%d", &n, &k);
  if (n <= 5000) {
    int answer = 0;
    for (int i = 0; i <= n; i++) {
      ans[i][0] = 1;
      for (int j = 1; j <= i; j++) {
        ans[i][j] = (ans[i - 1][j - 1] + ans[i - 1][j]) % mod;
      }
    }
    for (int i = 1; i <= n; i++) {
      answer = (answer + (1LL * ans[n][i] * power(i, k)) % mod) % mod;
    }
    printf("%d\n", answer);
  } else {
    int prev = 1;
    for (int i = 1; i <= k; i++) {
      for (int d = 0; d <= k; d++) {
        if (i == 1) {
          prev = (1LL * prev * (n - d)) % mod;
          ans[1][d] = (1LL * prev * power(2, n - d - 1)) % mod;
        } else {
          ans[i][d] =
              ((1LL * (d + 1) * ans[i - 1][d]) % mod + ans[i - 1][d + 1]) % mod;
        }
      }
    }
    printf("%d\n", ans[k][0]);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

158260522 4575


(G.2) Fast Input

522 4575


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int power(int a, int b) { /* line 4 slow_hit_count: 4576, fast_hit_count: 522 */
  int res = 1; /* line 5 slow_hit_count: 4576, fast_hit_count: 522 */
  while (b) { /* line 6 slow_hit_count: 132704, fast_hit_count: 7308 */
    if (b % 2 != 0) { /* line 7 slow_hit_count: 128128, fast_hit_count: 6786 */
      res = (1LL * res * a) % mod; /* line 8 slow_hit_count: 72250, fast_hit_count: 4698 */
    } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    a = (1LL * a * a) % mod; /* line 10 slow_hit_count: 128128, fast_hit_count: 6786 */
    b /= 2; /* line 11 slow_hit_count: 128128, fast_hit_count: 6786 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 13 slow_hit_count: 4576, fast_hit_count: 522 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int ans[5005][5005]; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d%d", &n, &k); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  if (n <= 5000) { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    int answer = 0; /* line 20 slow_hit_count: 0, fast_hit_count: 1 */
    for (int i = 0; i <= n; i++) { /* line 21 slow_hit_count: 0, fast_hit_count: 524 */
      ans[i][0] = 1; /* line 22 slow_hit_count: 0, fast_hit_count: 523 */
      for (int j = 1; j <= i; j++) { /* line 23 slow_hit_count: 0, fast_hit_count: 137026 */
        ans[i][j] = (ans[i - 1][j - 1] + ans[i - 1][j]) % mod; /* line 24 slow_hit_count: 0, fast_hit_count: 136503 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 1; i <= n; i++) { /* line 27 slow_hit_count: 0, fast_hit_count: 523 */
      answer = (answer + (1LL * ans[n][i] * power(i, k)) % mod) % mod; /* line 28 slow_hit_count: 0, fast_hit_count: 522 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%d\n", answer); /* line 30 slow_hit_count: 0, fast_hit_count: 1 */
  } else { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    int prev = 1; /* line 32 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 1; i <= k; i++) { /* line 33 slow_hit_count: 4576, fast_hit_count: 0 */
      for (int d = 0; d <= k; d++) { /* line 34 slow_hit_count: 20939775, fast_hit_count: 0 */
        if (i == 1) { /* line 35 slow_hit_count: 20935200, fast_hit_count: 0 */
          prev = (1LL * prev * (n - d)) % mod; /* line 36 slow_hit_count: 4576, fast_hit_count: 0 */
          ans[1][d] = (1LL * prev * power(2, n - d - 1)) % mod; /* line 37 slow_hit_count: 4576, fast_hit_count: 0 */
        } else { /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
          ans[i][d] = /* line 39 slow_hit_count: 20930624, fast_hit_count: 0 */
              ((1LL * (d + 1) * ans[i - 1][d]) % mod + ans[i - 1][d + 1]) % mod; /* line 40 slow_hit_count: 20930624, fast_hit_count: 0 */
        } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%d\n", ans[k][0]); /* line 44 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Given the problem and the provided code, let's perform the analysis and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - The `power` function (lines 4-13) is called frequently with `b` iterations in a loop. The hit counts indicate a large number of calculations, especially for the slow input, due to the high number of iterations in the binary exponentiation process.
   - The nested loop structure in lines 33-40 is also heavily used in the slow input. This is due to `n` being large and the loop iterating over `k` which can be as large as 5000.

2. **Pinpointing Lines with Significant Hits:**
   - The lines within the `power` function and the nested loops in the `else` block (lines 31-44) are heavily impacted for the slow input, indicating a performance bottleneck.
   
3. **Interaction with Data Structures:**
   - The usage of the `ans` array as a binomial coefficient table for `n` up to 5000 in the `if` block (line 19-30) is avoided for large `n` because of the memory limitation.
   - For large `n`, the computation relies on iterative multiplication and array updates within the nested loop, which is where the slowdown occurs due to repetitive calculations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariants Describing Conditions for Slow Path:**

   - **Invariant 1:** If `n` is greater than 5000 and `k` is large, the number of iterations in the loop increases significantly, causing the nested loops to execute an excessive number of times.
     - *Natural Language Description:* "When `n` is greater than 5000 and `k` approaches its upper limit, the computation becomes intensive due to large repeated iterations in nested loops."

   - **Invariant 2:** The `power` function, which operates in \(O(\log b)\) time, becomes a bottleneck when called repeatedly with large `k` and large numbers of iterations in the surrounding loop.
     - *Natural Language Description:* "If the `power` function is called repeatedly with a large exponent due to high iteration counts caused by large `n` and `k`, it can significantly slow down the program."

2. **Threshold Values Aligned with Constraints:**
   - The threshold values derive from the constraints such as `n > 5000`, which triggers the execution of the `else` block using iterative calculations without relying on precomputed binomial coefficients.

3. **Correlative Statements to Input Patterns:**
   - For `n > 5000`, the performance depends heavily on the computational overhead of the nested loops which grow rapidly with increasing `k`.
   - The use of `power` function within the innermost loop further exacerbates the slow path, especially when `k` is large, resulting in many multiplicative operations.

These invariants help identify the scenarios where the code might experience performance degradation based on the input constraints and structure. They provide clear guidelines for understanding when the program may execute a slow path, allowing for optimizations or alternative strategies to handle such cases efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is xk. 

Output the sum of costs over all non-empty subsets of people.

Input

Only line of input contains two integers N (1 ≤ N ≤ 109) representing total number of people and k (1 ≤ k ≤ 5000).

Output

Output the sum of costs for all non empty subsets modulo 109 + 7.

Examples

Input

1 1


Output

1


Input

3 2


Output

24

Note

In the first example, there is only one non-empty subset {1} with cost 11 = 1.

In the second example, there are seven non-empty subsets.

- {1} with cost 12 = 1

- {2} with cost 12 = 1

- {1, 2} with cost 22 = 4

- {3} with cost 12 = 1

- {1, 3} with cost 22 = 4

- {2, 3} with cost 22 = 4

- {1, 2, 3} with cost 32 = 9

The total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.

Solution (C++ code):
{solution}


assistant: Let's start with Phase 3, where we will translate the natural language invariants into checker code in C++.

### Phase 3: Implement Natural Language Invariants as Checker Code

Based on the performance-characterizing invariants derived earlier, here are the checker implementations:

1. **Invariant 1 Checker:**
   - This checker will ensure that when `n` is greater than 5000 and `k` is large, a warning is produced to indicate potential performance bottlenecks due to excessive iterations in nested loops.
   
   ```cpp
   void check_large_n_k_invariant(int n, int k) {
       if (n > 5000 && k > 4000) {
           cerr << "Warning: Performance bottleneck condition triggered - large n and k!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2 Checker:**
   - This checker will monitor the `power` function to detect when it is being called excessively with large values, indicating a potential slowdown.
   
   ```cpp
   void check_power_function_invariant(int calls, int k) {
       if (calls > 10000 && k > 4000) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive power function calls!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checks into the original C++ code. We'll place the checks at effective points in the program to avoid any unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7;

int power(int a, int b) {
    int res = 1;
    int call_count = 0; // Track the number of times power is called
    while (b) {
        if (b % 2 != 0) {
            res = (1LL * res * a) % mod;
        }
        a = (1LL * a * a) % mod;
        b /= 2;
        call_count++;
    }
    // Check the invariant for excessive power calls
    check_power_function_invariant(call_count, b);
    return res;
}

void check_large_n_k_invariant(int n, int k) {
    if (n > 5000 && k > 4000) {
        cerr << "Warning: Performance bottleneck condition triggered - large n and k!" << endl;
        abort();
    }
}

void check_power_function_invariant(int calls, int k) {
    if (calls > 10000 && k > 4000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive power function calls!" << endl;
        abort();
    }
}

int ans[5005][5005];
int main() {
    int n, k;
    scanf("%d%d", &n, &k);

    // Check the invariant for large n and k
    check_large_n_k_invariant(n, k);
    
    if (n <= 5000) {
        int answer = 0;
        for (int i = 0; i <= n; i++) {
            ans[i][0] = 1;
            for (int j = 1; j <= i; j++) {
                ans[i][j] = (ans[i - 1][j - 1] + ans[i - 1][j]) % mod;
            }
        }
        for (int i = 1; i <= n; i++) {
            answer = (answer + (1LL * ans[n][i] * power(i, k)) % mod) % mod;
        }
        printf("%d\n", answer);
    } else {
        int prev = 1;
        for (int i = 1; i <= k; i++) {
            for (int d = 0; d <= k; d++) {
                if (i == 1) {
                    prev = (1LL * prev * (n - d)) % mod;
                    ans[1][d] = (1LL * prev * power(2, n - d - 1)) % mod;
                } else {
                    ans[i][d] =
                        ((1LL * (d + 1) * ans[i - 1][d]) % mod + ans[i - 1][d + 1]) % mod;
                }
            }
        }
        printf("%d\n", ans[k][0]);
    }
    return 0;
}
```

### Explanation:
- **Invariant 1** is checked right after reading `n` and `k`, ensuring that the program does not proceed if the invariant is triggered.
- **Invariant 2** is checked within the `power` function to capture excessive calls dynamically as they occur.
- These checks provide warnings and terminate execution when potential bottlenecks are detected, aiding in identifying performance issues during testing.

