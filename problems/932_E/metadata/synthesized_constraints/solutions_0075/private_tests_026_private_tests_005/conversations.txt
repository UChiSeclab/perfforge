system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is xk. 

Output the sum of costs over all non-empty subsets of people.

Input

Only line of input contains two integers N (1 ≤ N ≤ 109) representing total number of people and k (1 ≤ k ≤ 5000).

Output

Output the sum of costs for all non empty subsets modulo 109 + 7.

Examples

Input

1 1


Output

1


Input

3 2


Output

24

Note

In the first example, there is only one non-empty subset {1} with cost 11 = 1.

In the second example, there are seven non-empty subsets.

- {1} with cost 12 = 1

- {2} with cost 12 = 1

- {1, 2} with cost 22 = 4

- {3} with cost 12 = 1

- {1, 3} with cost 22 = 4

- {2, 3} with cost 22 = 4

- {1, 2, 3} with cost 32 = 9

The total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
#pragma warning(disable : 4996)
long long modpow(long long a, long long b, long long m) {
  long long p = 1, q = a;
  for (int i = 0; i < 31; i++) {
    if ((b / (1LL << i)) % 2 == 1) {
      p *= q;
      p %= m;
    }
    q *= q;
    q %= m;
  }
  return p;
}
long long mod = 1000000007;
long long N, K, fact[5009], factinv[5009], modpows[5009];
void init() {
  fact[0] = 1;
  for (int i = 1; i <= 5006; i++) fact[i] = (1LL * fact[i - 1] * i) % mod;
  for (int i = 0; i <= 5006; i++) factinv[i] = modpow(fact[i], mod - 2, mod);
}
long long ncr(long long n, long long r) {
  long long e = 1;
  for (long long i = n; i >= n - r + 1; i--) {
    e *= i;
    e %= mod;
  }
  return e * factinv[r] % mod;
}
long long Lagrange(long long pos, vector<pair<long long, long long>> vec) {
  long long sum = 0;
  for (int i = 0; i < vec.size(); i++) {
    long long v1 = 1, v2 = 1;
    for (int j = 0; j < vec.size(); j++) {
      if (i == j) continue;
      v1 *= (pos - vec[j].first + mod) % mod;
      v1 %= mod;
      v2 *= (vec[i].first - vec[j].first + mod) % mod;
      v2 %= mod;
    }
    long long v = v1 * modpow(v2, mod - 2, mod) % mod;
    v *= vec[i].second;
    v %= mod;
    sum += v;
    sum %= mod;
  }
  return sum;
}
int main() {
  init();
  cin >> N >> K;
  for (int i = 0; i <= 5006; i++) modpows[i] = modpow(i, K, mod);
  if (N < K + 1) {
    long long V = 0;
    for (int i = 1; i <= N; i++) {
      V += ncr(N, i) * modpow(i, K, mod);
      V %= mod;
    }
    cout << V << endl;
  } else {
    vector<pair<long long, long long>> vec;
    for (int t = 1; t <= K + 1; t++) {
      long long s = 0, v = 1;
      for (int i = 1; i <= t; i++) {
        v *= (t + 1LL - 1LL * i);
        v %= mod;
        s += (v * factinv[i] % mod) * modpows[i];
        s %= mod;
      }
      s *= modpow(modpow(2, t, mod), mod - 2, mod);
      s %= mod;
      vec.push_back(make_pair(t, s));
    }
    long long e = Lagrange(N, vec);
    e *= modpow(2, N, mod);
    e %= mod;
    cout << e << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

158260522 4575


(G.2) Fast Input

522 4575


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
#pragma warning(disable : 4996) /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long modpow(long long a, long long b, long long m) { /* line 4 slow_hit_count: 23743, fast_hit_count: 10536 */
  long long p = 1, q = a; /* line 5 slow_hit_count: 23743, fast_hit_count: 10536 */
  for (int i = 0; i < 31; i++) { /* line 6 slow_hit_count: 759776, fast_hit_count: 337152 */
    if ((b / (1LL << i)) % 2 == 1) { /* line 7 slow_hit_count: 736033, fast_hit_count: 326616 */
      p *= q; /* line 8 slow_hit_count: 284621, fast_hit_count: 124866 */
      p %= m; /* line 9 slow_hit_count: 284621, fast_hit_count: 124866 */
    } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    q *= q; /* line 11 slow_hit_count: 736033, fast_hit_count: 326616 */
    q %= m; /* line 12 slow_hit_count: 736033, fast_hit_count: 326616 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  return p; /* line 14 slow_hit_count: 23743, fast_hit_count: 10536 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
long long mod = 1000000007; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
long long N, K, fact[5009], factinv[5009], modpows[5009]; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
void init() { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  fact[0] = 1; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 5006; i++) fact[i] = (1LL * fact[i - 1] * i) % mod; /* line 20 slow_hit_count: 5007, fast_hit_count: 5007 */
  for (int i = 0; i <= 5006; i++) factinv[i] = modpow(fact[i], mod - 2, mod); /* line 21 slow_hit_count: 5008, fast_hit_count: 5008 */
} /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
long long ncr(long long n, long long r) { /* line 23 slow_hit_count: 0, fast_hit_count: 522 */
  long long e = 1; /* line 24 slow_hit_count: 0, fast_hit_count: 522 */
  for (long long i = n; i >= n - r + 1; i--) { /* line 25 slow_hit_count: 0, fast_hit_count: 137025 */
    e *= i; /* line 26 slow_hit_count: 0, fast_hit_count: 136503 */
    e %= mod; /* line 27 slow_hit_count: 0, fast_hit_count: 136503 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  return e * factinv[r] % mod; /* line 29 slow_hit_count: 0, fast_hit_count: 522 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
long long Lagrange(long long pos, vector<pair<long long, long long>> vec) { /* line 31 slow_hit_count: 1, fast_hit_count: 0 */
  long long sum = 0; /* line 32 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 0; i < vec.size(); i++) { /* line 33 slow_hit_count: 4577, fast_hit_count: 0 */
    long long v1 = 1, v2 = 1; /* line 34 slow_hit_count: 4576, fast_hit_count: 0 */
    for (int j = 0; j < vec.size(); j++) { /* line 35 slow_hit_count: 20944352, fast_hit_count: 0 */
      if (i == j) continue; /* line 36 slow_hit_count: 20939776, fast_hit_count: 0 */
      v1 *= (pos - vec[j].first + mod) % mod; /* line 37 slow_hit_count: 20935200, fast_hit_count: 0 */
      v1 %= mod; /* line 38 slow_hit_count: 20935200, fast_hit_count: 0 */
      v2 *= (vec[i].first - vec[j].first + mod) % mod; /* line 39 slow_hit_count: 20935200, fast_hit_count: 0 */
      v2 %= mod; /* line 40 slow_hit_count: 20935200, fast_hit_count: 0 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    long long v = v1 * modpow(v2, mod - 2, mod) % mod; /* line 42 slow_hit_count: 4576, fast_hit_count: 0 */
    v *= vec[i].second; /* line 43 slow_hit_count: 4576, fast_hit_count: 0 */
    v %= mod; /* line 44 slow_hit_count: 4576, fast_hit_count: 0 */
    sum += v; /* line 45 slow_hit_count: 4576, fast_hit_count: 0 */
    sum %= mod; /* line 46 slow_hit_count: 4576, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  return sum; /* line 48 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  init(); /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> N >> K; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 5006; i++) modpows[i] = modpow(i, K, mod); /* line 53 slow_hit_count: 5008, fast_hit_count: 5008 */
  if (N < K + 1) { /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
    long long V = 0; /* line 55 slow_hit_count: 0, fast_hit_count: 1 */
    for (int i = 1; i <= N; i++) { /* line 56 slow_hit_count: 0, fast_hit_count: 523 */
      V += ncr(N, i) * modpow(i, K, mod); /* line 57 slow_hit_count: 0, fast_hit_count: 522 */
      V %= mod; /* line 58 slow_hit_count: 0, fast_hit_count: 522 */
    } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    cout << V << endl; /* line 60 slow_hit_count: 0, fast_hit_count: 1 */
  } else { /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    vector<pair<long long, long long>> vec; /* line 62 slow_hit_count: 2, fast_hit_count: 0 */
    for (int t = 1; t <= K + 1; t++) { /* line 63 slow_hit_count: 4577, fast_hit_count: 0 */
      long long s = 0, v = 1; /* line 64 slow_hit_count: 4576, fast_hit_count: 0 */
      for (int i = 1; i <= t; i++) { /* line 65 slow_hit_count: 10476752, fast_hit_count: 0 */
        v *= (t + 1LL - 1LL * i); /* line 66 slow_hit_count: 10472176, fast_hit_count: 0 */
        v %= mod; /* line 67 slow_hit_count: 10472176, fast_hit_count: 0 */
        s += (v * factinv[i] % mod) * modpows[i]; /* line 68 slow_hit_count: 10472176, fast_hit_count: 0 */
        s %= mod; /* line 69 slow_hit_count: 10472176, fast_hit_count: 0 */
      } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
      s *= modpow(modpow(2, t, mod), mod - 2, mod); /* line 71 slow_hit_count: 4576, fast_hit_count: 0 */
      s %= mod; /* line 72 slow_hit_count: 4576, fast_hit_count: 0 */
      vec.push_back(make_pair(t, s)); /* line 73 slow_hit_count: 4576, fast_hit_count: 0 */
    } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
    long long e = Lagrange(N, vec); /* line 75 slow_hit_count: 1, fast_hit_count: 0 */
    e *= modpow(2, N, mod); /* line 76 slow_hit_count: 1, fast_hit_count: 0 */
    e %= mod; /* line 77 slow_hit_count: 1, fast_hit_count: 0 */
    cout << e << endl; /* line 78 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 81 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count data, the following observations can be made:

1. The function `modpow` is heavily invoked in both cases but significantly more in the slow input. This suggests that repeated modular exponentiation is a potential bottleneck.

2. The `Lagrange` function, which is not executed at all for the fast input, is heavily invoked for the slow input. This indicates that the program enters the Lagrange polynomial interpolation path only when certain conditions (likely related to `N` and `K`) are met.

3. The double-nested loop within `Lagrange` (`lines 33-46`) is a potential source of inefficiency, evident by the massive hit counts (e.g., `line 35` has `20,944,352` hits for the slow input).

4. The function `ncr` is used extensively in the fast input but not at all in the slow input, pointing to different execution paths depending on the input size.

5. The loop at `line 63` iterates `K+1` times, and within it, there is another loop at `line 65` potentially executing `K+1` times as well, leading to significant nested computation when `K` is large.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations, here are some performance-characterizing invariants:

1. **High Modular Exponentiation Count**:
   - **Invariant**: "If `N` is large, the function `modpow` is called excessively within different segments of the program, leading to potential slowdowns due to repeated modular exponentiation computations."
   - **Explanation**: The `modpow` function contributes significantly to execution time because the same computation may be redundantly repeated for different parts of the calculation.

2. **Lagrange Polynomial Interpolation**:
   - **Invariant**: "When `N` is greater than `K + 1`, the program resorts to Lagrange interpolation, which entails a quadratic computation concerning `K`, significantly impacting performance for large `N`."
   - **Explanation**: The choice of Lagrange interpolation for large `N` introduces additional computation overhead due to nested loops, especially when `K` is large.

3. **Nested Loop Complexity**:
   - **Invariant**: "If `K` approaches its upper limit, nested loops involving Lagrange polynomial interpolation iterate `(K+1)^2` times, increasing computational complexity and causing performance degradation."
   - **Explanation**: The nested loops in `Lagrange` scale quadratically with `K`, leading to inefficiency when `K` is large.

4. **Conditional Execution Paths**:
   - **Invariant**: "The program takes significantly different paths when `N` is less than or equal to `K` compared to when `N` exceeds `K`, resulting in different computational loads."
   - **Explanation**: Smaller `N` leverages combinatorial computations, while larger `N` requires Lagrange interpolation, each with different computational demands.

These invariants describe conditions under which the code paths result in performance slowdowns, considering both the input sizes and how they influence the choice of algorithmic strategy within the code.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is xk. 

Output the sum of costs over all non-empty subsets of people.

Input

Only line of input contains two integers N (1 ≤ N ≤ 109) representing total number of people and k (1 ≤ k ≤ 5000).

Output

Output the sum of costs for all non empty subsets modulo 109 + 7.

Examples

Input

1 1


Output

1


Input

3 2


Output

24

Note

In the first example, there is only one non-empty subset {1} with cost 11 = 1.

In the second example, there are seven non-empty subsets.

- {1} with cost 12 = 1

- {2} with cost 12 = 1

- {1, 2} with cost 22 = 4

- {3} with cost 12 = 1

- {1, 3} with cost 22 = 4

- {2, 3} with cost 22 = 4

- {1, 2, 3} with cost 32 = 9

The total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Based on the previous natural language invariants, here is the C++ code to check these conditions at runtime:

```cpp
void check_modpow_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive modular exponentiation!" << endl;
        abort();
    }
}

void check_lagrange_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - Lagrange interpolation invoked!" << endl;
        abort();
    }
}

void check_nested_loop_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - nested loop complexity due to large K!" << endl;
        abort();
    }
}

void check_execution_path_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - conditional execution path with high N!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Here's the complete instrumented C++ program with the checks integrated at effective points:

```cpp
#include <bits/stdc++.h>
using namespace std;
#pragma warning(disable : 4996)

long long modpow(long long a, long long b, long long m) {
    long long p = 1, q = a;
    for (int i = 0; i < 31; i++) {
        if ((b / (1LL << i)) % 2 == 1) {
            p *= q;
            p %= m;
        }
        q *= q;
        q %= m;
    }
    return p;
}

void check_modpow_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive modular exponentiation!" << endl;
        abort();
    }
}

void check_lagrange_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - Lagrange interpolation invoked!" << endl;
        abort();
    }
}

void check_nested_loop_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - nested loop complexity due to large K!" << endl;
        abort();
    }
}

void check_execution_path_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - conditional execution path with high N!" << endl;
        abort();
    }
}

long long mod = 1000000007;
long long N, K, fact[5009], factinv[5009], modpows[5009];

void init() {
    fact[0] = 1;
    for (int i = 1; i <= 5006; i++) fact[i] = (1LL * fact[i - 1] * i) % mod;
    for (int i = 0; i <= 5006; i++) factinv[i] = modpow(fact[i], mod - 2, mod);
}

long long ncr(long long n, long long r) {
    long long e = 1;
    for (long long i = n; i >= n - r + 1; i--) {
        e *= i;
        e %= mod;
    }
    return e * factinv[r] % mod;
}

long long Lagrange(long long pos, vector<pair<long long, long long>> vec) {
    long long sum = 0;
    for (int i = 0; i < vec.size(); i++) {
        long long v1 = 1, v2 = 1;
        for (int j = 0; j < vec.size(); j++) {
            if (i == j) continue;
            v1 *= (pos - vec[j].first + mod) % mod;
            v1 %= mod;
            v2 *= (vec[i].first - vec[j].first + mod) % mod;
            v2 %= mod;
        }
        long long v = v1 * modpow(v2, mod - 2, mod) % mod;
        v *= vec[i].second;
        v %= mod;
        sum += v;
        sum %= mod;
    }
    return sum;
}

int main() {
    init();
    cin >> N >> K;

    // Check if the execution path will trigger Lagrange polynomial interpolation
    check_execution_path_invariant(N > K + 1);

    for (int i = 0; i <= 5006; i++) modpows[i] = modpow(i, K, mod);

    if (N < K + 1) {
        long long V = 0;
        for (int i = 1; i <= N; i++) {
            V += ncr(N, i) * modpow(i, K, mod);
            V %= mod;
        }
        cout << V << endl;
    } else {
        vector<pair<long long, long long>> vec;

        // Check for nested loop complexity due to large K
        check_nested_loop_invariant(K > 100); // Example threshold for large K

        for (int t = 1; t <= K + 1; t++) {
            long long s = 0, v = 1;
            for (int i = 1; i <= t; i++) {
                v *= (t + 1LL - 1LL * i);
                v %= mod;
                s += (v * factinv[i] % mod) * modpows[i];
                s %= mod;
            }
            s *= modpow(modpow(2, t, mod), mod - 2, mod);
            s %= mod;
            vec.push_back(make_pair(t, s));
        }

        // Check if Lagrange interpolation becomes a bottleneck
        check_lagrange_invariant(vec.size() > 10); // Example threshold for vec size

        long long e = Lagrange(N, vec);
        e *= modpow(2, N, mod);
        e %= mod;
        cout << e << endl;
    }
    return 0;
}
```

### Explanation of Instrumentation

- **Modular Exponentiation**: The `check_modpow_invariant` is targeted at identifying excessive calls to `modpow`. However, since `modpow` is fundamental to computations, we instead use checks to prevent unnecessary paths leading to many `modpow` calls.

- **Lagrange Interpolation**: The `check_lagrange_invariant` is set before the Lagrange function is invoked. It checks if the size of `vec` (related to `K + 1`) becomes impractically large, leading to performance issues in the `Lagrange` function.

- **Nested Loop Complexity**: The `check_nested_loop_invariant` is placed before the nested loop that might iterate excessively due to large `K`.

- **Execution Path Check**: `check_execution_path_invariant` ensures that if `N` is greater than `K + 1`, a computationally heavier path is detected. 

Each invariant is checked in its relevant section to avoid unnecessary checks in tight loops, enhancing the effectiveness of detecting performance bottlenecks.

