system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is xk. 

Output the sum of costs over all non-empty subsets of people.

Input

Only line of input contains two integers N (1 ≤ N ≤ 109) representing total number of people and k (1 ≤ k ≤ 5000).

Output

Output the sum of costs for all non empty subsets modulo 109 + 7.

Examples

Input

1 1


Output

1


Input

3 2


Output

24

Note

In the first example, there is only one non-empty subset {1} with cost 11 = 1.

In the second example, there are seven non-empty subsets.

- {1} with cost 12 = 1

- {2} with cost 12 = 1

- {1, 2} with cost 22 = 4

- {3} with cost 12 = 1

- {1, 3} with cost 22 = 4

- {2, 3} with cost 22 = 4

- {1, 2, 3} with cost 32 = 9

The total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 5e3 + 100;
const int mod = 1e9 + 7;
long long dp[N][N];
long long g[N];
long long PowerMod(long long a, long long b) {
  long long ans = 1;
  a = a % mod;
  while (b) {
    if (b & 1) ans = (ans * a) % mod;
    a = (a * a) % mod;
    b >>= 1;
  }
  return ans;
}
void solve() {
  long long n;
  int k;
  scanf("%lld%d", &n, &k);
  long long ans = 0;
  long long temp = n;
  if (n <= k) {
    for (int i = 1; i <= n; i++) {
      ans += (temp * PowerMod(i, k));
      ans %= mod;
      temp = temp * (n - i) % mod * PowerMod(i + 1, mod - 2) % mod;
    }
  } else {
    dp[0][k] = PowerMod(2, n - k);
    for (int i = k - 1; i >= 0; i--) dp[0][i] = dp[0][i + 1] * 2 % mod;
    for (int i = 1; i <= k; i++) {
      for (int j = 0; j <= k; j++) {
        dp[i][j] =
            ((n - j) * (dp[i - 1][j + 1] + g[j + 1]) % mod + j * dp[i - 1][j]) %
            mod;
        g[j + 1] = g[j + 1] * (j + 1) % mod;
      }
    }
    ans = dp[k][0];
  }
  printf("%lld\n", ans);
}
int main() {
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

158260522 4575


(G.2) Fast Input

522 4575


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 5e3 + 100; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[N][N]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long g[N]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long PowerMod(long long a, long long b) { /* line 7 slow_hit_count: 1, fast_hit_count: 1044 */
  long long ans = 1; /* line 8 slow_hit_count: 1, fast_hit_count: 1044 */
  a = a % mod; /* line 9 slow_hit_count: 1, fast_hit_count: 1044 */
  while (b) { /* line 10 slow_hit_count: 29, fast_hit_count: 23490 */
    if (b & 1) ans = (ans * a) % mod; /* line 11 slow_hit_count: 28, fast_hit_count: 22446 */
    a = (a * a) % mod; /* line 12 slow_hit_count: 28, fast_hit_count: 22446 */
    b >>= 1; /* line 13 slow_hit_count: 28, fast_hit_count: 22446 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 15 slow_hit_count: 1, fast_hit_count: 1044 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  long long n; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  int k; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%lld%d", &n, &k); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  long long temp = n; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  if (n <= k) { /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i <= n; i++) { /* line 24 slow_hit_count: 0, fast_hit_count: 523 */
      ans += (temp * PowerMod(i, k)); /* line 25 slow_hit_count: 0, fast_hit_count: 522 */
      ans %= mod; /* line 26 slow_hit_count: 0, fast_hit_count: 522 */
      temp = temp * (n - i) % mod * PowerMod(i + 1, mod - 2) % mod; /* line 27 slow_hit_count: 0, fast_hit_count: 522 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    dp[0][k] = PowerMod(2, n - k); /* line 30 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = k - 1; i >= 0; i--) dp[0][i] = dp[0][i + 1] * 2 % mod; /* line 31 slow_hit_count: 4576, fast_hit_count: 0 */
    for (int i = 1; i <= k; i++) { /* line 32 slow_hit_count: 4576, fast_hit_count: 0 */
      for (int j = 0; j <= k; j++) { /* line 33 slow_hit_count: 20939775, fast_hit_count: 0 */
        dp[i][j] = /* line 34 slow_hit_count: 20935200, fast_hit_count: 0 */
            ((n - j) * (dp[i - 1][j + 1] + g[j + 1]) % mod + j * dp[i - 1][j]) % /* line 35 slow_hit_count: 20935200, fast_hit_count: 0 */
            mod; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
        g[j + 1] = g[j + 1] * (j + 1) % mod; /* line 37 slow_hit_count: 20935200, fast_hit_count: 0 */
      } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    ans = dp[k][0]; /* line 40 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", ans); /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the given C program and derive performance-characterizing invariants, let's break it down into the two phases as requested.

### Phase 1: Identify Expensive or Inefficient Code Segments

**1.** **Comparison of Line-Level Hit Counts:**
- Lines inside the function `PowerMod` are hit more frequently during both runs, indicating that it is a heavily used function.
- For the slow input, lines 31 to 37 have significantly high hit counts, while they are not executed for the fast input. This suggests that this part of the code is a major factor for the slowdown.

**2.** **Pinpoint Slower Lines/Functions:**
- The `else` block starting at line 29 is executed for the slow input because `n > k`. Within this block, lines 31 to 37 are executed repeatedly, with line 33 being particularly costly due to nested loops over `k`.

**3.** **Interaction with Data Structures:**
- The `dp` table is used extensively in this section, and the nested loop iterating over `k` (line 33) suggests a significant computational load which scales with `k`.

### Phase 2: Derive Performance-Characterizing Invariants

**1.** **Invariant Descriptions:**

1. **Large `k` Leading to Repeated Operations:**
   - "When `k` is large relative to input constraints, the nested loops over `k` in the dynamic programming table computation may cause significant slowdowns. This is exacerbated when `n > k`, triggering the use of precomputed powers and additional operations."
   
2. **Inefficient Power Computation for Large `n`:**
   - "If `n` is significantly larger than `k` and the computation involves repeatedly raising numbers to the power of `n-k`, the power calculation function (`PowerMod`) is invoked frequently, leading to increased computation time."

3. **Memory and Computational Overhead with DP Arrays:**
   - "The use of large 2D arrays (`dp`) for dynamic programming in cases where `n` is substantially larger than `k` can result in excessive memory use and computational overhead due to numerous calculations performed per element."

4. **High Hit Rate on Recursive Structure:**
   - "When exploring deep or extensive recursive-like computations (in this case, nested operations over `k`), performance can degrade significantly if `k` is high, doubling work for each decrement in `k`."

These natural language statements capture the core reasons for slowdown, focusing especially on the conditions under which the dynamic programming solution becomes inefficient, such as when `n` is much larger than `k` and large values of `k` trigger extensive computation. The statements abstract the hit count specifics into broad performance characteristics, aligning with the input constraints of the problem (e.g., `1 ≤ N ≤ 10^9` and `1 ≤ k ≤ 5000`).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is xk. 

Output the sum of costs over all non-empty subsets of people.

Input

Only line of input contains two integers N (1 ≤ N ≤ 109) representing total number of people and k (1 ≤ k ≤ 5000).

Output

Output the sum of costs for all non empty subsets modulo 109 + 7.

Examples

Input

1 1


Output

1


Input

3 2


Output

24

Note

In the first example, there is only one non-empty subset {1} with cost 11 = 1.

In the second example, there are seven non-empty subsets.

- {1} with cost 12 = 1

- {2} with cost 12 = 1

- {1, 2} with cost 22 = 4

- {3} with cost 12 = 1

- {1, 3} with cost 22 = 4

- {2, 3} with cost 22 = 4

- {1, 2, 3} with cost 32 = 9

The total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.

Solution (C++ code):
{solution}


assistant: Let's proceed to implement the performance-characterizing invariants in C++ and integrate them into the given program.

### Phase 3: Implement the Natural Language Invariants as Checker Code in C++

1. **Large `k` Leading to Repeated Operations:**
   ```cpp
   void check_large_k_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: large_k_invariant triggered - excessive operations for large k" << endl;
           abort();
       }
   }
   ```

2. **Inefficient Power Computation for Large `n`:**
   ```cpp
   void check_power_computation_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: power_computation_invariant triggered - inefficient power computations for large n" << endl;
           abort();
       }
   }
   ```

3. **Memory and Computational Overhead with DP Arrays:**
   ```cpp
   void check_dp_array_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: dp_array_invariant triggered - large memory or computational overhead with dp array" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

Now, let's integrate these checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 5e3 + 100;
const int mod = 1e9 + 7;
long long dp[N][N];
long long g[N];

// Checker functions based on identified performance bottlenecks
void check_large_k_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: large_k_invariant triggered - excessive operations for large k" << endl;
        abort();
    }
}

void check_power_computation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: power_computation_invariant triggered - inefficient power computations for large n" << endl;
        abort();
    }
}

void check_dp_array_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dp_array_invariant triggered - large memory or computational overhead with dp array" << endl;
        abort();
    }
}

// Function to compute power modulo
long long PowerMod(long long a, long long b) {
    long long ans = 1;
    a = a % mod;
    while (b) {
        if (b & 1) ans = (ans * a) % mod;
        a = (a * a) % mod;
        b >>= 1;
    }
    return ans;
}

void solve() {
    long long n;
    int k;
    scanf("%lld%d", &n, &k);

    // Invariant checks
    check_large_k_invariant(k > 4000);  // Arbitrary threshold for demonstration
    check_power_computation_invariant(n > 500000);  // Arbitrary threshold for demonstration
    check_dp_array_invariant(k > 4000);  // Arbitrary threshold for the size of dp

    long long ans = 0;
    long long temp = n;

    if (n <= k) {
        for (int i = 1; i <= n; i++) {
            ans += (temp * PowerMod(i, k));
            ans %= mod;
            temp = temp * (n - i) % mod * PowerMod(i + 1, mod - 2) % mod;
        }
    } else {
        dp[0][k] = PowerMod(2, n - k);
        for (int i = k - 1; i >= 0; i--) dp[0][i] = dp[0][i + 1] * 2 % mod;
        for (int i = 1; i <= k; i++) {
            for (int j = 0; j <= k; j++) {
                dp[i][j] = ((n - j) * (dp[i - 1][j + 1] + g[j + 1]) % mod + j * dp[i - 1][j]) % mod;
                g[j + 1] = g[j + 1] * (j + 1) % mod;
            }
        }
        ans = dp[k][0];
    }
    printf("%lld\n", ans);
}

int main() {
    solve();
    return 0;
}
```

**Explanation:**

- **Check Placement:** The checks are placed immediately after reading inputs and before any heavy computations. This ensures that we don't introduce additional overhead in critical code paths.
- **Conditions:** The conditions in the checker functions are based on thresholds suggested in the performance-characterizing invariants. These thresholds are arbitrary values that can be adjusted based on further profiling data.
- **Abort on Detection:** Each check produces a warning and aborts execution if a potential bottleneck condition is detected, making it clear when a performance issue arises.

