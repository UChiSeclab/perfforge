system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is xk. 

Output the sum of costs over all non-empty subsets of people.

Input

Only line of input contains two integers N (1 ≤ N ≤ 109) representing total number of people and k (1 ≤ k ≤ 5000).

Output

Output the sum of costs for all non empty subsets modulo 109 + 7.

Examples

Input

1 1


Output

1


Input

3 2


Output

24

Note

In the first example, there is only one non-empty subset {1} with cost 11 = 1.

In the second example, there are seven non-empty subsets.

- {1} with cost 12 = 1

- {2} with cost 12 = 1

- {1, 2} with cost 22 = 4

- {3} with cost 12 = 1

- {1, 3} with cost 22 = 4

- {2, 3} with cost 22 = 4

- {1, 2, 3} with cost 32 = 9

The total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long p = 1000000007;
long long fac[100000];
long long coeff[5005][5005];
long long power(long long x, long long y, long long p) {
  p = 1000000007;
  long long res = 1;
  x = x % p;
  while (y > 0) {
    if (y & 1) res = (res * x) % p;
    y = y >> 1;
    x = (x * x) % p;
  }
  return res;
}
long long modInverse(long long n, long long p) {
  p = 1000000007;
  return power(n, p - 2, p);
}
long long nCrModPFermat(long long n, long long r, long long p) {
  if (r == 0) return 1;
  long long fac[n + 1];
  fac[0] = 1;
  for (int i = 1; i <= n; i++) fac[i] = (fac[i - 1] * i) % p;
  return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) %
         p;
}
int main() {
  long long n, k;
  cin >> n >> k;
  p = 1000000007;
  long long fuck = 0;
  coeff[0][0] = 1;
  if (n < k) {
    long long aaa = 0;
    for (long long i = 0; i < n + 1; i++) {
      aaa = (aaa + (nCrModPFermat(n, i, p) * power(i, k, p)) % 1000000007) %
            1000000007;
    }
    cout << aaa;
    return 0;
  }
  for (long long i = 1; i < k + 5; i++) {
    for (long long j = 1; j < i + 1; j++) {
      coeff[i][j] = max(1LL, coeff[i][j]);
      coeff[i][j] = (coeff[i - 1][j] * j + coeff[i - 1][j - 1]) % 1000000007;
    }
  }
  for (long long i = 2; i < k + 1; i++) {
    long long temp = coeff[k][i];
    temp = (temp * power(2, n - i, p)) % 1000000007;
    for (long long j = 1; j < i; j++) {
      temp = (temp * (n - j) + 1000000007) % 1000000007;
    }
    fuck = (fuck + temp) % 1000000007;
  }
  fuck = (fuck + power(2, n - 1, p)) % 1000000007;
  fuck = (fuck * n) % 1000000007;
  cout << fuck << '\n';
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4278 3849


(G.2) Fast Input

318 3849


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long p = 1000000007; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long fac[100000]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long coeff[5005][5005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long power(long long x, long long y, long long p) { /* line 6 slow_hit_count: 3849, fast_hit_count: 955 */
  p = 1000000007; /* line 7 slow_hit_count: 3849, fast_hit_count: 955 */
  long long res = 1; /* line 8 slow_hit_count: 3849, fast_hit_count: 955 */
  x = x % p; /* line 9 slow_hit_count: 3849, fast_hit_count: 955 */
  while (y > 0) { /* line 10 slow_hit_count: 47922, fast_hit_count: 23863 */
    if (y & 1) res = (res * x) % p; /* line 11 slow_hit_count: 44073, fast_hit_count: 22908 */
    y = y >> 1; /* line 12 slow_hit_count: 44073, fast_hit_count: 22908 */
    x = (x * x) % p; /* line 13 slow_hit_count: 44073, fast_hit_count: 22908 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 15 slow_hit_count: 3849, fast_hit_count: 955 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
long long modInverse(long long n, long long p) { /* line 17 slow_hit_count: 0, fast_hit_count: 636 */
  p = 1000000007; /* line 18 slow_hit_count: 0, fast_hit_count: 636 */
  return power(n, p - 2, p); /* line 19 slow_hit_count: 0, fast_hit_count: 636 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
long long nCrModPFermat(long long n, long long r, long long p) { /* line 21 slow_hit_count: 0, fast_hit_count: 319 */
  if (r == 0) return 1; /* line 22 slow_hit_count: 0, fast_hit_count: 1 */
  long long fac[n + 1]; /* line 23 slow_hit_count: 0, fast_hit_count: 318 */
  fac[0] = 1; /* line 24 slow_hit_count: 0, fast_hit_count: 318 */
  for (int i = 1; i <= n; i++) fac[i] = (fac[i - 1] * i) % p; /* line 25 slow_hit_count: 0, fast_hit_count: 101442 */
  return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % /* line 26 slow_hit_count: 0, fast_hit_count: 318 */
         p; /* line 27 slow_hit_count: 0, fast_hit_count: 637 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, k; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  p = 1000000007; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  long long fuck = 0; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  coeff[0][0] = 1; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  if (n < k) { /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
    long long aaa = 0; /* line 36 slow_hit_count: 0, fast_hit_count: 1 */
    for (long long i = 0; i < n + 1; i++) { /* line 37 slow_hit_count: 0, fast_hit_count: 320 */
      aaa = (aaa + (nCrModPFermat(n, i, p) * power(i, k, p)) % 1000000007) % /* line 38 slow_hit_count: 0, fast_hit_count: 319 */
            1000000007; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    cout << aaa; /* line 41 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 42 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 1; i < k + 5; i++) { /* line 44 slow_hit_count: 3854, fast_hit_count: 0 */
    for (long long j = 1; j < i + 1; j++) { /* line 45 slow_hit_count: 7428584, fast_hit_count: 0 */
      coeff[i][j] = max(1LL, coeff[i][j]); /* line 46 slow_hit_count: 7424731, fast_hit_count: 0 */
      coeff[i][j] = (coeff[i - 1][j] * j + coeff[i - 1][j - 1]) % 1000000007; /* line 47 slow_hit_count: 7424731, fast_hit_count: 0 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 2; i < k + 1; i++) { /* line 50 slow_hit_count: 3849, fast_hit_count: 0 */
    long long temp = coeff[k][i]; /* line 51 slow_hit_count: 3848, fast_hit_count: 0 */
    temp = (temp * power(2, n - i, p)) % 1000000007; /* line 52 slow_hit_count: 3848, fast_hit_count: 0 */
    for (long long j = 1; j < i; j++) { /* line 53 slow_hit_count: 7409324, fast_hit_count: 0 */
      temp = (temp * (n - j) + 1000000007) % 1000000007; /* line 54 slow_hit_count: 7405476, fast_hit_count: 0 */
    } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    fuck = (fuck + temp) % 1000000007; /* line 56 slow_hit_count: 3848, fast_hit_count: 0 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  fuck = (fuck + power(2, n - 1, p)) % 1000000007; /* line 58 slow_hit_count: 1, fast_hit_count: 0 */
  fuck = (fuck * n) % 1000000007; /* line 59 slow_hit_count: 1, fast_hit_count: 0 */
  cout << fuck << '\n'; /* line 60 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 61 slow_hit_count: 1, fast_hit_count: 0 */


assistant: ### Phase 1: Identifying Expensive or Inefficient Code Segments

Upon comparing the line-level hit counts for the slow and fast inputs, we identify the following insights:

1. **Function `power`:** This function is called many more times with the slow input, totaling 47,922 hits for loop conditions compared to 23,863 with the fast input. This indicates that the exponentiation operation is a hotspot, particularly the while-loop responsible for exponentiation by squaring.

2. **Nested Loops for Coefficient Calculation:** 
   - The nested loop starting at line 44 is executed significantly more times for the slow input than for the fast input (7,428,584 vs. 0 hits, respectively). This loop computes binomial coefficients using dynamic programming and is very expensive with the slow input.
   - Further, the nested loop starting at line 53 is also a hotspot, with 7,405,476 hits in the slow run, indicating heavy computations involving multiplication and modulus operations.

3. **Conditional Branching:**
   - Lines 35-42 are only executed in the fast run since `n < k`. For the slow input, where `n >= k`, the branching results in a different and more complex computation path.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the analysis, the performance bottlenecks are primarily due to the complex calculations involving exponentiation and binomial coefficients. Here are the performance-characterizing invariants:

1. **Exponentiation Complexity:**
   - **Natural Language Invariant:** "If the exponentiation operation (in `power` function) is called with a large difference between `n` and `k`, the computation becomes significantly expensive due to repeated multiplication and modulus operations."
   
2. **Coefficient Computation Overhead:**
   - **Natural Language Invariant:** "When calculating binomial coefficients using nested loops, if `k` is large, the nested loop may perform excessive iterations leading to increased computation time."
   
3. **Multiplicative Combinations:**
   - **Natural Language Invariant:** "The presence of nested loops that involve multiplying large entities like `(n - j)` with dynamic coefficients can lead to performance degradation if `k` approaches its upper constraint."

4. **Conditional Path Selection:**
   - **Natural Language Invariant:** "The path that involves computing coefficients and powers when `n >= k` is significantly more complex and leads to slow performance, especially with higher values of `k`."

These invariants highlight that the slow path is primarily triggered by high values of `k` relative to the complexity of combinations and exponentiations performed within the nested loops. Future slowdowns are likely when `n` and `k` are such that complex paths are more frequently executed, causing an increased number of operations and large memory footprints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is xk. 

Output the sum of costs over all non-empty subsets of people.

Input

Only line of input contains two integers N (1 ≤ N ≤ 109) representing total number of people and k (1 ≤ k ≤ 5000).

Output

Output the sum of costs for all non empty subsets modulo 109 + 7.

Examples

Input

1 1


Output

1


Input

3 2


Output

24

Note

In the first example, there is only one non-empty subset {1} with cost 11 = 1.

In the second example, there are seven non-empty subsets.

- {1} with cost 12 = 1

- {2} with cost 12 = 1

- {1, 2} with cost 22 = 4

- {3} with cost 12 = 1

- {1, 3} with cost 22 = 4

- {2, 3} with cost 22 = 4

- {1, 2, 3} with cost 32 = 9

The total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checker Code in C++

Below are the C++ code snippets that implement the performance-characterizing invariants identified in the previous phase:

1. **Exponentiation Complexity Checker:**
   ```cpp
   void check_exponentiation_invariant(long long n, long long k) {
       if (n - k > 5000) { // Assuming a threshold for complexity based on problem constraints
           cerr << "Warning: Exponentiation invariant triggered - large difference leading to expensive operations!" << endl;
           abort();
       }
   }
   ```

2. **Coefficient Computation Overhead Checker:**
   ```cpp
   void check_coefficient_invariant(long long k) {
       if (k > 3000) { // Assuming a threshold as a significant portion of the upper limit
           cerr << "Warning: Coefficient invariant triggered - large k value leading to excessive iterations!" << endl;
           abort();
       }
   }
   ```

3. **Multiplicative Combinations Checker:**
   ```cpp
   void check_multiplicative_invariant(long long n, long long k) {
       if (n > 4000 && k > 2000) { // Assuming conditions where multiplicative operations explode
           cerr << "Warning: Multiplicative invariant triggered - large n and k causing performance degradation!" << endl;
           abort();
       }
   }
   ```

4. **Conditional Path Selection Checker:**
   ```cpp
   void check_conditional_path_invariant(long long n, long long k) {
       if (n >= k && k > 2500) { // Where conditional path selection causes complexity
           cerr << "Warning: Conditional path invariant triggered - n >= k with large k causing complex execution path!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Original Program

The following is the instrumented version of the original C++ program with the integrated performance-checking code:

```cpp
#include <bits/stdc++.h>
using namespace std;

long long p = 1000000007;
long long fac[100000];
long long coeff[5005][5005];

long long power(long long x, long long y, long long p) {
    p = 1000000007;
    long long res = 1;
    x = x % p;
    while (y > 0) {
        if (y & 1) res = (res * x) % p;
        y = y >> 1;
        x = (x * x) % p;
    }
    return res;
}

long long modInverse(long long n, long long p) {
    return power(n, p - 2, p);
}

long long nCrModPFermat(long long n, long long r, long long p) {
    if (r == 0) return 1;
    long long fac[n + 1];
    fac[0] = 1;
    for (int i = 1; i <= n; i++) fac[i] = (fac[i - 1] * i) % p;
    return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p;
}

// Checkers inserted here
void check_exponentiation_invariant(long long n, long long k) {
    if (n - k > 5000) {
        cerr << "Warning: Exponentiation invariant triggered - large difference leading to expensive operations!" << endl;
        abort();
    }
}

void check_coefficient_invariant(long long k) {
    if (k > 3000) {
        cerr << "Warning: Coefficient invariant triggered - large k value leading to excessive iterations!" << endl;
        abort();
    }
}

void check_multiplicative_invariant(long long n, long long k) {
    if (n > 4000 && k > 2000) {
        cerr << "Warning: Multiplicative invariant triggered - large n and k causing performance degradation!" << endl;
        abort();
    }
}

void check_conditional_path_invariant(long long n, long long k) {
    if (n >= k && k > 2500) {
        cerr << "Warning: Conditional path invariant triggered - n >= k with large k causing complex execution path!" << endl;
        abort();
    }
}

int main() {
    long long n, k;
    cin >> n >> k;
    p = 1000000007;
    long long fuck = 0;
    coeff[0][0] = 1;

    // Invoke checkers at appropriate points
    check_exponentiation_invariant(n, k);
    check_coefficient_invariant(k);
    check_multiplicative_invariant(n, k);
    check_conditional_path_invariant(n, k);

    if (n < k) {
        long long aaa = 0;
        for (long long i = 0; i < n + 1; i++) {
            aaa = (aaa + (nCrModPFermat(n, i, p) * power(i, k, p)) % 1000000007) % 1000000007;
        }
        cout << aaa;
        return 0;
    }

    for (long long i = 1; i < k + 5; i++) {
        for (long long j = 1; j < i + 1; j++) {
            coeff[i][j] = max(1LL, coeff[i][j]);
            coeff[i][j] = (coeff[i - 1][j] * j + coeff[i - 1][j - 1]) % 1000000007;
        }
    }

    for (long long i = 2; i < k + 1; i++) {
        long long temp = coeff[k][i];
        temp = (temp * power(2, n - i, p)) % 1000000007;
        for (long long j = 1; j < i; j++) {
            temp = (temp * (n - j) + 1000000007) % 1000000007;
        }
        fuck = (fuck + temp) % 1000000007;
    }

    fuck = (fuck + power(2, n - 1, p)) % 1000000007;
    fuck = (fuck * n) % 1000000007;
    cout << fuck << '\n';
}
```

**Note:** The thresholds in the checker functions are assumed based on the given constraints and need careful tuning with actual profiling data.

