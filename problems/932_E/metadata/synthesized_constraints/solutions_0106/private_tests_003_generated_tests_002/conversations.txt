system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is xk. 

Output the sum of costs over all non-empty subsets of people.

Input

Only line of input contains two integers N (1 ≤ N ≤ 109) representing total number of people and k (1 ≤ k ≤ 5000).

Output

Output the sum of costs for all non empty subsets modulo 109 + 7.

Examples

Input

1 1


Output

1


Input

3 2


Output

24

Note

In the first example, there is only one non-empty subset {1} with cost 11 = 1.

In the second example, there are seven non-empty subsets.

- {1} with cost 12 = 1

- {2} with cost 12 = 1

- {1, 2} with cost 22 = 4

- {3} with cost 12 = 1

- {1, 3} with cost 22 = 4

- {2, 3} with cost 22 = 4

- {1, 2, 3} with cost 32 = 9

The total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long mod = 1e9 + 7;
long long K[5050], D[5050];
int T[5050][5050];
long long n, k, ans;
long long mypow(long long a, long long b) {
  if (!b) return 1;
  long long ret = mypow(a, b >> 1);
  ret *= ret;
  ret %= mod;
  return ret * (b & 1 ? a : 1) % mod;
}
int main() {
  long long i, j, s;
  scanf("%lld%lld", &n, &k);
  if (n < k) {
    T[0][0] = 1;
    for (i = 1; i <= n; i++) {
      T[i][0] = 1;
      for (j = 1; j <= i; j++)
        T[i][j] = ((long long)T[i - 1][j] + (long long)T[i - 1][j - 1]) % mod;
    }
    for (i = 0; i <= n; i++) {
      ans = (ans + (long long)T[n][i] * mypow(i, k)) % mod;
    }
    printf("%lld\n", ans);
    return 0;
  }
  T[0][0] = s = 1;
  for (i = 1; i <= k; i++) {
    s = s * (n - i + 1) % mod;
    K[i] = (s * mypow(2, n - i)) % mod;
    for (j = 0; j < i; j++) {
      T[i][j] = (((long long)T[i][j] - (i - 1) * (long long)T[i - 1][j]) % mod +
                 mod) %
                mod;
      T[i][j + 1] = ((long long)T[i][j + 1] + (long long)T[i - 1][j]) % mod;
    }
  }
  D[k] = -1;
  for (i = k; i >= 0; i--) {
    s = -D[i];
    ans = ((ans + s * K[i]) % mod + mod) % mod;
    for (j = 0; j <= i; j++)
      D[j] = ((D[j] + s * (long long)T[i][j]) % mod + mod) % mod;
  }
  printf("%lld\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4278 3849


(G.2) Fast Input

318 3849


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long K[5050], D[5050]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int T[5050][5050]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long n, k, ans; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long mypow(long long a, long long b) { /* line 7 slow_hit_count: 47922, fast_hit_count: 4147 */
  if (!b) return 1; /* line 8 slow_hit_count: 47922, fast_hit_count: 4147 */
  long long ret = mypow(a, b >> 1); /* line 9 slow_hit_count: 44073, fast_hit_count: 3828 */
  ret *= ret; /* line 10 slow_hit_count: 44073, fast_hit_count: 3828 */
  ret %= mod; /* line 11 slow_hit_count: 44073, fast_hit_count: 3828 */
  return ret * (b & 1 ? a : 1) % mod; /* line 12 slow_hit_count: 44073, fast_hit_count: 3828 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  long long i, j, s; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%lld%lld", &n, &k); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  if (n < k) { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
    T[0][0] = 1; /* line 18 slow_hit_count: 0, fast_hit_count: 1 */
    for (i = 1; i <= n; i++) { /* line 19 slow_hit_count: 0, fast_hit_count: 319 */
      T[i][0] = 1; /* line 20 slow_hit_count: 0, fast_hit_count: 318 */
      for (j = 1; j <= i; j++) /* line 21 slow_hit_count: 0, fast_hit_count: 51039 */
        T[i][j] = ((long long)T[i - 1][j] + (long long)T[i - 1][j - 1]) % mod; /* line 22 slow_hit_count: 0, fast_hit_count: 50721 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    for (i = 0; i <= n; i++) { /* line 24 slow_hit_count: 0, fast_hit_count: 320 */
      ans = (ans + (long long)T[n][i] * mypow(i, k)) % mod; /* line 25 slow_hit_count: 0, fast_hit_count: 319 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%lld\n", ans); /* line 27 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 28 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  T[0][0] = s = 1; /* line 30 slow_hit_count: 1, fast_hit_count: 0 */
  for (i = 1; i <= k; i++) { /* line 31 slow_hit_count: 3850, fast_hit_count: 0 */
    s = s * (n - i + 1) % mod; /* line 32 slow_hit_count: 3849, fast_hit_count: 0 */
    K[i] = (s * mypow(2, n - i)) % mod; /* line 33 slow_hit_count: 3849, fast_hit_count: 0 */
    for (j = 0; j < i; j++) { /* line 34 slow_hit_count: 7413174, fast_hit_count: 0 */
      T[i][j] = (((long long)T[i][j] - (i - 1) * (long long)T[i - 1][j]) % mod + /* line 35 slow_hit_count: 7409325, fast_hit_count: 0 */
                 mod) % /* line 36 slow_hit_count: 7409325, fast_hit_count: 0 */
                mod; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      T[i][j + 1] = ((long long)T[i][j + 1] + (long long)T[i - 1][j]) % mod; /* line 38 slow_hit_count: 7409325, fast_hit_count: 0 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  D[k] = -1; /* line 41 slow_hit_count: 1, fast_hit_count: 0 */
  for (i = k; i >= 0; i--) { /* line 42 slow_hit_count: 3851, fast_hit_count: 0 */
    s = -D[i]; /* line 43 slow_hit_count: 3850, fast_hit_count: 0 */
    ans = ((ans + s * K[i]) % mod + mod) % mod; /* line 44 slow_hit_count: 3850, fast_hit_count: 0 */
    for (j = 0; j <= i; j++) /* line 45 slow_hit_count: 7417025, fast_hit_count: 0 */
      D[j] = ((D[j] + s * (long long)T[i][j]) % mod + mod) % mod; /* line 46 slow_hit_count: 7413175, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", ans); /* line 48 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 49 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issues in the given C code, let's follow the required analysis phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The `mypow` function is heavily used in both fast and slow inputs, but significantly more in the slow input (`slow_hit_count: 47922` vs. `fast_hit_count: 4147`).
   - Lines 30 to 46 inside the main logic for handling `n >= k` are heavily hit for the slow input but not at all for the fast input. This suggests that the slowdown arises when dealing with larger values of `n`.

2. **Pinpoint Lines with More Hits in Slow Input:**
   - The loop starting at line 31 is hit `3850` times for the slow input and not at all for the fast input, indicating that this part of the code is critical for larger `n`.
   - Nested loops at lines 34 and 45 result in millions of hits for the slow input (`7413174` and `7417025`, respectively), indicating inefficient operations likely due to combinations of `i` and `j`.

3. **Interaction with Data Structures:**
   - Array `T` is used for binomial coefficient calculations and is manipulated heavily in loops, particularly lines 34-38 and lines 45-46. The constant recalculation and updates suggest potential inefficiencies, especially when dealing with large values of `k` and `n`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Generate Natural Language Statements:**

   - **Invariant 1: Exponential Growth in Combinations**
     - Natural Language Description: "The performance degrades significantly when `n` is large because the number of combinations to process grows exponentially, especially when `n` approaches or exceeds `k`. This results in nested loops handling large matrices of combinations."
   
   - **Invariant 2: Expensive Power Computations**
     - Natural Language Description: "The use of recursive power computations in `mypow` is a bottleneck when repeatedly calculating powers for large `n`. The recursive nature of `mypow` results in deep recursion and excessive recomputation."

2. **Avoid Using Specific Numeric Values:**
   - These invariants are formulated to abstract general categories such as "large `n`" or "exponential growth in combinations," avoiding reliance on specific numbers from the input.

3. **Correlate Conditions to Input Patterns:**
   - The slow paths are triggered when `n` is close to `k` and large, leading to exponential combinations and recursion depth in power calculations, highlighting the inefficiency in handling these specific constraints.

4. **Realistic Triggers Given Constraints:**
   - Given the constraints (`n <= 10^9` and `k <= 5000`), scenarios with `n` significantly greater than `k` especially near upper bounds like `k` can be expected to trigger these slow paths due to the sheer number of combination computations and repeated recursive power calculations.

These insights can help focus optimizations on reducing the calculation overhead in these scenarios, perhaps through iterative power computation or optimizing combination calculations when `n` is large.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is xk. 

Output the sum of costs over all non-empty subsets of people.

Input

Only line of input contains two integers N (1 ≤ N ≤ 109) representing total number of people and k (1 ≤ k ≤ 5000).

Output

Output the sum of costs for all non empty subsets modulo 109 + 7.

Examples

Input

1 1


Output

1


Input

3 2


Output

24

Note

In the first example, there is only one non-empty subset {1} with cost 11 = 1.

In the second example, there are seven non-empty subsets.

- {1} with cost 12 = 1

- {2} with cost 12 = 1

- {1, 2} with cost 22 = 4

- {3} with cost 12 = 1

- {1, 3} with cost 22 = 4

- {2, 3} with cost 22 = 4

- {1, 2, 3} with cost 32 = 9

The total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.

Solution (C++ code):
{solution}


assistant: Certainly! Let's implement the natural language invariants as runtime checks in C++.

### Phase 3: Implement the Natural Language Invariants in C++

**Invariant 1: Exponential Growth in Combinations**
- This invariant suggests that when `n` is large and approaches or exceeds `k`, the program should warn about exponential growth in combinations being computed.

```cpp
void check_combination_invariant(long long n, long long k) {
    if (n > k) {
        cerr << "Warning: Performance bottleneck due to exponential growth in combinations!" << endl;
        abort();
    }
}
```

**Invariant 2: Expensive Power Computations**
- This invariant suggests that the computation of powers could be expensive if `mypow` is invoked repeatedly with large values.

```cpp
void check_power_invariant(long long n, long long k) {
    if (n > 1000 && k > 1000) { // Example threshold for large n and k
        cerr << "Warning: Performance bottleneck due to expensive power computations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Conditional Checks in the Original Program

Here's how you can integrate these checks into the C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long mod = 1e9 + 7;
long long K[5050], D[5050];
int T[5050][5050];
long long n, k, ans;

long long mypow(long long a, long long b) {
    if (!b) return 1;
    long long ret = mypow(a, b >> 1);
    ret *= ret;
    ret %= mod;
    return ret * (b & 1 ? a : 1) % mod;
}

void check_combination_invariant(long long n, long long k) {
    if (n > k) {
        cerr << "Warning: Performance bottleneck due to exponential growth in combinations!" << endl;
        abort();
    }
}

void check_power_invariant(long long n, long long k) {
    if (n > 1000 && k > 1000) { // Example threshold for large n and k
        cerr << "Warning: Performance bottleneck due to expensive power computations!" << endl;
        abort();
    }
}

int main() {
    long long i, j, s;
    scanf("%lld%lld", &n, &k);

    // Check for exponential growth in combinations
    check_combination_invariant(n, k);

    // Check for expensive power computations
    check_power_invariant(n, k);

    if (n < k) {
        T[0][0] = 1;
        for (i = 1; i <= n; i++) {
            T[i][0] = 1;
            for (j = 1; j <= i; j++)
                T[i][j] = ((long long)T[i - 1][j] + (long long)T[i - 1][j - 1]) % mod;
        }
        for (i = 0; i <= n; i++) {
            ans = (ans + (long long)T[n][i] * mypow(i, k)) % mod;
        }
        printf("%lld\n", ans);
        return 0;
    }
    T[0][0] = s = 1;
    for (i = 1; i <= k; i++) {
        s = s * (n - i + 1) % mod;
        K[i] = (s * mypow(2, n - i)) % mod;
        for (j = 0; j < i; j++) {
            T[i][j] = (((long long)T[i][j] - (i - 1) * (long long)T[i - 1][j]) % mod + mod) % mod;
            T[i][j + 1] = ((long long)T[i][j + 1] + (long long)T[i - 1][j]) % mod;
        }
    }
    D[k] = -1;
    for (i = k; i >= 0; i--) {
        s = -D[i];
        ans = ((ans + s * K[i]) % mod + mod) % mod;
        for (j = 0; j <= i; j++)
            D[j] = ((D[j] + s * (long long)T[i][j]) % mod + mod) % mod;
    }
    printf("%lld\n", ans);
    return 0;
}
```

### Explanation

- **Invariant 1 Check:** Placed after reading inputs. It detects large values of `n` relative to `k`, which can cause performance issues due to the exponential growth in combination calculations.
- **Invariant 2 Check:** Also placed after reading inputs to detect large values that could make the `mypow` function expensive due to large recursion depth.

These checks will help identify performance bottlenecks during runtime when `n` is large or when expensive power computations are repeatedly invoked.

