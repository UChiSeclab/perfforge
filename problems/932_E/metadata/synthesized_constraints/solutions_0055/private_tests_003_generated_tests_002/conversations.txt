system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is xk. 

Output the sum of costs over all non-empty subsets of people.

Input

Only line of input contains two integers N (1 ≤ N ≤ 109) representing total number of people and k (1 ≤ k ≤ 5000).

Output

Output the sum of costs for all non empty subsets modulo 109 + 7.

Examples

Input

1 1


Output

1


Input

3 2


Output

24

Note

In the first example, there is only one non-empty subset {1} with cost 11 = 1.

In the second example, there are seven non-empty subsets.

- {1} with cost 12 = 1

- {2} with cost 12 = 1

- {1, 2} with cost 22 = 4

- {3} with cost 12 = 1

- {1, 3} with cost 22 = 4

- {2, 3} with cost 22 = 4

- {1, 2, 3} with cost 32 = 9

The total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long Mod = 1e9 + 7;
const long long M = 5e3 + 10;
long long n, ans, k, s[M][M], dfac[M];
long long poww(long long a, long long b) {
  long long r = 1;
  while (b) {
    if (b & 1) r = r * a % Mod;
    a = a * a % Mod;
    b >>= 1;
  }
  return r;
}
long long fac[M], inv[M];
void init() {
  fac[0] = 1;
  for (long long i = 1; i < M; i++) fac[i] = fac[i - 1] * i % Mod;
  for (long long i = 0; i < M; i++) inv[i] = poww(fac[i], Mod - 2);
}
long long p = Mod;
long long C(long long m, long long n) {
  return fac[m] * inv[m - n] % p * inv[n] % p;
}
signed main() {
  cin >> n >> k;
  s[0][0] = 1;
  if (k >= n) {
    init();
    for (long long i = 1; i <= n; i++) ans = (ans + C(n, i) * poww(i, k)) % Mod;
    cout << ans;
    return 0;
  }
  for (long long i = 1; i <= k; i++) {
    for (long long j = 1; j <= i; j++)
      s[i][j] = (s[i - 1][j - 1] + j * s[i - 1][j] % Mod) % Mod;
  }
  dfac[0] = 1;
  for (long long i = 1; i <= k; i++) dfac[i] = dfac[i - 1] * (n - i + 1) % Mod;
  for (long long i = 0; i <= k; i++)
    ans = (ans + s[k][i] * dfac[i] % Mod * poww(2, n - i) % Mod) % Mod;
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4278 3849


(G.2) Fast Input

318 3849


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long Mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long M = 5e3 + 10; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long n, ans, k, s[M][M], dfac[M]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long poww(long long a, long long b) { /* line 6 slow_hit_count: 3850, fast_hit_count: 5328 */
  long long r = 1; /* line 7 slow_hit_count: 3850, fast_hit_count: 5328 */
  while (b) { /* line 8 slow_hit_count: 47936, fast_hit_count: 159444 */
    if (b & 1) r = r * a % Mod; /* line 9 slow_hit_count: 44086, fast_hit_count: 154116 */
    a = a * a % Mod; /* line 10 slow_hit_count: 44086, fast_hit_count: 154116 */
    b >>= 1; /* line 11 slow_hit_count: 44086, fast_hit_count: 154116 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return r; /* line 13 slow_hit_count: 3850, fast_hit_count: 5328 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
long long fac[M], inv[M]; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
void init() { /* line 16 slow_hit_count: 0, fast_hit_count: 1 */
  fac[0] = 1; /* line 17 slow_hit_count: 0, fast_hit_count: 1 */
  for (long long i = 1; i < M; i++) fac[i] = fac[i - 1] * i % Mod; /* line 18 slow_hit_count: 0, fast_hit_count: 5010 */
  for (long long i = 0; i < M; i++) inv[i] = poww(fac[i], Mod - 2); /* line 19 slow_hit_count: 0, fast_hit_count: 5011 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 1 */
long long p = Mod; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
long long C(long long m, long long n) { /* line 22 slow_hit_count: 0, fast_hit_count: 318 */
  return fac[m] * inv[m - n] % p * inv[n] % p; /* line 23 slow_hit_count: 0, fast_hit_count: 318 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> k; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  s[0][0] = 1; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  if (k >= n) { /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
    init(); /* line 29 slow_hit_count: 0, fast_hit_count: 1 */
    for (long long i = 1; i <= n; i++) ans = (ans + C(n, i) * poww(i, k)) % Mod; /* line 30 slow_hit_count: 0, fast_hit_count: 319 */
    cout << ans; /* line 31 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 32 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 1; i <= k; i++) { /* line 34 slow_hit_count: 3850, fast_hit_count: 0 */
    for (long long j = 1; j <= i; j++) /* line 35 slow_hit_count: 7413174, fast_hit_count: 0 */
      s[i][j] = (s[i - 1][j - 1] + j * s[i - 1][j] % Mod) % Mod; /* line 36 slow_hit_count: 7409325, fast_hit_count: 0 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  dfac[0] = 1; /* line 38 slow_hit_count: 1, fast_hit_count: 0 */
  for (long long i = 1; i <= k; i++) dfac[i] = dfac[i - 1] * (n - i + 1) % Mod; /* line 39 slow_hit_count: 3850, fast_hit_count: 0 */
  for (long long i = 0; i <= k; i++) /* line 40 slow_hit_count: 3851, fast_hit_count: 0 */
    ans = (ans + s[k][i] * dfac[i] % Mod * poww(2, n - i) % Mod) % Mod; /* line 41 slow_hit_count: 3850, fast_hit_count: 0 */
  cout << ans; /* line 42 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 43 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 44 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the provided C program and determine performance bottlenecks that lead to slow execution, we need to focus on the differences in execution paths and hit counts between slow and fast runs. The goal is to derive performance-characterizing invariants that explain the slowdown without relying on specific numeric values from the inputs. Here is the analysis:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Hit Counts:**
   - The hit counts show a significant difference in the number of times the `poww` function is called. The slow input triggers `poww` 3850 times, whereas the fast input calls `poww` 5328 times, suggesting that `poww` contributes significantly to execution time, particularly due to the high number of operations within its loop.
   - The nested loop on lines 34-36, which is executed 7413174 times for the slow input, does not appear in the fast input scenario. This indicates that this loop is a major contributor to the slowdown.

2. **Inferences:**
   - The program uses a dynamic programming-like table `s` to compute Stirling numbers, and this table is highly dependent on the value of `k`. When `k` approaches the upper bound of its defined range, the table's computation becomes computationally intensive.
   - The combination of large `k` and the loop constructs results in a multiplication of computations, particularly in lines 34-41.

### Phase 2: Derive Performance-Characterizing Invariants

Here are potential performance-triggering conditions inferred from the code:

1. **Large `k` with Nested Computations:**
   - **Invariant:** "When `k` is large and close to the upper constraint, the nested loop that computes Stirling numbers becomes a computational bottleneck, leading to significant slowdowns."
   - **Explanation:** As `k` approaches its maximum value (5000), the nested loop's complexity increases exponentially, as shown by the hit counts. This results in excessive computations that slow down the program.

2. **Inefficient Power Computations:**
   - **Invariant:** "The function `poww`, used for computing powers, can become a bottleneck if called repeatedly with large exponents, particularly within nested loops."
   - **Explanation:** The `poww` function's while-loop executes many times if the exponent (such as `n - i` in line 41) is large, leading to prolonged execution times.

3. **Dynamic Factorial and Stirling Table Computation:**
   - **Invariant:** "When both `n` and `k` are large, the precomputation of factorials and Stirling numbers at high indices may lead to performance degradation."
   - **Explanation:** The dynamic programming approach for precomputing these values can result in high memory and processing overhead if both `n` and `k` reach upper limits.

### Conclusion

The slow execution path is mainly triggered by large values of `k` which cause exhaustive calculations in nested loops and repeated calls to the power function. These conditions exponentially increase the computational complexity, leading to significant slowdowns as observed in the provided hit counts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is xk. 

Output the sum of costs over all non-empty subsets of people.

Input

Only line of input contains two integers N (1 ≤ N ≤ 109) representing total number of people and k (1 ≤ k ≤ 5000).

Output

Output the sum of costs for all non empty subsets modulo 109 + 7.

Examples

Input

1 1


Output

1


Input

3 2


Output

24

Note

In the first example, there is only one non-empty subset {1} with cost 11 = 1.

In the second example, there are seven non-empty subsets.

- {1} with cost 12 = 1

- {2} with cost 12 = 1

- {1, 2} with cost 22 = 4

- {3} with cost 12 = 1

- {1, 3} with cost 22 = 4

- {2, 3} with cost 22 = 4

- {1, 2, 3} with cost 32 = 9

The total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

To address the performance issues identified, we will implement the performance-characterizing invariants inferred in natural language as runtime checks in C++. Here are the checker implementations:

1. **Checker for Large `k` and Nested Computations:**
   ```cpp
   void check_large_k_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - large k with nested computations!" << endl;
           abort();
       }
   }
   ```

2. **Checker for Inefficient Power Computations:**
   ```cpp
   void check_power_function_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - inefficient power computations!" << endl;
           abort();
       }
   }
   ```

3. **Checker for Dynamic Factorial and Stirling Table Computation:**
   ```cpp
   void check_factorial_stirling_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - factorial and Stirling table growth!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

We'll now integrate these checks into the provided C++ solution, placing them effectively to avoid adding unnecessary overhead in tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long Mod = 1e9 + 7;
const long long M = 5e3 + 10;
long long n, ans, k, s[M][M], dfac[M];

long long poww(long long a, long long b) {
    long long r = 1;
    while (b) {
        if (b & 1) r = r * a % Mod;
        a = a * a % Mod;
        b >>= 1;
    }
    return r;
}

long long fac[M], inv[M];

void init() {
    fac[0] = 1;
    for (long long i = 1; i < M; i++) fac[i] = fac[i - 1] * i % Mod;
    for (long long i = 0; i < M; i++) inv[i] = poww(fac[i], Mod - 2);
}

long long p = Mod;

long long C(long long m, long long n) {
    return fac[m] * inv[m - n] % p * inv[n] % p;
}

// Performance checkers
void check_large_k_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large k with nested computations!" << endl;
        abort();
    }
}

void check_power_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient power computations!" << endl;
        abort();
    }
}

void check_factorial_stirling_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - factorial and Stirling table growth!" << endl;
        abort();
    }
}

signed main() {
    cin >> n >> k;

    // Check for large k causing nested computation bottlenecks
    check_large_k_invariant(k > 4000);

    s[0][0] = 1;
    if (k >= n) {
        init();
        for (long long i = 1; i <= n; i++) {
            // Check for inefficient power computations in a loop
            check_power_function_invariant(i > 1000);

            ans = (ans + C(n, i) * poww(i, k)) % Mod;
        }
        cout << ans;
        return 0;
    }

    for (long long i = 1; i <= k; i++) {
        for (long long j = 1; j <= i; j++)
            s[i][j] = (s[i - 1][j - 1] + j * s[i - 1][j] % Mod) % Mod;
    }

    // Check for factorial and Stirling table growth
    check_factorial_stirling_invariant(k > 4000);

    dfac[0] = 1;
    for (long long i = 1; i <= k; i++) dfac[i] = dfac[i - 1] * (n - i + 1) % Mod;

    for (long long i = 0; i <= k; i++) {
        // Check for inefficient power computations in a loop
        check_power_function_invariant(n - i > 1000);

        ans = (ans + s[k][i] * dfac[i] % Mod * poww(2, n - i) % Mod) % Mod;
    }

    cout << ans;
    return 0;
}
```

### Explanation:

- **Large `k` Checker:** Placed after inputs are read to catch high `k` values that would lead to complex nested computations.
- **Power Computation Checker:** Located before power calculations in loops to prevent excessive costs when computing powers of large exponents.
- **Factorial and Stirling Table Checker:** Added after Stirling table computation to detect scenarios where its size and complexity become problematic.

These checks will help identify and abort execution in scenarios where known performance bottlenecks would lead to prolonged operations, aiding in early detection during testing and fuzzing.

