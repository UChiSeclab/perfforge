system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is xk. 

Output the sum of costs over all non-empty subsets of people.

Input

Only line of input contains two integers N (1 ≤ N ≤ 109) representing total number of people and k (1 ≤ k ≤ 5000).

Output

Output the sum of costs for all non empty subsets modulo 109 + 7.

Examples

Input

1 1


Output

1


Input

3 2


Output

24

Note

In the first example, there is only one non-empty subset {1} with cost 11 = 1.

In the second example, there are seven non-empty subsets.

- {1} with cost 12 = 1

- {2} with cost 12 = 1

- {1, 2} with cost 22 = 4

- {3} with cost 12 = 1

- {1, 3} with cost 22 = 4

- {2, 3} with cost 22 = 4

- {1, 2, 3} with cost 32 = 9

The total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const int MOD = 1000000007;
inline int add(int a, int b) { return (a += b) >= MOD ? a - MOD : a; }
inline int sub(int a, int b) { return (a -= b) < 0 ? a + MOD : a; }
inline int mul(int a, int b) { return 1ll * a * b % MOD; }
inline int qpow(int a, int p) {
  int ret = 1;
  for (p += (p < 0) * (MOD - 1); p; p >>= 1, a = mul(a, a))
    if (p & 1) ret = mul(ret, a);
  return ret;
}
const int MAXN = 5010;
int Strb[MAXN][MAXN];
int fac[MAXN];
int inv[MAXN];
int n, k;
int main() {
  std::cin >> n >> k;
  if (n <= k) {
    fac[0] = 1;
    for (int i = 1; i <= n; ++i) fac[i] = mul(fac[i - 1], i);
    inv[n] = qpow(fac[n], MOD - 2);
    for (int i = n; i >= 1; --i) inv[i - 1] = mul(inv[i], i);
    int ans = 0;
    for (int i = 1; i <= k; ++i) {
      ans = add(ans, mul(mul(fac[n], mul(inv[i], inv[n - i])), qpow(i, k)));
    }
    printf("%d\n", ans);
    return 0;
  }
  Strb[0][0] = 1;
  for (int i = 1; i <= k; ++i)
    for (int j = 1; j <= i; ++j)
      Strb[i][j] = add(Strb[i - 1][j - 1], mul(j, Strb[i - 1][j]));
  int ans = 0, p = n;
  for (int i = 1; i <= k; p = mul(p, n - i), ++i) {
    ans = add(ans, mul(Strb[k][i], mul(p, qpow(2, n - i))));
  }
  printf("%d\n", ans);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4278 3849


(G.2) Fast Input

318 3849


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 1000000007; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
inline int add(int a, int b) { return (a += b) >= MOD ? a - MOD : a; } /* line 3 slow_hit_count: 7413174, fast_hit_count: 3849 */
inline int sub(int a, int b) { return (a -= b) < 0 ? a + MOD : a; } /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
inline int mul(int a, int b) { return 1ll * a * b % MOD; } /* line 5 slow_hit_count: 7488547, fast_hit_count: 81510 */
inline int qpow(int a, int p) { /* line 6 slow_hit_count: 3849, fast_hit_count: 3850 */
  int ret = 1; /* line 7 slow_hit_count: 3849, fast_hit_count: 3850 */
  for (p += (p < 0) * (MOD - 1); p; p >>= 1, a = mul(a, a)) /* line 8 slow_hit_count: 47922, fast_hit_count: 50068 */
    if (p & 1) ret = mul(ret, a); /* line 9 slow_hit_count: 44073, fast_hit_count: 46218 */
  return ret; /* line 10 slow_hit_count: 3849, fast_hit_count: 3850 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 5010; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int Strb[MAXN][MAXN]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int fac[MAXN]; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int inv[MAXN]; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int n, k; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  std::cin >> n >> k; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  if (n <= k) { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    fac[0] = 1; /* line 20 slow_hit_count: 0, fast_hit_count: 1 */
    for (int i = 1; i <= n; ++i) fac[i] = mul(fac[i - 1], i); /* line 21 slow_hit_count: 0, fast_hit_count: 319 */
    inv[n] = qpow(fac[n], MOD - 2); /* line 22 slow_hit_count: 0, fast_hit_count: 1 */
    for (int i = n; i >= 1; --i) inv[i - 1] = mul(inv[i], i); /* line 23 slow_hit_count: 0, fast_hit_count: 319 */
    int ans = 0; /* line 24 slow_hit_count: 0, fast_hit_count: 1 */
    for (int i = 1; i <= k; ++i) { /* line 25 slow_hit_count: 0, fast_hit_count: 3850 */
      ans = add(ans, mul(mul(fac[n], mul(inv[i], inv[n - i])), qpow(i, k))); /* line 26 slow_hit_count: 0, fast_hit_count: 3849 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%d\n", ans); /* line 28 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 29 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  Strb[0][0] = 1; /* line 31 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= k; ++i) /* line 32 slow_hit_count: 3850, fast_hit_count: 0 */
    for (int j = 1; j <= i; ++j) /* line 33 slow_hit_count: 7413174, fast_hit_count: 0 */
      Strb[i][j] = add(Strb[i - 1][j - 1], mul(j, Strb[i - 1][j])); /* line 34 slow_hit_count: 7409325, fast_hit_count: 0 */
  int ans = 0, p = n; /* line 35 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= k; p = mul(p, n - i), ++i) { /* line 36 slow_hit_count: 3850, fast_hit_count: 0 */
    ans = add(ans, mul(Strb[k][i], mul(p, qpow(2, n - i)))); /* line 37 slow_hit_count: 3849, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 39 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 40 slow_hit_count: 1, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis of Hit Counts

1. **Line 3 (`add` function call):** 
   - Slow: 7,413,174 hits
   - Fast: 3,849 hits
   - This function is called significantly more in the slow input, primarily due to its use in the nested loop for constructing Stirling numbers.

2. **Line 5 (`mul` function call):** 
   - Slow: 7,488,547 hits
   - Fast: 81,510 hits
   - Similarly, `mul` is heavily used throughout the program, especially in nested loops and exponentiation operations.

3. **Line 8 (qpow loop):** 
   - Slow: 47,922 hits
   - Fast: 50,068 hits
   - This line executes the qpow function, which is used for exponentiation by squaring. It shows moderate difference between slow and fast, but not as significant as others.

4. **Line 33 (Second nested loop on Stirling numbers):** 
   - Slow: 7,413,174 hits
   - Fast: 0 hits
   - The nested loop constructing Stirling numbers of the second kind is a major contributor to the slow performance. It grows with `k`, leading to a quadratic number of operations.

5. **Line 36 (Loop for cost calculation):**
   - Slow: 3,850 hits
   - Fast: 0 hits
   - This loop calculates the final answer using Stirling numbers, also contributing to the slowness when `k` is large.

### Inference

- The main performance bottleneck arises from the nested loops that compute and utilize Stirling numbers of the second kind. This particularly affects scenarios where `k` is large, as these loops operate in a quadratic fashion relative to `k`.

## Phase 2: Derive Performance-Characterizing Invariants

### Natural Language Invariants

1. **Nested Loop Invariant:**
   - "When `k` is large, the nested loops for computing Stirling numbers can become a dominant factor in execution time, especially since they scale quadratically with respect to `k`."
   
2. **Exponentiation Invariant:**
   - "When both `n` and `k` are large, the repeated exponentiation operations can further compound the computational load, as they are executed multiple times in a nested context."

3. **Quadratic Calculation Bottleneck:**
   - "If `k` approaches its upper limit, the computation of subsets using Stirling numbers and subsequent calculations may result in a quadratic growth in operations, leading to slowdowns."

### Thresholds and Conditions

- **Thresholds for `k`:** As `k` approaches its upper bound (5000), the number of calculations involving Stirling numbers and exponentiations increases quadratically, leading to significant slowdowns.
- **Interaction with Inputs:** The slowdown is not directly due to `n` exceeding typical constraints but rather due to the large `k` value, which induces heavy calculations even for moderate `n`.

### Summary

The program experiences performance degradation primarily due to the quadratic growth in Stirling number computations when `k` is large. The combination of large `k` and moderately large `n` can lead to a significant increase in operations, heavily affecting performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is xk. 

Output the sum of costs over all non-empty subsets of people.

Input

Only line of input contains two integers N (1 ≤ N ≤ 109) representing total number of people and k (1 ≤ k ≤ 5000).

Output

Output the sum of costs for all non empty subsets modulo 109 + 7.

Examples

Input

1 1


Output

1


Input

3 2


Output

24

Note

In the first example, there is only one non-empty subset {1} with cost 11 = 1.

In the second example, there are seven non-empty subsets.

- {1} with cost 12 = 1

- {2} with cost 12 = 1

- {1, 2} with cost 22 = 4

- {3} with cost 12 = 1

- {1, 3} with cost 22 = 4

- {2, 3} with cost 22 = 4

- {1, 2, 3} with cost 32 = 9

The total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing Performance-Characterizing Invariants in C++

Based on the natural language invariants derived earlier, here are the C++ checkers:

```cpp
// Checker to detect if k is large, potentially causing slow quadratic operations
void check_stirling_invariant(int k) {
    if (k > 4000) { // Threshold chosen considering upper limit and problem context
        cerr << "Warning: Performance bottleneck condition triggered - large k causing heavy Stirling number computations!" << endl;
        abort();
    }
}

// Checker to detect potential performance issues from large exponentiation operations
void check_exponentiation_invariant(int n, int k) {
    if (n > 100000 && k > 1000) { // Arbitrary threshold to detect performance impact
        cerr << "Warning: Performance bottleneck condition triggered - large n and k causing repeated exponentiation!" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checks into the Original Program

Here's the original C++ code with integrated performance checkers:

```cpp
#include <bits/stdc++.h>
const int MOD = 1000000007;
inline int add(int a, int b) { return (a += b) >= MOD ? a - MOD : a; }
inline int sub(int a, int b) { return (a -= b) < 0 ? a + MOD : a; }
inline int mul(int a, int b) { return 1ll * a * b % MOD; }
inline int qpow(int a, int p) {
  int ret = 1;
  for (p += (p < 0) * (MOD - 1); p; p >>= 1, a = mul(a, a))
    if (p & 1) ret = mul(ret, a);
  return ret;
}
const int MAXN = 5010;
int Strb[MAXN][MAXN];
int fac[MAXN];
int inv[MAXN];
int n, k;

// Checker to detect if k is large, potentially causing slow quadratic operations
void check_stirling_invariant(int k) {
    if (k > 4000) { // Threshold chosen considering upper limit and problem context
        cerr << "Warning: Performance bottleneck condition triggered - large k causing heavy Stirling number computations!" << endl;
        abort();
    }
}

// Checker to detect potential performance issues from large exponentiation operations
void check_exponentiation_invariant(int n, int k) {
    if (n > 100000 && k > 1000) { // Arbitrary threshold to detect performance impact
        cerr << "Warning: Performance bottleneck condition triggered - large n and k causing repeated exponentiation!" << endl;
        abort();
    }
}

int main() {
  std::cin >> n >> k;

  // Perform checks for potential bottlenecks
  check_stirling_invariant(k);
  check_exponentiation_invariant(n, k);

  if (n <= k) {
    fac[0] = 1;
    for (int i = 1; i <= n; ++i) fac[i] = mul(fac[i - 1], i);
    inv[n] = qpow(fac[n], MOD - 2);
    for (int i = n; i >= 1; --i) inv[i - 1] = mul(inv[i], i);
    int ans = 0;
    for (int i = 1; i <= k; ++i) {
      ans = add(ans, mul(mul(fac[n], mul(inv[i], inv[n - i])), qpow(i, k)));
    }
    printf("%d\n", ans);
    return 0;
  }
  Strb[0][0] = 1;
  for (int i = 1; i <= k; ++i)
    for (int j = 1; j <= i; ++j)
      Strb[i][j] = add(Strb[i - 1][j - 1], mul(j, Strb[i - 1][j]));
  int ans = 0, p = n;
  for (int i = 1; i <= k; p = mul(p, n - i), ++i) {
    ans = add(ans, mul(Strb[k][i], mul(p, qpow(2, n - i))));
  }
  printf("%d\n", ans);
}
```

### Explanation of Integration

- **`check_stirling_invariant`:** This check is placed after reading inputs to capture cases where `k` is large, which can lead to slow operations with Stirling numbers.
- **`check_exponentiation_invariant`:** This check is also placed after input reading to intercept scenarios where both `n` and `k` are large, potentially causing repeated and expensive exponentiation operations.
- **Thresholds:** The thresholds in the checks reflect heuristic limits based on problem constraints and observed behavior in the analysis. These help in identifying potential performance bottlenecks early in execution.

