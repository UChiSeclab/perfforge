system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kevin and Nicky Sun have invented a new game called Lieges of Legendre. In this game, two players take turns modifying the game state with Kevin moving first. Initially, the game is set up so that there are n piles of cows, with the i-th pile containing ai cows. During each player's turn, that player calls upon the power of Sunlight, and uses it to either:

  1. Remove a single cow from a chosen non-empty pile. 
  2. Choose a pile of cows with even size 2·x (x > 0), and replace it with k piles of x cows each. 



The player who removes the last cow wins. Given n, k, and a sequence a1, a2, ..., an, help Kevin and Nicky find the winner, given that both sides play in optimal way.

Input

The first line of the input contains two space-separated integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 109).

The second line contains n integers, a1, a2, ... an (1 ≤ ai ≤ 109) describing the initial state of the game. 

Output

Output the name of the winning player, either "Kevin" or "Nicky" (without quotes).

Examples

Input

2 1
3 4


Output

Kevin


Input

1 2
3


Output

Nicky

Note

In the second sample, Nicky can win in the following way: Kevin moves first and is forced to remove a cow, so the pile contains two cows after his move. Next, Nicky replaces this pile of size 2 with two piles of size 1. So the game state is now two piles of size 1. Kevin then removes one of the remaining cows and Nicky wins by removing the other.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 100005;
int n, k, a[N], flag[N], sg[N];
void Calc_SG() {
  memset(sg, 0, sizeof(sg));
  for (register int i = 1; i <= 100000; i++) {
    if (i % 2)
      flag[sg[i - 1]] = 1;
    else {
      flag[sg[i - 1]] = 1;
      flag[sg[i / 2]] = 1;
    }
    for (register int j = 0; j <= 100000; j++)
      if (flag[j] == 0) {
        sg[i] = j;
        break;
      }
    if (i % 2)
      flag[sg[i - 1]] = 0;
    else {
      flag[sg[i - 1]] = 0;
      flag[sg[i / 2]] = 0;
    }
  }
}
int Cal(int x) {
  int rev = 0;
  while (x > 100000) {
    if (x % 2) {
      break;
    }
    rev++;
    x /= 2;
  }
  if (x <= 100000) {
    if (sg[x] == 0) {
      if (rev % 2)
        return 1;
      else
        return 2;
    }
    if (sg[x] == 1) {
      if (rev % 2)
        return 2;
      else
        return 1;
    }
    if (sg[x] == 2) {
      if (rev % 2)
        return 1;
      else
        return 2;
    }
  }
  if (rev % 2)
    return 1;
  else
    return 2;
}
int main() {
  scanf("%d %d", &n, &k);
  if (k % 2 == 0) {
    int ans = 0;
    for (register int i = 1; i <= n; i++) {
      scanf("%d", &a[i]);
      if (a[i] >= 3) {
        if (a[i] % 2 == 0)
          ans ^= 1;
        else
          ans ^= 0;
      } else
        ans ^= a[i];
    }
    if (ans == 0)
      puts("Nicky");
    else
      puts("Kevin");
  } else {
    int ans = 0;
    Calc_SG();
    for (register int i = 1; i <= n; i++) {
      scanf("%d", &a[i]);
      if (a[i] % 2 == 1 && a[i] >= 4)
        ans ^= 0;
      else {
        if (a[i] <= 100000)
          ans ^= sg[a[i]];
        else
          ans ^= Cal(a[i]);
      }
    }
    if (ans == 0)
      puts("Nicky");
    else
      puts("Kevin");
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

9 1
8 2 9 4 7 5 2 4 9


(G.2) Fast Input

9 2
8 2 9 4 7 5 2 4 9


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 100005; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, a[N], flag[N], sg[N]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
void Calc_SG() { /* line 5 slow_hit_count: 1, fast_hit_count: 0 */
  memset(sg, 0, sizeof(sg)); /* line 6 slow_hit_count: 1, fast_hit_count: 0 */
  for (register int i = 1; i <= 100000; i++) { /* line 7 slow_hit_count: 100001, fast_hit_count: 0 */
    if (i % 2) /* line 8 slow_hit_count: 100000, fast_hit_count: 0 */
      flag[sg[i - 1]] = 1; /* line 9 slow_hit_count: 50000, fast_hit_count: 0 */
    else { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
      flag[sg[i - 1]] = 1; /* line 11 slow_hit_count: 50000, fast_hit_count: 0 */
      flag[sg[i / 2]] = 1; /* line 12 slow_hit_count: 50000, fast_hit_count: 0 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    for (register int j = 0; j <= 100000; j++) /* line 14 slow_hit_count: 166668, fast_hit_count: 0 */
      if (flag[j] == 0) { /* line 15 slow_hit_count: 166668, fast_hit_count: 0 */
        sg[i] = j; /* line 16 slow_hit_count: 100000, fast_hit_count: 0 */
        break; /* line 17 slow_hit_count: 100000, fast_hit_count: 0 */
      } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    if (i % 2) /* line 19 slow_hit_count: 100000, fast_hit_count: 0 */
      flag[sg[i - 1]] = 0; /* line 20 slow_hit_count: 50000, fast_hit_count: 0 */
    else { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
      flag[sg[i - 1]] = 0; /* line 22 slow_hit_count: 50000, fast_hit_count: 0 */
      flag[sg[i / 2]] = 0; /* line 23 slow_hit_count: 50000, fast_hit_count: 0 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 1, fast_hit_count: 0 */
int Cal(int x) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  int rev = 0; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  while (x > 100000) { /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    if (x % 2) { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      break; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    rev++; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    x /= 2; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  if (x <= 100000) { /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    if (sg[x] == 0) { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      if (rev % 2) /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
        return 1; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
        return 2; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    if (sg[x] == 1) { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
      if (rev % 2) /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
        return 2; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
        return 1; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    if (sg[x] == 2) { /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      if (rev % 2) /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
        return 1; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      else /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
        return 2; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  if (rev % 2) /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    return 1; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
    return 2; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d", &n, &k); /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  if (k % 2 == 0) { /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
    int ans = 0; /* line 64 slow_hit_count: 0, fast_hit_count: 1 */
    for (register int i = 1; i <= n; i++) { /* line 65 slow_hit_count: 0, fast_hit_count: 10 */
      scanf("%d", &a[i]); /* line 66 slow_hit_count: 0, fast_hit_count: 9 */
      if (a[i] >= 3) { /* line 67 slow_hit_count: 0, fast_hit_count: 9 */
        if (a[i] % 2 == 0) /* line 68 slow_hit_count: 0, fast_hit_count: 7 */
          ans ^= 1; /* line 69 slow_hit_count: 0, fast_hit_count: 3 */
        else /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
          ans ^= 0; /* line 71 slow_hit_count: 0, fast_hit_count: 4 */
      } else /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
        ans ^= a[i]; /* line 73 slow_hit_count: 0, fast_hit_count: 2 */
    } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
    if (ans == 0) /* line 75 slow_hit_count: 0, fast_hit_count: 1 */
      puts("Nicky"); /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
      puts("Kevin"); /* line 78 slow_hit_count: 0, fast_hit_count: 1 */
  } else { /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
    int ans = 0; /* line 80 slow_hit_count: 1, fast_hit_count: 0 */
    Calc_SG(); /* line 81 slow_hit_count: 1, fast_hit_count: 0 */
    for (register int i = 1; i <= n; i++) { /* line 82 slow_hit_count: 10, fast_hit_count: 0 */
      scanf("%d", &a[i]); /* line 83 slow_hit_count: 9, fast_hit_count: 0 */
      if (a[i] % 2 == 1 && a[i] >= 4) /* line 84 slow_hit_count: 9, fast_hit_count: 0 */
        ans ^= 0; /* line 85 slow_hit_count: 4, fast_hit_count: 0 */
      else { /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
        if (a[i] <= 100000) /* line 87 slow_hit_count: 5, fast_hit_count: 0 */
          ans ^= sg[a[i]]; /* line 88 slow_hit_count: 5, fast_hit_count: 0 */
        else /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
          ans ^= Cal(a[i]); /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
    if (ans == 0) /* line 93 slow_hit_count: 1, fast_hit_count: 0 */
      puts("Nicky"); /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
      puts("Kevin"); /* line 96 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 98 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 99 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance of the provided C program, let's follow the tasks outlined:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The `Calc_SG()` function is called and executed during the slow run, but not at all during the fast input, indicating it is a significant contributor to the slow performance.
   - The loop in `Calc_SG()`, from line 7 to 25, is heavily executed with 100,000 iterations, specifically causing a large number of hits on lines 14-17, indicating expensive operations conducted repeatedly.

2. **Pinpoint Lines or Functions with Significant Hits:**
   - **Function `Calc_SG()`**: It iterates over a large range (1 to 100,000) and contains nested loops. Specifically, lines 7 (loop start), 14-17 (nested loop and condition checking) are executed a lot.
   - **Conditionals and Flag Manipulations**: The high execution count of lines 8-12 and lines 19-23 show that these conditionals and their associated operations are repeatedly hit, adding to the computational expense.

3. **Inference on Code Interaction:**
   - The expensive operations occur due to the calculation of the Sprague-Grundy number (`sg[i]`), which involves condition checks and flag manipulation over a large number of iterations. The process involves determining minimal excludants (mex) for each game state value, which is computationally intensive.

### Phase 2: Derive Performance-Characterizing Invariants

Here are the natural language statements describing conditions triggering slow execution:

1. **Invariant on Even and Odd k Values:**
   - "When `k` is odd, the computation of Sprague-Grundy numbers is triggered for all pile sizes up to 100,000, introducing significant overhead due to the extensive pre-calculation required."

2. **Loop and Condition Hit Counts:**
   - "If the calculation involves large pre-defined ranges or nested loops (e.g., iterating over 100,000 elements with conditional checks), the performance may degrade due to the increased computational demand."

3. **Input Characteristics Impact:**
   - "When the input sequence includes large pile sizes that necessitate the calculation of Grundy numbers (`a[i] > 100,000`) with a function call (`Cal()`), performance can degrade, especially if frequent nested iterations are involved."

These conditions capture the scenarios where the program will likely experience slowdowns, focusing on the inherent computational complexity of calculating Sprague-Grundy numbers and managing large datasets with nested loops and conditional operations. By understanding these conditions, developers and testers can better predict and mitigate potential performance bottlenecks when adjusting inputs or program logic.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kevin and Nicky Sun have invented a new game called Lieges of Legendre. In this game, two players take turns modifying the game state with Kevin moving first. Initially, the game is set up so that there are n piles of cows, with the i-th pile containing ai cows. During each player's turn, that player calls upon the power of Sunlight, and uses it to either:

  1. Remove a single cow from a chosen non-empty pile. 
  2. Choose a pile of cows with even size 2·x (x > 0), and replace it with k piles of x cows each. 



The player who removes the last cow wins. Given n, k, and a sequence a1, a2, ..., an, help Kevin and Nicky find the winner, given that both sides play in optimal way.

Input

The first line of the input contains two space-separated integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 109).

The second line contains n integers, a1, a2, ... an (1 ≤ ai ≤ 109) describing the initial state of the game. 

Output

Output the name of the winning player, either "Kevin" or "Nicky" (without quotes).

Examples

Input

2 1
3 4


Output

Kevin


Input

1 2
3


Output

Nicky

Note

In the second sample, Nicky can win in the following way: Kevin moves first and is forced to remove a cow, so the pile contains two cows after his move. Next, Nicky replaces this pile of size 2 with two piles of size 1. So the game state is now two piles of size 1. Kevin then removes one of the remaining cows and Nicky wins by removing the other.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants as C++ Checker Code

Let's create the checker functions based on the previously derived performance invariants.

1. **Invariant for Odd `k` Values:**
   - Checks if `k` is odd and triggers the extensive computation of Sprague-Grundy numbers.

2. **Invariant for Large Loop Operations:**
   - Checks if significant operations within loops over large ranges are executed, such as calculating `sg[i]`.

3. **Invariant for Input Characteristics:**
   - Checks if high pile sizes necessitate the function call `Cal(a[i])` when `a[i] > 100,000`.

Here are the corresponding check implementations in C++:

```cpp
void check_odd_k_invariant(int k) {
    if (k % 2 != 0) {
        cerr << "Warning: Performance bottleneck condition triggered for odd k!" << endl;
        abort();
    }
}

void check_large_loop_invariant(int iterations) {
    if (iterations > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered by heavy loop operations!" << endl;
        abort();
    }
}

void check_large_pile_invariant(int pileSize) {
    if (pileSize > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered by large pile size!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Now, we integrate these runtime checks into the original C++ program at appropriate points to monitor and warn about potential performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 100005;
int n, k, a[N], flag[N], sg[N];

void Calc_SG() {
  memset(sg, 0, sizeof(sg));
  // Check for heavy loop operations
  check_large_loop_invariant(100000);
  for (register int i = 1; i <= 100000; i++) {
    if (i % 2)
      flag[sg[i - 1]] = 1;
    else {
      flag[sg[i - 1]] = 1;
      flag[sg[i / 2]] = 1;
    }
    for (register int j = 0; j <= 100000; j++)
      if (flag[j] == 0) {
        sg[i] = j;
        break;
      }
    if (i % 2)
      flag[sg[i - 1]] = 0;
    else {
      flag[sg[i - 1]] = 0;
      flag[sg[i / 2]] = 0;
    }
  }
}

int Cal(int x) {
  int rev = 0;
  while (x > 100000) {
    if (x % 2) {
      break;
    }
    rev++;
    x /= 2;
  }
  if (x <= 100000) {
    if (sg[x] == 0) {
      if (rev % 2)
        return 1;
      else
        return 2;
    }
    if (sg[x] == 1) {
      if (rev % 2)
        return 2;
      else
        return 1;
    }
    if (sg[x] == 2) {
      if (rev % 2)
        return 1;
      else
        return 2;
    }
  }
  if (rev % 2)
    return 1;
  else
    return 2;
}

int main() {
  scanf("%d %d", &n, &k);

  // Check if k is odd which triggers heavy computations
  check_odd_k_invariant(k);

  if (k % 2 == 0) {
    int ans = 0;
    for (register int i = 1; i <= n; i++) {
      scanf("%d", &a[i]);
      if (a[i] >= 3) {
        if (a[i] % 2 == 0)
          ans ^= 1;
        else
          ans ^= 0;
      } else
        ans ^= a[i];
    }
    if (ans == 0)
      puts("Nicky");
    else
      puts("Kevin");
  } else {
    int ans = 0;
    Calc_SG();
    for (register int i = 1; i <= n; i++) {
      scanf("%d", &a[i]);
      
      // Check for large pile sizes
      check_large_pile_invariant(a[i]);

      if (a[i] % 2 == 1 && a[i] >= 4)
        ans ^= 0;
      else {
        if (a[i] <= 100000)
          ans ^= sg[a[i]];
        else
          ans ^= Cal(a[i]);
      }
    }
    if (ans == 0)
      puts("Nicky");
    else
      puts("Kevin");
  }
  return 0;
}
```

### Explanation

- **`check_odd_k_invariant`**: This check is placed after reading `k` to immediately catch the scenario where the computations for Sprague-Grundy numbers become necessary due to `k` being odd.
- **`check_large_loop_invariant`**: Added in `Calc_SG()` before the loop starts to indicate the potential performance issue due to a large number of iterations.
- **`check_large_pile_invariant`**: This check is used within the loop iterating over each pile size to warn if the pile size will require costly computations.

This instrumented code will help identify performance bottlenecks due to specific inputs or parameters that trigger heavy computations, aiding in understanding and potentially optimizing the program further.

