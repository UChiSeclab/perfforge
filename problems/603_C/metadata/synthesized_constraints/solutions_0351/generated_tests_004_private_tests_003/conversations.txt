system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kevin and Nicky Sun have invented a new game called Lieges of Legendre. In this game, two players take turns modifying the game state with Kevin moving first. Initially, the game is set up so that there are n piles of cows, with the i-th pile containing ai cows. During each player's turn, that player calls upon the power of Sunlight, and uses it to either:

  1. Remove a single cow from a chosen non-empty pile. 
  2. Choose a pile of cows with even size 2·x (x > 0), and replace it with k piles of x cows each. 



The player who removes the last cow wins. Given n, k, and a sequence a1, a2, ..., an, help Kevin and Nicky find the winner, given that both sides play in optimal way.

Input

The first line of the input contains two space-separated integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 109).

The second line contains n integers, a1, a2, ... an (1 ≤ ai ≤ 109) describing the initial state of the game. 

Output

Output the name of the winning player, either "Kevin" or "Nicky" (without quotes).

Examples

Input

2 1
3 4


Output

Kevin


Input

1 2
3


Output

Nicky

Note

In the second sample, Nicky can win in the following way: Kevin moves first and is forced to remove a cow, so the pile contains two cows after his move. Next, Nicky replaces this pile of size 2 with two piles of size 1. So the game state is now two piles of size 1. Kevin then removes one of the remaining cows and Nicky wins by removing the other.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int arr[100005];
map<int, int> dp;
int solve(int n) {
  if (dp.count(n)) {
    return dp[n];
  }
  if (n % 2 == 1) {
    return 0;
  }
  int k = solve(n / 2);
  if (k == 0) {
    return dp[n] = 1;
  } else if (k == 1) {
    return dp[n] = 2;
  } else {
    return dp[n] = 1;
  }
}
int main() {
  cin.sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  int N, K;
  cin >> N >> K;
  if (K % 2 == 0) {
    int x = 0;
    for (int i = 1; i <= N; i++) {
      cin >> arr[i];
      if (arr[i] == 2) {
        x ^= 2;
      } else if (arr[i] == 1) {
        x ^= 1;
      } else {
        x ^= (arr[i] & 1) ^ 1;
      }
    }
    if (x) {
      cout << "Kevin\n";
    } else {
      cout << "Nicky\n";
    }
    return 0;
  }
  for (int i = 1; i <= 10000; i++) {
    if (i % 2 == 1) {
      if (dp[i - 1] != 0) {
        dp[i] = 0;
      } else {
        dp[i] = 1;
      }
    } else {
      if (dp[i - 1] != 0 && dp[i / 2] != 0) {
        dp[i] = 0;
      } else if (dp[i - 1] != 1 && dp[i / 2] != 1) {
        dp[i] = 1;
      } else {
        dp[i] = 2;
      }
    }
  }
  int x = 0;
  for (int i = 1; i <= N; i++) {
    int n;
    cin >> n;
    x ^= solve(n);
  }
  cout << (x ? "Kevin" : "Nicky") << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

9 1
8 2 9 4 7 5 2 4 9


(G.2) Fast Input

9 2
8 2 9 4 7 5 2 4 9


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int arr[100005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
map<int, int> dp; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int solve(int n) { /* line 5 slow_hit_count: 9, fast_hit_count: 0 */
  if (dp.count(n)) { /* line 6 slow_hit_count: 9, fast_hit_count: 0 */
    return dp[n]; /* line 7 slow_hit_count: 9, fast_hit_count: 0 */
  } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  if (n % 2 == 1) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  int k = solve(n / 2); /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  if (k == 0) { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    return dp[n] = 1; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } else if (k == 1) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    return dp[n] = 2; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    return dp[n] = 1; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  cin.sync_with_stdio(0); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int N, K; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> N >> K; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  if (K % 2 == 0) { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
    int x = 0; /* line 28 slow_hit_count: 0, fast_hit_count: 1 */
    for (int i = 1; i <= N; i++) { /* line 29 slow_hit_count: 0, fast_hit_count: 10 */
      cin >> arr[i]; /* line 30 slow_hit_count: 0, fast_hit_count: 9 */
      if (arr[i] == 2) { /* line 31 slow_hit_count: 0, fast_hit_count: 9 */
        x ^= 2; /* line 32 slow_hit_count: 0, fast_hit_count: 2 */
      } else if (arr[i] == 1) { /* line 33 slow_hit_count: 0, fast_hit_count: 7 */
        x ^= 1; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
        x ^= (arr[i] & 1) ^ 1; /* line 36 slow_hit_count: 0, fast_hit_count: 7 */
      } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    if (x) { /* line 39 slow_hit_count: 0, fast_hit_count: 1 */
      cout << "Kevin\n"; /* line 40 slow_hit_count: 0, fast_hit_count: 1 */
    } else { /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
      cout << "Nicky\n"; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 44 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= 10000; i++) { /* line 46 slow_hit_count: 10001, fast_hit_count: 0 */
    if (i % 2 == 1) { /* line 47 slow_hit_count: 10000, fast_hit_count: 0 */
      if (dp[i - 1] != 0) { /* line 48 slow_hit_count: 5000, fast_hit_count: 0 */
        dp[i] = 0; /* line 49 slow_hit_count: 4998, fast_hit_count: 0 */
      } else { /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
        dp[i] = 1; /* line 51 slow_hit_count: 2, fast_hit_count: 0 */
      } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
      if (dp[i - 1] != 0 && dp[i / 2] != 0) { /* line 54 slow_hit_count: 5000, fast_hit_count: 0 */
        dp[i] = 0; /* line 55 slow_hit_count: 1, fast_hit_count: 0 */
      } else if (dp[i - 1] != 1 && dp[i / 2] != 1) { /* line 56 slow_hit_count: 4999, fast_hit_count: 0 */
        dp[i] = 1; /* line 57 slow_hit_count: 3331, fast_hit_count: 0 */
      } else { /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
        dp[i] = 2; /* line 59 slow_hit_count: 1668, fast_hit_count: 0 */
      } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  int x = 0; /* line 63 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= N; i++) { /* line 64 slow_hit_count: 10, fast_hit_count: 0 */
    int n; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> n; /* line 66 slow_hit_count: 9, fast_hit_count: 0 */
    x ^= solve(n); /* line 67 slow_hit_count: 9, fast_hit_count: 0 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  cout << (x ? "Kevin" : "Nicky") << "\n"; /* line 69 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 70 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To analyze the performance of the given C program and identify performance-characterizing invariants, let's go through the two phases as outlined in the task.

### Phase 1: Identify Expensive or Inefficient Code Segments

**Comparison of Line-level Hit Counts:**
- The function `solve(int n)` is invoked 9 times in the slow input and not at all in the fast input.
- The loop iterating from 1 to 10,000 (lines 46-62) is executed during the slow run but not in the fast run. This loop initializes the dynamic programming map `dp`.

**Key Observations:**
- For the slow input, `K` is odd (`K=1`), causing the program to execute the logic that involves using the `solve` function to determine the game's outcome.
- The `solve` function uses a recursive approach with memoization to determine the outcome for each pile size. This function is called multiple times for each pile size, leading to potentially expensive recursive computations.
- The main difference between the fast and slow paths is the condition `if (K % 2 == 0)` (line 27), which causes different parts of the code to execute.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations from Phase 1, here are the performance-characterizing invariants for the program:

1. **Odd Value of `K` Causing Recursive Calls:**
   - **Natural Language Description:** When `K` is odd, the program uses a recursive strategy to compute results for each pile size. This involves a recursive function `solve` that can become inefficient for larger problem sizes or complex configurations. The recursion can become particularly expensive if the pile sizes require deep recursive exploration.
   - **Condition:** The performance degrades when `K` is odd, activating recursive computations that depend on the structure of the pile sizes.

2. **Heavy Initialization of Dynamic Programming Table:**
   - **Natural Language Description:** If `K` is odd, the program initializes a dynamic programming table for pile sizes up to 10,000. This initialization involves checking conditions and updating the table, which can be computationally expensive for larger initializations, especially if unused in execution.
   - **Condition:** The program spends significant time on initializing a DP table when `K` is odd, which may not be strictly necessary for the given constraints.

3. **Complex Pile Configurations:**
   - **Natural Language Description:** The recursive function `solve` may have to repeatedly solve subproblems for complex configurations of pile sizes, especially when many piles have even sizes that can be split and require further recursion.
   - **Condition:** The computation becomes expensive when many piles have even sizes that encourage recursive calculations due to splitting with `k` piles.

These invariants provide insight into the conditions under which the program might enter slow paths, serving as triggers for performance degradation when specific conditions like odd `K` or complex configurations of pile sizes are met.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kevin and Nicky Sun have invented a new game called Lieges of Legendre. In this game, two players take turns modifying the game state with Kevin moving first. Initially, the game is set up so that there are n piles of cows, with the i-th pile containing ai cows. During each player's turn, that player calls upon the power of Sunlight, and uses it to either:

  1. Remove a single cow from a chosen non-empty pile. 
  2. Choose a pile of cows with even size 2·x (x > 0), and replace it with k piles of x cows each. 



The player who removes the last cow wins. Given n, k, and a sequence a1, a2, ..., an, help Kevin and Nicky find the winner, given that both sides play in optimal way.

Input

The first line of the input contains two space-separated integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 109).

The second line contains n integers, a1, a2, ... an (1 ≤ ai ≤ 109) describing the initial state of the game. 

Output

Output the name of the winning player, either "Kevin" or "Nicky" (without quotes).

Examples

Input

2 1
3 4


Output

Kevin


Input

1 2
3


Output

Nicky

Note

In the second sample, Nicky can win in the following way: Kevin moves first and is forced to remove a cow, so the pile contains two cows after his move. Next, Nicky replaces this pile of size 2 with two piles of size 1. So the game state is now two piles of size 1. Kevin then removes one of the remaining cows and Nicky wins by removing the other.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, here are the checker functions implemented in C++:

1. **Odd Value of `K` Triggering Recursive Calls:**

```cpp
void check_odd_k_invariant(int K) {
    if (K % 2 == 1) {
        cerr << "Warning: Performance bottleneck condition triggered due to odd K causing recursive calls!" << endl;
        abort();
    }
}
```

2. **Initialization of Dynamic Programming Table:**

```cpp
void check_dp_initialization_invariant(int upperLimit) {
    if (upperLimit > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large DP table initialization!" << endl;
        abort();
    }
}
```

3. **Complex Pile Configurations:**

```cpp
void check_complex_pile_invariant(const vector<int>& piles) {
    int evenCount = 0;
    for (int pile : piles) {
        if (pile % 2 == 0) evenCount++;
    }
    if (evenCount > piles.size() / 2) { // Arbitrary threshold: more than half piles are even
        cerr << "Warning: Performance bottleneck condition triggered due to complex pile configuration!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Functions into the Original Program

Here is the instrumented C++ code with the checker functions integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;

int arr[100005];
map<int, int> dp;

int solve(int n) {
    if (dp.count(n)) {
        return dp[n];
    }
    if (n % 2 == 1) {
        return 0;
    }
    int k = solve(n / 2);
    if (k == 0) {
        return dp[n] = 1;
    } else if (k == 1) {
        return dp[n] = 2;
    } else {
        return dp[n] = 1;
    }
}

// Check for odd K causing recursive usage
void check_odd_k_invariant(int K) {
    if (K % 2 == 1) {
        cerr << "Warning: Performance bottleneck condition triggered due to odd K causing recursive calls!" << endl;
        abort();
    }
}

// Check for large DP table initialization
void check_dp_initialization_invariant(int upperLimit) {
    if (upperLimit > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large DP table initialization!" << endl;
        abort();
    }
}

// Check for complex pile configurations
void check_complex_pile_invariant(const vector<int>& piles) {
    int evenCount = 0;
    for (int pile : piles) {
        if (pile % 2 == 0) evenCount++;
    }
    if (evenCount > piles.size() / 2) { // Arbitrary threshold: more than half piles are even
        cerr << "Warning: Performance bottleneck condition triggered due to complex pile configuration!" << endl;
        abort();
    }
}

int main() {
    cin.sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int N, K;
    cin >> N >> K;
    
    // Check for the odd K condition
    check_odd_k_invariant(K);

    vector<int> piles(N);
    for (int i = 0; i < N; i++) {
        cin >> piles[i];
    }
    
    // Check for complex pile configurations
    check_complex_pile_invariant(piles);

    if (K % 2 == 0) {
        int x = 0;
        for (int i = 1; i <= N; i++) {
            if (piles[i - 1] == 2) {
                x ^= 2;
            } else if (piles[i - 1] == 1) {
                x ^= 1;
            } else {
                x ^= (piles[i - 1] & 1) ^ 1;
            }
        }
        if (x) {
            cout << "Kevin\n";
        } else {
            cout << "Nicky\n";
        }
        return 0;
    }

    // Check if DP table initialization might be costly
    check_dp_initialization_invariant(10000);

    for (int i = 1; i <= 10000; i++) {
        if (i % 2 == 1) {
            if (dp[i - 1] != 0) {
                dp[i] = 0;
            } else {
                dp[i] = 1;
            }
        } else {
            if (dp[i - 1] != 0 && dp[i / 2] != 0) {
                dp[i] = 0;
            } else if (dp[i - 1] != 1 && dp[i / 2] != 1) {
                dp[i] = 1;
            } else {
                dp[i] = 2;
            }
        }
    }

    int x = 0;
    for (int i = 1; i <= N; i++) {
        x ^= solve(piles[i - 1]);
    }
    cout << (x ? "Kevin" : "Nicky") << "\n";
}
```

### Explanation:

- **Odd K Check:** The invariant check for `K` being odd is placed right after reading `K` to prevent recursive computations when not needed.
- **DP Table Initialization Check:** This check ensures that initializing a large DP table doesn't proceed unnoticed in scenarios where `K` is odd and could impact performance.
- **Complex Pile Configuration Check:** This is placed after reading the pile sizes to ensure we do not encounter a costly recursive exploration due to many even piles. 

These checks help identify conditions where the program might slow down significantly, aligning with the derived performance-characterizing invariants.

