system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Kevin and Nicky Sun have invented a new game called Lieges of Legendre. In this game, two players take turns modifying the game state with Kevin moving first. Initially, the game is set up so that there are n piles of cows, with the i-th pile containing ai cows. During each player's turn, that player calls upon the power of Sunlight, and uses it to either:

  1. Remove a single cow from a chosen non-empty pile. 
  2. Choose a pile of cows with even size 2·x (x > 0), and replace it with k piles of x cows each. 



The player who removes the last cow wins. Given n, k, and a sequence a1, a2, ..., an, help Kevin and Nicky find the winner, given that both sides play in optimal way.

Input

The first line of the input contains two space-separated integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 109).

The second line contains n integers, a1, a2, ... an (1 ≤ ai ≤ 109) describing the initial state of the game. 

Output

Output the name of the winning player, either "Kevin" or "Nicky" (without quotes).

Examples

Input

2 1
3 4


Output

Kevin


Input

1 2
3


Output

Nicky

Note

In the second sample, Nicky can win in the following way: Kevin moves first and is forced to remove a cow, so the pile contains two cows after his move. Next, Nicky replaces this pile of size 2 with two piles of size 1. So the game state is now two piles of size 1. Kevin then removes one of the remaining cows and Nicky wins by removing the other.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);
int T = 1, used[100100];
int dp[100100];
int k;
int mex(vector<int> &v) {
  T++;
  for (int i = 0; i < (int)v.size(); i++) used[v[i]] = T;
  for (int i = 0;; i++) {
    if (used[i] != T) return i;
  }
}
void print(int n, vector<int> v) {
  cout << n << ": ";
  for (__typeof(v.begin()) it = v.begin(); it != v.end(); it++)
    cout << *it << " ";
  cout << endl;
}
int calc(int n) {
  if (n == 0) return 0;
  int &res = dp[n];
  if (res != -1) return res;
  vector<int> v;
  v.push_back(calc(n - 1));
  if (n % 2 == 0) {
    if (k % 2) {
      v.push_back(calc(n / 2));
    } else {
      v.push_back(0);
    }
  }
  return res = mex(v);
}
void print(int n, int len) {
  string second = "";
  while (n) {
    second = (char)(n % 2 + '0') + second;
    n /= 2;
  }
  while ((int)second.size() < len) second = "0" + second;
  cout << second;
}
int main() {
  memset(dp, -1, sizeof dp);
  int ans = 0;
  int n, x;
  scanf("%d%d", &n, &k);
  for (int i = 0; i < n; i++) {
    scanf("%d", &x);
    if (x < 100100)
      ans ^= calc(x);
    else {
      if (k % 2 == 1) {
        if (x % 2 == 0) {
          int t = 0;
          while (x % 2 == 0) {
            x /= 2;
            t++;
          }
          if (t % 2 == 0)
            ans ^= 2;
          else
            ans ^= 1;
        }
      } else {
        ans ^= (x % 2 == 0);
      }
    }
  }
  if (ans)
    cout << "Kevin" << endl;
  else
    cout << "Nicky" << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2 1
160 575


(G.2) Fast Input

1 1
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = (int)1e9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = inf + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const double eps = 1e-9; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const double pi = acos(-1.0); /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int T = 1, used[100100]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int dp[100100]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int k; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int mex(vector<int> &v) { /* line 10 slow_hit_count: 575, fast_hit_count: 1 */
  T++; /* line 11 slow_hit_count: 575, fast_hit_count: 1 */
  for (int i = 0; i < (int)v.size(); i++) used[v[i]] = T; /* line 12 slow_hit_count: 1437, fast_hit_count: 2 */
  for (int i = 0;; i++) { /* line 13 slow_hit_count: 959, fast_hit_count: 2 */
    if (used[i] != T) return i; /* line 14 slow_hit_count: 959, fast_hit_count: 2 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
void print(int n, vector<int> v) { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  cout << n << ": "; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  for (__typeof(v.begin()) it = v.begin(); it != v.end(); it++) /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    cout << *it << " "; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  cout << endl; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
int calc(int n) { /* line 23 slow_hit_count: 864, fast_hit_count: 2 */
  if (n == 0) return 0; /* line 24 slow_hit_count: 864, fast_hit_count: 2 */
  int &res = dp[n]; /* line 25 slow_hit_count: 863, fast_hit_count: 1 */
  if (res != -1) return res; /* line 26 slow_hit_count: 863, fast_hit_count: 1 */
  vector<int> v; /* line 27 slow_hit_count: 575, fast_hit_count: 1 */
  v.push_back(calc(n - 1)); /* line 28 slow_hit_count: 575, fast_hit_count: 1 */
  if (n % 2 == 0) { /* line 29 slow_hit_count: 575, fast_hit_count: 1 */
    if (k % 2) { /* line 30 slow_hit_count: 287, fast_hit_count: 0 */
      v.push_back(calc(n / 2)); /* line 31 slow_hit_count: 287, fast_hit_count: 0 */
    } else { /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      v.push_back(0); /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  return res = mex(v); /* line 36 slow_hit_count: 575, fast_hit_count: 1 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
void print(int n, int len) { /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  string second = ""; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  while (n) { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    second = (char)(n % 2 + '0') + second; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    n /= 2; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  while ((int)second.size() < len) second = "0" + second; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  cout << second; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, -1, sizeof dp); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 0; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  int n, x; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d%d", &n, &k); /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 52 slow_hit_count: 3, fast_hit_count: 2 */
    scanf("%d", &x); /* line 53 slow_hit_count: 2, fast_hit_count: 1 */
    if (x < 100100) /* line 54 slow_hit_count: 2, fast_hit_count: 1 */
      ans ^= calc(x); /* line 55 slow_hit_count: 2, fast_hit_count: 1 */
    else { /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
      if (k % 2 == 1) { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
        if (x % 2 == 0) { /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
          int t = 0; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
          while (x % 2 == 0) { /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
            x /= 2; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
            t++; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
          if (t % 2 == 0) /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
            ans ^= 2; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
          else /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
            ans ^= 1; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
        ans ^= (x % 2 == 0); /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  if (ans) /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "Kevin" << endl; /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  else /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "Nicky" << endl; /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 78 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 79 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks and derive performance-characterizing invariants from the provided C program, let's proceed with the analysis based on the provided information:

### Phase 1: Identify expensive or inefficient code segments

1. **Comparison of Hit Counts:**
   - The `mex` function (lines 10-16) is a significant candidate for inefficiency, with the slow input causing 575 hits compared to just 1 hit for the fast input.
   - The `calc` function (lines 23-37) is called 864 times in the slow input, compared to 2 times for the fast input. This suggests recursion or heavy computation.
   - The loop inside `mex` (lines 12-14) repeatedly updates and checks the `used` array, contributing to the heavy computation.

2. **Identification of Lines/Functions with More Hits:**
   - Lines 10-16 (mex function) and 23-37 (calc function) are heavily involved in the slowdown.
   - Recursion in `calc` is likely causing repeated computations, particularly when handling large numbers or specific patterns in the `a` array.

3. **Interaction with Data Structures and Constraints:**
   - The use of `dp` for memoization suggests dynamic programming, but the recursive calls to `calc` might be inefficient if memoization is not effectively reducing repeated calculations.
   - The handling of numbers (particularly the division of even numbers in line 31) suggests that specific configurations in the input lead to deeper recursion and more complex game states.

### Phase 2: Derive performance-characterizing invariants

Based on the function and the nature of the game described, we can infer the following performance-characterizing invariants:

1. **Invariant #1: Deep Recursion with Even Numbers**
   - **Natural Language Description:** "If the input array contains multiple large even numbers and k is odd, the program may experience a slowdown due to deep recursion in the calculation of game states."
   - This invariant is derived from the pattern that even numbers are recursively divided, especially when `k` is odd, causing multiple recursive calls.

2. **Invariant #2: High Grundy Number Calculation**
   - **Natural Language Description:** "When the piles contain large numbers, particularly close to the maximum constraints, the calculation of Grundy numbers becomes expensive."
   - This invariant highlights how large values of cows in piles can lead to extensive computation to determine the optimal moves. The recursion in `calc` for large `x` values can lead to performance degradation.

3. **Invariant #3: Recursive Division and Recombination**
   - **Natural Language Description:** "If a pile can be repeatedly split into smaller even piles, the recursive computation and recombination can cause significant slowdowns, especially if many such recombinations are possible."
   - This captures the scenario where repeated divisions (e.g., in the form of powers of 2) can lead to prolonged recursive computations and potential inefficiencies.

These invariants provide a broad understanding of potential slowdown triggers and are designed to identify not just immediate issues, but also possible future scenarios that could lead to inefficiencies, aligned with the constraints of the problem.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Kevin and Nicky Sun have invented a new game called Lieges of Legendre. In this game, two players take turns modifying the game state with Kevin moving first. Initially, the game is set up so that there are n piles of cows, with the i-th pile containing ai cows. During each player's turn, that player calls upon the power of Sunlight, and uses it to either:

  1. Remove a single cow from a chosen non-empty pile. 
  2. Choose a pile of cows with even size 2·x (x > 0), and replace it with k piles of x cows each. 



The player who removes the last cow wins. Given n, k, and a sequence a1, a2, ..., an, help Kevin and Nicky find the winner, given that both sides play in optimal way.

Input

The first line of the input contains two space-separated integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 109).

The second line contains n integers, a1, a2, ... an (1 ≤ ai ≤ 109) describing the initial state of the game. 

Output

Output the name of the winning player, either "Kevin" or "Nicky" (without quotes).

Examples

Input

2 1
3 4


Output

Kevin


Input

1 2
3


Output

Nicky

Note

In the second sample, Nicky can win in the following way: Kevin moves first and is forced to remove a cow, so the pile contains two cows after his move. Next, Nicky replaces this pile of size 2 with two piles of size 1. So the game state is now two piles of size 1. Kevin then removes one of the remaining cows and Nicky wins by removing the other.

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3, where we translate the previously derived natural language invariants into C++ checker code.

### Phase 3: Implementing Performance-Characterizing Invariants in C++

Based on the natural language descriptions we created earlier, here are the C++ checks for each invariant:

#### Invariant #1: Deep Recursion with Even Numbers
This invariant checks if a number is large and even, and `k` is odd, potentially leading to deep recursion.

```cpp
void check_deep_recursion_invariant(int x, int k) {
    if (x > 100000 && k % 2 == 1 && x % 2 == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - deep recursion with large even numbers!" << endl;
        abort();
    }
}
```

#### Invariant #2: High Grundy Number Calculation
This invariant checks if `a[i]` is a large number, leading to expensive Grundy number calculations.

```cpp
void check_grundy_number_invariant(int x) {
    if (x > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - high Grundy number calculation!" << endl;
        abort();
    }
}
```

#### Invariant #3: Recursive Division and Recombination
This invariant checks for potential repeated divisions leading to recursive computations.

```cpp
void check_recursive_division_invariant(int x) {
    int divisions = 0;
    while (x % 2 == 0) {
        x /= 2;
        divisions++;
    }
    if (divisions > 10) { // Assume many divisions imply complex recombinations
        cerr << "Warning: Performance bottleneck condition triggered - recursive division and recombination!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Now, let's integrate these checks into the original C++ program. We will place these checks at suitable points without adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);
int T = 1, used[100100];
int dp[100100];
int k;

// Checker functions for performance-characterizing invariants
void check_deep_recursion_invariant(int x, int k) {
    if (x > 100000 && k % 2 == 1 && x % 2 == 0) {
        cerr << "Warning: Performance bottleneck condition triggered - deep recursion with large even numbers!" << endl;
        abort();
    }
}

void check_grundy_number_invariant(int x) {
    if (x > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - high Grundy number calculation!" << endl;
        abort();
    }
}

void check_recursive_division_invariant(int x) {
    int divisions = 0;
    while (x % 2 == 0) {
        x /= 2;
        divisions++;
    }
    if (divisions > 10) {
        cerr << "Warning: Performance bottleneck condition triggered - recursive division and recombination!" << endl;
        abort();
    }
}

int mex(vector<int> &v) {
    T++;
    for (int i = 0; i < (int)v.size(); i++) used[v[i]] = T;
    for (int i = 0;; i++) {
        if (used[i] != T) return i;
    }
}

int calc(int n) {
    if (n == 0) return 0;
    int &res = dp[n];
    if (res != -1) return res;
    vector<int> v;
    v.push_back(calc(n - 1));
    if (n % 2 == 0) {
        if (k % 2) {
            v.push_back(calc(n / 2));
        } else {
            v.push_back(0);
        }
    }
    return res = mex(v);
}

int main() {
    memset(dp, -1, sizeof dp);
    int ans = 0;
    int n, x;
    scanf("%d%d", &n, &k);
    for (int i = 0; i < n; i++) {
        scanf("%d", &x);

        // Insert checker functions at appropriate points
        check_deep_recursion_invariant(x, k);
        check_grundy_number_invariant(x);
        check_recursive_division_invariant(x);

        if (x < 100100)
            ans ^= calc(x);
        else {
            if (k % 2 == 1) {
                if (x % 2 == 0) {
                    int t = 0;
                    while (x % 2 == 0) {
                        x /= 2;
                        t++;
                    }
                    if (t % 2 == 0)
                        ans ^= 2;
                    else
                        ans ^= 1;
                }
            } else {
                ans ^= (x % 2 == 0);
            }
        }
    }
    if (ans)
        cout << "Kevin" << endl;
    else
        cout << "Nicky" << endl;
    return 0;
}
```

### Comments on Integration
- **Placement:** The checks are placed immediately after reading each pile size `x`, ensuring they are evaluated once per pile and not within tight loops or recursive calls.
- **Thresholds:** The chosen thresholds (e.g., `100000` for recursive depth) are hypothetical and should be adjusted based on domain-specific knowledge or empirical testing.
- **Abort:** The `abort()` function is used to prematurely terminate execution if any bottleneck condition is met, useful when diagnosing performance issues.

This enhanced program now contains runtime checks for performance bottlenecks, helping in the identification of slow execution paths during testing or fuzzing.

