system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The Cybermen and the Daleks have long been the Doctor's main enemies. Everyone knows that both these species enjoy destroying everything they encounter. However, a little-known fact about them is that they both also love taking Turing tests!

Heidi designed a series of increasingly difficult tasks for them to spend their time on, which would allow the Doctor enough time to save innocent lives!

The funny part is that these tasks would be very easy for a human to solve.

The first task is as follows. There are some points on the plane. All but one of them are on the boundary of an axis-aligned square (its sides are parallel to the axes). Identify that point.

Input

The first line contains an integer n (2 ≤ n ≤ 10).

Each of the following 4n + 1 lines contains two integers x_i, y_i (0 ≤ x_i, y_i ≤ 50), describing the coordinates of the next point.

It is guaranteed that there are at least n points on each side of the square and all 4n + 1 points are distinct.

Output

Print two integers — the coordinates of the point that is not on the boundary of the square.

Examples

Input


2
0 0
0 1
0 2
1 0
1 1
1 2
2 0
2 1
2 2


Output


1 1


Input


2
0 0
0 1
0 2
0 3
1 0
1 2
2 0
2 1
2 2


Output


0 3

Note

In both examples, the square has four sides x=0, x=2, y=0, y=2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long NMAX = 1e6;
long long x[NMAX + 5], y[NMAX + 5];
pair<long long, long long> base[NMAX + 5];
long long sum[NMAX + 2];
long long N, M;
map<pair<int, int>, bool> mp;
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  cin >> N;
  int R = 4 * N + 1;
  for (int i = 1; i <= R; ++i) {
    cin >> x[i] >> y[i];
    mp[{x[i], y[i]}] = 1;
  }
  for (int xx = 0; xx <= 50; ++xx) {
    for (int yy = 0; yy <= 50; ++yy) {
      for (int rad = 50; rad >= 2; --rad) {
        map<pair<int, int>, bool> used;
        for (int i = 0; i < rad; ++i) {
          used[{xx + i, yy}] = used[{xx + rad, yy + i}] =
              used[{xx + rad - i, yy + rad}] = used[{xx, yy + rad - i}] = 1;
        }
        int cnt = 0;
        for (int i = 1; i <= R; ++i) {
          if (!used[{x[i], y[i]}]) ++cnt;
        }
        if (cnt != 1) continue;
        for (int i = 1; i <= R; ++i) {
          if (!used[{x[i], y[i]}]) {
            cout << x[i] << ' ' << y[i] << '\n';
            return 0;
          }
        }
      }
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
11 11
11 12
11 15
11 17
11 18
11 19
11 28
11 33
11 38
11 40
24 11
15 46
17 11
17 46
18 46
19 11
19 46
20 11
20 46
24 46
25 46
26 11
32 11
32 46
33 11
34 46
36 11
39 11
40 46
43 11
44 0
46 14
46 15
46 17
46 22
46 26
46 28
46 32
46 43
46 45
46 46


(G.2) Fast Input

9
0 5
0 15
0 16
0 17
0 25
0 32
0 33
0 38
0 45
1 1
4 1
4 46
10 1
14 46
17 46
18 46
19 1
21 1
21 46
22 1
22 46
33 46
34 1
35 1
38 46
40 1
43 46
44 4
45 2
45 4
45 5
45 11
45 19
45 21
45 27
45 44
45 45


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long NMAX = 1e6; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long x[NMAX + 5], y[NMAX + 5]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
pair<long long, long long> base[NMAX + 5]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long sum[NMAX + 2]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long N, M; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
map<pair<int, int>, bool> mp; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> N; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  int R = 4 * N + 1; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= R; ++i) { /* line 15 slow_hit_count: 42, fast_hit_count: 38 */
    cin >> x[i] >> y[i]; /* line 16 slow_hit_count: 41, fast_hit_count: 37 */
    mp[{x[i], y[i]}] = 1; /* line 17 slow_hit_count: 41, fast_hit_count: 37 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  for (int xx = 0; xx <= 50; ++xx) { /* line 19 slow_hit_count: 12, fast_hit_count: 1 */
    for (int yy = 0; yy <= 50; ++yy) { /* line 20 slow_hit_count: 584, fast_hit_count: 2 */
      for (int rad = 50; rad >= 2; --rad) { /* line 21 slow_hit_count: 28616, fast_hit_count: 56 */
        map<pair<int, int>, bool> used; /* line 22 slow_hit_count: 28044, fast_hit_count: 55 */
        for (int i = 0; i < rad; ++i) { /* line 23 slow_hit_count: 757452, fast_hit_count: 1614 */
          used[{xx + i, yy}] = used[{xx + rad, yy + i}] = /* line 24 slow_hit_count: 729408, fast_hit_count: 1559 */
              used[{xx + rad - i, yy + rad}] = used[{xx, yy + rad - i}] = 1; /* line 25 slow_hit_count: 1458816, fast_hit_count: 3118 */
        } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
        int cnt = 0; /* line 27 slow_hit_count: 28044, fast_hit_count: 55 */
        for (int i = 1; i <= R; ++i) { /* line 28 slow_hit_count: 1177848, fast_hit_count: 2090 */
          if (!used[{x[i], y[i]}]) ++cnt; /* line 29 slow_hit_count: 1149804, fast_hit_count: 2035 */
        } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
        if (cnt != 1) continue; /* line 31 slow_hit_count: 28044, fast_hit_count: 55 */
        for (int i = 1; i <= R; ++i) { /* line 32 slow_hit_count: 31, fast_hit_count: 28 */
          if (!used[{x[i], y[i]}]) { /* line 33 slow_hit_count: 31, fast_hit_count: 28 */
            cout << x[i] << ' ' << y[i] << '\n'; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
            return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
          } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 42 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the given C program, we need to analyze the difference in line hit counts between the fast input and the slow input. This will help us identify the sections of code that contribute significantly to the slowdown. Based on this analysis, we will derive performance-characterizing invariants that describe under what conditions the code is likely to slow down.

### Phase 1: Identify Expensive or Inefficient Code Segments

From the provided hit count data, the following lines have significantly more hits in the slow input compared to the fast input:

1. `for (int rad = 50; rad >= 2; --rad)` (Line 21)
2. `for (int i = 0; i < rad; ++i)` (Line 23)
3. `used[{xx + i, yy}] = used[{xx + rad, yy + i}] = ...` (Line 24-25)
4. `for (int i = 1; i <= R; ++i)` (Line 28)
5. `if (!used[{x[i], y[i]}]) ++cnt;` (Line 29)

These lines are part of nested loops iterating over potential squares and checking if the points match the boundary of these squares. The high hit counts indicate the program frequently re-examines many candidate squares and points, leading to inefficiencies.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants in natural language:

1. **Highly Nested Loops with Large Iterative Range:**
   - "The program experiences a slowdown when it evaluates many potential squares due to the high range of outer loop variables (`xx`, `yy`, `rad`) and re-evaluates each point repeatedly in the inner loop."

2. **Repetitive Point Checks Against Square Boundaries:**
   - "Slowdown occurs when the number of checks increases exponentially as the program attempts to match each point against many potential square boundaries, especially when the potential size of these squares (`rad`) is large."

3. **Inefficient Boundary Condition Verification:**
   - "A high execution time is observed when the code repeatedly verifies boundary conditions for points across large coordinate ranges (`xx` and `yy`), leading to excessive nested loop iterations."

4. **Data Structure Overhead in Point Storage:**
   - "When the used map is recalculated frequently in the nested loops, it incurs overhead due to constant re-initialization and lookups, affecting performance."

### Suggested Thresholds and Conditions

Given the constraints (n <= 10) and the nature of the problem, the following thresholds and conditions can be inferred:

- If the square's potential size (`rad`) is near the upper limit (close to 50), the nested loops grow significantly, leading to many iterations which should be avoided if possible.
- If the candidate checks (`xx`, `yy` loops) cover a large portion of the plane (close to 50), performance degrades due to excessive evaluations.
- The combination of a high range of `xx`, `yy`, and `rad` values in loop iterations causes the program to enter a slow execution path.

These natural language invariants encapsulate the conditions under which the program's performance degrades, without relying on specific input values but by using general thresholds and structural patterns inherent to the problem's nature.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The Cybermen and the Daleks have long been the Doctor's main enemies. Everyone knows that both these species enjoy destroying everything they encounter. However, a little-known fact about them is that they both also love taking Turing tests!

Heidi designed a series of increasingly difficult tasks for them to spend their time on, which would allow the Doctor enough time to save innocent lives!

The funny part is that these tasks would be very easy for a human to solve.

The first task is as follows. There are some points on the plane. All but one of them are on the boundary of an axis-aligned square (its sides are parallel to the axes). Identify that point.

Input

The first line contains an integer n (2 ≤ n ≤ 10).

Each of the following 4n + 1 lines contains two integers x_i, y_i (0 ≤ x_i, y_i ≤ 50), describing the coordinates of the next point.

It is guaranteed that there are at least n points on each side of the square and all 4n + 1 points are distinct.

Output

Print two integers — the coordinates of the point that is not on the boundary of the square.

Examples

Input


2
0 0
0 1
0 2
1 0
1 1
1 2
2 0
2 1
2 2


Output


1 1


Input


2
0 0
0 1
0 2
0 3
1 0
1 2
2 0
2 1
2 2


Output


0 3

Note

In both examples, the square has four sides x=0, x=2, y=0, y=2.

Solution (C++ code):
{solution}


assistant: Let's proceed with implementing the checks for the performance-characterizing invariants derived from the problem analysis. 

### Phase 3: Implementing Performance-Characterizing Invariants in C++

Here are the C++ implementations of the natural language invariants identified earlier:

1. **Checker for Highly Nested Loops with Large Iterative Range:**

```cpp
void check_nested_loop_invariant(int xx, int yy, int rad) {
    if (rad >= 50) {
        cerr << "Warning: Performance bottleneck condition triggered - high range of rad in nested loops!" << endl;
        abort();
    }
}
```

2. **Checker for Repetitive Point Checks Against Square Boundaries:**

```cpp
void check_repetitive_point_checks(int xx, int yy, int rad) {
    if (xx > 45 || yy > 45) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive evaluations due to large xx or yy!" << endl;
        abort();
    }
}
```

3. **Checker for Inefficient Boundary Condition Verification:**

```cpp
void check_boundary_condition_verification(int xx, int yy, int rad) {
    if (xx * yy * rad > 10000) { // Arbitrary threshold based on typical loop depth at n=10
        cerr << "Warning: Performance bottleneck condition triggered - inefficient boundary condition checks!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original Program

Now, let's integrate these checks into the original C++ program at strategic points to effectively monitor performance without adding overhead to tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long NMAX = 1e6;
long long x[NMAX + 5], y[NMAX + 5];
pair<long long, long long> base[NMAX + 5];
long long sum[NMAX + 2];
long long N, M;
map<pair<int, int>, bool> mp;

// Checkers for performance bottlenecks
void check_nested_loop_invariant(int xx, int yy, int rad) {
    if (rad >= 50) {
        cerr << "Warning: Performance bottleneck condition triggered - high range of rad in nested loops!" << endl;
        abort();
    }
}

void check_repetitive_point_checks(int xx, int yy, int rad) {
    if (xx > 45 || yy > 45) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive evaluations due to large xx or yy!" << endl;
        abort();
    }
}

void check_boundary_condition_verification(int xx, int yy, int rad) {
    if (xx * yy * rad > 10000) { // Arbitrary threshold based on typical loop depth at n=10
        cerr << "Warning: Performance bottleneck condition triggered - inefficient boundary condition checks!" << endl;
        abort();
    }
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  cin >> N;
  int R = 4 * N + 1;
  for (int i = 1; i <= R; ++i) {
    cin >> x[i] >> y[i];
    mp[{x[i], y[i]}] = 1;
  }
  for (int xx = 0; xx <= 50; ++xx) {
    for (int yy = 0; yy <= 50; ++yy) {
      for (int rad = 50; rad >= 2; --rad) {
        map<pair<int, int>, bool> used;
        for (int i = 0; i < rad; ++i) {
          used[{xx + i, yy}] = used[{xx + rad, yy + i}] =
              used[{xx + rad - i, yy + rad}] = used[{xx, yy + rad - i}] = 1;
        }
        int cnt = 0;
        for (int i = 1; i <= R; ++i) {
          if (!used[{x[i], y[i]}]) ++cnt;
        }
        if (cnt != 1) continue;
        for (int i = 1; i <= R; ++i) {
          if (!used[{x[i], y[i]}]) {
            cout << x[i] << ' ' << y[i] << '\n';
            return 0;
          }
        }
        // Insert performance checkers here
        check_nested_loop_invariant(xx, yy, rad);
        check_repetitive_point_checks(xx, yy, rad);
        check_boundary_condition_verification(xx, yy, rad);
      }
    }
  }
  return 0;
}
```

### Commentary

- **Checker Implementation:** Each checker encapsulates a specific invariant. They work by evaluating the conditions under which the loops are likely to cause performance issues.
- **Placement:** The checks are placed after the primary loop logic to assess conditions before major evaluations. This ensures you don't add runtime overhead within the tightest inner loops.
- **Abort Mechanism:** `abort()` ensures the program stops once a performance bottleneck is detected, allowing developers to understand and address these issues early during testing. 

This approach will help identify potential slowdowns in a testing environment, enhancing the program's robustness before deployment.

