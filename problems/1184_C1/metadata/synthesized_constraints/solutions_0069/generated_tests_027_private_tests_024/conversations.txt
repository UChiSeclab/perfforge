system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The Cybermen and the Daleks have long been the Doctor's main enemies. Everyone knows that both these species enjoy destroying everything they encounter. However, a little-known fact about them is that they both also love taking Turing tests!

Heidi designed a series of increasingly difficult tasks for them to spend their time on, which would allow the Doctor enough time to save innocent lives!

The funny part is that these tasks would be very easy for a human to solve.

The first task is as follows. There are some points on the plane. All but one of them are on the boundary of an axis-aligned square (its sides are parallel to the axes). Identify that point.

Input

The first line contains an integer n (2 ≤ n ≤ 10).

Each of the following 4n + 1 lines contains two integers x_i, y_i (0 ≤ x_i, y_i ≤ 50), describing the coordinates of the next point.

It is guaranteed that there are at least n points on each side of the square and all 4n + 1 points are distinct.

Output

Print two integers — the coordinates of the point that is not on the boundary of the square.

Examples

Input


2
0 0
0 1
0 2
1 0
1 1
1 2
2 0
2 1
2 2


Output


1 1


Input


2
0 0
0 1
0 2
0 3
1 0
1 2
2 0
2 1
2 2


Output


0 3

Note

In both examples, the square has four sides x=0, x=2, y=0, y=2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long inf = 4e18, mod = 1e9 + 7;
void solve() {
  int n;
  cin >> n;
  vector<pair<long long, long long> > v;
  for (int i = 1; i <= 4 * n + 1; i++) {
    int x, y;
    cin >> x >> y;
    v.push_back({x, y});
  }
  for (int lx = 0; lx <= 50; lx++) {
    for (int ly = 0; ly <= 50; ly++) {
      for (int ux = lx + 1; ux <= 50; ux++) {
        for (int uy = ly + 1; uy <= 50; uy++) {
          vector<pair<long long, long long> > res;
          for (auto it : v)
            if ((it.first == lx || it.first == ux) && it.second >= ly &&
                it.second <= uy) {
            } else if ((it.second == ly || it.second == uy) && it.first >= lx &&
                       it.first <= ux) {
            } else
              res.push_back(it);
          if (res.size() == 1) {
            cout << res[0].first << " " << res[0].second << endl;
            return;
          }
        }
      }
    }
  }
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  int t = 1;
  while (t--) solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
11 11
11 12
11 15
11 17
11 18
11 19
11 28
11 33
11 38
11 40
24 11
15 46
17 11
17 46
18 46
19 11
19 46
20 11
20 46
24 46
25 46
26 11
32 11
32 46
33 11
34 46
36 11
39 11
40 46
43 11
44 0
46 14
46 15
46 17
46 22
46 26
46 28
46 32
46 43
46 45
46 46


(G.2) Fast Input

9
0 5
0 15
0 16
0 17
0 25
0 32
0 33
0 38
0 45
1 1
4 1
4 46
10 1
14 46
17 46
18 46
19 1
21 1
21 46
22 1
22 46
33 46
34 1
35 1
38 46
40 1
43 46
44 4
45 2
45 4
45 5
45 11
45 19
45 21
45 27
45 44
45 45


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long inf = 4e18, mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<long long, long long> > v; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 4 * n + 1; i++) { /* line 8 slow_hit_count: 42, fast_hit_count: 38 */
    int x, y; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> y; /* line 10 slow_hit_count: 41, fast_hit_count: 37 */
    v.push_back({x, y}); /* line 11 slow_hit_count: 41, fast_hit_count: 37 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  for (int lx = 0; lx <= 50; lx++) { /* line 13 slow_hit_count: 12, fast_hit_count: 1 */
    for (int ly = 0; ly <= 50; ly++) { /* line 14 slow_hit_count: 584, fast_hit_count: 2 */
      for (int ux = lx + 1; ux <= 50; ux++) { /* line 15 slow_hit_count: 26281, fast_hit_count: 96 */
        for (int uy = ly + 1; uy <= 50; uy++) { /* line 16 slow_hit_count: 677499, fast_hit_count: 4795 */
          vector<pair<long long, long long> > res; /* line 17 slow_hit_count: 651791, fast_hit_count: 4701 */
          for (auto it : v) /* line 18 slow_hit_count: 27375222, fast_hit_count: 178638 */
            if ((it.first == lx || it.first == ux) && it.second >= ly && /* line 19 slow_hit_count: 26723431, fast_hit_count: 173937 */
                it.second <= uy) { /* line 20 slow_hit_count: 626896, fast_hit_count: 45045 */
            } else if ((it.second == ly || it.second == uy) && it.first >= lx && /* line 21 slow_hit_count: 26387095, fast_hit_count: 150237 */
                       it.first <= ux) { /* line 22 slow_hit_count: 1020540, fast_hit_count: 21576 */
            } else /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
              res.push_back(it); /* line 24 slow_hit_count: 25877723, fast_hit_count: 138791 */
          if (res.size() == 1) { /* line 25 slow_hit_count: 651791, fast_hit_count: 4701 */
            cout << res[0].first << " " << res[0].second << endl; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
            return; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
          } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  int t = 1; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) solve(); /* line 38 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 39 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - Lines 13 to 24 show significantly higher hit counts for the slow input compared to the fast input.
   - Specifically, lines 16, 18, 19, 21, and 24 have extremely high hit counts in the slow input.

2. **Pinpointing Lines/Functions with More Hits:**
   - **Lines 16-24**: The nested loops with bounds ranging from 0 to 50 lead to a high number of iterations. Since the inner content (checking conditions on each point) is executed many times, this results in performance degradation.
   - **Line 18** (`for (auto it : v)`) iterates over all points repeatedly in potentially large loop iterations, causing high computational cost.

3. **Interaction with Data Structures/Loops:**
   - The algorithm attempts to find combinations of `(lx, ly)` and `(ux, uy)` that confine all but one point on the boundary of a square. This results in a large search space due to the nested loops iterating over possible `(lx, ly, ux, uy)` combinations.
   - Inefficient handling of conditions within these loops leads to significant slowdowns, especially when the configuration of points doesn't quickly match a valid square boundary.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariants in Natural Language:**

   - **Invariant 1: Nested Loop Iteration**
     - Natural Language: "The program experiences significant slowdowns when nested loops iterate extensively over potential square boundaries, examining each point multiple times."
     - Condition: When the number of combinations `(lx, ly, ux, uy)` that need checking is large, the nested loops with range constraints (`lx ≤ ux ≤ 50` and `ly ≤ uy ≤ 50`) result in high iteration counts.

   - **Invariant 2: Point Examination Frequency**
     - Natural Language: "If the algorithm repeatedly evaluates each point in the context of multiple square boundary configurations, performance can degrade."
     - Condition: Checking each point against multiple `(lx, ly, ux, uy)` combinations, particularly when many points lie on potential boundaries but do not quickly resolve to a correct configuration.

2. **Threshold Suggestions:**
   - For input sizes up to n = 10, iterate efficiently by minimizing redundant calculations within potential boundary evaluations.
   - Optimize the loop structure to reduce unnecessary full searches over all `(lx, ly, ux, uy)` combinations, potentially by recognizing early boundary conditions or by clustering points.

These performance-characterizing invariants highlight potential areas where the program can be optimized to avoid excessive computation and redundant checks, focusing on streamlining the boundary search process.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The Cybermen and the Daleks have long been the Doctor's main enemies. Everyone knows that both these species enjoy destroying everything they encounter. However, a little-known fact about them is that they both also love taking Turing tests!

Heidi designed a series of increasingly difficult tasks for them to spend their time on, which would allow the Doctor enough time to save innocent lives!

The funny part is that these tasks would be very easy for a human to solve.

The first task is as follows. There are some points on the plane. All but one of them are on the boundary of an axis-aligned square (its sides are parallel to the axes). Identify that point.

Input

The first line contains an integer n (2 ≤ n ≤ 10).

Each of the following 4n + 1 lines contains two integers x_i, y_i (0 ≤ x_i, y_i ≤ 50), describing the coordinates of the next point.

It is guaranteed that there are at least n points on each side of the square and all 4n + 1 points are distinct.

Output

Print two integers — the coordinates of the point that is not on the boundary of the square.

Examples

Input


2
0 0
0 1
0 2
1 0
1 1
1 2
2 0
2 1
2 2


Output


1 1


Input


2
0 0
0 1
0 2
0 3
1 0
1 2
2 0
2 1
2 2


Output


0 3

Note

In both examples, the square has four sides x=0, x=2, y=0, y=2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Based on our natural language invariants, we will create checker functions:

1. **Checker for Nested Loop Iteration:**
   - This check will ensure that the nested loops (for `lx`, `ly`, `ux`, `uy`) do not iterate excessively without terminating early.

```cpp
void check_nested_loop_invariant(int iterationCount, int threshold) {
    if (iterationCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive nested loop iterations!" << endl;
        abort();
    }
}
```

2. **Checker for Point Examination Frequency:**
   - This check ensures that points are not excessively re-evaluated in different boundary configurations.

```cpp
void check_point_evaluation_invariant(int evaluations, int threshold) {
    if (evaluations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive point evaluations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Program

Now, we'll integrate the checker functions into the provided C++ solution. We'll track the number of iterations and evaluations within the nested loops and use these checkers to detect when performance bottlenecks occur.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_nested_loop_invariant(int iterationCount, int threshold) {
    if (iterationCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive nested loop iterations!" << endl;
        abort();
    }
}

void check_point_evaluation_invariant(int evaluations, int threshold) {
    if (evaluations > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive point evaluations!" << endl;
        abort();
    }
}

void solve() {
    int n;
    cin >> n;
    vector<pair<long long, long long>> v;
    for (int i = 1; i <= 4 * n + 1; i++) {
        int x, y;
        cin >> x >> y;
        v.push_back({x, y});
    }
    
    int iterationCount = 0; // Counter for nested loop iterations
    int evaluationCount = 0; // Counter for point evaluations

    for (int lx = 0; lx <= 50; lx++) {
        for (int ly = 0; ly <= 50; ly++) {
            for (int ux = lx + 1; ux <= 50; ux++) {
                for (int uy = ly + 1; uy <= 50; uy++) {
                    iterationCount++;
                    vector<pair<long long, long long>> res;
                    for (auto it : v) {
                        evaluationCount++;
                        if ((it.first == lx || it.first == ux) && it.second >= ly && it.second <= uy) {
                        } else if ((it.second == ly || it.second == uy) && it.first >= lx && it.first <= ux) {
                        } else {
                            res.push_back(it);
                        }
                    }
                    
                    // Check for excessive iterations and evaluations
                    check_nested_loop_invariant(iterationCount, 1000000); // Arbitrary large threshold
                    check_point_evaluation_invariant(evaluationCount, 5000000); // Arbitrary large threshold
                    
                    if (res.size() == 1) {
                        cout << res[0].first << " " << res[0].second << endl;
                        return;
                    }
                }
            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t = 1;
    while (t--) solve();
}
```

### Explanation of Integration:

- **`check_nested_loop_invariant`**: Monitors the total number of iterations across all nested loops. The check is applied at every iteration to ensure it does not exceed a predefined threshold.
- **`check_point_evaluation_invariant`**: Counts and checks the frequency of point evaluations within the nested loops. 

This instrumented code addresses potential bottlenecks by alerting and aborting execution if the conditions for excessive computational effort are met. This setup is useful for detecting slow performance triggers and preventing inefficient executions during testing or fuzzing.

