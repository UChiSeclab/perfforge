system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The main city magazine offers its readers an opportunity to publish their ads. The format of the ad should be like this:

There are space-separated non-empty words of lowercase and uppercase Latin letters.

There are hyphen characters '-' in some words, their positions set word wrapping points. Word can include more than one hyphen. 

It is guaranteed that there are no adjacent spaces and no adjacent hyphens. No hyphen is adjacent to space. There are no spaces and no hyphens before the first word and after the last word. 

When the word is wrapped, the part of the word before hyphen and the hyphen itself stay on current line and the next part of the word is put on the next line. You can also put line break between two words, in that case the space stays on current line. Check notes for better understanding.

The ad can occupy no more that k lines and should have minimal width. The width of the ad is the maximal length of string (letters, spaces and hyphens are counted) in it.

You should write a program that will find minimal width of the ad.

Input

The first line contains number k (1 ≤ k ≤ 105).

The second line contains the text of the ad — non-empty space-separated words of lowercase and uppercase Latin letters and hyphens. Total length of the ad don't exceed 106 characters.

Output

Output minimal width of the ad.

Examples

Input

4
garage for sa-le


Output

7


Input

4
Edu-ca-tion-al Ro-unds are so fun


Output

10

Note

Here all spaces are replaced with dots.

In the first example one of possible results after all word wraps looks like this:
    
    
      
    garage.  
    for.  
    sa-  
    le  
    

The second example:
    
    
      
    Edu-ca-  
    tion-al.  
    Ro-unds.  
    are.so.fun  
    

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int k;
string s;
vector<int> len;
bool check(int x) {
  int pos = 0, ans = 0;
  while (pos < len.size()) {
    int tmp = x;
    while (pos < len.size() && tmp >= len[pos]) tmp -= len[pos++];
    ++ans;
    if (ans > k) return false;
  }
  return true;
}
int main() {
  cin >> k;
  getline(cin, s);
  getline(cin, s);
  int tmp = 0;
  for (int i = 0; i < s.size(); i++) {
    ++tmp;
    if (s[i] == ' ' || s[i] == '-') {
      len.push_back(tmp);
      tmp = 0;
    }
  }
  len.push_back(tmp);
  int lbound = 0, ubound = 1000000;
  for (int i = 0; i < 1500; i++) {
    int mid = (lbound + ubound) / 2;
    if (check(mid))
      ubound = mid;
    else
      lbound = mid + 1;
  }
  cout << lbound << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
TQEKQQiFXCqY iugCuECYdemF eriNNheolvXPxdGoqk-amHPkWhtvgIJLf-KYegDruprrdqR JShAkvoJxjDMEoHiOp nHgyCAQMfiQSz


(G.2) Fast Input

10
d


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int k; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
string s; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> len; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool check(int x) { /* line 6 slow_hit_count: 1500, fast_hit_count: 1500 */
  int pos = 0, ans = 0; /* line 7 slow_hit_count: 1500, fast_hit_count: 1500 */
  while (pos < len.size()) { /* line 8 slow_hit_count: 11924, fast_hit_count: 3009 */
    int tmp = x; /* line 9 slow_hit_count: 10427, fast_hit_count: 1510 */
    while (pos < len.size() && tmp >= len[pos]) tmp -= len[pos++]; /* line 10 slow_hit_count: 20912, fast_hit_count: 3009 */
    ++ans; /* line 11 slow_hit_count: 10427, fast_hit_count: 1510 */
    if (ans > k) return false; /* line 12 slow_hit_count: 10427, fast_hit_count: 1510 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 14 slow_hit_count: 1497, fast_hit_count: 1499 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> k; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  getline(cin, s); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  getline(cin, s); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  int tmp = 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < s.size(); i++) { /* line 21 slow_hit_count: 107, fast_hit_count: 2 */
    ++tmp; /* line 22 slow_hit_count: 106, fast_hit_count: 1 */
    if (s[i] == ' ' || s[i] == '-') { /* line 23 slow_hit_count: 106, fast_hit_count: 1 */
      len.push_back(tmp); /* line 24 slow_hit_count: 6, fast_hit_count: 0 */
      tmp = 0; /* line 25 slow_hit_count: 6, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  len.push_back(tmp); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  int lbound = 0, ubound = 1000000; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 1500; i++) { /* line 30 slow_hit_count: 1501, fast_hit_count: 1501 */
    int mid = (lbound + ubound) / 2; /* line 31 slow_hit_count: 1500, fast_hit_count: 1500 */
    if (check(mid)) /* line 32 slow_hit_count: 1500, fast_hit_count: 1500 */
      ubound = mid; /* line 33 slow_hit_count: 1497, fast_hit_count: 1499 */
    else /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
      lbound = mid + 1; /* line 35 slow_hit_count: 3, fast_hit_count: 1 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  cout << lbound << endl; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the provided C program, we need to analyze the hit counts and determine which parts of the code are being executed more frequently in the slow input case compared to the fast input case.

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - The `check()` function is a major area of interest, as it's executed 1500 times in both fast and slow cases (line 6), but with significantly more inner loop iterations for the slow case.
   - The `while` loop inside `check()` (line 8) has 11924 hits for the slow case compared to 3009 for the fast case, indicating this loop is a key contributor to the slowdown.
   - The inner loop (line 10) is executed 20912 times for the slow input, versus 3009 for the fast input. This suggests that this loop iteration count directly affects performance.

2. **Data Structure Interaction**:
   - The `len` vector is populated differently based on the input. For the slow input, it holds more values, indicating that more segments are being processed within these loops.

3. **Input Characteristic**:
   - The slow input likely has more or longer segments (from words and hyphenated parts) compared to the fast input, causing the `check()` function to make more passes or require more operations per pass.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the above analysis, we can derive several natural language performance invariants that describe conditions under which the program enters a slow path:

1. **Invariant 1: Large Number of Segments**
   - **Natural Language Description**: "When the input has a large number of segments due to frequent hyphens or spaces, the program may slow down significantly as it attempts to fit these segments into the specified number of lines."
   - **Explanation**: This is due to the increased number of iterations in the `while` loop on line 10, directly related to the number of entries in the `len` vector.

2. **Invariant 2: High Total Length of Segments**
   - **Natural Language Description**: "If the total length of segments (including hyphenated parts) is high, the program might slow down as it repeatedly attempts to minimize the width with a high number of checks."
   - **Explanation**: The length of words and hyphenated parts influences how often the `check()` function's internal loop is executed, which is critical for performance.

3. **Invariant 3: Extensive Use of Hyphens**
   - **Natural Language Description**: "When words contain numerous hyphens, leading to multiple wrap points, the computation becomes more intensive as the program evaluates multiple potential line breaks."
   - **Explanation**: Each hyphen introduces a potential wrap point, increasing the complexity of fitting segments into lines.

4. **Invariant 4: Near-Maximal k Value with Complex Input**
   - **Natural Language Description**: "If the number of allowed lines `k` is large and the input text is complex with many segments, the program may struggle to efficiently compute the minimal width."
   - **Explanation**: A larger `k` combined with complex input increases the search space for the binary search on width, leading to more iterations of the `check()` function.

These invariants can help identify potential slowdowns in future inputs by focusing on segment complexity and the interplay between input length and allowed lines (`k`).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The main city magazine offers its readers an opportunity to publish their ads. The format of the ad should be like this:

There are space-separated non-empty words of lowercase and uppercase Latin letters.

There are hyphen characters '-' in some words, their positions set word wrapping points. Word can include more than one hyphen. 

It is guaranteed that there are no adjacent spaces and no adjacent hyphens. No hyphen is adjacent to space. There are no spaces and no hyphens before the first word and after the last word. 

When the word is wrapped, the part of the word before hyphen and the hyphen itself stay on current line and the next part of the word is put on the next line. You can also put line break between two words, in that case the space stays on current line. Check notes for better understanding.

The ad can occupy no more that k lines and should have minimal width. The width of the ad is the maximal length of string (letters, spaces and hyphens are counted) in it.

You should write a program that will find minimal width of the ad.

Input

The first line contains number k (1 ≤ k ≤ 105).

The second line contains the text of the ad — non-empty space-separated words of lowercase and uppercase Latin letters and hyphens. Total length of the ad don't exceed 106 characters.

Output

Output minimal width of the ad.

Examples

Input

4
garage for sa-le


Output

7


Input

4
Edu-ca-tion-al Ro-unds are so fun


Output

10

Note

Here all spaces are replaced with dots.

In the first example one of possible results after all word wraps looks like this:
    
    
      
    garage.  
    for.  
    sa-  
    le  
    

The second example:
    
    
      
    Edu-ca-  
    tion-al.  
    Ro-unds.  
    are.so.fun  
    

Solution (C++ code):
{solution}


assistant: Let's start with Phase 3, where we will translate the performance-characterizing invariants into C++ checker code.

### Phase 3: Implementing Natural Language Invariants in C++

Given the performance-characterizing invariants from Phase 2, we can create the following C++ code snippets:

1. **Invariant 1: Large Number of Segments**

```cpp
void check_large_segments_invariant(size_t segmentCount) {
    if (segmentCount > 50) { // Assuming a threshold based on analysis and constraints
        cerr << "Warning: Performance bottleneck condition triggered - Too many segments!" << endl;
        abort();
    }
}
```

2. **Invariant 2: High Total Length of Segments**

```cpp
void check_high_length_invariant(int totalLength) {
    if (totalLength > 1000) { // Assuming a threshold for high total segment length
        cerr << "Warning: Performance bottleneck condition triggered - High total segment length!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Extensive Use of Hyphens**

```cpp
void check_hyphen_usage_invariant(int hyphenCount) {
    if (hyphenCount > 20) { // Assuming a threshold for excessive hyphen usage
        cerr << "Warning: Performance bottleneck condition triggered - Excessive hyphens!" << endl;
        abort();
    }
}
```

4. **Invariant 4: Near-Maximal k Value with Complex Input**

```cpp
void check_k_value_invariant(int k, size_t segmentCount) {
    if (k > 90000 && segmentCount > 30) { // Assuming a threshold for `k` in context with segment complexity
        cerr << "Warning: Performance bottleneck condition triggered - Large k with complex input!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checks into the provided C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

int k;
string s;
vector<int> len;

// Invariant Check Functions
void check_large_segments_invariant(size_t segmentCount) {
    if (segmentCount > 50) {
        cerr << "Warning: Performance bottleneck condition triggered - Too many segments!" << endl;
        abort();
    }
}

void check_high_length_invariant(int totalLength) {
    if (totalLength > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - High total segment length!" << endl;
        abort();
    }
}

void check_hyphen_usage_invariant(int hyphenCount) {
    if (hyphenCount > 20) {
        cerr << "Warning: Performance bottleneck condition triggered - Excessive hyphens!" << endl;
        abort();
    }
}

void check_k_value_invariant(int k, size_t segmentCount) {
    if (k > 90000 && segmentCount > 30) {
        cerr << "Warning: Performance bottleneck condition triggered - Large k with complex input!" << endl;
        abort();
    }
}

bool check(int x) {
    int pos = 0, ans = 0;
    while (pos < len.size()) {
        int tmp = x;
        while (pos < len.size() && tmp >= len[pos]) tmp -= len[pos++];
        ++ans;
        if (ans > k) return false;
    }
    return true;
}

int main() {
    cin >> k;
    getline(cin, s); // Read the entire line including spaces
    getline(cin, s); // Read the actual ad text
    
    int tmp = 0, hyphenCount = 0, totalLength = 0;
    for (int i = 0; i < s.size(); i++) {
        ++tmp;
        if (s[i] == '-') {
            ++hyphenCount;
        }
        if (s[i] == ' ' || s[i] == '-') {
            len.push_back(tmp);
            tmp = 0;
        }
    }
    len.push_back(tmp);

    totalLength = s.size();
    size_t segmentCount = len.size();

    // Check performance-characterizing invariants
    check_large_segments_invariant(segmentCount);
    check_high_length_invariant(totalLength);
    check_hyphen_usage_invariant(hyphenCount);
    check_k_value_invariant(k, segmentCount);

    int lbound = 0, ubound = 1000000;
    for (int i = 0; i < 1500; i++) {
        int mid = (lbound + ubound) / 2;
        if (check(mid))
            ubound = mid;
        else
            lbound = mid + 1;
    }
    cout << lbound << endl;
    return 0;
}
```

### Explanation of Instrumentation

- **Large Number of Segments**: We check the number of segments after parsing the input, ensuring it does not exceed a practical threshold.
- **High Total Length of Segments**: We measure the total length of the input string to catch long ads.
- **Extensive Use of Hyphens**: We count hyphens and warn if excessive, indicating many potential line breaks.
- **Near-Maximal k Value with Complex Input**: We check `k` in relation to segment complexity to identify problematic combinations.

These checks are placed outside tight loops, primarily after parsing, to avoid adding significant runtime overhead.

