system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The main city magazine offers its readers an opportunity to publish their ads. The format of the ad should be like this:

There are space-separated non-empty words of lowercase and uppercase Latin letters.

There are hyphen characters '-' in some words, their positions set word wrapping points. Word can include more than one hyphen. 

It is guaranteed that there are no adjacent spaces and no adjacent hyphens. No hyphen is adjacent to space. There are no spaces and no hyphens before the first word and after the last word. 

When the word is wrapped, the part of the word before hyphen and the hyphen itself stay on current line and the next part of the word is put on the next line. You can also put line break between two words, in that case the space stays on current line. Check notes for better understanding.

The ad can occupy no more that k lines and should have minimal width. The width of the ad is the maximal length of string (letters, spaces and hyphens are counted) in it.

You should write a program that will find minimal width of the ad.

Input

The first line contains number k (1 ≤ k ≤ 105).

The second line contains the text of the ad — non-empty space-separated words of lowercase and uppercase Latin letters and hyphens. Total length of the ad don't exceed 106 characters.

Output

Output minimal width of the ad.

Examples

Input

4
garage for sa-le


Output

7


Input

4
Edu-ca-tion-al Ro-unds are so fun


Output

10

Note

Here all spaces are replaced with dots.

In the first example one of possible results after all word wraps looks like this:
    
    
      
    garage.  
    for.  
    sa-  
    le  
    

The second example:
    
    
      
    Edu-ca-  
    tion-al.  
    Ro-unds.  
    are.so.fun  
    

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const long long INFLL = 1e18;
using namespace std;
int k;
void sep(vector<string> &vec, string &s) {
  string cur = "";
  for (auto ch : s) {
    cur += ch;
    if (ch == '-') {
      vec.push_back(cur);
      cur = "";
    }
  }
  if (!cur.empty()) vec.push_back(cur);
}
bool check(int w, string &s) {
  int n = (int)s.size();
  vector<string> words;
  string cur = "";
  for (int i = 0; i < n; i++) {
    if (s[i] == ' ') {
      if (!cur.empty()) sep(words, cur);
      cur = "";
    } else {
      cur += s[i];
    }
  }
  if (!cur.empty()) sep(words, cur);
  int lost = w;
  int res = 1;
  for (int i = 0; i < (int)words.size(); i++) {
    string word = words[i];
    int last = (i + 1 == (int)words.size() ? 0 : 1);
    if (word.back() == '-') last = 0;
    int need = (int)word.size() + last;
    if (lost >= need) {
      lost -= need;
    } else {
      bool ok = false;
      for (int j = (int)word.size() - 1, k = 0; j >= 0; j--, k++) {
        if (word[j] == '-') {
          if (lost >= j + 1) {
            lost = w - (need - j);
            if (lost < 0) {
              return false;
            }
            res++;
            ok = true;
          }
        }
      }
      if (!ok) {
        if (w >= need) {
          lost = w;
          lost -= need;
          res++;
        } else {
          return false;
        }
      }
    }
  }
  return res <= k;
}
int main() {
  cin >> k;
  string s;
  getline(cin, s);
  getline(cin, s);
  check(10, s);
  int l = 0, r = 1e6 + 10, m;
  while (r > l + 1) {
    m = (l + r) / 2;
    if (check(m, s))
      r = m;
    else
      l = m;
  }
  cout << r << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
lELWTeKqHCohtEOB PLhjMMwfpFlcnfft nWGsnztStldkrbGkJZz EtSrgwffzJSspzWpoMXGK-jmbVygQC BoIwaGSYKRsgmxBVwkoa


(G.2) Fast Input

10
b


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const long long INFLL = 1e18; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
void sep(vector<string> &vec, string &s) { /* line 5 slow_hit_count: 105, fast_hit_count: 20 */
  string cur = ""; /* line 6 slow_hit_count: 210, fast_hit_count: 40 */
  for (auto ch : s) { /* line 7 slow_hit_count: 2226, fast_hit_count: 40 */
    cur += ch; /* line 8 slow_hit_count: 2121, fast_hit_count: 20 */
    if (ch == '-') { /* line 9 slow_hit_count: 2121, fast_hit_count: 20 */
      vec.push_back(cur); /* line 10 slow_hit_count: 21, fast_hit_count: 0 */
      cur = ""; /* line 11 slow_hit_count: 21, fast_hit_count: 0 */
    } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  if (!cur.empty()) vec.push_back(cur); /* line 14 slow_hit_count: 105, fast_hit_count: 20 */
} /* line 15 slow_hit_count: 105, fast_hit_count: 20 */
bool check(int w, string &s) { /* line 16 slow_hit_count: 21, fast_hit_count: 20 */
  int n = (int)s.size(); /* line 17 slow_hit_count: 21, fast_hit_count: 20 */
  vector<string> words; /* line 18 slow_hit_count: 42, fast_hit_count: 40 */
  string cur = ""; /* line 19 slow_hit_count: 42, fast_hit_count: 40 */
  for (int i = 0; i < n; i++) { /* line 20 slow_hit_count: 2226, fast_hit_count: 40 */
    if (s[i] == ' ') { /* line 21 slow_hit_count: 2205, fast_hit_count: 20 */
      if (!cur.empty()) sep(words, cur); /* line 22 slow_hit_count: 84, fast_hit_count: 0 */
      cur = ""; /* line 23 slow_hit_count: 84, fast_hit_count: 0 */
    } else { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      cur += s[i]; /* line 25 slow_hit_count: 2121, fast_hit_count: 20 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  if (!cur.empty()) sep(words, cur); /* line 28 slow_hit_count: 21, fast_hit_count: 20 */
  int lost = w; /* line 29 slow_hit_count: 21, fast_hit_count: 20 */
  int res = 1; /* line 30 slow_hit_count: 21, fast_hit_count: 20 */
  for (int i = 0; i < (int)words.size(); i++) { /* line 31 slow_hit_count: 125, fast_hit_count: 40 */
    string word = words[i]; /* line 32 slow_hit_count: 109, fast_hit_count: 20 */
    int last = (i + 1 == (int)words.size() ? 0 : 1); /* line 33 slow_hit_count: 109, fast_hit_count: 20 */
    if (word.back() == '-') last = 0; /* line 34 slow_hit_count: 109, fast_hit_count: 20 */
    int need = (int)word.size() + last; /* line 35 slow_hit_count: 109, fast_hit_count: 20 */
    if (lost >= need) { /* line 36 slow_hit_count: 109, fast_hit_count: 20 */
      lost -= need; /* line 37 slow_hit_count: 89, fast_hit_count: 20 */
    } else { /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
      bool ok = false; /* line 39 slow_hit_count: 20, fast_hit_count: 0 */
      for (int j = (int)word.size() - 1, k = 0; j >= 0; j--, k++) { /* line 40 slow_hit_count: 373, fast_hit_count: 0 */
        if (word[j] == '-') { /* line 41 slow_hit_count: 353, fast_hit_count: 0 */
          if (lost >= j + 1) { /* line 42 slow_hit_count: 5, fast_hit_count: 0 */
            lost = w - (need - j); /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
            if (lost < 0) { /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
              return false; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
            } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
            res++; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
            ok = true; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      if (!ok) { /* line 52 slow_hit_count: 20, fast_hit_count: 0 */
        if (w >= need) { /* line 53 slow_hit_count: 20, fast_hit_count: 0 */
          lost = w; /* line 54 slow_hit_count: 15, fast_hit_count: 0 */
          lost -= need; /* line 55 slow_hit_count: 15, fast_hit_count: 0 */
          res++; /* line 56 slow_hit_count: 15, fast_hit_count: 0 */
        } else { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
          return false; /* line 58 slow_hit_count: 5, fast_hit_count: 0 */
        } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  return res <= k; /* line 63 slow_hit_count: 16, fast_hit_count: 20 */
} /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> k; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  string s; /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  getline(cin, s); /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  getline(cin, s); /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  check(10, s); /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  int l = 0, r = 1e6 + 10, m; /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  while (r > l + 1) { /* line 72 slow_hit_count: 21, fast_hit_count: 20 */
    m = (l + r) / 2; /* line 73 slow_hit_count: 20, fast_hit_count: 19 */
    if (check(m, s)) /* line 74 slow_hit_count: 20, fast_hit_count: 19 */
      r = m; /* line 75 slow_hit_count: 16, fast_hit_count: 19 */
    else /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
      l = m; /* line 77 slow_hit_count: 4, fast_hit_count: 0 */
  } /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
  cout << r << endl; /* line 79 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 81 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the hit counts from the slow and fast inputs, we can observe the following:

1. **Function `sep`:** This function is called significantly more often for the slow input, especially lines 7, 8, and 9. It suggests that the words in the input contain hyphens, triggering the logic inside this function.

2. **Loop and Conditions in `check`:** The main loop in the `check` function (starting at line 20) and the nested loop (starting at line 40) are hit much more for the slow input. This indicates that the code iterates over a large number of characters and executes additional logic based on hyphen positions.

3. **Hyphen Handling:** The hit counts for lines 41 and 42 demonstrate that the program frequently checks for hyphens and adjusts the logic for word wrapping, which implies a performance bottleneck due to hyphen processing.

4. **Line Splitting Logic:** The conditions that decide when to move to the next line (lines 36-58) are frequently triggered for the slow input, indicating that complex decisions are made for line breaks.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, here are the natural language performance invariants:

1. **Hyphen-Heavy Words:**
   - **Invariant:** "If the input contains multiple words with hyphens, and these hyphens are placed in a way that they significantly increase line wrap decisions, the program may slow down. This is especially true if many hyphens are near the start or end of words."
   - **Explanation:** The repeated checking for hyphens and adjusting line positions adds overhead, particularly when there are many hyphens near word boundaries.

2. **Long Words Without Spaces:**
   - **Invariant:** "When the input includes long words without spaces, the logic for determining word splits and line wraps becomes complex, leading to slower performance."
   - **Explanation:** The absence of natural split points (spaces) means the program has to rely more heavily on hyphen processing, which is more computationally expensive.

3. **Frequent Wrapping Decisions:**
   - **Invariant:** "If the input text frequently triggers the logic to decide between staying on the current line or moving a portion of text to the next line, particularly through the hyphen-checking loop, the execution time increases."
   - **Explanation:** Every time the program evaluates where to break lines, especially when the decision is not straightforward (due to hyphens), it incurs additional computational cost.

4. **Close to Maximum Line Constraint:**
   - **Invariant:** "When the number of required lines (`k`) is close to the number of words or sections of text after hyphen splitting, the program's performance can degrade due to frequent backtracking and re-evaluations of line breaks."
   - **Explanation:** The constraints on the number of lines (`k`) force the program to make more complex decisions, particularly when many segments need careful wrapping.

These invariants are designed to guide future analysis and optimization attempts by highlighting potential slow paths based on input characteristics and logical decision points in the code.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The main city magazine offers its readers an opportunity to publish their ads. The format of the ad should be like this:

There are space-separated non-empty words of lowercase and uppercase Latin letters.

There are hyphen characters '-' in some words, their positions set word wrapping points. Word can include more than one hyphen. 

It is guaranteed that there are no adjacent spaces and no adjacent hyphens. No hyphen is adjacent to space. There are no spaces and no hyphens before the first word and after the last word. 

When the word is wrapped, the part of the word before hyphen and the hyphen itself stay on current line and the next part of the word is put on the next line. You can also put line break between two words, in that case the space stays on current line. Check notes for better understanding.

The ad can occupy no more that k lines and should have minimal width. The width of the ad is the maximal length of string (letters, spaces and hyphens are counted) in it.

You should write a program that will find minimal width of the ad.

Input

The first line contains number k (1 ≤ k ≤ 105).

The second line contains the text of the ad — non-empty space-separated words of lowercase and uppercase Latin letters and hyphens. Total length of the ad don't exceed 106 characters.

Output

Output minimal width of the ad.

Examples

Input

4
garage for sa-le


Output

7


Input

4
Edu-ca-tion-al Ro-unds are so fun


Output

10

Note

Here all spaces are replaced with dots.

In the first example one of possible results after all word wraps looks like this:
    
    
      
    garage.  
    for.  
    sa-  
    le  
    

The second example:
    
    
      
    Edu-ca-  
    tion-al.  
    Ro-unds.  
    are.so.fun  
    

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants in C++

Here are the C++ checkers for the previously identified invariants:

1. **Hyphen-Heavy Words:**
   - **Checker Code:**
   ```cpp
   void check_hyphen_heavy_words(const vector<string>& words) {
       int hyphen_count = 0;
       for (const string& word : words) {
           hyphen_count += count(word.begin(), word.end(), '-');
           if (hyphen_count > 10) { // Arbitrary threshold for demonstration
               cerr << "Warning: Performance bottleneck condition triggered due to hyphen-heavy words!" << endl;
               abort();
           }
       }
   }
   ```

2. **Long Words Without Spaces:**
   - **Checker Code:**
   ```cpp
   void check_long_words_without_spaces(const vector<string>& words) {
       for (const string& word : words) {
           if (word.size() > 20) { // Arbitrary threshold for demonstration
               cerr << "Warning: Performance bottleneck condition triggered due to long words without spaces!" << endl;
               abort();
           }
       }
   }
   ```

3. **Frequent Wrapping Decisions:**
   - **Checker Code:**
   ```cpp
   void check_frequent_wrapping_decisions(int wrap_decision_count) {
       if (wrap_decision_count > 15) { // Arbitrary threshold for demonstration
           cerr << "Warning: Performance bottleneck condition triggered due to frequent wrapping decisions!" << endl;
           abort();
       }
   }
   ```

4. **Close to Maximum Line Constraint:**
   - **Checker Code:**
   ```cpp
   void check_close_to_max_line_constraint(int res, int k) {
       if (res >= k - 1) { // Close to the maximum line constraint
           cerr << "Warning: Performance bottleneck condition triggered due to being close to max line constraint!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Below is the instrumented C++ program with the checker functions integrated:

```cpp
#include <bits/stdc++.h>
const long long INFLL = 1e18;
using namespace std;

// Checker functions
void check_hyphen_heavy_words(const vector<string>& words) {
    int hyphen_count = 0;
    for (const string& word : words) {
        hyphen_count += count(word.begin(), word.end(), '-');
        if (hyphen_count > 10) { // Arbitrary threshold for demonstration
            cerr << "Warning: Performance bottleneck condition triggered due to hyphen-heavy words!" << endl;
            abort();
        }
    }
}

void check_long_words_without_spaces(const vector<string>& words) {
    for (const string& word : words) {
        if (word.size() > 20) { // Arbitrary threshold for demonstration
            cerr << "Warning: Performance bottleneck condition triggered due to long words without spaces!" << endl;
            abort();
        }
    }
}

void check_frequent_wrapping_decisions(int wrap_decision_count) {
    if (wrap_decision_count > 15) { // Arbitrary threshold for demonstration
        cerr << "Warning: Performance bottleneck condition triggered due to frequent wrapping decisions!" << endl;
        abort();
    }
}

void check_close_to_max_line_constraint(int res, int k) {
    if (res >= k - 1) { // Close to the maximum line constraint
        cerr << "Warning: Performance bottleneck condition triggered due to being close to max line constraint!" << endl;
        abort();
    }
}

int k;

void sep(vector<string> &vec, string &s) {
    string cur = "";
    for (auto ch : s) {
        cur += ch;
        if (ch == '-') {
            vec.push_back(cur);
            cur = "";
        }
    }
    if (!cur.empty()) vec.push_back(cur);
}

bool check(int w, string &s) {
    int n = (int)s.size();
    vector<string> words;
    string cur = "";

    for (int i = 0; i < n; i++) {
        if (s[i] == ' ') {
            if (!cur.empty()) sep(words, cur);
            cur = "";
        } else {
            cur += s[i];
        }
    }
    if (!cur.empty()) sep(words, cur);

    // Invariant checks before processing
    check_hyphen_heavy_words(words);
    check_long_words_without_spaces(words);

    int lost = w;
    int res = 1;
    int wrap_decision_count = 0;

    for (int i = 0; i < (int)words.size(); i++) {
        string word = words[i];
        int last = (i + 1 == (int)words.size() ? 0 : 1);
        if (word.back() == '-') last = 0;
        int need = (int)word.size() + last;

        if (lost >= need) {
            lost -= need;
        } else {
            bool ok = false;
            for (int j = (int)word.size() - 1, k = 0; j >= 0; j--, k++) {
                if (word[j] == '-') {
                    if (lost >= j + 1) {
                        lost = w - (need - j);
                        if (lost < 0) {
                            return false;
                        }
                        res++;
                        ok = true;
                        wrap_decision_count++;
                    }
                }
            }
            if (!ok) {
                if (w >= need) {
                    lost = w;
                    lost -= need;
                    res++;
                    wrap_decision_count++;
                } else {
                    return false;
                }
            }
        }
    }

    // Check after processing with collected data
    check_frequent_wrapping_decisions(wrap_decision_count);
    check_close_to_max_line_constraint(res, k);

    return res <= k;
}

int main() {
    cin >> k;
    string s;
    getline(cin, s);
    getline(cin, s);
    check(10, s);
    int l = 0, r = 1e6 + 10, m;

    while (r > l + 1) {
        m = (l + r) / 2;
        if (check(m, s))
            r = m;
        else
            l = m;
    }

    cout << r << endl;
    return 0;
}
```

### Explanation:

- **Checkers** are implemented as separate functions that are called at appropriate points in the program.
- **`check_hyphen_heavy_words` and `check_long_words_without_spaces`** are called after splitting the input string into words, since they rely on properties of individual words.
- **`check_frequent_wrapping_decisions` and `check_close_to_max_line_constraint`** are called after the main logic in `check` function, where wrap decisions and line constraints are evaluated.
- These checks will alert and stop the program if a performance bottleneck condition is met, thus aiding debugging and optimization.

