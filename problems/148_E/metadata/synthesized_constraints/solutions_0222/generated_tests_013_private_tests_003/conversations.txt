system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

During her tantrums the princess usually smashes some collectable porcelain. Every furious shriek is accompanied with one item smashed.

The collection of porcelain is arranged neatly on n shelves. Within each shelf the items are placed in one row, so that one can access only the outermost items — the leftmost or the rightmost item, not the ones in the middle of the shelf. Once an item is taken, the next item on that side of the shelf can be accessed (see example). Once an item is taken, it can't be returned to the shelves.

You are given the values of all items. Your task is to find the maximal damage the princess' tantrum of m shrieks can inflict on the collection of porcelain.

Input

The first line of input data contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 10000). The next n lines contain the values of the items on the shelves: the first number gives the number of items on this shelf (an integer between 1 and 100, inclusive), followed by the values of the items (integers between 1 and 100, inclusive), in the order in which they appear on the shelf (the first number corresponds to the leftmost item, the last one — to the rightmost one). The total number of items is guaranteed to be at least m.

Output

Output the maximal total value of a tantrum of m shrieks.

Examples

Input

2 3
3 3 7 2
3 4 1 5


Output

15


Input

1 3
4 4 3 1 2


Output

9

Note

In the first case there are two shelves, each with three items. To maximize the total value of the items chosen, one can take two items from the left side of the first shelf and one item from the right side of the second shelf.

In the second case there is only one shelf, so all three items are taken from it — two from the left side and one from the right side.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void scan(int &x) {
  register int c = getchar();
  x = 0;
  int neg = 0;
  for (; ((c < 48 || c > 57) && c != '-'); c = getchar())
    ;
  if (c == '-') {
    neg = 1;
    c = getchar();
  }
  for (; c > 47 && c < 58; c = getchar()) {
    x = (x << 1) + (x << 3) + c - 48;
  }
  if (neg) x = -x;
}
const int M = 101;
int dp[M][M], dp1[M][10001], s[M], a[M][M], mx[101][101], nn, mm;
int solve(int l, int r, int d) {
  if (d > mm) return 0;
  if (l > r) return 0;
  if (l == r) {
    return a[nn][l];
  }
  int &ret = dp[l][r];
  if (ret != -1) return ret;
  ret = 0;
  ret +=
      max(solve(l + 1, r, d + 1) + a[nn][l], solve(l, r - 1, d + 1) + a[nn][r]);
  return ret;
}
int main() {
  int n, m;
  cin >> n >> m;
  for (int i = 1; i <= n; i++) {
    scan(s[i]);
    for (int j = 0; j < s[i]; j++) {
      scan(a[i][j]);
    }
  }
  for (int i = 1; i <= n; i++) {
    nn = i;
    for (int j = 1; j <= s[i]; j++) {
      memset(dp, -1, sizeof dp);
      mm = j;
      mx[i][j] = solve(0, s[i] - 1, 1);
    }
  }
  memset(dp, -1, sizeof dp);
  dp1[0][0] = 0;
  for (int i = 1; i <= n; i++) {
    for (int j = 0; j < s[i]; j++) {
      for (int k = 0; k <= m; k++) {
        if (dp1[i - 1][k] != -1) {
          if (k + j + 1 <= m)
            dp1[i][k + j + 1] =
                max(dp1[i][k + j + 1], dp1[i - 1][k] + mx[i][j + 1]);
          dp1[i][k] = max(dp1[i - 1][k], dp1[i][k]);
        }
      }
    }
  }
  printf("%d\n", dp1[n][m]);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 68
100 50 58 15 8 69 66 49 97 18 74 6 39 19 39 37 25 4 88 75 17 79 41 21 44 39 7 42 63 82 92 87 41 85 49 30 43 80 165 106 98 88 16 15 15 74 81 76 33 19 64 3 14 72 17 36 33 21 34 59 38 75 48 1 57 20 82 41 74 95 24 89 82 34 1 84 20 58 79 58 16 99 33 97 31 5 54 87 5 64 70 40 93 25 50 62 53 80 75 68 13


(G.2) Fast Input

1 1
1 100


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void scan(int &x) { /* line 3 slow_hit_count: 101, fast_hit_count: 2 */
  register int c = getchar(); /* line 4 slow_hit_count: 101, fast_hit_count: 2 */
  x = 0; /* line 5 slow_hit_count: 101, fast_hit_count: 2 */
  int neg = 0; /* line 6 slow_hit_count: 101, fast_hit_count: 2 */
  for (; ((c < 48 || c > 57) && c != '-'); c = getchar()) /* line 7 slow_hit_count: 102, fast_hit_count: 3 */
    ; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  if (c == '-') { /* line 9 slow_hit_count: 101, fast_hit_count: 2 */
    neg = 1; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    c = getchar(); /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  for (; c > 47 && c < 58; c = getchar()) { /* line 13 slow_hit_count: 297, fast_hit_count: 6 */
    x = (x << 1) + (x << 3) + c - 48; /* line 14 slow_hit_count: 196, fast_hit_count: 4 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  if (neg) x = -x; /* line 16 slow_hit_count: 101, fast_hit_count: 2 */
} /* line 17 slow_hit_count: 101, fast_hit_count: 2 */
const int M = 101; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int dp[M][M], dp1[M][10001], s[M], a[M][M], mx[101][101], nn, mm; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int solve(int l, int r, int d) { /* line 20 slow_hit_count: 343300, fast_hit_count: 1 */
  if (d > mm) return 0; /* line 21 slow_hit_count: 343300, fast_hit_count: 1 */
  if (l > r) return 0; /* line 22 slow_hit_count: 333400, fast_hit_count: 1 */
  if (l == r) { /* line 23 slow_hit_count: 333400, fast_hit_count: 1 */
    return a[nn][l]; /* line 24 slow_hit_count: 198, fast_hit_count: 1 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  int &ret = dp[l][r]; /* line 26 slow_hit_count: 333202, fast_hit_count: 0 */
  if (ret != -1) return ret; /* line 27 slow_hit_count: 333202, fast_hit_count: 0 */
  ret = 0; /* line 28 slow_hit_count: 171600, fast_hit_count: 0 */
  ret += /* line 29 slow_hit_count: 171600, fast_hit_count: 0 */
      max(solve(l + 1, r, d + 1) + a[nn][l], solve(l, r - 1, d + 1) + a[nn][r]); /* line 30 slow_hit_count: 171600, fast_hit_count: 0 */
  return ret; /* line 31 slow_hit_count: 171600, fast_hit_count: 0 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 36 slow_hit_count: 2, fast_hit_count: 2 */
    scan(s[i]); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
    for (int j = 0; j < s[i]; j++) { /* line 38 slow_hit_count: 101, fast_hit_count: 2 */
      scan(a[i][j]); /* line 39 slow_hit_count: 100, fast_hit_count: 1 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 42 slow_hit_count: 2, fast_hit_count: 2 */
    nn = i; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
    for (int j = 1; j <= s[i]; j++) { /* line 44 slow_hit_count: 101, fast_hit_count: 2 */
      memset(dp, -1, sizeof dp); /* line 45 slow_hit_count: 100, fast_hit_count: 1 */
      mm = j; /* line 46 slow_hit_count: 100, fast_hit_count: 1 */
      mx[i][j] = solve(0, s[i] - 1, 1); /* line 47 slow_hit_count: 100, fast_hit_count: 1 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  memset(dp, -1, sizeof dp); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  dp1[0][0] = 0; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 52 slow_hit_count: 2, fast_hit_count: 2 */
    for (int j = 0; j < s[i]; j++) { /* line 53 slow_hit_count: 101, fast_hit_count: 2 */
      for (int k = 0; k <= m; k++) { /* line 54 slow_hit_count: 7000, fast_hit_count: 3 */
        if (dp1[i - 1][k] != -1) { /* line 55 slow_hit_count: 6900, fast_hit_count: 2 */
          if (k + j + 1 <= m) /* line 56 slow_hit_count: 6900, fast_hit_count: 2 */
            dp1[i][k + j + 1] = /* line 57 slow_hit_count: 2346, fast_hit_count: 1 */
                max(dp1[i][k + j + 1], dp1[i - 1][k] + mx[i][j + 1]); /* line 58 slow_hit_count: 2346, fast_hit_count: 1 */
          dp1[i][k] = max(dp1[i - 1][k], dp1[i][k]); /* line 59 slow_hit_count: 6900, fast_hit_count: 2 */
        } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", dp1[n][m]); /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 66 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts**:
   - The function `solve` (lines 20-31) is a major hotspot, with a significantly higher hit count during the slow input (343,300 hits) compared to the fast input (1 hit).
   - The loop within `solve` (line 30) contributes heavily to these hit counts. Recursive calls within this line suggest deep recursion or a high number of calls.

2. **Lines with Significantly More Hits**:
   - Lines 21-31 inside the `solve` function, particularly lines 26-31, which involve dynamic programming table lookups and recursive calls.
   - Line 30 involves recursive calls to `solve` itself, indicating a potential bottleneck due to repeated calculations or excessive depth.

3. **Interaction with Data Structures**:
   - The dynamic programming (DP) array `dp` is involved in caching results (lines 26-27). However, repeated resets of `dp` (lines 45, 50) could result in recalculating values unnecessarily.
   - The function `solve` is operating deeply on `a[nn]`, the array representing items on a shelf, indicating potential inefficient operations when the number of items per shelf is large.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Deep Recursion and High Branching**:
   - **Invariant**: "When processing shelves with a large number of items, deep recursion combined with a high branching factor can significantly slow down execution."
   - **Explanation**: If a shelf has a large number of items (`s[i]` close to 100), the recursive calls in `solve` can lead to excessive computation due to high branching and recursion depth.

2. **Inefficient DP Table Usage**:
   - **Invariant**: "If the dynamic programming table is frequently reset and recalculated for every shelf, the program may suffer from redundant computations, especially when `m` is large."
   - **Explanation**: The frequent resetting of the DP table (`dp`) and recalculating values for different configurations (`nn` and `mm`) without leveraging cached results can lead to inefficiencies, particularly when `m` (number of shrieks) is large.

3. **High Volume of Recursive Calls**:
   - **Invariant**: "When the number of items taken from shelves (`m` shrieks) is close to the maximum constraint, the number of recursive calls can drastically increase, slowing down execution."
   - **Explanation**: The recursive function `solve` is called extensively to calculate maximum damage for each shelf configuration. If `m` is large, the recursion depth and breadth increase, potentially leading to a combinatorial explosion of function calls.

By understanding these invariants, one can anticipate performance issues and optimize the code by reducing recursion depth, improving DP table usage, or optimizing the algorithm structure to minimize redundant calculations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
During her tantrums the princess usually smashes some collectable porcelain. Every furious shriek is accompanied with one item smashed.

The collection of porcelain is arranged neatly on n shelves. Within each shelf the items are placed in one row, so that one can access only the outermost items — the leftmost or the rightmost item, not the ones in the middle of the shelf. Once an item is taken, the next item on that side of the shelf can be accessed (see example). Once an item is taken, it can't be returned to the shelves.

You are given the values of all items. Your task is to find the maximal damage the princess' tantrum of m shrieks can inflict on the collection of porcelain.

Input

The first line of input data contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 10000). The next n lines contain the values of the items on the shelves: the first number gives the number of items on this shelf (an integer between 1 and 100, inclusive), followed by the values of the items (integers between 1 and 100, inclusive), in the order in which they appear on the shelf (the first number corresponds to the leftmost item, the last one — to the rightmost one). The total number of items is guaranteed to be at least m.

Output

Output the maximal total value of a tantrum of m shrieks.

Examples

Input

2 3
3 3 7 2
3 4 1 5


Output

15


Input

1 3
4 4 3 1 2


Output

9

Note

In the first case there are two shelves, each with three items. To maximize the total value of the items chosen, one can take two items from the left side of the first shelf and one item from the right side of the second shelf.

In the second case there is only one shelf, so all three items are taken from it — two from the left side and one from the right side.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

1. **Invariant: Deep Recursion and High Branching**  
   - **Checker Code**: This invariant checks if the recursion depth combined with branching (number of items `s[i]` per shelf) exceeds a threshold that could slow down execution. 

    ```cpp
    void check_recursion_invariant(int s, int m, int currentDepth, int maxDepth) {
        if ((s > 50) && (currentDepth > maxDepth)) {
            cerr << "Warning: High recursion depth or branching factor detected!" << endl;
            abort();
        }
    }
    ```

2. **Invariant: Inefficient DP Table Usage**  
   - **Checker Code**: This invariant checks if the DP table is reset too frequently, which can cause performance degradation due to redundant calculations.

    ```cpp
    void check_dp_invariant(int m) {
        if (m > 5000) {  // Assuming a threshold for large m
            cerr << "Warning: DP table reset often with large m!" << endl;
            abort();
        }
    }
    ```

3. **Invariant: High Volume of Recursive Calls**  
   - **Checker Code**: This checks if the recursive function is called excessively, given a large value of `m`.

    ```cpp
    void check_recursive_calls_invariant(int m) {
        if (m > 8000) {  // Assuming a large threshold based on constraints
            cerr << "Warning: Excessive recursive calls due to large m!" << endl;
            abort();
        }
    }
    ```

### Phase 4: Integrating Checker Code into the Original Program

Below is the instrumented C++ code with the performance checks integrated at appropriate places to avoid adding overhead inside tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

void scan(int &x) {
  register int c = getchar();
  x = 0;
  int neg = 0;
  for (; ((c < 48 || c > 57) && c != '-'); c = getchar());
  if (c == '-') {
    neg = 1;
    c = getchar();
  }
  for (; c > 47 && c < 58; c = getchar()) {
    x = (x << 1) + (x << 3) + c - 48;
  }
  if (neg) x = -x;
}

const int M = 101;
int dp[M][M], dp1[M][10001], s[M], a[M][M], mx[101][101], nn, mm;

// Function to check recursion depth and branching
void check_recursion_invariant(int s, int currentDepth) {
    if ((s > 50) && (currentDepth > 50)) {
        cerr << "Warning: High recursion depth or branching factor detected!" << endl;
        abort();
    }
}

// Function to check DP reset inefficiency
void check_dp_invariant(int m) {
    if (m > 5000) {
        cerr << "Warning: DP table reset often with large m!" << endl;
        abort();
    }
}

// Function to check high volume of recursive calls
void check_recursive_calls_invariant(int m) {
    if (m > 8000) {
        cerr << "Warning: Excessive recursive calls due to large m!" << endl;
        abort();
    }
}

int solve(int l, int r, int d) {
  check_recursion_invariant(s[nn], d);
  if (d > mm) return 0;
  if (l > r) return 0;
  if (l == r) {
    return a[nn][l];
  }
  int &ret = dp[l][r];
  if (ret != -1) return ret;
  ret = 0;
  ret += max(solve(l + 1, r, d + 1) + a[nn][l], solve(l, r - 1, d + 1) + a[nn][r]);
  return ret;
}

int main() {
  int n, m;
  cin >> n >> m;

  check_dp_invariant(m);  // Placing check after input reading
  check_recursive_calls_invariant(m);  // Placing check after input reading

  for (int i = 1; i <= n; i++) {
    scan(s[i]);
    for (int j = 0; j < s[i]; j++) {
      scan(a[i][j]);
    }
  }

  for (int i = 1; i <= n; i++) {
    nn = i;
    for (int j = 1; j <= s[i]; j++) {
      memset(dp, -1, sizeof dp);
      mm = j;
      mx[i][j] = solve(0, s[i] - 1, 1);
    }
  }

  memset(dp, -1, sizeof dp);
  dp1[0][0] = 0;
  for (int i = 1; i <= n; i++) {
    for (int j = 0; j < s[i]; j++) {
      for (int k = 0; k <= m; k++) {
        if (dp1[i - 1][k] != -1) {
          if (k + j + 1 <= m)
            dp1[i][k + j + 1] = max(dp1[i][k + j + 1], dp1[i - 1][k] + mx[i][j + 1]);
          dp1[i][k] = max(dp1[i - 1][k], dp1[i][k]);
        }
      }
    }
  }
  
  printf("%d\n", dp1[n][m]);
  return 0;
}
```

**Comments**:
- The checks are strategically placed outside critical loops or before recursive calls to avoid performance degradation.
- The conditions in the checks are designed based on the inferred thresholds that could lead to performance bottlenecks.
- The checks will trigger warnings and abort the program if potential bottlenecks are identified.

