system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

During her tantrums the princess usually smashes some collectable porcelain. Every furious shriek is accompanied with one item smashed.

The collection of porcelain is arranged neatly on n shelves. Within each shelf the items are placed in one row, so that one can access only the outermost items — the leftmost or the rightmost item, not the ones in the middle of the shelf. Once an item is taken, the next item on that side of the shelf can be accessed (see example). Once an item is taken, it can't be returned to the shelves.

You are given the values of all items. Your task is to find the maximal damage the princess' tantrum of m shrieks can inflict on the collection of porcelain.

Input

The first line of input data contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 10000). The next n lines contain the values of the items on the shelves: the first number gives the number of items on this shelf (an integer between 1 and 100, inclusive), followed by the values of the items (integers between 1 and 100, inclusive), in the order in which they appear on the shelf (the first number corresponds to the leftmost item, the last one — to the rightmost one). The total number of items is guaranteed to be at least m.

Output

Output the maximal total value of a tantrum of m shrieks.

Examples

Input

2 3
3 3 7 2
3 4 1 5


Output

15


Input

1 3
4 4 3 1 2


Output

9

Note

In the first case there are two shelves, each with three items. To maximize the total value of the items chosen, one can take two items from the left side of the first shelf and one item from the right side of the second shelf.

In the second case there is only one shelf, so all three items are taken from it — two from the left side and one from the right side.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, m;
long long dpa[111][111][111], a[111][111], dpb[111][10011];
int arr[111][111], sz[111], idx;
int vis[111][111][111], cnt = 1;
long long funa(int l, int r, int rem) {
  if (!rem || l > r) return 0;
  long long &ret = dpa[l][r][rem];
  if (vis[l][r][rem] == cnt) return ret;
  long long a = arr[idx][l] + funa(l + 1, r, rem - 1);
  long long b = arr[idx][r] + funa(l, r - 1, rem - 1);
  vis[l][r][rem] = cnt;
  return ret = max(a, b);
}
long long funb(int id, int rem) {
  if (rem == 0) return 0;
  if (id == n) return 0;
  long long &ret = dpb[id][rem];
  if (ret != -1) return ret;
  for (int i = 0; i <= sz[id]; ++i) {
    if (i <= rem) ret = max(ret, a[id][i] + funb(id + 1, rem - i));
  }
  return ret;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cin >> n >> m;
  for (int i = 0; i < n; ++i) {
    cin >> sz[i];
    for (int j = 0; j < sz[i]; ++j) cin >> arr[i][j];
  }
  memset(dpb, -1, sizeof dpb);
  for (int i = 0; i < n; ++i) {
    idx = i;
    for (int j = 0; j <= sz[i]; ++j) {
      a[i][j] = funa(0, sz[i] - 1, j);
    }
    ++cnt;
  }
  cout << funb(0, m) << '\n';
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 68
100 50 58 15 8 69 66 49 97 18 74 6 39 19 76 37 25 4 88 75 17 79 41 21 44 39 7 42 63 82 92 87 41 85 49 30 43 80 165 106 98 88 16 15 97 74 81 76 33 19 64 3 14 72 17 36 33 21 34 59 38 75 48 1 57 20 82 41 74 95 24 89 82 34 1 84 20 58 64 58 16 99 33 97 31 5 54 87 5 64 70 40 93 25 50 62 53 80 75 68 13


(G.2) Fast Input

1 1
1 100


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long dpa[111][111][111], a[111][111], dpb[111][10011]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int arr[111][111], sz[111], idx; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int vis[111][111][111], cnt = 1; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long funa(int l, int r, int rem) { /* line 7 slow_hit_count: 343501, fast_hit_count: 4 */
  if (!rem || l > r) return 0; /* line 8 slow_hit_count: 343501, fast_hit_count: 4 */
  long long &ret = dpa[l][r][rem]; /* line 9 slow_hit_count: 333400, fast_hit_count: 1 */
  if (vis[l][r][rem] == cnt) return ret; /* line 10 slow_hit_count: 333400, fast_hit_count: 1 */
  long long a = arr[idx][l] + funa(l + 1, r, rem - 1); /* line 11 slow_hit_count: 171700, fast_hit_count: 1 */
  long long b = arr[idx][r] + funa(l, r - 1, rem - 1); /* line 12 slow_hit_count: 171700, fast_hit_count: 1 */
  vis[l][r][rem] = cnt; /* line 13 slow_hit_count: 171700, fast_hit_count: 1 */
  return ret = max(a, b); /* line 14 slow_hit_count: 171700, fast_hit_count: 1 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
long long funb(int id, int rem) { /* line 16 slow_hit_count: 70, fast_hit_count: 3 */
  if (rem == 0) return 0; /* line 17 slow_hit_count: 70, fast_hit_count: 3 */
  if (id == n) return 0; /* line 18 slow_hit_count: 69, fast_hit_count: 2 */
  long long &ret = dpb[id][rem]; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  if (ret != -1) return ret; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= sz[id]; ++i) { /* line 21 slow_hit_count: 102, fast_hit_count: 3 */
    if (i <= rem) ret = max(ret, a[id][i] + funb(id + 1, rem - i)); /* line 22 slow_hit_count: 101, fast_hit_count: 2 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 30 slow_hit_count: 2, fast_hit_count: 2 */
    cin >> sz[i]; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
    for (int j = 0; j < sz[i]; ++j) cin >> arr[i][j]; /* line 32 slow_hit_count: 101, fast_hit_count: 2 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  memset(dpb, -1, sizeof dpb); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 35 slow_hit_count: 2, fast_hit_count: 2 */
    idx = i; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
    for (int j = 0; j <= sz[i]; ++j) { /* line 37 slow_hit_count: 102, fast_hit_count: 3 */
      a[i][j] = funa(0, sz[i] - 1, j); /* line 38 slow_hit_count: 101, fast_hit_count: 2 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    ++cnt; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  cout << funb(0, m) << '\n'; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To identify the performance bottlenecks in the provided C code, we analyze the hit counts for each line and compare them between the slow and fast inputs. The goal is to extract conditions or invariants that characterize when and why the program runs slowly.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Function `funa`:** 
   - The hit counts for `funa` are significantly higher for the slow input (343,501 hits) compared to the fast input (4 hits). This indicates that `funa` is a critical area where performance degrades.
   - Lines 11 and 12, which perform recursive calls to `funa`, are hit 171,700 times each in the slow input. This recursive behavior suggests that the function may be exploring a large search space, leading to a slowdown.

2. **Function `funb`:**
   - Although `funb` is called less frequently than `funa`, it also shows higher hit counts in the slow input, especially line 22, which recursively calls `funb`.
   - This indicates that `funb`, combined with `funa`, contributes to the slowdown due to its nested recursion and dynamic programming approach.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we identify several conditions that can trigger slow performance:

1. **Recursive Exploration in `funa`:**
   - **Invariant:** "When the shelves have a large number of items, especially close to the constraint limit (e.g., 100 items per shelf), the recursive exploration in `funa` can become expensive if it explores many combinations of items to maximize the damage."

2. **Depth and Breadth of Recursive Calls:**
   - **Invariant:** "If the recursion depth in `funa` is high due to a large number of remaining items to choose (`rem`), and the branching is significant, the performance can degrade. This is especially true when the shelves contain many items, and the function needs to explore multiple paths deeply."

3. **Dynamic Programming State Space in `funb`:**
   - **Invariant:** "The dynamic programming approach in `funb` becomes inefficient when the number of shrieks (`m`) is high, close to the constraint limit (e.g., 10,000), and the function has to recompute many overlapping subproblems."

4. **High Hit Count on Recursive Conditions:**
   - **Invariant:** "When conditions for recursive calls in both `funa` and `funb` trigger frequently due to high values of `rem` or large shelf sizes, it indicates a potential slowdown due to excessive recursive function calls."

These invariants capture the essence of potential performance bottlenecks and help outline conditions under which the program may run slowly. They are not just about maximizing input size but also consider how the algorithm's recursive and dynamic aspects interact with input characteristics.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
During her tantrums the princess usually smashes some collectable porcelain. Every furious shriek is accompanied with one item smashed.

The collection of porcelain is arranged neatly on n shelves. Within each shelf the items are placed in one row, so that one can access only the outermost items — the leftmost or the rightmost item, not the ones in the middle of the shelf. Once an item is taken, the next item on that side of the shelf can be accessed (see example). Once an item is taken, it can't be returned to the shelves.

You are given the values of all items. Your task is to find the maximal damage the princess' tantrum of m shrieks can inflict on the collection of porcelain.

Input

The first line of input data contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 10000). The next n lines contain the values of the items on the shelves: the first number gives the number of items on this shelf (an integer between 1 and 100, inclusive), followed by the values of the items (integers between 1 and 100, inclusive), in the order in which they appear on the shelf (the first number corresponds to the leftmost item, the last one — to the rightmost one). The total number of items is guaranteed to be at least m.

Output

Output the maximal total value of a tantrum of m shrieks.

Examples

Input

2 3
3 3 7 2
3 4 1 5


Output

15


Input

1 3
4 4 3 1 2


Output

9

Note

In the first case there are two shelves, each with three items. To maximize the total value of the items chosen, one can take two items from the left side of the first shelf and one item from the right side of the second shelf.

In the second case there is only one shelf, so all three items are taken from it — two from the left side and one from the right side.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as Checker Code in C++

Below are the C++ code snippets that implement the performance-characterizing invariants derived earlier:

1. **Recursive Exploration in `funa`:**

```cpp
void check_recursive_depth_invariant(int shelfSize, int remainingItems) {
    if (shelfSize > 70 && remainingItems > 50) { // arbitrary thresholds
        cerr << "Warning: Performance bottleneck condition triggered in funa - large recursive exploration!" << endl;
        abort();
    }
}
```

2. **Depth and Breadth of Recursive Calls:**

```cpp
void check_recursion_breadth_invariant(int recursionDepth, int branchingFactor) {
    if (recursionDepth > 50 && branchingFactor > 20) { // arbitrary thresholds
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth and branching factor!" << endl;
        abort();
    }
}
```

3. **Dynamic Programming State Space in `funb`:**

```cpp
void check_dynamic_programming_invariant(int m) {
    if (m > 9000) { // near the constraint limit
        cerr << "Warning: Performance bottleneck condition triggered in funb - large dynamic programming state space!" << endl;
        abort();
    }
}
```

4. **High Hit Count on Recursive Conditions:**

```cpp
void check_high_hit_count_invariant(int shelfSize, int remainingItems) {
    if (shelfSize > 80 && remainingItems > 40) { // arbitrary thresholds
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive calls!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original C++ Program

Now, let's integrate these checkers into the original program, ensuring they are placed at effective points in the control flow.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for recursive exploration in funa
void check_recursive_depth_invariant(int shelfSize, int remainingItems) {
    if (shelfSize > 70 && remainingItems > 50) { // arbitrary thresholds
        cerr << "Warning: Performance bottleneck condition triggered in funa - large recursive exploration!" << endl;
        abort();
    }
}

// Checker function for depth and breadth of recursive calls
void check_recursion_breadth_invariant(int recursionDepth, int branchingFactor) {
    if (recursionDepth > 50 && branchingFactor > 20) { // arbitrary thresholds
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth and branching factor!" << endl;
        abort();
    }
}

// Checker function for dynamic programming state space in funb
void check_dynamic_programming_invariant(int m) {
    if (m > 9000) { // near the constraint limit
        cerr << "Warning: Performance bottleneck condition triggered in funb - large dynamic programming state space!" << endl;
        abort();
    }
}

// Checker function for high hit count on recursive conditions
void check_high_hit_count_invariant(int shelfSize, int remainingItems) {
    if (shelfSize > 80 && remainingItems > 40) { // arbitrary thresholds
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive calls!" << endl;
        abort();
    }
}

int n, m;
long long dpa[111][111][111], a[111][111], dpb[111][10011];
int arr[111][111], sz[111], idx;
int vis[111][111][111], cnt = 1;

long long funa(int l, int r, int rem) {
    check_recursive_depth_invariant(r - l + 1, rem); // Check condition for large recursive exploration
    if (!rem || l > r) return 0;
    long long &ret = dpa[l][r][rem];
    if (vis[l][r][rem] == cnt) return ret;
    long long a = arr[idx][l] + funa(l + 1, r, rem - 1);
    long long b = arr[idx][r] + funa(l, r - 1, rem - 1);
    vis[l][r][rem] = cnt;
    return ret = max(a, b);
}

long long funb(int id, int rem) {
    check_dynamic_programming_invariant(rem); // Check condition for large dynamic programming state space
    if (rem == 0) return 0;
    if (id == n) return 0;
    long long &ret = dpb[id][rem];
    if (ret != -1) return ret;
    for (int i = 0; i <= sz[id]; ++i) {
        check_high_hit_count_invariant(sz[id], rem); // Check condition for excessive recursive calls
        if (i <= rem) ret = max(ret, a[id][i] + funb(id + 1, rem - i));
    }
    return ret;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cin >> n >> m;
    check_dynamic_programming_invariant(m); // Initial check for large m
    for (int i = 0; i < n; ++i) {
        cin >> sz[i];
        for (int j = 0; j < sz[i]; ++j) cin >> arr[i][j];
    }
    memset(dpb, -1, sizeof dpb);
    for (int i = 0; i < n; ++i) {
        idx = i;
        for (int j = 0; j <= sz[i]; ++j) {
            a[i][j] = funa(0, sz[i] - 1, j);
        }
        ++cnt;
    }
    cout << funb(0, m) << '\n';
}
```

### Comments on Checker Placement

- **`check_recursive_depth_invariant`:** Placed in `funa` before recursion to catch large recursive explorations.
- **`check_recursion_breadth_invariant`:** Not explicitly used due to the nature of code logic, but could be integrated where recursion depth is calculated if required.
- **`check_dynamic_programming_invariant`:** Used in `funb` and `main` to catch large dynamic programming state space issues.
- **`check_high_hit_count_invariant`:** Placed in `funb` within the loop to detect excessive recursive calls, ensuring it does not degrade performance further by being overly frequent.

