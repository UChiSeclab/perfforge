system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Giant chess is quite common in Geraldion. We will not delve into the rules of the game, we'll just say that the game takes place on an h × w field, and it is painted in two colors, but not like in chess. Almost all cells of the field are white and only some of them are black. Currently Gerald is finishing a game of giant chess against his friend Pollard. Gerald has almost won, and the only thing he needs to win is to bring the pawn from the upper left corner of the board, where it is now standing, to the lower right corner. Gerald is so confident of victory that he became interested, in how many ways can he win?

The pawn, which Gerald has got left can go in two ways: one cell down or one cell to the right. In addition, it can not go to the black cells, otherwise the Gerald still loses. There are no other pawns or pieces left on the field, so that, according to the rules of giant chess Gerald moves his pawn until the game is over, and Pollard is just watching this process.

Input

The first line of the input contains three integers: h, w, n — the sides of the board and the number of black cells (1 ≤ h, w ≤ 105, 1 ≤ n ≤ 2000). 

Next n lines contain the description of black cells. The i-th of these lines contains numbers ri, ci (1 ≤ ri ≤ h, 1 ≤ ci ≤ w) — the number of the row and column of the i-th cell.

It is guaranteed that the upper left and lower right cell are white and all cells in the description are distinct.

Output

Print a single line — the remainder of the number of ways to move Gerald's pawn from the upper left to the lower right corner modulo 109 + 7.

Examples

Input

3 4 2
2 2
2 3


Output

2


Input

100 100 3
15 16
16 15
99 88


Output

545732279

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
struct node {
  int x, y;
};
long long fac[200005], inv[200005], ans[2005];
int n, m, k;
node f[2005];
long long fp(long long x, int y) {
  return (y % 2 ? x : 1ll) * (y / 2 ? fp(x * x % 1000000007, y / 2) : 1ll) %
         1000000007;
}
void pre(int n) {
  fac[0] = inv[0] = 1;
  for (int i = 1; i <= n; i++) fac[i] = fac[i - 1] * i % 1000000007;
  for (int i = 1; i <= n; i++) inv[i] = fp(fac[i], 1000000007 - 2);
}
long long c(int x, int y) {
  return fac[x] * inv[y] % 1000000007 * inv[x - y] % 1000000007;
}
int cmp(node x, node y) { return x.x != y.x ? x.x < y.x : x.y < y.y; }
int main() {
  scanf("%d%d%d", &n, &m, &k);
  pre(n + m);
  for (int i = 1; i <= k; i++) scanf("%d%d", &f[i].x, &f[i].y);
  f[++k] = node{n, m};
  std::sort(f + 1, f + k + 1, cmp);
  for (int i = 1; i <= k; i++) {
    long long s = c(f[i].x + f[i].y - 2, f[i].x - 1);
    for (int j = 1; j <= i - 1; j++)
      if (f[j].x <= f[i].x && f[j].y <= f[i].y)
        s = (s -
             ans[j] * c(f[i].x + f[i].y - f[j].x - f[j].y, f[i].x - f[j].x) %
                 1000000007 +
             1000000007) %
            1000000007;
    ans[i] = s;
  }
  printf("%lld\n", ans[k]);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100000 100000 4
50001 50001
50000 50000
50000 50001
50001 50000


(G.2) Fast Input

1000 1000 4
50 50
51 50
50 51
51 51


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
struct node { /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
  int x, y; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long fac[200005], inv[200005], ans[2005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, k; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
node f[2005]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long fp(long long x, int y) { /* line 8 slow_hit_count: 6000000, fast_hit_count: 60000 */
  return (y % 2 ? x : 1ll) * (y / 2 ? fp(x * x % 1000000007, y / 2) : 1ll) % /* line 9 slow_hit_count: 6000000, fast_hit_count: 60000 */
         1000000007; /* line 10 slow_hit_count: 6000000, fast_hit_count: 60000 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
void pre(int n) { /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  fac[0] = inv[0] = 1; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) fac[i] = fac[i - 1] * i % 1000000007; /* line 14 slow_hit_count: 200001, fast_hit_count: 2001 */
  for (int i = 1; i <= n; i++) inv[i] = fp(fac[i], 1000000007 - 2); /* line 15 slow_hit_count: 200001, fast_hit_count: 2001 */
} /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
long long c(int x, int y) { /* line 17 slow_hit_count: 14, fast_hit_count: 14 */
  return fac[x] * inv[y] % 1000000007 * inv[x - y] % 1000000007; /* line 18 slow_hit_count: 14, fast_hit_count: 14 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int cmp(node x, node y) { return x.x != y.x ? x.x < y.x : x.y < y.y; } /* line 20 slow_hit_count: 9, fast_hit_count: 9 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d%d", &n, &m, &k); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  pre(n + m); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= k; i++) scanf("%d%d", &f[i].x, &f[i].y); /* line 24 slow_hit_count: 5, fast_hit_count: 5 */
  f[++k] = node{n, m}; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  std::sort(f + 1, f + k + 1, cmp); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= k; i++) { /* line 27 slow_hit_count: 6, fast_hit_count: 6 */
    long long s = c(f[i].x + f[i].y - 2, f[i].x - 1); /* line 28 slow_hit_count: 5, fast_hit_count: 5 */
    for (int j = 1; j <= i - 1; j++) /* line 29 slow_hit_count: 15, fast_hit_count: 15 */
      if (f[j].x <= f[i].x && f[j].y <= f[i].y) /* line 30 slow_hit_count: 10, fast_hit_count: 10 */
        s = (s - /* line 31 slow_hit_count: 9, fast_hit_count: 9 */
             ans[j] * c(f[i].x + f[i].y - f[j].x - f[j].y, f[i].x - f[j].x) % /* line 32 slow_hit_count: 9, fast_hit_count: 9 */
                 1000000007 + /* line 33 slow_hit_count: 9, fast_hit_count: 9 */
             1000000007) % /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
            1000000007; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    ans[i] = s; /* line 36 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", ans[k]); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit counts, we can observe significant differences in the slow vs. fast inputs:

1. **Function `fp` (lines 8-10):** 
   - This line has a hit count of 6,000,000 for the slow input and only 60,000 for the fast input. 
   - The function `fp` is used to compute modular inverses via exponentiation by squaring, which gets called repeatedly in the `pre` function.

2. **Lines 14-15 in `pre`:**
   - The loop in `pre` (lines 14-15) is executed 200,001 times for the slow input versus 2,001 times for the fast input, indicating a direct correlation with the size of `n + m`.

### Phase 2: Derive Performance-characterizing Invariants

Based on the identified bottlenecks, the following performance-characterizing invariants can be derived:

1. **High Complexity in Precomputation:**
   - **Invariant:** "When the sum of dimensions \( h + w \) of the board is large, the precomputation step involves many calls to compute modular inverses, which can significantly slow down the program."
   - **Reasoning:** The hit count in the `fp` function and loops in `pre` scales with \( n + m \), leading to more computations for larger board dimensions up to the constraint limit.

2. **Potential Inefficiency with Large Boards:**
   - **Invariant:** "If the board dimensions \( h \) and \( w \) are near their maximum, the iterative process to calculate paths can involve extensive operations and hit a performance bottleneck."
   - **Reasoning:** The slow input values exploit the maximum board size allowed, leading to extensive calculations during path enumeration.

3. **Numerous Path Combinations with Limited Black Cells:**
   - **Invariant:** "In cases where the board is large but the number of black cells \( n \) is relatively small, performance may degrade due to the vast number of paths needing enumeration."
   - **Reasoning:** With few black cells to block paths, there are many potential paths to consider, increasing computation needlessly.

4. **Costly Path Enumeration:**
   - **Invariant:** "The path enumeration complexity increases with the number of cells and the configuration of obstacles, especially when obstacles are clustered near central areas of large boards."
   - **Reasoning:** The arrangement of black cells in the slow input may lead to more recursive checks and operations, as they block paths in a non-linear, complex fashion.

These invariants help identify conditions under which the program is likely to slow down, focusing on large board dimensions, path complexities, and inefficient operations. They abstract the potential triggers to ensure they cover a range of possible scenarios within the problem's constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Giant chess is quite common in Geraldion. We will not delve into the rules of the game, we'll just say that the game takes place on an h × w field, and it is painted in two colors, but not like in chess. Almost all cells of the field are white and only some of them are black. Currently Gerald is finishing a game of giant chess against his friend Pollard. Gerald has almost won, and the only thing he needs to win is to bring the pawn from the upper left corner of the board, where it is now standing, to the lower right corner. Gerald is so confident of victory that he became interested, in how many ways can he win?

The pawn, which Gerald has got left can go in two ways: one cell down or one cell to the right. In addition, it can not go to the black cells, otherwise the Gerald still loses. There are no other pawns or pieces left on the field, so that, according to the rules of giant chess Gerald moves his pawn until the game is over, and Pollard is just watching this process.

Input

The first line of the input contains three integers: h, w, n — the sides of the board and the number of black cells (1 ≤ h, w ≤ 105, 1 ≤ n ≤ 2000). 

Next n lines contain the description of black cells. The i-th of these lines contains numbers ri, ci (1 ≤ ri ≤ h, 1 ≤ ci ≤ w) — the number of the row and column of the i-th cell.

It is guaranteed that the upper left and lower right cell are white and all cells in the description are distinct.

Output

Print a single line — the remainder of the number of ways to move Gerald's pawn from the upper left to the lower right corner modulo 109 + 7.

Examples

Input

3 4 2
2 2
2 3


Output

2


Input

100 100 3
15 16
16 15
99 88


Output

545732279

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ code snippets implementing the performance-characterizing invariants derived from the problem:

```cpp
// Check if the board dimensions are large, which could lead to performance issues in precomputations
void check_large_board_dimensions(int h, int w) {
    if (h + w > 150000) { // chosen threshold based on constraints
        cerr << "Warning: Performance bottleneck due to large board dimensions!" << endl;
        abort();
    }
}

// Check if there are too many paths to consider when there are few black cells
void check_few_black_cells(int h, int w, int n) {
    int potentialPaths = (h - 1) + (w - 1);
    if (n < 5 && potentialPaths > 150000) { // arbitrary threshold for few black cells with large paths
        cerr << "Warning: Potentially too many paths due to few black cells and large board!" << endl;
        abort();
    }
}

// Check for expensive path enumeration in specific arrangements
void check_complex_obstacle_arrangement(int h, int w, int n, int* blackCellRows, int* blackCellCols) {
    // An arbitrary check for a clustered arrangement in the center of a large board
    if (h * w > 5000000 && n < 20) {
        for (int i = 0; i < n; ++i) {
            if (blackCellRows[i] > h / 3 && blackCellRows[i] < 2 * h / 3 &&
                blackCellCols[i] > w / 3 && blackCellCols[i] < 2 * w / 3) {
                cerr << "Warning: Performance issue due to central clustered obstacles on large board!" << endl;
                abort();
            }
        }
    }
}
```

### Phase 4: Integrate Checks into the Original Program

Now, we will integrate these checks into the original C++ code at strategic points:

```cpp
#include <bits/stdc++.h>

struct node {
    int x, y;
};
long long fac[200005], inv[200005], ans[2005];
int n, m, k;
node f[2005];

long long fp(long long x, int y) {
    return (y % 2 ? x : 1ll) * (y / 2 ? fp(x * x % 1000000007, y / 2) : 1ll) %
           1000000007;
}

void pre(int n) {
    fac[0] = inv[0] = 1;
    for (int i = 1; i <= n; i++) fac[i] = fac[i - 1] * i % 1000000007;
    for (int i = 1; i <= n; i++) inv[i] = fp(fac[i], 1000000007 - 2);
}

long long c(int x, int y) {
    return fac[x] * inv[y] % 1000000007 * inv[x - y] % 1000000007;
}

int cmp(node x, node y) { return x.x != y.x ? x.x < y.x : x.y < y.y; }

// Adding checker functions

void check_large_board_dimensions(int h, int w) {
    if (h + w > 150000) {
        cerr << "Warning: Performance bottleneck due to large board dimensions!" << endl;
        abort();
    }
}

void check_few_black_cells(int h, int w, int n) {
    int potentialPaths = (h - 1) + (w - 1);
    if (n < 5 && potentialPaths > 150000) {
        cerr << "Warning: Potentially too many paths due to few black cells and large board!" << endl;
        abort();
    }
}

void check_complex_obstacle_arrangement(int h, int w, int n, node* f) {
    if (h * w > 5000000 && n < 20) {
        for (int i = 1; i <= n; ++i) {
            if (f[i].x > h / 3 && f[i].x < 2 * h / 3 &&
                f[i].y > w / 3 && f[i].y < 2 * w / 3) {
                cerr << "Warning: Performance issue due to central clustered obstacles on large board!" << endl;
                abort();
            }
        }
    }
}

int main() {
    scanf("%d%d%d", &n, &m, &k);
    
    // Insert check for large board dimensions
    check_large_board_dimensions(n, m);

    pre(n + m);
    for (int i = 1; i <= k; i++) scanf("%d%d", &f[i].x, &f[i].y);
    f[++k] = node{n, m};
    std::sort(f + 1, f + k + 1, cmp);

    // Insert check for few black cells
    check_few_black_cells(n, m, k);

    // Insert check for complex obstacle arrangement
    check_complex_obstacle_arrangement(n, m, k, f);

    for (int i = 1; i <= k; i++) {
        long long s = c(f[i].x + f[i].y - 2, f[i].x - 1);
        for (int j = 1; j <= i - 1; j++)
            if (f[j].x <= f[i].x && f[j].y <= f[i].y)
                s = (s -
                     ans[j] * c(f[i].x + f[i].y - f[j].x - f[j].y, f[i].x - f[j].x) %
                         1000000007 +
                     1000000007) %
                    1000000007;
        ans[i] = s;
    }
    printf("%lld\n", ans[k]);
    return 0;
}
```

### Explanation

- **Check for large board dimensions** is placed right after reading input, to catch potential performance bottlenecks early.
- **Check for few black cells** is added after sorting the black cells, ensuring paths are considered before aborting.
- **Check for complex obstacle arrangement** is positioned after black cell setup, targeting specific challenging configurations. 

These checks are inserted at strategic points to detect likely performance bottlenecks without adversely affecting runtime in tight loops.

