system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Giant chess is quite common in Geraldion. We will not delve into the rules of the game, we'll just say that the game takes place on an h × w field, and it is painted in two colors, but not like in chess. Almost all cells of the field are white and only some of them are black. Currently Gerald is finishing a game of giant chess against his friend Pollard. Gerald has almost won, and the only thing he needs to win is to bring the pawn from the upper left corner of the board, where it is now standing, to the lower right corner. Gerald is so confident of victory that he became interested, in how many ways can he win?

The pawn, which Gerald has got left can go in two ways: one cell down or one cell to the right. In addition, it can not go to the black cells, otherwise the Gerald still loses. There are no other pawns or pieces left on the field, so that, according to the rules of giant chess Gerald moves his pawn until the game is over, and Pollard is just watching this process.

Input

The first line of the input contains three integers: h, w, n — the sides of the board and the number of black cells (1 ≤ h, w ≤ 105, 1 ≤ n ≤ 2000). 

Next n lines contain the description of black cells. The i-th of these lines contains numbers ri, ci (1 ≤ ri ≤ h, 1 ≤ ci ≤ w) — the number of the row and column of the i-th cell.

It is guaranteed that the upper left and lower right cell are white and all cells in the description are distinct.

Output

Print a single line — the remainder of the number of ways to move Gerald's pawn from the upper left to the lower right corner modulo 109 + 7.

Examples

Input

3 4 2
2 2
2 3


Output

2


Input

100 100 3
15 16
16 15
99 88


Output

545732279

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int HW = 200007;
const int N = 2007;
const int MOD = 1000000007;
int n;
int r[N], c[N];
int f[HW], invf[HW];
int dp[N];
int bpow(int a, int b) {
  if (b == 0) return 1;
  int result = bpow(a, b / 2);
  return (long long)result * result % MOD * (b % 2 == 1 ? a : 1) % MOD;
}
int comb(int n, int k) {
  return (long long)f[n] * invf[n - k] % MOD * invf[k] % MOD;
}
int count_ways(int i) {
  if (dp[i] != -1) return dp[i];
  dp[i] = comb(r[i] + c[i] - 2, c[i] - 1);
  for (int j = 0; j <= n; ++j)
    if (r[j] <= r[i] && c[j] <= c[i] && i != j) {
      dp[i] -= (long long)count_ways(j) *
               comb(r[i] - r[j] + c[i] - c[j], c[i] - c[j]) % MOD;
      if (dp[i] < 0) dp[i] += MOD;
    }
  return dp[i];
}
int main() {
  int h, w;
  cin >> h >> w >> n;
  for (int i = 0; i < n; ++i) cin >> r[i] >> c[i];
  r[n] = h, c[n] = w;
  f[0] = 1, invf[0] = 1;
  for (int i = 1; i <= h + w; ++i) {
    f[i] = (long long)f[i - 1] * i % MOD;
    invf[i] = bpow(f[i], MOD - 2);
  }
  for (int i = 0; i <= n; ++i) dp[i] = -1;
  cout << count_ways(n) << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100000 100000 4
50001 50001
50000 50000
50000 50001
50001 50000


(G.2) Fast Input

1000 1000 4
50 50
51 50
50 51
51 51


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int HW = 200007; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 2007; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 1000000007; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int r[N], c[N]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int f[HW], invf[HW]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int dp[N]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int bpow(int a, int b) { /* line 10 slow_hit_count: 6200000, fast_hit_count: 62000 */
  if (b == 0) return 1; /* line 11 slow_hit_count: 6200000, fast_hit_count: 62000 */
  int result = bpow(a, b / 2); /* line 12 slow_hit_count: 6000000, fast_hit_count: 60000 */
  return (long long)result * result % MOD * (b % 2 == 1 ? a : 1) % MOD; /* line 13 slow_hit_count: 6000000, fast_hit_count: 60000 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int comb(int n, int k) { /* line 15 slow_hit_count: 14, fast_hit_count: 14 */
  return (long long)f[n] * invf[n - k] % MOD * invf[k] % MOD; /* line 16 slow_hit_count: 14, fast_hit_count: 14 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
int count_ways(int i) { /* line 18 slow_hit_count: 10, fast_hit_count: 10 */
  if (dp[i] != -1) return dp[i]; /* line 19 slow_hit_count: 10, fast_hit_count: 10 */
  dp[i] = comb(r[i] + c[i] - 2, c[i] - 1); /* line 20 slow_hit_count: 5, fast_hit_count: 5 */
  for (int j = 0; j <= n; ++j) /* line 21 slow_hit_count: 30, fast_hit_count: 30 */
    if (r[j] <= r[i] && c[j] <= c[i] && i != j) { /* line 22 slow_hit_count: 25, fast_hit_count: 25 */
      dp[i] -= (long long)count_ways(j) * /* line 23 slow_hit_count: 9, fast_hit_count: 9 */
               comb(r[i] - r[j] + c[i] - c[j], c[i] - c[j]) % MOD; /* line 24 slow_hit_count: 9, fast_hit_count: 9 */
      if (dp[i] < 0) dp[i] += MOD; /* line 25 slow_hit_count: 9, fast_hit_count: 9 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  return dp[i]; /* line 27 slow_hit_count: 5, fast_hit_count: 5 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  int h, w; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> h >> w >> n; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) cin >> r[i] >> c[i]; /* line 32 slow_hit_count: 5, fast_hit_count: 5 */
  r[n] = h, c[n] = w; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  f[0] = 1, invf[0] = 1; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= h + w; ++i) { /* line 35 slow_hit_count: 200001, fast_hit_count: 2001 */
    f[i] = (long long)f[i - 1] * i % MOD; /* line 36 slow_hit_count: 200000, fast_hit_count: 2000 */
    invf[i] = bpow(f[i], MOD - 2); /* line 37 slow_hit_count: 200000, fast_hit_count: 2000 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= n; ++i) dp[i] = -1; /* line 39 slow_hit_count: 6, fast_hit_count: 6 */
  cout << count_ways(n) << '\n'; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 42 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the provided C code, we can follow these steps:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The `bpow` function is called significantly more often in the slow input (6,200,000 times) compared to the fast input (62,000 times).
   - The loop in `main()` (lines 35-38) iterates `h + w` times, which is very large for the slow input due to the maximum constraint (`h, w = 100,000`).
   
2. **Pinpoint Lines/Functions with Significant Hits:**
   - **`bpow` Function:** This function is a recursive implementation of binary exponentiation, which is computationally expensive and called during the calculation of inverse factorials, especially on line 37: `invf[i] = bpow(f[i], MOD - 2);`.
   - **Loop in `main()`:** The loop iterating `h + w` times is a key contributor to slow performance due to its linear complexity relative to `h` and `w`.

3. **Inference on Data Structures/Loops:**
   - The factorial and inverse factorial calculations are heavily repeated due to large board dimensions (`h` and `w`).
   - The usage of the `dp` array and recursive `count_ways` calls could also compound the computational cost, but line hits show these are not as problematic as the `bpow` calls.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants:

1. **Large Dimension Invariant:**
   - **Natural Language Description:** "When the board dimensions (`h` and `w`) are large, especially near the upper constraint limits, the computation of factorials and inverse factorials becomes a performance bottleneck, leading to slow execution."
   - **Reasoning:** The loop in the `main` function iterates `h + w` times, and each iteration involves a call to `bpow`, which is recursive. As `h` and `w` approach 100,000, this computation becomes notably expensive.

2. **High Recursion in `bpow`:**
   - **Natural Language Description:** "If the `bpow` function is called excessively due to high values of `h` and `w`, especially when computing inverse factorials, it can significantly slow down the program."
   - **Reasoning:** The `bpow` function is hit millions of times in the slow input, indicating that recursive calls and calculations are far more extensive than in the fast input.

3. **Sparse Pathways Constraint:**
   - **Natural Language Description:** "If the number of blocked or non-traversable cells (`n`) is low relative to the total board size, and the board dimensions are large, the computation time increases as the algorithm processes a vast number of potential paths."
   - **Reasoning:** With fewer blocked cells, the algorithm potentially evaluates a larger number of pathways, increasing the need for factorial calculations for these paths.

By monitoring these conditions, a fuzzer or similar tool could identify potential performance issues when similar input conditions are met. These invariants provide insights into structural weaknesses in the algorithm's approach to large input sizes and recursive function utilization.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Giant chess is quite common in Geraldion. We will not delve into the rules of the game, we'll just say that the game takes place on an h × w field, and it is painted in two colors, but not like in chess. Almost all cells of the field are white and only some of them are black. Currently Gerald is finishing a game of giant chess against his friend Pollard. Gerald has almost won, and the only thing he needs to win is to bring the pawn from the upper left corner of the board, where it is now standing, to the lower right corner. Gerald is so confident of victory that he became interested, in how many ways can he win?

The pawn, which Gerald has got left can go in two ways: one cell down or one cell to the right. In addition, it can not go to the black cells, otherwise the Gerald still loses. There are no other pawns or pieces left on the field, so that, according to the rules of giant chess Gerald moves his pawn until the game is over, and Pollard is just watching this process.

Input

The first line of the input contains three integers: h, w, n — the sides of the board and the number of black cells (1 ≤ h, w ≤ 105, 1 ≤ n ≤ 2000). 

Next n lines contain the description of black cells. The i-th of these lines contains numbers ri, ci (1 ≤ ri ≤ h, 1 ≤ ci ≤ w) — the number of the row and column of the i-th cell.

It is guaranteed that the upper left and lower right cell are white and all cells in the description are distinct.

Output

Print a single line — the remainder of the number of ways to move Gerald's pawn from the upper left to the lower right corner modulo 109 + 7.

Examples

Input

3 4 2
2 2
2 3


Output

2


Input

100 100 3
15 16
16 15
99 88


Output

545732279

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Here, I will provide C++ code snippets for each of the performance-characterizing invariants identified.

1. **Large Dimension Invariant:**
   ```cpp
   void check_large_dimension_invariant(int h, int w) {
       if (h > 50000 || w > 50000) {
           cerr << "Warning: Performance bottleneck condition triggered due to large dimensions!" << endl;
           abort();
       }
   }
   ```

2. **High Recursion in `bpow`:**
   ```cpp
   void check_high_recursion_invariant(int bpow_calls, int threshold = 60000) {
       if (bpow_calls > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered due to high recursion in bpow!" << endl;
           abort();
       }
   }
   ```

3. **Sparse Pathways Constraint:**
   ```cpp
   void check_sparse_pathways_invariant(int h, int w, int n) {
       if (n < 10 && (h > 50000 || w > 50000)) {
           cerr << "Warning: Performance bottleneck condition triggered due to sparse black cells with large dimensions!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Invariants into the Original C++ Program

Now I'll integrate these checkers into the given C++ program. We'll place the checks appropriately, considering data flow and control flow, to ensure they run efficiently.

```cpp
#include <bits/stdc++.h>
using namespace std;

const int HW = 200007;
const int N = 2007;
const int MOD = 1000000007;
int n;
int r[N], c[N];
int f[HW], invf[HW];
int dp[N];
int bpow_call_count = 0; // Counter to track bpow calls

int bpow(int a, int b) {
    ++bpow_call_count; // Increment bpow call count
    if (b == 0) return 1;
    int result = bpow(a, b / 2);
    return (long long)result * result % MOD * (b % 2 == 1 ? a : 1) % MOD;
}

int comb(int n, int k) {
    return (long long)f[n] * invf[n - k] % MOD * invf[k] % MOD;
}

int count_ways(int i) {
    if (dp[i] != -1) return dp[i];
    dp[i] = comb(r[i] + c[i] - 2, c[i] - 1);
    for (int j = 0; j <= n; ++j) {
        if (r[j] <= r[i] && c[j] <= c[i] && i != j) {
            dp[i] -= (long long)count_ways(j) *
                     comb(r[i] - r[j] + c[i] - c[j], c[i] - c[j]) % MOD;
            if (dp[i] < 0) dp[i] += MOD;
        }
    }
    return dp[i];
}

// Checkers based on performance-characterizing invariants

void check_large_dimension_invariant(int h, int w) {
    if (h > 50000 || w > 50000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large dimensions!" << endl;
        abort();
    }
}

void check_high_recursion_invariant(int bpow_calls, int threshold = 60000) {
    if (bpow_calls > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered due to high recursion in bpow!" << endl;
        abort();
    }
}

void check_sparse_pathways_invariant(int h, int w, int n) {
    if (n < 10 && (h > 50000 || w > 50000)) {
        cerr << "Warning: Performance bottleneck condition triggered due to sparse black cells with large dimensions!" << endl;
        abort();
    }
}

int main() {
    int h, w;
    cin >> h >> w >> n;

    // Check for large dimensions
    check_large_dimension_invariant(h, w);

    for (int i = 0; i < n; ++i) cin >> r[i] >> c[i];
    r[n] = h, c[n] = w;
    f[0] = 1, invf[0] = 1;
    for (int i = 1; i <= h + w; ++i) {
        f[i] = (long long)f[i - 1] * i % MOD;
        invf[i] = bpow(f[i], MOD - 2);
    }

    // Check for excessive recursion in bpow
    check_high_recursion_invariant(bpow_call_count);

    // Check for sparse pathways
    check_sparse_pathways_invariant(h, w, n);

    for (int i = 0; i <= n; ++i) dp[i] = -1;
    cout << count_ways(n) << '\n';
    return 0;
}
```

### Explanation of Integration:

- **`check_large_dimension_invariant`:** Added after reading `h` and `w` to immediately abort if dimensions are too large.
- **`check_high_recursion_invariant`:** Placed after the loop that initializes factorials, where the bpow call is most frequent. This checks if recursion in `bpow` exceeded a practical threshold.
- **`check_sparse_pathways_invariant`:** Inserted after input reading, ensuring that large dimensions with very few black cells are caught.

These checks are designed to proactively catch scenarios that lead to performance bottlenecks, ensuring a fuzzer or tester can quickly identify such conditions.

