system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Giant chess is quite common in Geraldion. We will not delve into the rules of the game, we'll just say that the game takes place on an h × w field, and it is painted in two colors, but not like in chess. Almost all cells of the field are white and only some of them are black. Currently Gerald is finishing a game of giant chess against his friend Pollard. Gerald has almost won, and the only thing he needs to win is to bring the pawn from the upper left corner of the board, where it is now standing, to the lower right corner. Gerald is so confident of victory that he became interested, in how many ways can he win?

The pawn, which Gerald has got left can go in two ways: one cell down or one cell to the right. In addition, it can not go to the black cells, otherwise the Gerald still loses. There are no other pawns or pieces left on the field, so that, according to the rules of giant chess Gerald moves his pawn until the game is over, and Pollard is just watching this process.

Input

The first line of the input contains three integers: h, w, n — the sides of the board and the number of black cells (1 ≤ h, w ≤ 105, 1 ≤ n ≤ 2000). 

Next n lines contain the description of black cells. The i-th of these lines contains numbers ri, ci (1 ≤ ri ≤ h, 1 ≤ ci ≤ w) — the number of the row and column of the i-th cell.

It is guaranteed that the upper left and lower right cell are white and all cells in the description are distinct.

Output

Print a single line — the remainder of the number of ways to move Gerald's pawn from the upper left to the lower right corner modulo 109 + 7.

Examples

Input

3 4 2
2 2
2 3


Output

2


Input

100 100 3
15 16
16 15
99 88


Output

545732279

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long h, w, n;
pair<long long, long long> a[2005];
long long fact[200005];
long long ifact[200005];
long long dp[2005];
long long exp(long long a, long long b) {
  if (b == 0) return 1;
  if (b == 1) return a;
  if (b % 2 == 0) {
    long long r = exp(a, b / 2);
    return (r * r) % 1000000007;
  }
  long long r = exp(a, b - 1);
  return (r * a) % 1000000007;
}
long long C(long long n, long long k) {
  return (((fact[n] * ifact[k]) % 1000000007) * ifact[n - k]) % 1000000007;
}
int main() {
  scanf("%lld %lld %lld", &h, &w, &n);
  for (long long i = 0; i < n; i++) {
    scanf("%lld %lld", &a[i].first, &a[i].second);
    a[i].first--;
    a[i].second--;
  }
  sort(a, a + n);
  a[n++] = make_pair(h - 1, w - 1);
  fact[0] = 1;
  ifact[0] = 1;
  for (long long i = 1; i <= max(w, h) * 2; i++) {
    fact[i] = (fact[i - 1] * i) % 1000000007;
    ifact[i] = exp(fact[i], 1000000007 - 2);
  }
  for (long long i = 0; i < n; i++) {
    long long num = C(a[i].first + a[i].second, a[i].first);
    for (long long j = 0; j < i; j++) {
      if (a[j].first <= a[i].first && a[j].second <= a[i].second) {
        int sub =
            (dp[j] * C((a[i].first - a[j].first) + (a[i].second - a[j].second),
                       a[i].first - a[j].first)) %
            1000000007;
        num = (num - sub + 1000000007) % 1000000007;
      }
    }
    dp[i] = num;
  }
  cout << dp[n - 1] << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100000 100000 4
50001 50001
50000 50000
50000 50001
50001 50000


(G.2) Fast Input

1000 1000 4
50 50
51 50
50 51
51 51


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long h, w, n; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
pair<long long, long long> a[2005]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long fact[200005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long ifact[200005]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[2005]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long exp(long long a, long long b) { /* line 8 slow_hit_count: 8800000, fast_hit_count: 88000 */
  if (b == 0) return 1; /* line 9 slow_hit_count: 8800000, fast_hit_count: 88000 */
  if (b == 1) return a; /* line 10 slow_hit_count: 8800000, fast_hit_count: 88000 */
  if (b % 2 == 0) { /* line 11 slow_hit_count: 8600000, fast_hit_count: 86000 */
    long long r = exp(a, b / 2); /* line 12 slow_hit_count: 5800000, fast_hit_count: 58000 */
    return (r * r) % 1000000007; /* line 13 slow_hit_count: 5800000, fast_hit_count: 58000 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  long long r = exp(a, b - 1); /* line 15 slow_hit_count: 2800000, fast_hit_count: 28000 */
  return (r * a) % 1000000007; /* line 16 slow_hit_count: 2800000, fast_hit_count: 28000 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
long long C(long long n, long long k) { /* line 18 slow_hit_count: 14, fast_hit_count: 14 */
  return (((fact[n] * ifact[k]) % 1000000007) * ifact[n - k]) % 1000000007; /* line 19 slow_hit_count: 14, fast_hit_count: 14 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%lld %lld %lld", &h, &w, &n); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) { /* line 23 slow_hit_count: 5, fast_hit_count: 5 */
    scanf("%lld %lld", &a[i].first, &a[i].second); /* line 24 slow_hit_count: 4, fast_hit_count: 4 */
    a[i].first--; /* line 25 slow_hit_count: 4, fast_hit_count: 4 */
    a[i].second--; /* line 26 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  sort(a, a + n); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  a[n++] = make_pair(h - 1, w - 1); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  fact[0] = 1; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  ifact[0] = 1; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= max(w, h) * 2; i++) { /* line 32 slow_hit_count: 200001, fast_hit_count: 2001 */
    fact[i] = (fact[i - 1] * i) % 1000000007; /* line 33 slow_hit_count: 200000, fast_hit_count: 2000 */
    ifact[i] = exp(fact[i], 1000000007 - 2); /* line 34 slow_hit_count: 200000, fast_hit_count: 2000 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < n; i++) { /* line 36 slow_hit_count: 6, fast_hit_count: 6 */
    long long num = C(a[i].first + a[i].second, a[i].first); /* line 37 slow_hit_count: 5, fast_hit_count: 5 */
    for (long long j = 0; j < i; j++) { /* line 38 slow_hit_count: 15, fast_hit_count: 15 */
      if (a[j].first <= a[i].first && a[j].second <= a[i].second) { /* line 39 slow_hit_count: 10, fast_hit_count: 10 */
        int sub = /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
            (dp[j] * C((a[i].first - a[j].first) + (a[i].second - a[j].second), /* line 41 slow_hit_count: 18, fast_hit_count: 18 */
                       a[i].first - a[j].first)) % /* line 42 slow_hit_count: 9, fast_hit_count: 9 */
            1000000007; /* line 43 slow_hit_count: 9, fast_hit_count: 9 */
        num = (num - sub + 1000000007) % 1000000007; /* line 44 slow_hit_count: 9, fast_hit_count: 9 */
      } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    dp[i] = num; /* line 47 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  cout << dp[n - 1] << endl; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 50 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the given C program and generate performance-characterizing invariants, we'll follow the outlined phases and steps:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**

   Upon reviewing the hit count data, the following observations are made:

   - The `exp` function (lines 8-16) is called significantly more often in the slow input than in the fast input, with lines 9, 10, 11, 12, 13, 15, and 16 having hit counts in the millions for the slow input compared to the tens of thousands for the fast input.
   - The loop at line 32 runs 200,001 times for the slow input compared to only 2,001 times for the fast input. This loop calculates factorial and inverse factorial arrays, invoking the `exp` function.
   - The nested loops starting at lines 36 and 38 iterate over combinations of positions, but these are not hit significantly more compared to the `exp` function.

2. **Interaction with Data Structures and Input Constraints:**

   - The `exp` function is used to compute modular inverses, a key part of the factorial precomputation. This precomputation is disproportionately costly for larger values of `h` and `w` due to the vast number of iterations.
   - The main computation, dependent on the factorial values, suggests that large board dimensions cause extensive computations in setting up these values.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations, here are the performance-characterizing invariants:

1. **Large Factorial Precomputation:**

   - **Invariant:** "If the dimensions of the board `h` and `w` are large, the factorial precomputation may dominate execution time due to the repeated computation of modular inverses."

   - **Explanation:** The `exp` function, used heavily for computing inverse factorials, is a recursive function that becomes a bottleneck when the dimensions of the board are near their maximum constraints (e.g., `h = 100,000` or `w = 100,000`).

2. **High Computational Load with Large Dimensions:**

   - **Invariant:** "When `h` and `w` are both large, the nested loops processing positions are computationally intensive, particularly when calculating combinations for paths around black cells."

   - **Explanation:** The nested loops contribute to a high computational load, especially as the number of valid paths must be recalculated when black cells obstruct direct paths, with the factorial values recalculated each time.

3. **Sparse Black Cells with Large Dimensions:**

   - **Invariant:** "Sparse distribution of black cells in a large board leads to excessive recalculations of paths, particularly when their positions minimally intersect optimal paths."

   - **Explanation:** When `n` is small but the board is large, there are fewer black cells to block paths, leading to a high number of path recalculations without significant pruning, causing inefficiency.

### Conclusion

The main sources of inefficiency arise from large board dimensions causing extensive precomputation of factorial values and recalculations for paths. These conditions lead to a disproportionate increase in execution time due to recursive operations and nested loops, especially when the board dimensions approach their upper constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Giant chess is quite common in Geraldion. We will not delve into the rules of the game, we'll just say that the game takes place on an h × w field, and it is painted in two colors, but not like in chess. Almost all cells of the field are white and only some of them are black. Currently Gerald is finishing a game of giant chess against his friend Pollard. Gerald has almost won, and the only thing he needs to win is to bring the pawn from the upper left corner of the board, where it is now standing, to the lower right corner. Gerald is so confident of victory that he became interested, in how many ways can he win?

The pawn, which Gerald has got left can go in two ways: one cell down or one cell to the right. In addition, it can not go to the black cells, otherwise the Gerald still loses. There are no other pawns or pieces left on the field, so that, according to the rules of giant chess Gerald moves his pawn until the game is over, and Pollard is just watching this process.

Input

The first line of the input contains three integers: h, w, n — the sides of the board and the number of black cells (1 ≤ h, w ≤ 105, 1 ≤ n ≤ 2000). 

Next n lines contain the description of black cells. The i-th of these lines contains numbers ri, ci (1 ≤ ri ≤ h, 1 ≤ ci ≤ w) — the number of the row and column of the i-th cell.

It is guaranteed that the upper left and lower right cell are white and all cells in the description are distinct.

Output

Print a single line — the remainder of the number of ways to move Gerald's pawn from the upper left to the lower right corner modulo 109 + 7.

Examples

Input

3 4 2
2 2
2 3


Output

2


Input

100 100 3
15 16
16 15
99 88


Output

545732279

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3, where we implement the natural language invariants inferred previously in C++.

### Phase 3: Implement Checkers in C++

Here are the C++ checkers based on the performance-characterizing invariants derived in Phase 2:

1. **Checker for Large Factorial Precomputation:**

   ```cpp
   void check_large_dimensions_invariant(long long h, long long w) {
       if (h > 50000 && w > 50000) {
           cerr << "Warning: Performance bottleneck condition triggered - large factorial precomputation!" << endl;
           abort();
       }
   }
   ```

2. **Checker for High Computational Load with Large Dimensions:**

   ```cpp
   void check_high_computation_invariant(long long h, long long w) {
       if (h > 90000 || w > 90000) {
           cerr << "Warning: Performance bottleneck condition triggered - high computational load due to large dimensions!" << endl;
           abort();
       }
   }
   ```

3. **Checker for Sparse Black Cells with Large Dimensions:**

   ```cpp
   void check_sparse_black_cells_invariant(long long n, long long h, long long w) {
       if (n < 10 && (h > 95000 || w > 95000)) {
           cerr << "Warning: Performance bottleneck condition triggered - sparse black cells with large board dimensions!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into Original Program

Now, let's integrate these checkers into the original C++ program. We will place the checks after reading the inputs, before the heavy computational sections.

```cpp
#include <bits/stdc++.h>
using namespace std;
long long h, w, n;
pair<long long, long long> a[2005];
long long fact[200005];
long long ifact[200005];
long long dp[2005];

long long exp(long long a, long long b) {
  if (b == 0) return 1;
  if (b == 1) return a;
  if (b % 2 == 0) {
    long long r = exp(a, b / 2);
    return (r * r) % 1000000007;
  }
  long long r = exp(a, b - 1);
  return (r * a) % 1000000007;
}

long long C(long long n, long long k) {
  return (((fact[n] * ifact[k]) % 1000000007) * ifact[n - k]) % 1000000007;
}

// Checker functions to detect performance bottlenecks
void check_large_dimensions_invariant(long long h, long long w) {
    if (h > 50000 && w > 50000) {
        cerr << "Warning: Performance bottleneck condition triggered - large factorial precomputation!" << endl;
        abort();
    }
}

void check_high_computation_invariant(long long h, long long w) {
    if (h > 90000 || w > 90000) {
        cerr << "Warning: Performance bottleneck condition triggered - high computational load due to large dimensions!" << endl;
        abort();
    }
}

void check_sparse_black_cells_invariant(long long n, long long h, long long w) {
    if (n < 10 && (h > 95000 || w > 95000)) {
        cerr << "Warning: Performance bottleneck condition triggered - sparse black cells with large board dimensions!" << endl;
        abort();
    }
}

int main() {
  scanf("%lld %lld %lld", &h, &w, &n);

  // Insert checker function calls after reading inputs
  check_large_dimensions_invariant(h, w);
  check_high_computation_invariant(h, w);
  check_sparse_black_cells_invariant(n, h, w);

  for (long long i = 0; i < n; i++) {
    scanf("%lld %lld", &a[i].first, &a[i].second);
    a[i].first--;
    a[i].second--;
  }
  sort(a, a + n);
  a[n++] = make_pair(h - 1, w - 1);
  fact[0] = 1;
  ifact[0] = 1;
  for (long long i = 1; i <= max(w, h) * 2; i++) {
    fact[i] = (fact[i - 1] * i) % 1000000007;
    ifact[i] = exp(fact[i], 1000000007 - 2);
  }
  for (long long i = 0; i < n; i++) {
    long long num = C(a[i].first + a[i].second, a[i].first);
    for (long long j = 0; j < i; j++) {
      if (a[j].first <= a[i].first && a[j].second <= a[i].second) {
        int sub =
            (dp[j] * C((a[i].first - a[j].first) + (a[i].second - a[j].second),
                       a[i].first - a[j].first)) %
            1000000007;
        num = (num - sub + 1000000007) % 1000000007;
      }
    }
    dp[i] = num;
  }
  cout << dp[n - 1] << endl;
}
```

### Explanation:

- **Check Placement:** The checkers are placed immediately after reading the inputs, ensuring that the program aborts early if a bottleneck condition is detected.
- **Checker Functions:** Each checker function corresponds to an invariant derived earlier, and they are designed to capture potential performance bottlenecks without adding unnecessary overhead in tight loops.

