system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Giant chess is quite common in Geraldion. We will not delve into the rules of the game, we'll just say that the game takes place on an h × w field, and it is painted in two colors, but not like in chess. Almost all cells of the field are white and only some of them are black. Currently Gerald is finishing a game of giant chess against his friend Pollard. Gerald has almost won, and the only thing he needs to win is to bring the pawn from the upper left corner of the board, where it is now standing, to the lower right corner. Gerald is so confident of victory that he became interested, in how many ways can he win?

The pawn, which Gerald has got left can go in two ways: one cell down or one cell to the right. In addition, it can not go to the black cells, otherwise the Gerald still loses. There are no other pawns or pieces left on the field, so that, according to the rules of giant chess Gerald moves his pawn until the game is over, and Pollard is just watching this process.

Input

The first line of the input contains three integers: h, w, n — the sides of the board and the number of black cells (1 ≤ h, w ≤ 105, 1 ≤ n ≤ 2000). 

Next n lines contain the description of black cells. The i-th of these lines contains numbers ri, ci (1 ≤ ri ≤ h, 1 ≤ ci ≤ w) — the number of the row and column of the i-th cell.

It is guaranteed that the upper left and lower right cell are white and all cells in the description are distinct.

Output

Print a single line — the remainder of the number of ways to move Gerald's pawn from the upper left to the lower right corner modulo 109 + 7.

Examples

Input

3 4 2
2 2
2 3


Output

2


Input

100 100 3
15 16
16 15
99 88


Output

545732279

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
unsigned long long h, w, n;
vector<unsigned long long> factorials;
vector<pair<int, int> > coords;
unsigned long long primaldialga = 1000000007;
vector<unsigned long long> invfact;
vector<unsigned long long> coorddp;
unsigned long long powerpower(unsigned long long s, unsigned long long power) {
  if (power == 0) return 1;
  unsigned long long counter = 1;
  unsigned long long acc = s;
  vector<unsigned long long> memo;
  memo.push_back(acc);
  while (2 * counter <= power) {
    counter *= 2;
    acc = (acc * acc) % primaldialga;
    memo.push_back(acc);
  }
  acc = 1;
  int tracker = 0;
  while (power != 0) {
    if (power % 2 == 1) acc = (acc * memo[tracker]) % primaldialga;
    tracker++;
    power /= 2;
  }
  acc %= primaldialga;
  return acc;
}
unsigned long long nchoosek(int n, int k) {
  unsigned long long step1 = factorials[n];
  unsigned long long step2 = (invfact[k] * invfact[n - k]) % primaldialga;
  unsigned long long step3 = (step1 * step2) % primaldialga;
  return step3;
}
unsigned long long waystone(int coordindex) {
  if (coorddp[coordindex] != -1) return coorddp[coordindex];
  pair<int, int> tangerage = coords[coordindex];
  unsigned long long acc = 0;
  for (int i = 0; i < n; i++) {
    if (coords[i].first <= tangerage.first &&
        coords[i].second <= tangerage.second &&
        (coords[i].first != tangerage.first ||
         coords[i].second != tangerage.second)) {
      unsigned long long intermed = waystone(i);
      unsigned long long travers =
          nchoosek((tangerage.first - coords[i].first) +
                       (tangerage.second - coords[i].second),
                   tangerage.first - coords[i].first);
      unsigned long long toAdd = (intermed * travers) % primaldialga;
      acc = (acc + toAdd) % primaldialga;
    }
  }
  unsigned long long totalit =
      nchoosek(tangerage.first + tangerage.second - 2, tangerage.first - 1);
  coorddp[coordindex] = (totalit + (primaldialga - acc)) % primaldialga;
  return coorddp[coordindex];
}
int main() {
  cin >> h >> w >> n;
  coords = vector<pair<int, int> >(n + 1);
  for (int i = 0; i < n; i++) {
    cin >> coords[i].first >> coords[i].second;
    if (coords[i].first == h && coords[i].second == w) {
      cout << 0 << endl;
      return 0;
    }
  }
  coords[n].first = h;
  coords[n].second = w;
  factorials = vector<unsigned long long>(h + w + 1);
  invfact = vector<unsigned long long>(h + w + 1);
  coorddp = vector<unsigned long long>(n + 1, -1);
  factorials[0] = 1;
  for (int i = 1; i <= h + w; i++) {
    factorials[i] = i * factorials[i - 1];
    factorials[i] %= primaldialga;
  }
  for (int i = 0; i <= h + w; i++) {
    invfact[i] = powerpower(factorials[i], primaldialga - 2);
  }
  cout << waystone(n) << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100000 100000 4
50001 50001
50000 50000
50000 50001
50001 50000


(G.2) Fast Input

1000 1000 4
50 50
51 50
50 51
51 51


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
unsigned long long h, w, n; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<unsigned long long> factorials; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int> > coords; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
unsigned long long primaldialga = 1000000007; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
vector<unsigned long long> invfact; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
vector<unsigned long long> coorddp; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
unsigned long long powerpower(unsigned long long s, unsigned long long power) { /* line 9 slow_hit_count: 200001, fast_hit_count: 2001 */
  if (power == 0) return 1; /* line 10 slow_hit_count: 200001, fast_hit_count: 2001 */
  unsigned long long counter = 1; /* line 11 slow_hit_count: 200001, fast_hit_count: 2001 */
  unsigned long long acc = s; /* line 12 slow_hit_count: 200001, fast_hit_count: 2001 */
  vector<unsigned long long> memo; /* line 13 slow_hit_count: 200001, fast_hit_count: 2001 */
  memo.push_back(acc); /* line 14 slow_hit_count: 200001, fast_hit_count: 2001 */
  while (2 * counter <= power) { /* line 15 slow_hit_count: 6000030, fast_hit_count: 60030 */
    counter *= 2; /* line 16 slow_hit_count: 5800029, fast_hit_count: 58029 */
    acc = (acc * acc) % primaldialga; /* line 17 slow_hit_count: 5800029, fast_hit_count: 58029 */
    memo.push_back(acc); /* line 18 slow_hit_count: 5800029, fast_hit_count: 58029 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  acc = 1; /* line 20 slow_hit_count: 200001, fast_hit_count: 2001 */
  int tracker = 0; /* line 21 slow_hit_count: 200001, fast_hit_count: 2001 */
  while (power != 0) { /* line 22 slow_hit_count: 6200031, fast_hit_count: 62031 */
    if (power % 2 == 1) acc = (acc * memo[tracker]) % primaldialga; /* line 23 slow_hit_count: 6000030, fast_hit_count: 60030 */
    tracker++; /* line 24 slow_hit_count: 6000030, fast_hit_count: 60030 */
    power /= 2; /* line 25 slow_hit_count: 6000030, fast_hit_count: 60030 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  acc %= primaldialga; /* line 27 slow_hit_count: 200001, fast_hit_count: 2001 */
  return acc; /* line 28 slow_hit_count: 200001, fast_hit_count: 2001 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
unsigned long long nchoosek(int n, int k) { /* line 30 slow_hit_count: 14, fast_hit_count: 14 */
  unsigned long long step1 = factorials[n]; /* line 31 slow_hit_count: 14, fast_hit_count: 14 */
  unsigned long long step2 = (invfact[k] * invfact[n - k]) % primaldialga; /* line 32 slow_hit_count: 14, fast_hit_count: 14 */
  unsigned long long step3 = (step1 * step2) % primaldialga; /* line 33 slow_hit_count: 14, fast_hit_count: 14 */
  return step3; /* line 34 slow_hit_count: 14, fast_hit_count: 14 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
unsigned long long waystone(int coordindex) { /* line 36 slow_hit_count: 10, fast_hit_count: 10 */
  if (coorddp[coordindex] != -1) return coorddp[coordindex]; /* line 37 slow_hit_count: 10, fast_hit_count: 10 */
  pair<int, int> tangerage = coords[coordindex]; /* line 38 slow_hit_count: 5, fast_hit_count: 5 */
  unsigned long long acc = 0; /* line 39 slow_hit_count: 5, fast_hit_count: 5 */
  for (int i = 0; i < n; i++) { /* line 40 slow_hit_count: 25, fast_hit_count: 25 */
    if (coords[i].first <= tangerage.first && /* line 41 slow_hit_count: 20, fast_hit_count: 20 */
        coords[i].second <= tangerage.second && /* line 42 slow_hit_count: 33, fast_hit_count: 33 */
        (coords[i].first != tangerage.first || /* line 43 slow_hit_count: 13, fast_hit_count: 13 */
         coords[i].second != tangerage.second)) { /* line 44 slow_hit_count: 6, fast_hit_count: 6 */
      unsigned long long intermed = waystone(i); /* line 45 slow_hit_count: 9, fast_hit_count: 9 */
      unsigned long long travers = /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
          nchoosek((tangerage.first - coords[i].first) + /* line 47 slow_hit_count: 36, fast_hit_count: 36 */
                       (tangerage.second - coords[i].second), /* line 48 slow_hit_count: 9, fast_hit_count: 9 */
                   tangerage.first - coords[i].first); /* line 49 slow_hit_count: 9, fast_hit_count: 9 */
      unsigned long long toAdd = (intermed * travers) % primaldialga; /* line 50 slow_hit_count: 9, fast_hit_count: 9 */
      acc = (acc + toAdd) % primaldialga; /* line 51 slow_hit_count: 9, fast_hit_count: 9 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  unsigned long long totalit = /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      nchoosek(tangerage.first + tangerage.second - 2, tangerage.first - 1); /* line 55 slow_hit_count: 5, fast_hit_count: 5 */
  coorddp[coordindex] = (totalit + (primaldialga - acc)) % primaldialga; /* line 56 slow_hit_count: 5, fast_hit_count: 5 */
  return coorddp[coordindex]; /* line 57 slow_hit_count: 5, fast_hit_count: 5 */
} /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> h >> w >> n; /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  coords = vector<pair<int, int> >(n + 1); /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 62 slow_hit_count: 5, fast_hit_count: 5 */
    cin >> coords[i].first >> coords[i].second; /* line 63 slow_hit_count: 4, fast_hit_count: 4 */
    if (coords[i].first == h && coords[i].second == w) { /* line 64 slow_hit_count: 4, fast_hit_count: 4 */
      cout << 0 << endl; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
      return 0; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  coords[n].first = h; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  coords[n].second = w; /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  factorials = vector<unsigned long long>(h + w + 1); /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  invfact = vector<unsigned long long>(h + w + 1); /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  coorddp = vector<unsigned long long>(n + 1, -1); /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  factorials[0] = 1; /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= h + w; i++) { /* line 75 slow_hit_count: 200001, fast_hit_count: 2001 */
    factorials[i] = i * factorials[i - 1]; /* line 76 slow_hit_count: 200000, fast_hit_count: 2000 */
    factorials[i] %= primaldialga; /* line 77 slow_hit_count: 200000, fast_hit_count: 2000 */
  } /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i <= h + w; i++) { /* line 79 slow_hit_count: 200002, fast_hit_count: 2002 */
    invfact[i] = powerpower(factorials[i], primaldialga - 2); /* line 80 slow_hit_count: 200001, fast_hit_count: 2001 */
  } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  cout << waystone(n) << endl; /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 84 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit counts and the structure of the code, the following observations can be made about potential performance bottlenecks:

1. **`powerpower` Function**: 
   - The lines 9 through 28, which implement the `powerpower` function, are hit significantly more often during the slow input run. Notably, the loop at line 15 (`while (2 * counter <= power)`) and inside the loop (lines 16-18) are executed a much larger number of times with the slow input, indicating that this function is a potential bottleneck.

2. **Factorial and Inverse Factorial Calculation**:
   - Lines 75-80 calculate factorials and their modular inverses. The loops here iterate over `(h + w)` times, which can be very large (up to 200,000), and these operations are computationally expensive due to multiplication and the use of the `powerpower` function.

3. **Dynamic Programming Approach in `waystone` Function**:
   - The `waystone` function (lines 36-57) involves checking all given black cell coordinates to compute the number of paths dynamically. It seems efficient in terms of hit counts, but given its dependence on other costly operations (like `nchoosek` and recursive calls), it may still contribute to the overall performance issue under certain conditions.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some natural language performance-characterizing invariants:

1. **Large Combinatorial Calculations**:
   - "If both height `h` and width `w` are large, resulting in a high number of combinations `(h + w)`, the calculations involving factorials and their inverses may become computationally expensive, leading to slowdown."

2. **Heavy Use of Modular Exponentiation**:
   - "When the number of paths to evaluate involves many modular exponentiations (as required by factorial and inverse factorial calculations involving `powerpower`), the accumulated computational cost may cause a significant slowdown."

3. **Large Number of Black Cells**:
   - "If the number of black cells `n` is large and they form a dense cluster that constrains many potential paths, the recursive path calculation in `waystone` may become more complex and expensive."

4. **Dense Intermediate Path Calculations**:
   - "If there are numerous intermediary paths blocked by black cells that require recalculating combinations, it can trigger excessive recursive computations with costly combinatorial evaluations, hampering performance."

These invariants abstractly describe potential performance triggers based on the problem constraints and observed code behavior, aiming to help understand under which conditions the code might slow down.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Giant chess is quite common in Geraldion. We will not delve into the rules of the game, we'll just say that the game takes place on an h × w field, and it is painted in two colors, but not like in chess. Almost all cells of the field are white and only some of them are black. Currently Gerald is finishing a game of giant chess against his friend Pollard. Gerald has almost won, and the only thing he needs to win is to bring the pawn from the upper left corner of the board, where it is now standing, to the lower right corner. Gerald is so confident of victory that he became interested, in how many ways can he win?

The pawn, which Gerald has got left can go in two ways: one cell down or one cell to the right. In addition, it can not go to the black cells, otherwise the Gerald still loses. There are no other pawns or pieces left on the field, so that, according to the rules of giant chess Gerald moves his pawn until the game is over, and Pollard is just watching this process.

Input

The first line of the input contains three integers: h, w, n — the sides of the board and the number of black cells (1 ≤ h, w ≤ 105, 1 ≤ n ≤ 2000). 

Next n lines contain the description of black cells. The i-th of these lines contains numbers ri, ci (1 ≤ ri ≤ h, 1 ≤ ci ≤ w) — the number of the row and column of the i-th cell.

It is guaranteed that the upper left and lower right cell are white and all cells in the description are distinct.

Output

Print a single line — the remainder of the number of ways to move Gerald's pawn from the upper left to the lower right corner modulo 109 + 7.

Examples

Input

3 4 2
2 2
2 3


Output

2


Input

100 100 3
15 16
16 15
99 88


Output

545732279

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ code snippets to implement the performance-characterizing invariants:

1. **Large Combinatorial Calculations**:
   ```cpp
   void check_large_combinatorial_calculations(unsigned long long h, unsigned long long w) {
       if (h + w > 150000) {  // Threshold based on problem constraints.
           cerr << "Warning: Large combinatorial calculations - Potential performance bottleneck!" << endl;
           abort();
       }
   }
   ```

2. **Heavy Use of Modular Exponentiation**:
   ```cpp
   void check_modular_exponentiation_usage(unsigned long long h, unsigned long long w) {
       if (h + w > 150000) {  // Similar threshold as above since it derives from factorial calculations.
           cerr << "Warning: Heavy modular exponentiation usage - Potential performance bottleneck!" << endl;
           abort();
       }
   }
   ```

3. **Large Number of Black Cells**:
   ```cpp
   void check_large_black_cell_density(unsigned long long n) {
       if (n > 1500) {  // Threshold to consider many black cells potentially affecting path dynamics.
           cerr << "Warning: High density of black cells - Potential performance bottleneck!" << endl;
           abort();
       }
   }
   ```

4. **Dense Intermediate Path Calculations**:
   ```cpp
   void check_dense_intermediate_path_calculations(unsigned long long h, unsigned long long w, unsigned long long n) {
       if ((h + w > 150000) && (n > 1500)) {  // Combination of constraints indicating dense paths.
           cerr << "Warning: Dense intermediate path calculations - Potential performance bottleneck!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code with the Original Program

Here is the original C++ program with the integrated runtime checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

unsigned long long h, w, n;
vector<unsigned long long> factorials;
vector<pair<int, int> > coords;
unsigned long long primaldialga = 1000000007;
vector<unsigned long long> invfact;
vector<unsigned long long> coorddp;

unsigned long long powerpower(unsigned long long s, unsigned long long power) {
    if (power == 0) return 1;
    unsigned long long counter = 1;
    unsigned long long acc = s;
    vector<unsigned long long> memo;
    memo.push_back(acc);
    while (2 * counter <= power) {
        counter *= 2;
        acc = (acc * acc) % primaldialga;
        memo.push_back(acc);
    }
    acc = 1;
    int tracker = 0;
    while (power != 0) {
        if (power % 2 == 1) acc = (acc * memo[tracker]) % primaldialga;
        tracker++;
        power /= 2;
    }
    acc %= primaldialga;
    return acc;
}

unsigned long long nchoosek(int n, int k) {
    unsigned long long step1 = factorials[n];
    unsigned long long step2 = (invfact[k] * invfact[n - k]) % primaldialga;
    unsigned long long step3 = (step1 * step2) % primaldialga;
    return step3;
}

unsigned long long waystone(int coordindex) {
    if (coorddp[coordindex] != -1) return coorddp[coordindex];
    pair<int, int> tangerage = coords[coordindex];
    unsigned long long acc = 0;
    for (int i = 0; i < n; i++) {
        if (coords[i].first <= tangerage.first &&
            coords[i].second <= tangerage.second &&
            (coords[i].first != tangerage.first ||
             coords[i].second != tangerage.second)) {
            unsigned long long intermed = waystone(i);
            unsigned long long travers =
                nchoosek((tangerage.first - coords[i].first) +
                         (tangerage.second - coords[i].second),
                         tangerage.first - coords[i].first);
            unsigned long long toAdd = (intermed * travers) % primaldialga;
            acc = (acc + toAdd) % primaldialga;
        }
    }
    unsigned long long totalit =
        nchoosek(tangerage.first + tangerage.second - 2, tangerage.first - 1);
    coorddp[coordindex] = (totalit + (primaldialga - acc)) % primaldialga;
    return coorddp[coordindex];
}

void check_large_combinatorial_calculations(unsigned long long h, unsigned long long w) {
    if (h + w > 150000) {  // Threshold based on problem constraints.
        cerr << "Warning: Large combinatorial calculations - Potential performance bottleneck!" << endl;
        abort();
    }
}

void check_modular_exponentiation_usage(unsigned long long h, unsigned long long w) {
    if (h + w > 150000) {  // Similar threshold as above since it derives from factorial calculations.
        cerr << "Warning: Heavy modular exponentiation usage - Potential performance bottleneck!" << endl;
        abort();
    }
}

void check_large_black_cell_density(unsigned long long n) {
    if (n > 1500) {  // Threshold to consider many black cells potentially affecting path dynamics.
        cerr << "Warning: High density of black cells - Potential performance bottleneck!" << endl;
        abort();
    }
}

void check_dense_intermediate_path_calculations(unsigned long long h, unsigned long long w, unsigned long long n) {
    if ((h + w > 150000) && (n > 1500)) {  // Combination of constraints indicating dense paths.
        cerr << "Warning: Dense intermediate path calculations - Potential performance bottleneck!" << endl;
        abort();
    }
}

int main() {
    cin >> h >> w >> n;
    check_large_combinatorial_calculations(h, w);
    check_modular_exponentiation_usage(h, w);
    check_large_black_cell_density(n);
    check_dense_intermediate_path_calculations(h, w, n);

    coords = vector<pair<int, int> >(n + 1);
    for (int i = 0; i < n; i++) {
        cin >> coords[i].first >> coords[i].second;
        if (coords[i].first == h && coords[i].second == w) {
            cout << 0 << endl;
            return 0;
        }
    }
    coords[n].first = h;
    coords[n].second = w;
    factorials = vector<unsigned long long>(h + w + 1);
    invfact = vector<unsigned long long>(h + w + 1);
    coorddp = vector<unsigned long long>(n + 1, -1);
    factorials[0] = 1;
    for (int i = 1; i <= h + w; i++) {
        factorials[i] = i * factorials[i - 1];
        factorials[i] %= primaldialga;
    }
    for (int i = 0; i <= h + w; i++) {
        invfact[i] = powerpower(factorials[i], primaldialga - 2);
    }
    cout << waystone(n) << endl;
    return 0;
}
```

**Comments**:
- The checks are placed after reading the input to assess potential performance bottlenecks based on the input size and configuration.
- Each check aborts if the conditions that could lead to a slowdown are detected, providing a warning message to help diagnose performance issues.

