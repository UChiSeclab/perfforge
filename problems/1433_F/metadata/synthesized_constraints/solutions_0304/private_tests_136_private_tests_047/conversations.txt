system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a matrix a of size n × m consisting of integers.

You can choose no more than \left⌊m/2\right⌋ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by k and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by k.

Note that you can choose zero elements (and the sum of such set is 0).

Input

The first line of the input contains three integers n, m and k (1 ≤ n, m, k ≤ 70) — the number of rows in the matrix, the number of columns in the matrix and the value of k. The next n lines contain m elements each, where the j-th element of the i-th row is a_{i, j} (1 ≤ a_{i, j} ≤ 70).

Output

Print one integer — the maximum sum divisible by k you can obtain.

Examples

Input


3 4 3
1 2 3 4
5 2 2 2
7 1 1 4


Output


24


Input


5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6


Output


56

Note

In the first example, the optimal answer is 2 and 4 in the first row, 5 and 2 in the second row and 7 and 4 in the third row. The total sum is 2 + 4 + 5 + 2 + 7 + 4 = 24.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long dx[8] = {0, 1, 0, -1, 1, 1, -1, -1};
long long dy[8] = {1, 0, -1, 0, -1, 1, 1, -1};
class pa3 {
 public:
  long long x;
  long long y, z;
  pa3(long long x = 0, long long y = 0, long long z = 0) : x(x), y(y), z(z) {}
  bool operator<(const pa3& p) const {
    if (x != p.x) return x < p.x;
    if (y != p.y) return y < p.y;
    return z < p.z;
  }
  bool operator>(const pa3& p) const {
    if (x != p.x) return x > p.x;
    if (y != p.y) return y > p.y;
    return z > p.z;
  }
  bool operator==(const pa3& p) const {
    return x == p.x && y == p.y && z == p.z;
  }
  bool operator!=(const pa3& p) const {
    return !(x == p.x && y == p.y && z == p.z);
  }
};
class pa4 {
 public:
  long long x;
  long long y, z, w;
  pa4(long long x = 0, long long y = 0, long long z = 0, long long w = 0)
      : x(x), y(y), z(z), w(w) {}
  bool operator<(const pa4& p) const {
    if (x != p.x) return x < p.x;
    if (y != p.y) return y < p.y;
    if (z != p.z) return z < p.z;
    return w < p.w;
  }
  bool operator>(const pa4& p) const {
    if (x != p.x) return x > p.x;
    if (y != p.y) return y > p.y;
    if (z != p.z) return z > p.z;
    return w > p.w;
  }
  bool operator==(const pa4& p) const {
    return x == p.x && y == p.y && z == p.z && w == p.w;
  }
};
class pa2 {
 public:
  long long x, y;
  pa2(long long x = 0, long long y = 0) : x(x), y(y) {}
  pa2 operator+(pa2 p) { return pa2(x + p.x, y + p.y); }
  pa2 operator-(pa2 p) { return pa2(x - p.x, y - p.y); }
  bool operator<(const pa2& p) const { return y != p.y ? y < p.y : x < p.x; }
  bool operator>(const pa2& p) const { return x != p.x ? x < p.x : y < p.y; }
  bool operator==(const pa2& p) const {
    return abs(x - p.x) == 0 && abs(y - p.y) == 0;
  }
  bool operator!=(const pa2& p) const {
    return !(abs(x - p.x) == 0 && abs(y - p.y) == 0);
  }
};
string itos(long long i) {
  ostringstream s;
  s << i;
  return s.str();
}
long long Gcd(long long v, long long b) {
  if (v == 0) return b;
  if (b == 0) return v;
  if (v > b) return Gcd(b, v);
  if (v == b) return b;
  if (b % v == 0) return v;
  return Gcd(v, b % v);
}
long long mod;
long long extgcd(long long a, long long b, long long& x, long long& y) {
  if (b == 0) {
    x = 1;
    y = 0;
    return a;
  }
  long long d = extgcd(b, a % b, y, x);
  y -= a / b * x;
  return d;
}
pair<long long, long long> operator+(const pair<long long, long long>& l,
                                     const pair<long long, long long>& r) {
  return {l.first + r.first, l.second + r.second};
}
pair<long long, long long> operator-(const pair<long long, long long>& l,
                                     const pair<long long, long long>& r) {
  return {l.first - r.first, l.second - r.second};
}
ostream& operator<<(ostream& os, const vector<long long>& VEC) {
  for (auto v : VEC) os << v << " ";
  return os;
}
ostream& operator<<(ostream& os, const pair<long long, long long>& PAI) {
  os << PAI.first << " : " << PAI.second;
  return os;
}
ostream& operator<<(ostream& os, const pa3& PAI) {
  os << PAI.x << " : " << PAI.y << " : " << PAI.z;
  return os;
}
ostream& operator<<(ostream& os, const pa4& PAI) {
  os << PAI.x << " : " << PAI.y << " : " << PAI.z << " : " << PAI.w;
  return os;
}
ostream& operator<<(ostream& os,
                    const vector<pair<long long, long long> >& VEC) {
  for (auto v : VEC) os << v << " ";
  return os;
}
long long beki(long long wa, long long rr, long long warukazu) {
  if (rr == 0) return 1 % warukazu;
  if (rr == 1) return wa % warukazu;
  wa %= warukazu;
  if (rr % 2 == 1)
    return ((long long)beki(wa, rr - 1, warukazu) * (long long)wa) % warukazu;
  long long zx = beki(wa, rr / 2, warukazu);
  return (zx * zx) % warukazu;
}
long long pr[1100000];
long long inv[1100000];
long long comb(long long nn, long long rr) {
  if (rr < 0 || rr > nn || nn < 0) return 0;
  long long r = pr[nn] * inv[rr];
  r %= mod;
  r *= inv[nn - rr];
  r %= mod;
  return r;
}
void gya(long long ert) {
  pr[0] = 1;
  for (long long i = 1; i <= ert; i++) {
    pr[i] = ((long long)pr[i - 1] * i) % mod;
  }
  inv[ert] = beki(pr[ert], mod - 2, mod);
  for (long long i = ert - 1; i >= 0; i--) {
    inv[i] = (long long)inv[i + 1] * (i + 1) % mod;
  }
}
long long dp[80][80][80];
long long dp2[80][80];
void solve() {
  long long n, m, k;
  cin >> n >> m >> k;
  for (long long i = 0; i < 80; i++)
    for (long long j = 0; j < 80; j++) dp2[i][j] = -1;
  dp2[0][0] = 0;
  for (long long i = 0; i < n; i++) {
    for (long long j = 0; j < 80; j++)
      for (long long l = 0; l < 80; l++)
        for (long long e = 0; e < 80; e++) dp[l][j][e] = -1;
    dp[0][0][0] = 0;
    for (long long j = 0; j < m; j++) {
      long long y;
      cin >> y;
      for (long long l = 0; l <= m; l++)
        for (long long e = 0; e < k; e++)
          if (dp[j][l][e] >= 0) {
            dp[j + 1][l][e] = max(dp[j + 1][l][e], dp[j][l][e]);
            dp[j + 1][l + 1][(e + y) % k] =
                max(dp[j + 1][l + 1][(e + y) % k], dp[j][l][e] + y);
          }
    }
    vector<long long> a(k, -1);
    for (long long j = 0; j < k; j++)
      for (long long e = 0; e <= m / 2; e++) {
        a[j] = max(a[j], dp[m][e][j]);
      }
    for (long long j = 0; j < k; j++)
      if (dp2[i][j] >= 0) {
        for (long long l = 0; l < k; l++)
          if (a[l] >= 0) {
            dp2[i + 1][(j + l) % k] =
                max(dp2[i + 1][(j + l) % k], dp2[i][j] + a[l]);
          }
      }
  }
  cout << dp2[n][0] << endl;
}
signed main() {
  mod = 1000000007;
  cin.tie(0);
  ios::sync_with_stdio(false);
  long long n = 1;
  for (long long i = 0; i < n; i++) solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 2 5
1 1
1 1
1 1
1 1
1 1


(G.2) Fast Input

2 2 5
1 1
1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long dx[8] = {0, 1, 0, -1, 1, 1, -1, -1}; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long dy[8] = {1, 0, -1, 0, -1, 1, 1, -1}; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
class pa3 { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  long long x; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  long long y, z; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  pa3(long long x = 0, long long y = 0, long long z = 0) : x(x), y(y), z(z) {} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator<(const pa3& p) const { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    if (x != p.x) return x < p.x; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    if (y != p.y) return y < p.y; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    return z < p.z; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator>(const pa3& p) const { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    if (x != p.x) return x > p.x; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    if (y != p.y) return y > p.y; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    return z > p.z; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator==(const pa3& p) const { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    return x == p.x && y == p.y && z == p.z; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator!=(const pa3& p) const { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    return !(x == p.x && y == p.y && z == p.z); /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
class pa4 { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  long long x; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  long long y, z, w; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  pa4(long long x = 0, long long y = 0, long long z = 0, long long w = 0) /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      : x(x), y(y), z(z), w(w) {} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator<(const pa4& p) const { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    if (x != p.x) return x < p.x; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    if (y != p.y) return y < p.y; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    if (z != p.z) return z < p.z; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    return w < p.w; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator>(const pa4& p) const { /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    if (x != p.x) return x > p.x; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    if (y != p.y) return y > p.y; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    if (z != p.z) return z > p.z; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    return w > p.w; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator==(const pa4& p) const { /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    return x == p.x && y == p.y && z == p.z && w == p.w; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
class pa2 { /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  long long x, y; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  pa2(long long x = 0, long long y = 0) : x(x), y(y) {} /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  pa2 operator+(pa2 p) { return pa2(x + p.x, y + p.y); } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  pa2 operator-(pa2 p) { return pa2(x - p.x, y - p.y); } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator<(const pa2& p) const { return y != p.y ? y < p.y : x < p.x; } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator>(const pa2& p) const { return x != p.x ? x < p.x : y < p.y; } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator==(const pa2& p) const { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    return abs(x - p.x) == 0 && abs(y - p.y) == 0; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator!=(const pa2& p) const { /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    return !(abs(x - p.x) == 0 && abs(y - p.y) == 0); /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
string itos(long long i) { /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  ostringstream s; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  s << i; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  return s.str(); /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
long long Gcd(long long v, long long b) { /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  if (v == 0) return b; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  if (b == 0) return v; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  if (v > b) return Gcd(b, v); /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  if (v == b) return b; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  if (b % v == 0) return v; /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  return Gcd(v, b % v); /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
long long mod; /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
long long extgcd(long long a, long long b, long long& x, long long& y) { /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
  if (b == 0) { /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
    x = 1; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
    y = 0; /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
    return a; /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
  long long d = extgcd(b, a % b, y, x); /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
  y -= a / b * x; /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
  return d; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
pair<long long, long long> operator+(const pair<long long, long long>& l, /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
                                     const pair<long long, long long>& r) { /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  return {l.first + r.first, l.second + r.second}; /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
pair<long long, long long> operator-(const pair<long long, long long>& l, /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
                                     const pair<long long, long long>& r) { /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  return {l.first - r.first, l.second - r.second}; /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const vector<long long>& VEC) { /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto v : VEC) os << v << " "; /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const pair<long long, long long>& PAI) { /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
  os << PAI.first << " : " << PAI.second; /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const pa3& PAI) { /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
  os << PAI.x << " : " << PAI.y << " : " << PAI.z; /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 107 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const pa4& PAI) { /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
  os << PAI.x << " : " << PAI.y << " : " << PAI.z << " : " << PAI.w; /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 111 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, /* line 112 slow_hit_count: 0, fast_hit_count: 0 */
                    const vector<pair<long long, long long> >& VEC) { /* line 113 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto v : VEC) os << v << " "; /* line 114 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
long long beki(long long wa, long long rr, long long warukazu) { /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
  if (rr == 0) return 1 % warukazu; /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
  if (rr == 1) return wa % warukazu; /* line 119 slow_hit_count: 0, fast_hit_count: 0 */
  wa %= warukazu; /* line 120 slow_hit_count: 0, fast_hit_count: 0 */
  if (rr % 2 == 1) /* line 121 slow_hit_count: 0, fast_hit_count: 0 */
    return ((long long)beki(wa, rr - 1, warukazu) * (long long)wa) % warukazu; /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
  long long zx = beki(wa, rr / 2, warukazu); /* line 123 slow_hit_count: 0, fast_hit_count: 0 */
  return (zx * zx) % warukazu; /* line 124 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 125 slow_hit_count: 0, fast_hit_count: 0 */
long long pr[1100000]; /* line 126 slow_hit_count: 0, fast_hit_count: 0 */
long long inv[1100000]; /* line 127 slow_hit_count: 0, fast_hit_count: 0 */
long long comb(long long nn, long long rr) { /* line 128 slow_hit_count: 0, fast_hit_count: 0 */
  if (rr < 0 || rr > nn || nn < 0) return 0; /* line 129 slow_hit_count: 0, fast_hit_count: 0 */
  long long r = pr[nn] * inv[rr]; /* line 130 slow_hit_count: 0, fast_hit_count: 0 */
  r %= mod; /* line 131 slow_hit_count: 0, fast_hit_count: 0 */
  r *= inv[nn - rr]; /* line 132 slow_hit_count: 0, fast_hit_count: 0 */
  r %= mod; /* line 133 slow_hit_count: 0, fast_hit_count: 0 */
  return r; /* line 134 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 135 slow_hit_count: 0, fast_hit_count: 0 */
void gya(long long ert) { /* line 136 slow_hit_count: 0, fast_hit_count: 0 */
  pr[0] = 1; /* line 137 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 1; i <= ert; i++) { /* line 138 slow_hit_count: 0, fast_hit_count: 0 */
    pr[i] = ((long long)pr[i - 1] * i) % mod; /* line 139 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 140 slow_hit_count: 0, fast_hit_count: 0 */
  inv[ert] = beki(pr[ert], mod - 2, mod); /* line 141 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = ert - 1; i >= 0; i--) { /* line 142 slow_hit_count: 0, fast_hit_count: 0 */
    inv[i] = (long long)inv[i + 1] * (i + 1) % mod; /* line 143 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 144 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 145 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[80][80][80]; /* line 146 slow_hit_count: 0, fast_hit_count: 0 */
long long dp2[80][80]; /* line 147 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 148 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, m, k; /* line 149 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m >> k; /* line 150 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < 80; i++) /* line 151 slow_hit_count: 81, fast_hit_count: 81 */
    for (long long j = 0; j < 80; j++) dp2[i][j] = -1; /* line 152 slow_hit_count: 6480, fast_hit_count: 6480 */
  dp2[0][0] = 0; /* line 153 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) { /* line 154 slow_hit_count: 6, fast_hit_count: 3 */
    for (long long j = 0; j < 80; j++) /* line 155 slow_hit_count: 405, fast_hit_count: 162 */
      for (long long l = 0; l < 80; l++) /* line 156 slow_hit_count: 32400, fast_hit_count: 12960 */
        for (long long e = 0; e < 80; e++) dp[l][j][e] = -1; /* line 157 slow_hit_count: 2592000, fast_hit_count: 1036800 */
    dp[0][0][0] = 0; /* line 158 slow_hit_count: 5, fast_hit_count: 2 */
    for (long long j = 0; j < m; j++) { /* line 159 slow_hit_count: 15, fast_hit_count: 6 */
      long long y; /* line 160 slow_hit_count: 0, fast_hit_count: 0 */
      cin >> y; /* line 161 slow_hit_count: 10, fast_hit_count: 4 */
      for (long long l = 0; l <= m; l++) /* line 162 slow_hit_count: 40, fast_hit_count: 16 */
        for (long long e = 0; e < k; e++) /* line 163 slow_hit_count: 180, fast_hit_count: 72 */
          if (dp[j][l][e] >= 0) { /* line 164 slow_hit_count: 150, fast_hit_count: 60 */
            dp[j + 1][l][e] = max(dp[j + 1][l][e], dp[j][l][e]); /* line 165 slow_hit_count: 15, fast_hit_count: 6 */
            dp[j + 1][l + 1][(e + y) % k] = /* line 166 slow_hit_count: 15, fast_hit_count: 6 */
                max(dp[j + 1][l + 1][(e + y) % k], dp[j][l][e] + y); /* line 167 slow_hit_count: 15, fast_hit_count: 6 */
          } /* line 168 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 169 slow_hit_count: 0, fast_hit_count: 0 */
    vector<long long> a(k, -1); /* line 170 slow_hit_count: 10, fast_hit_count: 4 */
    for (long long j = 0; j < k; j++) /* line 171 slow_hit_count: 30, fast_hit_count: 12 */
      for (long long e = 0; e <= m / 2; e++) { /* line 172 slow_hit_count: 75, fast_hit_count: 30 */
        a[j] = max(a[j], dp[m][e][j]); /* line 173 slow_hit_count: 50, fast_hit_count: 20 */
      } /* line 174 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long j = 0; j < k; j++) /* line 175 slow_hit_count: 30, fast_hit_count: 12 */
      if (dp2[i][j] >= 0) { /* line 176 slow_hit_count: 25, fast_hit_count: 10 */
        for (long long l = 0; l < k; l++) /* line 177 slow_hit_count: 90, fast_hit_count: 18 */
          if (a[l] >= 0) { /* line 178 slow_hit_count: 75, fast_hit_count: 15 */
            dp2[i + 1][(j + l) % k] = /* line 179 slow_hit_count: 30, fast_hit_count: 6 */
                max(dp2[i + 1][(j + l) % k], dp2[i][j] + a[l]); /* line 180 slow_hit_count: 30, fast_hit_count: 6 */
          } /* line 181 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 182 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 183 slow_hit_count: 0, fast_hit_count: 0 */
  cout << dp2[n][0] << endl; /* line 184 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 185 slow_hit_count: 1, fast_hit_count: 1 */
signed main() { /* line 186 slow_hit_count: 1, fast_hit_count: 1 */
  mod = 1000000007; /* line 187 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 188 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 189 slow_hit_count: 1, fast_hit_count: 1 */
  long long n = 1; /* line 190 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) solve(); /* line 191 slow_hit_count: 2, fast_hit_count: 2 */
  return 0; /* line 192 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 193 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To identify the performance bottlenecks in the provided C program that calculates the maximum sum of selected matrix elements divisible by \( k \), let's analyze the hit counts and code structure to derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - Lines 154-157 (initializing `dp` array) and lines 162-167 (nested loops for dynamic programming) show significantly higher hit counts in the slow input compared to the fast input.
   - This suggests that the nested loops and the dynamic programming (DP) state initialization and updates are crucial factors contributing to the slowdown.

2. **Code Structure**:
   - The code employs a 3D DP table `dp[l][j][e]` which is re-initialized for each row of the matrix.
   - A nested loop iterates over all elements for each row (lines 159-167), calculating potential sums modulo \( k \).

3. **Slow Input Characteristics**:
   - The slow input contains a matrix with identical elements, leading to potential redundancy in calculations and lack of opportunities for early exit or pruning in the DP updates.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can propose the following performance-characterizing invariants in natural language, which describe conditions under which the program may enter a slow execution path:

1. **Invariant 1: Large Search Space in Dynamic Programming**:
   - **Natural Language Description**: "When each row of the matrix contains identical or very similar values, the dynamic programming solution may perform redundant calculations without an opportunity to prune the search space."
   - **Rationale**: Identical values across the matrix can cause the DP state space to be fully explored without shortcuts, leading to increased computation time.

2. **Invariant 2: High Frequency of State Updates**:
   - **Natural Language Description**: "If the number of columns \( m \) is close to its upper limit and the values within each column do not vary significantly, the program may perform excessive state updates, leading to slower execution."
   - **Rationale**: The limit on the number of elements that can be chosen (\( \left\lfloor m/2 \right\rfloor \)) combined with low variance in values, results in frequent DP table updates without significant gains.

3. **Invariant 3: Full DP Table Exploration**:
   - **Natural Language Description**: "When \( k \) is not a factor of the sum of any sub-selection of elements within a row, full exploration of the DP table is required, possibly slowing down execution if \( n \) and \( m \) are large."
   - **Rationale**: The need to compute every possible remainder modulo \( k \) for all sub-selections can greatly expand the state space, leading to slow performance.

These invariants focus on conditions that commonly lead to inefficiencies, such as limited pruning of the search space and extensive DP state updates, particularly when input constraints (e.g., \( n, m, k \leq 70 \)) are pushed to their limits.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a matrix a of size n × m consisting of integers.

You can choose no more than \left⌊m/2\right⌋ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by k and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by k.

Note that you can choose zero elements (and the sum of such set is 0).

Input

The first line of the input contains three integers n, m and k (1 ≤ n, m, k ≤ 70) — the number of rows in the matrix, the number of columns in the matrix and the value of k. The next n lines contain m elements each, where the j-th element of the i-th row is a_{i, j} (1 ≤ a_{i, j} ≤ 70).

Output

Print one integer — the maximum sum divisible by k you can obtain.

Examples

Input


3 4 3
1 2 3 4
5 2 2 2
7 1 1 4


Output


24


Input


5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6


Output


56

Note

In the first example, the optimal answer is 2 and 4 in the first row, 5 and 2 in the second row and 7 and 4 in the third row. The total sum is 2 + 4 + 5 + 2 + 7 + 4 = 24.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants identified in Phase 2, we can implement the following runtime checks in C++:

```cpp
// Check if each row contains identical or very similar values
void check_identical_row_values(const vector<vector<long long>>& matrix) {
    for (const auto& row : matrix) {
        if (std::adjacent_find(row.begin(), row.end(), std::not_equal_to<>()) == row.end()) {
            cerr << "Warning: Performance bottleneck condition triggered - identical values in row!" << endl;
            abort();
        }
    }
}

// Check if number of columns is close to upper limit
void check_large_column_limit(long long m) {
    if (m >= 65) { // Threshold chosen close to the upper constraint (70)
        cerr << "Warning: Performance bottleneck condition triggered - large number of columns!" << endl;
        abort();
    }
}

// Check if full DP table exploration is required
void check_full_dp_exploration(long long k, const vector<vector<long long>>& matrix) {
    for (const auto& row : matrix) {
        std::unordered_set<long long> mods;
        long long row_sum = 0;
        for (long long value : row) {
            row_sum += value;
            mods.insert(value % k);
        }
        if (mods.size() == 1 && mods.count(0) == 0) { // All elements have same non-zero remainder
            cerr << "Warning: Performance bottleneck condition triggered - full DP exploration needed!" << endl;
            abort();
        }
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

We will now integrate the runtime checks at appropriate points in the original C++ program to detect potential performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Check if each row contains identical or very similar values
void check_identical_row_values(const vector<vector<long long>>& matrix) {
    for (const auto& row : matrix) {
        if (std::adjacent_find(row.begin(), row.end(), std::not_equal_to<>()) == row.end()) {
            cerr << "Warning: Performance bottleneck condition triggered - identical values in row!" << endl;
            abort();
        }
    }
}

// Check if number of columns is close to upper limit
void check_large_column_limit(long long m) {
    if (m >= 65) { // Threshold chosen close to the upper constraint (70)
        cerr << "Warning: Performance bottleneck condition triggered - large number of columns!" << endl;
        abort();
    }
}

// Check if full DP table exploration is required
void check_full_dp_exploration(long long k, const vector<vector<long long>>& matrix) {
    for (const auto& row : matrix) {
        std::unordered_set<long long> mods;
        long long row_sum = 0;
        for (long long value : row) {
            row_sum += value;
            mods.insert(value % k);
        }
        if (mods.size() == 1 && mods.count(0) == 0) { // All elements have same non-zero remainder
            cerr << "Warning: Performance bottleneck condition triggered - full DP exploration needed!" << endl;
            abort();
        }
    }
}

class pa3 {
 // Class definitions omitted for brevity
};

class pa4 {
 // Class definitions omitted for brevity
};

class pa2 {
 // Class definitions omitted for brevity
};

string itos(long long i) {
 // Function definition omitted for brevity
}

long long Gcd(long long v, long long b) {
 // Function definition omitted for brevity
}

long long mod;
long long extgcd(long long a, long long b, long long& x, long long& y) {
 // Function definition omitted for brevity
}

pair<long long, long long> operator+(const pair<long long, long long>& l,
                                     const pair<long long, long long>& r) {
 // Operator definition omitted for brevity
}

pair<long long, long long> operator-(const pair<long long, long long>& l,
                                     const pair<long long, long long>& r) {
 // Operator definition omitted for brevity
}

ostream& operator<<(ostream& os, const vector<long long>& VEC) {
 // Operator definition omitted for brevity
}

ostream& operator<<(ostream& os, const pair<long long, long long>& PAI) {
 // Operator definition omitted for brevity
}

ostream& operator<<(ostream& os, const pa3& PAI) {
 // Operator definition omitted for brevity
}

ostream& operator<<(ostream& os, const pa4& PAI) {
 // Operator definition omitted for brevity
}

ostream& operator<<(ostream& os,
                    const vector<pair<long long, long long> >& VEC) {
 // Operator definition omitted for brevity
}

long long beki(long long wa, long long rr, long long warukazu) {
 // Function definition omitted for brevity
}

long long pr[1100000];
long long inv[1100000];
long long comb(long long nn, long long rr) {
 // Function definition omitted for brevity
}

void gya(long long ert) {
 // Function definition omitted for brevity
}

long long dp[80][80][80];
long long dp2[80][80];

void solve() {
  long long n, m, k;
  cin >> n >> m >> k;

  vector<vector<long long>> matrix(n, vector<long long>(m));
  for (int i = 0; i < n; ++i) {
      for (int j = 0; j < m; ++j) {
          cin >> matrix[i][j];
      }
  }

  // Insert runtime checks
  check_identical_row_values(matrix);
  check_large_column_limit(m);
  check_full_dp_exploration(k, matrix);
  
  // Original dp2 initialization
  for (long long i = 0; i < 80; i++)
    for (long long j = 0; j < 80; j++) dp2[i][j] = -1;
  dp2[0][0] = 0;
  
  // Original solve logic
  for (long long i = 0; i < n; i++) {
    for (long long j = 0; j < 80; j++)
      for (long long l = 0; l < 80; l++)
        for (long long e = 0; e < 80; e++) dp[l][j][e] = -1;
    dp[0][0][0] = 0;
    for (long long j = 0; j < m; j++) {
      long long y = matrix[i][j];
      for (long long l = 0; l <= m; l++)
        for (long long e = 0; e < k; e++)
          if (dp[j][l][e] >= 0) {
            dp[j + 1][l][e] = max(dp[j + 1][l][e], dp[j][l][e]);
            dp[j + 1][l + 1][(e + y) % k] =
                max(dp[j + 1][l + 1][(e + y) % k], dp[j][l][e] + y);
          }
    }
    vector<long long> a(k, -1);
    for (long long j = 0; j < k; j++)
      for (long long e = 0; e <= m / 2; e++) {
        a[j] = max(a[j], dp[m][e][j]);
      }
    for (long long j = 0; j < k; j++)
      if (dp2[i][j] >= 0) {
        for (long long l = 0; l < k; l++)
          if (a[l] >= 0) {
            dp2[i + 1][(j + l) % k] =
                max(dp2[i + 1][(j + l) % k], dp2[i][j] + a[l]);
          }
      }
  }
  cout << dp2[n][0] << endl;
}

signed main() {
  mod = 1000000007;
  cin.tie(0);
  ios::sync_with_stdio(false);
  long long n = 1;
  for (long long i = 0; i < n; i++) solve();
  return 0;
}
```

### Explanation of Checker Integration

- **`check_identical_row_values(matrix);`**: This check is placed after reading the matrix input to ensure that no row contains identical values, which would trigger redundant DP table updates.

- **`check_large_column_limit(m);`**: This check is inserted right after reading the dimensions to ensure the column count doesn't approach the upper constraint, which could lead to extensive DP state updates.

- **`check_full_dp_exploration(k, matrix);`**: This check is added after matrix input to detect scenarios where full DP table exploration is required due to lack of variation in remainders, leading to potential performance degradation. 

These checks are designed to help identify and abort execution when specific performance bottlenecks, identified in the analysis, are encountered.

