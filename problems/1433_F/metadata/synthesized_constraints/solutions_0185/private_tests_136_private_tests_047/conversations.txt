system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a matrix a of size n × m consisting of integers.

You can choose no more than \left⌊m/2\right⌋ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by k and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by k.

Note that you can choose zero elements (and the sum of such set is 0).

Input

The first line of the input contains three integers n, m and k (1 ≤ n, m, k ≤ 70) — the number of rows in the matrix, the number of columns in the matrix and the value of k. The next n lines contain m elements each, where the j-th element of the i-th row is a_{i, j} (1 ≤ a_{i, j} ≤ 70).

Output

Print one integer — the maximum sum divisible by k you can obtain.

Examples

Input


3 4 3
1 2 3 4
5 2 2 2
7 1 1 4


Output


24


Input


5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6


Output


56

Note

In the first example, the optimal answer is 2 and 4 in the first row, 5 and 2 in the second row and 7 and 4 in the third row. The total sum is 2 + 4 + 5 + 2 + 7 + 4 = 24.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long MX = 72;
const long long INF = 1e9;
long long cel[MX][MX];
long long precal[MX][MX];
long long memo[MX][MX][MX];
bool used[MX][MX][MX];
long long memo2[MX][MX];
bool used2[MX][MX];
void init() {
  for (long long i = 0; i < MX; i++) {
    for (long long j = 0; j < MX; j++) {
      for (long long k = 0; k < MX; k++) {
        memo[i][j][k] = used[i][j][k] = 0;
      }
    }
  }
}
long long sub(long long a, long long b, long long k) {
  return ((a - b) % k + k) % k;
}
long long add(long long a, long long b, long long k) { return (a + b) % k; }
long long dp(long long pos, long long md, long long cnt, long long k,
             long long m, long long id) {
  if (cnt == 0) {
    if (md == 0) return 0;
    return -INF;
  }
  if (pos == m) {
    if (md == 0) return 0;
    return -INF;
  }
  if (used[pos][md][cnt]) return memo[pos][md][cnt];
  used[pos][md][cnt] = true;
  long long ans = -INF;
  ans = max(ans, dp(pos + 1, sub(md, cel[id][pos], k), cnt - 1, k, m, id) +
                     cel[id][pos]);
  ans = max(ans, dp(pos + 1, md, cnt, k, m, id));
  memo[pos][md][cnt] = ans;
  return ans;
}
long long dp2(long long pos, long long md, long long n, long long k) {
  if (pos == n) {
    if (md == 0) return 0;
    return -INF;
  }
  if (used2[pos][md]) return memo2[pos][md];
  used2[pos][md] = true;
  long long ans = -INF;
  for (long long i = 0; i < k; i++) {
    ans = max(ans,
              dp2(pos + 1, add(md, precal[pos][i], k), n, k) + precal[pos][i]);
    ans = max(ans, dp2(pos + 1, md, n, k));
  }
  memo2[pos][md] = ans;
  return ans;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cout.precision(10);
  cout << fixed;
  long long n, m, k;
  cin >> n >> m >> k;
  for (long long i = 0; i < n; i++) {
    for (long long j = 0; j < m; j++) cin >> cel[i][j];
  }
  for (long long i = 0; i < n; i++) {
    init();
    for (long long j = 0; j < k; j++) {
      precal[i][j] = max(dp(0, j, m / 2, k, m, i), 0ll);
    }
  }
  cout << dp2(0, 0, n, k) << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 2 5
1 1
1 1
1 1
1 1
1 1


(G.2) Fast Input

2 2 5
1 1
1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long MX = 72; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1e9; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long cel[MX][MX]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long precal[MX][MX]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long memo[MX][MX][MX]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
bool used[MX][MX][MX]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long memo2[MX][MX]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
bool used2[MX][MX]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
void init() { /* line 11 slow_hit_count: 5, fast_hit_count: 2 */
  for (long long i = 0; i < MX; i++) { /* line 12 slow_hit_count: 365, fast_hit_count: 146 */
    for (long long j = 0; j < MX; j++) { /* line 13 slow_hit_count: 26280, fast_hit_count: 10512 */
      for (long long k = 0; k < MX; k++) { /* line 14 slow_hit_count: 1892160, fast_hit_count: 756864 */
        memo[i][j][k] = used[i][j][k] = 0; /* line 15 slow_hit_count: 1866240, fast_hit_count: 746496 */
      } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 5, fast_hit_count: 2 */
long long sub(long long a, long long b, long long k) { /* line 20 slow_hit_count: 50, fast_hit_count: 20 */
  return ((a - b) % k + k) % k; /* line 21 slow_hit_count: 50, fast_hit_count: 20 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
long long add(long long a, long long b, long long k) { return (a + b) % k; } /* line 23 slow_hit_count: 75, fast_hit_count: 15 */
long long dp(long long pos, long long md, long long cnt, long long k, /* line 24 slow_hit_count: 125, fast_hit_count: 50 */
             long long m, long long id) { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  if (cnt == 0) { /* line 26 slow_hit_count: 125, fast_hit_count: 50 */
    if (md == 0) return 0; /* line 27 slow_hit_count: 50, fast_hit_count: 20 */
    return -INF; /* line 28 slow_hit_count: 40, fast_hit_count: 16 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  if (pos == m) { /* line 30 slow_hit_count: 75, fast_hit_count: 30 */
    if (md == 0) return 0; /* line 31 slow_hit_count: 25, fast_hit_count: 10 */
    return -INF; /* line 32 slow_hit_count: 20, fast_hit_count: 8 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  if (used[pos][md][cnt]) return memo[pos][md][cnt]; /* line 34 slow_hit_count: 50, fast_hit_count: 20 */
  used[pos][md][cnt] = true; /* line 35 slow_hit_count: 50, fast_hit_count: 20 */
  long long ans = -INF; /* line 36 slow_hit_count: 50, fast_hit_count: 20 */
  ans = max(ans, dp(pos + 1, sub(md, cel[id][pos], k), cnt - 1, k, m, id) + /* line 37 slow_hit_count: 50, fast_hit_count: 20 */
                     cel[id][pos]); /* line 38 slow_hit_count: 50, fast_hit_count: 20 */
  ans = max(ans, dp(pos + 1, md, cnt, k, m, id)); /* line 39 slow_hit_count: 50, fast_hit_count: 20 */
  memo[pos][md][cnt] = ans; /* line 40 slow_hit_count: 50, fast_hit_count: 20 */
  return ans; /* line 41 slow_hit_count: 50, fast_hit_count: 20 */
} /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
long long dp2(long long pos, long long md, long long n, long long k) { /* line 43 slow_hit_count: 151, fast_hit_count: 31 */
  if (pos == n) { /* line 44 slow_hit_count: 151, fast_hit_count: 31 */
    if (md == 0) return 0; /* line 45 slow_hit_count: 50, fast_hit_count: 20 */
    return -INF; /* line 46 slow_hit_count: 40, fast_hit_count: 11 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  if (used2[pos][md]) return memo2[pos][md]; /* line 48 slow_hit_count: 101, fast_hit_count: 11 */
  used2[pos][md] = true; /* line 49 slow_hit_count: 15, fast_hit_count: 3 */
  long long ans = -INF; /* line 50 slow_hit_count: 15, fast_hit_count: 3 */
  for (long long i = 0; i < k; i++) { /* line 51 slow_hit_count: 90, fast_hit_count: 18 */
    ans = max(ans, /* line 52 slow_hit_count: 75, fast_hit_count: 15 */
              dp2(pos + 1, add(md, precal[pos][i], k), n, k) + precal[pos][i]); /* line 53 slow_hit_count: 75, fast_hit_count: 15 */
    ans = max(ans, dp2(pos + 1, md, n, k)); /* line 54 slow_hit_count: 75, fast_hit_count: 15 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  memo2[pos][md] = ans; /* line 56 slow_hit_count: 15, fast_hit_count: 3 */
  return ans; /* line 57 slow_hit_count: 15, fast_hit_count: 3 */
} /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  cout.precision(10); /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  cout << fixed; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, m, k; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m >> k; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) { /* line 67 slow_hit_count: 6, fast_hit_count: 3 */
    for (long long j = 0; j < m; j++) cin >> cel[i][j]; /* line 68 slow_hit_count: 15, fast_hit_count: 6 */
  } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < n; i++) { /* line 70 slow_hit_count: 6, fast_hit_count: 3 */
    init(); /* line 71 slow_hit_count: 5, fast_hit_count: 2 */
    for (long long j = 0; j < k; j++) { /* line 72 slow_hit_count: 30, fast_hit_count: 12 */
      precal[i][j] = max(dp(0, j, m / 2, k, m, i), 0ll); /* line 73 slow_hit_count: 25, fast_hit_count: 10 */
    } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  cout << dp2(0, 0, n, k) << "\n"; /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 78 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

Upon examining the hit count differences between the slow and fast runs, the following observations can be made:

1. **Initialization of the `memo` and `used` arrays in `init()` function:**
   - Line 12-15: These lines are hit a significantly higher number of times during the slow run compared to the fast run. Specifically, the innermost loop (line 14) has an extremely high hit count which suggests a performance bottleneck during initialization.

2. **Dynamic Programming (`dp` function):**
   - The function `dp()` (lines 24 to 41) shows consistently higher hits during the slow run across various lines (like 26, 30, 34, and 37), compared to the fast run. This indicates that the function is called a significantly greater number of times in the slow scenario, signaling a performance bottleneck around recursive calls or memoization checks.

3. **Dynamic Programming (`dp2` function):**
   - Similarly, the `dp2()` function (lines 43 to 57) exhibits high hit counts in the slow input. Key lines like 44 and 48 are invoked more frequently, suggesting potential inefficiencies in memoization and recursion handling.

4. **Loops over `k` in `dp2`:**
   - Line 51: The loop iterating over `k` in the `dp2()` function is hit much more often during the slow run, indicating that this loop might be a part of the slow path, especially considering `k` can be as large as 70.

## Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, the following natural language statements describe conditions under which the program is likely to enter a slow execution path:

1. **Expensive Array Initialization:**
   - **Invariant:** "When initializing large 3D arrays, if the initialization logic is executed repeatedly without optimizations, it can significantly degrade performance."
   - **Condition:** This can particularly occur when `m` is large as the initialization will involve a vast number of iterations for each problem dimension.

2. **Recursive and Memoization Overheads in `dp`:**
   - **Invariant:** "If recursive calculations in `dp()` are invoked with many overlapping subproblems, it can lead to performance degradation due to excessive memoization checks and updates."
   - **Condition:** This scenario is likely when `m` is large, allowing for more combinations of elements to be considered recursively.

3. **Recursive and Memoization Overheads in `dp2`:**
   - **Invariant:** "When the outer dynamic programming function `dp2()` evaluates multiple paths extensively, performance may degrade due to high recursion depth and memoization overhead."
   - **Condition:** This is exacerbated when `n` is large, as each row introduces additional recursive layers.

4. **Inefficient Handling of Combinations in `dp`:**
   - **Invariant:** "Performance may worsen when combinations of elements for each row are processed inefficiently, particularly when `m` is at its maximum limit, due to increased branching in recursion."
   - **Condition:** This is more pronounced when the number of elements (`m`) allows for a large number of potential subsets.

These invariants capture the essence of the performance issues without relying on specific inputs, focusing instead on structural patterns that trigger the slow path. Adjusting the code to limit or optimize these scenarios can help mitigate the performance degradation.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a matrix a of size n × m consisting of integers.

You can choose no more than \left⌊m/2\right⌋ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by k and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by k.

Note that you can choose zero elements (and the sum of such set is 0).

Input

The first line of the input contains three integers n, m and k (1 ≤ n, m, k ≤ 70) — the number of rows in the matrix, the number of columns in the matrix and the value of k. The next n lines contain m elements each, where the j-th element of the i-th row is a_{i, j} (1 ≤ a_{i, j} ≤ 70).

Output

Print one integer — the maximum sum divisible by k you can obtain.

Examples

Input


3 4 3
1 2 3 4
5 2 2 2
7 1 1 4


Output


24


Input


5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6


Output


56

Note

In the first example, the optimal answer is 2 and 4 in the first row, 5 and 2 in the second row and 7 and 4 in the third row. The total sum is 2 + 4 + 5 + 2 + 7 + 4 = 24.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing the Natural Language Invariants in C++

Below are the C++ code snippets for the performance-characterizing invariants identified in Phase 2. These snippets include runtime checks to alert when a potential performance bottleneck condition is encountered.

### Invariant 1: Expensive Array Initialization

This invariant checks if the initialization of large 3D arrays might be causing performance issues.

```cpp
void check_initialization_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Initialization invariant triggered - high initialization counts!" << endl;
        abort();
    }
}
```

### Invariant 2: Recursive and Memoization Overheads in `dp`

This invariant checks if the recursive calculations in `dp()` are invoked with many overlapping subproblems.

```cpp
void check_recursive_memoization_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Recursive memoization invariant triggered - excessive recursion or memo usage!" << endl;
        abort();
    }
}
```

### Invariant 3: Recursive and Memoization Overheads in `dp2`

This invariant checks if the `dp2()` function evaluates multiple paths extensively.

```cpp
void check_dp2_memoization_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dp2 memoization invariant triggered - excessive paths in recursion!" << endl;
        abort();
    }
}
```

### Invariant 4: Inefficient Handling of Combinations in `dp`

This invariant checks if combinations of elements for each row are processed inefficiently.

```cpp
void check_combination_handling_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Combination handling invariant triggered - inefficient processing of element combinations!" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checkers with the Original Program

Now, let's integrate these checkers into the original C++ program at appropriate points to detect when these performance conditions are met.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long MX = 72;
const long long INF = 1e9;
long long cel[MX][MX];
long long precal[MX][MX];
long long memo[MX][MX][MX];
bool used[MX][MX][MX];
long long memo2[MX][MX];
bool used2[MX][MX];

// Checker functions
void check_initialization_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Initialization invariant triggered - high initialization counts!" << endl;
        abort();
    }
}

void check_recursive_memoization_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Recursive memoization invariant triggered - excessive recursion or memo usage!" << endl;
        abort();
    }
}

void check_dp2_memoization_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dp2 memoization invariant triggered - excessive paths in recursion!" << endl;
        abort();
    }
}

void check_combination_handling_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Combination handling invariant triggered - inefficient processing of element combinations!" << endl;
        abort();
    }
}

void init() {
    // Insert a check to detect potential inefficiencies in initializing large arrays
    check_initialization_invariant(MX > 70); // Example threshold
    for (long long i = 0; i < MX; i++) {
        for (long long j = 0; j < MX; j++) {
            for (long long k = 0; k < MX; k++) {
                memo[i][j][k] = used[i][j][k] = 0;
            }
        }
    }
}

long long sub(long long a, long long b, long long k) {
    return ((a - b) % k + k) % k;
}

long long add(long long a, long long b, long long k) {
    return (a + b) % k;
}

long long dp(long long pos, long long md, long long cnt, long long k, long long m, long long id) {
    // Check for excessive recursion or memoization
    check_recursive_memoization_invariant(cnt > m / 2 && k > 35); // Example threshold

    if (cnt == 0) {
        if (md == 0) return 0;
        return -INF;
    }
    if (pos == m) {
        if (md == 0) return 0;
        return -INF;
    }
    if (used[pos][md][cnt]) return memo[pos][md][cnt];
    used[pos][md][cnt] = true;
    long long ans = -INF;
    ans = max(ans, dp(pos + 1, sub(md, cel[id][pos], k), cnt - 1, k, m, id) + cel[id][pos]);
    ans = max(ans, dp(pos + 1, md, cnt, k, m, id));
    memo[pos][md][cnt] = ans;
    return ans;
}

long long dp2(long long pos, long long md, long long n, long long k) {
    // Check for excessive path evaluations in recursion
    check_dp2_memoization_invariant(n > 35 && k > 35); // Example threshold

    if (pos == n) {
        if (md == 0) return 0;
        return -INF;
    }
    if (used2[pos][md]) return memo2[pos][md];
    used2[pos][md] = true;
    long long ans = -INF;
    for (long long i = 0; i < k; i++) {
        ans = max(ans, dp2(pos + 1, add(md, precal[pos][i], k), n, k) + precal[pos][i]);
        ans = max(ans, dp2(pos + 1, md, n, k));
    }
    memo2[pos][md] = ans;
    return ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cout.precision(10);
    cout << fixed;
    long long n, m, k;
    cin >> n >> m >> k;

    // Check for inefficient processing of element combinations
    check_combination_handling_invariant(m > 35); // Example threshold

    for (long long i = 0; i < n; i++) {
        for (long long j = 0; j < m; j++) cin >> cel[i][j];
    }
    for (long long i = 0; i < n; i++) {
        init();
        for (long long j = 0; j < k; j++) {
            precal[i][j] = max(dp(0, j, m / 2, k, m, i), 0ll);
        }
    }
    cout << dp2(0, 0, n, k) << "\n";
    return 0;
}
```

### Explanation of Checker Placement
- **`check_initialization_invariant`**: Placed in the `init()` function to detect excessive initialization activity.
- **`check_recursive_memoization_invariant`**: Placed at the beginning of the `dp()` function to monitor for excessive recursive calls.
- **`check_dp2_memoization_invariant`**: Placed at the beginning of the `dp2()` function to monitor multiple path evaluations.
- **`check_combination_handling_invariant`**: Placed in the `main()` function before processing combinations to catch inefficiencies in handling potential element subsets.

These checks will help identify performance bottlenecks during execution by aborting with a warning if conditions are met.

