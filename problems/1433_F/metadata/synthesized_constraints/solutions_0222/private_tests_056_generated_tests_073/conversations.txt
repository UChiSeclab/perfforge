system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a matrix a of size n × m consisting of integers.

You can choose no more than \left⌊m/2\right⌋ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by k and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by k.

Note that you can choose zero elements (and the sum of such set is 0).

Input

The first line of the input contains three integers n, m and k (1 ≤ n, m, k ≤ 70) — the number of rows in the matrix, the number of columns in the matrix and the value of k. The next n lines contain m elements each, where the j-th element of the i-th row is a_{i, j} (1 ≤ a_{i, j} ≤ 70).

Output

Print one integer — the maximum sum divisible by k you can obtain.

Examples

Input


3 4 3
1 2 3 4
5 2 2 2
7 1 1 4


Output


24


Input


5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6


Output


56

Note

In the first example, the optimal answer is 2 and 4 in the first row, 5 and 2 in the second row and 7 and 4 in the third row. The total sum is 2 + 4 + 5 + 2 + 7 + 4 = 24.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long readint() {
  long long x = 0, s = 1;
  char c;
  while ((c = getchar()), c < '0' || c > '9') {
    if (c == '-') s = -1;
  }
  while (c >= '0' && c <= '9') {
    x = x * 10 + c - '0';
    c = getchar();
  }
  return s * x;
}
void print(long long x) {
  char c[20];
  if (!x) {
    putchar('0');
    return;
  }
  if (x < 0) putchar('-'), x = -x;
  int i = 0;
  while (x > 0) c[++i] = x % 10, x /= 10;
  while (i) putchar(c[i--] + 48);
}
void scan(long long& x) { x = readint(); }
template <typename T, typename... A>
void print(T& x, A&... a) {
  print(x);
  putchar(' ');
  print(a...);
}
template <typename T, typename... A>
void scan(T& x, A&... a) {
  scan(x);
  scan(a...);
}
long long n, m, k;
long long A[77][77];
long long memo1[72][72][72][38];
long long dp1(long long r, long long c, long long d, long long rem) {
  if (rem < 0) return -2000000007;
  if (c == m) return (d ? -2000000007 : 0);
  if (memo1[r][c][d][rem] != -1) return memo1[r][c][d][rem];
  return memo1[r][c][d][rem] =
             max(dp1(r, c + 1, d, rem),
                 dp1(r, c + 1, (d + A[r][c]) % k, rem - 1) + A[r][c]);
}
long long memo2[72][72];
long long dp2(long long r, long long d) {
  if (r == n) return (d ? -2000000007 : 0);
  if (memo2[r][d] != -1) return memo2[r][d];
  long long ret = -2000000007;
  for (long long i = 0; i < k; i++) {
    ret = max(ret, dp2(r + 1, (i + d) % k) + dp1(r, 0, i, m / 2));
  }
  return memo2[r][d] = ret;
}
int32_t main() {
  scan(n, m, k);
  memset(memo1, -1, sizeof memo1);
  memset(memo2, -1, sizeof memo2);
  for (long long i = 0; i < n; i++)
    for (long long j = 0; j < m; j++) scan(A[i][j]);
  cout << dp2(0, 0) << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 1 34
24
6
36
55
42


(G.2) Fast Input

5 1 1
24
6
36
55
42


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long readint() { /* line 3 slow_hit_count: 8, fast_hit_count: 8 */
  long long x = 0, s = 1; /* line 4 slow_hit_count: 8, fast_hit_count: 8 */
  char c; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  while ((c = getchar()), c < '0' || c > '9') { /* line 6 slow_hit_count: 8, fast_hit_count: 8 */
    if (c == '-') s = -1; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  while (c >= '0' && c <= '9') { /* line 9 slow_hit_count: 21, fast_hit_count: 20 */
    x = x * 10 + c - '0'; /* line 10 slow_hit_count: 13, fast_hit_count: 12 */
    c = getchar(); /* line 11 slow_hit_count: 13, fast_hit_count: 12 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  return s * x; /* line 13 slow_hit_count: 8, fast_hit_count: 8 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
void print(long long x) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  char c[20]; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  if (!x) { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    putchar('0'); /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  if (x < 0) putchar('-'), x = -x; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  int i = 0; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  while (x > 0) c[++i] = x % 10, x /= 10; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  while (i) putchar(c[i--] + 48); /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
void scan(long long& x) { x = readint(); } /* line 26 slow_hit_count: 8, fast_hit_count: 8 */
template <typename T, typename... A> /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
void print(T& x, A&... a) { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  print(x); /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  putchar(' '); /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  print(a...); /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename... A> /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
void scan(T& x, A&... a) { /* line 34 slow_hit_count: 4, fast_hit_count: 4 */
  scan(x); /* line 35 slow_hit_count: 4, fast_hit_count: 4 */
  scan(a...); /* line 36 slow_hit_count: 4, fast_hit_count: 4 */
} /* line 37 slow_hit_count: 4, fast_hit_count: 4 */
long long n, m, k; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
long long A[77][77]; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
long long memo1[72][72][72][38]; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
long long dp1(long long r, long long c, long long d, long long rem) { /* line 41 slow_hit_count: 4998, fast_hit_count: 15 */
  if (rem < 0) return -2000000007; /* line 42 slow_hit_count: 4998, fast_hit_count: 15 */
  if (c == m) return (d ? -2000000007 : 0); /* line 43 slow_hit_count: 4828, fast_hit_count: 10 */
  if (memo1[r][c][d][rem] != -1) return memo1[r][c][d][rem]; /* line 44 slow_hit_count: 4658, fast_hit_count: 5 */
  return memo1[r][c][d][rem] = /* line 45 slow_hit_count: 170, fast_hit_count: 5 */
             max(dp1(r, c + 1, d, rem), /* line 46 slow_hit_count: 510, fast_hit_count: 15 */
                 dp1(r, c + 1, (d + A[r][c]) % k, rem - 1) + A[r][c]); /* line 47 slow_hit_count: 170, fast_hit_count: 5 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
long long memo2[72][72]; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
long long dp2(long long r, long long d) { /* line 50 slow_hit_count: 4659, fast_hit_count: 6 */
  if (r == n) return (d ? -2000000007 : 0); /* line 51 slow_hit_count: 4659, fast_hit_count: 6 */
  if (memo2[r][d] != -1) return memo2[r][d]; /* line 52 slow_hit_count: 3503, fast_hit_count: 5 */
  long long ret = -2000000007; /* line 53 slow_hit_count: 137, fast_hit_count: 5 */
  for (long long i = 0; i < k; i++) { /* line 54 slow_hit_count: 4795, fast_hit_count: 10 */
    ret = max(ret, dp2(r + 1, (i + d) % k) + dp1(r, 0, i, m / 2)); /* line 55 slow_hit_count: 4658, fast_hit_count: 5 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  return memo2[r][d] = ret; /* line 57 slow_hit_count: 137, fast_hit_count: 5 */
} /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  scan(n, m, k); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  memset(memo1, -1, sizeof memo1); /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  memset(memo2, -1, sizeof memo2); /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) /* line 63 slow_hit_count: 6, fast_hit_count: 6 */
    for (long long j = 0; j < m; j++) scan(A[i][j]); /* line 64 slow_hit_count: 10, fast_hit_count: 10 */
  cout << dp2(0, 0) << endl; /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 66 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the code and derive performance-characterizing invariants, we need to compare the line-level hit counts for the fast and slow inputs and understand how different parts of the code are contributing to the slowdown.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Hit Counts Analysis:**
   - The function `dp1` has significantly higher hit counts for the slow input, particularly lines 41 to 47. This function is a critical part of the solution, as it explores combinations of elements in a row to maximize the sum divisible by `k`.
   - The function `dp2` also shows high hit counts, notably line 55, which calls `dp1` in a loop over `k` iterations.
   - The line `dp1(r, c + 1, (d + A[r][c]) % k, rem - 1) + A[r][c]` within `dp1` (line 47) suggests that recursive calls and operations for each element choice in the matrix are contributing to the slowdown.

2. **Data Structure and Recursive Interaction:**
   - `dp1` uses a four-dimensional memoization array (`memo1`) to store results, meaning it examines many states for each row, column, d (current sum), and rem (remaining selections).
   - The recursive depth and breadth of exploration in `dp1` and `dp2` are influenced by `n`, `m`, and `k`, with the slow input exhibiting a larger state space to explore due to the specific values of `k`.

### Phase 2: Derive Performance-Characterizing Invariants

Considering the observations from Phase 1, we can derive the following natural language performance invariants:

1. **Invariant on Divisor Size (k):**
   - **Description:** "If the divisor `k` is large relative to the matrix dimensions `n` and `m`, the recursive exploration of element combinations may become extensive, leading to performance degradation."
   - **Implication:** Larger `k` values increase the state space for `dp2` and `dp1`, as the program attempts to find sums divisible by `k`.

2. **Invariant on Matrix Width (m):**
   - **Description:** "If the number of columns `m` is such that choosing half requires extensive exploration, performance may suffer from combinatorial explosion in choices."
   - **Implication:** When `m/2` is large, more combinations of element choices per row need to be considered, increasing the computational load.

3. **Invariant on Element Values:**
   - **Description:** "If the values in the matrix are such that many elements contribute to the same remainder modulo `k`, the recursive calls may be heavily repeated to adjust the sum."
   - **Implication:** High hit counts in `dp1` indicate repeated evaluations due to similar remainder outcomes from matrix elements.

### Conclusion

The primary performance characteristics stem from the interaction of the divisor `k` with the recursive state exploration in `dp2` and `dp1`, exacerbated by the number of columns `m` and the value distribution of matrix elements. By identifying these invariants, we can predict future slow scenarios in similar problem settings.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a matrix a of size n × m consisting of integers.

You can choose no more than \left⌊m/2\right⌋ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by k and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by k.

Note that you can choose zero elements (and the sum of such set is 0).

Input

The first line of the input contains three integers n, m and k (1 ≤ n, m, k ≤ 70) — the number of rows in the matrix, the number of columns in the matrix and the value of k. The next n lines contain m elements each, where the j-th element of the i-th row is a_{i, j} (1 ≤ a_{i, j} ≤ 70).

Output

Print one integer — the maximum sum divisible by k you can obtain.

Examples

Input


3 4 3
1 2 3 4
5 2 2 2
7 1 1 4


Output


24


Input


5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6


Output


56

Note

In the first example, the optimal answer is 2 and 4 in the first row, 5 and 2 in the second row and 7 and 4 in the third row. The total sum is 2 + 4 + 5 + 2 + 7 + 4 = 24.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants previously derived, here are the C++ checker implementations:

1. **Invariant on Divisor Size (k):**
   - **Translation:** Check if `k` is large relative to `n` and `m`. Specifically, we can check if `k` is approaching its maximum possible value of 70, which complicates achieving a sum divisible by `k`.

```cpp
void check_divisor_invariant(long long k) {
    if (k > 60) { 
        cerr << "Warning: Performance bottleneck condition triggered due to large divisor k!" << endl;
        abort();
    }
}
```

2. **Invariant on Matrix Width (m):**
   - **Translation:** Check if the number of combinations to explore is large based on `m`. Since choosing ⌊m/2⌋ elements involves combinatorial choices, a warning is triggered if `m` exceeds a threshold like 60, indicating many combinations.

```cpp
void check_matrix_width_invariant(long long m) {
    if (m > 60) { 
        cerr << "Warning: Performance bottleneck condition triggered due to large matrix width m!" << endl;
        abort();
    }
}
```

3. **Invariant on Element Values:**
   - **Translation:** If matrix elements result in frequent remainder collisions modulo `k`, performance can degrade. We can check if elements are mostly around or greater than half of `k`, which increases possible collisions.

```cpp
void check_element_value_invariant(const long long A[77][77], long long n, long long m, long long k) {
    long long similarCount = 0;
    for (long long i = 0; i < n; ++i) {
        for (long long j = 0; j < m; ++j) {
            if (A[i][j] >= k / 2) similarCount++;
        }
    }
    if (similarCount > (n * m) / 2) { // If more than half the elements are similar in this way
        cerr << "Warning: Performance bottleneck condition triggered due to element value similarity!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Now we need to integrate these checkers into the original program. They should be placed after input is read but before significant computation begins, to ensure they do not introduce overhead within tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long readint() {
    long long x = 0, s = 1;
    char c;
    while ((c = getchar()), c < '0' || c > '9') {
        if (c == '-') s = -1;
    }
    while (c >= '0' && c <= '9') {
        x = x * 10 + c - '0';
        c = getchar();
    }
    return s * x;
}

void print(long long x) {
    char c[20];
    if (!x) {
        putchar('0');
        return;
    }
    if (x < 0) putchar('-'), x = -x;
    int i = 0;
    while (x > 0) c[++i] = x % 10, x /= 10;
    while (i) putchar(c[i--] + 48);
}

void scan(long long& x) { x = readint(); }
template <typename T, typename... A>
void print(T& x, A&... a) {
    print(x);
    putchar(' ');
    print(a...);
}

template <typename T, typename... A>
void scan(T& x, A&... a) {
    scan(x);
    scan(a...);
}

long long n, m, k;
long long A[77][77];
long long memo1[72][72][72][38];
long long dp1(long long r, long long c, long long d, long long rem) {
    if (rem < 0) return -2000000007;
    if (c == m) return (d ? -2000000007 : 0);
    if (memo1[r][c][d][rem] != -1) return memo1[r][c][d][rem];
    return memo1[r][c][d][rem] =
               max(dp1(r, c + 1, d, rem),
                   dp1(r, c + 1, (d + A[r][c]) % k, rem - 1) + A[r][c]);
}

long long memo2[72][72];
long long dp2(long long r, long long d) {
    if (r == n) return (d ? -2000000007 : 0);
    if (memo2[r][d] != -1) return memo2[r][d];
    long long ret = -2000000007;
    for (long long i = 0; i < k; i++) {
        ret = max(ret, dp2(r + 1, (i + d) % k) + dp1(r, 0, i, m / 2));
    }
    return memo2[r][d] = ret;
}

void check_divisor_invariant(long long k) {
    if (k > 60) { 
        cerr << "Warning: Performance bottleneck condition triggered due to large divisor k!" << endl;
        abort();
    }
}

void check_matrix_width_invariant(long long m) {
    if (m > 60) { 
        cerr << "Warning: Performance bottleneck condition triggered due to large matrix width m!" << endl;
        abort();
    }
}

void check_element_value_invariant(const long long A[77][77], long long n, long long m, long long k) {
    long long similarCount = 0;
    for (long long i = 0; i < n; ++i) {
        for (long long j = 0; j < m; ++j) {
            if (A[i][j] >= k / 2) similarCount++;
        }
    }
    if (similarCount > (n * m) / 2) { // If more than half the elements are similar in this way
        cerr << "Warning: Performance bottleneck condition triggered due to element value similarity!" << endl;
        abort();
    }
}

int32_t main() {
    scan(n, m, k);
    memset(memo1, -1, sizeof memo1);
    memset(memo2, -1, sizeof memo2);
    
    for (long long i = 0; i < n; i++) {
        for (long long j = 0; j < m; j++) {
            scan(A[i][j]);
        }
    }

    // Check for potential performance bottlenecks
    check_divisor_invariant(k);
    check_matrix_width_invariant(m);
    check_element_value_invariant(A, n, m, k);

    cout << dp2(0, 0) << endl;
}
```

### Explanation

- **Checkers are called after input is read:** This ensures that checks are performed once without affecting performance within the main computation loops.
- **Abort on triggering:** Each warning message is followed by `abort()` to simulate detection of a performance bottleneck, useful during testing and optimization phases.

