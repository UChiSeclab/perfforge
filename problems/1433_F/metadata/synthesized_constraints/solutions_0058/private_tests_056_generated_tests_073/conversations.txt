system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a matrix a of size n × m consisting of integers.

You can choose no more than \left⌊m/2\right⌋ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by k and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by k.

Note that you can choose zero elements (and the sum of such set is 0).

Input

The first line of the input contains three integers n, m and k (1 ≤ n, m, k ≤ 70) — the number of rows in the matrix, the number of columns in the matrix and the value of k. The next n lines contain m elements each, where the j-th element of the i-th row is a_{i, j} (1 ≤ a_{i, j} ≤ 70).

Output

Print one integer — the maximum sum divisible by k you can obtain.

Examples

Input


3 4 3
1 2 3 4
5 2 2 2
7 1 1 4


Output


24


Input


5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6


Output


56

Note

In the first example, the optimal answer is 2 and 4 in the first row, 5 and 2 in the second row and 7 and 4 in the third row. The total sum is 2 + 4 + 5 + 2 + 7 + 4 = 24.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int N, M, K;
  cin >> N >> M >> K;
  vector<vector<int> > a(N, vector<int>(M));
  for (int i = 0; i < N; ++i)
    for (int j = 0; j < M; ++j) cin >> a[i][j];
  vector<int> dp(K, -1e9);
  dp[0] = 0;
  int P = M / 2;
  for (int i = 0; i < N; ++i) {
    vector<vector<int> > knap(P + 1, vector<int>(K, -1e9));
    knap[0][0] = 0;
    for (int j = 0; j < M; ++j)
      for (int take = P - 1; take >= 0; --take)
        for (int rest = 0; rest < K; ++rest)
          knap[take + 1][(a[i][j] + rest) % K] = max(
              knap[take + 1][(a[i][j] + rest) % K], knap[take][rest] + a[i][j]);
    vector<int> ndp(K, -1e9);
    for (int rest1 = 0; rest1 < K; ++rest1)
      for (int rest2 = 0; rest2 < K; ++rest2)
        for (int take = 0; take <= P; ++take)
          ndp[(rest1 + rest2) % K] =
              max(ndp[(rest1 + rest2) % K], dp[rest1] + knap[take][rest2]);
    swap(dp, ndp);
  }
  cout << dp[0] << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 1 34
24
6
36
55
42


(G.2) Fast Input

5 1 1
24
6
36
55
42


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int N, M, K; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> N >> M >> K; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vector<int> > a(N, vector<int>(M)); /* line 8 slow_hit_count: 3, fast_hit_count: 3 */
  for (int i = 0; i < N; ++i) /* line 9 slow_hit_count: 6, fast_hit_count: 6 */
    for (int j = 0; j < M; ++j) cin >> a[i][j]; /* line 10 slow_hit_count: 10, fast_hit_count: 10 */
  vector<int> dp(K, -1e9); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  dp[0] = 0; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  int P = M / 2; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < N; ++i) { /* line 14 slow_hit_count: 6, fast_hit_count: 6 */
    vector<vector<int> > knap(P + 1, vector<int>(K, -1e9)); /* line 15 slow_hit_count: 15, fast_hit_count: 15 */
    knap[0][0] = 0; /* line 16 slow_hit_count: 5, fast_hit_count: 5 */
    for (int j = 0; j < M; ++j) /* line 17 slow_hit_count: 10, fast_hit_count: 10 */
      for (int take = P - 1; take >= 0; --take) /* line 18 slow_hit_count: 5, fast_hit_count: 5 */
        for (int rest = 0; rest < K; ++rest) /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
          knap[take + 1][(a[i][j] + rest) % K] = max( /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
              knap[take + 1][(a[i][j] + rest) % K], knap[take][rest] + a[i][j]); /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    vector<int> ndp(K, -1e9); /* line 22 slow_hit_count: 10, fast_hit_count: 10 */
    for (int rest1 = 0; rest1 < K; ++rest1) /* line 23 slow_hit_count: 175, fast_hit_count: 10 */
      for (int rest2 = 0; rest2 < K; ++rest2) /* line 24 slow_hit_count: 5950, fast_hit_count: 10 */
        for (int take = 0; take <= P; ++take) /* line 25 slow_hit_count: 11560, fast_hit_count: 10 */
          ndp[(rest1 + rest2) % K] = /* line 26 slow_hit_count: 11560, fast_hit_count: 10 */
              max(ndp[(rest1 + rest2) % K], dp[rest1] + knap[take][rest2]); /* line 27 slow_hit_count: 5780, fast_hit_count: 5 */
    swap(dp, ndp); /* line 28 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  cout << dp[0] << "\n"; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the line-level hit counts, it is evident that lines 23-27 experience significantly more hits during the slow input run. Specifically, the nested loops on lines 23-25 lead to a large number of operations on line 26 (`ndp[(rest1 + rest2) % K] = max(ndp[(rest1 + rest2) % K], dp[rest1] + knap[take][rest2]);`).

Breaking down the nested loop structure:
- `for (int rest1 = 0; rest1 < K; ++rest1)` has `K` iterations.
- `for (int rest2 = 0; rest2 < K; ++rest2)` also has `K` iterations.
- `for (int take = 0; take <= P; ++take)` iterates up to `P + 1` times.

Thus, the time complexity within this segment roughly scales with `O(K^2 * P)` per outer loop iteration over `N`.

### Phase 2: Derive Performance-Characterizing Invariants

Given these observations and the problem constraints (1 ≤ n, m, k ≤ 70), we can derive some performance-influencing invariants as follows:

1. **Invariant: Large `K` with Full Utilization**  
   **Description**: When `K` is large and fully utilized throughout its range in the nested loops, the number of operations becomes quadratic in terms of `K`, leading to a slowdown.  
   **Natural Language**: "If `K` approaches its upper limit and is fully utilized in computations, the program may enter a slow path due to quadratic scaling of operations."

2. **Invariant: High Iteration Count in Nested Loops**  
   **Description**: The combination of a large `K` and maximum per-row selections (`P`) results in an increased number of nested loop iterations, significantly impacting performance.  
   **Natural Language**: "When both the modulus `K` and the half of the column count `P` are large, the nested iteration count increases, potentially causing slowdown."

3. **Invariant: Inefficient Use of Dynamic Programming Arrays**  
   **Description**: If the dynamic programming array sizes correspond closely with the maximum constraint limits, the operations on these arrays multiply, leading to inefficiencies.  
   **Natural Language**: "The dynamic programming arrays scaling close to constraint limits, particularly with large `K`, may induce slower execution due to excessive iterative operations."

These invariants help to abstractly capture the conditions under which this algorithm may slow down, without relying on specific numeric values from the slow input, but adhering to the input constraints and expected patterns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a matrix a of size n × m consisting of integers.

You can choose no more than \left⌊m/2\right⌋ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by k and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by k.

Note that you can choose zero elements (and the sum of such set is 0).

Input

The first line of the input contains three integers n, m and k (1 ≤ n, m, k ≤ 70) — the number of rows in the matrix, the number of columns in the matrix and the value of k. The next n lines contain m elements each, where the j-th element of the i-th row is a_{i, j} (1 ≤ a_{i, j} ≤ 70).

Output

Print one integer — the maximum sum divisible by k you can obtain.

Examples

Input


3 4 3
1 2 3 4
5 2 2 2
7 1 1 4


Output


24


Input


5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6


Output


56

Note

In the first example, the optimal answer is 2 and 4 in the first row, 5 and 2 in the second row and 7 and 4 in the third row. The total sum is 2 + 4 + 5 + 2 + 7 + 4 = 24.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as Checker Code in C++

Let's create C++ code snippets that check the conditions described in the performance-characterizing invariants:

1. **Invariant: Large `K` with Full Utilization**
   - **Checker Code**:
   ```cpp
   void check_large_k_invariant(int K) {
       if (K >= 60) {  // Arbitrarily chosen high threshold for demonstration
           cerr << "Warning: Performance bottleneck condition triggered - large K value!" << endl;
           abort();
       }
   }
   ```

2. **Invariant: High Iteration Count in Nested Loops**
   - **Checker Code**:
   ```cpp
   void check_high_iteration_invariant(int K, int P) {
       if (K > 50 && P > 35) {  // Chosen based on experience with problem constraints
           cerr << "Warning: Performance bottleneck condition triggered - high iteration count in nested loops!" << endl;
           abort();
       }
   }
   ```

3. **Invariant: Inefficient Use of Dynamic Programming Arrays**
   - **Checker Code**:
   ```cpp
   void check_dp_array_invariant(int K) {
       if (K > 60) {  // Focus on large modulus value leading to large dp array operations
           cerr << "Warning: Performance bottleneck condition triggered - inefficient DP array operations!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original C++ Program

Now, let's integrate these checks into the given C++ program at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_large_k_invariant(int K) {
    if (K >= 60) {
        cerr << "Warning: Performance bottleneck condition triggered - large K value!" << endl;
        abort();
    }
}

void check_high_iteration_invariant(int K, int P) {
    if (K > 50 && P > 35) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration count in nested loops!" << endl;
        abort();
    }
}

void check_dp_array_invariant(int K) {
    if (K > 60) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient DP array operations!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int N, M, K;
    cin >> N >> M >> K;

    // Insert checker for large K invariant
    check_large_k_invariant(K);

    vector<vector<int>> a(N, vector<int>(M));
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < M; ++j) cin >> a[i][j];

    vector<int> dp(K, -1e9);
    dp[0] = 0;
    int P = M / 2;

    // Insert checker for high iteration count and inefficient DP array operations
    check_high_iteration_invariant(K, P);
    check_dp_array_invariant(K);

    for (int i = 0; i < N; ++i) {
        vector<vector<int>> knap(P + 1, vector<int>(K, -1e9));
        knap[0][0] = 0;
        for (int j = 0; j < M; ++j)
            for (int take = P - 1; take >= 0; --take)
                for (int rest = 0; rest < K; ++rest)
                    knap[take + 1][(a[i][j] + rest) % K] = max(
                        knap[take + 1][(a[i][j] + rest) % K], knap[take][rest] + a[i][j]);
        
        vector<int> ndp(K, -1e9);
        for (int rest1 = 0; rest1 < K; ++rest1)
            for (int rest2 = 0; rest2 < K; ++rest2)
                for (int take = 0; take <= P; ++take)
                    ndp[(rest1 + rest2) % K] = max(ndp[(rest1 + rest2) % K],
                                                    dp[rest1] + knap[take][rest2]);
        
        swap(dp, ndp);
    }

    cout << dp[0] << "\n";
    return 0;
}
```

### Explanation

- **Where Checkers Are Placed**: The checkers are placed after reading the input values `N`, `M`, and `K` to immediately identify potential performance bottlenecks before heavy processing. This avoids introducing additional overhead inside the critical loops.
- **Threshold Values**: Chosen thresholds are based on the likely problematic scenarios given the constraints (`1 ≤ n, m, k ≤ 70`). These are somewhat heuristic but should alert when nearing the constraint limits, simulating potential bottlenecks.
- **Functionality**: If any of these conditions trigger, a warning is printed, followed by an `abort()` call to halt execution, simulating a critical performance issue detection.

