system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a matrix a of size n × m consisting of integers.

You can choose no more than \left⌊m/2\right⌋ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by k and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by k.

Note that you can choose zero elements (and the sum of such set is 0).

Input

The first line of the input contains three integers n, m and k (1 ≤ n, m, k ≤ 70) — the number of rows in the matrix, the number of columns in the matrix and the value of k. The next n lines contain m elements each, where the j-th element of the i-th row is a_{i, j} (1 ≤ a_{i, j} ≤ 70).

Output

Print one integer — the maximum sum divisible by k you can obtain.

Examples

Input


3 4 3
1 2 3 4
5 2 2 2
7 1 1 4


Output


24


Input


5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6


Output


56

Note

In the first example, the optimal answer is 2 and 4 in the first row, 5 and 2 in the second row and 7 and 4 in the third row. The total sum is 2 + 4 + 5 + 2 + 7 + 4 = 24.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MAXN = 75;
int grid[MAXN][MAXN];
int dp[MAXN][MAXN][MAXN][MAXN];
int dp2[MAXN][MAXN];
int n, m, k;
int find_max(int row, int col, int rem, int mod) {
  if (col >= m || rem == 0) {
    if (mod == 0) return 0;
    return -1;
  } else if (dp[row][col][rem][mod] != -2) {
    return dp[row][col][rem][mod];
  } else {
    int option1 = find_max(row, col + 1, rem, mod);
    int new_mod = (mod + grid[row][col]) % k;
    int option2 = find_max(row, col + 1, rem - 1, new_mod);
    if (option2 != -1) {
      option2 += grid[row][col];
    }
    dp[row][col][rem][mod] = max(option1, option2);
    return dp[row][col][rem][mod];
  }
}
int find_ans(int row = 0, int rem = 0) {
  if (row == n) {
    if (rem == 0) return 0;
    return -1;
  } else if (dp2[row][rem] != -2) {
    return dp2[row][rem];
  } else {
    int max_ans = -1;
    for (int i = 0; i < k; ++i) {
      int new_rem = (i + rem) % k;
      int ans = find_max(row, 0, m / 2, i);
      int next_part = find_ans(row + 1, new_rem);
      if (ans == -1) continue;
      if (next_part == -1) continue;
      ans += next_part;
      max_ans = max(max_ans, ans);
    }
    dp2[row][rem] = max_ans;
    return max_ans;
  }
}
int main() {
  cin.tie(0);
  cout.tie(0);
  ios_base::sync_with_stdio(false);
  cin >> n >> m >> k;
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      for (int l = 0; l < m; ++l) {
        for (int q = 0; q < k; ++q) {
          dp[i][j][l][q] = -2;
        }
      }
    }
  }
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < k; ++j) {
      dp2[i][j] = -2;
    }
  }
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < m; ++j) {
      cin >> grid[i][j];
    }
  }
  cout << find_ans();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 1 34
24
6
36
55
42


(G.2) Fast Input

5 1 1
24
6
36
55
42


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 75; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int grid[MAXN][MAXN]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int dp[MAXN][MAXN][MAXN][MAXN]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int dp2[MAXN][MAXN]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, k; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int find_max(int row, int col, int rem, int mod) { /* line 8 slow_hit_count: 4658, fast_hit_count: 5 */
  if (col >= m || rem == 0) { /* line 9 slow_hit_count: 4658, fast_hit_count: 5 */
    if (mod == 0) return 0; /* line 10 slow_hit_count: 4658, fast_hit_count: 5 */
    return -1; /* line 11 slow_hit_count: 4521, fast_hit_count: 0 */
  } else if (dp[row][col][rem][mod] != -2) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    return dp[row][col][rem][mod]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    int option1 = find_max(row, col + 1, rem, mod); /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    int new_mod = (mod + grid[row][col]) % k; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    int option2 = find_max(row, col + 1, rem - 1, new_mod); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    if (option2 != -1) { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      option2 += grid[row][col]; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    dp[row][col][rem][mod] = max(option1, option2); /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    return dp[row][col][rem][mod]; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
int find_ans(int row = 0, int rem = 0) { /* line 25 slow_hit_count: 4659, fast_hit_count: 6 */
  if (row == n) { /* line 26 slow_hit_count: 4659, fast_hit_count: 6 */
    if (rem == 0) return 0; /* line 27 slow_hit_count: 1156, fast_hit_count: 1 */
    return -1; /* line 28 slow_hit_count: 1122, fast_hit_count: 0 */
  } else if (dp2[row][rem] != -2) { /* line 29 slow_hit_count: 3503, fast_hit_count: 5 */
    return dp2[row][rem]; /* line 30 slow_hit_count: 3366, fast_hit_count: 0 */
  } else { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    int max_ans = -1; /* line 32 slow_hit_count: 137, fast_hit_count: 5 */
    for (int i = 0; i < k; ++i) { /* line 33 slow_hit_count: 4795, fast_hit_count: 10 */
      int new_rem = (i + rem) % k; /* line 34 slow_hit_count: 4658, fast_hit_count: 5 */
      int ans = find_max(row, 0, m / 2, i); /* line 35 slow_hit_count: 4658, fast_hit_count: 5 */
      int next_part = find_ans(row + 1, new_rem); /* line 36 slow_hit_count: 4658, fast_hit_count: 5 */
      if (ans == -1) continue; /* line 37 slow_hit_count: 4790, fast_hit_count: 5 */
      if (next_part == -1) continue; /* line 38 slow_hit_count: 137, fast_hit_count: 5 */
      ans += next_part; /* line 39 slow_hit_count: 5, fast_hit_count: 5 */
      max_ans = max(max_ans, ans); /* line 40 slow_hit_count: 5, fast_hit_count: 5 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    dp2[row][rem] = max_ans; /* line 42 slow_hit_count: 137, fast_hit_count: 5 */
    return max_ans; /* line 43 slow_hit_count: 137, fast_hit_count: 5 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> k; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 51 slow_hit_count: 6, fast_hit_count: 6 */
    for (int j = 0; j < m; ++j) { /* line 52 slow_hit_count: 10, fast_hit_count: 10 */
      for (int l = 0; l < m; ++l) { /* line 53 slow_hit_count: 10, fast_hit_count: 10 */
        for (int q = 0; q < k; ++q) { /* line 54 slow_hit_count: 175, fast_hit_count: 10 */
          dp[i][j][l][q] = -2; /* line 55 slow_hit_count: 170, fast_hit_count: 5 */
        } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; ++i) { /* line 60 slow_hit_count: 6, fast_hit_count: 6 */
    for (int j = 0; j < k; ++j) { /* line 61 slow_hit_count: 175, fast_hit_count: 10 */
      dp2[i][j] = -2; /* line 62 slow_hit_count: 170, fast_hit_count: 5 */
    } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; ++i) { /* line 65 slow_hit_count: 6, fast_hit_count: 6 */
    for (int j = 0; j < m; ++j) { /* line 66 slow_hit_count: 10, fast_hit_count: 10 */
      cin >> grid[i][j]; /* line 67 slow_hit_count: 5, fast_hit_count: 5 */
    } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  cout << find_ans(); /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 72 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - The key difference in hit counts lies within the `find_ans` function, particularly lines that involve iteration and recursive function calls.
   - `find_max` function is invoked substantially more often in the slow input (`slow_hit_count: 4658`) compared to the fast input (`fast_hit_count: 5`).
   - Similarly, the loop on line 33 within `find_ans` is executed far more frequently in the slow input (4,795 times) compared to the fast input (10 times).

2. **Pinpointed Lines or Functions:**
   - **`find_max` function**: This is a recursive function where line 8 is hit 4,658 times in the slow input, indicating a high number of calls.
   - **`find_ans` function**: The recursive call on line 36 and the loop starting on line 33 accumulate significant execution time due to high iteration in the slow input.

3. **Inference on Interaction with Data Structures:**
   - The recursion depth and frequency in `find_max` suggest heavy exploration of potential combinations of elements, which grows exponentially given the constraints, particularly when `m` and `k` are challenging to align.
   - The nested loop structure in `find_ans`, particularly iterating `k` times within its recursive structure, suggests complexity is compounded by both `n` and `k`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariants Describing Slowdown Conditions:**

   - **Invariant 1:** "When `k` approaches its maximum limit and `m` is relatively small, the program may slow down due to excessive recursion depth and branching, especially when many elements must be skipped."
     - **Explanation:** The slow input with `k = 34` (near its max of 70) and `m = 1` leads to a situation where the recursive paths in `find_max` must explore many potential combinations, increasing execution time.

   - **Invariant 2:** "If the number of recursive calls to `find_max` exceeds a threshold due to a high number of elements being considered for each row, performance may degrade significantly."
     - **Explanation:** The recursion explores all combinations of up to `m/2` elements in each row, and when this is executed frequently, it results in a slowdown. The high hit counts in recursive calls suggest excessive computation paths.

   - **Invariant 3:** "The presence of a high value of `k` can cause the `find_ans` function to iterate more times than necessary, creating performance bottlenecks, particularly within recursive contexts."
     - **Explanation:** With `k` values that require substantial modulo operations, the loop in `find_ans` iterates extensively, leading to performance issues when combined with recursive call overhead.

2. **Considerations for Future Inputs:**
   - Ensure that any similar scenario where `k` is large relative to `n` and `m` is considered a potential performance issue.
   - Monitor the recursive nature of calls and loop sizes since these are core contributors to the slowdown.

These invariants should help identify potential performance bottlenecks in future scenarios with similar input structures, even without knowing exact values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a matrix a of size n × m consisting of integers.

You can choose no more than \left⌊m/2\right⌋ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by k and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by k.

Note that you can choose zero elements (and the sum of such set is 0).

Input

The first line of the input contains three integers n, m and k (1 ≤ n, m, k ≤ 70) — the number of rows in the matrix, the number of columns in the matrix and the value of k. The next n lines contain m elements each, where the j-th element of the i-th row is a_{i, j} (1 ≤ a_{i, j} ≤ 70).

Output

Print one integer — the maximum sum divisible by k you can obtain.

Examples

Input


3 4 3
1 2 3 4
5 2 2 2
7 1 1 4


Output


24


Input


5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6


Output


56

Note

In the first example, the optimal answer is 2 and 4 in the first row, 5 and 2 in the second row and 7 and 4 in the third row. The total sum is 2 + 4 + 5 + 2 + 7 + 4 = 24.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants in C++

Here are the checker functions for the performance-characterizing invariants derived earlier:

1. **Invariant 1:** "When `k` approaches its maximum limit and `m` is relatively small, the program may slow down due to excessive recursion depth and branching, especially when many elements must be skipped."

```cpp
void check_k_m_invariant(int k, int m) {
    if (k > 60 && m < 5) {
        cerr << "Warning: Performance bottleneck condition triggered - high k and low m!" << endl;
        abort();
    }
}
```

2. **Invariant 2:** "If the number of recursive calls to `find_max` exceeds a threshold due to a high number of elements being considered for each row, performance may degrade significantly."

```cpp
void check_recursive_calls_invariant(int recursiveCallsCount) {
    if (recursiveCallsCount > 4000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive calls!" << endl;
        abort();
    }
}
```

3. **Invariant 3:** "The presence of a high value of `k` can cause the `find_ans` function to iterate more times than necessary, creating performance bottlenecks, particularly within recursive contexts."

```cpp
void check_iteration_invariant(int k) {
    if (k > 60) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration due to large k!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Functions into the Program

Here's the original program with integrated checks:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 75;
int grid[MAXN][MAXN];
int dp[MAXN][MAXN][MAXN][MAXN];
int dp2[MAXN][MAXN];
int n, m, k;

void check_k_m_invariant(int k, int m) {
    if (k > 60 && m < 5) {
        cerr << "Warning: Performance bottleneck condition triggered - high k and low m!" << endl;
        abort();
    }
}

void check_recursive_calls_invariant(int recursiveCallsCount) {
    if (recursiveCallsCount > 4000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive calls!" << endl;
        abort();
    }
}

void check_iteration_invariant(int k) {
    if (k > 60) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration due to large k!" << endl;
        abort();
    }
}

int find_max(int row, int col, int rem, int mod, int& recursiveCallsCount) {
    recursiveCallsCount++;
    // Check the recursive calls invariant
    check_recursive_calls_invariant(recursiveCallsCount);

    if (col >= m || rem == 0) {
        if (mod == 0) return 0;
        return -1;
    } else if (dp[row][col][rem][mod] != -2) {
        return dp[row][col][rem][mod];
    } else {
        int option1 = find_max(row, col + 1, rem, mod, recursiveCallsCount);
        int new_mod = (mod + grid[row][col]) % k;
        int option2 = find_max(row, col + 1, rem - 1, new_mod, recursiveCallsCount);
        if (option2 != -1) {
            option2 += grid[row][col];
        }
        dp[row][col][rem][mod] = max(option1, option2);
        return dp[row][col][rem][mod];
    }
}

int find_ans(int row = 0, int rem = 0, int recursiveCallsCount = 0) {
    if (row == n) {
        if (rem == 0) return 0;
        return -1;
    } else if (dp2[row][rem] != -2) {
        return dp2[row][rem];
    } else {
        int max_ans = -1;
        for (int i = 0; i < k; ++i) {
            int new_rem = (i + rem) % k;
            int ans = find_max(row, 0, m / 2, i, recursiveCallsCount);
            int next_part = find_ans(row + 1, new_rem, recursiveCallsCount);
            if (ans == -1) continue;
            if (next_part == -1) continue;
            ans += next_part;
            max_ans = max(max_ans, ans);
        }
        dp2[row][rem] = max_ans;
        return max_ans;
    }
}

int main() {
    cin.tie(0);
    cout.tie(0);
    ios_base::sync_with_stdio(false);
    cin >> n >> m >> k;

    // Check k and m invariant after input
    check_k_m_invariant(k, m);
    check_iteration_invariant(k);

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            for (int l = 0; l < m; ++l) {
                for (int q = 0; q < k; ++q) {
                    dp[i][j][l][q] = -2;
                }
            }
        }
    }

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < k; ++j) {
            dp2[i][j] = -2;
        }
    }

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            cin >> grid[i][j];
        }
    }

    cout << find_ans();
    return 0;
}
```

**Integration Notes:**
- The `check_k_m_invariant` and `check_iteration_invariant` functions are called immediately after reading the inputs, to detect potential bottlenecks before any heavy computation begins.
- The `check_recursive_calls_invariant` is integrated within the `find_max` function to monitor the recursion depth and prevent excessive recursive calls based on the threshold.

