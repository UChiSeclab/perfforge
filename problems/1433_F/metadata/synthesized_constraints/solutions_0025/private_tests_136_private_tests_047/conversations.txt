system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a matrix a of size n × m consisting of integers.

You can choose no more than \left⌊m/2\right⌋ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by k and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by k.

Note that you can choose zero elements (and the sum of such set is 0).

Input

The first line of the input contains three integers n, m and k (1 ≤ n, m, k ≤ 70) — the number of rows in the matrix, the number of columns in the matrix and the value of k. The next n lines contain m elements each, where the j-th element of the i-th row is a_{i, j} (1 ≤ a_{i, j} ≤ 70).

Output

Print one integer — the maximum sum divisible by k you can obtain.

Examples

Input


3 4 3
1 2 3 4
5 2 2 2
7 1 1 4


Output


24


Input


5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6


Output


56

Note

In the first example, the optimal answer is 2 and 4 in the first row, 5 and 2 in the second row and 7 and 4 in the third row. The total sum is 2 + 4 + 5 + 2 + 7 + 4 = 24.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MOD = 1e9 + 7;
const long long INF = 5e18;
const double pi = acos(-1.0);
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
int gcd(int a, int b) { return (b == 0 ? a : gcd(b, a % b)); }
int lcm(int a, int b) { return (a * b) / gcd(a, b); }
inline long long mod(long long n, long long m) {
  long long ret = n % m;
  if (ret < 0) ret += m;
  return ret;
}
double rad(double x) { return x * pi / 180.0; }
bool isleft(pair<int, int> a, pair<int, int> b, pair<int, int> c) {
  int det = (b.first - a.first) * (c.second - a.second) -
            (c.first - a.first) * (b.second - a.second);
  if (det >= 0) return true;
  if (det < 0) return false;
  return false;
}
int exp(int a, int b) {
  int result = 1;
  while (b > 0) {
    if (b & 1) result = result * a % MOD;
    b >>= 1;
    a = a * a % MOD;
  }
  return result;
}
vector<int> calc(vector<int> &vet, int n) {
  int v[200000];
  for (int i = 0; i < 200000; i++) {
    v[i] = INF;
  }
  v[0] = 0;
  for (int &i : vet) {
    for (int j = 199999; j - i >= 0; j--) {
      if (v[j - i] != INF) {
        v[j] = min(v[j - i] + 1, v[j]);
      }
    }
  }
  vector<int> ans;
  for (int i = 0; i < 200000; i++) {
    if (v[i] <= n) {
      ans.push_back(i);
    }
  }
  return ans;
}
int memo[75][200200];
int n, m, k;
vector<vector<int>> adj;
int dp(int pos, int sum) {
  if (pos == n) {
    if (sum % k == 0)
      return sum;
    else
      return -INF;
  }
  int &x = memo[pos][sum];
  if (x != -1) return x;
  if (sum % k == 0) {
    x = sum;
  } else {
    x = -INF;
  }
  for (int &i : adj[pos]) {
    x = max(x, dp(pos + 1, sum + i));
  }
  return x;
}
void solve() {
  memset(memo, -1, sizeof(memo));
  cin >> n >> m >> k;
  vector<int> vet(m);
  vector<int> ans;
  adj.clear();
  for (int i = 0; i < n; i++) {
    for (int &j : vet) {
      cin >> j;
    }
    ans = calc(vet, m / 2);
    vector<int> newans;
    map<int, int> mapa;
    for (int &i : ans) {
      mapa[i % k] = max(i, mapa[i % k]);
    }
    for (auto &i : mapa) {
      newans.push_back(i.second);
    }
    ans = newans;
    adj.push_back(ans);
  }
  cout << dp(0, 0) << endl;
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  ;
  int t = 1;
  while (t--) {
    solve();
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 2 5
1 1
1 1
1 1
1 1
1 1


(G.2) Fast Input

2 2 5
1 1
1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 5e18; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const double pi = acos(-1.0); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count()); /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int gcd(int a, int b) { return (b == 0 ? a : gcd(b, a % b)); } /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int lcm(int a, int b) { return (a * b) / gcd(a, b); } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
inline long long mod(long long n, long long m) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  long long ret = n % m; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  if (ret < 0) ret += m; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
double rad(double x) { return x * pi / 180.0; } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
bool isleft(pair<int, int> a, pair<int, int> b, pair<int, int> c) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  int det = (b.first - a.first) * (c.second - a.second) - /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
            (c.first - a.first) * (b.second - a.second); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  if (det >= 0) return true; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  if (det < 0) return false; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int exp(int a, int b) { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  int result = 1; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  while (b > 0) { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    if (b & 1) result = result * a % MOD; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    b >>= 1; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    a = a * a % MOD; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  return result; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> calc(vector<int> &vet, int n) { /* line 31 slow_hit_count: 5, fast_hit_count: 2 */
  int v[200000]; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < 200000; i++) { /* line 33 slow_hit_count: 1000005, fast_hit_count: 400002 */
    v[i] = INF; /* line 34 slow_hit_count: 1000000, fast_hit_count: 400000 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  v[0] = 0; /* line 36 slow_hit_count: 5, fast_hit_count: 2 */
  for (int &i : vet) { /* line 37 slow_hit_count: 15, fast_hit_count: 6 */
    for (int j = 199999; j - i >= 0; j--) { /* line 38 slow_hit_count: 2000000, fast_hit_count: 800000 */
      if (v[j - i] != INF) { /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
        v[j] = min(v[j - i] + 1, v[j]); /* line 40 slow_hit_count: 1999990, fast_hit_count: 799996 */
      } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> ans; /* line 44 slow_hit_count: 5, fast_hit_count: 2 */
  for (int i = 0; i < 200000; i++) { /* line 45 slow_hit_count: 1000005, fast_hit_count: 400002 */
    if (v[i] <= n) { /* line 46 slow_hit_count: 1000000, fast_hit_count: 400000 */
      ans.push_back(i); /* line 47 slow_hit_count: 10, fast_hit_count: 4 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 50 slow_hit_count: 10, fast_hit_count: 4 */
} /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
int memo[75][200200]; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, k; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<int>> adj; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
int dp(int pos, int sum) { /* line 55 slow_hit_count: 31, fast_hit_count: 7 */
  if (pos == n) { /* line 56 slow_hit_count: 31, fast_hit_count: 7 */
    if (sum % k == 0) /* line 57 slow_hit_count: 10, fast_hit_count: 4 */
      return sum; /* line 58 slow_hit_count: 2, fast_hit_count: 1 */
    else /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
      return -INF; /* line 60 slow_hit_count: 8, fast_hit_count: 3 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  int &x = memo[pos][sum]; /* line 62 slow_hit_count: 21, fast_hit_count: 3 */
  if (x != -1) return x; /* line 63 slow_hit_count: 21, fast_hit_count: 3 */
  if (sum % k == 0) { /* line 64 slow_hit_count: 15, fast_hit_count: 3 */
    x = sum; /* line 65 slow_hit_count: 5, fast_hit_count: 2 */
  } else { /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    x = -INF; /* line 67 slow_hit_count: 10, fast_hit_count: 1 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  for (int &i : adj[pos]) { /* line 69 slow_hit_count: 45, fast_hit_count: 9 */
    x = max(x, dp(pos + 1, sum + i)); /* line 70 slow_hit_count: 30, fast_hit_count: 6 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  return x; /* line 72 slow_hit_count: 15, fast_hit_count: 3 */
} /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  memset(memo, -1, sizeof(memo)); /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> k; /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> vet(m); /* line 77 slow_hit_count: 2, fast_hit_count: 2 */
  vector<int> ans; /* line 78 slow_hit_count: 2, fast_hit_count: 2 */
  adj.clear(); /* line 79 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 80 slow_hit_count: 6, fast_hit_count: 3 */
    for (int &j : vet) { /* line 81 slow_hit_count: 15, fast_hit_count: 6 */
      cin >> j; /* line 82 slow_hit_count: 10, fast_hit_count: 4 */
    } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
    ans = calc(vet, m / 2); /* line 84 slow_hit_count: 5, fast_hit_count: 2 */
    vector<int> newans; /* line 85 slow_hit_count: 10, fast_hit_count: 4 */
    map<int, int> mapa; /* line 86 slow_hit_count: 10, fast_hit_count: 4 */
    for (int &i : ans) { /* line 87 slow_hit_count: 15, fast_hit_count: 6 */
      mapa[i % k] = max(i, mapa[i % k]); /* line 88 slow_hit_count: 10, fast_hit_count: 4 */
    } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto &i : mapa) { /* line 90 slow_hit_count: 15, fast_hit_count: 6 */
      newans.push_back(i.second); /* line 91 slow_hit_count: 10, fast_hit_count: 4 */
    } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
    ans = newans; /* line 93 slow_hit_count: 5, fast_hit_count: 2 */
    adj.push_back(ans); /* line 94 slow_hit_count: 5, fast_hit_count: 2 */
  } /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  cout << dp(0, 0) << endl; /* line 96 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 97 slow_hit_count: 1, fast_hit_count: 1 */
signed main() { /* line 98 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
  int t = 1; /* line 103 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 104 slow_hit_count: 2, fast_hit_count: 2 */
    solve(); /* line 105 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 107 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottleneck in the provided C code, we will follow two phases: identifying inefficient code segments and deriving performance-characterizing invariants. Let's proceed with the analysis:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - **Line 33-34 and Line 45-46:** These lines initialize a large array `v` of size 200,000 and iterate through it multiple times. For the slow input, these lines are hit significantly more often than for the fast input. The array initialization and iteration seem to be costly.
   - **Line 38-40:** This nested loop processes elements of `vet` and updates `v`. It runs for each element in `vet` and has a significant number of iterations (up to 200,000 times per element). The high number of hits here suggests a potential performance issue when `m` and `n` are larger.
   - **Line 69-70:** The `dp` function recursively explores combinations of sums, and the high hit count indicates the vast search space being traversed, especially impacting performance when `n` is larger.

2. **Data Structure Interactions:**
   - The `adj` vector and its associated operations in `dp` function contribute to the complexity, as this involves dynamic programming with potentially high recursion depth and branching due to the nature of the problem.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the hit count analysis, we can derive the following performance-characterizing invariants:

1. **Array Initialization and Iteration:**
   - **Invariant:** "If the number of iterations in array initialization and processing (like within `calc`) is large relative to the constraints (e.g., 200,000 operations), it may indicate excessive overhead contributing to slow performance."
   - **Explanation:** Repeatedly initializing and iterating over large arrays (like `v` in `calc`) for each row of the matrix can cause performance issues, especially when combined with high `m` values.

2. **Recursion and Dynamic Programming:**
   - **Invariant:** "When the depth of recursive calls in `dp` is high, and if many branches are explored at each call due to large `n`, it can significantly slow down the computation."
   - **Explanation:** The recursive function `dp` explores multiple paths, and with high branching factors, performance degrades as the search space increases.

3. **Matrix Size and Element Processing:**
   - **Invariant:** "If the matrix dimensions (`n` and `m`) are on the higher end of the constraint (e.g., `n*m` close to 4900), the program may exhibit slow paths due to extensive iteration and backtracking over potential element selections."
   - **Explanation:** Larger matrices lead to more combinations to evaluate for sums divisible by `k`, increasing the workload.

4. **Modulo Operation Complexity:**
   - **Invariant:** "If the values of `k` cause frequent non-trivial modulo operations in dynamic programming checks, it might contribute to overhead."
   - **Explanation:** Modulo operations, especially when combined with large sums and many elements, can slow down the recursive evaluation.

These invariants help abstract the conditions under which the code's performance might degrade, providing a foundation to optimize or refactor the code for better efficiency within the given constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a matrix a of size n × m consisting of integers.

You can choose no more than \left⌊m/2\right⌋ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by k and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by k.

Note that you can choose zero elements (and the sum of such set is 0).

Input

The first line of the input contains three integers n, m and k (1 ≤ n, m, k ≤ 70) — the number of rows in the matrix, the number of columns in the matrix and the value of k. The next n lines contain m elements each, where the j-th element of the i-th row is a_{i, j} (1 ≤ a_{i, j} ≤ 70).

Output

Print one integer — the maximum sum divisible by k you can obtain.

Examples

Input


3 4 3
1 2 3 4
5 2 2 2
7 1 1 4


Output


24


Input


5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6


Output


56

Note

In the first example, the optimal answer is 2 and 4 in the first row, 5 and 2 in the second row and 7 and 4 in the third row. The total sum is 2 + 4 + 5 + 2 + 7 + 4 = 24.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, here are the C++ code snippets to implement runtime checks:

1. **Array Initialization and Iteration:**

```cpp
void check_array_initialization_invariant(int iterations) {
    if (iterations > 200000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive array initialization iterations!" << endl;
        abort();
    }
}
```

2. **Recursion and Dynamic Programming:**

```cpp
void check_recursion_invariant(int depth, int branches) {
    if (depth > 70 && branches > 10) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth and branching!" << endl;
        abort();
    }
}
```

3. **Matrix Size and Element Processing:**

```cpp
void check_matrix_size_invariant(int n, int m) {
    if (n * m > 4900) {
        cerr << "Warning: Performance bottleneck condition triggered - large matrix size!" << endl;
        abort();
    }
}
```

4. **Modulo Operation Complexity:**

```cpp
void check_modulo_operation_invariant(int k) {
    if (k < 2) {
        cerr << "Warning: Performance bottleneck condition triggered - trivial modulo operation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Below is the instrumented C++ code with the runtime checks integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

const int MOD = 1e9 + 7;
const long long INF = 5e18;
const double pi = acos(-1.0);
mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

void check_array_initialization_invariant(int iterations) {
    if (iterations > 200000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive array initialization iterations!" << endl;
        abort();
    }
}

void check_recursion_invariant(int depth, int branches) {
    if (depth > 70 && branches > 10) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth and branching!" << endl;
        abort();
    }
}

void check_matrix_size_invariant(int n, int m) {
    if (n * m > 4900) {
        cerr << "Warning: Performance bottleneck condition triggered - large matrix size!" << endl;
        abort();
    }
}

void check_modulo_operation_invariant(int k) {
    if (k < 2) {
        cerr << "Warning: Performance bottleneck condition triggered - trivial modulo operation!" << endl;
        abort();
    }
}

int gcd(int a, int b) { return (b == 0 ? a : gcd(b, a % b)); }
int lcm(int a, int b) { return (a * b) / gcd(a, b); }
inline long long mod(long long n, long long m) {
    long long ret = n % m;
    if (ret < 0) ret += m;
    return ret;
}

vector<int> calc(vector<int> &vet, int n) {
    int v[200000];
    for (int i = 0; i < 200000; i++) {
        v[i] = INF;
    }
    v[0] = 0;
    for (int &i : vet) {
        for (int j = 199999; j - i >= 0; j--) {
            if (v[j - i] != INF) {
                v[j] = min(v[j - i] + 1, v[j]);
            }
        }
    }
    
    // Check for excessive iterations in the calc function
    int iterations = 200000 * vet.size();
    check_array_initialization_invariant(iterations);

    vector<int> ans;
    for (int i = 0; i < 200000; i++) {
        if (v[i] <= n) {
            ans.push_back(i);
        }
    }
    return ans;
}

int memo[75][200200];
int n, m, k;
vector<vector<int>> adj;

int dp(int pos, int sum) {
    if (pos == n) {
        if (sum % k == 0)
            return sum;
        else
            return -INF;
    }
    int &x = memo[pos][sum];
    if (x != -1) return x;
    if (sum % k == 0) {
        x = sum;
    } else {
        x = -INF;
    }

    // Check for high recursion depth and branching
    check_recursion_invariant(pos, adj[pos].size());

    for (int &i : adj[pos]) {
        x = max(x, dp(pos + 1, sum + i));
    }
    return x;
}

void solve() {
    memset(memo, -1, sizeof(memo));
    cin >> n >> m >> k;

    // Check for potentially large matrix operations
    check_matrix_size_invariant(n, m);

    vector<int> vet(m);
    vector<int> ans;
    adj.clear();
    for (int i = 0; i < n; i++) {
        for (int &j : vet) {
            cin >> j;
        }
        ans = calc(vet, m / 2);
        vector<int> newans;
        map<int, int> mapa;
        for (int &i : ans) {
            mapa[i % k] = max(i, mapa[i % k]);
        }
        for (auto &i : mapa) {
            newans.push_back(i.second);
        }
        ans = newans;
        adj.push_back(ans);
    }

    // Check for trivial modulo operation
    check_modulo_operation_invariant(k);

    cout << dp(0, 0) << endl;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int t = 1;
    while (t--) {
        solve();
    }
}
```

This instrumented code now includes checks to warn and abort execution if it encounters performance bottlenecks as identified by the invariants. Each check is placed strategically to capture conditions that could lead to slow execution while minimizing additional overhead.

