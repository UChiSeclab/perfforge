system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a matrix a of size n × m consisting of integers.

You can choose no more than \left⌊m/2\right⌋ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by k and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by k.

Note that you can choose zero elements (and the sum of such set is 0).

Input

The first line of the input contains three integers n, m and k (1 ≤ n, m, k ≤ 70) — the number of rows in the matrix, the number of columns in the matrix and the value of k. The next n lines contain m elements each, where the j-th element of the i-th row is a_{i, j} (1 ≤ a_{i, j} ≤ 70).

Output

Print one integer — the maximum sum divisible by k you can obtain.

Examples

Input


3 4 3
1 2 3 4
5 2 2 2
7 1 1 4


Output


24


Input


5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6


Output


56

Note

In the first example, the optimal answer is 2 and 4 in the first row, 5 and 2 in the second row and 7 and 4 in the third row. The total sum is 2 + 4 + 5 + 2 + 7 + 4 = 24.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
using ll = int64_t;
using ull = uint64_t;
using ld = long double;
using uint = uint32_t;
const double EPS = 1e-8;
const int INF = 0x3F3F3F3F;
const ll LINF = 4611686018427387903;
const int MOD = 1e9 + 7;
signed main() {
  ios::sync_with_stdio(0);
  cin.tie(NULL);
  const int N = 70 * 35 * 70 + 25;
  bitset<N> dp[2];
  dp[1] = 1;
  int n, m, k, prv = 0, cur = 1;
  cin >> n >> m >> k;
  vector<bitset<70 * 35 + 25>> owo(m / 2 + 1);
  for (int i = 0; i < n; i++) {
    swap(prv, cur);
    for (int i = 0; i <= m / 2; i++) owo[i].reset();
    owo[0][0] = 1;
    for (int j = 1, x; j <= m; j++) {
      cin >> x;
      for (int k = m / 2; k; k--) owo[k] = (owo[k - 1] << x) | owo[k];
    }
    for (int i = 1; i <= m / 2; i++) owo[i] = owo[i] | owo[i - 1];
    for (int j = 0; j <= 70 * 35 + 5; j++)
      if (owo[m / 2][j]) dp[cur] = dp[cur] | (dp[prv] << j);
  }
  int ans = 0;
  for (int i = k; i < N; i += k)
    if (dp[cur][i]) ans = i;
  cout << ans << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 1 1
24
6
36
55
42


(G.2) Fast Input

5 1 34
24
6
36
55
42


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize("Ofast") /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC optimize("unroll-loops") /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native") /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
using ll = int64_t; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
using ull = uint64_t; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
using ld = long double; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
using uint = uint32_t; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
const double EPS = 1e-8; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 0x3F3F3F3F; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
const ll LINF = 4611686018427387903; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 1e9 + 7; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  const int N = 70 * 35 * 70 + 25; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  bitset<N> dp[2]; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  dp[1] = 1; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, k, prv = 0, cur = 1; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> k; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  vector<bitset<70 * 35 + 25>> owo(m / 2 + 1); /* line 22 slow_hit_count: 3, fast_hit_count: 3 */
  for (int i = 0; i < n; i++) { /* line 23 slow_hit_count: 6, fast_hit_count: 6 */
    swap(prv, cur); /* line 24 slow_hit_count: 5, fast_hit_count: 5 */
    for (int i = 0; i <= m / 2; i++) owo[i].reset(); /* line 25 slow_hit_count: 10, fast_hit_count: 10 */
    owo[0][0] = 1; /* line 26 slow_hit_count: 5, fast_hit_count: 5 */
    for (int j = 1, x; j <= m; j++) { /* line 27 slow_hit_count: 10, fast_hit_count: 10 */
      cin >> x; /* line 28 slow_hit_count: 5, fast_hit_count: 5 */
      for (int k = m / 2; k; k--) owo[k] = (owo[k - 1] << x) | owo[k]; /* line 29 slow_hit_count: 5, fast_hit_count: 5 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 1; i <= m / 2; i++) owo[i] = owo[i] | owo[i - 1]; /* line 31 slow_hit_count: 5, fast_hit_count: 5 */
    for (int j = 0; j <= 70 * 35 + 5; j++) /* line 32 slow_hit_count: 12285, fast_hit_count: 12285 */
      if (owo[m / 2][j]) dp[cur] = dp[cur] | (dp[prv] << j); /* line 33 slow_hit_count: 12280, fast_hit_count: 12280 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = k; i < N; i += k) /* line 36 slow_hit_count: 171525, fast_hit_count: 5045 */
    if (dp[cur][i]) ans = i; /* line 37 slow_hit_count: 171524, fast_hit_count: 5044 */
  cout << ans << '\n'; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the slowdown in the given C program, we need to focus on the differences in line-level hit counts between the fast and slow inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

- **Line 36 Loop (`for (int i = k; i < N; i += k)`)**: This loop is executed a significantly higher number of times with the slow input compared to the fast input (171,525 vs. 5,045). This indicates that the loop's performance is sensitive to the value of `k` and the size of the dynamic bitset `dp`.
  
- **Line 37 (`if (dp[cur][i])`)**: This check inside the loop is also hit more often with the slow input. It suggests that the program is performing many redundant or excessive checks when `k` is small.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can propose the following performance invariants in natural language:

1. **Invariant Related to Small `k` Values**:
   - **Description**: "The performance of the program degrades when `k` is small, leading to a large number of checks in a loop that scales with the maximum potential sum. This is because the loop iterates over a larger range in small steps."
   - **Condition**: When `k` is much smaller than `N`, particularly when `k` approaches 1, the loop iterating over the range of possible sums (`i += k`) becomes inefficient.

2. **Invariant Related to the Balance between `n`, `m`, and `k`**:
   - **Description**: "If the product of possible maximum elements chosen (i.e., `n * ⌊m/2⌋`) is large relative to `k`, the probability of assembling multiple sums divisible by `k` increases, leading to more iterations."
   - **Condition**: When the sum of elements considered (`n * ⌊m/2⌋`) is large compared to `k`, there are increased combinations to evaluate, slowing down the program.

By embedding such checks or considerations at strategic points, such as after input parsing or before entering critical loops, you can create more efficient branching logic or provide the fuzzer with conditions to avoid states that lead to excessive computations.

### Implementation Suggestion

While the code itself should not introduce performance-degrading checks inside the loop, it can benefit from logging or pre-execution checks based on these invariants. For example:

```cpp
void check_invariant_conditions(int n, int m, int k) {
    if (k < 2) {
        cerr << "Warning: Inefficient execution path due to small k value." << endl;
    }
    if (n * (m / 2) > 1000) { // Arbitrary threshold; adjust based on empirical testing
        cerr << "Warning: Large product of n and m/2 relative to k." << endl;
    }
}

// Usage before main computation
check_invariant_conditions(n, m, k);
```

This way, potential slow scenarios can be identified and debugged more easily during development and testing phases.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a matrix a of size n × m consisting of integers.

You can choose no more than \left⌊m/2\right⌋ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by k and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by k.

Note that you can choose zero elements (and the sum of such set is 0).

Input

The first line of the input contains three integers n, m and k (1 ≤ n, m, k ≤ 70) — the number of rows in the matrix, the number of columns in the matrix and the value of k. The next n lines contain m elements each, where the j-th element of the i-th row is a_{i, j} (1 ≤ a_{i, j} ≤ 70).

Output

Print one integer — the maximum sum divisible by k you can obtain.

Examples

Input


3 4 3
1 2 3 4
5 2 2 2
7 1 1 4


Output


24


Input


5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6


Output


56

Note

In the first example, the optimal answer is 2 and 4 in the first row, 5 and 2 in the second row and 7 and 4 in the third row. The total sum is 2 + 4 + 5 + 2 + 7 + 4 = 24.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's create checker functions based on the performance-characterizing invariants derived previously:

1. **Invariant Related to Small `k` Values**:
   - **Checker**: This invariant checks if `k` is small relative to the possible maximum sum size `N`.
   ```cpp
   void check_small_k_invariant(int k, int N) {
       if (k < 2) {
           cerr << "Warning: Performance bottleneck triggered - small k value leading to inefficient looping." << endl;
           abort();
       }
   }
   ```

2. **Invariant Related to the Balance between `n`, `m`, and `k`**:
   - **Checker**: This invariant checks if the product of `n` and the maximum number of elements selected per row is large relative to `k`.
   ```cpp
   void check_large_product_invariant(int n, int m, int k) {
       if (n * (m / 2) > 1000) { // The threshold is arbitrary and should be adjusted based on empirical testing
           cerr << "Warning: Potential performance issue due to large product of n and m/2 relative to k." << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original C++ Program

Now, I will integrate these invariants into the provided C++ code. The checks will be placed just after input is read, ensuring they do not interfere with the main computation loop:

```cpp
#include <bits/stdc++.h>
using namespace std;
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
using ll = int64_t;
using ull = uint64_t;
using ld = long double;
using uint = uint32_t;
const double EPS = 1e-8;
const int INF = 0x3F3F3F3F;
const ll LINF = 4611686018427387903;
const int MOD = 1e9 + 7;

// Checker Functions

// Check for small k values leading to inefficient looping
void check_small_k_invariant(int k, int N) {
    if (k < 2) {
        cerr << "Warning: Performance bottleneck triggered - small k value leading to inefficient looping." << endl;
        abort();
    }
}

// Check for large product of n and m/2 relative to k
void check_large_product_invariant(int n, int m, int k) {
    if (n * (m / 2) > 1000) { // The threshold is arbitrary and should be adjusted based on empirical testing
        cerr << "Warning: Potential performance issue due to large product of n and m/2 relative to k." << endl;
        abort();
    }
}

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(NULL);
    const int N = 70 * 35 * 70 + 25;
    bitset<N> dp[2];
    dp[1] = 1;
    int n, m, k, prv = 0, cur = 1;
    cin >> n >> m >> k;

    // Insert checks based on inferred invariants
    check_small_k_invariant(k, N);   // Check for small k values
    check_large_product_invariant(n, m, k);  // Check for large product of n and m/2

    vector<bitset<70 * 35 + 25>> owo(m / 2 + 1);
    for (int i = 0; i < n; i++) {
        swap(prv, cur);
        for (int i = 0; i <= m / 2; i++) owo[i].reset();
        owo[0][0] = 1;
        for (int j = 1, x; j <= m; j++) {
            cin >> x;
            for (int k = m / 2; k; k--) owo[k] = (owo[k - 1] << x) | owo[k];
        }
        for (int i = 1; i <= m / 2; i++) owo[i] = owo[i] | owo[i - 1];
        for (int j = 0; j <= 70 * 35 + 5; j++)
            if (owo[m / 2][j]) dp[cur] = dp[cur] | (dp[prv] << j);
    }
    int ans = 0;
    for (int i = k; i < N; i += k)
        if (dp[cur][i]) ans = i;
    cout << ans << '\n';
    return 0;
}
```

### Explanation:

- **`check_small_k_invariant`**: This function checks if `k` is too small, which would lead to an excessive number of iterations in the final loop.
- **`check_large_product_invariant`**: This function checks if the product of `n` and `m/2` is large relative to `k`, which could lead to inefficiencies in handling combinations.
- **Placement**: Both checks are placed immediately after reading the inputs to ensure they capture potential slow cases before any heavy computation begins.

