system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are given a matrix a of size n × m consisting of integers.

You can choose no more than \left⌊m/2\right⌋ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by k and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by k.

Note that you can choose zero elements (and the sum of such set is 0).

Input

The first line of the input contains three integers n, m and k (1 ≤ n, m, k ≤ 70) — the number of rows in the matrix, the number of columns in the matrix and the value of k. The next n lines contain m elements each, where the j-th element of the i-th row is a_{i, j} (1 ≤ a_{i, j} ≤ 70).

Output

Print one integer — the maximum sum divisible by k you can obtain.

Examples

Input


3 4 3
1 2 3 4
5 2 2 2
7 1 1 4


Output


24


Input


5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6


Output


56

Note

In the first example, the optimal answer is 2 and 4 in the first row, 5 and 2 in the second row and 7 and 4 in the third row. The total sum is 2 + 4 + 5 + 2 + 7 + 4 = 24.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int inf = 2e7;
const int N = 72;
int n, m, k, a[N][N], rowDP[N][N], dp[N][N][N], allDP[N][N], ans;
void countRowDP(int row) {
  for (int i = 0; i < N; i++)
    for (int j = 0; j < N; j++)
      for (int t = 0; t < N; t++) dp[i][j][t] = -inf;
  for (int i = 0; i < N; i++) dp[i][0][0] = 0;
  for (int i = 1; i <= m; i++)
    for (int j = 1; j <= min(i, m / 2); j++)
      for (int r = 0; r < k; r++) {
        dp[i][j][(r + a[row][i]) % k] =
            max(dp[i][j][(r + a[row][i]) % k], dp[i - 1][j - 1][r] + a[row][i]);
        dp[i][j][r] = max(dp[i][j][r], dp[i - 1][j][r]);
      }
  for (int r = 0; r < k; r++) {
    for (int i = 1; i <= m; i++)
      for (int j = 1; j <= min(i, m / 2); j++)
        rowDP[row][r] = max(rowDP[row][r], dp[i][j][r]);
  }
}
int main() {
  cin >> n >> m >> k;
  for (int i = 1; i <= n; i++)
    for (int j = 1; j <= m; j++) cin >> a[i][j];
  for (int i = 0; i < N; i++)
    for (int j = 0; j < N; j++) rowDP[i][j] = -inf;
  for (int i = 1; i <= n; i++) countRowDP(i);
  for (int i = 0; i < N; i++)
    for (int j = 0; j < N; j++) allDP[i][j] = -inf;
  allDP[0][0] = 0;
  for (int i = 1; i <= n; i++)
    for (int r = 0; r < k; r++)
      for (int t = 0; t < k; t++) {
        allDP[i][(r + t) % k] =
            max(allDP[i][(r + t) % k], allDP[i - 1][r] + rowDP[i][t]);
        allDP[i][r] = max(allDP[i][r], allDP[i - 1][r]);
      }
  cout << max(0, allDP[n][0]);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 2 5
1 1
1 1
1 1
1 1
1 1


(G.2) Fast Input

2 2 5
1 1
1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 2e7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 72; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, k, a[N][N], rowDP[N][N], dp[N][N][N], allDP[N][N], ans; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void countRowDP(int row) { /* line 6 slow_hit_count: 5, fast_hit_count: 2 */
  for (int i = 0; i < N; i++) /* line 7 slow_hit_count: 365, fast_hit_count: 146 */
    for (int j = 0; j < N; j++) /* line 8 slow_hit_count: 26280, fast_hit_count: 10512 */
      for (int t = 0; t < N; t++) dp[i][j][t] = -inf; /* line 9 slow_hit_count: 1892160, fast_hit_count: 756864 */
  for (int i = 0; i < N; i++) dp[i][0][0] = 0; /* line 10 slow_hit_count: 365, fast_hit_count: 146 */
  for (int i = 1; i <= m; i++) /* line 11 slow_hit_count: 15, fast_hit_count: 6 */
    for (int j = 1; j <= min(i, m / 2); j++) /* line 12 slow_hit_count: 20, fast_hit_count: 8 */
      for (int r = 0; r < k; r++) { /* line 13 slow_hit_count: 60, fast_hit_count: 24 */
        dp[i][j][(r + a[row][i]) % k] = /* line 14 slow_hit_count: 50, fast_hit_count: 20 */
            max(dp[i][j][(r + a[row][i]) % k], dp[i - 1][j - 1][r] + a[row][i]); /* line 15 slow_hit_count: 50, fast_hit_count: 20 */
        dp[i][j][r] = max(dp[i][j][r], dp[i - 1][j][r]); /* line 16 slow_hit_count: 50, fast_hit_count: 20 */
      } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  for (int r = 0; r < k; r++) { /* line 18 slow_hit_count: 30, fast_hit_count: 12 */
    for (int i = 1; i <= m; i++) /* line 19 slow_hit_count: 75, fast_hit_count: 30 */
      for (int j = 1; j <= min(i, m / 2); j++) /* line 20 slow_hit_count: 100, fast_hit_count: 40 */
        rowDP[row][r] = max(rowDP[row][r], dp[i][j][r]); /* line 21 slow_hit_count: 50, fast_hit_count: 20 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 23 slow_hit_count: 5, fast_hit_count: 2 */
int main() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> k; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) /* line 26 slow_hit_count: 6, fast_hit_count: 3 */
    for (int j = 1; j <= m; j++) cin >> a[i][j]; /* line 27 slow_hit_count: 15, fast_hit_count: 6 */
  for (int i = 0; i < N; i++) /* line 28 slow_hit_count: 73, fast_hit_count: 73 */
    for (int j = 0; j < N; j++) rowDP[i][j] = -inf; /* line 29 slow_hit_count: 5256, fast_hit_count: 5256 */
  for (int i = 1; i <= n; i++) countRowDP(i); /* line 30 slow_hit_count: 6, fast_hit_count: 3 */
  for (int i = 0; i < N; i++) /* line 31 slow_hit_count: 73, fast_hit_count: 73 */
    for (int j = 0; j < N; j++) allDP[i][j] = -inf; /* line 32 slow_hit_count: 5256, fast_hit_count: 5256 */
  allDP[0][0] = 0; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) /* line 34 slow_hit_count: 6, fast_hit_count: 3 */
    for (int r = 0; r < k; r++) /* line 35 slow_hit_count: 30, fast_hit_count: 12 */
      for (int t = 0; t < k; t++) { /* line 36 slow_hit_count: 150, fast_hit_count: 60 */
        allDP[i][(r + t) % k] = /* line 37 slow_hit_count: 125, fast_hit_count: 50 */
            max(allDP[i][(r + t) % k], allDP[i - 1][r] + rowDP[i][t]); /* line 38 slow_hit_count: 125, fast_hit_count: 50 */
        allDP[i][r] = max(allDP[i][r], allDP[i - 1][r]); /* line 39 slow_hit_count: 125, fast_hit_count: 50 */
      } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  cout << max(0, allDP[n][0]); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 42 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Based on the provided problem statement, C program, and hit count information, I'll perform the analysis to generate performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - **Line 9 (`dp[i][j][t] = -inf;`)**: This line is hit significantly more times in the slow input (1,892,160 times) compared to the fast input (756,864 times).
   - **Lines 8 and 29 (`for (int j = 0; j < N; j++)`)**: Also show a large number of hits, indicating loops over a large array.

2. **Potential Bottlenecks:**
   - The function `countRowDP` is expensive, especially when initializing and updating the `dp` array, which is performed repeatedly for each row.
   - The nested loops involving the `dp` array (lines 11-16 and 18-21) are likely contributing to the slowdown, especially as they depend on the size of `m` and `k`.

3. **Data Structure Interaction:**
   - The 3D array `dp` is repeatedly initialized and updated, indicating a potential inefficiency if `m`, `k`, or the number of choices (`m / 2`) are large or lead to extensive iterations.

### Phase 2: Derive Performance-Characterizing Invariants
Based on the above analysis, here are the performance-characterizing invariants for the program:

1. **Invariant on Matrix Dimensions:**
   - **Natural Language Description:** "If the number of columns `m` is large, leading to extensive iterations over `dp` array, especially when `m` approaches its upper limit and coupled with a moderate or high `k`, the program may become slow due to the excessive loop iterations."
   - **Reasoning:** Large `m` increases the number of elements processed in each row, impacting the nested loops inside `countRowDP`.

2. **Invariant on Divisibility Factor `k`:**
   - **Natural Language Description:** "If the value of `k` is large, the number of remainder calculations and updates within `dp` array can increase significantly, leading to performance degradation as each row involves more complex state management."
   - **Reasoning:** A higher `k` leads to more states being maintained and updated in `dp`, which exacerbates the computational cost.

3. **Invariant on Choice Constraints:**
   - **Natural Language Description:** "When constraints allow a significant number of elements to be chosen within a row (e.g., half of `m` is large), the complexity of calculating optimal sums within `countRowDP` increases, potentially slowing down execution."
   - **Reasoning:** As `m/2` increases, the potential combinations of elements to consider for sums divisible by `k` grows, increasing the computation time within nested loops.

These invariants help identify input scenarios that could cause the program to slow down, while abstracting away from specific numbers to focus on broader patterns related to the problem's constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are given a matrix a of size n × m consisting of integers.

You can choose no more than \left⌊m/2\right⌋ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by k and this sum is the maximum.

In other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by k.

Note that you can choose zero elements (and the sum of such set is 0).

Input

The first line of the input contains three integers n, m and k (1 ≤ n, m, k ≤ 70) — the number of rows in the matrix, the number of columns in the matrix and the value of k. The next n lines contain m elements each, where the j-th element of the i-th row is a_{i, j} (1 ≤ a_{i, j} ≤ 70).

Output

Print one integer — the maximum sum divisible by k you can obtain.

Examples

Input


3 4 3
1 2 3 4
5 2 2 2
7 1 1 4


Output


24


Input


5 5 4
1 2 4 2 1
3 5 1 2 4
1 5 7 1 2
3 8 7 1 2
8 4 7 1 6


Output


56

Note

In the first example, the optimal answer is 2 and 4 in the first row, 5 and 2 in the second row and 7 and 4 in the third row. The total sum is 2 + 4 + 5 + 2 + 7 + 4 = 24.

Solution (C++ code):
{solution}


assistant: Let's begin Phase 3 by translating the previously inferred natural language performance-characterizing invariants into C++ checker code.

### Phase 3: Implementing Invariants as C++ Runtime Checks

1. **Invariant on Matrix Dimensions `m`:**
   - **Condition:** If `m` (number of columns) is large, leading to extensive iterations over the `dp` array, particularly as `m` approaches its upper limit.
   - **Checker Code:**

   ```cpp
   void check_column_invariant(int m) {
       if (m > 60) { // Threshold chosen to indicate a large size close to the upper limit
           cerr << "Warning: Performance bottleneck triggered by large number of columns (m)" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Divisibility Factor `k`:**
   - **Condition:** If `k` is large, the number of remainder calculations and state updates within `dp` increase.
   - **Checker Code:**

   ```cpp
   void check_divisibility_invariant(int k) {
       if (k > 50) { // Threshold chosen to indicate significant complexity
           cerr << "Warning: Performance bottleneck triggered by large value of k" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Choice Constraints:**
   - **Condition:** When `m/2` allows a significant number of elements to be chosen in each row.
   - **Checker Code:**

   ```cpp
   void check_choice_invariant(int m) {
       if (m / 2 > 30) { // Threshold related to choosing many elements
           cerr << "Warning: Performance bottleneck triggered by large choice constraint (m/2)" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checkers into the Original Program

Now, let's integrate these checks into the provided C++ code, ensuring that they do not add overhead to tight loops and are placed strategically.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int inf = 2e7;
const int N = 72;

int n, m, k, a[N][N], rowDP[N][N], dp[N][N][N], allDP[N][N], ans;

// Function to check column invariant
void check_column_invariant(int m) {
    if (m > 60) { // Threshold chosen to indicate a large size close to the upper limit
        cerr << "Warning: Performance bottleneck triggered by large number of columns (m)" << endl;
        abort();
    }
}

// Function to check divisibility invariant
void check_divisibility_invariant(int k) {
    if (k > 50) { // Threshold chosen to indicate significant complexity
        cerr << "Warning: Performance bottleneck triggered by large value of k" << endl;
        abort();
    }
}

// Function to check choice invariant
void check_choice_invariant(int m) {
    if (m / 2 > 30) { // Threshold related to choosing many elements
        cerr << "Warning: Performance bottleneck triggered by large choice constraint (m/2)" << endl;
        abort();
    }
}

void countRowDP(int row) {
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            for (int t = 0; t < N; t++) dp[i][j][t] = -inf;
    for (int i = 0; i < N; i++) dp[i][0][0] = 0;
    for (int i = 1; i <= m; i++)
        for (int j = 1; j <= min(i, m / 2); j++)
            for (int r = 0; r < k; r++) {
                dp[i][j][(r + a[row][i]) % k] =
                    max(dp[i][j][(r + a[row][i]) % k], dp[i - 1][j - 1][r] + a[row][i]);
                dp[i][j][r] = max(dp[i][j][r], dp[i - 1][j][r]);
            }
    for (int r = 0; r < k; r++) {
        for (int i = 1; i <= m; i++)
            for (int j = 1; j <= min(i, m / 2); j++)
                rowDP[row][r] = max(rowDP[row][r], dp[i][j][r]);
    }
}

int main() {
    cin >> n >> m >> k;

    // Insert performance checkers after reading input
    check_column_invariant(m);        // Check for column-related performance issues
    check_divisibility_invariant(k);  // Check for divisibility-related performance issues
    check_choice_invariant(m);        // Check for choice constraint-related performance issues

    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= m; j++) cin >> a[i][j];

    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++) rowDP[i][j] = -inf;

    for (int i = 1; i <= n; i++) countRowDP(i);

    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++) allDP[i][j] = -inf;

    allDP[0][0] = 0;
    for (int i = 1; i <= n; i++)
        for (int r = 0; r < k; r++)
            for (int t = 0; t < k; t++) {
                allDP[i][(r + t) % k] =
                    max(allDP[i][(r + t) % k], allDP[i - 1][r] + rowDP[i][t]);
                allDP[i][r] = max(allDP[i][r], allDP[i - 1][r]);
            }
    cout << max(0, allDP[n][0]);
}
```

### Explanation

- **Check Positioning:** The checks are placed after reading the input, ensuring that they do not interfere with the critical computational loops or affect performance.
- **Threshold Values:** The threshold values chosen (e.g., `m > 60`, `k > 50`) are based on patterns seen in the problem constraints to indicate potentially problematic scenarios.
- **Abort on Detection:** Each check outputs a warning and aborts the program when the condition is met, providing a clear signal of performance issues during runtime.

