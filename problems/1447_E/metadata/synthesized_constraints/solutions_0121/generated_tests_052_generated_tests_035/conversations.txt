system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

For a given sequence of distinct non-negative integers (b_1, b_2, ..., b_k) we determine if it is good in the following way:

  * Consider a graph on k nodes, with numbers from b_1 to b_k written on them.
  * For every i from 1 to k: find such j (1 ≤ j ≤ k, j≠ i), for which (b_i ⊕ b_j) is the smallest among all such j, where ⊕ denotes the operation of bitwise XOR (<https://en.wikipedia.org/wiki/Bitwise_operation#XOR>). Next, draw an undirected edge between vertices with numbers b_i and b_j in this graph.
  * We say that the sequence is good if and only if the resulting graph forms a tree (is connected and doesn't have any simple cycles). 



It is possible that for some numbers b_i and b_j, you will try to add the edge between them twice. Nevertheless, you will add this edge only once.

You can find an example below (the picture corresponding to the first test case). 

Sequence (0, 1, 5, 2, 6) is not good as we cannot reach 1 from 5.

However, sequence (0, 1, 5, 2) is good. 

<image>

You are given a sequence (a_1, a_2, ..., a_n) of distinct non-negative integers. You would like to remove some of the elements (possibly none) to make the remaining sequence good. What is the minimum possible number of removals required to achieve this goal?

It can be shown that for any sequence, we can remove some number of elements, leaving at least 2, so that the remaining sequence is good.

Input

The first line contains a single integer n (2 ≤ n ≤ 200,000) — length of the sequence.

The second line contains n distinct non-negative integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — the elements of the sequence.

Output

You should output exactly one integer — the minimum possible number of elements to remove in order to make the remaining sequence good.

Examples

Input


5
0 1 5 2 6


Output


1


Input


7
6 9 8 7 3 5 2


Output


2

Note

Note that numbers which you remove don't impact the procedure of telling whether the resulting sequence is good.

It is possible that for some numbers b_i and b_j, you will try to add the edge between them twice. Nevertheless, you will add this edge only once.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int dfs(set<int> s, int t) {
  if (s.empty()) return 0;
  if (s.size() == 1) return 1;
  set<int> sd[2];
  for (int si : s) sd[si >> t & 1].insert(si);
  return max(dfs(sd[0], t - 1) + min((int)sd[1].size(), 1),
             dfs(sd[1], t - 1) + min((int)sd[0].size(), 1));
}
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  int n;
  cin >> n;
  set<int> s;
  for (int i = 0; i < n; ++i) {
    int b;
    cin >> b;
    s.insert(b);
  }
  cout << n - dfs(s, 29) << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

13
41 35 32 36 23 26 47 19 22 2 63 8 11


(G.2) Fast Input

2
2 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int dfs(set<int> s, int t) { /* line 3 slow_hit_count: 77, fast_hit_count: 55 */
  if (s.empty()) return 0; /* line 4 slow_hit_count: 77, fast_hit_count: 55 */
  if (s.size() == 1) return 1; /* line 5 slow_hit_count: 51, fast_hit_count: 29 */
  set<int> sd[2]; /* line 6 slow_hit_count: 228, fast_hit_count: 162 */
  for (int si : s) sd[si >> t & 1].insert(si); /* line 7 slow_hit_count: 406, fast_hit_count: 81 */
  return max(dfs(sd[0], t - 1) + min((int)sd[1].size(), 1), /* line 8 slow_hit_count: 38, fast_hit_count: 27 */
             dfs(sd[1], t - 1) + min((int)sd[0].size(), 1)); /* line 9 slow_hit_count: 76, fast_hit_count: 54 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  set<int> s; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 17 slow_hit_count: 14, fast_hit_count: 3 */
    int b; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> b; /* line 19 slow_hit_count: 13, fast_hit_count: 2 */
    s.insert(b); /* line 20 slow_hit_count: 13, fast_hit_count: 2 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  cout << n - dfs(s, 29) << "\n"; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the problem, we need to analyze the code and determine why specific inputs cause the program to run slower. The goal is to identify performance bottlenecks and derive natural language invariants that describe conditions leading to slow execution paths.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Hit Count Analysis:**
   - **Line 7**: `for (int si : s) sd[si >> t & 1].insert(si);` has significantly higher hits in the slow input (406 hits) compared to the fast input (81 hits). This line is a critical point because it involves a loop that partitions elements based on their binary representation, which can be an expensive operation, especially for larger sets.
   - **Line 6**: The declaration of `set<int> sd[2];` is hit multiple times since it is inside the recursive `dfs` function, indicating the function is being called frequently.
   - **Lines 8-9**: These lines invoke the `dfs` function recursively and have moderate hit counts, suggesting that recursion depth and branching are significant factors in performance.

2. **Interaction with Data Structures, Loops, Recursion:**
   - The recursive `dfs` function partitions a set of integers into two subsets based on a specific bit position (`t`). The combination of recursion depth and the size of these subsets impacts performance. More recursive calls and larger partitions seem to correlate with slower execution.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following natural language invariants to characterize conditions under which the code execution slows down:

1. **Invariant 1: High Recursion Depth and Set Partitioning**
   - Natural Language: "If the recursion operates on a large set and needs to partition it deeply based on bit positions, the overhead of recursive depth and the partition size can lead to performance bottlenecks."
   - This invariant captures the essence of the slowdown: deep recursion coupled with large sets being partitioned repeatedly.

2. **Invariant 2: Imbalanced Set Partitions**
   - Natural Language: "When partitioning a set results in largely imbalanced subsets, particularly when one subset remains significantly larger over recursive calls, the repeated operations on larger subsets may degrade performance."
   - Here, the focus is on the imbalance in subset sizes, which might cause more substantial recursive workloads.

3. **Invariant 3: Dense Bit Distribution**
   - Natural Language: "For inputs where many numbers have similar bit patterns at significant positions, the partitioning process may generate subsets that are not efficiently reduced in size, causing excessive recursive calls."
   - This invariant addresses situations where the XOR operation results in minimal differentiation, leading to inefficient set reductions.

These invariants are broad enough to cover potential future slow scenarios while being specific to the problem's context, emphasizing recursive depth, partition sizes, and bit pattern distribution.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
For a given sequence of distinct non-negative integers (b_1, b_2, ..., b_k) we determine if it is good in the following way:

  * Consider a graph on k nodes, with numbers from b_1 to b_k written on them.
  * For every i from 1 to k: find such j (1 ≤ j ≤ k, j≠ i), for which (b_i ⊕ b_j) is the smallest among all such j, where ⊕ denotes the operation of bitwise XOR (<https://en.wikipedia.org/wiki/Bitwise_operation#XOR>). Next, draw an undirected edge between vertices with numbers b_i and b_j in this graph.
  * We say that the sequence is good if and only if the resulting graph forms a tree (is connected and doesn't have any simple cycles). 



It is possible that for some numbers b_i and b_j, you will try to add the edge between them twice. Nevertheless, you will add this edge only once.

You can find an example below (the picture corresponding to the first test case). 

Sequence (0, 1, 5, 2, 6) is not good as we cannot reach 1 from 5.

However, sequence (0, 1, 5, 2) is good. 

<image>

You are given a sequence (a_1, a_2, ..., a_n) of distinct non-negative integers. You would like to remove some of the elements (possibly none) to make the remaining sequence good. What is the minimum possible number of removals required to achieve this goal?

It can be shown that for any sequence, we can remove some number of elements, leaving at least 2, so that the remaining sequence is good.

Input

The first line contains a single integer n (2 ≤ n ≤ 200,000) — length of the sequence.

The second line contains n distinct non-negative integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — the elements of the sequence.

Output

You should output exactly one integer — the minimum possible number of elements to remove in order to make the remaining sequence good.

Examples

Input


5
0 1 5 2 6


Output


1


Input


7
6 9 8 7 3 5 2


Output


2

Note

Note that numbers which you remove don't impact the procedure of telling whether the resulting sequence is good.

It is possible that for some numbers b_i and b_j, you will try to add the edge between them twice. Nevertheless, you will add this edge only once.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ implementations of the performance-characterizing invariants derived from the previous phase.

1. **Invariant 1: High Recursion Depth and Set Partitioning**
   - **Checker Code:**
   ```cpp
   void check_recursion_depth(int currentDepth, int maxDepth) {
       if (currentDepth > maxDepth) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Imbalanced Set Partitions**
   - **Checker Code:**
   ```cpp
   void check_imbalance(size_t size1, size_t size2) {
       if (size1 > 2 * size2 || size2 > 2 * size1) {
           cerr << "Warning: Performance bottleneck condition triggered - imbalanced set partitions!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Dense Bit Distribution**
   - **Checker Code:**
   ```cpp
   void check_dense_bits(size_t denseCount, size_t threshold) {
       if (denseCount > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered - dense bit pattern distribution!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checker Functions with the Original Program

Below is the C++ program after integrating the checker functions at appropriate points to monitor performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_recursion_depth(int currentDepth, int maxDepth) {
    if (currentDepth > maxDepth) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursion depth!" << endl;
        abort();
    }
}

void check_imbalance(size_t size1, size_t size2) {
    if (size1 > 2 * size2 || size2 > 2 * size1) {
        cerr << "Warning: Performance bottleneck condition triggered - imbalanced set partitions!" << endl;
        abort();
    }
}

void check_dense_bits(size_t denseCount, size_t threshold) {
    if (denseCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - dense bit pattern distribution!" << endl;
        abort();
    }
}

int dfs(set<int> s, int t, int currentDepth) {
    // Check for recursion depth
    check_recursion_depth(currentDepth, 30);

    if (s.empty()) return 0;
    if (s.size() == 1) return 1;

    set<int> sd[2];
    for (int si : s) {
        sd[si >> t & 1].insert(si);
    }

    // Check for set imbalance
    check_imbalance(sd[0].size(), sd[1].size());

    return max(dfs(sd[0], t - 1, currentDepth + 1) + min((int)sd[1].size(), 1),
               dfs(sd[1], t - 1, currentDepth + 1) + min((int)sd[0].size(), 1));
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    int n;
    cin >> n;
    set<int> s;
    for (int i = 0; i < n; ++i) {
        int b;
        cin >> b;
        s.insert(b);
    }

    // Check for dense bit distribution in the input set
    size_t denseCount = 0;
    for (int b : s) {
        if (__builtin_popcount(b) > 15) {
            ++denseCount;
        }
    }
    check_dense_bits(denseCount, n / 4);

    cout << n - dfs(s, 29, 0) << "\n";
    return 0;
}
```

### Explanation

- I've integrated the recursion depth check to ensure the depth doesn't exceed a reasonable limit (`maxDepth` currently set to 30, considering the maximum bit position in the problem).
- The imbalance check ensures that neither subset during partitioning is excessively larger than the other, which can lead to inefficient recursive processing.
- The dense bit distribution check is placed after input processing to ensure that the input set doesn't have too many numbers with dense bit patterns, which could lead to repeated partitioning issues.
- These checks are appropriately placed outside tight loops and before recursive calls to avoid additional overhead.

