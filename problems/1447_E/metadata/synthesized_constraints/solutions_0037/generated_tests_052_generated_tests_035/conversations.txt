system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

For a given sequence of distinct non-negative integers (b_1, b_2, ..., b_k) we determine if it is good in the following way:

  * Consider a graph on k nodes, with numbers from b_1 to b_k written on them.
  * For every i from 1 to k: find such j (1 ≤ j ≤ k, j≠ i), for which (b_i ⊕ b_j) is the smallest among all such j, where ⊕ denotes the operation of bitwise XOR (<https://en.wikipedia.org/wiki/Bitwise_operation#XOR>). Next, draw an undirected edge between vertices with numbers b_i and b_j in this graph.
  * We say that the sequence is good if and only if the resulting graph forms a tree (is connected and doesn't have any simple cycles). 



It is possible that for some numbers b_i and b_j, you will try to add the edge between them twice. Nevertheless, you will add this edge only once.

You can find an example below (the picture corresponding to the first test case). 

Sequence (0, 1, 5, 2, 6) is not good as we cannot reach 1 from 5.

However, sequence (0, 1, 5, 2) is good. 

<image>

You are given a sequence (a_1, a_2, ..., a_n) of distinct non-negative integers. You would like to remove some of the elements (possibly none) to make the remaining sequence good. What is the minimum possible number of removals required to achieve this goal?

It can be shown that for any sequence, we can remove some number of elements, leaving at least 2, so that the remaining sequence is good.

Input

The first line contains a single integer n (2 ≤ n ≤ 200,000) — length of the sequence.

The second line contains n distinct non-negative integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — the elements of the sequence.

Output

You should output exactly one integer — the minimum possible number of elements to remove in order to make the remaining sequence good.

Examples

Input


5
0 1 5 2 6


Output


1


Input


7
6 9 8 7 3 5 2


Output


2

Note

Note that numbers which you remove don't impact the procedure of telling whether the resulting sequence is good.

It is possible that for some numbers b_i and b_j, you will try to add the edge between them twice. Nevertheless, you will add this edge only once.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void __print(int x) { cerr << x; }
void __print(long x) { cerr << x; }
void __print(long long x) { cerr << x; }
void __print(unsigned x) { cerr << x; }
void __print(unsigned long x) { cerr << x; }
void __print(unsigned long long x) { cerr << x; }
void __print(float x) { cerr << x; }
void __print(double x) { cerr << x; }
void __print(long double x) { cerr << x; }
void __print(char x) { cerr << '\'' << x << '\''; }
void __print(const char *x) { cerr << '\"' << x << '\"'; }
void __print(const string &x) { cerr << '\"' << x << '\"'; }
void __print(bool x) { cerr << (x ? "true" : "false"); }
template <typename T, typename V>
void __print(const pair<T, V> &x) {
  cerr << '{';
  __print(x.first);
  cerr << ',';
  __print(x.second);
  cerr << '}';
}
template <typename T>
void __print(const T &x) {
  int f = 0;
  cerr << '{';
  for (auto &i : x) cerr << (f++ ? "," : ""), __print(i);
  cerr << "}";
}
void _print() { cerr << "]\n"; }
template <typename T, typename... V>
void _print(T t, V... v) {
  __print(t);
  if (sizeof...(v)) cerr << ", ";
  _print(v...);
}
int _ = 1;
int f(set<int> &s, int j) {
  if (j < 0) return 0;
  if (s.size() == 0) return 0;
  set<int> s0;
  set<int> s1;
  long long mask = ((long long)1 << j);
  for (auto &x : s) {
    if ((x & mask) == 0)
      s0.insert(x);
    else
      s1.insert(x);
  }
  if (s0.size() <= 1) {
    return f(s1, j - 1);
  } else if (s1.size() <= 1) {
    return f(s0, j - 1);
  } else {
    return min(s0.size() - 1 + f(s1, j - 1), s1.size() - 1 + f(s0, j - 1));
  }
}
void solve() {
  int n;
  cin >> n;
  set<int> s;
  for (int i = 0; i < n; i++) {
    int x;
    cin >> x;
    s.insert(x);
  }
  cout << f(s, 35) << '\n';
}
int32_t main(int32_t argc, char **argv) {
  ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
  while (_--) solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

13
41 35 32 36 23 26 47 19 22 2 63 8 11


(G.2) Fast Input

2
2 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void __print(int x) { cerr << x; } /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void __print(long x) { cerr << x; } /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
void __print(long long x) { cerr << x; } /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void __print(unsigned x) { cerr << x; } /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void __print(unsigned long x) { cerr << x; } /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void __print(unsigned long long x) { cerr << x; } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
void __print(float x) { cerr << x; } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
void __print(double x) { cerr << x; } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
void __print(long double x) { cerr << x; } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
void __print(char x) { cerr << '\'' << x << '\''; } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
void __print(const char *x) { cerr << '\"' << x << '\"'; } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
void __print(const string &x) { cerr << '\"' << x << '\"'; } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
void __print(bool x) { cerr << (x ? "true" : "false"); } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename V> /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
void __print(const pair<T, V> &x) { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << '{'; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  __print(x.first); /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << ','; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  __print(x.second); /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << '}'; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
void __print(const T &x) { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  int f = 0; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << '{'; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto &i : x) cerr << (f++ ? "," : ""), __print(i); /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << "}"; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
void _print() { cerr << "]\n"; } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename... V> /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
void _print(T t, V... v) { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  __print(t); /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  if (sizeof...(v)) cerr << ", "; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  _print(v...); /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
int _ = 1; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
int f(set<int> &s, int j) { /* line 39 slow_hit_count: 52, fast_hit_count: 35 */
  if (j < 0) return 0; /* line 40 slow_hit_count: 52, fast_hit_count: 35 */
  if (s.size() == 0) return 0; /* line 41 slow_hit_count: 48, fast_hit_count: 35 */
  set<int> s0; /* line 42 slow_hit_count: 96, fast_hit_count: 68 */
  set<int> s1; /* line 43 slow_hit_count: 96, fast_hit_count: 68 */
  long long mask = ((long long)1 << j); /* line 44 slow_hit_count: 48, fast_hit_count: 34 */
  for (auto &x : s) { /* line 45 slow_hit_count: 498, fast_hit_count: 101 */
    if ((x & mask) == 0) /* line 46 slow_hit_count: 450, fast_hit_count: 67 */
      s0.insert(x); /* line 47 slow_hit_count: 421, fast_hit_count: 66 */
    else /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      s1.insert(x); /* line 49 slow_hit_count: 29, fast_hit_count: 1 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  if (s0.size() <= 1) { /* line 51 slow_hit_count: 48, fast_hit_count: 34 */
    return f(s1, j - 1); /* line 52 slow_hit_count: 11, fast_hit_count: 2 */
  } else if (s1.size() <= 1) { /* line 53 slow_hit_count: 37, fast_hit_count: 32 */
    return f(s0, j - 1); /* line 54 slow_hit_count: 34, fast_hit_count: 32 */
  } else { /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    return min(s0.size() - 1 + f(s1, j - 1), s1.size() - 1 + f(s0, j - 1)); /* line 56 slow_hit_count: 3, fast_hit_count: 0 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  set<int> s; /* line 62 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) { /* line 63 slow_hit_count: 14, fast_hit_count: 3 */
    int x; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x; /* line 65 slow_hit_count: 13, fast_hit_count: 2 */
    s.insert(x); /* line 66 slow_hit_count: 13, fast_hit_count: 2 */
  } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  cout << f(s, 35) << '\n'; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
int32_t main(int32_t argc, char **argv) { /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false), cin.tie(0), cout.tie(0); /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  while (_--) solve(); /* line 72 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 73 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis of the Code

1. **Recursive Function `f`:**
   - The recursive function `f` is called with a set `s` and an integer `j`, which represents the bit position.
   - It partitions the set `s` into two subsets, `s0` and `s1`, based on the `j`-th bit of the elements.
   - The function is recursive, and the base cases are when `j < 0` or `s` is empty.
   - Each recursive call partitions the set, potentially leading to a large number of recursive calls, especially when the set is large and elements have high bit diversity.

2. **Hit Count Information:**
   - **Line 39:** The function `f` is called 52 times for the slow input, compared to 35 times for the fast input.
   - **Line 45:** The loop iterating over the set `s` (which can be large) runs 498 times for the slow input, versus 101 times for the fast input.
   - **Line 56:** The line involving the recursive call with XOR-based partitioning is executed 3 times for the slow input and not at all for the fast input, indicating a more complex branching for the slow input.

### Inefficient Code Segments

- The hit counts suggest that the inefficiency is primarily due to the recursive calls and the partitioning within the function `f`. The recursion depth and number of branches explored appear to be significantly larger for the slow input.

## Phase 2: Derive Performance-Characterizing Invariants

### Natural Language Performance Invariants

1. **High Bit Diversity:**
   - **Description:** "If the sequence has a high diversity in the significant bit positions, leading to many different partitions being explored in recursion, the performance may degrade. This is especially true when elements differ significantly in higher bit positions, causing a deeper and more complex recursive structure."
   - **Justification:** High bit diversity increases the branching factor, resulting in more recursive calls for partitioning.

2. **Large Set Size with Non-trivial Partitions:**
   - **Description:** "When the size of the set being processed remains large even after several partitioning steps, indicating that neither subset becomes trivially small, the recursive function calls multiply, slowing down the execution."
   - **Justification:** A persistent large size across partitions suggests that the recursion does not quickly converge to base cases, leading to more recursive levels.

3. **Complex Partitioning Due to XOR Operation:**
   - **Description:** "If the XOR operation results in non-trivial partitions at each bit level, the recursion explores many combinations, leading to increased computation. An uneven distribution of elements across bit partitions can trigger such behavior."
   - **Justification:** XOR-based partitions create complex branching paths, especially when there are no clear dominant partitions.

### Summary

The primary performance bottleneck stems from the recursive nature of the function `f` and how it handles set partitioning based on bit positions. The conditions that lead to inefficiencies are related to high bit diversity, large persistent set sizes through recursion, and complex partitioning due to XOR operations. Reducing the problem's complexity by minimizing variances in these aspects can potentially alleviate the slow performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
For a given sequence of distinct non-negative integers (b_1, b_2, ..., b_k) we determine if it is good in the following way:

  * Consider a graph on k nodes, with numbers from b_1 to b_k written on them.
  * For every i from 1 to k: find such j (1 ≤ j ≤ k, j≠ i), for which (b_i ⊕ b_j) is the smallest among all such j, where ⊕ denotes the operation of bitwise XOR (<https://en.wikipedia.org/wiki/Bitwise_operation#XOR>). Next, draw an undirected edge between vertices with numbers b_i and b_j in this graph.
  * We say that the sequence is good if and only if the resulting graph forms a tree (is connected and doesn't have any simple cycles). 



It is possible that for some numbers b_i and b_j, you will try to add the edge between them twice. Nevertheless, you will add this edge only once.

You can find an example below (the picture corresponding to the first test case). 

Sequence (0, 1, 5, 2, 6) is not good as we cannot reach 1 from 5.

However, sequence (0, 1, 5, 2) is good. 

<image>

You are given a sequence (a_1, a_2, ..., a_n) of distinct non-negative integers. You would like to remove some of the elements (possibly none) to make the remaining sequence good. What is the minimum possible number of removals required to achieve this goal?

It can be shown that for any sequence, we can remove some number of elements, leaving at least 2, so that the remaining sequence is good.

Input

The first line contains a single integer n (2 ≤ n ≤ 200,000) — length of the sequence.

The second line contains n distinct non-negative integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^9) — the elements of the sequence.

Output

You should output exactly one integer — the minimum possible number of elements to remove in order to make the remaining sequence good.

Examples

Input


5
0 1 5 2 6


Output


1


Input


7
6 9 8 7 3 5 2


Output


2

Note

Note that numbers which you remove don't impact the procedure of telling whether the resulting sequence is good.

It is possible that for some numbers b_i and b_j, you will try to add the edge between them twice. Nevertheless, you will add this edge only once.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing the Natural Language Invariants in C++

### Invariant 1: High Bit Diversity
**Natural Language Description:**  
"If the sequence has a high diversity in the significant bit positions, leading to many different partitions being explored in recursion, the performance may degrade. This is especially true when elements differ significantly in higher bit positions, causing a deeper and more complex recursive structure."

To detect this, we can check the number of different high-order bits used in the sequence. If there are many unique high bits, this suggests that there may be significant branching.

```cpp
void check_bit_diversity_invariant(const set<int>& s, int threshold) {
    set<int> unique_high_bits;
    for (int x : s) {
        unique_high_bits.insert(x >> 28); // check the top 4 bits as a proxy for "high bit diversity"
    }
    if (unique_high_bits.size() > threshold) {
        cerr << "Warning: bit_diversity_invariant triggered - high bit diversity" << endl;
        abort();
    }
}
```

### Invariant 2: Large Set Size with Non-trivial Partitions
**Natural Language Description:**  
"When the size of the set being processed remains large even after several partitioning steps, indicating that neither subset becomes trivially small, the recursive function calls multiply, slowing down the execution."

To detect this, we can check if the partitioning results in large sets being passed down in the recursion.

```cpp
void check_partition_size_invariant(size_t size, size_t threshold) {
    if (size > threshold) {
        cerr << "Warning: partition_size_invariant triggered - large set size with non-trivial partitions" << endl;
        abort();
    }
}
```

### Invariant 3: Complex Partitioning Due to XOR Operation
**Natural Language Description:**  
"If the XOR operation results in non-trivial partitions at each bit level, the recursion explores many combinations, leading to increased computation. An uneven distribution of elements across bit partitions can trigger such behavior."

```cpp
void check_xor_partition_invariant(size_t s0_size, size_t s1_size, size_t threshold) {
    if (s0_size > threshold && s1_size > threshold) {
        cerr << "Warning: xor_partition_invariant triggered - complex XOR partitioning" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checker Code into the Program

Now, we will integrate these checks into the given C++ program to help identify performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checkers for invariants
void check_bit_diversity_invariant(const set<int>& s, int threshold) {
    set<int> unique_high_bits;
    for (int x : s) {
        unique_high_bits.insert(x >> 28); // check the top 4 bits as a proxy for "high bit diversity"
    }
    if (unique_high_bits.size() > threshold) {
        cerr << "Warning: bit_diversity_invariant triggered - high bit diversity" << endl;
        abort();
    }
}

void check_partition_size_invariant(size_t size, size_t threshold) {
    if (size > threshold) {
        cerr << "Warning: partition_size_invariant triggered - large set size with non-trivial partitions" << endl;
        abort();
    }
}

void check_xor_partition_invariant(size_t s0_size, size_t s1_size, size_t threshold) {
    if (s0_size > threshold && s1_size > threshold) {
        cerr << "Warning: xor_partition_invariant triggered - complex XOR partitioning" << endl;
        abort();
    }
}

// Recursive function to determine the minimum number of removals
int f(set<int>& s, int j) {
    if (j < 0) return 0;
    if (s.size() == 0) return 0;

    // Invariant check for large set size
    check_partition_size_invariant(s.size(), 200); // Use a threshold based on problem constraints

    set<int> s0;
    set<int> s1;
    long long mask = ((long long)1 << j);
    for (auto& x : s) {
        if ((x & mask) == 0) {
            s0.insert(x);
        } else {
            s1.insert(x);
        }
    }
    
    // Invariant check for XOR partition
    check_xor_partition_invariant(s0.size(), s1.size(), 10); // Arbitrary threshold for demonstration

    if (s0.size() <= 1) {
        return f(s1, j - 1);
    } else if (s1.size() <= 1) {
        return f(s0, j - 1);
    } else {
        return min(s0.size() - 1 + f(s1, j - 1), s1.size() - 1 + f(s0, j - 1));
    }
}

void solve() {
    int n;
    cin >> n;
    set<int> s;
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        s.insert(x);
    }

    // Invariant check for bit diversity
    check_bit_diversity_invariant(s, 15); // Threshold based on expected high bit diversity

    cout << f(s, 35) << '\n';
}

int32_t main(int32_t argc, char** argv) {
    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);
    solve();
}
```

### Explanation
- **Bit Diversity Check:** Implemented immediately after reading the input to assess if the initial sequence has high bit diversity.
- **Partition Size Check:** Implemented within the recursive function `f` to ensure sets being processed remain within manageable sizes.
- **XOR Partition Check:** Placed after partitioning to detect complex partitioning scenarios that could lead to inefficiencies.

This instrumented code helps identify potential performance bottlenecks by invoking `abort()` when an invariant condition is violated, aiding in debugging and testing under various input conditions.

