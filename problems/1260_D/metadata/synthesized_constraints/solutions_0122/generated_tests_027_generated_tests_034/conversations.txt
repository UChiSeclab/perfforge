system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are playing a computer game, where you lead a party of m soldiers. Each soldier is characterised by his agility a_i.

The level you are trying to get through can be represented as a straight line segment from point 0 (where you and your squad is initially located) to point n + 1 (where the boss is located).

The level is filled with k traps. Each trap is represented by three numbers l_i, r_i and d_i. l_i is the location of the trap, and d_i is the danger level of the trap: whenever a soldier with agility lower than d_i steps on a trap (that is, moves to the point l_i), he gets instantly killed. Fortunately, you can disarm traps: if you move to the point r_i, you disarm this trap, and it no longer poses any danger to your soldiers. Traps don't affect you, only your soldiers.

You have t seconds to complete the level — that is, to bring some soldiers from your squad to the boss. Before the level starts, you choose which soldiers will be coming with you, and which soldiers won't be. After that, you have to bring all of the chosen soldiers to the boss. To do so, you may perform the following actions:

  * if your location is x, you may move to x + 1 or x - 1. This action consumes one second; 
  * if your location is x and the location of your squad is x, you may move to x + 1 or to x - 1 with your squad in one second. You may not perform this action if it puts some soldier in danger (i. e. the point your squad is moving into contains a non-disarmed trap with d_i greater than agility of some soldier from the squad). This action consumes one second; 
  * if your location is x and there is a trap i with r_i = x, you may disarm this trap. This action is done instantly (it consumes no time). 



Note that after each action both your coordinate and the coordinate of your squad should be integers.

You have to choose the maximum number of soldiers such that they all can be brought from the point 0 to the point n + 1 (where the boss waits) in no more than t seconds.

Input

The first line contains four integers m, n, k and t (1 ≤ m, n, k, t ≤ 2 ⋅ 10^5, n < t) — the number of soldiers, the number of integer points between the squad and the boss, the number of traps and the maximum number of seconds you may spend to bring the squad to the boss, respectively.

The second line contains m integers a_1, a_2, ..., a_m (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the agility of the i-th soldier.

Then k lines follow, containing the descriptions of traps. Each line contains three numbers l_i, r_i and d_i (1 ≤ l_i ≤ r_i ≤ n, 1 ≤ d_i ≤ 2 ⋅ 10^5) — the location of the trap, the location where the trap can be disarmed, and its danger level, respectively.

Output

Print one integer — the maximum number of soldiers you may choose so that you may bring them all to the boss in no more than t seconds.

Example

Input


5 6 4 14
1 2 3 4 5
1 5 2
1 2 5
2 3 5
3 5 3


Output


3

Note

In the first example you may take soldiers with agility 3, 4 and 5 with you. The course of action is as follows:

  * go to 2 without your squad; 
  * disarm the trap 2; 
  * go to 3 without your squad; 
  * disartm the trap 3; 
  * go to 0 without your squad; 
  * go to 7 with your squad. 



The whole plan can be executed in 13 seconds.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long gcd(long long x, long long y) {
  if (x == 0) return y;
  return gcd(y % x, x);
}
long long powmod(long long x, long long y, long long m) {
  if (y == 0) return 1;
  long long p = powmod(x, y / 2, m) % m;
  p = (p * p) % m;
  return (y % 2 == 0) ? p : (x * p) % m;
}
long long modif(long long x, long long m) { return (powmod(x, m - 2, m)); }
bool fa(vector<long long> &x, vector<long long> &y) { return x[0] < y[0]; }
bool fa1(vector<long long> &x, vector<long long> &y) { return x[1] < y[1]; }
bool f1(pair<long long, long long> &x, pair<long long, long long> &y) {
  return x.second > y.second;
}
bool f2(pair<long long, long long> &x, pair<long long, long long> &y) {
  return x.first < y.first;
}
bool f3(long long &x, long long &y) { return abs(x) > abs(y); }
long long mxn = 1e6;
vector<long long> b;
vector<long long> ch(mxn, 0ll);
long long tr;
long long m, n, k;
bool meow(long long x, vector<array<long long, 3> > &c) {
  if (x == 0) return true;
  long long yo = 0;
  for (int i = 0; i < mxn; i++) ch[i] = 0;
  long long y = b[b.size() - x];
  for (int i = 0; i < k; i++) {
    if (c[i][2] > y) {
      ch[c[i][0]]++;
      ch[c[i][1] + 1]--;
    }
  }
  long long l = 0;
  for (int i = 0; i < n + 1; i++) {
    l += ch[i];
    yo += 1;
    if (l > 0) yo += 2;
  }
  return yo <= tr;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  cin >> m >> n >> k >> tr;
  for (int i = 0; i < m; i++) {
    long long x;
    cin >> x;
    b.push_back(x);
  }
  sort(b.begin(), b.end());
  vector<array<long long, 3> > c(k);
  for (int i = 0; i < k; i++) {
    cin >> c[i][0] >> c[i][1] >> c[i][2];
  }
  long long l = 0, r = m;
  long long it = 0;
  while (l < r) {
    if (it > 100) {
      cout << "meow";
      break;
    }
    long long mid = (l + r + 1) / 2;
    if (meow(mid, c))
      l = mid;
    else
      r = mid - 1;
  }
  cout << l;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 7 4 14
1 2 0 4 5
1 4 2
1 2 5
2 3 0
3 5 3


(G.2) Fast Input

5 7 4 14
1 2 0 4 5
1 4 2
1 3 1
2 3 0
3 5 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long x, long long y) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  if (x == 0) return y; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  return gcd(y % x, x); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long powmod(long long x, long long y, long long m) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  if (y == 0) return 1; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  long long p = powmod(x, y / 2, m) % m; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  p = (p * p) % m; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  return (y % 2 == 0) ? p : (x * p) % m; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long modif(long long x, long long m) { return (powmod(x, m - 2, m)); } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
bool fa(vector<long long> &x, vector<long long> &y) { return x[0] < y[0]; } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
bool fa1(vector<long long> &x, vector<long long> &y) { return x[1] < y[1]; } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
bool f1(pair<long long, long long> &x, pair<long long, long long> &y) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  return x.second > y.second; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
bool f2(pair<long long, long long> &x, pair<long long, long long> &y) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return x.first < y.first; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
bool f3(long long &x, long long &y) { return abs(x) > abs(y); } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
long long mxn = 1e6; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> b; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> ch(mxn, 0ll); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
long long tr; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
long long m, n, k; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
bool meow(long long x, vector<array<long long, 3> > &c) { /* line 28 slow_hit_count: 3, fast_hit_count: 2 */
  if (x == 0) return true; /* line 29 slow_hit_count: 3, fast_hit_count: 2 */
  long long yo = 0; /* line 30 slow_hit_count: 3, fast_hit_count: 2 */
  for (int i = 0; i < mxn; i++) ch[i] = 0; /* line 31 slow_hit_count: 3000003, fast_hit_count: 2000002 */
  long long y = b[b.size() - x]; /* line 32 slow_hit_count: 3, fast_hit_count: 2 */
  for (int i = 0; i < k; i++) { /* line 33 slow_hit_count: 15, fast_hit_count: 10 */
    if (c[i][2] > y) { /* line 34 slow_hit_count: 12, fast_hit_count: 8 */
      ch[c[i][0]]++; /* line 35 slow_hit_count: 3, fast_hit_count: 3 */
      ch[c[i][1] + 1]--; /* line 36 slow_hit_count: 3, fast_hit_count: 3 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  long long l = 0; /* line 39 slow_hit_count: 3, fast_hit_count: 2 */
  for (int i = 0; i < n + 1; i++) { /* line 40 slow_hit_count: 27, fast_hit_count: 18 */
    l += ch[i]; /* line 41 slow_hit_count: 24, fast_hit_count: 16 */
    yo += 1; /* line 42 slow_hit_count: 24, fast_hit_count: 16 */
    if (l > 0) yo += 2; /* line 43 slow_hit_count: 24, fast_hit_count: 16 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  return yo <= tr; /* line 45 slow_hit_count: 3, fast_hit_count: 2 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> m >> n >> k >> tr; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < m; i++) { /* line 52 slow_hit_count: 6, fast_hit_count: 6 */
    long long x; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x; /* line 54 slow_hit_count: 5, fast_hit_count: 5 */
    b.push_back(x); /* line 55 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  sort(b.begin(), b.end()); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  vector<array<long long, 3> > c(k); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < k; i++) { /* line 59 slow_hit_count: 5, fast_hit_count: 5 */
    cin >> c[i][0] >> c[i][1] >> c[i][2]; /* line 60 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  long long l = 0, r = m; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  long long it = 0; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  while (l < r) { /* line 64 slow_hit_count: 4, fast_hit_count: 3 */
    if (it > 100) { /* line 65 slow_hit_count: 3, fast_hit_count: 2 */
      cout << "meow"; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
      break; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
    long long mid = (l + r + 1) / 2; /* line 69 slow_hit_count: 3, fast_hit_count: 2 */
    if (meow(mid, c)) /* line 70 slow_hit_count: 3, fast_hit_count: 2 */
      l = mid; /* line 71 slow_hit_count: 2, fast_hit_count: 1 */
    else /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
      r = mid - 1; /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  cout << l; /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 77 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

By comparing the line-level hit counts between the slow and fast inputs, we can focus on the following areas:

1. **Line 31 (`for (int i = 0; i < mxn; i++) ch[i] = 0;`)**:
   - **Slow Hit Count**: 3,000,003
   - **Fast Hit Count**: 2,000,002
   - This line initializes a large vector `ch` of size `mxn` (1,000,000). The high hit count indicates that this initialization is done multiple times, which is inefficient for large `mxn`.
   
2. **Line 33 (`for (int i = 0; i < k; i++) {`)** and Line 34 (`if (c[i][2] > y) {`)**:
   - **Slow Hit Count**: 15 (Loop) / 12 (Condition)
   - **Fast Hit Count**: 10 (Loop) / 8 (Condition)
   - The loop iterates over traps and applies a condition on the trap's danger level. This suggests that the number of traps and their conditions may have a significant role in causing slowness, particularly when more traps become active or restrictive.
   
3. **Lines 40-43 (within the loop checking active traps)**:
   - These lines iterate over the entire path (`n + 1` points) and accumulate time penalties for active traps. Hit counts significantly differ between the slow and fast runs (27 vs 18 on line 40), indicating that more traps or higher-severity traps impact the loop's execution.

## Phase 2: Derive Performance-Characterizing Invariants

### Invariant 1: Large Initialization Overhead
- **Natural Language**: "If the initialization of auxiliary data structures is repeatedly done for each test or scenario and the structure is unnecessarily large, it may cause a slowdown. This is especially impactful when the initialization size is close to or exceeds the necessary problem size."
- **Condition**: Check if the size of the data structure (`mxn`) is significantly larger than required for `n` and optimize its initialization outside frequent loops.

### Invariant 2: High Trap Processing Complexity
- **Natural Language**: "When the number of traps (`k`) is large or when traps have high danger levels that frequently exceed soldiers' agility, the trap processing logic might enter a slow path. Particularly, if many soldiers are just below the danger levels of many traps, there could be frequent evaluations and condition checks."
- **Condition**: Consider the relationship between the number of traps `k`, their locations, and danger levels compared to the soldiers’ agilities. If many soldiers have agilities close to many trap danger levels, the operation efficiency diminishes.

### Invariant 3: High Path Complexity with Many Active Traps
- **Natural Language**: "If the number of active traps significantly affects the path between start and goal, or if many positions on the path require additional time due to active traps, the computation becomes time-consuming."
- **Condition**: Evaluate scenarios where the number of positions affected by active traps exceeds a threshold in relation to `n`. This can trigger excessive time penalties and path recalculations.

## Summary

These invariants capture potential sources of inefficiency within the problem constraints (e.g., `n <= 100`), reflecting situations where the program could become slow based on structural and input characteristics without relying on specific input values. By abstracting these performance triggers into broad conditions, potential slow scenarios can be detected and optimized accordingly.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are playing a computer game, where you lead a party of m soldiers. Each soldier is characterised by his agility a_i.

The level you are trying to get through can be represented as a straight line segment from point 0 (where you and your squad is initially located) to point n + 1 (where the boss is located).

The level is filled with k traps. Each trap is represented by three numbers l_i, r_i and d_i. l_i is the location of the trap, and d_i is the danger level of the trap: whenever a soldier with agility lower than d_i steps on a trap (that is, moves to the point l_i), he gets instantly killed. Fortunately, you can disarm traps: if you move to the point r_i, you disarm this trap, and it no longer poses any danger to your soldiers. Traps don't affect you, only your soldiers.

You have t seconds to complete the level — that is, to bring some soldiers from your squad to the boss. Before the level starts, you choose which soldiers will be coming with you, and which soldiers won't be. After that, you have to bring all of the chosen soldiers to the boss. To do so, you may perform the following actions:

  * if your location is x, you may move to x + 1 or x - 1. This action consumes one second; 
  * if your location is x and the location of your squad is x, you may move to x + 1 or to x - 1 with your squad in one second. You may not perform this action if it puts some soldier in danger (i. e. the point your squad is moving into contains a non-disarmed trap with d_i greater than agility of some soldier from the squad). This action consumes one second; 
  * if your location is x and there is a trap i with r_i = x, you may disarm this trap. This action is done instantly (it consumes no time). 



Note that after each action both your coordinate and the coordinate of your squad should be integers.

You have to choose the maximum number of soldiers such that they all can be brought from the point 0 to the point n + 1 (where the boss waits) in no more than t seconds.

Input

The first line contains four integers m, n, k and t (1 ≤ m, n, k, t ≤ 2 ⋅ 10^5, n < t) — the number of soldiers, the number of integer points between the squad and the boss, the number of traps and the maximum number of seconds you may spend to bring the squad to the boss, respectively.

The second line contains m integers a_1, a_2, ..., a_m (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the agility of the i-th soldier.

Then k lines follow, containing the descriptions of traps. Each line contains three numbers l_i, r_i and d_i (1 ≤ l_i ≤ r_i ≤ n, 1 ≤ d_i ≤ 2 ⋅ 10^5) — the location of the trap, the location where the trap can be disarmed, and its danger level, respectively.

Output

Print one integer — the maximum number of soldiers you may choose so that you may bring them all to the boss in no more than t seconds.

Example

Input


5 6 4 14
1 2 3 4 5
1 5 2
1 2 5
2 3 5
3 5 3


Output


3

Note

In the first example you may take soldiers with agility 3, 4 and 5 with you. The course of action is as follows:

  * go to 2 without your squad; 
  * disarm the trap 2; 
  * go to 3 without your squad; 
  * disartm the trap 3; 
  * go to 0 without your squad; 
  * go to 7 with your squad. 



The whole plan can be executed in 13 seconds.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Natural Language Invariants in C++

Let's implement the performance-characterizing invariants identified in the previous phase as C++ checkers:

### Invariant 1: Large Initialization Overhead
```cpp
void check_large_initialization(long long mxn, long long n) {
    if (mxn > 10 * n) { // Condition: if mxn is significantly larger than n
        cerr << "Warning: Performance bottleneck condition triggered - large initialization size!" << endl;
        abort();
    }
}
```

### Invariant 2: High Trap Processing Complexity
```cpp
void check_high_trap_processing(long long k, const vector<array<long long, 3>>& c, long long max_agility) {
    int count_restrictive_traps = 0;
    for (const auto& trap : c) {
        if (trap[2] > max_agility) { // Condition: count traps that are restrictive for maximum agility
            count_restrictive_traps++;
        }
    }
    if (count_restrictive_traps > k / 2) { // If more than half of the traps are restrictive
        cerr << "Warning: Performance bottleneck condition triggered - high trap processing complexity!" << endl;
        abort();
    }
}
```

### Invariant 3: High Path Complexity with Many Active Traps
```cpp
void check_high_path_complexity(const vector<array<long long, 3>>& c) {
    int active_traps_count = 0;
    for (const auto& trap : c) {
        if (trap[0] != trap[1]) { // If the trap spans multiple positions, count as active
            active_traps_count++;
        }
    }
    if (active_traps_count > c.size() / 2) { // If more than half of the traps are active
        cerr << "Warning: Performance bottleneck condition triggered - high path complexity!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checker Functions into the Original Program

Here is the updated C++ code with the integrated checker functions:

```cpp
#include <bits/stdc++.h>
using namespace std;

long long gcd(long long x, long long y) {
    if (x == 0) return y;
    return gcd(y % x, x);
}
long long powmod(long long x, long long y, long long m) {
    if (y == 0) return 1;
    long long p = powmod(x, y / 2, m) % m;
    p = (p * p) % m;
    return (y % 2 == 0) ? p : (x * p) % m;
}
long long modif(long long x, long long m) { return (powmod(x, m - 2, m)); }
bool fa(vector<long long> &x, vector<long long> &y) { return x[0] < y[0]; }
bool fa1(vector<long long> &x, vector<long long> &y) { return x[1] < y[1]; }
bool f1(pair<long long, long long> &x, pair<long long, long long> &y) {
    return x.second > y.second;
}
bool f2(pair<long long, long long> &x, pair<long long, long long> &y) {
    return x.first < y.first;
}
bool f3(long long &x, long long &y) { return abs(x) > abs(y); }
long long mxn = 1e6;
vector<long long> b;
vector<long long> ch(mxn, 0ll);
long long tr;
long long m, n, k;

void check_large_initialization(long long mxn, long long n) {
    if (mxn > 10 * n) { // Condition: if mxn is significantly larger than n
        cerr << "Warning: Performance bottleneck condition triggered - large initialization size!" << endl;
        abort();
    }
}

void check_high_trap_processing(long long k, const vector<array<long long, 3>>& c, long long max_agility) {
    int count_restrictive_traps = 0;
    for (const auto& trap : c) {
        if (trap[2] > max_agility) { // Condition: count traps that are restrictive for maximum agility
            count_restrictive_traps++;
        }
    }
    if (count_restrictive_traps > k / 2) { // If more than half of the traps are restrictive
        cerr << "Warning: Performance bottleneck condition triggered - high trap processing complexity!" << endl;
        abort();
    }
}

void check_high_path_complexity(const vector<array<long long, 3>>& c) {
    int active_traps_count = 0;
    for (const auto& trap : c) {
        if (trap[0] != trap[1]) { // If the trap spans multiple positions, count as active
            active_traps_count++;
        }
    }
    if (active_traps_count > c.size() / 2) { // If more than half of the traps are active
        cerr << "Warning: Performance bottleneck condition triggered - high path complexity!" << endl;
        abort();
    }
}

bool meow(long long x, vector<array<long long, 3> > &c) {
    if (x == 0) return true;
    long long yo = 0;
    for (int i = 0; i < mxn; i++) ch[i] = 0;
    long long y = b[b.size() - x];
    for (int i = 0; i < k; i++) {
        if (c[i][2] > y) {
            ch[c[i][0]]++;
            ch[c[i][1] + 1]--;
        }
    }
    long long l = 0;
    for (int i = 0; i < n + 1; i++) {
        l += ch[i];
        yo += 1;
        if (l > 0) yo += 2;
    }
    return yo <= tr;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cin >> m >> n >> k >> tr;
    check_large_initialization(mxn, n); // Check for large initialization overhead

    for (int i = 0; i < m; i++) {
        long long x;
        cin >> x;
        b.push_back(x);
    }
    sort(b.begin(), b.end());
    vector<array<long long, 3> > c(k);
    for (int i = 0; i < k; i++) {
        cin >> c[i][0] >> c[i][1] >> c[i][2];
    }
    check_high_trap_processing(k, c, b.back()); // Check for high trap processing complexity
    check_high_path_complexity(c); // Check for high path complexity with active traps

    long long l = 0, r = m;
    long long it = 0;
    while (l < r) {
        if (it > 100) {
            cout << "meow";
            break;
        }
        long long mid = (l + r + 1) / 2;
        if (meow(mid, c))
            l = mid;
        else
            r = mid - 1;
    }
    cout << l;
    return 0;
}
```

### Explanation
1. **Large Initialization Overhead Check**: This is inserted right after the `mxn` initialization to ensure the initialization size is reasonable relative to `n`.
2. **High Trap Processing Complexity Check**: This is placed after reading and initializing traps to check if many traps exceed the agility of soldiers.
3. **High Path Complexity Check**: This occurs after trap input processing to verify if too many traps remain active, which could complicate pathfinding.

