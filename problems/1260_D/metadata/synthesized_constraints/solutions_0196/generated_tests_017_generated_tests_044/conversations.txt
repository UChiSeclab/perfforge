system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are playing a computer game, where you lead a party of m soldiers. Each soldier is characterised by his agility a_i.

The level you are trying to get through can be represented as a straight line segment from point 0 (where you and your squad is initially located) to point n + 1 (where the boss is located).

The level is filled with k traps. Each trap is represented by three numbers l_i, r_i and d_i. l_i is the location of the trap, and d_i is the danger level of the trap: whenever a soldier with agility lower than d_i steps on a trap (that is, moves to the point l_i), he gets instantly killed. Fortunately, you can disarm traps: if you move to the point r_i, you disarm this trap, and it no longer poses any danger to your soldiers. Traps don't affect you, only your soldiers.

You have t seconds to complete the level — that is, to bring some soldiers from your squad to the boss. Before the level starts, you choose which soldiers will be coming with you, and which soldiers won't be. After that, you have to bring all of the chosen soldiers to the boss. To do so, you may perform the following actions:

  * if your location is x, you may move to x + 1 or x - 1. This action consumes one second; 
  * if your location is x and the location of your squad is x, you may move to x + 1 or to x - 1 with your squad in one second. You may not perform this action if it puts some soldier in danger (i. e. the point your squad is moving into contains a non-disarmed trap with d_i greater than agility of some soldier from the squad). This action consumes one second; 
  * if your location is x and there is a trap i with r_i = x, you may disarm this trap. This action is done instantly (it consumes no time). 



Note that after each action both your coordinate and the coordinate of your squad should be integers.

You have to choose the maximum number of soldiers such that they all can be brought from the point 0 to the point n + 1 (where the boss waits) in no more than t seconds.

Input

The first line contains four integers m, n, k and t (1 ≤ m, n, k, t ≤ 2 ⋅ 10^5, n < t) — the number of soldiers, the number of integer points between the squad and the boss, the number of traps and the maximum number of seconds you may spend to bring the squad to the boss, respectively.

The second line contains m integers a_1, a_2, ..., a_m (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the agility of the i-th soldier.

Then k lines follow, containing the descriptions of traps. Each line contains three numbers l_i, r_i and d_i (1 ≤ l_i ≤ r_i ≤ n, 1 ≤ d_i ≤ 2 ⋅ 10^5) — the location of the trap, the location where the trap can be disarmed, and its danger level, respectively.

Output

Print one integer — the maximum number of soldiers you may choose so that you may bring them all to the boss in no more than t seconds.

Example

Input


5 6 4 14
1 2 3 4 5
1 5 2
1 2 5
2 3 5
3 5 3


Output


3

Note

In the first example you may take soldiers with agility 3, 4 and 5 with you. The course of action is as follows:

  * go to 2 without your squad; 
  * disarm the trap 2; 
  * go to 3 without your squad; 
  * disartm the trap 3; 
  * go to 0 without your squad; 
  * go to 7 with your squad. 



The whole plan can be executed in 13 seconds.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int const MAXN = 2e5 + 9;
int m, n, k, t;
int a[MAXN];
int occ[MAXN];
vector<pair<pair<int, int>, int>> v;
bool check(int x) {
  int mn = a[x - 1];
  long long int ret = 0;
  memset(occ, 0, sizeof occ);
  for (int i = 0; i < k; i++) {
    int d = v[i].second;
    int l = v[i].first.first;
    int r = v[i].first.second;
    if (d > mn) {
      occ[l]++;
      occ[r + 1]--;
    }
  }
  for (int i = 1; i < MAXN; i++) {
    occ[i] += occ[i - 1];
    ret += 2 * (occ[i] > 0);
  }
  ret += n + 1;
  return ret <= t;
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  cin >> m >> n >> k >> t;
  for (int i = 0; i < m; i++) cin >> a[i];
  sort(a, a + m);
  reverse(a, a + m);
  for (int i = 0; i < k; i++) {
    int l, r, d;
    cin >> l >> r >> d;
    v.push_back({{l, r}, d});
  }
  sort(v.begin(), v.end());
  int ans = 0;
  int l = 1, r = m;
  while (l <= r) {
    int mid = (r + l) / 2;
    if (check(mid)) {
      ans = mid;
      l = mid + 1;
    } else
      r = mid - 1;
  }
  cout << ans << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 6 4 14
1 2 0 4 5
1 5 4
1 2 5
2 3 5
3 5 3


(G.2) Fast Input

5 6 4 14
1 4 0 4 5
1 5 2
1 2 5
2 3 5
3 5 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int const MAXN = 2e5 + 9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int m, n, k, t; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int a[MAXN]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int occ[MAXN]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<pair<int, int>, int>> v; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
bool check(int x) { /* line 8 slow_hit_count: 3, fast_hit_count: 2 */
  int mn = a[x - 1]; /* line 9 slow_hit_count: 3, fast_hit_count: 2 */
  long long int ret = 0; /* line 10 slow_hit_count: 3, fast_hit_count: 2 */
  memset(occ, 0, sizeof occ); /* line 11 slow_hit_count: 3, fast_hit_count: 2 */
  for (int i = 0; i < k; i++) { /* line 12 slow_hit_count: 15, fast_hit_count: 10 */
    int d = v[i].second; /* line 13 slow_hit_count: 12, fast_hit_count: 8 */
    int l = v[i].first.first; /* line 14 slow_hit_count: 12, fast_hit_count: 8 */
    int r = v[i].first.second; /* line 15 slow_hit_count: 12, fast_hit_count: 8 */
    if (d > mn) { /* line 16 slow_hit_count: 12, fast_hit_count: 8 */
      occ[l]++; /* line 17 slow_hit_count: 6, fast_hit_count: 6 */
      occ[r + 1]--; /* line 18 slow_hit_count: 6, fast_hit_count: 6 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i < MAXN; i++) { /* line 21 slow_hit_count: 600027, fast_hit_count: 400018 */
    occ[i] += occ[i - 1]; /* line 22 slow_hit_count: 600024, fast_hit_count: 400016 */
    ret += 2 * (occ[i] > 0); /* line 23 slow_hit_count: 600024, fast_hit_count: 400016 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  ret += n + 1; /* line 25 slow_hit_count: 3, fast_hit_count: 2 */
  return ret <= t; /* line 26 slow_hit_count: 3, fast_hit_count: 2 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0), cout.tie(0); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> m >> n >> k >> t; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < m; i++) cin >> a[i]; /* line 32 slow_hit_count: 6, fast_hit_count: 6 */
  sort(a, a + m); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  reverse(a, a + m); /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < k; i++) { /* line 35 slow_hit_count: 5, fast_hit_count: 5 */
    int l, r, d; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> l >> r >> d; /* line 37 slow_hit_count: 4, fast_hit_count: 4 */
    v.push_back({{l, r}, d}); /* line 38 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  sort(v.begin(), v.end()); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 0; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  int l = 1, r = m; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  while (l <= r) { /* line 43 slow_hit_count: 4, fast_hit_count: 3 */
    int mid = (r + l) / 2; /* line 44 slow_hit_count: 3, fast_hit_count: 2 */
    if (check(mid)) { /* line 45 slow_hit_count: 3, fast_hit_count: 2 */
      ans = mid; /* line 46 slow_hit_count: 2, fast_hit_count: 1 */
      l = mid + 1; /* line 47 slow_hit_count: 2, fast_hit_count: 1 */
    } else /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      r = mid - 1; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 52 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose why the given C program runs slowly for certain inputs, we'll analyze the hit counts and identify performance bottlenecks. Then, we'll derive performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - **Function `check`**: This function has a significantly higher hit count for the slow input. Notably, line 21 (`for (int i = 1; i < MAXN; i++)` loop) has very high hit counts (600,027 for slow input vs. 400,018 for fast input).
   - Lines 22 and 23 inside this loop are also executed a large number of times, indicating that this loop is a major contributor to the slowdown.

2. **Loop Analysis**:
   - The loop from line 21 iterates over a large range (`1` to `MAXN`). This is a potential bottleneck since it accumulates a large value of `ret` based on the `occ` array, which is updated based on the input traps.

3. **Interaction with Data Structures**:
   - The `occ` array acts as a counter for trap coverage, and the high iteration count indicates frequent updates and checks across this large array range. This suggests that a significant number of iterations involve non-zero updates (`occ[i] > 0`).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants:

1. **Invariant 1: High Frequency of Non-Zero Trap Influence**:
   - **Natural Language Description**: "When the number of traps that influence a large range of positions is high, the computation of potential danger zones increases significantly, slowing down the program."
   - **Explanation**: If many traps have a `d_i` greater than the selected soldiers' agility, they cover large ranges (`l_i` to `r_i`), leading to more increments and decrements in the `occ` array, which are costly when iterating over `MAXN`.

2. **Invariant 2: Extensive Iteration Over Large Range**:
   - **Natural Language Description**: "If the effective range of traps involves a substantial portion of possible positions, the iteration over this range in the `check` function becomes a computational bottleneck."
   - **Explanation**: The loop iterating from `1` to `MAXN` suggests that the problem arises when `occ` array updates are spread across this large range, causing high iteration counts and significant processing time.

3. **Invariant 3: High Trap Density with Stringent Agility Requirements**:
   - **Natural Language Description**: "If the trap density is high with strict agility requirements, the overhead of calculating valid paths for soldiers increases steeply, leading to slow performance."
   - **Explanation**: When many traps are active (due to high danger levels relative to soldiers' agility), the algorithm must frequently update the `occ` array and calculate feasible paths, increasing execution time.

These invariants capture the conditions that lead to slower execution without relying on specific input values. They guide future optimization efforts and help identify problematic input scenarios that could trigger performance degradation.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are playing a computer game, where you lead a party of m soldiers. Each soldier is characterised by his agility a_i.

The level you are trying to get through can be represented as a straight line segment from point 0 (where you and your squad is initially located) to point n + 1 (where the boss is located).

The level is filled with k traps. Each trap is represented by three numbers l_i, r_i and d_i. l_i is the location of the trap, and d_i is the danger level of the trap: whenever a soldier with agility lower than d_i steps on a trap (that is, moves to the point l_i), he gets instantly killed. Fortunately, you can disarm traps: if you move to the point r_i, you disarm this trap, and it no longer poses any danger to your soldiers. Traps don't affect you, only your soldiers.

You have t seconds to complete the level — that is, to bring some soldiers from your squad to the boss. Before the level starts, you choose which soldiers will be coming with you, and which soldiers won't be. After that, you have to bring all of the chosen soldiers to the boss. To do so, you may perform the following actions:

  * if your location is x, you may move to x + 1 or x - 1. This action consumes one second; 
  * if your location is x and the location of your squad is x, you may move to x + 1 or to x - 1 with your squad in one second. You may not perform this action if it puts some soldier in danger (i. e. the point your squad is moving into contains a non-disarmed trap with d_i greater than agility of some soldier from the squad). This action consumes one second; 
  * if your location is x and there is a trap i with r_i = x, you may disarm this trap. This action is done instantly (it consumes no time). 



Note that after each action both your coordinate and the coordinate of your squad should be integers.

You have to choose the maximum number of soldiers such that they all can be brought from the point 0 to the point n + 1 (where the boss waits) in no more than t seconds.

Input

The first line contains four integers m, n, k and t (1 ≤ m, n, k, t ≤ 2 ⋅ 10^5, n < t) — the number of soldiers, the number of integer points between the squad and the boss, the number of traps and the maximum number of seconds you may spend to bring the squad to the boss, respectively.

The second line contains m integers a_1, a_2, ..., a_m (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the agility of the i-th soldier.

Then k lines follow, containing the descriptions of traps. Each line contains three numbers l_i, r_i and d_i (1 ≤ l_i ≤ r_i ≤ n, 1 ≤ d_i ≤ 2 ⋅ 10^5) — the location of the trap, the location where the trap can be disarmed, and its danger level, respectively.

Output

Print one integer — the maximum number of soldiers you may choose so that you may bring them all to the boss in no more than t seconds.

Example

Input


5 6 4 14
1 2 3 4 5
1 5 2
1 2 5
2 3 5
3 5 3


Output


3

Note

In the first example you may take soldiers with agility 3, 4 and 5 with you. The course of action is as follows:

  * go to 2 without your squad; 
  * disarm the trap 2; 
  * go to 3 without your squad; 
  * disartm the trap 3; 
  * go to 0 without your squad; 
  * go to 7 with your squad. 



The whole plan can be executed in 13 seconds.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here, I'll translate the previously derived natural language invariants into C++ code snippets to check the conditions at runtime:

#### Invariant 1: High Frequency of Non-Zero Trap Influence
```cpp
void check_trap_influence_invariant(int trapCount, int threshold) {
    if (trapCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - High frequency of non-zero trap influence!" << endl;
        abort();
    }
}
```

#### Invariant 2: Extensive Iteration Over Large Range
```cpp
void check_extensive_iteration_invariant(int rangeSize, int threshold) {
    if (rangeSize > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - Extensive iteration over large range!" << endl;
        abort();
    }
}
```

#### Invariant 3: High Trap Density with Stringent Agility Requirements
```cpp
void check_trap_density_invariant(int activeTrapCount, int threshold) {
    if (activeTrapCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - High trap density with stringent agility requirements!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Now, I will integrate these checkers into the original C++ program at appropriate places.

```cpp
#include <bits/stdc++.h>
using namespace std;
int const MAXN = 2e5 + 9;
int m, n, k, t;
int a[MAXN];
int occ[MAXN];
vector<pair<pair<int, int>, int>> v;

// Checkers to detect performance bottlenecks
void check_trap_influence_invariant(int trapCount, int threshold) {
    if (trapCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - High frequency of non-zero trap influence!" << endl;
        abort();
    }
}

void check_extensive_iteration_invariant(int rangeSize, int threshold) {
    if (rangeSize > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - Extensive iteration over large range!" << endl;
        abort();
    }
}

void check_trap_density_invariant(int activeTrapCount, int threshold) {
    if (activeTrapCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - High trap density with stringent agility requirements!" << endl;
        abort();
    }
}

bool check(int x) {
    int mn = a[x - 1];
    long long int ret = 0;
    memset(occ, 0, sizeof occ);
    
    int activeTrapCount = 0;
    for (int i = 0; i < k; i++) {
        int d = v[i].second;
        int l = v[i].first.first;
        int r = v[i].first.second;
        if (d > mn) {
            occ[l]++;
            occ[r + 1]--;
            activeTrapCount++;
        }
    }
    
    // Check performance bottleneck for trap density
    check_trap_density_invariant(activeTrapCount, 1000); // arbitrary threshold
    
    for (int i = 1; i < MAXN; i++) {
        occ[i] += occ[i - 1];
        ret += 2 * (occ[i] > 0);
    }
    
    // Check performance bottleneck for extensive iteration
    check_extensive_iteration_invariant(MAXN, 100000);  // arbitrary threshold

    ret += n + 1;
    return ret <= t;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);
    cin >> m >> n >> k >> t;
    for (int i = 0; i < m; i++) cin >> a[i];
    sort(a, a + m);
    reverse(a, a + m);
    for (int i = 0; i < k; i++) {
        int l, r, d;
        cin >> l >> r >> d;
        v.push_back({{l, r}, d});
    }
    sort(v.begin(), v.end());
    int ans = 0;
    int l = 1, r = m;
    while (l <= r) {
        int mid = (r + l) / 2;
        if (check(mid)) {
            ans = mid;
            l = mid + 1;
        } else
            r = mid - 1;
    }
    cout << ans << "\n";
}
```

**Comments**:
- I added three checker functions to enforce the performance invariants.
- Checkers are called at strategic points to avoid tight loop overhead and ensure performance bottlenecks are detected early.
- Thresholds in checkers are arbitrary but must be adjusted based on specific performance profiling to reflect realistic conditions for your application.

