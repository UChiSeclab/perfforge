system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are playing a computer game, where you lead a party of m soldiers. Each soldier is characterised by his agility a_i.

The level you are trying to get through can be represented as a straight line segment from point 0 (where you and your squad is initially located) to point n + 1 (where the boss is located).

The level is filled with k traps. Each trap is represented by three numbers l_i, r_i and d_i. l_i is the location of the trap, and d_i is the danger level of the trap: whenever a soldier with agility lower than d_i steps on a trap (that is, moves to the point l_i), he gets instantly killed. Fortunately, you can disarm traps: if you move to the point r_i, you disarm this trap, and it no longer poses any danger to your soldiers. Traps don't affect you, only your soldiers.

You have t seconds to complete the level — that is, to bring some soldiers from your squad to the boss. Before the level starts, you choose which soldiers will be coming with you, and which soldiers won't be. After that, you have to bring all of the chosen soldiers to the boss. To do so, you may perform the following actions:

  * if your location is x, you may move to x + 1 or x - 1. This action consumes one second; 
  * if your location is x and the location of your squad is x, you may move to x + 1 or to x - 1 with your squad in one second. You may not perform this action if it puts some soldier in danger (i. e. the point your squad is moving into contains a non-disarmed trap with d_i greater than agility of some soldier from the squad). This action consumes one second; 
  * if your location is x and there is a trap i with r_i = x, you may disarm this trap. This action is done instantly (it consumes no time). 



Note that after each action both your coordinate and the coordinate of your squad should be integers.

You have to choose the maximum number of soldiers such that they all can be brought from the point 0 to the point n + 1 (where the boss waits) in no more than t seconds.

Input

The first line contains four integers m, n, k and t (1 ≤ m, n, k, t ≤ 2 ⋅ 10^5, n < t) — the number of soldiers, the number of integer points between the squad and the boss, the number of traps and the maximum number of seconds you may spend to bring the squad to the boss, respectively.

The second line contains m integers a_1, a_2, ..., a_m (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the agility of the i-th soldier.

Then k lines follow, containing the descriptions of traps. Each line contains three numbers l_i, r_i and d_i (1 ≤ l_i ≤ r_i ≤ n, 1 ≤ d_i ≤ 2 ⋅ 10^5) — the location of the trap, the location where the trap can be disarmed, and its danger level, respectively.

Output

Print one integer — the maximum number of soldiers you may choose so that you may bring them all to the boss in no more than t seconds.

Example

Input


5 6 4 14
1 2 3 4 5
1 5 2
1 2 5
2 3 5
3 5 3


Output


3

Note

In the first example you may take soldiers with agility 3, 4 and 5 with you. The course of action is as follows:

  * go to 2 without your squad; 
  * disarm the trap 2; 
  * go to 3 without your squad; 
  * disartm the trap 3; 
  * go to 0 without your squad; 
  * go to 7 with your squad. 



The whole plan can be executed in 13 seconds.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using ll = long long;
const ll maxSize = 200007;
using namespace std;
ll a[maxSize];
unordered_map<ll, set<pair<ll, ll>>> dexToLR;
ll minDisarmTime(const vector<pair<ll, ll>>& traps) {
  ll time = 0;
  auto it = traps.begin();
  ll st = 0;
  ll end = -1;
  while (it != traps.end()) {
    auto next = *it;
    if (next.first > end) {
      time += end - st + 1;
      st = next.first;
    }
    end = max(end, next.second);
    ++it;
  }
  time += end - st + 1;
  return 2 * time;
}
vector<pair<ll, ll>> chooseTrapsByDex(ll dex) {
  vector<pair<ll, ll>> result;
  result.reserve(maxSize);
  for (ll i = dex; i < maxSize; ++i) {
    if (dexToLR.find(i) != dexToLR.end()) {
      auto& toInsert = dexToLR.at(i);
      result.insert(result.end(), toInsert.begin(), toInsert.end());
    }
  }
  sort(result.begin(), result.end());
  return result;
}
bool solve(ll dex, ll maxTime) {
  auto traps = chooseTrapsByDex(dex);
  auto time = minDisarmTime(traps);
  return time <= maxTime;
}
ll solve(ll maxTime) {
  ll minDex = 1;
  ll maxDex = maxSize;
  while (minDex < maxDex) {
    ll mid = (minDex + maxDex) / 2 + 1;
    auto enoughTime = solve(mid, maxTime);
    if (enoughTime)
      maxDex = mid - 1;
    else
      minDex = mid;
  }
  auto enoughTime = solve(maxDex, maxTime);
  return (enoughTime ? maxDex : maxDex + 1);
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  ll n, m, k, t;
  cin >> m >> n >> k >> t;
  for (ll i = 0; i < m; ++i) cin >> a[i];
  for (ll i = 0; i < k; ++i) {
    ll l, d, r;
    cin >> l >> r >> d;
    dexToLR[d].emplace(l, r);
  }
  auto maxTime = t - n - 1;
  auto maxDexOfSoldier = solve(maxTime);
  ll answer = 0;
  for (ll i = 0; i < m; ++i)
    if (a[i] >= maxDexOfSoldier - 1) ++answer;
  cout << answer;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5 7 4 14
1 2 0 4 5
1 4 2
1 3 1
2 2 0
3 5 3


(G.2) Fast Input

1 3 1 7
1
1 2 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const ll maxSize = 200007; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
ll a[maxSize]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
unordered_map<ll, set<pair<ll, ll>>> dexToLR; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
ll minDisarmTime(const vector<pair<ll, ll>>& traps) { /* line 7 slow_hit_count: 19, fast_hit_count: 19 */
  ll time = 0; /* line 8 slow_hit_count: 19, fast_hit_count: 19 */
  auto it = traps.begin(); /* line 9 slow_hit_count: 19, fast_hit_count: 19 */
  ll st = 0; /* line 10 slow_hit_count: 19, fast_hit_count: 19 */
  ll end = -1; /* line 11 slow_hit_count: 19, fast_hit_count: 19 */
  while (it != traps.end()) { /* line 12 slow_hit_count: 24, fast_hit_count: 21 */
    auto next = *it; /* line 13 slow_hit_count: 5, fast_hit_count: 2 */
    if (next.first > end) { /* line 14 slow_hit_count: 5, fast_hit_count: 2 */
      time += end - st + 1; /* line 15 slow_hit_count: 3, fast_hit_count: 2 */
      st = next.first; /* line 16 slow_hit_count: 3, fast_hit_count: 2 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    end = max(end, next.second); /* line 18 slow_hit_count: 5, fast_hit_count: 2 */
    ++it; /* line 19 slow_hit_count: 5, fast_hit_count: 2 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  time += end - st + 1; /* line 21 slow_hit_count: 19, fast_hit_count: 19 */
  return 2 * time; /* line 22 slow_hit_count: 19, fast_hit_count: 19 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<ll, ll>> chooseTrapsByDex(ll dex) { /* line 24 slow_hit_count: 19, fast_hit_count: 19 */
  vector<pair<ll, ll>> result; /* line 25 slow_hit_count: 19, fast_hit_count: 19 */
  result.reserve(maxSize); /* line 26 slow_hit_count: 19, fast_hit_count: 19 */
  for (ll i = dex; i < maxSize; ++i) { /* line 27 slow_hit_count: 3600116, fast_hit_count: 3600116 */
    if (dexToLR.find(i) != dexToLR.end()) { /* line 28 slow_hit_count: 3600097, fast_hit_count: 3600097 */
      auto& toInsert = dexToLR.at(i); /* line 29 slow_hit_count: 5, fast_hit_count: 2 */
      result.insert(result.end(), toInsert.begin(), toInsert.end()); /* line 30 slow_hit_count: 5, fast_hit_count: 2 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  sort(result.begin(), result.end()); /* line 33 slow_hit_count: 19, fast_hit_count: 19 */
  return result; /* line 34 slow_hit_count: 19, fast_hit_count: 19 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
bool solve(ll dex, ll maxTime) { /* line 36 slow_hit_count: 19, fast_hit_count: 19 */
  auto traps = chooseTrapsByDex(dex); /* line 37 slow_hit_count: 19, fast_hit_count: 19 */
  auto time = minDisarmTime(traps); /* line 38 slow_hit_count: 19, fast_hit_count: 19 */
  return time <= maxTime; /* line 39 slow_hit_count: 38, fast_hit_count: 38 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
ll solve(ll maxTime) { /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  ll minDex = 1; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  ll maxDex = maxSize; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  while (minDex < maxDex) { /* line 44 slow_hit_count: 19, fast_hit_count: 19 */
    ll mid = (minDex + maxDex) / 2 + 1; /* line 45 slow_hit_count: 18, fast_hit_count: 18 */
    auto enoughTime = solve(mid, maxTime); /* line 46 slow_hit_count: 18, fast_hit_count: 18 */
    if (enoughTime) /* line 47 slow_hit_count: 18, fast_hit_count: 18 */
      maxDex = mid - 1; /* line 48 slow_hit_count: 17, fast_hit_count: 17 */
    else /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      minDex = mid; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  auto enoughTime = solve(maxDex, maxTime); /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  return (enoughTime ? maxDex : maxDex + 1); /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  ll n, m, k, t; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> m >> n >> k >> t; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  for (ll i = 0; i < m; ++i) cin >> a[i]; /* line 60 slow_hit_count: 6, fast_hit_count: 2 */
  for (ll i = 0; i < k; ++i) { /* line 61 slow_hit_count: 5, fast_hit_count: 2 */
    ll l, d, r; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> l >> r >> d; /* line 63 slow_hit_count: 4, fast_hit_count: 1 */
    dexToLR[d].emplace(l, r); /* line 64 slow_hit_count: 4, fast_hit_count: 1 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  auto maxTime = t - n - 1; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  auto maxDexOfSoldier = solve(maxTime); /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  ll answer = 0; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  for (ll i = 0; i < m; ++i) /* line 69 slow_hit_count: 6, fast_hit_count: 2 */
    if (a[i] >= maxDexOfSoldier - 1) ++answer; /* line 70 slow_hit_count: 5, fast_hit_count: 1 */
  cout << answer; /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 72 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the line-level hit counts for both the slow and fast inputs, we can identify several key areas where the code execution significantly differs:

1. **`chooseTrapsByDex` Function (Lines 24-34):** 
   - The hit counts indicate that the loop on line 27 is executed a vast number of times (3600116 hits). This suggests that the `dexToLR` map is being searched extensively for each `dex` value, which is inefficient.

2. **Loop and Conditionals in `minDisarmTime` Function (Lines 12-22):**
   - The `while` loop (line 12) runs significantly more for the slow input, indicating a potential inefficiency in handling the traps, particularly when many traps are selected by the `chooseTrapsByDex` function.

3. **Binary Search in `solve` Function (Lines 44-51):**
   - The binary search loop hits the `solve` function (lines 46 and 52) numerous times, indicating that determining if a certain dexterity level can finish in time is computationally intensive, especially when the number of traps or levels of dexterity that must be checked is large.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive several performance-characterizing invariants that describe conditions under which the code is likely to slow down:

1. **Frequent Lookups in Large Maps:**
   - **Invariant:** "If the agility range (dex) is large and many traps need to be checked for each dexterity level, the performance may degrade due to frequent lookups in a large data structure."
   - **Explanation:** The code spends significant time iterating over potential trap dexterities, leading to frequent lookups and insertions in the `dexToLR` map. As the range of dexterity levels increases, this becomes a bottleneck.

2. **Handling Overlapping Traps:**
   - **Invariant:** "If there are many overlapping traps or traps with large ranges, the program may slow down due to increased complexity in trap management and disarming operations."
   - **Explanation:** Overlapping traps force the program to frequently adjust start and end times, increasing computational overhead as seen in the `minDisarmTime` function.

3. **Increasing Binary Search Steps:**
   - **Invariant:** "If the binary search space is large due to a broad range of soldier dexterities, the program may slow down as it repeatedly evaluates midpoints to determine feasibility."
   - **Explanation:** The binary search in `solve` function is potentially inefficient when it has to cover a wide range of dexterity values, which might lead to excessive evaluations and recalculations.

4. **Excessive Trap Selection:**
   - **Invariant:** "When a large number of traps have to be selected and processed for each dexterity level, particularly near maximum constraints, the program may slow down significantly."
   - **Explanation:** Each time the program evaluates whether a certain group of soldiers can pass, it selects and sorts traps which can be costly if the traps are numerous and complex. 

By understanding these conditions, one can predict when the program will experience performance issues, providing guidance on optimizing the code or constraints to avoid such slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are playing a computer game, where you lead a party of m soldiers. Each soldier is characterised by his agility a_i.

The level you are trying to get through can be represented as a straight line segment from point 0 (where you and your squad is initially located) to point n + 1 (where the boss is located).

The level is filled with k traps. Each trap is represented by three numbers l_i, r_i and d_i. l_i is the location of the trap, and d_i is the danger level of the trap: whenever a soldier with agility lower than d_i steps on a trap (that is, moves to the point l_i), he gets instantly killed. Fortunately, you can disarm traps: if you move to the point r_i, you disarm this trap, and it no longer poses any danger to your soldiers. Traps don't affect you, only your soldiers.

You have t seconds to complete the level — that is, to bring some soldiers from your squad to the boss. Before the level starts, you choose which soldiers will be coming with you, and which soldiers won't be. After that, you have to bring all of the chosen soldiers to the boss. To do so, you may perform the following actions:

  * if your location is x, you may move to x + 1 or x - 1. This action consumes one second; 
  * if your location is x and the location of your squad is x, you may move to x + 1 or to x - 1 with your squad in one second. You may not perform this action if it puts some soldier in danger (i. e. the point your squad is moving into contains a non-disarmed trap with d_i greater than agility of some soldier from the squad). This action consumes one second; 
  * if your location is x and there is a trap i with r_i = x, you may disarm this trap. This action is done instantly (it consumes no time). 



Note that after each action both your coordinate and the coordinate of your squad should be integers.

You have to choose the maximum number of soldiers such that they all can be brought from the point 0 to the point n + 1 (where the boss waits) in no more than t seconds.

Input

The first line contains four integers m, n, k and t (1 ≤ m, n, k, t ≤ 2 ⋅ 10^5, n < t) — the number of soldiers, the number of integer points between the squad and the boss, the number of traps and the maximum number of seconds you may spend to bring the squad to the boss, respectively.

The second line contains m integers a_1, a_2, ..., a_m (1 ≤ a_i ≤ 2 ⋅ 10^5), where a_i is the agility of the i-th soldier.

Then k lines follow, containing the descriptions of traps. Each line contains three numbers l_i, r_i and d_i (1 ≤ l_i ≤ r_i ≤ n, 1 ≤ d_i ≤ 2 ⋅ 10^5) — the location of the trap, the location where the trap can be disarmed, and its danger level, respectively.

Output

Print one integer — the maximum number of soldiers you may choose so that you may bring them all to the boss in no more than t seconds.

Example

Input


5 6 4 14
1 2 3 4 5
1 5 2
1 2 5
2 3 5
3 5 3


Output


3

Note

In the first example you may take soldiers with agility 3, 4 and 5 with you. The course of action is as follows:

  * go to 2 without your squad; 
  * disarm the trap 2; 
  * go to 3 without your squad; 
  * disartm the trap 3; 
  * go to 0 without your squad; 
  * go to 7 with your squad. 



The whole plan can be executed in 13 seconds.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Now we will translate the performance-characterizing invariants derived in natural language into runtime checks in C++. Each invariant will be implemented with a checker function or condition.

1. **Frequent Lookups in Large Maps:**

   This invariant checks if the dexterity range is large and many traps need to be checked, which could degrade performance.

   ```cpp
   void check_map_lookup_invariant(size_t dexRange, size_t trapCount) {
       if (dexRange > 100000 && trapCount > 1000) {
           cerr << "Warning: Performance bottleneck condition triggered due to large map lookups!" << endl;
           abort();
       }
   }
   ```

2. **Handling Overlapping Traps:**

   This invariant checks if there are many overlapping traps which can complicate the disarming process.

   ```cpp
   void check_overlapping_traps_invariant(size_t overlappingTraps) {
       if (overlappingTraps > 1000) {
           cerr << "Warning: Performance bottleneck condition triggered due to overlapping traps!" << endl;
           abort();
       }
   }
   ```

3. **Increasing Binary Search Steps:**

   This invariant checks if the binary search on soldier dexterity values is inefficient due to a large search space.

   ```cpp
   void check_binary_search_invariant(size_t dexteritySpan) {
       if (dexteritySpan > 100000) {
           cerr << "Warning: Performance bottleneck condition triggered due to large binary search space!" << endl;
           abort();
       }
   }
   ```

4. **Excessive Trap Selection:**

   This invariant checks if an excessive number of traps are being selected for each dexterity level.

   ```cpp
   void check_trap_selection_invariant(size_t selectedTraps) {
       if (selectedTraps > 1000) {
           cerr << "Warning: Performance bottleneck condition triggered due to excessive trap selection!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original C++ Program

Now, we integrate these checkers into the original C++ program at appropriate points in the control flow.

```cpp
#include <bits/stdc++.h>
using ll = long long;
const ll maxSize = 200007;
using namespace std;
ll a[maxSize];
unordered_map<ll, set<pair<ll, ll>>> dexToLR;

// Checker functions
void check_map_lookup_invariant(size_t dexRange, size_t trapCount) {
    if (dexRange > 100000 && trapCount > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large map lookups!" << endl;
        abort();
    }
}

void check_overlapping_traps_invariant(size_t overlappingTraps) {
    if (overlappingTraps > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered due to overlapping traps!" << endl;
        abort();
    }
}

void check_binary_search_invariant(size_t dexteritySpan) {
    if (dexteritySpan > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large binary search space!" << endl;
        abort();
    }
}

void check_trap_selection_invariant(size_t selectedTraps) {
    if (selectedTraps > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive trap selection!" << endl;
        abort();
    }
}

ll minDisarmTime(const vector<pair<ll, ll>>& traps) {
    ll time = 0;
    auto it = traps.begin();
    ll st = 0;
    ll end = -1;
    size_t overlappingTraps = 0;
    while (it != traps.end()) {
        auto next = *it;
        if (next.first > end) {
            time += end - st + 1;
            st = next.first;
        }
        end = max(end, next.second);
        ++it;
        overlappingTraps++; // Count overlapping traps
    }
    time += end - st + 1;

    // Check overlapping traps invariant
    check_overlapping_traps_invariant(overlappingTraps);

    return 2 * time;
}

vector<pair<ll, ll>> chooseTrapsByDex(ll dex) {
    vector<pair<ll, ll>> result;
    result.reserve(maxSize);
    for (ll i = dex; i < maxSize; ++i) {
        if (dexToLR.find(i) != dexToLR.end()) {
            auto& toInsert = dexToLR.at(i);
            result.insert(result.end(), toInsert.begin(), toInsert.end());
        }
    }
    sort(result.begin(), result.end());

    // Check map lookup invariant
    check_map_lookup_invariant(maxSize - dex, result.size());

    return result;
}

bool solve(ll dex, ll maxTime) {
    auto traps = chooseTrapsByDex(dex);
    auto time = minDisarmTime(traps);

    // Check trap selection invariant
    check_trap_selection_invariant(traps.size());

    return time <= maxTime;
}

ll solve(ll maxTime) {
    ll minDex = 1;
    ll maxDex = maxSize;

    // Check initial binary search invariant
    check_binary_search_invariant(maxDex - minDex);

    while (minDex < maxDex) {
        ll mid = (minDex + maxDex) / 2 + 1;
        auto enoughTime = solve(mid, maxTime);
        if (enoughTime)
            maxDex = mid - 1;
        else
            minDex = mid;

        // Check binary search invariant at each step
        check_binary_search_invariant(maxDex - minDex);
    }
    auto enoughTime = solve(maxDex, maxTime);
    return (enoughTime ? maxDex : maxDex + 1);
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    ll n, m, k, t;
    cin >> m >> n >> k >> t;
    for (ll i = 0; i < m; ++i) cin >> a[i];
    for (ll i = 0; i < k; ++i) {
        ll l, d, r;
        cin >> l >> r >> d;
        dexToLR[d].emplace(l, r);
    }
    auto maxTime = t - n - 1;
    auto maxDexOfSoldier = solve(maxTime);
    ll answer = 0;
    for (ll i = 0; i < m; ++i)
        if (a[i] >= maxDexOfSoldier - 1) ++answer;
    cout << answer;
}
```

### Explanation of Integration

- **Map Lookup Invariant:** Added after `chooseTrapsByDex` to check if there is excessive iteration over dexterity values.
- **Overlapping Traps Invariant:** Added inside `minDisarmTime` to monitor overlapping trap ranges.
- **Binary Search Invariant:** Placed before and during the binary search loop in `solve`.
- **Trap Selection Invariant:** Checked after trap selection in the `solve` function to ensure excessive trap processing is monitored.

These checks help diagnose performance issues dynamically and abort the program if any are detected.

