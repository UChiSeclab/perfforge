system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Denis, after buying flowers and sweets (you will learn about this story in the next task), went to a date with Nastya to ask her to become a couple. Now, they are sitting in the cafe and finally... Denis asks her to be together, but ... Nastya doesn't give any answer. 

The poor boy was very upset because of that. He was so sad that he punched some kind of scoreboard with numbers. The numbers are displayed in the same way as on an electronic clock: each digit position consists of 7 segments, which can be turned on or off to display different numbers. The picture shows how all 10 decimal digits are displayed: 

<image>

After the punch, some segments stopped working, that is, some segments might stop glowing if they glowed earlier. But Denis remembered how many sticks were glowing and how many are glowing now. Denis broke exactly k segments and he knows which sticks are working now. Denis came up with the question: what is the maximum possible number that can appear on the board if you turn on exactly k sticks (which are off now)? 

It is allowed that the number includes leading zeros.

Input

The first line contains integer n (1 ≤ n ≤ 2000) — the number of digits on scoreboard and k (0 ≤ k ≤ 2000) — the number of segments that stopped working.

The next n lines contain one binary string of length 7, the i-th of which encodes the i-th digit of the scoreboard.

Each digit on the scoreboard consists of 7 segments. We number them, as in the picture below, and let the i-th place of the binary string be 0 if the i-th stick is not glowing and 1 if it is glowing. Then a binary string of length 7 will specify which segments are glowing now.

<image>

Thus, the sequences "1110111", "0010010", "1011101", "1011011", "0111010", "1101011", "1101111", "1010010", "1111111", "1111011" encode in sequence all digits from 0 to 9 inclusive.

Output

Output a single number consisting of n digits — the maximum number that can be obtained if you turn on exactly k sticks or -1, if it is impossible to turn on exactly k sticks so that a correct number appears on the scoreboard digits.

Examples

Input


1 7
0000000


Output


8

Input


2 5
0010010
0010010


Output


97

Input


3 5
0100001
1001001
1010011


Output


-1

Note

In the first test, we are obliged to include all 7 sticks and get one 8 digit on the scoreboard.

In the second test, we have sticks turned on so that units are formed. For 5 of additionally included sticks, you can get the numbers 07, 18, 34, 43, 70, 79, 81 and 97, of which we choose the maximum — 97.

In the third test, it is impossible to turn on exactly 5 sticks so that a sequence of numbers appears on the scoreboard.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 2e5 + 5;
string rep[] = {"1110111", "0010010", "1011101", "1011011", "0111010",
                "1101011", "1101111", "1010010", "1111111", "1111011"};
string dig[2005];
bitset<N> val[2005];
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  int n;
  cin >> n;
  int k;
  cin >> k;
  for (int i = 1; i <= n; ++i) cin >> dig[i];
  reverse(dig + 1, dig + 1 + n);
  val[0] = 1;
  for (int i = 1; i <= n; ++i)
    for (int c = 0; c < 10; ++c) {
      int w = 0;
      for (int j = 0; j < 7; ++j) {
        if (dig[i][j] > rep[c][j]) {
          w = k + 1;
          break;
        }
        w += rep[c][j] - dig[i][j];
      }
      val[i] |= (val[i - 1] << w);
    }
  if (!val[n][k]) {
    cout << "-1";
    return 0;
  }
  for (int i = n; i >= 1; --i)
    for (int c = 9; c >= 0; --c) {
      int w = 0;
      for (int j = 0; j < 7; ++j) {
        if (dig[i][j] > rep[c][j]) {
          w = k + 1;
          break;
        }
        w += rep[c][j] - dig[i][j];
      }
      if (w > k) continue;
      if (val[i - 1][k - w]) {
        k -= w;
        cout << c;
        break;
      }
    }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 1
0101010
0101111
1111011
0111010
1101001
1111011
1110111
1010010
1111111
0010010


(G.2) Fast Input

1 1
1111011
1010010


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 2e5 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
string rep[] = {"1110111", "0010010", "1011101", "1011011", "0111010", /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
                "1101011", "1101111", "1010010", "1111111", "1111011"}; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
string dig[2005]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
bitset<N> val[2005]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  int k; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> k; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) cin >> dig[i]; /* line 16 slow_hit_count: 11, fast_hit_count: 2 */
  reverse(dig + 1, dig + 1 + n); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  val[0] = 1; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) /* line 19 slow_hit_count: 11, fast_hit_count: 2 */
    for (int c = 0; c < 10; ++c) { /* line 20 slow_hit_count: 110, fast_hit_count: 11 */
      int w = 0; /* line 21 slow_hit_count: 100, fast_hit_count: 10 */
      for (int j = 0; j < 7; ++j) { /* line 22 slow_hit_count: 437, fast_hit_count: 34 */
        if (dig[i][j] > rep[c][j]) { /* line 23 slow_hit_count: 404, fast_hit_count: 32 */
          w = k + 1; /* line 24 slow_hit_count: 67, fast_hit_count: 8 */
          break; /* line 25 slow_hit_count: 67, fast_hit_count: 8 */
        } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
        w += rep[c][j] - dig[i][j]; /* line 27 slow_hit_count: 337, fast_hit_count: 24 */
      } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      val[i] |= (val[i - 1] << w); /* line 29 slow_hit_count: 100, fast_hit_count: 10 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  if (!val[n][k]) { /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "-1"; /* line 32 slow_hit_count: 1, fast_hit_count: 0 */
    return 0; /* line 33 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = n; i >= 1; --i) /* line 35 slow_hit_count: 0, fast_hit_count: 2 */
    for (int c = 9; c >= 0; --c) { /* line 36 slow_hit_count: 0, fast_hit_count: 2 */
      int w = 0; /* line 37 slow_hit_count: 0, fast_hit_count: 2 */
      for (int j = 0; j < 7; ++j) { /* line 38 slow_hit_count: 0, fast_hit_count: 16 */
        if (dig[i][j] > rep[c][j]) { /* line 39 slow_hit_count: 0, fast_hit_count: 14 */
          w = k + 1; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
          break; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
        w += rep[c][j] - dig[i][j]; /* line 43 slow_hit_count: 0, fast_hit_count: 14 */
      } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      if (w > k) continue; /* line 45 slow_hit_count: 0, fast_hit_count: 2 */
      if (val[i - 1][k - w]) { /* line 46 slow_hit_count: 0, fast_hit_count: 2 */
        k -= w; /* line 47 slow_hit_count: 0, fast_hit_count: 1 */
        cout << c; /* line 48 slow_hit_count: 0, fast_hit_count: 1 */
        break; /* line 49 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 52 slow_hit_count: 0, fast_hit_count: 1 */


assistant: To diagnose the performance issues in the provided C program handling scoreboard digit segments, I will conduct a two-phase analysis:

### Phase 1: Identify Expensive or Inefficient Code Segments

Analyzing the hit counts for the provided code, the main differences between the fast and slow inputs occur primarily in the following areas:

1. **Loop through digits and potential numbers (lines 19-30):**
   - The loops at lines 19 and 20 are responsible for iterating through each digit and each possible number (0-9).
   - The slow input has significantly more iterations (110 times) compared to the fast input (11 times). This indicates more complex or numerous transitions are required to explore possible configurations for the scoreboard segments.

2. **Nested loop processing segments (lines 22-27):**
   - Within these outer loops, another loop (line 22) iterates through the 7 segments per digit.
   - For the slow input, this loop has a total of 437 hits, while for the fast input, it has only 34 hits. This suggests a larger or more complex decision space when determining which segments can be turned on/off given the constraints.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following performance-characterizing invariants:

1. **High Number of Digits or Segments:**
   - **Invariant:** "When the number of scoreboard digits is large, the search space for possible configurations increases, potentially leading to slower computations. This is exacerbated if many segments per digit need to be manipulated."
   - This condition captures the inefficiency seen when the input size increases, especially when each digit configuration requires careful consideration of segment transitions.

2. **Complex Segment Configuration:**
   - **Invariant:** "If the initial configuration of digits requires complex transformations (i.e., many bits need to be flipped to form valid digits), the computation may slow down significantly."
   - This ties directly into the processing of each digit's segments. With more segments initially turned off or requiring specific transitions, the computation of valid digits becomes more intensive.

3. **Iteration Over Valid Configurations:**
   - **Invariant:** "When the program needs to iterate over many potential configurations to match the target segment count, it can result in a performance bottleneck, particularly when k approaches n*7."
   - Here, the value of k (segments that can be turned on) is pivotal. High k values relative to n or the complexity of segment configurations can lead to extensive exploration for valid digit formations.

4. **Checking Bitset Combinations:**
   - **Invariant:** "If the bitset operations to track valid combinations of segment configurations become extensive, they can contribute to slowdowns. This is especially true when many previous states need to be considered."
   - This invariant addresses the use of bitsets and the shifting operations performed extensively during the execution, which can be computationally expensive.

These invariants aim to abstract the conditions leading to the program's slow performance, focusing on input size, segment complexity, and configuration space, while adhering to the given problem constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Denis, after buying flowers and sweets (you will learn about this story in the next task), went to a date with Nastya to ask her to become a couple. Now, they are sitting in the cafe and finally... Denis asks her to be together, but ... Nastya doesn't give any answer. 

The poor boy was very upset because of that. He was so sad that he punched some kind of scoreboard with numbers. The numbers are displayed in the same way as on an electronic clock: each digit position consists of 7 segments, which can be turned on or off to display different numbers. The picture shows how all 10 decimal digits are displayed: 

<image>

After the punch, some segments stopped working, that is, some segments might stop glowing if they glowed earlier. But Denis remembered how many sticks were glowing and how many are glowing now. Denis broke exactly k segments and he knows which sticks are working now. Denis came up with the question: what is the maximum possible number that can appear on the board if you turn on exactly k sticks (which are off now)? 

It is allowed that the number includes leading zeros.

Input

The first line contains integer n (1 ≤ n ≤ 2000) — the number of digits on scoreboard and k (0 ≤ k ≤ 2000) — the number of segments that stopped working.

The next n lines contain one binary string of length 7, the i-th of which encodes the i-th digit of the scoreboard.

Each digit on the scoreboard consists of 7 segments. We number them, as in the picture below, and let the i-th place of the binary string be 0 if the i-th stick is not glowing and 1 if it is glowing. Then a binary string of length 7 will specify which segments are glowing now.

<image>

Thus, the sequences "1110111", "0010010", "1011101", "1011011", "0111010", "1101011", "1101111", "1010010", "1111111", "1111011" encode in sequence all digits from 0 to 9 inclusive.

Output

Output a single number consisting of n digits — the maximum number that can be obtained if you turn on exactly k sticks or -1, if it is impossible to turn on exactly k sticks so that a correct number appears on the scoreboard digits.

Examples

Input


1 7
0000000


Output


8

Input


2 5
0010010
0010010


Output


97

Input


3 5
0100001
1001001
1010011


Output


-1

Note

In the first test, we are obliged to include all 7 sticks and get one 8 digit on the scoreboard.

In the second test, we have sticks turned on so that units are formed. For 5 of additionally included sticks, you can get the numbers 07, 18, 34, 43, 70, 79, 81 and 97, of which we choose the maximum — 97.

In the third test, it is impossible to turn on exactly 5 sticks so that a sequence of numbers appears on the scoreboard.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ checker code snippets implementing the performance-characterizing invariants derived in the previous step:

1. **High Number of Digits or Segments:**

```cpp
void check_digit_count_invariant(int n) {
    if (n > 1500) { // Threshold chosen based on maximum n value being 2000
        cerr << "Warning: Performance bottleneck condition triggered - high number of digits!" << endl;
        abort();
    }
}
```

2. **Complex Segment Configuration:**

```cpp
void check_complex_segment_invariant(int k, int n) {
    if (k > n * 4) { // Assuming each digit may need an average of 4 segments changed
        cerr << "Warning: Performance bottleneck condition triggered - complex segment transformations needed!" << endl;
        abort();
    }
}
```

3. **Iteration Over Valid Configurations:**

```cpp
void check_iteration_invariant(int k, int n) {
    if (k > n * 5) { // This condition marks a potentially large search space
        cerr << "Warning: Performance bottleneck condition triggered - large iteration over configurations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Snippets into the Original Program

Here is the original program with the integrated checker functions:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 2e5 + 5;
string rep[] = {"1110111", "0010010", "1011101", "1011011", "0111010",
                "1101011", "1101111", "1010010", "1111111", "1111011"};
string dig[2005];
bitset<N> val[2005];

// Checker function to detect high number of digits
void check_digit_count_invariant(int n) {
    if (n > 1500) { // Threshold chosen based on maximum n value being 2000
        cerr << "Warning: Performance bottleneck condition triggered - high number of digits!" << endl;
        abort();
    }
}

// Checker function to detect complex segment configurations
void check_complex_segment_invariant(int k, int n) {
    if (k > n * 4) { // Assuming each digit may need an average of 4 segments changed
        cerr << "Warning: Performance bottleneck condition triggered - complex segment transformations needed!" << endl;
        abort();
    }
}

// Checker function to detect iteration over large configurations
void check_iteration_invariant(int k, int n) {
    if (k > n * 5) { // This condition marks a potentially large search space
        cerr << "Warning: Performance bottleneck condition triggered - large iteration over configurations!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin >> n;
    int k;
    cin >> k;

    // Place checkers early before the main computation
    check_digit_count_invariant(n); // Checks for too many scoreboard digits
    check_complex_segment_invariant(k, n); // Checks for complexity in segment configuration
    check_iteration_invariant(k, n); // Checks for potential large iteration requirements

    for (int i = 1; i <= n; ++i) cin >> dig[i];
    reverse(dig + 1, dig + 1 + n);
    val[0] = 1;
    for (int i = 1; i <= n; ++i)
        for (int c = 0; c < 10; ++c) {
            int w = 0;
            for (int j = 0; j < 7; ++j) {
                if (dig[i][j] > rep[c][j]) {
                    w = k + 1;
                    break;
                }
                w += rep[c][j] - dig[i][j];
            }
            val[i] |= (val[i - 1] << w);
        }
    if (!val[n][k]) {
        cout << "-1";
        return 0;
    }
    for (int i = n; i >= 1; --i)
        for (int c = 9; c >= 0; --c) {
            int w = 0;
            for (int j = 0; j < 7; ++j) {
                if (dig[i][j] > rep[c][j]) {
                    w = k + 1;
                    break;
                }
                w += rep[c][j] - dig[i][j];
            }
            if (w > k) continue;
            if (val[i - 1][k - w]) {
                k -= w;
                cout << c;
                break;
            }
        }
}
```

### Explanation of Instrumented Code
- The checker functions `check_digit_count_invariant`, `check_complex_segment_invariant`, and `check_iteration_invariant` are placed immediately after reading the input values for `n` and `k`, ensuring that potentially problematic input scenarios are detected early, without adding overhead inside critical loops.
- These functions will abort execution and provide a warning if the conditions indicating a performance bottleneck are met. This helps in identifying performance-impacting scenarios during runtime.

