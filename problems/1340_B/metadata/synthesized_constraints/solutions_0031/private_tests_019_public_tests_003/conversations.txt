system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Denis, after buying flowers and sweets (you will learn about this story in the next task), went to a date with Nastya to ask her to become a couple. Now, they are sitting in the cafe and finally... Denis asks her to be together, but ... Nastya doesn't give any answer. 

The poor boy was very upset because of that. He was so sad that he punched some kind of scoreboard with numbers. The numbers are displayed in the same way as on an electronic clock: each digit position consists of 7 segments, which can be turned on or off to display different numbers. The picture shows how all 10 decimal digits are displayed: 

<image>

After the punch, some segments stopped working, that is, some segments might stop glowing if they glowed earlier. But Denis remembered how many sticks were glowing and how many are glowing now. Denis broke exactly k segments and he knows which sticks are working now. Denis came up with the question: what is the maximum possible number that can appear on the board if you turn on exactly k sticks (which are off now)? 

It is allowed that the number includes leading zeros.

Input

The first line contains integer n (1 ≤ n ≤ 2000) — the number of digits on scoreboard and k (0 ≤ k ≤ 2000) — the number of segments that stopped working.

The next n lines contain one binary string of length 7, the i-th of which encodes the i-th digit of the scoreboard.

Each digit on the scoreboard consists of 7 segments. We number them, as in the picture below, and let the i-th place of the binary string be 0 if the i-th stick is not glowing and 1 if it is glowing. Then a binary string of length 7 will specify which segments are glowing now.

<image>

Thus, the sequences "1110111", "0010010", "1011101", "1011011", "0111010", "1101011", "1101111", "1010010", "1111111", "1111011" encode in sequence all digits from 0 to 9 inclusive.

Output

Output a single number consisting of n digits — the maximum number that can be obtained if you turn on exactly k sticks or -1, if it is impossible to turn on exactly k sticks so that a correct number appears on the scoreboard digits.

Examples

Input


1 7
0000000


Output


8

Input


2 5
0010010
0010010


Output


97

Input


3 5
0100001
1001001
1010011


Output


-1

Note

In the first test, we are obliged to include all 7 sticks and get one 8 digit on the scoreboard.

In the second test, we have sticks turned on so that units are formed. For 5 of additionally included sticks, you can get the numbers 07, 18, 34, 43, 70, 79, 81 and 97, of which we choose the maximum — 97.

In the third test, it is impossible to turn on exactly 5 sticks so that a sequence of numbers appears on the scoreboard.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long mod = 1000000007;
string all[] = {"1110111", "0010010", "1011101", "1011011", "0111010",
                "1101011", "1101111", "1010010", "1111111", "1111011"};
vector<string> v;
long long val[] = {6, 2, 5, 5, 4, 5, 6, 3, 7, 6};
long long dp[2005][2005];
bool check(string &s, string &d, long long &count) {
  for (long long i = 0; i < 7; i++) {
    if (s[i] == '1' && d[i] == '0') {
      return false;
    } else if (s[i] == '0' && d[i] == '1') {
      count++;
    }
  }
  return true;
}
bool f(long long ind, long long n, long long k, string &ans) {
  if (ind == n || k < 0) {
    if (k == 0) {
      return 1;
    }
    return 0;
  }
  if (dp[ind][k] != -1) {
    return dp[ind][k];
  }
  string s = v[ind];
  string p, q;
  for (long long i = 9; i >= 0; i--) {
    long long count = 0;
    if (check(s, all[i], count)) {
      ans += to_string(i);
      if (f(ind + 1, n, k - count, ans)) {
        return dp[ind][k] = 1;
      }
      ans.pop_back();
    }
  }
  return dp[ind][k] = 0;
}
int32_t main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
  long long n, k;
  cin >> n >> k;
  string s;
  for (long long i = 0; i < n; i++) {
    cin >> s;
    v.push_back(s);
  }
  memset(dp, -1, sizeof(dp));
  string ans = "";
  if (f(0, n, k, ans)) {
    cout << ans;
  } else
    cout << -1;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 10
0000000
0100000
0000000
0010000
0000000
0000001
0000000
0001000
0000001
0101000


(G.2) Fast Input

1 7
0000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long mod = 1000000007; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
string all[] = {"1110111", "0010010", "1011101", "1011011", "0111010", /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
                "1101011", "1101111", "1010010", "1111111", "1111011"}; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
vector<string> v; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long val[] = {6, 2, 5, 5, 4, 5, 6, 3, 7, 6}; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[2005][2005]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
bool check(string &s, string &d, long long &count) { /* line 9 slow_hit_count: 210, fast_hit_count: 2 */
  for (long long i = 0; i < 7; i++) { /* line 10 slow_hit_count: 1493, fast_hit_count: 16 */
    if (s[i] == '1' && d[i] == '0') { /* line 11 slow_hit_count: 1318, fast_hit_count: 14 */
      return false; /* line 12 slow_hit_count: 35, fast_hit_count: 0 */
    } else if (s[i] == '0' && d[i] == '1') { /* line 13 slow_hit_count: 1283, fast_hit_count: 14 */
      count++; /* line 14 slow_hit_count: 854, fast_hit_count: 13 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 17 slow_hit_count: 175, fast_hit_count: 2 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
bool f(long long ind, long long n, long long k, string &ans) { /* line 19 slow_hit_count: 176, fast_hit_count: 3 */
  if (ind == n || k < 0) { /* line 20 slow_hit_count: 176, fast_hit_count: 3 */
    if (k == 0) { /* line 21 slow_hit_count: 120, fast_hit_count: 2 */
      return 1; /* line 22 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 24 slow_hit_count: 120, fast_hit_count: 1 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[ind][k] != -1) { /* line 26 slow_hit_count: 56, fast_hit_count: 1 */
    return dp[ind][k]; /* line 27 slow_hit_count: 35, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  string s = v[ind]; /* line 29 slow_hit_count: 42, fast_hit_count: 2 */
  string p, q; /* line 30 slow_hit_count: 42, fast_hit_count: 2 */
  for (long long i = 9; i >= 0; i--) { /* line 31 slow_hit_count: 231, fast_hit_count: 2 */
    long long count = 0; /* line 32 slow_hit_count: 210, fast_hit_count: 2 */
    if (check(s, all[i], count)) { /* line 33 slow_hit_count: 210, fast_hit_count: 2 */
      ans += to_string(i); /* line 34 slow_hit_count: 175, fast_hit_count: 2 */
      if (f(ind + 1, n, k - count, ans)) { /* line 35 slow_hit_count: 175, fast_hit_count: 2 */
        return dp[ind][k] = 1; /* line 36 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
      ans.pop_back(); /* line 38 slow_hit_count: 175, fast_hit_count: 1 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  return dp[ind][k] = 0; /* line 41 slow_hit_count: 21, fast_hit_count: 0 */
} /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0), cout.tie(0); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, k; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  string s; /* line 48 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long i = 0; i < n; i++) { /* line 49 slow_hit_count: 11, fast_hit_count: 2 */
    cin >> s; /* line 50 slow_hit_count: 10, fast_hit_count: 1 */
    v.push_back(s); /* line 51 slow_hit_count: 10, fast_hit_count: 1 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  memset(dp, -1, sizeof(dp)); /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  string ans = ""; /* line 54 slow_hit_count: 2, fast_hit_count: 2 */
  if (f(0, n, k, ans)) { /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
    cout << ans; /* line 56 slow_hit_count: 0, fast_hit_count: 1 */
  } else /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    cout << -1; /* line 58 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 59 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To identify performance bottlenecks and derive performance-characterizing invariants, let's analyze the given C++ program by comparing line-level hit counts for both slow and fast inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis**:
   - The `check` function (lines 9-18) is a major hotspot with a significant increase in hits for the slow input, particularly the loop over the 7 segments (lines 10-14).
   - Within `check`, the condition `if (s[i] == '1' && d[i] == '0')` on line 11 triggers a return on line 12, and the condition `else if (s[i] == '0' && d[i] == '1')` on line 13 has many hits for `count++` on line 14.
   - The recursive function `f` (lines 19-42) is another critical section, particularly the loop iterating over possible digits (lines 31-39) and the recursive calls on line 35.

2. **Data Structure and Loop Interactions**:
   - **Recursion and Looping**: The function `f` uses recursion along with nested loops, leading to an exponential exploration of possible digit combinations. The loop on line 31 iterates over all possible digits (0-9) for each position in the number, and if combined with recursion, results in a combinatorial explosion of recursive calls.
   - **Dynamic Programming (DP) Array**: The memoization with `dp` helps but isn't sufficient to prevent all recomputation, especially with large input values `n` and `k`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Potential Slowdown Conditions**:
   - **High Recursion and Branching**: The recursive function `f` with its branching factor (trying each digit per position) and depth (length of the number `n`) can lead to slow performance if memoization is ineffective due to different `k` values.
   - **Critical Path Through `check` Function**: The `check` function being frequently invoked suggests sensitivity to input configurations where the character breakdown leads to many unsuccessful candidates, increasing computational overhead.

2. **Natural Language Invariants**:
   - **Invariant 1**: "When the number of digits `n` is large in combination with `k`, and there are many possible segment transitions for each digit, the recursion depth increases, leading to slowdowns."
   - **Invariant 2**: "If the `check` function is called repeatedly with segment patterns that frequently fail the compatibility check, the number of operations grows substantially, degrading performance."
   - **Invariant 3**: "The algorithm can slow down if the recursion calls are deeply nested due to large `n` or if the branching factor (trying each digit for each position) is high combined with a wide range of `k` values."

3. **Thresholds and Triggers**:
   - The problem constraints (`n ≤ 2000` and `k ≤ 2000`) suggest that performance bottlenecks are more likely as these values approach their limits. For example, handling edge cases where `n` is close to 2000 and `k` is significant can trigger these slow paths.
   - The recursive depth and branching factor effectively grow with the number of possible transitions per digit, which is indirectly related to how many segments could potentially be turned on (i.e., `k`).

### Concise Descriptive Set of Statements

- "If the number of digits `n` is high and `k` permits many segment activations per digit, the recursive call stack may become deep, causing a slowdown."
- "Frequent unsuccessful attempts in matching segment patterns, especially when `n` approaches its limit, are likely to increase function invocations unfavorably."
- "A large branching factor in the recursion due to many valid digit transitions per position can result in significant performance degradation, particularly with higher values of `n` and `k`."

These invariants provide a guideline for identifying potential slowdowns without exact inputs, focusing on input size and recursive/branching patterns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Denis, after buying flowers and sweets (you will learn about this story in the next task), went to a date with Nastya to ask her to become a couple. Now, they are sitting in the cafe and finally... Denis asks her to be together, but ... Nastya doesn't give any answer. 

The poor boy was very upset because of that. He was so sad that he punched some kind of scoreboard with numbers. The numbers are displayed in the same way as on an electronic clock: each digit position consists of 7 segments, which can be turned on or off to display different numbers. The picture shows how all 10 decimal digits are displayed: 

<image>

After the punch, some segments stopped working, that is, some segments might stop glowing if they glowed earlier. But Denis remembered how many sticks were glowing and how many are glowing now. Denis broke exactly k segments and he knows which sticks are working now. Denis came up with the question: what is the maximum possible number that can appear on the board if you turn on exactly k sticks (which are off now)? 

It is allowed that the number includes leading zeros.

Input

The first line contains integer n (1 ≤ n ≤ 2000) — the number of digits on scoreboard and k (0 ≤ k ≤ 2000) — the number of segments that stopped working.

The next n lines contain one binary string of length 7, the i-th of which encodes the i-th digit of the scoreboard.

Each digit on the scoreboard consists of 7 segments. We number them, as in the picture below, and let the i-th place of the binary string be 0 if the i-th stick is not glowing and 1 if it is glowing. Then a binary string of length 7 will specify which segments are glowing now.

<image>

Thus, the sequences "1110111", "0010010", "1011101", "1011011", "0111010", "1101011", "1101111", "1010010", "1111111", "1111011" encode in sequence all digits from 0 to 9 inclusive.

Output

Output a single number consisting of n digits — the maximum number that can be obtained if you turn on exactly k sticks or -1, if it is impossible to turn on exactly k sticks so that a correct number appears on the scoreboard digits.

Examples

Input


1 7
0000000


Output


8

Input


2 5
0010010
0010010


Output


97

Input


3 5
0100001
1001001
1010011


Output


-1

Note

In the first test, we are obliged to include all 7 sticks and get one 8 digit on the scoreboard.

In the second test, we have sticks turned on so that units are formed. For 5 of additionally included sticks, you can get the numbers 07, 18, 34, 43, 70, 79, 81 and 97, of which we choose the maximum — 97.

In the third test, it is impossible to turn on exactly 5 sticks so that a sequence of numbers appears on the scoreboard.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants as C++ Checkers

#### Invariant 1: High Recursion and Branching
This invariant involves checking for potential slowdowns due to deep recursion and high branching factors. We'll use the length of the number `n` and the number of segments `k` as indicators for deep recursion and branching.

```cpp
void check_recursion_and_branching_invariant(int n, int k) {
    if (n > 1500 && k > 1500) { // Threshold chosen based on problem constraints
        cerr << "Warning: Recursion and branching limit exceeded!" << endl;
        abort();
    }
}
```

#### Invariant 2: Frequent Unsuccessful Attempts in `check` Function
This invariant involves the `check` function being called with segment patterns that frequently fail compatibility, increasing operations.

```cpp
void check_frequent_unsuccessful_attempts(int unsuccessfulAttempts, int threshold) {
    if (unsuccessfulAttempts > threshold) { // Example threshold for warning, adjust as necessary
        cerr << "Warning: Excessive unsuccessful attempts in check function!" << endl;
        abort();
    }
}
```

#### Invariant 3: High Branching Factor in Recursive Calls
This invariant is related to checking excessive branching in recursive calls, based on the number of attempted digit transitions.

```cpp
void check_high_branching_invariant(int numAttempts, int maxBranches) {
    if (numAttempts > maxBranches) { // Example threshold for branches, adjust as necessary
        cerr << "Warning: High branching factor in recursive calls!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Program

Now, we integrate these checkers into the original C++ solution. We'll place them at strategic points to ensure they don't introduce unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long mod = 1000000007;
string all[] = {"1110111", "0010010", "1011101", "1011011", "0111010",
                "1101011", "1101111", "1010010", "1111111", "1111011"};
vector<string> v;
long long val[] = {6, 2, 5, 5, 4, 5, 6, 3, 7, 6};
long long dp[2005][2005];

void check_recursion_and_branching_invariant(int n, int k) {
    if (n > 1500 && k > 1500) { // Threshold chosen based on problem constraints
        cerr << "Warning: Recursion and branching limit exceeded!" << endl;
        abort();
    }
}

void check_frequent_unsuccessful_attempts(int unsuccessfulAttempts, int threshold) {
    if (unsuccessfulAttempts > threshold) { // Example threshold for warning, adjust as necessary
        cerr << "Warning: Excessive unsuccessful attempts in check function!" << endl;
        abort();
    }
}

bool check(string &s, string &d, long long &count) {
    int unsuccessfulAttempts = 0; // Track unsuccessful attempts
    for (long long i = 0; i < 7; i++) {
        if (s[i] == '1' && d[i] == '0') {
            unsuccessfulAttempts++;
            return false;
        } else if (s[i] == '0' && d[i] == '1') {
            count++;
        }
    }
    check_frequent_unsuccessful_attempts(unsuccessfulAttempts, 100); // Arbitrary threshold
    return true;
}

bool f(long long ind, long long n, long long k, string &ans) {
    if (ind == n || k < 0) {
        if (k == 0) {
            return 1;
        }
        return 0;
    }
    if (dp[ind][k] != -1) {
        return dp[ind][k];
    }
    string s = v[ind];
    string p, q;
    int numAttempts = 0; // Track number of digit attempts
    for (long long i = 9; i >= 0; i--) {
        long long count = 0;
        if (check(s, all[i], count)) {
            ans += to_string(i);
            numAttempts++;
            if (f(ind + 1, n, k - count, ans)) {
                return dp[ind][k] = 1;
            }
            ans.pop_back();
        }
    }
    check_high_branching_invariant(numAttempts, 10); // Example threshold for branches
    return dp[ind][k] = 0;
}

int32_t main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);
    long long n, k;
    cin >> n >> k;
    check_recursion_and_branching_invariant(n, k); // Check recursion and branches based on input size
    string s;
    for (long long i = 0; i < n; i++) {
        cin >> s;
        v.push_back(s);
    }
    memset(dp, -1, sizeof(dp));
    string ans = "";
    if (f(0, n, k, ans)) {
        cout << ans;
    } else
        cout << -1;
}
```

### Explanation of Integrated Checks

- **Recursion and Branching Invariant**: We placed this check in `main()` after reading `n` and `k`, as these two values primarily contribute to the recursive depth and branching factor.
- **Frequent Unsuccessful Attempts**: This check is inside the `check` function to monitor unsuccessful attempts at matching segments.
- **High Branching Factor**: We check for excessive branching in the `f` function after attempting digit transitions. 

These checks are strategically placed to catch potential performance issues without impacting the primary execution flow, aiding in detecting bottlenecks efficiently.

