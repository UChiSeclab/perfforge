system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Denis, after buying flowers and sweets (you will learn about this story in the next task), went to a date with Nastya to ask her to become a couple. Now, they are sitting in the cafe and finally... Denis asks her to be together, but ... Nastya doesn't give any answer. 

The poor boy was very upset because of that. He was so sad that he punched some kind of scoreboard with numbers. The numbers are displayed in the same way as on an electronic clock: each digit position consists of 7 segments, which can be turned on or off to display different numbers. The picture shows how all 10 decimal digits are displayed: 

<image>

After the punch, some segments stopped working, that is, some segments might stop glowing if they glowed earlier. But Denis remembered how many sticks were glowing and how many are glowing now. Denis broke exactly k segments and he knows which sticks are working now. Denis came up with the question: what is the maximum possible number that can appear on the board if you turn on exactly k sticks (which are off now)? 

It is allowed that the number includes leading zeros.

Input

The first line contains integer n (1 ≤ n ≤ 2000) — the number of digits on scoreboard and k (0 ≤ k ≤ 2000) — the number of segments that stopped working.

The next n lines contain one binary string of length 7, the i-th of which encodes the i-th digit of the scoreboard.

Each digit on the scoreboard consists of 7 segments. We number them, as in the picture below, and let the i-th place of the binary string be 0 if the i-th stick is not glowing and 1 if it is glowing. Then a binary string of length 7 will specify which segments are glowing now.

<image>

Thus, the sequences "1110111", "0010010", "1011101", "1011011", "0111010", "1101011", "1101111", "1010010", "1111111", "1111011" encode in sequence all digits from 0 to 9 inclusive.

Output

Output a single number consisting of n digits — the maximum number that can be obtained if you turn on exactly k sticks or -1, if it is impossible to turn on exactly k sticks so that a correct number appears on the scoreboard digits.

Examples

Input


1 7
0000000


Output


8

Input


2 5
0010010
0010010


Output


97

Input


3 5
0100001
1001001
1010011


Output


-1

Note

In the first test, we are obliged to include all 7 sticks and get one 8 digit on the scoreboard.

In the second test, we have sticks turned on so that units are formed. For 5 of additionally included sticks, you can get the numbers 07, 18, 34, 43, 70, 79, 81 and 97, of which we choose the maximum — 97.

In the third test, it is impossible to turn on exactly 5 sticks so that a sequence of numbers appears on the scoreboard.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int maxn = 4e5 + 100;
int dist[2006][15], ans[2005];
vector<int> v[2005];
int dp[2006][2005], pre[2005][2006], num[2005][2005];
char arr[2005][15];
char str[15][15] = {"1110111", "0010010", "1011101", "1011011", "0111010",
                    "1101011", "1101111", "1010010", "1111111", "1111011"};
int calc(char a[], char b[]) {
  int ret = 0;
  for (int i = 0; i < 7; i++) {
    if (a[i] == '0' && b[i] == '1')
      ret++;
    else if (a[i] == b[i])
      ;
    else {
      ret = 0x3f3f3f3f;
      break;
    }
  }
  return ret;
}
int main() {
  int n, k;
  scanf("%d%d", &n, &k);
  for (int i = 0; i < n; i++) scanf("%s", arr[i]);
  for (int i = 0; i < n; i++) {
    int now = 0x3f3f3f3f;
    for (int j = 0; j <= 9; j++) dist[i][j] = calc(arr[i], str[j]);
  }
  memset(pre, -1, sizeof(pre));
  dp[n][0] = 1;
  for (int i = n - 1; i >= 0; i--) {
    for (int j = 2000; j >= 0; j--) {
      for (int k = 0; k <= 9; k++) {
        if (j - dist[i][k] >= 0 && dp[i + 1][j - dist[i][k]]) {
          dp[i][j] = 1, pre[i][j] = j - dist[i][k], num[i][j] = k;
        }
      }
    }
  }
  if (dp[0][k]) {
    int tot = 0;
    int nowa = 0, nowb = k;
    while (nowa < n) {
      ans[++tot] = num[nowa][nowb];
      nowb = pre[nowa][nowb];
      nowa++;
    }
    for (int i = 1; i <= tot; i++) printf("%d", ans[i]);
    printf("\n");
  } else
    printf("-1\n");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 1
0101010
0101111
1111011
0111010
1101001
1111011
1110111
1010010
1111111
0010010


(G.2) Fast Input

1 1
1111011
1010010


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 4e5 + 100; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int dist[2006][15], ans[2005]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> v[2005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int dp[2006][2005], pre[2005][2006], num[2005][2005]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
char arr[2005][15]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
char str[15][15] = {"1110111", "0010010", "1011101", "1011011", "0111010", /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
                    "1101011", "1101111", "1010010", "1111111", "1111011"}; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int calc(char a[], char b[]) { /* line 10 slow_hit_count: 100, fast_hit_count: 10 */
  int ret = 0; /* line 11 slow_hit_count: 100, fast_hit_count: 10 */
  for (int i = 0; i < 7; i++) { /* line 12 slow_hit_count: 437, fast_hit_count: 34 */
    if (a[i] == '0' && b[i] == '1') /* line 13 slow_hit_count: 404, fast_hit_count: 32 */
      ret++; /* line 14 slow_hit_count: 96, fast_hit_count: 1 */
    else if (a[i] == b[i]) /* line 15 slow_hit_count: 308, fast_hit_count: 31 */
      ; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    else { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
      ret = 0x3f3f3f3f; /* line 18 slow_hit_count: 67, fast_hit_count: 8 */
      break; /* line 19 slow_hit_count: 67, fast_hit_count: 8 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 22 slow_hit_count: 100, fast_hit_count: 10 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d%d", &n, &k); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) scanf("%s", arr[i]); /* line 27 slow_hit_count: 11, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) { /* line 28 slow_hit_count: 11, fast_hit_count: 2 */
    int now = 0x3f3f3f3f; /* line 29 slow_hit_count: 10, fast_hit_count: 1 */
    for (int j = 0; j <= 9; j++) dist[i][j] = calc(arr[i], str[j]); /* line 30 slow_hit_count: 110, fast_hit_count: 11 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  memset(pre, -1, sizeof(pre)); /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  dp[n][0] = 1; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = n - 1; i >= 0; i--) { /* line 34 slow_hit_count: 11, fast_hit_count: 2 */
    for (int j = 2000; j >= 0; j--) { /* line 35 slow_hit_count: 20020, fast_hit_count: 2002 */
      for (int k = 0; k <= 9; k++) { /* line 36 slow_hit_count: 220110, fast_hit_count: 22011 */
        if (j - dist[i][k] >= 0 && dp[i + 1][j - dist[i][k]]) { /* line 37 slow_hit_count: 200100, fast_hit_count: 20010 */
          dp[i][j] = 1, pre[i][j] = j - dist[i][k], num[i][j] = k; /* line 38 slow_hit_count: 340, fast_hit_count: 2 */
        } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[0][k]) { /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
    int tot = 0; /* line 44 slow_hit_count: 0, fast_hit_count: 1 */
    int nowa = 0, nowb = k; /* line 45 slow_hit_count: 0, fast_hit_count: 1 */
    while (nowa < n) { /* line 46 slow_hit_count: 0, fast_hit_count: 2 */
      ans[++tot] = num[nowa][nowb]; /* line 47 slow_hit_count: 0, fast_hit_count: 1 */
      nowb = pre[nowa][nowb]; /* line 48 slow_hit_count: 0, fast_hit_count: 1 */
      nowa++; /* line 49 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 1; i <= tot; i++) printf("%d", ans[i]); /* line 51 slow_hit_count: 0, fast_hit_count: 2 */
    printf("\n"); /* line 52 slow_hit_count: 0, fast_hit_count: 1 */
  } else /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    printf("-1\n"); /* line 54 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 56 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts**:
    - The `calc` function (lines 10-22) shows a significant difference in hit counts between the slow and fast inputs, with line 12 being especially high in hit counts for the slow input.
    - The nested loops in the `main` function (lines 34-42), particularly lines 35 and 36, exhibit a much higher hit count on the slow input compared to the fast input. This suggests that a large amount of processing is being done repeatedly on the slow input.

2. **Identifying Likely Causes**:
    - The `calc` function is a key part of the program, responsible for calculating the number of additional segments needed to form a particular digit. It is called frequently due to its placement in the loop that iterates over all digits (line 30).
    - The double- and triple-nested loops in the `main` function iterate over a large range (up to 2000 for `j`), which results in a very high number of iterations, especially when combined with the loop iterating over all digits.
    - The dynamic programming (DP) table `dp` is being updated for a large range of values. This suggests the DP approach is computationally intensive given the input size constraints.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariants**:

    - **Invariant 1**: "If the number of digits `n` on the scoreboard is large, combined with a high number of segments `k` that need to be enabled (close to the constraint limits like `n = 2000` and `k = 2000`), the number of potential combinations in the dynamic programming approach increases significantly, leading to slow computation."
    
    - **Invariant 2**: "If the digit configurations require many transformations (i.e., the `calc` function frequently returns high counts of additional segments needed), the program will execute the nested loops more times, especially when the possible transformations span many configurations (like transforming all digits from '0' to '9')."

    - **Invariant 3**: "If each digit's current segment configuration is very different from the possible configurations of other digits, causing high operations in `calc`, the program may slow down significantly due to repeated calculations in the nested loops."

    - **Invariant 4**: "When the dynamic programming table (`dp`) must be filled for a large number of possible 'on' segment combinations (close to or equal to the constraints of `k`), the number of operations grows, leading to increased execution time."

2. **Condition Correlation**:
    - These conditions are strongly connected with how the existing segment configuration requires transformation into a valid digit while enabling exactly `k` segments. If `n` and `k` values are near their maximum, the space that needs exploration by the DP solution grows exponentially.
    - The configuration of each digit's segments is crucial; if they differ significantly from those needed to form a valid digit, the number of operations in the `calc` function and the DP table updates will increase.

By focusing on these invariants, you can anticipate and diagnose potential slowdowns when the program is given inputs that push the input constraints to their limits, or configurations that maximize the computational effort required by the current algorithmic structure.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Denis, after buying flowers and sweets (you will learn about this story in the next task), went to a date with Nastya to ask her to become a couple. Now, they are sitting in the cafe and finally... Denis asks her to be together, but ... Nastya doesn't give any answer. 

The poor boy was very upset because of that. He was so sad that he punched some kind of scoreboard with numbers. The numbers are displayed in the same way as on an electronic clock: each digit position consists of 7 segments, which can be turned on or off to display different numbers. The picture shows how all 10 decimal digits are displayed: 

<image>

After the punch, some segments stopped working, that is, some segments might stop glowing if they glowed earlier. But Denis remembered how many sticks were glowing and how many are glowing now. Denis broke exactly k segments and he knows which sticks are working now. Denis came up with the question: what is the maximum possible number that can appear on the board if you turn on exactly k sticks (which are off now)? 

It is allowed that the number includes leading zeros.

Input

The first line contains integer n (1 ≤ n ≤ 2000) — the number of digits on scoreboard and k (0 ≤ k ≤ 2000) — the number of segments that stopped working.

The next n lines contain one binary string of length 7, the i-th of which encodes the i-th digit of the scoreboard.

Each digit on the scoreboard consists of 7 segments. We number them, as in the picture below, and let the i-th place of the binary string be 0 if the i-th stick is not glowing and 1 if it is glowing. Then a binary string of length 7 will specify which segments are glowing now.

<image>

Thus, the sequences "1110111", "0010010", "1011101", "1011011", "0111010", "1101011", "1101111", "1010010", "1111111", "1111011" encode in sequence all digits from 0 to 9 inclusive.

Output

Output a single number consisting of n digits — the maximum number that can be obtained if you turn on exactly k sticks or -1, if it is impossible to turn on exactly k sticks so that a correct number appears on the scoreboard digits.

Examples

Input


1 7
0000000


Output


8

Input


2 5
0010010
0010010


Output


97

Input


3 5
0100001
1001001
1010011


Output


-1

Note

In the first test, we are obliged to include all 7 sticks and get one 8 digit on the scoreboard.

In the second test, we have sticks turned on so that units are formed. For 5 of additionally included sticks, you can get the numbers 07, 18, 34, 43, 70, 79, 81 and 97, of which we choose the maximum — 97.

In the third test, it is impossible to turn on exactly 5 sticks so that a sequence of numbers appears on the scoreboard.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Runtime Checkers in C++

Based on the performance-characterizing invariants inferred earlier, we will implement C++ code snippets to check these conditions at runtime.

#### Invariant 1 Code:
This checks if `n` and `k` are large, which can lead to increased computational effort due to the large state space.

```cpp
void check_large_n_k_invariant(int n, int k) {
    if (n >= 1800 && k >= 1800) {  // Slightly relaxed from constraint max to trigger slowdown condition
        cerr << "Warning: Large n and k values - potential performance bottleneck!" << endl;
        abort();
    }
}
```

#### Invariant 2 Code:
This checks if the `calc` function is called frequently with high return values, indicating many transformations.

```cpp
void check_calc_frequency_invariant(int callCount, int threshold) {
    if (callCount > threshold) {
        cerr << "Warning: calc function called too many times - potential performance bottleneck!" << endl;
        abort();
    }
}
```

#### Invariant 3 Code:
This checks the number of operations in `calc`, especially when transforming each digit configuration.

```cpp
void check_digit_transformation_invariant(int operations) {
    if (operations > 10) {  // Arbitrary threshold indicating excessive transformations
        cerr << "Warning: Excessive digit transformations in calc function!" << endl;
        abort();
    }
}
```

#### Invariant 4 Code:
This checks if the dynamic programming table `dp` covers too many states, increasing computational load.

```cpp
void check_dp_state_invariant(int dpSize, int threshold) {
    if (dpSize > threshold) {
        cerr << "Warning: Dynamic programming state space too large!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Program

Now, we will integrate these checkers into the original C++ code by placing them at strategic points in the program.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int maxn = 4e5 + 100;
int dist[2006][15], ans[2005];
vector<int> v[2005];
int dp[2006][2005], pre[2005][2006], num[2005][2005];
char arr[2005][15];
char str[15][15] = {"1110111", "0010010", "1011101", "1011011", "0111010",
                    "1101011", "1101111", "1010010", "1111111", "1111011"};

void check_large_n_k_invariant(int n, int k) {
    if (n >= 1800 && k >= 1800) {
        cerr << "Warning: Large n and k values - potential performance bottleneck!" << endl;
        abort();
    }
}

void check_calc_frequency_invariant(int callCount, int threshold) {
    if (callCount > threshold) {
        cerr << "Warning: calc function called too many times - potential performance bottleneck!" << endl;
        abort();
    }
}

void check_digit_transformation_invariant(int operations) {
    if (operations > 10) {
        cerr << "Warning: Excessive digit transformations in calc function!" << endl;
        abort();
    }
}

void check_dp_state_invariant(int dpSize, int threshold) {
    if (dpSize > threshold) {
        cerr << "Warning: Dynamic programming state space too large!" << endl;
        abort();
    }
}

int calc(char a[], char b[]) {
    int ret = 0;
    int operations = 0;  // Track operations for invariant check
    for (int i = 0; i < 7; i++) {
        if (a[i] == '0' && b[i] == '1')
            ret++;
        else if (a[i] == b[i])
            ;
        else {
            ret = 0x3f3f3f3f;
            break;
        }
        operations++;  // Count operations
    }
    check_digit_transformation_invariant(operations);  // Check after transformation
    return ret;
}

int main() {
    int n, k;
    scanf("%d%d", &n, &k);
    
    check_large_n_k_invariant(n, k);  // Check after input

    for (int i = 0; i < n; i++) scanf("%s", arr[i]);
    for (int i = 0; i < n; i++) {
        int now = 0x3f3f3f3f;
        for (int j = 0; j <= 9; j++) {
            dist[i][j] = calc(arr[i], str[j]);
        }
    }
    
    int calcCallCount = n * 10;  // Number of times calc is called
    check_calc_frequency_invariant(calcCallCount, 5000);  // Example threshold

    memset(pre, -1, sizeof(pre));
    dp[n][0] = 1;
    for (int i = n - 1; i >= 0; i--) {
        for (int j = 2000; j >= 0; j--) {
            for (int k = 0; k <= 9; k++) {
                if (j - dist[i][k] >= 0 && dp[i + 1][j - dist[i][k]]) {
                    dp[i][j] = 1, pre[i][j] = j - dist[i][k], num[i][j] = k;
                }
            }
        }
    }
    
    check_dp_state_invariant(n * 2000, 1000000);  // Example threshold

    if (dp[0][k]) {
        int tot = 0;
        int nowa = 0, nowb = k;
        while (nowa < n) {
            ans[++tot] = num[nowa][nowb];
            nowb = pre[nowa][nowb];
            nowa++;
        }
        for (int i = 1; i <= tot; i++) printf("%d", ans[i]);
        printf("\n");
    } else
        printf("-1\n");
    return 0;
}
```

### Explanation

- **Invariant Check Placement**:
  - **`check_large_n_k_invariant`**: Added after reading `n` and `k` to immediately detect potential issues with large values.
  - **`check_calc_frequency_invariant`**: Checked after the loop that computes `dist`, ensuring that `calc` is not called excessively.
  - **`check_digit_transformation_invariant`**: Placed inside the `calc` function to monitor transformation operations.
  - **`check_dp_state_invariant`**: Added after the main DP loop to ensure the state space does not become excessively large.

These checks help monitor conditions that could lead to performance degradation, allowing for early detection of bottlenecks.

