system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Denis, after buying flowers and sweets (you will learn about this story in the next task), went to a date with Nastya to ask her to become a couple. Now, they are sitting in the cafe and finally... Denis asks her to be together, but ... Nastya doesn't give any answer. 

The poor boy was very upset because of that. He was so sad that he punched some kind of scoreboard with numbers. The numbers are displayed in the same way as on an electronic clock: each digit position consists of 7 segments, which can be turned on or off to display different numbers. The picture shows how all 10 decimal digits are displayed: 

<image>

After the punch, some segments stopped working, that is, some segments might stop glowing if they glowed earlier. But Denis remembered how many sticks were glowing and how many are glowing now. Denis broke exactly k segments and he knows which sticks are working now. Denis came up with the question: what is the maximum possible number that can appear on the board if you turn on exactly k sticks (which are off now)? 

It is allowed that the number includes leading zeros.

Input

The first line contains integer n (1 ≤ n ≤ 2000) — the number of digits on scoreboard and k (0 ≤ k ≤ 2000) — the number of segments that stopped working.

The next n lines contain one binary string of length 7, the i-th of which encodes the i-th digit of the scoreboard.

Each digit on the scoreboard consists of 7 segments. We number them, as in the picture below, and let the i-th place of the binary string be 0 if the i-th stick is not glowing and 1 if it is glowing. Then a binary string of length 7 will specify which segments are glowing now.

<image>

Thus, the sequences "1110111", "0010010", "1011101", "1011011", "0111010", "1101011", "1101111", "1010010", "1111111", "1111011" encode in sequence all digits from 0 to 9 inclusive.

Output

Output a single number consisting of n digits — the maximum number that can be obtained if you turn on exactly k sticks or -1, if it is impossible to turn on exactly k sticks so that a correct number appears on the scoreboard digits.

Examples

Input


1 7
0000000


Output


8

Input


2 5
0010010
0010010


Output


97

Input


3 5
0100001
1001001
1010011


Output


-1

Note

In the first test, we are obliged to include all 7 sticks and get one 8 digit on the scoreboard.

In the second test, we have sticks turned on so that units are formed. For 5 of additionally included sticks, you can get the numbers 07, 18, 34, 43, 70, 79, 81 and 97, of which we choose the maximum — 97.

In the third test, it is impossible to turn on exactly 5 sticks so that a sequence of numbers appears on the scoreboard.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const double PI = acos(-1);
const int mod = 1e9 + 7;
const long long N = 1e4 + 5, K = 105;
const long long oo = 1e18 + 5;
const int si = (1 << 20);
const int INF = (1 << 30);
const long long M = 1e3 + 5;
const double INFdb = 1e10;
vector<string> nums = {"1110111", "0010010", "1011101", "1011011", "0111010",
                       "1101011", "1101111", "1010010", "1111111", "1111011"};
bool exist[2005][2005];
int num_stick(string s, int num) {
  int ans = 0;
  for (int i = 0; i < 7; ++i) {
    if (nums[num][i] == '0' && s[i] == '1') return INF;
    if (nums[num][i] != s[i]) ++ans;
  }
  return ans;
}
int main() {
  ios::sync_with_stdio(false);
  cin.tie(NULL);
  int n, k;
  cin >> n >> k;
  vector<string> s(n + 1);
  for (int i = 1; i <= n; ++i) cin >> s[i];
  exist[n + 1][0] = 1;
  for (int i = n; i >= 1; --i) {
    for (int j = 0; j <= k; ++j) {
      for (int num = 0; num < 10; ++num) {
        int cost = num_stick(s[i], num);
        if (cost <= j) {
          exist[i][j] |= exist[i + 1][j - cost];
        }
      }
    }
  }
  if (!exist[1][k]) return cout << -1, 0;
  string ans = "";
  int remain = k;
  for (int i = 1; i <= n; ++i) {
    for (int num = 9; num >= 0; --num) {
      int cost = num_stick(s[i], num);
      if (cost <= remain && exist[i + 1][remain - cost]) {
        ans += (char)(num + '0');
        remain -= cost;
        break;
      }
    }
  }
  cout << ans;
  cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 10
0101111
0000000
1111011
1011011
1011011
1111011
0010010
1010010
1101111
0000000


(G.2) Fast Input

10 0
0101010
1101111
1111011
0111010
1101001
1111011
1110111
1010010
1111111
0010010


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const double PI = acos(-1); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long N = 1e4 + 5, K = 105; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const long long oo = 1e18 + 5; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const int si = (1 << 20); /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = (1 << 30); /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
const long long M = 1e3 + 5; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
const double INFdb = 1e10; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
vector<string> nums = {"1110111", "0010010", "1011101", "1011011", "0111010", /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
                       "1101011", "1101111", "1010010", "1111111", "1111011"}; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
bool exist[2005][2005]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int num_stick(string s, int num) { /* line 14 slow_hit_count: 1144, fast_hit_count: 100 */
  int ans = 0; /* line 15 slow_hit_count: 1144, fast_hit_count: 100 */
  for (int i = 0; i < 7; ++i) { /* line 16 slow_hit_count: 6039, fast_hit_count: 432 */
    if (nums[num][i] == '0' && s[i] == '1') return INF; /* line 17 slow_hit_count: 5503, fast_hit_count: 399 */
    if (nums[num][i] != s[i]) ++ans; /* line 18 slow_hit_count: 4895, fast_hit_count: 332 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 20 slow_hit_count: 536, fast_hit_count: 33 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  vector<string> s(n + 1); /* line 27 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 1; i <= n; ++i) cin >> s[i]; /* line 28 slow_hit_count: 11, fast_hit_count: 11 */
  exist[n + 1][0] = 1; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = n; i >= 1; --i) { /* line 30 slow_hit_count: 11, fast_hit_count: 11 */
    for (int j = 0; j <= k; ++j) { /* line 31 slow_hit_count: 120, fast_hit_count: 20 */
      for (int num = 0; num < 10; ++num) { /* line 32 slow_hit_count: 1210, fast_hit_count: 110 */
        int cost = num_stick(s[i], num); /* line 33 slow_hit_count: 1100, fast_hit_count: 100 */
        if (cost <= j) { /* line 34 slow_hit_count: 1100, fast_hit_count: 100 */
          exist[i][j] |= exist[i + 1][j - cost]; /* line 35 slow_hit_count: 365, fast_hit_count: 8 */
        } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  if (!exist[1][k]) return cout << -1, 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  string ans = ""; /* line 41 slow_hit_count: 1, fast_hit_count: 0 */
  int remain = k; /* line 42 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= n; ++i) { /* line 43 slow_hit_count: 11, fast_hit_count: 0 */
    for (int num = 9; num >= 0; --num) { /* line 44 slow_hit_count: 44, fast_hit_count: 0 */
      int cost = num_stick(s[i], num); /* line 45 slow_hit_count: 44, fast_hit_count: 0 */
      if (cost <= remain && exist[i + 1][remain - cost]) { /* line 46 slow_hit_count: 44, fast_hit_count: 0 */
        ans += (char)(num + '0'); /* line 47 slow_hit_count: 10, fast_hit_count: 0 */
        remain -= cost; /* line 48 slow_hit_count: 10, fast_hit_count: 0 */
        break; /* line 49 slow_hit_count: 10, fast_hit_count: 0 */
      } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 53 slow_hit_count: 1, fast_hit_count: 0 */
  cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n"; /* line 54 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 55 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 56 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - **`num_stick` Function (Line 14-21):**
     - **Slow Input:** Invoked 1144 times.
     - **Fast Input:** Invoked 100 times.
   - **Inner Loops (Line 30-39 and Line 43-52):**
     - The nested loop on line 30-39 is hit significantly more often with the slow input.
     - The loop on Line 43-52 is only executed for the slow input.

2. **Pinpointing Inefficiencies:**
   - The `num_stick` function is a key contributor to the slowdown. This function is responsible for calculating the number of sticks needed to form a valid number from the current configuration. It is called once for each digit and each possible number (0-9) within nested loops, leading to a high invocation count.
   - The loops in lines 30-39 are executed more frequently due to a lack of early exits or pruning conditions, resulting in redundant computations when the input is not pruned effectively or when k is high relative to n.

3. **Data Structure Interaction:**
   - The `exist` array is used to track possible configurations using dynamic programming across digits and segment allowances. The slow input results in many updates and checks in this DP table, indicating a potentially large search space when k is high.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: High `k` Relative to `n`:**
   - **Natural Language Description:** "When the number of segments `k` that need to be reactivated is high relative to the number of digits `n`, the program may explore a large search space, leading to slow execution. This is particularly true when `k` approaches the total possible segment variations for `n` digits."
   
2. **Invariant 2: Inefficient Exploration:**
   - **Natural Language Description:** "If the dynamic programming approach involves many redundant checks or updates, especially in the absence of effective pruning, it results in excessive computations. This happens when the input configuration allows for many possible segment activations without early resolution."
   
3. **Invariant 3: Extensive Possible Combinations:**
   - **Natural Language Description:** "When the initial configuration of segments allows for many possible higher numbers with small segment activations, the complexity increases significantly because more combinations are evaluated. This can be seen when the input digits are close to forming large numbers but require adjustments."

These invariants focus on the conditions under which the dynamic programming and combinatorial evaluation become extensive due to the combinations of `n` and `k`, leading to a slowdown. The invariants also emphasize the need for pruning conditions or more efficient exploration strategies in the DP formulation.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Denis, after buying flowers and sweets (you will learn about this story in the next task), went to a date with Nastya to ask her to become a couple. Now, they are sitting in the cafe and finally... Denis asks her to be together, but ... Nastya doesn't give any answer. 

The poor boy was very upset because of that. He was so sad that he punched some kind of scoreboard with numbers. The numbers are displayed in the same way as on an electronic clock: each digit position consists of 7 segments, which can be turned on or off to display different numbers. The picture shows how all 10 decimal digits are displayed: 

<image>

After the punch, some segments stopped working, that is, some segments might stop glowing if they glowed earlier. But Denis remembered how many sticks were glowing and how many are glowing now. Denis broke exactly k segments and he knows which sticks are working now. Denis came up with the question: what is the maximum possible number that can appear on the board if you turn on exactly k sticks (which are off now)? 

It is allowed that the number includes leading zeros.

Input

The first line contains integer n (1 ≤ n ≤ 2000) — the number of digits on scoreboard and k (0 ≤ k ≤ 2000) — the number of segments that stopped working.

The next n lines contain one binary string of length 7, the i-th of which encodes the i-th digit of the scoreboard.

Each digit on the scoreboard consists of 7 segments. We number them, as in the picture below, and let the i-th place of the binary string be 0 if the i-th stick is not glowing and 1 if it is glowing. Then a binary string of length 7 will specify which segments are glowing now.

<image>

Thus, the sequences "1110111", "0010010", "1011101", "1011011", "0111010", "1101011", "1101111", "1010010", "1111111", "1111011" encode in sequence all digits from 0 to 9 inclusive.

Output

Output a single number consisting of n digits — the maximum number that can be obtained if you turn on exactly k sticks or -1, if it is impossible to turn on exactly k sticks so that a correct number appears on the scoreboard digits.

Examples

Input


1 7
0000000


Output


8

Input


2 5
0010010
0010010


Output


97

Input


3 5
0100001
1001001
1010011


Output


-1

Note

In the first test, we are obliged to include all 7 sticks and get one 8 digit on the scoreboard.

In the second test, we have sticks turned on so that units are formed. For 5 of additionally included sticks, you can get the numbers 07, 18, 34, 43, 70, 79, 81 and 97, of which we choose the maximum — 97.

In the third test, it is impossible to turn on exactly 5 sticks so that a sequence of numbers appears on the scoreboard.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here is the C++ code implementing the performance-characterizing invariants as runtime checks based on the natural language descriptions from Phase 2:

```cpp
void check_high_k_relative_to_n(int n, int k) {
    // If k is close to n * 7 (maximum possible segments to be turned on for n digits)
    if (k > n * 5) { // Assuming 5 as a reasonable threshold for a "high" relative value
        cerr << "Warning: Performance bottleneck condition triggered due to high k relative to n!" << endl;
        abort();
    }
}

void check_inefficient_exploration(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to inefficient exploration!" << endl;
        abort();
    }
}

void check_extensive_possible_combinations(int n, int k) {
    // If k allows for many combinations without early resolution
    if (k > n * 3 && k < n * 5) { // Suppose these thresholds balance between exploration and resolution
        cerr << "Warning: Performance bottleneck condition triggered due to extensive possible combinations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Now, let's integrate these checks into the given C++ program at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;

const double PI = acos(-1);
const int mod = 1e9 + 7;
const long long N = 1e4 + 5, K = 105;
const long long oo = 1e18 + 5;
const int si = (1 << 20);
const int INF = (1 << 30);
const long long M = 1e3 + 5;
const double INFdb = 1e10;
vector<string> nums = {"1110111", "0010010", "1011101", "1011011", "0111010",
                       "1101011", "1101111", "1010010", "1111111", "1111011"};
bool exist[2005][2005];

int num_stick(string s, int num) {
    int ans = 0;
    for (int i = 0; i < 7; ++i) {
        if (nums[num][i] == '0' && s[i] == '1') return INF;
        if (nums[num][i] != s[i]) ++ans;
    }
    return ans;
}

void check_high_k_relative_to_n(int n, int k) {
    if (k > n * 5) {
        cerr << "Warning: Performance bottleneck condition triggered due to high k relative to n!" << endl;
        abort();
    }
}

void check_inefficient_exploration(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered due to inefficient exploration!" << endl;
        abort();
    }
}

void check_extensive_possible_combinations(int n, int k) {
    if (k > n * 3 && k < n * 5) {
        cerr << "Warning: Performance bottleneck condition triggered due to extensive possible combinations!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(NULL);

    int n, k;
    cin >> n >> k;
    vector<string> s(n + 1);
    
    for (int i = 1; i <= n; ++i) cin >> s[i];

    // Check for high 'k' relative to 'n'
    check_high_k_relative_to_n(n, k);

    exist[n + 1][0] = 1;
    for (int i = n; i >= 1; --i) {
        for (int j = 0; j <= k; ++j) {
            for (int num = 0; num < 10; ++num) {
                int cost = num_stick(s[i], num);
                if (cost <= j) {
                    exist[i][j] |= exist[i + 1][j - cost];
                }
            }
        }
    }

    // Check for inefficient exploration before solution exploration
    check_inefficient_exploration(!exist[1][k]);

    if (!exist[1][k]) return cout << -1, 0;

    // Check for extensive possible combinations
    check_extensive_possible_combinations(n, k);

    string ans = "";
    int remain = k;
    for (int i = 1; i <= n; ++i) {
        for (int num = 9; num >= 0; --num) {
            int cost = num_stick(s[i], num);
            if (cost <= remain && exist[i + 1][remain - cost]) {
                ans += (char)(num + '0');
                remain -= cost;
                break;
            }
        }
    }
    
    cout << ans;
    cerr << "\nTime elapsed: " << 1000 * clock() / CLOCKS_PER_SEC << "ms\n";
    return 0;
}
```

### Explanation of Integration
- **`check_high_k_relative_to_n`:** Added after reading inputs `n` and `k` to immediately catch if the input values might cause performance degradation due to high k relative to n.
- **`check_inefficient_exploration`:** Used before exploring the solution to ensure we optimize exploration paths.
- **`check_extensive_possible_combinations`:** Placed after confirming a solution path exists to ensure further computations are efficient given the constraints. 

These checks aim to efficiently identify potential bottlenecks without adding overhead in the performance-critical part of the loops or function calls.

