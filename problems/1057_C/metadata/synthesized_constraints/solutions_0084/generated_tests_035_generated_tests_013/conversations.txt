system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n candy boxes in front of Tania. The boxes are arranged in a row from left to right, numbered from 1 to n. The i-th box contains r_i candies, candies have the color c_i (the color can take one of three values ​​— red, green, or blue). All candies inside a single box have the same color (and it is equal to c_i).

Initially, Tanya is next to the box number s. Tanya can move to the neighbor box (that is, with a number that differs by one) or eat candies in the current box. Tanya eats candies instantly, but the movement takes one second.

If Tanya eats candies from the box, then the box itself remains in place, but there is no more candies in it. In other words, Tanya always eats all the candies from the box and candies in the boxes are not refilled.

It is known that Tanya cannot eat candies of the same color one after another (that is, the colors of candies in two consecutive boxes from which she eats candies are always different). In addition, Tanya's appetite is constantly growing, so in each next box from which she eats candies, there should be strictly more candies than in the previous one.

Note that for the first box from which Tanya will eat candies, there are no restrictions on the color and number of candies.

Tanya wants to eat at least k candies. What is the minimum number of seconds she will need? Remember that she eats candies instantly, and time is spent only on movements.

Input

The first line contains three integers n, s and k (1 ≤ n ≤ 50, 1 ≤ s ≤ n, 1 ≤ k ≤ 2000) — number of the boxes, initial position of Tanya and lower bound on number of candies to eat. The following line contains n integers r_i (1 ≤ r_i ≤ 50) — numbers of candies in the boxes. The third line contains sequence of n letters 'R', 'G' and 'B', meaning the colors of candies in the correspondent boxes ('R' for red, 'G' for green, 'B' for blue). Recall that each box contains candies of only one color. The third line contains no spaces.

Output

Print minimal number of seconds to eat at least k candies. If solution doesn't exist, print "-1".

Examples

Input

5 3 10
1 2 3 4 5
RGBRR


Output

4


Input

2 1 15
5 6
RG


Output

-1

Note

The sequence of actions of Tanya for the first example:

  * move from the box 3 to the box 2; 
  * eat candies from the box 2; 
  * move from the box 2 to the box 3; 
  * eat candy from the box 3; 
  * move from the box 3 to the box 4; 
  * move from the box 4 to the box 5; 
  * eat candies from the box 5. 



Since Tanya eats candy instantly, the required time is four seconds.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const double eps = 1e-9;
const double PI = acos(-1.0);
const long long int mod = 1e9 + 7;
const int MAXN = 1e6 + 5;
struct node {
  int t, candies, prevcolour, preveaten, pos;
  node() {}
  node(int t, int candies, int prevcolour, int preveaten, int pos)
      : t(t),
        candies(candies),
        prevcolour(prevcolour),
        pos(pos),
        preveaten(preveaten) {}
  const bool operator<(const node &nd) const {
    if (t == nd.t)
      return candies < nd.candies;
    else
      return t > nd.t;
  }
};
bool vis[1300][55][1300];
void cp() {
  int n, s, k;
  string colour;
  cin >> n >> s >> k;
  vector<int> arr(n);
  for (int &x : arr) cin >> x;
  cin >> colour;
  vector<vector<int>> adj(n);
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      if (arr[j] > arr[i] && colour[j] != colour[i]) adj[i].push_back(j);
    }
  }
  long long int ans = -1;
  priority_queue<node> pq;
  for (int i = 0; i < n; i++) {
    int d = abs(i - (s - 1));
    pq.push(node(d, arr[i], colour[i], arr[i], i));
  }
  while (!pq.empty()) {
    node u = pq.top();
    pq.pop();
    vis[u.candies][u.pos][u.t] = 1;
    if (u.candies >= k) {
      ans = u.t;
      break;
    }
    for (int i : adj[u.pos]) {
      node v = u;
      v.candies += arr[i];
      v.preveaten = arr[i];
      v.prevcolour = colour[i];
      v.t += abs(i - u.pos);
      v.pos = i;
      if (v.candies < 1300 && !vis[v.candies][v.pos][v.t])
        pq.push(v), vis[v.candies][v.pos][v.t] = 1;
    }
  }
  cout << ans << '\n';
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  ;
  int t;
  t = 1;
  while (t--) {
    cp();
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50 50 1250
1 3 5 7 9 11 13 15 17 17 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 50 48 11 44 42 40 38 36 34 32 44 28 26 24 22 20 18 16 14 12 10 8 6 4 2
GGGGGGGGGGGGGGGGGGGGGGGGGRRRRRRRRRRRRRRRRRRRRRRRRR


(G.2) Fast Input

50 4 200
14 10 50 47 41 9 22 21 42 36 50 10 27 28 39 1 36 12 45 35 17 3 15 25 32 4 34 39 44 34 20 15 18 1 38 25 20 3 24 9 18 15 35 36 12 9 28 4 44 10
BGBRRBGBRRRGRGRBRGGGRBRRGBBGGRBRRGGRGGGBRRBRGGBGBG


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const double eps = 1e-9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const double PI = acos(-1.0); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long int mod = 1e9 + 7; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 1e6 + 5; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
struct node { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  int t, candies, prevcolour, preveaten, pos; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  node() {} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  node(int t, int candies, int prevcolour, int preveaten, int pos) /* line 10 slow_hit_count: 50, fast_hit_count: 50 */
      : t(t), /* line 11 slow_hit_count: 50, fast_hit_count: 50 */
        candies(candies), /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
        prevcolour(prevcolour), /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
        pos(pos), /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
        preveaten(preveaten) {} /* line 15 slow_hit_count: 50, fast_hit_count: 50 */
  const bool operator<(const node &nd) const { /* line 16 slow_hit_count: 9526127, fast_hit_count: 17679 */
    if (t == nd.t) /* line 17 slow_hit_count: 9526127, fast_hit_count: 17679 */
      return candies < nd.candies; /* line 18 slow_hit_count: 5564595, fast_hit_count: 5057 */
    else /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
      return t > nd.t; /* line 20 slow_hit_count: 3961532, fast_hit_count: 12622 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
bool vis[1300][55][1300]; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
void cp() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int n, s, k; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  string colour; /* line 26 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> n >> s >> k; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> arr(n); /* line 28 slow_hit_count: 2, fast_hit_count: 2 */
  for (int &x : arr) cin >> x; /* line 29 slow_hit_count: 51, fast_hit_count: 51 */
  cin >> colour; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vector<int>> adj(n); /* line 31 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) { /* line 32 slow_hit_count: 51, fast_hit_count: 51 */
    for (int j = 0; j < n; j++) { /* line 33 slow_hit_count: 2550, fast_hit_count: 2550 */
      if (arr[j] > arr[i] && colour[j] != colour[i]) adj[i].push_back(j); /* line 34 slow_hit_count: 2500, fast_hit_count: 2500 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  long long int ans = -1; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  priority_queue<node> pq; /* line 38 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) { /* line 39 slow_hit_count: 51, fast_hit_count: 51 */
    int d = abs(i - (s - 1)); /* line 40 slow_hit_count: 50, fast_hit_count: 50 */
    pq.push(node(d, arr[i], colour[i], arr[i], i)); /* line 41 slow_hit_count: 50, fast_hit_count: 50 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  while (!pq.empty()) { /* line 43 slow_hit_count: 652006, fast_hit_count: 838 */
    node u = pq.top(); /* line 44 slow_hit_count: 652005, fast_hit_count: 838 */
    pq.pop(); /* line 45 slow_hit_count: 652005, fast_hit_count: 838 */
    vis[u.candies][u.pos][u.t] = 1; /* line 46 slow_hit_count: 652005, fast_hit_count: 838 */
    if (u.candies >= k) { /* line 47 slow_hit_count: 652005, fast_hit_count: 838 */
      ans = u.t; /* line 48 slow_hit_count: 0, fast_hit_count: 1 */
      break; /* line 49 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i : adj[u.pos]) { /* line 51 slow_hit_count: 2977434, fast_hit_count: 5474 */
      node v = u; /* line 52 slow_hit_count: 2325429, fast_hit_count: 4637 */
      v.candies += arr[i]; /* line 53 slow_hit_count: 2325429, fast_hit_count: 4637 */
      v.preveaten = arr[i]; /* line 54 slow_hit_count: 2325429, fast_hit_count: 4637 */
      v.prevcolour = colour[i]; /* line 55 slow_hit_count: 2325429, fast_hit_count: 4637 */
      v.t += abs(i - u.pos); /* line 56 slow_hit_count: 2325429, fast_hit_count: 4637 */
      v.pos = i; /* line 57 slow_hit_count: 2325429, fast_hit_count: 4637 */
      if (v.candies < 1300 && !vis[v.candies][v.pos][v.t]) /* line 58 slow_hit_count: 2325429, fast_hit_count: 4637 */
        pq.push(v), vis[v.candies][v.pos][v.t] = 1; /* line 59 slow_hit_count: 651955, fast_hit_count: 4144 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  int t; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  t = 1; /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 71 slow_hit_count: 2, fast_hit_count: 2 */
    cp(); /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 75 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose why the program runs slowly for the provided "slow" input and to derive performance-characterizing invariants, we'll follow the tasks as outlined.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The operator `<` in the `node` struct has significantly higher hit counts for the slow input (lines 16–20).
   - The while loop starting at line 43 is executed substantially more times for the slow input.
   - Inside the while loop, the for loop at line 51 is also executed more times, which suggests that the neighboring nodes are accessed repeatedly.

2. **Pinpoint Lines/Functions with More Hits:**
   - Lines 16–20: The comparison operator is used to maintain the priority queue order. It is hit 9526127 times for the slow input versus 17679 times for the fast input.
   - Lines 43–45: The priority queue operations are considerably more frequent for the slow input.

3. **Inference on Data Structures and Loops:**
   - The priority queue (`pq`) is heavily utilized, with operations to push and pop nodes. The adjacency list (`adj`) is accessed frequently, indicating a large search space being explored.
   - The input constraints (`n <= 50`) contribute to a potentially exhaustive search via the priority queue, especially when transitioning between boxes frequently due to candy color constraints.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some natural language invariants that describe conditions under which the program likely enters a slow path:

1. **Invariant 1: High Search Space Exploration**
   - Natural Language: "If Tanya has to explore a high number of box transitions due to alternating candy colors and increasing candy counts, the priority queue operations will be numerous, causing slowdowns."
   - Explanation: The large number of transitions between boxes, especially with changing colors and increasing candy requirements, leads to a high number of operations on the priority queue.

2. **Invariant 2: Dense Adjacency List Usage**
   - Natural Language: "When most boxes are potential candidates for transition due to varied color sequences and increasing candy counts, the adjacency list becomes densely populated, leading to more iterations."
   - Explanation: If many boxes meet the transition criteria (different colors, more candies), the adjacency list results in more nodes being considered, increasing computational efforts.

3. **Invariant 3: Repeated Priority Queue Adjustments**
   - Natural Language: "With a large number of boxes and complex conditions for transitions, the priority queue has to frequently update its node order, leading to significant performance overhead."
   - Explanation: Complex conditions for moving from one box to another can result in frequent reordering of nodes in the priority queue.

4. **Invariant 4: Extensive Backtracking**
   - Natural Language: "If the conditions necessitate backtracking often—moving back to previously visited boxes—the algorithm examines a larger state space, leading to longer execution times."
   - Explanation: Tanya may need to revisit boxes due to the specific conditions, thereby re-evaluating states and using more computational resources.

These invariants aim to abstract the conditions leading to slow performance without relying on specific input values, instead focusing on the underlying patterns and constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n candy boxes in front of Tania. The boxes are arranged in a row from left to right, numbered from 1 to n. The i-th box contains r_i candies, candies have the color c_i (the color can take one of three values ​​— red, green, or blue). All candies inside a single box have the same color (and it is equal to c_i).

Initially, Tanya is next to the box number s. Tanya can move to the neighbor box (that is, with a number that differs by one) or eat candies in the current box. Tanya eats candies instantly, but the movement takes one second.

If Tanya eats candies from the box, then the box itself remains in place, but there is no more candies in it. In other words, Tanya always eats all the candies from the box and candies in the boxes are not refilled.

It is known that Tanya cannot eat candies of the same color one after another (that is, the colors of candies in two consecutive boxes from which she eats candies are always different). In addition, Tanya's appetite is constantly growing, so in each next box from which she eats candies, there should be strictly more candies than in the previous one.

Note that for the first box from which Tanya will eat candies, there are no restrictions on the color and number of candies.

Tanya wants to eat at least k candies. What is the minimum number of seconds she will need? Remember that she eats candies instantly, and time is spent only on movements.

Input

The first line contains three integers n, s and k (1 ≤ n ≤ 50, 1 ≤ s ≤ n, 1 ≤ k ≤ 2000) — number of the boxes, initial position of Tanya and lower bound on number of candies to eat. The following line contains n integers r_i (1 ≤ r_i ≤ 50) — numbers of candies in the boxes. The third line contains sequence of n letters 'R', 'G' and 'B', meaning the colors of candies in the correspondent boxes ('R' for red, 'G' for green, 'B' for blue). Recall that each box contains candies of only one color. The third line contains no spaces.

Output

Print minimal number of seconds to eat at least k candies. If solution doesn't exist, print "-1".

Examples

Input

5 3 10
1 2 3 4 5
RGBRR


Output

4


Input

2 1 15
5 6
RG


Output

-1

Note

The sequence of actions of Tanya for the first example:

  * move from the box 3 to the box 2; 
  * eat candies from the box 2; 
  * move from the box 2 to the box 3; 
  * eat candy from the box 3; 
  * move from the box 3 to the box 4; 
  * move from the box 4 to the box 5; 
  * eat candies from the box 5. 



Since Tanya eats candy instantly, the required time is four seconds.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checker Code in C++

Below are the C++ snippets implementing the invariants derived in Phase 2.

1. **Invariant 1: High Search Space Exploration**

   - Natural Language: "If Tanya has to explore a high number of box transitions due to alternating candy colors and increasing candy counts, the priority queue operations will be numerous, causing slowdowns."

   ```cpp
   void check_high_search_space_invariant(int num_pq_operations) {
       if (num_pq_operations > 100000) { // An arbitrary threshold for a large number of operations
           cerr << "Warning: Performance bottleneck condition triggered - High search space exploration!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Dense Adjacency List Usage**

   - Natural Language: "When most boxes are potential candidates for transition due to varied color sequences and increasing candy counts, the adjacency list becomes densely populated, leading to more iterations."

   ```cpp
   void check_dense_adj_list_invariant(int n, const vector<vector<int>>& adj) {
       int max_adj_size = 0;
       for (const auto& neighbors : adj) {
           max_adj_size = max(max_adj_size, static_cast<int>(neighbors.size()));
       }
       if (max_adj_size > n / 2) { // Arbitrary threshold: more than half of boxes are potential candidates
           cerr << "Warning: Performance bottleneck condition triggered - Dense adjacency list usage!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Repeated Priority Queue Adjustments**

   - Natural Language: "With a large number of boxes and complex conditions for transitions, the priority queue has to frequently update its node order, leading to significant performance overhead."

   ```cpp
   void check_repeated_pq_adjustments(int pq_size) {
       if (pq_size > 1000) { // An arbitrary threshold for a significant number of priority queue elements
           cerr << "Warning: Performance bottleneck condition triggered - Repeated priority queue adjustments!" << endl;
           abort();
       }
   }
   ```

4. **Invariant 4: Extensive Backtracking**

   - Natural Language: "If the conditions necessitate backtracking often—moving back to previously visited boxes—the algorithm examines a larger state space, leading to longer execution times."

   ```cpp
   void check_extensive_backtracking(int backtrack_count, int n) {
       if (backtrack_count > n * 10) { // Arbitrary threshold: backtracking more than 10 times per box
           cerr << "Warning: Performance bottleneck condition triggered - Extensive backtracking!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into Original Program

Below is the instrumented C++ code with the checker functions integrated. The checkers are placed at strategic points to monitor the performance bottlenecks without adding overhead to tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

struct node {
    int t, candies, prevcolour, preveaten, pos;
    node() {}
    node(int t, int candies, int prevcolour, int preveaten, int pos)
        : t(t), candies(candies), prevcolour(prevcolour), pos(pos), preveaten(preveaten) {}
    const bool operator<(const node &nd) const {
        if (t == nd.t)
            return candies < nd.candies;
        else
            return t > nd.t;
    }
};

bool vis[1300][55][1300];

void check_high_search_space_invariant(int num_pq_operations) {
    if (num_pq_operations > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - High search space exploration!" << endl;
        abort();
    }
}

void check_dense_adj_list_invariant(int n, const vector<vector<int>>& adj) {
    int max_adj_size = 0;
    for (const auto& neighbors : adj) {
        max_adj_size = max(max_adj_size, static_cast<int>(neighbors.size()));
    }
    if (max_adj_size > n / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - Dense adjacency list usage!" << endl;
        abort();
    }
}

void check_repeated_pq_adjustments(int pq_size) {
    if (pq_size > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - Repeated priority queue adjustments!" << endl;
        abort();
    }
}

void check_extensive_backtracking(int backtrack_count, int n) {
    if (backtrack_count > n * 10) {
        cerr << "Warning: Performance bottleneck condition triggered - Extensive backtracking!" << endl;
        abort();
    }
}

void cp() {
    int n, s, k;
    string colour;
    cin >> n >> s >> k;
    vector<int> arr(n);
    for (int &x : arr) cin >> x;
    cin >> colour;
    vector<vector<int>> adj(n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (arr[j] > arr[i] && colour[j] != colour[i]) adj[i].push_back(j);
        }
    }

    check_dense_adj_list_invariant(n, adj); // Check dense adjacency list

    long long int ans = -1;
    priority_queue<node> pq;
    int num_pq_operations = 0; // Track number of priority queue operations
    int backtrack_count = 0; // Track backtracking counts

    for (int i = 0; i < n; i++) {
        int d = abs(i - (s - 1));
        pq.push(node(d, arr[i], colour[i], arr[i], i));
        num_pq_operations++;
    }

    check_high_search_space_invariant(num_pq_operations); // Check high search space exploration

    while (!pq.empty()) {
        check_repeated_pq_adjustments(pq.size()); // Check repeated priority queue adjustments

        node u = pq.top();
        pq.pop();
        vis[u.candies][u.pos][u.t] = 1;
        
        if (u.candies >= k) {
            ans = u.t;
            break;
        }

        for (int i : adj[u.pos]) {
            node v = u;
            v.candies += arr[i];
            v.preveaten = arr[i];
            v.prevcolour = colour[i];
            v.t += abs(i - u.pos);
            v.pos = i;
            
            if (v.candies < 1300 && !vis[v.candies][v.pos][v.t]) {
                pq.push(v);
                vis[v.candies][v.pos][v.t] = 1;
                num_pq_operations++;
            } else {
                backtrack_count++;
            }
            
            check_extensive_backtracking(backtrack_count, n); // Check extensive backtracking
        }
    }

    cout << ans << '\n';
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int t;
    t = 1;
    while (t--) {
        cp();
    }
    return 0;
}
```

**Integration Explanation:**
- **Dense Adjacency List Usage:** Checked after constructing the adjacency list.
- **High Search Space Exploration:** Checked after initial priority queue operations.
- **Repeated Priority Queue Adjustments:** Checked within each iteration of the main while loop.
- **Extensive Backtracking:** Checked during adjacency exploration.

This integration effectively places checks to detect the described performance bottlenecks without impacting critical performance paths excessively.

