system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n candy boxes in front of Tania. The boxes are arranged in a row from left to right, numbered from 1 to n. The i-th box contains r_i candies, candies have the color c_i (the color can take one of three values ​​— red, green, or blue). All candies inside a single box have the same color (and it is equal to c_i).

Initially, Tanya is next to the box number s. Tanya can move to the neighbor box (that is, with a number that differs by one) or eat candies in the current box. Tanya eats candies instantly, but the movement takes one second.

If Tanya eats candies from the box, then the box itself remains in place, but there is no more candies in it. In other words, Tanya always eats all the candies from the box and candies in the boxes are not refilled.

It is known that Tanya cannot eat candies of the same color one after another (that is, the colors of candies in two consecutive boxes from which she eats candies are always different). In addition, Tanya's appetite is constantly growing, so in each next box from which she eats candies, there should be strictly more candies than in the previous one.

Note that for the first box from which Tanya will eat candies, there are no restrictions on the color and number of candies.

Tanya wants to eat at least k candies. What is the minimum number of seconds she will need? Remember that she eats candies instantly, and time is spent only on movements.

Input

The first line contains three integers n, s and k (1 ≤ n ≤ 50, 1 ≤ s ≤ n, 1 ≤ k ≤ 2000) — number of the boxes, initial position of Tanya and lower bound on number of candies to eat. The following line contains n integers r_i (1 ≤ r_i ≤ 50) — numbers of candies in the boxes. The third line contains sequence of n letters 'R', 'G' and 'B', meaning the colors of candies in the correspondent boxes ('R' for red, 'G' for green, 'B' for blue). Recall that each box contains candies of only one color. The third line contains no spaces.

Output

Print minimal number of seconds to eat at least k candies. If solution doesn't exist, print "-1".

Examples

Input

5 3 10
1 2 3 4 5
RGBRR


Output

4


Input

2 1 15
5 6
RG


Output

-1

Note

The sequence of actions of Tanya for the first example:

  * move from the box 3 to the box 2; 
  * eat candies from the box 2; 
  * move from the box 2 to the box 3; 
  * eat candy from the box 3; 
  * move from the box 3 to the box 4; 
  * move from the box 4 to the box 5; 
  * eat candies from the box 5. 



Since Tanya eats candy instantly, the required time is four seconds.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int read() {
  char ch = getchar();
  int x = 0, f = 1;
  while (ch < '0' || ch > '9') {
    if (ch == '-') f = -1;
    ch = getchar();
  }
  while (ch >= '0' && ch <= '9') {
    x = x * 10 + ch - '0';
    ch = getchar();
  }
  return x * f;
}
const int N = 55;
struct edge {
  int from, val;
};
vector<edge> G[N];
int r[N];
char c[N];
bool vis[N][2505];
int f[N][2505];
int n, s, k;
int ans = 2e9;
int ABS(int x) {
  if (x > 0) return x;
  return -x;
}
void init() {
  for (int i = 1; i <= n; i++) {
    for (int j = 0; j <= 2500; j++) {
      f[i][j] = 2e9;
    }
    f[i][r[i]] = ABS(i - s);
  }
  f[s][0] = 0;
}
int dfs(int x, int y) {
  if (y >= k) ans = min(ans, f[x][y]);
  if (f[x][y] != 2e9 || vis[x][y]) {
    vis[x][y] = true;
    return f[x][y];
  }
  for (int i = 0; i < int(G[x].size()); i++) {
    int from = G[x][i].from;
    if (y - r[x] < 0) continue;
    f[x][y] = min(f[x][y], dfs(from, y - r[x]) + G[x][i].val);
  }
  if (y >= k) ans = min(ans, f[x][y]);
  vis[x][y] = true;
  return f[x][y];
}
int main() {
  n = read(), s = read(), k = read();
  for (int i = 1; i <= n; i++) r[i] = read();
  init();
  scanf("%s", c + 1);
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= n; j++) {
      if (c[i] == c[j] || r[i] >= r[j]) continue;
      G[j].push_back((edge){i, ABS(i - j)});
    }
  }
  for (int i = 1; i <= n; i++) {
    for (int j = k; j <= 2500; j++) {
      dfs(i, j);
    }
  }
  printf("%d\n", ans == 2e9 ? -1 : ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50 50 1250
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 50 48 46 44 42 40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4 2
RRRRRRRRRRRRRRRRRRRRRRRRRGGGGGGGGGGGGGGGGGGGGGGGGG


(G.2) Fast Input

50 39 2000
48 43 26 24 46 37 15 30 39 34 4 14 29 34 8 18 40 8 17 37 15 29 2 23 41 7 12 13 36 11 24 22 26 46 11 31 10 46 11 35 6 41 16 50 11 1 46 20 46 28
BGBBBBBBRGGBBBRRRRBBGRGGRBBRBBBRBBBBBRRGBGGRRRBBRB


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int read() { /* line 3 slow_hit_count: 53, fast_hit_count: 53 */
  char ch = getchar(); /* line 4 slow_hit_count: 53, fast_hit_count: 53 */
  int x = 0, f = 1; /* line 5 slow_hit_count: 53, fast_hit_count: 53 */
  while (ch < '0' || ch > '9') { /* line 6 slow_hit_count: 53, fast_hit_count: 53 */
    if (ch == '-') f = -1; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    ch = getchar(); /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  while (ch >= '0' && ch <= '9') { /* line 10 slow_hit_count: 152, fast_hit_count: 154 */
    x = x * 10 + ch - '0'; /* line 11 slow_hit_count: 99, fast_hit_count: 101 */
    ch = getchar(); /* line 12 slow_hit_count: 99, fast_hit_count: 101 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  return x * f; /* line 14 slow_hit_count: 53, fast_hit_count: 53 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 55; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
struct edge { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  int from, val; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
vector<edge> G[N]; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int r[N]; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
char c[N]; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
bool vis[N][2505]; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
int f[N][2505]; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
int n, s, k; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
int ans = 2e9; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int ABS(int x) { /* line 27 slow_hit_count: 675, fast_hit_count: 795 */
  if (x > 0) return x; /* line 28 slow_hit_count: 675, fast_hit_count: 795 */
  return -x; /* line 29 slow_hit_count: 375, fast_hit_count: 396 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
void init() { /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 32 slow_hit_count: 51, fast_hit_count: 51 */
    for (int j = 0; j <= 2500; j++) { /* line 33 slow_hit_count: 125100, fast_hit_count: 125100 */
      f[i][j] = 2e9; /* line 34 slow_hit_count: 125050, fast_hit_count: 125050 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    f[i][r[i]] = ABS(i - s); /* line 36 slow_hit_count: 50, fast_hit_count: 50 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  f[s][0] = 0; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
int dfs(int x, int y) { /* line 40 slow_hit_count: 1229357, fast_hit_count: 587246 */
  if (y >= k) ans = min(ans, f[x][y]); /* line 41 slow_hit_count: 1229357, fast_hit_count: 587246 */
  if (f[x][y] != 2e9 || vis[x][y]) { /* line 42 slow_hit_count: 1229357, fast_hit_count: 587246 */
    vis[x][y] = true; /* line 43 slow_hit_count: 1125264, fast_hit_count: 544401 */
    return f[x][y]; /* line 44 slow_hit_count: 1125264, fast_hit_count: 544401 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < int(G[x].size()); i++) { /* line 46 slow_hit_count: 1270944, fast_hit_count: 605041 */
    int from = G[x][i].from; /* line 47 slow_hit_count: 1166851, fast_hit_count: 562196 */
    if (y - r[x] < 0) continue; /* line 48 slow_hit_count: 1166851, fast_hit_count: 562196 */
    f[x][y] = min(f[x][y], dfs(from, y - r[x]) + G[x][i].val); /* line 49 slow_hit_count: 1166807, fast_hit_count: 562196 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  if (y >= k) ans = min(ans, f[x][y]); /* line 51 slow_hit_count: 104093, fast_hit_count: 42845 */
  vis[x][y] = true; /* line 52 slow_hit_count: 104093, fast_hit_count: 42845 */
  return f[x][y]; /* line 53 slow_hit_count: 104093, fast_hit_count: 42845 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  n = read(), s = read(), k = read(); /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) r[i] = read(); /* line 57 slow_hit_count: 51, fast_hit_count: 51 */
  init(); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%s", c + 1); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 60 slow_hit_count: 51, fast_hit_count: 51 */
    for (int j = 1; j <= n; j++) { /* line 61 slow_hit_count: 2550, fast_hit_count: 2550 */
      if (c[i] == c[j] || r[i] >= r[j]) continue; /* line 62 slow_hit_count: 2500, fast_hit_count: 2500 */
      G[j].push_back((edge){i, ABS(i - j)}); /* line 63 slow_hit_count: 625, fast_hit_count: 745 */
    } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 66 slow_hit_count: 51, fast_hit_count: 51 */
    for (int j = k; j <= 2500; j++) { /* line 67 slow_hit_count: 62600, fast_hit_count: 25100 */
      dfs(i, j); /* line 68 slow_hit_count: 62550, fast_hit_count: 25050 */
    } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans == 2e9 ? -1 : ans); /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 73 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottleneck of the provided C program, let's break down the tasks into two phases based on the given code, input scenarios, and hit count information:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Comparison:**
   - The lines with significantly higher hit counts for the slow input compared to the fast input are primarily found within the `dfs` function, especially lines `40`, `41`, `42`, `46`, `47`, `48`, and `49`. These lines correspond to the execution of recursive depth-first search calls.
   
2. **Critical Observation:**
   - The `dfs` function is called a staggering number of times (over 1.2 million) for the slow input, whereas it is called significantly fewer times (around 587,246) for the fast input.
   - The use of a 2D array `f[x][y]` for memoization seems to be causing inefficient lookups or updates, particularly when dealing with high values of `y` (up to 2500).

3. **Interaction with Data Structures:**
   - The adjacency list `G` is utilized heavily during the recursive `dfs` invocation where the condition `y - r[x] < 0` acts as a filter.
   - Recursive calls intensifying operations on this data structure indicate a potential recursion depth or search space explosion.

4. **Input Constraints and Their Implications:**
   - Given the constraints (e.g., `n <= 50` and `1 <= r_i <= 50`), the performance issue is unlikely due to input size alone but more related to the problem's requirements of changing candy colors and increasing candy counts.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified bottlenecks, here are performance-characterizing invariants in natural language:

1. **Invariant 1: Recursive Exploration and Search Space Complexity**
   - Natural Language: "When Tanya's path requires exploring a large search space due to constraints on color changes and increasing candy counts, the recursive exploration can become computationally expensive. Particularly, if many recursive branches need to be explored due to similar candy configurations, the program may slow down."
   - Example Implementation: Consider flagging excessive recursion depths or high branching factors during execution.

2. **Invariant 2: Memory and Data Structure Overhead**
   - Natural Language: "If the memoization structure experiences a large number of updates or lookups due to varied candy configurations and constraints, it may lead to significant overhead. Especially when multiple paths with large cumulative candy counts are evaluated, performance can degrade."
   - Example Implementation: Monitor and optimize memoization strategies or limit redundant updates.

3. **Invariant 3: Inefficient Backtracking or State Re-evaluation**
   - Natural Language: "When the state space involves significant backtracking due to similar candy configurations or positions, performance may degrade. This is particularly evident when multiple similar states are unnecessarily recomputed."
   - Example Implementation: Implement smarter pruning or state checking mechanisms to avoid redundant computations.

### Conclusion

These invariants provide a framework for understanding and potentially mitigating performance issues in the given C program. By focusing on recursive depth management, optimizing data structure interactions, and reducing unnecessary state evaluations, the program's performance could improve significantly under such challenging inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n candy boxes in front of Tania. The boxes are arranged in a row from left to right, numbered from 1 to n. The i-th box contains r_i candies, candies have the color c_i (the color can take one of three values ​​— red, green, or blue). All candies inside a single box have the same color (and it is equal to c_i).

Initially, Tanya is next to the box number s. Tanya can move to the neighbor box (that is, with a number that differs by one) or eat candies in the current box. Tanya eats candies instantly, but the movement takes one second.

If Tanya eats candies from the box, then the box itself remains in place, but there is no more candies in it. In other words, Tanya always eats all the candies from the box and candies in the boxes are not refilled.

It is known that Tanya cannot eat candies of the same color one after another (that is, the colors of candies in two consecutive boxes from which she eats candies are always different). In addition, Tanya's appetite is constantly growing, so in each next box from which she eats candies, there should be strictly more candies than in the previous one.

Note that for the first box from which Tanya will eat candies, there are no restrictions on the color and number of candies.

Tanya wants to eat at least k candies. What is the minimum number of seconds she will need? Remember that she eats candies instantly, and time is spent only on movements.

Input

The first line contains three integers n, s and k (1 ≤ n ≤ 50, 1 ≤ s ≤ n, 1 ≤ k ≤ 2000) — number of the boxes, initial position of Tanya and lower bound on number of candies to eat. The following line contains n integers r_i (1 ≤ r_i ≤ 50) — numbers of candies in the boxes. The third line contains sequence of n letters 'R', 'G' and 'B', meaning the colors of candies in the correspondent boxes ('R' for red, 'G' for green, 'B' for blue). Recall that each box contains candies of only one color. The third line contains no spaces.

Output

Print minimal number of seconds to eat at least k candies. If solution doesn't exist, print "-1".

Examples

Input

5 3 10
1 2 3 4 5
RGBRR


Output

4


Input

2 1 15
5 6
RG


Output

-1

Note

The sequence of actions of Tanya for the first example:

  * move from the box 3 to the box 2; 
  * eat candies from the box 2; 
  * move from the box 2 to the box 3; 
  * eat candy from the box 3; 
  * move from the box 3 to the box 4; 
  * move from the box 4 to the box 5; 
  * eat candies from the box 5. 



Since Tanya eats candy instantly, the required time is four seconds.

Solution (C++ code):
{solution}


assistant: Let's start by translating the performance-characterizing invariants into runtime checks in C++ (Phase 3), and then integrate these checks into the original C++ program (Phase 4).

### Phase 3: Implement Performance-Characterizing Invariants in C++

Below are the C++ code snippets implementing the natural language invariants derived previously:

1. **Recursive Exploration and Search Space Complexity:**

```cpp
void check_dfs_invariant(int recursionDepth, int branchingFactor) {
    if (recursionDepth > 50 && branchingFactor > 10) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}
```

2. **Memory and Data Structure Overhead:**

```cpp
void check_memoization_invariant(int valUsage, int n) {
    if (valUsage > n * 10) { // Example threshold based on problem constraints
        cerr << "Warning: memoization_invariant triggered - excessive memoization usage" << endl;
        abort();
    }
}
```

3. **Inefficient Backtracking or State Re-evaluation:**

```cpp
void check_backtracking_invariant(int stateReevaluations) {
    if (stateReevaluations > 1000) { // Example threshold
        cerr << "Warning: backtracking_invariant triggered - too many state reevaluations" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original C++ Program

Now, let's integrate these checks into the original C++ program by placing them at strategic points:

```cpp
#include <bits/stdc++.h>
using namespace std;

int read() {
    char ch = getchar();
    int x = 0, f = 1;
    while (ch < '0' || ch > '9') {
        if (ch == '-') f = -1;
        ch = getchar();
    }
    while (ch >= '0' && ch <= '9') {
        x = x * 10 + ch - '0';
        ch = getchar();
    }
    return x * f;
}

const int N = 55;
struct edge {
    int from, val;
};
vector<edge> G[N];
int r[N];
char c[N];
bool vis[N][2505];
int f[N][2505];
int n, s, k;
int ans = 2e9;

int ABS(int x) {
    if (x > 0) return x;
    return -x;
}

void init() {
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j <= 2500; j++) {
            f[i][j] = 2e9;
        }
        f[i][r[i]] = ABS(i - s);
    }
    f[s][0] = 0;
}

// Checker functions for invariants
void check_dfs_invariant(int recursionDepth, int branchingFactor) {
    if (recursionDepth > 50 && branchingFactor > 10) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

void check_memoization_invariant(int valUsage, int n) {
    if (valUsage > n * 10) {
        cerr << "Warning: memoization_invariant triggered - excessive memoization usage" << endl;
        abort();
    }
}

void check_backtracking_invariant(int stateReevaluations) {
    if (stateReevaluations > 1000) {
        cerr << "Warning: backtracking_invariant triggered - too many state reevaluations" << endl;
        abort();
    }
}

int dfs(int x, int y, int depth) {
    // Check for excessive depth and branching during recursion
    check_dfs_invariant(depth, G[x].size());

    if (y >= k) ans = min(ans, f[x][y]);
    if (f[x][y] != 2e9 || vis[x][y]) {
        vis[x][y] = true;
        return f[x][y];
    }

    int stateReevaluations = 0;

    for (int i = 0; i < int(G[x].size()); i++) {
        int from = G[x][i].from;
        if (y - r[x] < 0) continue;
        f[x][y] = min(f[x][y], dfs(from, y - r[x], depth + 1) + G[x][i].val);
        stateReevaluations++;
    }

    // Check for excessive state reevaluations
    check_backtracking_invariant(stateReevaluations);

    if (y >= k) ans = min(ans, f[x][y]);
    vis[x][y] = true;
    return f[x][y];
}

int main() {
    n = read(), s = read(), k = read();
    for (int i = 1; i <= n; i++) r[i] = read();
    init();
    scanf("%s", c + 1);

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            if (c[i] == c[j] || r[i] >= r[j]) continue;
            G[j].push_back((edge){i, ABS(i - j)});
        }
    }

    int valUsage = 0;

    for (int i = 1; i <= n; i++) {
        for (int j = k; j <= 2500; j++) {
            valUsage++;
            dfs(i, j, 0);
        }
    }

    // Check for excessive memoization usage
    check_memoization_invariant(valUsage, n);

    printf("%d\n", ans == 2e9 ? -1 : ans);
    return 0;
}
```

### Explanation of Inserted Checkpoints

- **`check_dfs_invariant`:** This check is called at the beginning of each `dfs` call to monitor the recursion depth and branching factor.
- **`check_backtracking_invariant`:** This is used within the `dfs` loop to ensure that excessive backtracking or state reevaluation does not occur.
- **`check_memoization_invariant`:** After the `dfs` loop in `main`, this check evaluates the overall usage of memoization to detect potential overheads. 

These checks should help in proactively identifying and aborting execution when potential performance bottlenecks are detected during runtime.

