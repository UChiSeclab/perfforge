system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n candy boxes in front of Tania. The boxes are arranged in a row from left to right, numbered from 1 to n. The i-th box contains r_i candies, candies have the color c_i (the color can take one of three values ​​— red, green, or blue). All candies inside a single box have the same color (and it is equal to c_i).

Initially, Tanya is next to the box number s. Tanya can move to the neighbor box (that is, with a number that differs by one) or eat candies in the current box. Tanya eats candies instantly, but the movement takes one second.

If Tanya eats candies from the box, then the box itself remains in place, but there is no more candies in it. In other words, Tanya always eats all the candies from the box and candies in the boxes are not refilled.

It is known that Tanya cannot eat candies of the same color one after another (that is, the colors of candies in two consecutive boxes from which she eats candies are always different). In addition, Tanya's appetite is constantly growing, so in each next box from which she eats candies, there should be strictly more candies than in the previous one.

Note that for the first box from which Tanya will eat candies, there are no restrictions on the color and number of candies.

Tanya wants to eat at least k candies. What is the minimum number of seconds she will need? Remember that she eats candies instantly, and time is spent only on movements.

Input

The first line contains three integers n, s and k (1 ≤ n ≤ 50, 1 ≤ s ≤ n, 1 ≤ k ≤ 2000) — number of the boxes, initial position of Tanya and lower bound on number of candies to eat. The following line contains n integers r_i (1 ≤ r_i ≤ 50) — numbers of candies in the boxes. The third line contains sequence of n letters 'R', 'G' and 'B', meaning the colors of candies in the correspondent boxes ('R' for red, 'G' for green, 'B' for blue). Recall that each box contains candies of only one color. The third line contains no spaces.

Output

Print minimal number of seconds to eat at least k candies. If solution doesn't exist, print "-1".

Examples

Input

5 3 10
1 2 3 4 5
RGBRR


Output

4


Input

2 1 15
5 6
RG


Output

-1

Note

The sequence of actions of Tanya for the first example:

  * move from the box 3 to the box 2; 
  * eat candies from the box 2; 
  * move from the box 2 to the box 3; 
  * eat candy from the box 3; 
  * move from the box 3 to the box 4; 
  * move from the box 4 to the box 5; 
  * eat candies from the box 5. 



Since Tanya eats candy instantly, the required time is four seconds.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const int N = 55;
using namespace std;
int n, s, k;
vector<int> g[N];
char c[N];
int r[N], b, cnt[N];
int f[N][N * N];
int p(int x) {
  if (x < n)
    return x;
  else
    return s;
}
void dfs(int x, int y) {
  if (x == n && y == 0) {
    f[x][y] = 0;
    return;
  } else if (x == n) {
    f[x][y] = 100000;
    return;
  }
  if (f[x][y] != -1) return;
  int i, mint = 100000;
  for (i = 0; i < g[x].size(); i++) {
    dfs(g[x][i], y - r[x]);
    mint = min(mint, f[g[x][i]][y - r[x]] + abs(p(x) - p(g[x][i])));
  }
  f[x][y] = mint;
}
int main() {
  int i, j, sum = 0;
  scanf("%d%d%d", &n, &s, &k);
  s--;
  for (i = 0; i < n; i++) {
    scanf("%d", &r[i]);
    sum += r[i];
  }
  scanf("%s", c);
  c[n] = 'A';
  r[n] = 0;
  for (i = 0; i <= n; i++)
    for (j = 0; j < n; j++)
      if (r[i] < r[j] && c[i] != c[j]) {
        g[j].push_back(i);
        cnt[i]++;
      }
  memset(f, -1, sizeof(f));
  int ans = 100000;
  for (i = 0; i <= n; i++)
    if (cnt[i] == 0) {
      for (j = k; j <= sum; j++) {
        dfs(i, j);
        if (f[i][j] < ans) ans = f[i][j];
      }
    }
  if (ans < 100000)
    printf("%d\n", ans);
  else
    printf("-1\n");
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50 50 1250
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 50 48 46 44 42 40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4 2
RRRRRRRRRRRRRRRRRRRRRRRRRGGGGGGGGGGGGGGGGGGGGGGGGG


(G.2) Fast Input

50 50 1250
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 50 48 11 44 42 40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4 2
RRRRRRRRRRRRRRRRRRRRRRRRRGGGGGGGGGGGGGGGGGGGGGGGGG


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 55; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, s, k; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> g[N]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
char c[N]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int r[N], b, cnt[N]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int f[N][N * N]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int p(int x) { /* line 9 slow_hit_count: 679286, fast_hit_count: 0 */
  if (x < n) /* line 10 slow_hit_count: 679286, fast_hit_count: 0 */
    return x; /* line 11 slow_hit_count: 642697, fast_hit_count: 0 */
  else /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    return s; /* line 13 slow_hit_count: 36589, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(int x, int y) { /* line 15 slow_hit_count: 339669, fast_hit_count: 0 */
  if (x == n && y == 0) { /* line 16 slow_hit_count: 339669, fast_hit_count: 0 */
    f[x][y] = 0; /* line 17 slow_hit_count: 7, fast_hit_count: 0 */
    return; /* line 18 slow_hit_count: 303080, fast_hit_count: 0 */
  } else if (x == n) { /* line 19 slow_hit_count: 339662, fast_hit_count: 0 */
    f[x][y] = 100000; /* line 20 slow_hit_count: 36582, fast_hit_count: 0 */
    return; /* line 21 slow_hit_count: 36582, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  if (f[x][y] != -1) return; /* line 23 slow_hit_count: 303080, fast_hit_count: 0 */
  int i, mint = 100000; /* line 24 slow_hit_count: 36589, fast_hit_count: 0 */
  for (i = 0; i < g[x].size(); i++) { /* line 25 slow_hit_count: 376232, fast_hit_count: 0 */
    dfs(g[x][i], y - r[x]); /* line 26 slow_hit_count: 339643, fast_hit_count: 0 */
    mint = min(mint, f[g[x][i]][y - r[x]] + abs(p(x) - p(g[x][i]))); /* line 27 slow_hit_count: 339643, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  f[x][y] = mint; /* line 29 slow_hit_count: 36589, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  int i, j, sum = 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d%d", &n, &s, &k); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  s--; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) { /* line 35 slow_hit_count: 51, fast_hit_count: 51 */
    scanf("%d", &r[i]); /* line 36 slow_hit_count: 50, fast_hit_count: 50 */
    sum += r[i]; /* line 37 slow_hit_count: 50, fast_hit_count: 50 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%s", c); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  c[n] = 'A'; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  r[n] = 0; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i <= n; i++) /* line 42 slow_hit_count: 52, fast_hit_count: 52 */
    for (j = 0; j < n; j++) /* line 43 slow_hit_count: 2601, fast_hit_count: 2601 */
      if (r[i] < r[j] && c[i] != c[j]) { /* line 44 slow_hit_count: 2550, fast_hit_count: 2550 */
        g[j].push_back(i); /* line 45 slow_hit_count: 675, fast_hit_count: 674 */
        cnt[i]++; /* line 46 slow_hit_count: 675, fast_hit_count: 674 */
      } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  memset(f, -1, sizeof(f)); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 100000; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i <= n; i++) /* line 50 slow_hit_count: 52, fast_hit_count: 52 */
    if (cnt[i] == 0) { /* line 51 slow_hit_count: 51, fast_hit_count: 51 */
      for (j = k; j <= sum; j++) { /* line 52 slow_hit_count: 27, fast_hit_count: 1 */
        dfs(i, j); /* line 53 slow_hit_count: 26, fast_hit_count: 0 */
        if (f[i][j] < ans) ans = f[i][j]; /* line 54 slow_hit_count: 26, fast_hit_count: 0 */
      } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  if (ans < 100000) /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
    printf("%d\n", ans); /* line 58 slow_hit_count: 1, fast_hit_count: 0 */
  else /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    printf("-1\n"); /* line 60 slow_hit_count: 0, fast_hit_count: 1 */
  return 0; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 62 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the cause of the slowdown in the given C program and generate performance-characterizing invariants, let's go through the analysis in two phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**
   - The `dfs` function is heavily executed for the slow input, as indicated by the high hit counts for lines within this function. Particularly, lines 9, 15-29 show significant activity.
   - The function `p(int x)`, which is used to calculate positions, is also called frequently, as seen on line 9, contributing to the slowdown.

2. **Pinpointing Lines with Significant Hits:**
   - Lines 26 and 27 inside the `dfs` function are the main contributors to the slowdown. The recursive call on line 26 and the calculation on line 27 are heavily executed.
   - The computation involves recursion and dynamic programming (DP) with memoization, which becomes inefficient due to the large number of recursive calls.

3. **Interaction with Data Structures:**
   - The graph `g` is constructed such that each box points to other boxes with more candies and a different color. This creates a recursive search space.
   - The interaction between the recursive function and the positions in `g` is causing excessive computations when evaluating all possible paths Tanya can take.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the natural language performance-characterizing invariants that describe conditions under which the program is likely to slow down:

1. **High Recursion Depth and Search Space:**
   - "When the graph structure results in a high branching factor combined with deep recursive calls, the computation may become expensive. This typically occurs when many transitions between boxes are possible due to alternating colors and increasing candy counts."

2. **Excessive Recursive Calls:**
   - "If the number of recursive calls to explore possible paths between candy boxes is large, the program may experience significant slowdowns. This is particularly true when starting from positions that allow many valid initial transitions."

3. **Inefficient Path Evaluation:**
   - "The program may slow down considerably when the initial position of Tanya is such that it results in a broad exploration of paths, especially when many boxes have nearly the same candy count but differ in color."

4. **Dynamic Programming Memory Usage:**
   - "When the dynamic programming table requires extensive updates due to numerous valid paths, the computation may slow down. This is triggered when the distribution of candies and colors maximizes the number of feasible sequences Tanya must consider."

These invariants are designed to capture the general conditions that lead to slow performance without relying on specific input numbers. They address the structural aspects of the problem, focusing on the interactions of the recursion, graph traversal, and dynamic programming logic with the input constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n candy boxes in front of Tania. The boxes are arranged in a row from left to right, numbered from 1 to n. The i-th box contains r_i candies, candies have the color c_i (the color can take one of three values ​​— red, green, or blue). All candies inside a single box have the same color (and it is equal to c_i).

Initially, Tanya is next to the box number s. Tanya can move to the neighbor box (that is, with a number that differs by one) or eat candies in the current box. Tanya eats candies instantly, but the movement takes one second.

If Tanya eats candies from the box, then the box itself remains in place, but there is no more candies in it. In other words, Tanya always eats all the candies from the box and candies in the boxes are not refilled.

It is known that Tanya cannot eat candies of the same color one after another (that is, the colors of candies in two consecutive boxes from which she eats candies are always different). In addition, Tanya's appetite is constantly growing, so in each next box from which she eats candies, there should be strictly more candies than in the previous one.

Note that for the first box from which Tanya will eat candies, there are no restrictions on the color and number of candies.

Tanya wants to eat at least k candies. What is the minimum number of seconds she will need? Remember that she eats candies instantly, and time is spent only on movements.

Input

The first line contains three integers n, s and k (1 ≤ n ≤ 50, 1 ≤ s ≤ n, 1 ≤ k ≤ 2000) — number of the boxes, initial position of Tanya and lower bound on number of candies to eat. The following line contains n integers r_i (1 ≤ r_i ≤ 50) — numbers of candies in the boxes. The third line contains sequence of n letters 'R', 'G' and 'B', meaning the colors of candies in the correspondent boxes ('R' for red, 'G' for green, 'B' for blue). Recall that each box contains candies of only one color. The third line contains no spaces.

Output

Print minimal number of seconds to eat at least k candies. If solution doesn't exist, print "-1".

Examples

Input

5 3 10
1 2 3 4 5
RGBRR


Output

4


Input

2 1 15
5 6
RG


Output

-1

Note

The sequence of actions of Tanya for the first example:

  * move from the box 3 to the box 2; 
  * eat candies from the box 2; 
  * move from the box 2 to the box 3; 
  * eat candy from the box 3; 
  * move from the box 3 to the box 4; 
  * move from the box 4 to the box 5; 
  * eat candies from the box 5. 



Since Tanya eats candy instantly, the required time is four seconds.

Solution (C++ code):
{solution}


assistant: Let's break this task into two phases. First, I'll translate the previously derived natural language performance-characterizing invariants into C++ code snippets that act as runtime checks. Then, I'll integrate them with the given C++ program.

### Phase 3: Translate Invariants to C++ Checks

Here are the runtime checks that correspond to each performance-characterizing invariant:

1. **High Recursion Depth and Search Space:**

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth or branching factor!" << endl;
        abort();
    }
}
```

2. **Excessive Recursive Calls:**

```cpp
void check_recursion_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive calls!" << endl;
        abort();
    }
}
```

3. **Inefficient Path Evaluation:**

```cpp
void check_path_evaluation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient path evaluation!" << endl;
        abort();
    }
}
```

4. **Dynamic Programming Memory Usage:**

```cpp
void check_dp_memory_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - extensive DP memory usage!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks with the Original Program

Now, let's integrate these checks into the given C++ program. I will place the checks at strategic points to avoid adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
const int N = 55;
using namespace std;
int n, s, k;
vector<int> g[N];
char c[N];
int r[N], b, cnt[N];
int f[N][N * N];

// Checker functions
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high recursion depth or branching factor!" << endl;
        abort();
    }
}

void check_recursion_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive calls!" << endl;
        abort();
    }
}

void check_path_evaluation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient path evaluation!" << endl;
        abort();
    }
}

void check_dp_memory_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - extensive DP memory usage!" << endl;
        abort();
    }
}

int p(int x) {
    if (x < n)
        return x;
    else
        return s;
}

void dfs(int x, int y) {
    // Check excessive recursion calls
    check_recursion_invariant(x > 50 && y > 2000);

    if (x == n && y == 0) {
        f[x][y] = 0;
        return;
    } else if (x == n) {
        f[x][y] = 100000;
        return;
    }
    if (f[x][y] != -1) return;
    int i, mint = 100000;

    // Check for high branching factor
    check_dfs_invariant(g[x].size() > 10);

    for (i = 0; i < g[x].size(); i++) {
        dfs(g[x][i], y - r[x]);
        mint = min(mint, f[g[x][i]][y - r[x]] + abs(p(x) - p(g[x][i])));
    }
    f[x][y] = mint;
}

int main() {
    int i, j, sum = 0;
    scanf("%d%d%d", &n, &s, &k);
    s--;
    for (i = 0; i < n; i++) {
        scanf("%d", &r[i]);
        sum += r[i];
    }
    scanf("%s", c);
    c[n] = 'A';
    r[n] = 0;
    for (i = 0; i <= n; i++)
        for (j = 0; j < n; j++)
            if (r[i] < r[j] && c[i] != c[j]) {
                g[j].push_back(i);
                cnt[i]++;
            }

    // Check DP memory usage
    check_dp_memory_invariant(n * n > 2500);

    memset(f, -1, sizeof(f));
    int ans = 100000;
    for (i = 0; i <= n; i++)
        if (cnt[i] == 0) {
            for (j = k; j <= sum; j++) {
                dfs(i, j);
                if (f[i][j] < ans) ans = f[i][j];
            }
        }

    if (ans < 100000)
        printf("%d\n", ans);
    else
        printf("-1\n");
    return 0;
}
```

**Commentary:**

- Each checker function is used to detect specific bottlenecks.
- The checks are placed before conditions that trigger recursive exploration and calculation to avoid unnecessary overhead.
- The checker for the DP table size is added after its initialization to check memory usage.
- These instruments are meant to provide early warnings to help guide optimizations, particularly useful when used in conjunction with fuzzers and testing frameworks.

