system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n candy boxes in front of Tania. The boxes are arranged in a row from left to right, numbered from 1 to n. The i-th box contains r_i candies, candies have the color c_i (the color can take one of three values ​​— red, green, or blue). All candies inside a single box have the same color (and it is equal to c_i).

Initially, Tanya is next to the box number s. Tanya can move to the neighbor box (that is, with a number that differs by one) or eat candies in the current box. Tanya eats candies instantly, but the movement takes one second.

If Tanya eats candies from the box, then the box itself remains in place, but there is no more candies in it. In other words, Tanya always eats all the candies from the box and candies in the boxes are not refilled.

It is known that Tanya cannot eat candies of the same color one after another (that is, the colors of candies in two consecutive boxes from which she eats candies are always different). In addition, Tanya's appetite is constantly growing, so in each next box from which she eats candies, there should be strictly more candies than in the previous one.

Note that for the first box from which Tanya will eat candies, there are no restrictions on the color and number of candies.

Tanya wants to eat at least k candies. What is the minimum number of seconds she will need? Remember that she eats candies instantly, and time is spent only on movements.

Input

The first line contains three integers n, s and k (1 ≤ n ≤ 50, 1 ≤ s ≤ n, 1 ≤ k ≤ 2000) — number of the boxes, initial position of Tanya and lower bound on number of candies to eat. The following line contains n integers r_i (1 ≤ r_i ≤ 50) — numbers of candies in the boxes. The third line contains sequence of n letters 'R', 'G' and 'B', meaning the colors of candies in the correspondent boxes ('R' for red, 'G' for green, 'B' for blue). Recall that each box contains candies of only one color. The third line contains no spaces.

Output

Print minimal number of seconds to eat at least k candies. If solution doesn't exist, print "-1".

Examples

Input

5 3 10
1 2 3 4 5
RGBRR


Output

4


Input

2 1 15
5 6
RG


Output

-1

Note

The sequence of actions of Tanya for the first example:

  * move from the box 3 to the box 2; 
  * eat candies from the box 2; 
  * move from the box 2 to the box 3; 
  * eat candy from the box 3; 
  * move from the box 3 to the box 4; 
  * move from the box 4 to the box 5; 
  * eat candies from the box 5. 



Since Tanya eats candy instantly, the required time is four seconds.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
bool visited[50][51][2000];
struct State {
  int pos;
  int last_box;
  int candies_eaten;
};
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int N = 0, S = 0, K = 0;
  cin >> N >> S >> K;
  --S;
  vector<int> R(N);
  for (int &i : R) cin >> i;
  string C;
  cin >> C;
  State initial = {S, -1, 0};
  vector<State> queue = {initial};
  visited[S][0][0] = true;
  int steps = 0;
  while (!queue.empty()) {
    vector<State> next_queue;
    for (State s : queue) {
      for (int eat = 0; eat < 2; ++eat) {
        if (eat) {
          if (s.last_box >= 0 &&
              (R[s.pos] <= R[s.last_box] || C[s.pos] == C[s.last_box])) {
            break;
          }
          s.candies_eaten += R[s.pos];
          s.last_box = s.pos;
          if (s.candies_eaten >= K) {
            cout << steps << endl;
            return 0;
          }
        }
        for (int step = -1; step <= +1; ++step) {
          if (step == 0) continue;
          State t = s;
          t.pos += step;
          if (t.pos >= 0 && t.pos < N &&
              !visited[t.pos][t.last_box + 1][t.candies_eaten]++) {
            next_queue.push_back(t);
          }
        }
      }
    }
    queue = next_queue;
    ++steps;
  }
  cout << -1 << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50 50 1250
1 3 5 7 9 11 13 15 17 17 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 50 48 11 44 42 40 38 36 34 32 44 28 26 24 22 20 18 16 14 12 10 8 6 4 2
GGGGGGGGGGGGGGGGGGGGGGGGGRRRRRRRRRRRRRRRRRRRRRRRRR


(G.2) Fast Input

50 4 200
14 10 50 47 41 9 22 21 42 36 50 10 27 28 39 1 36 12 45 35 17 3 15 25 32 4 34 39 44 34 20 15 18 1 38 25 20 3 24 9 18 15 35 36 12 9 28 4 44 10
BGBRRBGBRRRGRGRBRGGGRBRRGBBGGRBRRGGRGGGBRRBRGGBGBG


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
bool visited[50][51][2000]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
struct State { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  int pos; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  int last_box; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  int candies_eaten; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  int N = 0, S = 0, K = 0; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> N >> S >> K; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  --S; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> R(N); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  for (int &i : R) cin >> i; /* line 16 slow_hit_count: 51, fast_hit_count: 51 */
  string C; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> C; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  State initial = {S, -1, 0}; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  vector<State> queue = {initial}; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  visited[S][0][0] = true; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  int steps = 0; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  while (!queue.empty()) { /* line 23 slow_hit_count: 1193, fast_hit_count: 24 */
    vector<State> next_queue; /* line 24 slow_hit_count: 1192, fast_hit_count: 24 */
    for (State s : queue) { /* line 25 slow_hit_count: 880742, fast_hit_count: 8189 */
      for (int eat = 0; eat < 2; ++eat) { /* line 26 slow_hit_count: 1867223, fast_hit_count: 17280 */
        if (eat) { /* line 27 slow_hit_count: 1759100, fast_hit_count: 16332 */
          if (s.last_box >= 0 && /* line 28 slow_hit_count: 1759050, fast_hit_count: 16305 */
              (R[s.pos] <= R[s.last_box] || C[s.pos] == C[s.last_box])) { /* line 29 slow_hit_count: 879500, fast_hit_count: 8139 */
            break; /* line 30 slow_hit_count: 771427, fast_hit_count: 7217 */
          } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
          s.candies_eaten += R[s.pos]; /* line 32 slow_hit_count: 108123, fast_hit_count: 949 */
          s.last_box = s.pos; /* line 33 slow_hit_count: 108123, fast_hit_count: 949 */
          if (s.candies_eaten >= K) { /* line 34 slow_hit_count: 108123, fast_hit_count: 949 */
            cout << steps << endl; /* line 35 slow_hit_count: 0, fast_hit_count: 1 */
            return 0; /* line 36 slow_hit_count: 0, fast_hit_count: 1 */
          } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
        for (int step = -1; step <= +1; ++step) { /* line 39 slow_hit_count: 3950692, fast_hit_count: 36456 */
          if (step == 0) continue; /* line 40 slow_hit_count: 2963019, fast_hit_count: 27342 */
          State t = s; /* line 41 slow_hit_count: 1975346, fast_hit_count: 18228 */
          t.pos += step; /* line 42 slow_hit_count: 1975346, fast_hit_count: 18228 */
          if (t.pos >= 0 && t.pos < N && /* line 43 slow_hit_count: 3915507, fast_hit_count: 36249 */
              !visited[t.pos][t.last_box + 1][t.candies_eaten]++) { /* line 44 slow_hit_count: 1940161, fast_hit_count: 18021 */
            next_queue.push_back(t); /* line 45 slow_hit_count: 879549, fast_hit_count: 9501 */
          } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    queue = next_queue; /* line 50 slow_hit_count: 1192, fast_hit_count: 23 */
    ++steps; /* line 51 slow_hit_count: 1192, fast_hit_count: 23 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  cout << -1 << endl; /* line 53 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 54 slow_hit_count: 1, fast_hit_count: 0 */


assistant: **Phase 1: Identifying Expensive or Inefficient Code Segments**

By comparing the line-level hit counts between the fast and slow runs, we can pinpoint where the inefficiencies arise:

1. The loop at line 23 (`while (!queue.empty())`) is a key contributor to the slowdown, with the slow input hitting this line 1193 times compared to just 24 times for the fast input. This indicates that the main loop is iterating many more times in the slow case, likely due to inefficient state transitions or an inability to quickly satisfy the candy-eating conditions.

2. The nested loops at lines 25 (`for (State s : queue)`) and 26 (`for (int eat = 0; eat < 2; ++eat)`) have significantly higher hit counts on the slow input (880742 and 1867223 hits, respectively). This suggests repeated processing of states and possible inefficiencies in handling the state transitions or conditions on candy-eating and movements.

3. The line 29 (`if (R[s.pos] <= R[s.last_box] || C[s.pos] == C[s.last_box])`) is hit frequently, indicating that the conditions for breaking out of candy-eating are often not met, leading to many state transitions without progress in consuming candies.

4. Line 39 (`for (int step = -1; step <= +1; ++step)`) and lines within this loop (40-45) also have very high hit counts, indicating that moving to adjacent boxes is repeatedly attempted, especially when the conditions to eat candies aren't satisfied quickly.

**Phase 2: Deriving Performance-Characterizing Invariants**

Based on this analysis, we can derive performance-characterizing invariants that describe the conditions under which the code is likely to take a slow path:

1. **High State Transition Invariant**: 
   "If Tania must transition through a large number of states before meeting the candy-eating conditions, such as when many sequences of box visits do not satisfy the constraints of increasing candy counts or alternating colors, the program may slow significantly."

2. **Complex Path Navigation Invariant**:
   "When Tania needs to frequently change directions or visit many boxes without eating, such as when there's a large cluster of boxes with similar candy counts or colors, the time to find a valid sequence increases."

3. **Inefficient Movement Invariant**:
   "If the initial set of boxes around Tania does not easily satisfy the conditions for eating candies, causing Tania to explore a wide area of boxes with frequent backtracking, the process may become inefficient."

These invariants capture potential triggers for slow performance based on the patterns observed in the slow input and are broad enough to predict future slow scenarios while respecting the problem constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n candy boxes in front of Tania. The boxes are arranged in a row from left to right, numbered from 1 to n. The i-th box contains r_i candies, candies have the color c_i (the color can take one of three values ​​— red, green, or blue). All candies inside a single box have the same color (and it is equal to c_i).

Initially, Tanya is next to the box number s. Tanya can move to the neighbor box (that is, with a number that differs by one) or eat candies in the current box. Tanya eats candies instantly, but the movement takes one second.

If Tanya eats candies from the box, then the box itself remains in place, but there is no more candies in it. In other words, Tanya always eats all the candies from the box and candies in the boxes are not refilled.

It is known that Tanya cannot eat candies of the same color one after another (that is, the colors of candies in two consecutive boxes from which she eats candies are always different). In addition, Tanya's appetite is constantly growing, so in each next box from which she eats candies, there should be strictly more candies than in the previous one.

Note that for the first box from which Tanya will eat candies, there are no restrictions on the color and number of candies.

Tanya wants to eat at least k candies. What is the minimum number of seconds she will need? Remember that she eats candies instantly, and time is spent only on movements.

Input

The first line contains three integers n, s and k (1 ≤ n ≤ 50, 1 ≤ s ≤ n, 1 ≤ k ≤ 2000) — number of the boxes, initial position of Tanya and lower bound on number of candies to eat. The following line contains n integers r_i (1 ≤ r_i ≤ 50) — numbers of candies in the boxes. The third line contains sequence of n letters 'R', 'G' and 'B', meaning the colors of candies in the correspondent boxes ('R' for red, 'G' for green, 'B' for blue). Recall that each box contains candies of only one color. The third line contains no spaces.

Output

Print minimal number of seconds to eat at least k candies. If solution doesn't exist, print "-1".

Examples

Input

5 3 10
1 2 3 4 5
RGBRR


Output

4


Input

2 1 15
5 6
RG


Output

-1

Note

The sequence of actions of Tanya for the first example:

  * move from the box 3 to the box 2; 
  * eat candies from the box 2; 
  * move from the box 2 to the box 3; 
  * eat candy from the box 3; 
  * move from the box 3 to the box 4; 
  * move from the box 4 to the box 5; 
  * eat candies from the box 5. 



Since Tanya eats candy instantly, the required time is four seconds.

Solution (C++ code):
{solution}


assistant: **Phase 3: Implementing the Natural Language Invariants in C++**

Based on the performance-characterizing invariants derived earlier, we need to implement runtime checks in C++ that will detect when these conditions are met.

1. **High State Transition Invariant**:
   This invariant checks if too many state transitions are occurring, which implies that Tanya is not quickly finding a sequence of boxes that meet the eating conditions.

   ```cpp
   void check_high_state_transition(int steps, int maxStepsThreshold) {
       if (steps > maxStepsThreshold) {
           cerr << "Warning: High state transition detected!" << endl;
           abort();
       }
   }
   ```

2. **Complex Path Navigation Invariant**:
   This invariant checks if Tanya is moving excessively without making progress in eating candies, indicating complex navigation.

   ```cpp
   void check_complex_path_navigation(int exploredStates, int maxStatesThreshold) {
       if (exploredStates > maxStatesThreshold) {
           cerr << "Warning: Complex path navigation detected!" << endl;
           abort();
       }
   }
   ```

3. **Inefficient Movement Invariant**:
   This invariant checks for inefficient movements resulting in a failure to meet candy eating conditions.

   ```cpp
   void check_inefficient_movement(int repeatedMoves, int maxRepeatedMovesThreshold) {
       if (repeatedMoves > maxRepeatedMovesThreshold) {
           cerr << "Warning: Inefficient movement detected!" << endl;
           abort();
       }
   }
   ```

**Phase 4: Integrating the Checker Code into the Original Program**

Now, we will integrate these checks into the provided C++ code at strategic points to ensure they don't add overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

bool visited[50][51][2000];
struct State {
  int pos;
  int last_box;
  int candies_eaten;
};

// Checker functions to implement the invariants
void check_high_state_transition(int steps, int maxStepsThreshold) {
    if (steps > maxStepsThreshold) {
        cerr << "Warning: High state transition detected!" << endl;
        abort();
    }
}

void check_complex_path_navigation(int exploredStates, int maxStatesThreshold) {
    if (exploredStates > maxStatesThreshold) {
        cerr << "Warning: Complex path navigation detected!" << endl;
        abort();
    }
}

void check_inefficient_movement(int repeatedMoves, int maxRepeatedMovesThreshold) {
    if (repeatedMoves > maxRepeatedMovesThreshold) {
        cerr << "Warning: Inefficient movement detected!" << endl;
        abort();
    }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int N = 0, S = 0, K = 0;
  cin >> N >> S >> K;
  --S;
  vector<int> R(N);
  for (int &i : R) cin >> i;
  string C;
  cin >> C;
  
  State initial = {S, -1, 0};
  vector<State> queue = {initial};
  visited[S][0][0] = true;
  int steps = 0;
  int totalStateTransitions = 0;  // Track total state transitions
  int totalExploredStates = 0;    // Track total explored states
  
  while (!queue.empty()) {
    vector<State> next_queue;
    for (State s : queue) {
      for (int eat = 0; eat < 2; ++eat) {
        if (eat) {
          if (s.last_box >= 0 &&
              (R[s.pos] <= R[s.last_box] || C[s.pos] == C[s.last_box])) {
            break;
          }
          s.candies_eaten += R[s.pos];
          s.last_box = s.pos;
          if (s.candies_eaten >= K) {
            cout << steps << endl;
            return 0;
          }
        }
        for (int step = -1; step <= +1; ++step) {
          if (step == 0) continue;
          State t = s;
          t.pos += step;
          if (t.pos >= 0 && t.pos < N &&
              !visited[t.pos][t.last_box + 1][t.candies_eaten]++) {
            next_queue.push_back(t);
            totalStateTransitions++;  // Increment for each state considered valid
          }
        }
      }
      totalExploredStates++;
    }
    
    queue = next_queue;
    ++steps;

    // Insert checker calls after each main loop iteration
    check_high_state_transition(steps, 500);  // Arbitrary threshold for steps
    check_complex_path_navigation(totalExploredStates, 10000);  // Arbitrary threshold for explored states
    check_inefficient_movement(totalStateTransitions, 20000);  // Arbitrary threshold for state transitions
  }

  cout << -1 << endl;
}
```

**Comments on Checker Placement:**

- **High State Transition**: Tracked by incrementing `steps` and checked after each main loop iteration to ensure it's not exceeding a reasonable threshold.
- **Complex Path Navigation**: Tracked by counting total explored states, checked after each main loop iteration.
- **Inefficient Movement**: Tracked by counting valid state transitions, checked after each main loop iteration.

These checks should help a fuzzer or developer quickly identify when the program is hitting performance bottlenecks due to inefficient state exploration or transitions. The thresholds are arbitrary and based on heuristic observations; they might need adjustment based on specific performance testing.

