system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n candy boxes in front of Tania. The boxes are arranged in a row from left to right, numbered from 1 to n. The i-th box contains r_i candies, candies have the color c_i (the color can take one of three values ​​— red, green, or blue). All candies inside a single box have the same color (and it is equal to c_i).

Initially, Tanya is next to the box number s. Tanya can move to the neighbor box (that is, with a number that differs by one) or eat candies in the current box. Tanya eats candies instantly, but the movement takes one second.

If Tanya eats candies from the box, then the box itself remains in place, but there is no more candies in it. In other words, Tanya always eats all the candies from the box and candies in the boxes are not refilled.

It is known that Tanya cannot eat candies of the same color one after another (that is, the colors of candies in two consecutive boxes from which she eats candies are always different). In addition, Tanya's appetite is constantly growing, so in each next box from which she eats candies, there should be strictly more candies than in the previous one.

Note that for the first box from which Tanya will eat candies, there are no restrictions on the color and number of candies.

Tanya wants to eat at least k candies. What is the minimum number of seconds she will need? Remember that she eats candies instantly, and time is spent only on movements.

Input

The first line contains three integers n, s and k (1 ≤ n ≤ 50, 1 ≤ s ≤ n, 1 ≤ k ≤ 2000) — number of the boxes, initial position of Tanya and lower bound on number of candies to eat. The following line contains n integers r_i (1 ≤ r_i ≤ 50) — numbers of candies in the boxes. The third line contains sequence of n letters 'R', 'G' and 'B', meaning the colors of candies in the correspondent boxes ('R' for red, 'G' for green, 'B' for blue). Recall that each box contains candies of only one color. The third line contains no spaces.

Output

Print minimal number of seconds to eat at least k candies. If solution doesn't exist, print "-1".

Examples

Input

5 3 10
1 2 3 4 5
RGBRR


Output

4


Input

2 1 15
5 6
RG


Output

-1

Note

The sequence of actions of Tanya for the first example:

  * move from the box 3 to the box 2; 
  * eat candies from the box 2; 
  * move from the box 2 to the box 3; 
  * eat candy from the box 3; 
  * move from the box 3 to the box 4; 
  * move from the box 4 to the box 5; 
  * eat candies from the box 5. 



Since Tanya eats candy instantly, the required time is four seconds.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long MAXK = 2569;
const long long MAXN = 69;
const long long INF = 1e9;
long long m, n, s, k;
long long a[MAXN];
long long color[MAXN];
long long dp[MAXN][MAXK];
long long tinh(long long id, long long z) {
  long long x = color[id];
  long long y = a[id];
  if (dp[id][z] != INF) {
    return dp[id][z];
  }
  for (long long j = 1; j <= n; j++) {
    if (a[j] < y && color[j] != x && z >= a[id])
      dp[id][z] = min(dp[id][z], tinh(j, z - a[id]) + abs(id - j));
  }
  if (dp[id][z] == INF) dp[id][z]--;
  return dp[id][z];
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cin >> n >> s >> k;
  for (long long i = 1; i <= n; i++) cin >> a[i];
  string x;
  cin >> x;
  for (long long i = 1; i <= n; i++) {
    if (x[i - 1] == 'R')
      color[i] = 0;
    else if (x[i - 1] == 'B')
      color[i] = 1;
    else
      color[i] = 2;
  }
  for (long long j = 0; j <= n; j++) {
    for (long long k = 0; k < MAXK; k++) {
      dp[j][k] = INF;
    }
  }
  for (long long i = 1; i <= n; i++) {
    dp[i][a[i]] = abs(i - s);
  }
  long long ans = INF;
  for (long long i = 1; i <= n; i++) {
    for (long long j = k; j < MAXK; j++) {
      if (a[i] <= j) ans = min(ans, tinh(i, j));
    }
  }
  if (ans <= INF - 1000)
    cout << ans;
  else
    cout << -1;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50 50 1250
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 50 48 46 44 42 40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4 2
RRRRRRRRRRRRRRRRRRRRRRRRRGGGGGGGGGGGGGGGGGGGGGGGGG


(G.2) Fast Input

50 39 2000
48 43 26 24 46 37 15 30 39 34 4 14 29 34 8 18 40 8 17 37 15 29 2 23 41 7 12 13 36 11 24 22 26 46 11 31 10 46 11 35 6 41 16 50 11 1 46 20 46 28
BGBBBBBBRGGBBBRRRRBBGRGGRBBRBBBRBBBBBRRGBGGRRRBBRB


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long MAXK = 2569; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long MAXN = 69; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1e9; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long m, n, s, k; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long a[MAXN]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long color[MAXN]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[MAXN][MAXK]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
long long tinh(long long id, long long z) { /* line 10 slow_hit_count: 1275257, fast_hit_count: 641306 */
  long long x = color[id]; /* line 11 slow_hit_count: 1275257, fast_hit_count: 641306 */
  long long y = a[id]; /* line 12 slow_hit_count: 1275257, fast_hit_count: 641306 */
  if (dp[id][z] != INF) { /* line 13 slow_hit_count: 1275257, fast_hit_count: 641306 */
    return dp[id][z]; /* line 14 slow_hit_count: 1167764, fast_hit_count: 595061 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long j = 1; j <= n; j++) { /* line 16 slow_hit_count: 5482143, fast_hit_count: 2358495 */
    if (a[j] < y && color[j] != x && z >= a[id]) /* line 17 slow_hit_count: 5374650, fast_hit_count: 2312250 */
      dp[id][z] = min(dp[id][z], tinh(j, z - a[id]) + abs(id - j)); /* line 18 slow_hit_count: 1209307, fast_hit_count: 612856 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[id][z] == INF) dp[id][z]--; /* line 20 slow_hit_count: 107493, fast_hit_count: 46245 */
  return dp[id][z]; /* line 21 slow_hit_count: 107493, fast_hit_count: 46245 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> s >> k; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= n; i++) cin >> a[i]; /* line 28 slow_hit_count: 51, fast_hit_count: 51 */
  string x; /* line 29 slow_hit_count: 2, fast_hit_count: 2 */
  cin >> x; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= n; i++) { /* line 31 slow_hit_count: 51, fast_hit_count: 51 */
    if (x[i - 1] == 'R') /* line 32 slow_hit_count: 50, fast_hit_count: 50 */
      color[i] = 0; /* line 33 slow_hit_count: 25, fast_hit_count: 15 */
    else if (x[i - 1] == 'B') /* line 34 slow_hit_count: 25, fast_hit_count: 35 */
      color[i] = 1; /* line 35 slow_hit_count: 0, fast_hit_count: 26 */
    else /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      color[i] = 2; /* line 37 slow_hit_count: 25, fast_hit_count: 9 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long j = 0; j <= n; j++) { /* line 39 slow_hit_count: 52, fast_hit_count: 52 */
    for (long long k = 0; k < MAXK; k++) { /* line 40 slow_hit_count: 131070, fast_hit_count: 131070 */
      dp[j][k] = INF; /* line 41 slow_hit_count: 131019, fast_hit_count: 131019 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 1; i <= n; i++) { /* line 44 slow_hit_count: 51, fast_hit_count: 51 */
    dp[i][a[i]] = abs(i - s); /* line 45 slow_hit_count: 50, fast_hit_count: 50 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = INF; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 1; i <= n; i++) { /* line 48 slow_hit_count: 51, fast_hit_count: 51 */
    for (long long j = k; j < MAXK; j++) { /* line 49 slow_hit_count: 66000, fast_hit_count: 28500 */
      if (a[i] <= j) ans = min(ans, tinh(i, j)); /* line 50 slow_hit_count: 65950, fast_hit_count: 28450 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  if (ans <= INF - 1000) /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
    cout << ans; /* line 54 slow_hit_count: 1, fast_hit_count: 0 */
  else /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    cout << -1; /* line 56 slow_hit_count: 0, fast_hit_count: 1 */
} /* line 57 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the given C program, we'll proceed through the two outlined phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Comparison of Line-Level Hit Counts
1. **Function `tinh` (Lines 10-21)**
   - **Line 10-12:** Initialization lines in `tinh` are hit more than a million times in both fast and slow inputs, indicating the function is being called frequently.
   - **Line 16:** The loop iterates over all boxes and is significantly more active for the slow input.
   - **Line 17-18:** The conditional check and recursive call inside the loop are hit many times, showing that this portion of code is where the computation is getting stuck.
   - **Line 20:** Shows a fallback when no valid path is found, but it's less frequently hit compared to the recursive calls.

2. **Main Function (Lines 23-57)**
   - **Lines 48-51:** Another nested loop that significantly contributes to the slow performance, especially due to the repeated calls to `tinh`.

#### Code Segment Analysis
- The recursive function `tinh` is a central contributor to the slow execution. It makes extensive recursive calls (Line 18), especially exacerbated by the nested loop in Line 16.
- The conditions in Lines 17-18 ensure that only boxes with fewer candies and different colors are considered, but these often lead to deep recursion due to the constraints of finding strictly increasing candy counts and alternating colors.
- The dynamic programming table `dp` is being used but is not effective in pruning the recursive calls due to the complexity of the constraints.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, several performance-characterizing invariants can be established:

1. **Recursive Depth and Breadth in Decision Tree:**
   - **Invariant:** "If Tanya must navigate through a long sequence of potential candy boxes to satisfy both increasing candy count and alternating color requirements, the recursive exploration may become excessively deep and wide."
   - **Implication:** The recursive function `tinh` may encounter high branching factors and depth due to the constraints, leading to exponential time complexity in some cases.

2. **Ineffective Use of Dynamic Programming Table:**
   - **Invariant:** "If the dynamic programming table does not effectively cache results due to varying required candies (`z`) and box indices, repeated computation may become a bottleneck."
   - **Implication:** The DP table `dp` can become inefficient if it's too fine-grained (due to large `MAXK`), resulting in limited cache hits.

3. **Input Structure Impact:**
   - **Invariant:** "When boxes are arranged in such a way that the conditions for eating (strictly increasing candy count and alternating colors) form a complex path or sequence, the program may engage in an exhaustive search."
   - **Implication:** Specific sequences or distributions of candies and colors can drastically increase the search space for valid paths Tanya can take, especially if these paths lead to many recursive explorations.

4. **Handling Limits of Constraints:**
   - **Invariant:** "If the sequence of boxes is such that the necessary conditions to eat candies are only met at large distances, the recursive calls combined with movement cost consideration can slow down the program."
   - **Implication:** High costs arise when the solution requires Tanya to move across many boxes frequently, thereby driving up the recursive exploration time.

These invariants abstractly capture the conditions under which the program's performance degrades, allowing for future inputs to be analyzed for potential slow behavior without relying solely on exact values from the slow input data.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n candy boxes in front of Tania. The boxes are arranged in a row from left to right, numbered from 1 to n. The i-th box contains r_i candies, candies have the color c_i (the color can take one of three values ​​— red, green, or blue). All candies inside a single box have the same color (and it is equal to c_i).

Initially, Tanya is next to the box number s. Tanya can move to the neighbor box (that is, with a number that differs by one) or eat candies in the current box. Tanya eats candies instantly, but the movement takes one second.

If Tanya eats candies from the box, then the box itself remains in place, but there is no more candies in it. In other words, Tanya always eats all the candies from the box and candies in the boxes are not refilled.

It is known that Tanya cannot eat candies of the same color one after another (that is, the colors of candies in two consecutive boxes from which she eats candies are always different). In addition, Tanya's appetite is constantly growing, so in each next box from which she eats candies, there should be strictly more candies than in the previous one.

Note that for the first box from which Tanya will eat candies, there are no restrictions on the color and number of candies.

Tanya wants to eat at least k candies. What is the minimum number of seconds she will need? Remember that she eats candies instantly, and time is spent only on movements.

Input

The first line contains three integers n, s and k (1 ≤ n ≤ 50, 1 ≤ s ≤ n, 1 ≤ k ≤ 2000) — number of the boxes, initial position of Tanya and lower bound on number of candies to eat. The following line contains n integers r_i (1 ≤ r_i ≤ 50) — numbers of candies in the boxes. The third line contains sequence of n letters 'R', 'G' and 'B', meaning the colors of candies in the correspondent boxes ('R' for red, 'G' for green, 'B' for blue). Recall that each box contains candies of only one color. The third line contains no spaces.

Output

Print minimal number of seconds to eat at least k candies. If solution doesn't exist, print "-1".

Examples

Input

5 3 10
1 2 3 4 5
RGBRR


Output

4


Input

2 1 15
5 6
RG


Output

-1

Note

The sequence of actions of Tanya for the first example:

  * move from the box 3 to the box 2; 
  * eat candies from the box 2; 
  * move from the box 2 to the box 3; 
  * eat candy from the box 3; 
  * move from the box 3 to the box 4; 
  * move from the box 4 to the box 5; 
  * eat candies from the box 5. 



Since Tanya eats candy instantly, the required time is four seconds.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ code snippets implementing the performance-characterizing invariants derived earlier:

1. **Recursive Depth and Breadth in Decision Tree:**

    This check will ensure that recursive depth and branching factor do not exceed a reasonable threshold that could lead to performance issues.

    ```cpp
    void check_recursion_invariant(int maxDepthEstimate, int branchFactorEstimate) {
        if ((maxDepthEstimate > 50) && (branchFactorEstimate > 10)) {
            cerr << "Warning: Recursion invariant triggered - high recursion depth or branching factor" << endl;
            abort();
        }
    }
    ```

2. **Ineffective Use of Dynamic Programming Table:**

    This check will ensure that the dynamic programming table is used efficiently, preventing redundant state exploration.

    ```cpp
    void check_dp_invariant(int dpSize, long long maxK) {
        if (dpSize > 50 && maxK > 2569) {
            cerr << "Warning: DP invariant triggered - outsize DP table size or range" << endl;
            abort();
        }
    }
    ```

3. **Input Structure Impact:**

    This check will identify scenarios where the input structure could lead to a high number of recursive calls due to complex candy and color arrangement.

    ```cpp
    void check_input_structure_invariant(int n, long long* a, long long k) {
        int strictIncreasingSegments = 0;
        for (int i = 1; i < n; ++i) {
            if (a[i] < a[i + 1]) {
                ++strictIncreasingSegments;
            }
        }
        if (strictIncreasingSegments > n / 2) {
            cerr << "Warning: Input structure invariant triggered - complex candy arrangement" << endl;
            abort();
        }
    }
    ```

### Phase 4: Integrate the Checker Code into the Original Program

Now, let's add these checks to the original C++ program in appropriate locations:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long MAXK = 2569;
const long long MAXN = 69;
const long long INF = 1e9;
long long m, n, s, k;
long long a[MAXN];
long long color[MAXN];
long long dp[MAXN][MAXK];

void check_recursion_invariant(int maxDepthEstimate, int branchFactorEstimate) {
    if ((maxDepthEstimate > 50) && (branchFactorEstimate > 10)) {
        cerr << "Warning: Recursion invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

void check_dp_invariant(int dpSize, long long maxK) {
    if (dpSize > 50 && maxK > 2569) {
        cerr << "Warning: DP invariant triggered - outsize DP table size or range" << endl;
        abort();
    }
}

void check_input_structure_invariant(int n, long long* a, long long k) {
    int strictIncreasingSegments = 0;
    for (int i = 1; i < n; ++i) {
        if (a[i] < a[i + 1]) {
            ++strictIncreasingSegments;
        }
    }
    if (strictIncreasingSegments > n / 2) {
        cerr << "Warning: Input structure invariant triggered - complex candy arrangement" << endl;
        abort();
    }
}

long long tinh(long long id, long long z) {
    long long x = color[id];
    long long y = a[id];
    if (dp[id][z] != INF) {
        return dp[id][z];
    }
    for (long long j = 1; j <= n; j++) {
        if (a[j] < y && color[j] != x && z >= a[id]) {
            dp[id][z] = min(dp[id][z], tinh(j, z - a[id]) + abs(id - j));
        }
    }
    if (dp[id][z] == INF) dp[id][z]--;
    return dp[id][z];
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> s >> k;
    for (long long i = 1; i <= n; i++) cin >> a[i];
    string x;
    cin >> x;

    // Insert input structure check
    check_input_structure_invariant(n, a, k);

    for (long long i = 1; i <= n; i++) {
        if (x[i - 1] == 'R')
            color[i] = 0;
        else if (x[i - 1] == 'B')
            color[i] = 1;
        else
            color[i] = 2;
    }
    for (long long j = 0; j <= n; j++) {
        for (long long k = 0; k < MAXK; k++) {
            dp[j][k] = INF;
        }
    }
    for (long long i = 1; i <= n; i++) {
        dp[i][a[i]] = abs(i - s);
    }
    long long ans = INF;
    for (long long i = 1; i <= n; i++) {
        for (long long j = k; j < MAXK; j++) {
            if (a[i] <= j) ans = min(ans, tinh(i, j));
        }
    }

    // Check the DP invariant at the end of processing
    check_dp_invariant(n, MAXK);

    if (ans <= INF - 1000)
        cout << ans;
    else
        cout << -1;
}
```

In this integration:

- The `check_input_structure_invariant` function is called after input is read, to check for a complex candy arrangement.
- The `check_dp_invariant` function is executed post processing to ensure the DP table is not causing inefficiencies.
- The recursive invariant check could be embedded in the recursive function, but it's omitted here to prevent excessive overhead in tight loops. Instead, ensure recursive calls should maintain a balanced execution plan.

