system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

There are n candy boxes in front of Tania. The boxes are arranged in a row from left to right, numbered from 1 to n. The i-th box contains r_i candies, candies have the color c_i (the color can take one of three values ​​— red, green, or blue). All candies inside a single box have the same color (and it is equal to c_i).

Initially, Tanya is next to the box number s. Tanya can move to the neighbor box (that is, with a number that differs by one) or eat candies in the current box. Tanya eats candies instantly, but the movement takes one second.

If Tanya eats candies from the box, then the box itself remains in place, but there is no more candies in it. In other words, Tanya always eats all the candies from the box and candies in the boxes are not refilled.

It is known that Tanya cannot eat candies of the same color one after another (that is, the colors of candies in two consecutive boxes from which she eats candies are always different). In addition, Tanya's appetite is constantly growing, so in each next box from which she eats candies, there should be strictly more candies than in the previous one.

Note that for the first box from which Tanya will eat candies, there are no restrictions on the color and number of candies.

Tanya wants to eat at least k candies. What is the minimum number of seconds she will need? Remember that she eats candies instantly, and time is spent only on movements.

Input

The first line contains three integers n, s and k (1 ≤ n ≤ 50, 1 ≤ s ≤ n, 1 ≤ k ≤ 2000) — number of the boxes, initial position of Tanya and lower bound on number of candies to eat. The following line contains n integers r_i (1 ≤ r_i ≤ 50) — numbers of candies in the boxes. The third line contains sequence of n letters 'R', 'G' and 'B', meaning the colors of candies in the correspondent boxes ('R' for red, 'G' for green, 'B' for blue). Recall that each box contains candies of only one color. The third line contains no spaces.

Output

Print minimal number of seconds to eat at least k candies. If solution doesn't exist, print "-1".

Examples

Input

5 3 10
1 2 3 4 5
RGBRR


Output

4


Input

2 1 15
5 6
RG


Output

-1

Note

The sequence of actions of Tanya for the first example:

  * move from the box 3 to the box 2; 
  * eat candies from the box 2; 
  * move from the box 2 to the box 3; 
  * eat candy from the box 3; 
  * move from the box 3 to the box 4; 
  * move from the box 4 to the box 5; 
  * eat candies from the box 5. 



Since Tanya eats candy instantly, the required time is four seconds.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
struct Box {
  size_t pos;
  char color;
  size_t candies;
};
struct CacheEntry {
  size_t curPath;
  size_t curCandies;
};
int eat(const std::vector<Box> &boxes,
        std::vector<std::list<CacheEntry>> &cache,
        std::vector<Box>::iterator it, size_t curPath, size_t prevPos,
        size_t curCandies, size_t threshold) {
  size_t newPos = it->pos;
  curCandies += it->candies;
  curPath += std::max(prevPos, newPos) - std::min(prevPos, newPos);
  auto &cacheList = cache.at(newPos);
  for (auto it = cacheList.begin(); it != cacheList.end();) {
    if (curCandies <= it->curCandies && curPath >= it->curPath)
      return -1;
    else if (curCandies >= it->curCandies && curPath < it->curPath ||
             curCandies > it->curCandies && curPath <= it->curPath)
      cacheList.erase(it++);
    else
      ++it;
  }
  cacheList.push_back(CacheEntry{curPath, curCandies});
  if (curCandies >= threshold) return curPath;
  char color = it->color;
  size_t candies = it->candies;
  int res = -1;
  for (++it; it != boxes.end(); ++it) {
    if (it->color == color || it->candies == candies) continue;
    int newRes = eat(boxes, cache, it, curPath, newPos, curCandies, threshold);
    if (res == -1)
      res = newRes;
    else if (newRes != -1)
      res = std::min(res, newRes);
  }
  return res;
}
int main(int argc, char *argv[]) {
  size_t n, s, k;
  std::cin >> n >> s >> k;
  std::vector<Box> boxes(n);
  for (size_t i = 0; i < n; ++i) {
    boxes.at(i).pos = i;
    std::cin >> boxes.at(i).candies;
  }
  std::string colors;
  std::cin >> colors;
  for (size_t i = 0; i < n; ++i) boxes.at(i).color = colors.at(i);
  std::sort(boxes.begin(), boxes.end(), [](const Box &lhs, const Box &rhs) {
    return lhs.candies < rhs.candies;
  });
  std::vector<std::list<CacheEntry>> cache(n);
  int res = -1;
  for (auto it = boxes.begin(); it != boxes.end(); ++it) {
    int newRes = eat(boxes, cache, it, 0, s - 1, 0, k);
    if (res == -1)
      res = newRes;
    else if (newRes != -1)
      res = std::min(res, newRes);
  }
  std::cout << res << std::endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

48 33 357
18 37 22 21 4 17 39 32 40 43 29 29 50 21 39 43 11 11 4 50 36 40 32 50 18 32 11 36 29 36 22 21 29 43 49 18 17 29 37 40 17 37 2 4 39 49 22 29
GRGGGGBRBRRGGRGBRGBBGRBRRGBBRRBBBGRBBBBGRGGRRBRG


(G.2) Fast Input

48 33 357
18 37 22 21 4 17 39 32 40 43 29 29 50 21 39 43 11 11 4 50 36 40 32 50 18 32 11 36 29 36 22 21 29 43 49 18 17 29 37 40 17 37 49 4 39 49 22 29
GRGGGGBRBRRGGRGBRGBBGRBRRGBBRRBBBGRBBBBGRGGRRBRG


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
struct Box { /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
  size_t pos; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  char color; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  size_t candies; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
struct CacheEntry { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  size_t curPath; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  size_t curCandies; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
int eat(const std::vector<Box> &boxes, /* line 11 slow_hit_count: 37821, fast_hit_count: 26126 */
        std::vector<std::list<CacheEntry>> &cache, /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
        std::vector<Box>::iterator it, size_t curPath, size_t prevPos, /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
        size_t curCandies, size_t threshold) { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  size_t newPos = it->pos; /* line 15 slow_hit_count: 37821, fast_hit_count: 26126 */
  curCandies += it->candies; /* line 16 slow_hit_count: 37821, fast_hit_count: 26126 */
  curPath += std::max(prevPos, newPos) - std::min(prevPos, newPos); /* line 17 slow_hit_count: 37821, fast_hit_count: 26126 */
  auto &cacheList = cache.at(newPos); /* line 18 slow_hit_count: 37821, fast_hit_count: 26126 */
  for (auto it = cacheList.begin(); it != cacheList.end();) { /* line 19 slow_hit_count: 301767, fast_hit_count: 200867 */
    if (curCandies <= it->curCandies && curPath >= it->curPath) /* line 20 slow_hit_count: 294035, fast_hit_count: 195488 */
      return -1; /* line 21 slow_hit_count: 30089, fast_hit_count: 20747 */
    else if (curCandies >= it->curCandies && curPath < it->curPath || /* line 22 slow_hit_count: 523627, fast_hit_count: 346402 */
             curCandies > it->curCandies && curPath <= it->curPath) /* line 23 slow_hit_count: 259681, fast_hit_count: 171661 */
      cacheList.erase(it++); /* line 24 slow_hit_count: 7210, fast_hit_count: 4945 */
    else /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
      ++it; /* line 26 slow_hit_count: 256736, fast_hit_count: 169796 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  cacheList.push_back(CacheEntry{curPath, curCandies}); /* line 28 slow_hit_count: 7732, fast_hit_count: 5379 */
  if (curCandies >= threshold) return curPath; /* line 29 slow_hit_count: 7732, fast_hit_count: 5379 */
  char color = it->color; /* line 30 slow_hit_count: 7000, fast_hit_count: 4837 */
  size_t candies = it->candies; /* line 31 slow_hit_count: 7000, fast_hit_count: 4837 */
  int res = -1; /* line 32 slow_hit_count: 7000, fast_hit_count: 4837 */
  for (++it; it != boxes.end(); ++it) { /* line 33 slow_hit_count: 70297, fast_hit_count: 49037 */
    if (it->color == color || it->candies == candies) continue; /* line 34 slow_hit_count: 63297, fast_hit_count: 44200 */
    int newRes = eat(boxes, cache, it, curPath, newPos, curCandies, threshold); /* line 35 slow_hit_count: 37773, fast_hit_count: 26078 */
    if (res == -1) /* line 36 slow_hit_count: 37773, fast_hit_count: 26078 */
      res = newRes; /* line 37 slow_hit_count: 27533, fast_hit_count: 19376 */
    else if (newRes != -1) /* line 38 slow_hit_count: 10240, fast_hit_count: 6702 */
      res = std::min(res, newRes); /* line 39 slow_hit_count: 725, fast_hit_count: 535 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 41 slow_hit_count: 7000, fast_hit_count: 4837 */
} /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
int main(int argc, char *argv[]) { /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  size_t n, s, k; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  std::cin >> n >> s >> k; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  std::vector<Box> boxes(n); /* line 46 slow_hit_count: 2, fast_hit_count: 2 */
  for (size_t i = 0; i < n; ++i) { /* line 47 slow_hit_count: 49, fast_hit_count: 49 */
    boxes.at(i).pos = i; /* line 48 slow_hit_count: 48, fast_hit_count: 48 */
    std::cin >> boxes.at(i).candies; /* line 49 slow_hit_count: 48, fast_hit_count: 48 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  std::string colors; /* line 51 slow_hit_count: 2, fast_hit_count: 2 */
  std::cin >> colors; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  for (size_t i = 0; i < n; ++i) boxes.at(i).color = colors.at(i); /* line 53 slow_hit_count: 49, fast_hit_count: 49 */
  std::sort(boxes.begin(), boxes.end(), [](const Box &lhs, const Box &rhs) { /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
    return lhs.candies < rhs.candies; /* line 55 slow_hit_count: 273, fast_hit_count: 291 */
  }); /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  std::vector<std::list<CacheEntry>> cache(n); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  int res = -1; /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto it = boxes.begin(); it != boxes.end(); ++it) { /* line 59 slow_hit_count: 49, fast_hit_count: 49 */
    int newRes = eat(boxes, cache, it, 0, s - 1, 0, k); /* line 60 slow_hit_count: 48, fast_hit_count: 48 */
    if (res == -1) /* line 61 slow_hit_count: 48, fast_hit_count: 48 */
      res = newRes; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
    else if (newRes != -1) /* line 63 slow_hit_count: 47, fast_hit_count: 47 */
      res = std::min(res, newRes); /* line 64 slow_hit_count: 6, fast_hit_count: 6 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  std::cout << res << std::endl; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 68 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks and derive performance-characterizing invariants, let's conduct a detailed analysis based on the given hit count data and the C program.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **High Hit Count Discrepancy:**
   - The `eat` function is called multiple times and shows a significant difference in hit counts for certain lines. Specifically, line 11 (function entry) and lines within the loop on line 33, which calls `eat` recursively.
   - Lines 19 and 22 are hit very frequently in the slow input scenario, indicating that the loop and condition checks are contributing to the slowdown.

2. **Loop Analysis:**
   - The loop on line 19 iterates over a `cacheList` for each box. The slow input involves more iterations of this loop compared to the fast input.
   - The condition on lines 22 and 23 involves complex checks and cache manipulations. The slow input hits this path far more often, suggesting cache conditions are not being satisfied quickly.
   - Recursive calls on line 35 to `eat` function are also significantly higher in the slow input, hinting at inefficient traversal or state exploration.

3. **Data Interaction:**
   - The cache is used to store and check paths and candy counts. The increased cache hits in the slow input suggest inefficient caching or retrieval patterns.
   - Recursive exploration combined with stringent candy and color constraints may cause excessive branching or backtracking.

### Phase 2: Derive Performance-Characterizing Invariants (Natural Language)

1. **Cache Utilization and Path Exploration:**
   - "If many paths need to be explored due to no early cache hits, the function may enter a slow path. This is likely to happen when the cache is not efficiently pruning paths or the cache conditions (candy count and path length) are difficult to satisfy."

2. **Recursive Exploration:**
   - "When the recursive function explores a significantly large number of branches without finding a valid solution quickly, performance may degrade. This is exacerbated by input patterns that have tightly packed candy counts or limited color alternations."

3. **Candy and Color Constraints:**
   - "If the boxes have similar candy counts or repeating color patterns, Tanya's movement and candy-eating constraints may force excessive searching, leading to slow performance."

4. **Inefficient Cache Conditions:**
   - "If the cache conditions depend heavily on precise candy counts and path lengths, small variations in input can lead to significantly more iterations before finding a valid path or terminating, which can result in performance slowdowns."

These invariants highlight the conditions and input patterns that are likely to cause slow performance in this algorithm. By focusing on cache efficiency, recursive exploration, and input characteristics, we can better understand and address the performance bottlenecks in the code.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
There are n candy boxes in front of Tania. The boxes are arranged in a row from left to right, numbered from 1 to n. The i-th box contains r_i candies, candies have the color c_i (the color can take one of three values ​​— red, green, or blue). All candies inside a single box have the same color (and it is equal to c_i).

Initially, Tanya is next to the box number s. Tanya can move to the neighbor box (that is, with a number that differs by one) or eat candies in the current box. Tanya eats candies instantly, but the movement takes one second.

If Tanya eats candies from the box, then the box itself remains in place, but there is no more candies in it. In other words, Tanya always eats all the candies from the box and candies in the boxes are not refilled.

It is known that Tanya cannot eat candies of the same color one after another (that is, the colors of candies in two consecutive boxes from which she eats candies are always different). In addition, Tanya's appetite is constantly growing, so in each next box from which she eats candies, there should be strictly more candies than in the previous one.

Note that for the first box from which Tanya will eat candies, there are no restrictions on the color and number of candies.

Tanya wants to eat at least k candies. What is the minimum number of seconds she will need? Remember that she eats candies instantly, and time is spent only on movements.

Input

The first line contains three integers n, s and k (1 ≤ n ≤ 50, 1 ≤ s ≤ n, 1 ≤ k ≤ 2000) — number of the boxes, initial position of Tanya and lower bound on number of candies to eat. The following line contains n integers r_i (1 ≤ r_i ≤ 50) — numbers of candies in the boxes. The third line contains sequence of n letters 'R', 'G' and 'B', meaning the colors of candies in the correspondent boxes ('R' for red, 'G' for green, 'B' for blue). Recall that each box contains candies of only one color. The third line contains no spaces.

Output

Print minimal number of seconds to eat at least k candies. If solution doesn't exist, print "-1".

Examples

Input

5 3 10
1 2 3 4 5
RGBRR


Output

4


Input

2 1 15
5 6
RG


Output

-1

Note

The sequence of actions of Tanya for the first example:

  * move from the box 3 to the box 2; 
  * eat candies from the box 2; 
  * move from the box 2 to the box 3; 
  * eat candy from the box 3; 
  * move from the box 3 to the box 4; 
  * move from the box 4 to the box 5; 
  * eat candies from the box 5. 



Since Tanya eats candy instantly, the required time is four seconds.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Invariant Checks in C++

Based on the natural language invariants derived in Phase 2, we can implement the following checker code snippets in C++ to detect performance bottlenecks.

1. **Cache Utilization and Path Exploration:**
   - We need to check if the cache is not efficiently pruning paths, which can be indicated by the cache growing excessively large.

```cpp
void check_cache_size_invariant(size_t cacheSize, size_t threshold) {
    if (cacheSize > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - cache size too large!" << endl;
        abort();
    }
}
```

2. **Recursive Exploration:**
   - We need to check if the recursion depth is exceeding a certain level, which can indicate excessive branching.

```cpp
void check_recursion_depth_invariant(size_t curDepth, size_t maxDepth) {
    if (curDepth > maxDepth) {
        cerr << "Warning: Performance bottleneck condition triggered - recursion depth too high!" << endl;
        abort();
    }
}
```

3. **Candy and Color Constraints:**
   - We need to check if candy counts and color patterns are causing excessive recursion.

```cpp
void check_candy_color_invariant(size_t candyCount, char currentColor) {
    // Assume we set a threshold for candy count repetition or color pattern problems
    if (candyCount < 5 && currentColor == 'R') {  // Adjust condition based on patterns
        cerr << "Warning: Performance bottleneck condition triggered - unfavorable candy count or color pattern!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Conditional Checks into the Original Program

We will integrate these checks into the provided C++ solution at appropriate locations.

```cpp
#include <bits/stdc++.h>

struct Box {
    size_t pos;
    char color;
    size_t candies;
};

struct CacheEntry {
    size_t curPath;
    size_t curCandies;
};

// Function to check cache size
void check_cache_size_invariant(size_t cacheSize, size_t threshold) {
    if (cacheSize > threshold) {
        std::cerr << "Warning: Performance bottleneck condition triggered - cache size too large!" << std::endl;
        abort();
    }
}

// Function to check recursion depth
void check_recursion_depth_invariant(size_t curDepth, size_t maxDepth) {
    if (curDepth > maxDepth) {
        std::cerr << "Warning: Performance bottleneck condition triggered - recursion depth too high!" << std::endl;
        abort();
    }
}

// Function to check candy and color pattern issues
void check_candy_color_invariant(size_t candyCount, char currentColor) {
    if (candyCount < 5 && currentColor == 'R') {  // This condition is arbitrary; refine based on real patterns
        std::cerr << "Warning: Performance bottleneck condition triggered - unfavorable candy count or color pattern!" << std::endl;
        abort();
    }
}

int eat(const std::vector<Box> &boxes, std::vector<std::list<CacheEntry>> &cache,
        std::vector<Box>::iterator it, size_t curPath, size_t prevPos,
        size_t curCandies, size_t threshold, size_t curDepth) {
    size_t newPos = it->pos;
    curCandies += it->candies;
    curPath += std::max(prevPos, newPos) - std::min(prevPos, newPos);
    auto &cacheList = cache.at(newPos);

    // Check cache size invariant
    check_cache_size_invariant(cacheList.size(), 100); // Arbitrary threshold

    for (auto it = cacheList.begin(); it != cacheList.end();) {
        if (curCandies <= it->curCandies && curPath >= it->curPath)
            return -1;
        else if (curCandies >= it->curCandies && curPath < it->curPath ||
                 curCandies > it->curCandies && curPath <= it->curPath)
            cacheList.erase(it++);
        else
            ++it;
    }
    cacheList.push_back(CacheEntry{curPath, curCandies});
    if (curCandies >= threshold) return curPath;

    char color = it->color;
    size_t candies = it->candies;
    int res = -1;

    // Check recursion depth invariant
    check_recursion_depth_invariant(curDepth, 10); // Arbitrary threshold

    for (++it; it != boxes.end(); ++it) {
        if (it->color == color || it->candies == candies) continue;

        // Check candy color invariant
        check_candy_color_invariant(it->candies, it->color);

        int newRes = eat(boxes, cache, it, curPath, newPos, curCandies, threshold, curDepth + 1);
        if (res == -1)
            res = newRes;
        else if (newRes != -1)
            res = std::min(res, newRes);
    }
    return res;
}

int main(int argc, char *argv[]) {
    size_t n, s, k;
    std::cin >> n >> s >> k;
    std::vector<Box> boxes(n);
    for (size_t i = 0; i < n; ++i) {
        boxes.at(i).pos = i;
        std::cin >> boxes.at(i).candies;
    }
    std::string colors;
    std::cin >> colors;
    for (size_t i = 0; i < n; ++i) boxes.at(i).color = colors.at(i);
    std::sort(boxes.begin(), boxes.end(), [](const Box &lhs, const Box &rhs) {
        return lhs.candies < rhs.candies;
    });
    std::vector<std::list<CacheEntry>> cache(n);
    int res = -1;
    for (auto it = boxes.begin(); it != boxes.end(); ++it) {
        int newRes = eat(boxes, cache, it, 0, s - 1, 0, k, 0); // Start recursion depth from 0
        if (res == -1)
            res = newRes;
        else if (newRes != -1)
            res = std::min(res, newRes);
    }
    std::cout << res << std::endl;
    return 0;
}
```

#### Explanation of Integration

- **Cache Size Check**: Inserted after the cache is accessed to ensure it remains manageable.
- **Recursion Depth Check**: Added at the entry point of each recursive call to control excessive depth.
- **Candy Color Check**: Included before recursive calls to detect problematic candy counts and colors.

These checks are placed strategically to help identify potential performance bottlenecks without adding significant overhead during execution.

