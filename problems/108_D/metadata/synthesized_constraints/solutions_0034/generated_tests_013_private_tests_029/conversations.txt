system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

As a German University in Cairo (GUC) student and a basketball player, Herr Wafa was delighted once he heard the news. GUC is finally participating in the Annual Basketball Competition (ABC). 

A team is to be formed of n players, all of which are GUC students. However, the team might have players belonging to different departments. There are m departments in GUC, numbered from 1 to m. Herr Wafa's department has number h. For each department i, Herr Wafa knows number si — how many students who play basketball belong to this department.

Herr Wafa was also able to guarantee a spot on the team, using his special powers. But since he hates floating-point numbers, he needs your help at finding the probability that he will have at least one teammate belonging to his department. 

Note that every possible team containing Herr Wafa is equally probable. Consider all the students different from each other.

Input

The first line contains three integers n, m and h (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000, 1 ≤ h ≤ m) — the number of players on the team, the number of departments in GUC and Herr Wafa's department, correspondingly. 

The second line contains a single-space-separated list of m integers si (1 ≤ si ≤ 100), denoting the number of students in the i-th department. Note that sh includes Herr Wafa.

Output

Print the probability that Herr Wafa will have at least one teammate from his department. If there is not enough basketball players in GUC to participate in ABC, print -1. The answer will be accepted if it has absolute or relative error not exceeding 10 - 6.

Examples

Input

3 2 1
2 1


Output

1


Input

3 2 1
1 1


Output

-1


Input

3 2 1
2 2


Output

0.666667

Note

In the first example all 3 players (2 from department 1 and 1 from department 2) must be chosen for the team. Both players from Wafa's departments will be chosen, so he's guaranteed to have a teammate from his department.

In the second example, there are not enough players.

In the third example, there are three possibilities to compose the team containing Herr Wafa. In two of them the other player from Herr Wafa's department is part of the team.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int INF = INT_MAX;
const bool debug = true;
const long long INFL = LLONG_MAX;
int A, B, N, M, H, S[1010];
long double memo[100100][102];
bool was[100100][102];
long double dp(int b, int n) {
  int a = A;
  if (a + b < n) return 0;
  if (b < n) return 0;
  if (n == 0) return 1;
  if (a < 0 || b < 0 || n < 0) return 0;
  if (was[b][n]) return memo[b][n];
  long double x = (long double)n / (a + b);
  memo[b][n] = x * dp(b - 1, n - 1) + (1 - x) * dp(b - 1, n);
  was[b][n] = 1;
  return memo[b][n];
}
int main() {
  ios_base::sync_with_stdio(0);
  cout.precision(15);
  cout << fixed;
  cin >> N >> M >> H;
  for (int(i) = 1; (i) <= (M); (i)++) cin >> S[i];
  S[H]--;
  for (int(i) = 1; (i) <= (M); (i)++)
    if (i == H)
      A = S[i];
    else
      B += S[i];
  N--;
  if (A + B < N) {
    cout << -1 << '\n';
  } else {
    cout << (1 - dp(B, N)) << '\n';
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

33 90 4
5 10 2 3 9 6 9 3 3 8 6 4 8 4 9 3 5 9 5 6 4 1 10 6 4 5 4 5 9 5 7 1 3 9 6 6 5 6 2 4 8 7 8 5 4 5 10 9 3 1 1 8 6 9 5 1 5 9 4 6 6 4 9 6 5 7 3 7 9 1 5 6 4 1 1 4 2 4 4 2 6 4 5 5 4 9 1 10 2 2


(G.2) Fast Input

7 10 6
9 10 2 3 3 6 9 9 3 7


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = INT_MAX; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const bool debug = true; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long INFL = LLONG_MAX; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int A, B, N, M, H, S[1010]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long double memo[100100][102]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
bool was[100100][102]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long double dp(int b, int n) { /* line 9 slow_hit_count: 27969, fast_hit_count: 601 */
  int a = A; /* line 10 slow_hit_count: 27969, fast_hit_count: 601 */
  if (a + b < n) return 0; /* line 11 slow_hit_count: 27969, fast_hit_count: 601 */
  if (b < n) return 0; /* line 12 slow_hit_count: 27969, fast_hit_count: 601 */
  if (n == 0) return 1; /* line 13 slow_hit_count: 27937, fast_hit_count: 595 */
  if (a < 0 || b < 0 || n < 0) return 0; /* line 14 slow_hit_count: 27500, fast_hit_count: 545 */
  if (was[b][n]) return memo[b][n]; /* line 15 slow_hit_count: 27500, fast_hit_count: 545 */
  long double x = (long double)n / (a + b); /* line 16 slow_hit_count: 13984, fast_hit_count: 300 */
  memo[b][n] = x * dp(b - 1, n - 1) + (1 - x) * dp(b - 1, n); /* line 17 slow_hit_count: 13984, fast_hit_count: 300 */
  was[b][n] = 1; /* line 18 slow_hit_count: 13984, fast_hit_count: 300 */
  return memo[b][n]; /* line 19 slow_hit_count: 13984, fast_hit_count: 300 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  cout.precision(15); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  cout << fixed; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> N >> M >> H; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  for (int(i) = 1; (i) <= (M); (i)++) cin >> S[i]; /* line 26 slow_hit_count: 91, fast_hit_count: 11 */
  S[H]--; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (int(i) = 1; (i) <= (M); (i)++) /* line 28 slow_hit_count: 91, fast_hit_count: 11 */
    if (i == H) /* line 29 slow_hit_count: 90, fast_hit_count: 10 */
      A = S[i]; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
    else /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      B += S[i]; /* line 32 slow_hit_count: 89, fast_hit_count: 9 */
  N--; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  if (A + B < N) { /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
    cout << -1 << '\n'; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    cout << (1 - dp(B, N)) << '\n'; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 39 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the provided C code and generate performance-characterizing invariants, we will follow a structured approach. First, let's go through the phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information, we can identify the following observations:

1. **Recursive Function `dp`**:
   - The recursive function `dp` is called significantly more times in the slow input scenario (27,969 times) compared to the fast input scenario (601 times).
   - Lines inside the `dp` function, especially the recursive calls on line 17, are hit frequently in the slow input. This indicates that recursion is a significant factor in the slowdown.

2. **Memoization Checks**:
   - The line checking if a result is memoized (line 15) and setting memoization (line 18) are also hit a large number of times, indicating the function is repeatedly attempting to resolve recursive calls potentially without finding pre-computed results.

3. **Loop and Input Processing**:
   - The loops over departments (lines 26-32) have higher hit counts, but these are in line with the input size (M), and not necessarily indicative of inefficiency beyond the scale of the input.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified expensive operations and the problem constraints, here are the performance-characterizing invariants:

1. **Invariant About Recursive Calls**:
   - **Natural Language Description**: "If the number of players (N) approaches the total number of students across all departments, and the number of departments (M) is large, the recursive function will experience deep and frequent calls, leading to potential slowdowns due to extensive recursion and memoization overhead."
   - **Rationale**: The recursive `dp` function is highly dependent on the values of N and the distribution of students across departments. When N is large compared to available students, recursion depth increases.

2. **Invariant Regarding Available Students**:
   - **Natural Language Description**: "If the total number of students (sum of `si`) is only slightly larger than the number of players required (N), the function experiences increased recursion as it tries to compute combinations that may barely satisfy the team composition, leading to inefficiency."
   - **Rationale**: When students are just enough to form a team, the recursive computation has to account for many edge cases where team formation is possible but constrained, increasing function calls.

3. **Invariant Concerning Memoization Effectiveness**:
   - **Natural Language Description**: "If the ratio of available players from other departments (B) to required teammates (N) is low, the memoization array may not effectively store and reuse previously computed results, leading to repeated calculations."
   - **Rationale**: The memoization is intended to optimize by storing results of subproblems, but if the state space is large or rarely revisited, memoization becomes less effective.

These invariants provide a guideline to understand under which scenarios the performance issues may arise. They focus on the interplay between recursion, memoization, and input properties, providing insights without relying on exact values from specific inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
As a German University in Cairo (GUC) student and a basketball player, Herr Wafa was delighted once he heard the news. GUC is finally participating in the Annual Basketball Competition (ABC). 

A team is to be formed of n players, all of which are GUC students. However, the team might have players belonging to different departments. There are m departments in GUC, numbered from 1 to m. Herr Wafa's department has number h. For each department i, Herr Wafa knows number si — how many students who play basketball belong to this department.

Herr Wafa was also able to guarantee a spot on the team, using his special powers. But since he hates floating-point numbers, he needs your help at finding the probability that he will have at least one teammate belonging to his department. 

Note that every possible team containing Herr Wafa is equally probable. Consider all the students different from each other.

Input

The first line contains three integers n, m and h (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000, 1 ≤ h ≤ m) — the number of players on the team, the number of departments in GUC and Herr Wafa's department, correspondingly. 

The second line contains a single-space-separated list of m integers si (1 ≤ si ≤ 100), denoting the number of students in the i-th department. Note that sh includes Herr Wafa.

Output

Print the probability that Herr Wafa will have at least one teammate from his department. If there is not enough basketball players in GUC to participate in ABC, print -1. The answer will be accepted if it has absolute or relative error not exceeding 10 - 6.

Examples

Input

3 2 1
2 1


Output

1


Input

3 2 1
1 1


Output

-1


Input

3 2 1
2 2


Output

0.666667

Note

In the first example all 3 players (2 from department 1 and 1 from department 2) must be chosen for the team. Both players from Wafa's departments will be chosen, so he's guaranteed to have a teammate from his department.

In the second example, there are not enough players.

In the third example, there are three possibilities to compose the team containing Herr Wafa. In two of them the other player from Herr Wafa's department is part of the team.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's translate the performance-characterizing invariants into C++ code:

1. **Invariant About Recursive Calls**:
   - This invariant checks if the number of players (N) approaches the total number of students, leading to deep recursive calls.
   
```cpp
void check_recursion_depth_invariant(int totalPlayers, int totalStudents, int departments) {
    if (totalPlayers > totalStudents * 0.9 && departments > 50) {
        cerr << "Warning: Performance bottleneck condition triggered due to high recursion depth!" << endl;
        abort();
    }
}
```

2. **Invariant Regarding Available Students**:
   - This invariant checks if students barely exceed the number of required players, leading to increased recursion.

```cpp
void check_availability_invariant(int totalStudents, int requiredPlayers) {
    if (totalStudents < requiredPlayers + 5) {
        cerr << "Warning: Performance bottleneck condition triggered due to limited student availability!" << endl;
        abort();
    }
}
```

3. **Invariant Concerning Memoization Effectiveness**:
   - This invariant checks if the ratio of players from other departments is low, affecting memoization efficiency.

```cpp
void check_memoization_efficiency_invariant(int availablePlayers, int requiredPlayers) {
    if (availablePlayers < requiredPlayers * 0.3) {
        cerr << "Warning: Performance bottleneck condition triggered due to inefficient memoization!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checker code snippets into the given C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int INF = INT_MAX;
const bool debug = true;
const long long INFL = LLONG_MAX;
int A, B, N, M, H, S[1010];
long double memo[100100][102];
bool was[100100][102];

long double dp(int b, int n) {
    int a = A;
    if (a + b < n) return 0;
    if (b < n) return 0;
    if (n == 0) return 1;
    if (a < 0 || b < 0 || n < 0) return 0;
    if (was[b][n]) return memo[b][n];
    long double x = (long double)n / (a + b);
    memo[b][n] = x * dp(b - 1, n - 1) + (1 - x) * dp(b - 1, n);
    was[b][n] = 1;
    return memo[b][n];
}

// Insert checker functions
void check_recursion_depth_invariant(int totalPlayers, int totalStudents, int departments) {
    if (totalPlayers > totalStudents * 0.9 && departments > 50) {
        cerr << "Warning: Performance bottleneck condition triggered due to high recursion depth!" << endl;
        abort();
    }
}

void check_availability_invariant(int totalStudents, int requiredPlayers) {
    if (totalStudents < requiredPlayers + 5) {
        cerr << "Warning: Performance bottleneck condition triggered due to limited student availability!" << endl;
        abort();
    }
}

void check_memoization_efficiency_invariant(int availablePlayers, int requiredPlayers) {
    if (availablePlayers < requiredPlayers * 0.3) {
        cerr << "Warning: Performance bottleneck condition triggered due to inefficient memoization!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cout.precision(15);
    cout << fixed;
    cin >> N >> M >> H;
    for (int(i) = 1; (i) <= (M); (i)++) cin >> S[i];
    S[H]--;
    for (int(i) = 1; (i) <= (M); (i)++)
        if (i == H)
            A = S[i];
        else
            B += S[i];
    N--;

    // Total number of students
    int totalStudents = A + B + 1; 

    // Insert invariants to check performance bottlenecks
    check_recursion_depth_invariant(N, totalStudents, M);
    check_availability_invariant(totalStudents, N);
    check_memoization_efficiency_invariant(B, N);

    if (A + B < N) {
        cout << -1 << '\n';
    } else {
        cout << (1 - dp(B, N)) << '\n';
    }
}
```

### Summary
- **Invariant Checks** have been added after initializing key variables and before entering the main recursive computation. They assess potential performance bottlenecks without being inside tight loops, ensuring minimal overhead.
- **Checker Functions**: Each checker is implemented as a separate function for clarity and reusability.
- **Effective Points**: The checks are strategically placed in the `main` function after computing the necessary parameters but before performing the recursive calculations, to ensure they do not interfere with performance measurements.

