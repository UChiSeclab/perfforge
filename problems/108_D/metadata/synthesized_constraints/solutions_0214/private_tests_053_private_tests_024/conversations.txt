system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

As a German University in Cairo (GUC) student and a basketball player, Herr Wafa was delighted once he heard the news. GUC is finally participating in the Annual Basketball Competition (ABC). 

A team is to be formed of n players, all of which are GUC students. However, the team might have players belonging to different departments. There are m departments in GUC, numbered from 1 to m. Herr Wafa's department has number h. For each department i, Herr Wafa knows number si — how many students who play basketball belong to this department.

Herr Wafa was also able to guarantee a spot on the team, using his special powers. But since he hates floating-point numbers, he needs your help at finding the probability that he will have at least one teammate belonging to his department. 

Note that every possible team containing Herr Wafa is equally probable. Consider all the students different from each other.

Input

The first line contains three integers n, m and h (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000, 1 ≤ h ≤ m) — the number of players on the team, the number of departments in GUC and Herr Wafa's department, correspondingly. 

The second line contains a single-space-separated list of m integers si (1 ≤ si ≤ 100), denoting the number of students in the i-th department. Note that sh includes Herr Wafa.

Output

Print the probability that Herr Wafa will have at least one teammate from his department. If there is not enough basketball players in GUC to participate in ABC, print -1. The answer will be accepted if it has absolute or relative error not exceeding 10 - 6.

Examples

Input

3 2 1
2 1


Output

1


Input

3 2 1
1 1


Output

-1


Input

3 2 1
2 2


Output

0.666667

Note

In the first example all 3 players (2 from department 1 and 1 from department 2) must be chosen for the team. Both players from Wafa's departments will be chosen, so he's guaranteed to have a teammate from his department.

In the second example, there are not enough players.

In the third example, there are three possibilities to compose the team containing Herr Wafa. In two of them the other player from Herr Wafa's department is part of the team.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long double solve(int s1, int i1, int s2, int i2) {
  if (i1 > s1 || i2 > s2) return 0;
  int pt1 = s1, pt2 = s2, pt3 = i1 + i2, pt4 = s1 + s2 - (i1 + i2);
  priority_queue<int> values1;
  values1.push(pt1);
  values1.push(pt2);
  values1.push(pt3);
  values1.push(pt4);
  int pt5 = i1, pt6 = s1 - i1, pt7 = i2, pt8 = s2 - i2, pt9 = s1 + s2;
  priority_queue<int> values2;
  values2.push(pt5);
  values2.push(pt6);
  values2.push(pt7);
  values2.push(pt8);
  values2.push(pt9);
  long double ans = 1;
  while (values1.size() || values2.size()) {
    if (values1.size()) {
      int have = values1.top();
      values1.pop();
      if (have == 0) continue;
      ans *= have;
      if (have != 1) values1.push(have - 1);
    }
    if (values2.size()) {
      int have = values2.top();
      values2.pop();
      if (have == 0) continue;
      ans /= have;
      if (have != 1) values2.push(have - 1);
    }
  }
  return ans;
}
int main() {
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
  int n, m, k;
  cin >> n >> m >> k;
  int s1 = 0, s2 = 0;
  for (int i = 1; i <= m; i++) {
    int a;
    cin >> a;
    if (k == i)
      s1 = a;
    else
      s2 += a;
  }
  s1--;
  n--;
  if (s1 + s2 < n) {
    cout << -1;
    return 0;
  }
  long double prob = 0;
  for (int i = 1; i <= n; i++) {
    long double val = solve(s1, i, s2, n - i);
    prob += val;
  }
  cout << fixed << setprecision(8) << prob;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

44 35 7
10 2 2 6 4 2 8 3 10 1 9 9 7 9 10 6 6 1 4 5 7 4 9 7 10 10 7 9 6 1 7 7 2 10 7


(G.2) Fast Input

27 47 44
8 5 2 5 10 6 7 9 5 10 8 5 9 5 10 5 10 8 5 1 1 2 2 10 3 2 5 9 6 3 3 1 5 4 10 5 2 2 4 4 4 4 4 1 1 3 7


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long double solve(int s1, int i1, int s2, int i2) { /* line 3 slow_hit_count: 43, fast_hit_count: 26 */
  if (i1 > s1 || i2 > s2) return 0; /* line 4 slow_hit_count: 43, fast_hit_count: 26 */
  int pt1 = s1, pt2 = s2, pt3 = i1 + i2, pt4 = s1 + s2 - (i1 + i2); /* line 5 slow_hit_count: 7, fast_hit_count: 0 */
  priority_queue<int> values1; /* line 6 slow_hit_count: 14, fast_hit_count: 0 */
  values1.push(pt1); /* line 7 slow_hit_count: 7, fast_hit_count: 0 */
  values1.push(pt2); /* line 8 slow_hit_count: 7, fast_hit_count: 0 */
  values1.push(pt3); /* line 9 slow_hit_count: 7, fast_hit_count: 0 */
  values1.push(pt4); /* line 10 slow_hit_count: 7, fast_hit_count: 0 */
  int pt5 = i1, pt6 = s1 - i1, pt7 = i2, pt8 = s2 - i2, pt9 = s1 + s2; /* line 11 slow_hit_count: 7, fast_hit_count: 0 */
  priority_queue<int> values2; /* line 12 slow_hit_count: 7, fast_hit_count: 0 */
  values2.push(pt5); /* line 13 slow_hit_count: 7, fast_hit_count: 0 */
  values2.push(pt6); /* line 14 slow_hit_count: 7, fast_hit_count: 0 */
  values2.push(pt7); /* line 15 slow_hit_count: 7, fast_hit_count: 0 */
  values2.push(pt8); /* line 16 slow_hit_count: 7, fast_hit_count: 0 */
  values2.push(pt9); /* line 17 slow_hit_count: 7, fast_hit_count: 0 */
  long double ans = 1; /* line 18 slow_hit_count: 7, fast_hit_count: 0 */
  while (values1.size() || values2.size()) { /* line 19 slow_hit_count: 3032, fast_hit_count: 0 */
    if (values1.size()) { /* line 20 slow_hit_count: 3025, fast_hit_count: 0 */
      int have = values1.top(); /* line 21 slow_hit_count: 3024, fast_hit_count: 0 */
      values1.pop(); /* line 22 slow_hit_count: 3024, fast_hit_count: 0 */
      if (have == 0) continue; /* line 23 slow_hit_count: 3024, fast_hit_count: 0 */
      ans *= have; /* line 24 slow_hit_count: 3024, fast_hit_count: 0 */
      if (have != 1) values1.push(have - 1); /* line 25 slow_hit_count: 3024, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    if (values2.size()) { /* line 27 slow_hit_count: 3025, fast_hit_count: 0 */
      int have = values2.top(); /* line 28 slow_hit_count: 3025, fast_hit_count: 0 */
      values2.pop(); /* line 29 slow_hit_count: 3025, fast_hit_count: 0 */
      if (have == 0) continue; /* line 30 slow_hit_count: 3025, fast_hit_count: 0 */
      ans /= have; /* line 31 slow_hit_count: 3024, fast_hit_count: 0 */
      if (have != 1) values2.push(have - 1); /* line 32 slow_hit_count: 3024, fast_hit_count: 0 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 35 slow_hit_count: 7, fast_hit_count: 0 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, k; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m >> k; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  int s1 = 0, s2 = 0; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= m; i++) { /* line 42 slow_hit_count: 36, fast_hit_count: 48 */
    int a; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a; /* line 44 slow_hit_count: 35, fast_hit_count: 47 */
    if (k == i) /* line 45 slow_hit_count: 35, fast_hit_count: 47 */
      s1 = a; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
    else /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      s2 += a; /* line 48 slow_hit_count: 34, fast_hit_count: 46 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  s1--; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  n--; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  if (s1 + s2 < n) { /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
    cout << -1; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  long double prob = 0; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 57 slow_hit_count: 44, fast_hit_count: 27 */
    long double val = solve(s1, i, s2, n - i); /* line 58 slow_hit_count: 43, fast_hit_count: 26 */
    prob += val; /* line 59 slow_hit_count: 43, fast_hit_count: 26 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  cout << fixed << setprecision(8) << prob; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 63 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Let's analyze the provided C code by evaluating the areas where it may be inefficient, especially when handling the slow input.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **High Hit Count Differences**: The line-level hit counts reveal a significant difference for certain lines between the slow and fast runs.
   - The line `while (values1.size() || values2.size()) {` (line 19) and the subsequent lines (lines 20-32) within this loop are executed a large number of times for the slow input, but not at all for the fast input.
   - The function `solve(int s1, int i1, int s2, int i2)` (line 3) is called more often in the slow input (43 times) compared to the fast input (26 times).

2. **Loop Analysis**: 
   - The main loop structure in the `solve` function involves two priority queues and repeatedly processes and modifies them, causing a potentially high computational load.

3. **Data Interaction**:
   - The function `solve` is manipulating priority queues with potential for significant overhead, particularly due to the `push` and `pop` operations. When items are pushed and popped repeatedly, this can contribute to the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following potential performance-invariants:

1. **High Frequency of Repeated Calculations**:
   - Natural Language Description: "If the number of potential combinations to evaluate in the `solve` function is high, particularly when the sum of players in Herr Wafa's department and others approach the team size `n`, the computation may become expensive. This is amplified by the nested loops processing priority queues."

2. **Priority Queue Operations**:
   - Natural Language Description: "When the number of players not in Herr Wafa's department is large and distributed across departments such that the priority queue operations in the `solve` function are repeatedly performed, the program may slow down due to the overhead of maintaining sorted elements."

3. **Increased Combinatorial Possibilities**:
   - Natural Language Description: "As the number of players `n` approaches the total number of basketball players available (`s1 + s2`), the combinatorial possibilities that need evaluating increase, potentially triggering excessive recursive-like operations embedded in the loop."

These invariants help identify scenarios where the function could become performance-intensive without relying on specific data values, focusing instead on the structural and algorithmic aspects of the program logic.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
As a German University in Cairo (GUC) student and a basketball player, Herr Wafa was delighted once he heard the news. GUC is finally participating in the Annual Basketball Competition (ABC). 

A team is to be formed of n players, all of which are GUC students. However, the team might have players belonging to different departments. There are m departments in GUC, numbered from 1 to m. Herr Wafa's department has number h. For each department i, Herr Wafa knows number si — how many students who play basketball belong to this department.

Herr Wafa was also able to guarantee a spot on the team, using his special powers. But since he hates floating-point numbers, he needs your help at finding the probability that he will have at least one teammate belonging to his department. 

Note that every possible team containing Herr Wafa is equally probable. Consider all the students different from each other.

Input

The first line contains three integers n, m and h (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000, 1 ≤ h ≤ m) — the number of players on the team, the number of departments in GUC and Herr Wafa's department, correspondingly. 

The second line contains a single-space-separated list of m integers si (1 ≤ si ≤ 100), denoting the number of students in the i-th department. Note that sh includes Herr Wafa.

Output

Print the probability that Herr Wafa will have at least one teammate from his department. If there is not enough basketball players in GUC to participate in ABC, print -1. The answer will be accepted if it has absolute or relative error not exceeding 10 - 6.

Examples

Input

3 2 1
2 1


Output

1


Input

3 2 1
1 1


Output

-1


Input

3 2 1
2 2


Output

0.666667

Note

In the first example all 3 players (2 from department 1 and 1 from department 2) must be chosen for the team. Both players from Wafa's departments will be chosen, so he's guaranteed to have a teammate from his department.

In the second example, there are not enough players.

In the third example, there are three possibilities to compose the team containing Herr Wafa. In two of them the other player from Herr Wafa's department is part of the team.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Below, I'll translate the previously derived performance-characterizing invariants into C++ code that checks the conditions at runtime.

#### Invariant Check 1: High Frequency of Repeated Calculations

This check will be implemented to trigger when the sum of players in Herr Wafa's department and others approach the team size `n`, indicating a high number of potential combinations to evaluate.

```cpp
void check_repeated_calculations(int s1, int s2, int n) {
    if (s1 + s2 == n) {
        cerr << "Warning: Potentially high frequency of repeated calculations!" << endl;
        abort();
    }
}
```

#### Invariant Check 2: Priority Queue Operations

This check will be implemented to notify when the number of players not in Herr Wafa's department (`s2`) is large, indicating potentially excessive operations on the priority queues.

```cpp
void check_priority_queue_operations(int s2, int threshold = 80) {
    if (s2 > threshold) {
        cerr << "Warning: Excessive priority queue operations expected!" << endl;
        abort();
    }
}
```

#### Invariant Check 3: Increased Combinatorial Possibilities

This check will be implemented to detect when `n` approaches the total number of basketball players available (`s1 + s2`), as this increases the computational load.

```cpp
void check_combinatorial_possibilities(int s1, int s2, int n) {
    if (n > (s1 + s2 - 10)) {  // Allow a small buffer to prevent false positives
        cerr << "Warning: Increased combinatorial possibilities may slow down computation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Existing C++ Program

Now, let's integrate these checks into the given C++ code in appropriate locations to detect potential performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

long double solve(int s1, int i1, int s2, int i2) {
    if (i1 > s1 || i2 > s2) return 0;
    int pt1 = s1, pt2 = s2, pt3 = i1 + i2, pt4 = s1 + s2 - (i1 + i2);
    priority_queue<int> values1;
    values1.push(pt1);
    values1.push(pt2);
    values1.push(pt3);
    values1.push(pt4);
    int pt5 = i1, pt6 = s1 - i1, pt7 = i2, pt8 = s2 - i2, pt9 = s1 + s2;
    priority_queue<int> values2;
    values2.push(pt5);
    values2.push(pt6);
    values2.push(pt7);
    values2.push(pt8);
    values2.push(pt9);
    long double ans = 1;
    while (values1.size() || values2.size()) {
        if (values1.size()) {
            int have = values1.top();
            values1.pop();
            if (have == 0) continue;
            ans *= have;
            if (have != 1) values1.push(have - 1);
        }
        if (values2.size()) {
            int have = values2.top();
            values2.pop();
            if (have == 0) continue;
            ans /= have;
            if (have != 1) values2.push(have - 1);
        }
    }
    return ans;
}

int main() {
    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
    int n, m, k;
    cin >> n >> m >> k;
    int s1 = 0, s2 = 0;
    for (int i = 1; i <= m; i++) {
        int a;
        cin >> a;
        if (k == i)
            s1 = a;
        else
            s2 += a;
    }
    s1--;
    n--;

    // Insert the performance checkers here
    check_repeated_calculations(s1, s2, n);
    check_priority_queue_operations(s2);
    check_combinatorial_possibilities(s1, s2, n);

    if (s1 + s2 < n) {
        cout << -1;
        return 0;
    }

    long double prob = 0;
    for (int i = 1; i <= n; i++) {
        long double val = solve(s1, i, s2, n - i);
        prob += val;
    }
    cout << fixed << setprecision(8) << prob;
    return 0;
}
```

### Explanation of Inserted Checks

- **`check_repeated_calculations`**: This is inserted after input processing to catch cases where the number of players is equal to the total available, potentially leading to repeated calculations.
- **`check_priority_queue_operations`**: Placed similarly, to flag a warning when the number of players in other departments (`s2`) is large, indicating heavy priority queue use.
- **`check_combinatorial_possibilities`**: Also placed after input processing, to anticipate when the number of combinations (`n`) might approach the full set of available players (`s1 + s2`). 

These checks help identify potential performance bottlenecks and ensure that the conditions leading to slow execution can be detected during program execution.

