system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarpus has a ribbon, its length is n. He wants to cut the ribbon in a way that fulfils the following two conditions: 

  * After the cutting each ribbon piece should have length a, b or c. 
  * After the cutting the number of ribbon pieces should be maximum. 



Help Polycarpus and find the number of ribbon pieces after the required cutting.

Input

The first line contains four space-separated integers n, a, b and c (1 ≤ n, a, b, c ≤ 4000) — the length of the original ribbon and the acceptable lengths of the ribbon pieces after the cutting, correspondingly. The numbers a, b and c can coincide.

Output

Print a single number — the maximum possible number of ribbon pieces. It is guaranteed that at least one correct ribbon cutting exists.

Examples

Input

5 5 3 2


Output

2


Input

7 5 5 2


Output

2

Note

In the first example Polycarpus can cut the ribbon in such way: the first piece has length 2, the second piece has length 3.

In the second example Polycarpus can cut the ribbon in such way: the first piece has length 5, the second piece has length 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, a, b, c;
  int max = 0;
  cin >> n >> a >> b >> c;
  for (int i = 0; i <= n; i++) {
    for (int j = 0; j <= n; j++) {
      int k = (n - (i * a + j * b)) / c;
      if ((k * c + i * a + j * b) == n && k >= 0) {
        int m = i + j + k;
        if (m > max) max = m;
      }
    }
  }
  cout << max;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4000 5 3 2


(G.2) Fast Input

5 5 3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, a, b, c; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  int max = 0; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> a >> b >> c; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= n; i++) { /* line 7 slow_hit_count: 4002, fast_hit_count: 7 */
    for (int j = 0; j <= n; j++) { /* line 8 slow_hit_count: 16012002, fast_hit_count: 42 */
      int k = (n - (i * a + j * b)) / c; /* line 9 slow_hit_count: 16008001, fast_hit_count: 36 */
      if ((k * c + i * a + j * b) == n && k >= 0) { /* line 10 slow_hit_count: 16008001, fast_hit_count: 36 */
        int m = i + j + k; /* line 11 slow_hit_count: 267334, fast_hit_count: 2 */
        if (m > max) max = m; /* line 12 slow_hit_count: 267334, fast_hit_count: 2 */
      } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  cout << max; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */


assistant: **Phase 1: Identifying Expensive or Inefficient Code Segments**

Analyzing the line-level hit counts from the slow and fast inputs reveals the following:

1. **Outer Loop (Line 7):** The hit count for the slow input is 4002, compared to 7 for the fast input. This loop iterates over \(i\) from 0 to \(n\).

2. **Inner Loop (Line 8):** The hit count for the slow input is 16,012,002, compared to 42 for the fast input. This suggests that the inner loop iterates over \(j\) significantly more times for the slow input.

3. **Condition Check (Line 10):** The condition is evaluated 16,008,001 times for the slow input, indicating that almost every iteration of the inner loop hits this check.

4. **Lines 11 and 12:** These lines are hit 267,334 times for the slow input, compared to just 2 times for the fast input. This suggests that the condition is frequently true, and potential maxima updates for \(m\) are costly.

**Inference:**
- The loops are iterating extensively, especially due to the high value of \(n = 4000\) in the slow input, compared to \(n = 5\) in the fast input.
- The extensive nesting of loops for \(i\) and \(j\), combined with frequent evaluations of \(k\), contribute to the slowdown.

**Phase 2: Deriving Performance-Characterizing Invariants**

Based on the analysis, here are the derived performance-characterizing invariants:

1. **Invariant on Loop Iterations:**
   - **Natural Language Description:** "When \(n\) is large, near the upper constraint limit, and the code performs nested iterations for each combination of ribbon lengths \(a\), \(b\), and \(c\), performance can degrade significantly due to the quadratic nature of the loops."
   - **Threshold Suggestion:** As \(n\) approaches 4000, the number of combinations considered increases quadratically, leading to a performance bottleneck.

2. **Invariant on Feasibility Checks:**
   - **Natural Language Description:** "When multiple feasible combinations of \(i\), \(j\), and \(k\) satisfy the condition \((k \times c + i \times a + j \times b) = n\), the condition check and potential update of the maximum number of pieces increases, potentially slowing down the program."
   - **Threshold Suggestion:** If the number of successful condition evaluations (line 10) is a significant portion of the total iterations, performance may be impacted.

3. **Invariant on Maximum Calculation:**
   - **Natural Language Description:** "If many combinations result in the same total length \(n\), and thus contribute to potential maximum updates, the reassignment to `max` can become a performance sink."
   - **Threshold Suggestion:** If the number of times `max` is updated (line 12) is high relative to the loop iterations, this indicates a performance slowdown.

These invariants abstract the factors that cause performance degradation, preparing the code for future scenarios where similar input characteristics could lead to slow execution. By recognizing these patterns, developers can target optimizations, such as reducing redundant calculations or re-thinking the nested loop structure, to enhance performance even with large values of \(n\).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarpus has a ribbon, its length is n. He wants to cut the ribbon in a way that fulfils the following two conditions: 

  * After the cutting each ribbon piece should have length a, b or c. 
  * After the cutting the number of ribbon pieces should be maximum. 



Help Polycarpus and find the number of ribbon pieces after the required cutting.

Input

The first line contains four space-separated integers n, a, b and c (1 ≤ n, a, b, c ≤ 4000) — the length of the original ribbon and the acceptable lengths of the ribbon pieces after the cutting, correspondingly. The numbers a, b and c can coincide.

Output

Print a single number — the maximum possible number of ribbon pieces. It is guaranteed that at least one correct ribbon cutting exists.

Examples

Input

5 5 3 2


Output

2


Input

7 5 5 2


Output

2

Note

In the first example Polycarpus can cut the ribbon in such way: the first piece has length 2, the second piece has length 3.

In the second example Polycarpus can cut the ribbon in such way: the first piece has length 5, the second piece has length 2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

For each of the natural language invariants derived earlier, we will implement a C++ check that can be used to detect when the conditions for potential slowdowns are met.

#### Invariant 1 Checker: Large `n` with Nested Iterations
```cpp
void check_large_n_with_loops(int n) {
    // If n is large approaching its constraint limit, warn about potential nested loop slowdown
    if (n > 3500) {  // Arbitrary threshold close to 4000
        cerr << "Warning: Performance bottleneck condition triggered - large n with nested iterations!" << endl;
        abort();
    }
}
```

#### Invariant 2 Checker: Frequent Feasibility Checks
```cpp
void check_frequent_feasibility_checks(int feasibilityCheckCount, int totalIterations) {
    // If feasibility checks are frequent relative to total iterations, warn about potential slowdown
    if (feasibilityCheckCount > totalIterations / 2) {  // Arbitrary condition to trigger if checks are very frequent
        cerr << "Warning: Performance bottleneck condition triggered - frequent feasibility checks!" << endl;
        abort();
    }
}
```

#### Invariant 3 Checker: High Maximum Updates
```cpp
void check_high_max_updates(int maxUpdateCount, int totalIterations) {
    // If the number of max updates is too high, relative to total iterations, warn about potential slowdown
    if (maxUpdateCount > totalIterations / 10) {  // Arbitrary condition to trigger if many updates occur
        cerr << "Warning: Performance bottleneck condition triggered - frequent max updates!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original Program

Now, let's integrate these checks into the original C++ program. We should place the checks at strategic points to minimize unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions as described above
void check_large_n_with_loops(int n) {
    if (n > 3500) {
        cerr << "Warning: Performance bottleneck condition triggered - large n with nested iterations!" << endl;
        abort();
    }
}

void check_frequent_feasibility_checks(int feasibilityCheckCount, int totalIterations) {
    if (feasibilityCheckCount > totalIterations / 2) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent feasibility checks!" << endl;
        abort();
    }
}

void check_high_max_updates(int maxUpdateCount, int totalIterations) {
    if (maxUpdateCount > totalIterations / 10) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent max updates!" << endl;
        abort();
    }
}

int main() {
    int n, a, b, c;
    int max_pieces = 0;
    cin >> n >> a >> b >> c;

    // Place the first check after reading input to detect large n
    check_large_n_with_loops(n);

    int feasibilityCheckCount = 0;
    int maxUpdateCount = 0;
    int totalIterations = 0;

    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= n; j++) {
            totalIterations++;
            int k = (n - (i * a + j * b)) / c;
            if ((k * c + i * a + j * b) == n && k >= 0) {
                feasibilityCheckCount++;
                int m = i + j + k;
                if (m > max_pieces) {
                    max_pieces = m;
                    maxUpdateCount++;
                }
            }
        }
    }

    // Place additional checks after loops to detect frequent conditions
    check_frequent_feasibility_checks(feasibilityCheckCount, totalIterations);
    check_high_max_updates(maxUpdateCount, totalIterations);

    cout << max_pieces;
    return 0;
}
```

**Explanation:**

1. **`check_large_n_with_loops`:** This check is placed right after reading the input to warn if `n` is large, indicating potentially expensive nested loop iterations.
   
2. **`check_frequent_feasibility_checks`:** Executed after the loops to count how often the feasibility condition was true relative to the total iterations, indicating potentially redundant checks.

3. **`check_high_max_updates`:** Also executed after the loops to check the frequency of updates to `max_pieces`, which could indicate a performance bottleneck due to excessive updates.

These checks help identify potential performance issues without adding overhead within the loops, preserving the program's runtime efficiency for smaller input sizes.

