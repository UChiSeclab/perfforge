system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarpus has a ribbon, its length is n. He wants to cut the ribbon in a way that fulfils the following two conditions: 

  * After the cutting each ribbon piece should have length a, b or c. 
  * After the cutting the number of ribbon pieces should be maximum. 



Help Polycarpus and find the number of ribbon pieces after the required cutting.

Input

The first line contains four space-separated integers n, a, b and c (1 ≤ n, a, b, c ≤ 4000) — the length of the original ribbon and the acceptable lengths of the ribbon pieces after the cutting, correspondingly. The numbers a, b and c can coincide.

Output

Print a single number — the maximum possible number of ribbon pieces. It is guaranteed that at least one correct ribbon cutting exists.

Examples

Input

5 5 3 2


Output

2


Input

7 5 5 2


Output

2

Note

In the first example Polycarpus can cut the ribbon in such way: the first piece has length 2, the second piece has length 3.

In the second example Polycarpus can cut the ribbon in such way: the first piece has length 5, the second piece has length 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, a, b, c, d = 1, e = 2, f = 3, i, j, h = 0, k = 0, l = 0, m = 0, o = 0,
                  p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0,
                  y = 0;
  cin >> n >> a >> b >> c;
  if (a <= b && a <= c)
    j = a;
  else if (b <= a && b <= c)
    j = b;
  else if (c <= a && c <= b)
    j = c;
  if (n % j != 0) {
    if (n == a | n == b | n == c) {
      if (a == b + c | b == c + a | c == a + b) {
      } else {
        o++;
        s = d;
      }
    }
    if (n == a + b | n == b + c | n == a + c) {
      o++;
      s = e;
    }
    if (n == a + b + c) {
      o++;
      s = f;
    }
  }
  for (i = 0; i <= n; i++) {
    for (j = 0; j <= n; j++) {
      if ((i * a) + (j * b) == n) {
        p = i + j;
        if (p > k) k = p;
      }
      if ((i * b) + (j * c) == n) {
        q = i + j;
        if (q > l) l = q;
      }
      if ((i * c) + (j * a) == n) {
        r = i + j;
        if (r > m) m = r;
      }
      if ((i * a) + (j * b) + c == n) {
        t = i + j + 1;
        if (t > u) u = t;
      }
      if ((i * b) + (j * c) + a == n) {
        v = i + j + 1;
        if (v > w) w = v;
      }
      if ((i * c) + (j * a) + b == n) {
        x = i + j + 1;
        if (x > y) y = x;
      }
    }
  }
  if (k > s | l > s | m > s | u > s | w > s | y > s) {
    if (k >= l && k >= m && k >= u && k >= w && k >= y)
      cout << k;
    else if (l >= k && l >= m && l >= u && l >= w && l >= y)
      cout << l;
    else if (m >= k && m >= l && m >= u && m >= w && m >= y)
      cout << m;
    else if (u >= k && u >= l && u >= w && u >= y)
      cout << u;
    else if (w >= k && w >= l && w >= u && w >= y)
      cout << w;
    else if (y >= k && y >= l && y >= u && y >= w)
      cout << y;
  } else {
    cout << s;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4000 5 3 2


(G.2) Fast Input

3 5 3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, a, b, c, d = 1, e = 2, f = 3, i, j, h = 0, k = 0, l = 0, m = 0, o = 0, /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
                  p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
                  y = 0; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> a >> b >> c; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  if (a <= b && a <= c) /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    j = a; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  else if (b <= a && b <= c) /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    j = b; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  else if (c <= a && c <= b) /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
    j = c; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  if (n % j != 0) { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    if (n == a | n == b | n == c) { /* line 15 slow_hit_count: 0, fast_hit_count: 1 */
      if (a == b + c | b == c + a | c == a + b) { /* line 16 slow_hit_count: 0, fast_hit_count: 1 */
      } else { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
        o++; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
        s = d; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    if (n == a + b | n == b + c | n == a + c) { /* line 22 slow_hit_count: 0, fast_hit_count: 1 */
      o++; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      s = e; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    if (n == a + b + c) { /* line 26 slow_hit_count: 0, fast_hit_count: 1 */
      o++; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      s = f; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i <= n; i++) { /* line 31 slow_hit_count: 4002, fast_hit_count: 5 */
    for (j = 0; j <= n; j++) { /* line 32 slow_hit_count: 16012002, fast_hit_count: 20 */
      if ((i * a) + (j * b) == n) { /* line 33 slow_hit_count: 16008001, fast_hit_count: 16 */
        p = i + j; /* line 34 slow_hit_count: 267, fast_hit_count: 1 */
        if (p > k) k = p; /* line 35 slow_hit_count: 267, fast_hit_count: 1 */
      } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      if ((i * b) + (j * c) == n) { /* line 37 slow_hit_count: 16008001, fast_hit_count: 16 */
        q = i + j; /* line 38 slow_hit_count: 667, fast_hit_count: 1 */
        if (q > l) l = q; /* line 39 slow_hit_count: 667, fast_hit_count: 1 */
      } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
      if ((i * c) + (j * a) == n) { /* line 41 slow_hit_count: 16008001, fast_hit_count: 16 */
        r = i + j; /* line 42 slow_hit_count: 401, fast_hit_count: 0 */
        if (r > m) m = r; /* line 43 slow_hit_count: 401, fast_hit_count: 0 */
      } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      if ((i * a) + (j * b) + c == n) { /* line 45 slow_hit_count: 16008001, fast_hit_count: 16 */
        t = i + j + 1; /* line 46 slow_hit_count: 267, fast_hit_count: 0 */
        if (t > u) u = t; /* line 47 slow_hit_count: 267, fast_hit_count: 0 */
      } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      if ((i * b) + (j * c) + a == n) { /* line 49 slow_hit_count: 16008001, fast_hit_count: 16 */
        v = i + j + 1; /* line 50 slow_hit_count: 666, fast_hit_count: 0 */
        if (v > w) w = v; /* line 51 slow_hit_count: 666, fast_hit_count: 0 */
      } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
      if ((i * c) + (j * a) + b == n) { /* line 53 slow_hit_count: 16008001, fast_hit_count: 16 */
        x = i + j + 1; /* line 54 slow_hit_count: 400, fast_hit_count: 1 */
        if (x > y) y = x; /* line 55 slow_hit_count: 400, fast_hit_count: 1 */
      } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  if (k > s | l > s | m > s | u > s | w > s | y > s) { /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
    if (k >= l && k >= m && k >= u && k >= w && k >= y) /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
      cout << k; /* line 61 slow_hit_count: 0, fast_hit_count: 1 */
    else if (l >= k && l >= m && l >= u && l >= w && l >= y) /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
      cout << l; /* line 63 slow_hit_count: 1, fast_hit_count: 0 */
    else if (m >= k && m >= l && m >= u && m >= w && m >= y) /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      cout << m; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
    else if (u >= k && u >= l && u >= w && u >= y) /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
      cout << u; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    else if (w >= k && w >= l && w >= u && w >= y) /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
      cout << w; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    else if (y >= k && y >= l && y >= u && y >= w) /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
      cout << y; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
    cout << s; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 76 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The line-level hit counts indicate that the nested loops (lines 31-32) are executed significantly more often with the slow input. Specifically, line 31 has 4002 hits and line 32 has 16,012,002 hits with the slow input. In contrast, they have only 5 and 20 hits, respectively, with the fast input.
   - This suggests that the nested loops are a major bottleneck for the slow input.

2. **Pinpointing Costly Operations:**
   - The expressions within the nested loops (lines 33-55) are evaluated numerous times. Each line within the nested loop is hit over 16 million times in the slow case, whereas they are hit only 16 times in the fast case.
   - The conditions `(i * a) + (j * b) == n`, `(i * b) + (j * c) == n`, etc., are repeatedly checked, contributing to the slowdown.

3. **Inference:**
   - The nested loops iterate over a large range up to `n`, and since `n` is 4000 for the slow input, this results in a high number of iterations.
   - The loop conditions and calculations involve basic arithmetic operations but are checked excessively due to the large range of `i` and `j`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariants Describing Slow Path Conditions:**
   - **Invariant 1:** "If the value of `n` is large, close to its maximum constraint (e.g., 4000), and involves checking many combinations of `a`, `b`, and `c`, the iteration over a large search space significantly increases execution time."
     - **Explanation:** The program checks multiple arithmetic combinations of `a`, `b`, and `c` for every `i` and `j` in the nested loops up to `n`, leading to a combinatorial explosion in loop iteration count.
   
   - **Invariant 2:** "If the smallest piece length `j` is very small relative to `n`, this can lead to excessive iterations in the nested loops, as each potential combination is exhaustively checked."
     - **Explanation:** The choice of `j` as the smallest among `a`, `b`, and `c` means the loops have to cover a wide range of values, increasing the chances of each `(i * a) + (j * b)` combination needing to be checked.
   
   - **Invariant 3:** "When the sum of `a`, `b`, and `c` is close to `n`, the program may need to check multiple combinations, leading to inefficiencies through repeated calculations."
     - **Explanation:** When `n` approaches the sum of the piece lengths, more valid piece combinations exist, causing the loops to evaluate more conditions before finding the maximum number of pieces.

2. **Correlating Conditions to Input Patterns:**
   - These invariants suggest that combinations of input values leading to large search spaces result in slowdowns, especially when `n` is at its upper bound.
   - It is not solely the maximum value of `n` but also the relationship between `n` and the possible combinations of `a`, `b`, and `c` that determines performance.

By focusing on these invariants, one can understand when the program is likely to experience performance issues, particularly as `n` approaches its maximum constraint and when `a`, `b`, `c` lead to many valid combinations interacting with large loops.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarpus has a ribbon, its length is n. He wants to cut the ribbon in a way that fulfils the following two conditions: 

  * After the cutting each ribbon piece should have length a, b or c. 
  * After the cutting the number of ribbon pieces should be maximum. 



Help Polycarpus and find the number of ribbon pieces after the required cutting.

Input

The first line contains four space-separated integers n, a, b and c (1 ≤ n, a, b, c ≤ 4000) — the length of the original ribbon and the acceptable lengths of the ribbon pieces after the cutting, correspondingly. The numbers a, b and c can coincide.

Output

Print a single number — the maximum possible number of ribbon pieces. It is guaranteed that at least one correct ribbon cutting exists.

Examples

Input

5 5 3 2


Output

2


Input

7 5 5 2


Output

2

Note

In the first example Polycarpus can cut the ribbon in such way: the first piece has length 2, the second piece has length 3.

In the second example Polycarpus can cut the ribbon in such way: the first piece has length 5, the second piece has length 2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the previously inferred performance-characterizing invariants, here are the C++ checker codes for each invariant:

1. **Invariant 1:** Check when `n` is large and involves checking many combinations.
   ```cpp
   void check_large_n_invariant(int n) {
       if (n > 3500) {  // Assume a high value close to the max constraint of 4000
           cerr << "Warning: Performance bottleneck condition triggered - n is large!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2:** Check when the smallest piece length causes excessive iterations.
   ```cpp
   void check_smallest_length_invariant(int j) {
       if (j < 10) {  // Assume a small piece length could trigger large iterations
           cerr << "Warning: Performance bottleneck condition triggered - smallest piece length is small!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3:** When `n` is close to the sum of `a`, `b`, and `c`, indicating many possibilities.
   ```cpp
   void check_combination_invariant(int n, int a, int b, int c) {
       if (n > (a + b + c - 10)) {  // Allow some margin for how close they are
           cerr << "Warning: Performance bottleneck condition triggered - n is close to the sum of a, b, and c!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Conditional Checks into the Original Code

Now, integrate these checks into the given C++ program at appropriate points. The checks are placed immediately after input reading to avoid adding overhead in the tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function prototypes
void check_large_n_invariant(int n);
void check_smallest_length_invariant(int j);
void check_combination_invariant(int n, int a, int b, int c);

int main() {
    int n, a, b, c, d = 1, e = 2, f = 3, i, j, h = 0, k = 0, l = 0, m = 0, o = 0,
        p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, y = 0;
    
    cin >> n >> a >> b >> c;

    // Determine the smallest of a, b, c
    if (a <= b && a <= c)
        j = a;
    else if (b <= a && b <= c)
        j = b;
    else if (c <= a && c <= b)
        j = c;

    // Insert checks at effective points
    check_large_n_invariant(n);
    check_smallest_length_invariant(j);
    check_combination_invariant(n, a, b, c);

    if (n % j != 0) {
        if (n == a || n == b || n == c) {
            if (a == b + c || b == c + a || c == a + b) {
            } else {
                o++;
                s = d;
            }
        }
        if (n == a + b || n == b + c || n == a + c) {
            o++;
            s = e;
        }
        if (n == a + b + c) {
            o++;
            s = f;
        }
    }
    for (i = 0; i <= n; i++) {
        for (j = 0; j <= n; j++) {
            if ((i * a) + (j * b) == n) {
                p = i + j;
                if (p > k) k = p;
            }
            if ((i * b) + (j * c) == n) {
                q = i + j;
                if (q > l) l = q;
            }
            if ((i * c) + (j * a) == n) {
                r = i + j;
                if (r > m) m = r;
            }
            if ((i * a) + (j * b) + c == n) {
                t = i + j + 1;
                if (t > u) u = t;
            }
            if ((i * b) + (j * c) + a == n) {
                v = i + j + 1;
                if (v > w) w = v;
            }
            if ((i * c) + (j * a) + b == n) {
                x = i + j + 1;
                if (x > y) y = x;
            }
        }
    }
    if (k > s || l > s || m > s || u > s || w > s || y > s) {
        if (k >= l && k >= m && k >= u && k >= w && k >= y)
            cout << k;
        else if (l >= k && l >= m && l >= u && l >= w && l >= y)
            cout << l;
        else if (m >= k && m >= l && m >= u && m >= w && m >= y)
            cout << m;
        else if (u >= k && u >= l && u >= w && u >= y)
            cout << u;
        else if (w >= k && w >= l && w >= u && w >= y)
            cout << w;
        else if (y >= k && y >= l && y >= u && y >= w)
            cout << y;
    } else {
        cout << s;
    }
    return 0;
}

// Implementations of checker functions
void check_large_n_invariant(int n) {
    if (n > 3500) {
        cerr << "Warning: Performance bottleneck condition triggered - n is large!" << endl;
        abort();
    }
}

void check_smallest_length_invariant(int j) {
    if (j < 10) {
        cerr << "Warning: Performance bottleneck condition triggered - smallest piece length is small!" << endl;
        abort();
    }
}

void check_combination_invariant(int n, int a, int b, int c) {
    if (n > (a + b + c - 10)) {
        cerr << "Warning: Performance bottleneck condition triggered - n is close to the sum of a, b, and c!" << endl;
        abort();
    }
}
```

### Explanation
- **check_large_n_invariant** detects if `n` is near its maximum constraint, which could lead to high iteration counts and slow performance.
- **check_smallest_length_invariant** is used to detect when the smallest length `j` is very small, potentially increasing the range for the nested loops.
- **check_combination_invariant** checks if the value of `n` is close to the sum of `a`, `b`, and `c`, which could indicate an increased number of valid ribbon piece combinations and potential slowdowns.

The checks are inserted after reading inputs to quickly identify potential performance issues without adding unnecessary overhead during the computation-intensive parts of the program.

