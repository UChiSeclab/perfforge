system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarpus has a ribbon, its length is n. He wants to cut the ribbon in a way that fulfils the following two conditions: 

  * After the cutting each ribbon piece should have length a, b or c. 
  * After the cutting the number of ribbon pieces should be maximum. 



Help Polycarpus and find the number of ribbon pieces after the required cutting.

Input

The first line contains four space-separated integers n, a, b and c (1 ≤ n, a, b, c ≤ 4000) — the length of the original ribbon and the acceptable lengths of the ribbon pieces after the cutting, correspondingly. The numbers a, b and c can coincide.

Output

Print a single number — the maximum possible number of ribbon pieces. It is guaranteed that at least one correct ribbon cutting exists.

Examples

Input

5 5 3 2


Output

2


Input

7 5 5 2


Output

2

Note

In the first example Polycarpus can cut the ribbon in such way: the first piece has length 2, the second piece has length 3.

In the second example Polycarpus can cut the ribbon in such way: the first piece has length 5, the second piece has length 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, a, b, c, d = 1, e = 2, f = 3, i, j, h = 0, k = 0, l = 0, m = 0, o = 0,
                  p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0,
                  y = 0;
  cin >> n >> a >> b >> c;
  if (a <= b && a <= c)
    j = a;
  else if (b <= a && b <= c)
    j = b;
  else if (c <= a && c <= b)
    j = c;
  if (n % j != 0) {
    if (n == a | n == b | n == c) {
      if (a == b + c | b == c + a | c == a + b) {
      } else {
        o++;
        s = d;
      }
    }
    if (n == a + b | n == b + c | n == a + c) {
      o++;
      s = e;
    }
    if (n == a + b + c) {
      o++;
      s = f;
    }
  }
  for (i = 0; i <= n; i++) {
    for (j = 0; j <= n; j++) {
      if ((i * a) + (j * b) == n) {
        p = i + j;
        if (p > k) k = p;
      }
      if ((i * b) + (j * c) == n) {
        q = i + j;
        if (q > l) l = q;
      }
      if ((i * c) + (j * a) == n) {
        r = i + j;
        if (r > m) m = r;
      }
      if ((i * a) + (j * b) + c == n) {
        t = i + j + 1;
        if (t > u) u = t;
      }
      if ((i * b) + (j * c) + a == n) {
        v = i + j + 1;
        if (v > w) w = v;
      }
      if ((i * c) + (j * a) + b == n) {
        x = i + j + 1;
        if (x > y) y = x;
      }
    }
  }
  if (k > s | l > s | m > s | u > s | w > s | y > s) {
    if (k >= l && k >= m && k >= u && k >= w && k >= y)
      cout << k;
    else if (l >= k && l >= m && l >= u && l >= w && l >= y)
      cout << l;
    else if (m >= k && m >= l && m >= u && m >= w && m >= y)
      cout << m;
    else if (u >= k && u >= l && u >= w && u >= y)
      cout << u;
    else if (w >= k && w >= l && w >= u && w >= y)
      cout << w;
    else if (y >= k && y >= l && y >= u && y >= w)
      cout << y;
  } else {
    cout << s;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4000 5 3 2


(G.2) Fast Input

3 5 3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, a, b, c, d = 1, e = 2, f = 3, i, j, h = 0, k = 0, l = 0, m = 0, o = 0, /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
                  p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0, /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
                  y = 0; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> a >> b >> c; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  if (a <= b && a <= c) /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    j = a; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  else if (b <= a && b <= c) /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    j = b; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  else if (c <= a && c <= b) /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
    j = c; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  if (n % j != 0) { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    if (n == a | n == b | n == c) { /* line 15 slow_hit_count: 0, fast_hit_count: 1 */
      if (a == b + c | b == c + a | c == a + b) { /* line 16 slow_hit_count: 0, fast_hit_count: 1 */
      } else { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
        o++; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
        s = d; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    if (n == a + b | n == b + c | n == a + c) { /* line 22 slow_hit_count: 0, fast_hit_count: 1 */
      o++; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      s = e; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    if (n == a + b + c) { /* line 26 slow_hit_count: 0, fast_hit_count: 1 */
      o++; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      s = f; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i <= n; i++) { /* line 31 slow_hit_count: 4002, fast_hit_count: 5 */
    for (j = 0; j <= n; j++) { /* line 32 slow_hit_count: 16012002, fast_hit_count: 20 */
      if ((i * a) + (j * b) == n) { /* line 33 slow_hit_count: 16008001, fast_hit_count: 16 */
        p = i + j; /* line 34 slow_hit_count: 267, fast_hit_count: 1 */
        if (p > k) k = p; /* line 35 slow_hit_count: 267, fast_hit_count: 1 */
      } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      if ((i * b) + (j * c) == n) { /* line 37 slow_hit_count: 16008001, fast_hit_count: 16 */
        q = i + j; /* line 38 slow_hit_count: 667, fast_hit_count: 1 */
        if (q > l) l = q; /* line 39 slow_hit_count: 667, fast_hit_count: 1 */
      } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
      if ((i * c) + (j * a) == n) { /* line 41 slow_hit_count: 16008001, fast_hit_count: 16 */
        r = i + j; /* line 42 slow_hit_count: 401, fast_hit_count: 0 */
        if (r > m) m = r; /* line 43 slow_hit_count: 401, fast_hit_count: 0 */
      } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      if ((i * a) + (j * b) + c == n) { /* line 45 slow_hit_count: 16008001, fast_hit_count: 16 */
        t = i + j + 1; /* line 46 slow_hit_count: 267, fast_hit_count: 0 */
        if (t > u) u = t; /* line 47 slow_hit_count: 267, fast_hit_count: 0 */
      } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      if ((i * b) + (j * c) + a == n) { /* line 49 slow_hit_count: 16008001, fast_hit_count: 16 */
        v = i + j + 1; /* line 50 slow_hit_count: 666, fast_hit_count: 0 */
        if (v > w) w = v; /* line 51 slow_hit_count: 666, fast_hit_count: 0 */
      } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
      if ((i * c) + (j * a) + b == n) { /* line 53 slow_hit_count: 16008001, fast_hit_count: 16 */
        x = i + j + 1; /* line 54 slow_hit_count: 400, fast_hit_count: 1 */
        if (x > y) y = x; /* line 55 slow_hit_count: 400, fast_hit_count: 1 */
      } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  if (k > s | l > s | m > s | u > s | w > s | y > s) { /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
    if (k >= l && k >= m && k >= u && k >= w && k >= y) /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
      cout << k; /* line 61 slow_hit_count: 0, fast_hit_count: 1 */
    else if (l >= k && l >= m && l >= u && l >= w && l >= y) /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
      cout << l; /* line 63 slow_hit_count: 1, fast_hit_count: 0 */
    else if (m >= k && m >= l && m >= u && m >= w && m >= y) /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      cout << m; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
    else if (u >= k && u >= l && u >= w && u >= y) /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
      cout << u; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
    else if (w >= k && w >= l && w >= u && w >= y) /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
      cout << w; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    else if (y >= k && y >= l && y >= u && y >= w) /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
      cout << y; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
    cout << s; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 76 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To tackle the performance issue and understand the potential slow paths in the C program provided, we need to analyze the program's behavior with the given inputs. Let's break down the task into two phases as described.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The hit counts are significantly higher for the nested loop starting from line 31 to line 32 for the slow input compared to the fast input.
   - Specifically, the loop runs approximately 4000^2 times for the slow input, whereas it only runs a few times for the fast input.

2. **Pinpoint High-Hit Lines:**
   - Lines 31 and 32 are the primary bottlenecks with hit counts of 4002 and 16012002 for the slow input, respectively.
   - Lines 33, 37, 41, 45, 49, and 53 are repeatedly hit due to the extensive search space explored by the nested loops. These lines check various combinations of ribbon lengths in an exhaustive manner.

3. **Infer Potential Causes:**
   - The nested loops iterate over potential counts of each ribbon length \(a\), \(b\), and \(c\), checking possible combinations that sum to \(n\).
   - This approach becomes expensive as \(n\) increases, with the loops effectively searching a large space of potential combinations.

### Phase 2: Derive Performance-Characterizing Invariants

Here are some performance-characterizing invariants based on the analysis:

1. **Invariant for Large \(`n`\):**
   - "When \(n\) is large (close to the upper constraint), and there are multiple nested loops iterating potential combinations, the program may slow down significantly."
   - This invariant suggests that when \(n\) is large, the nested loops take on a significant performance burden due to their exhaustive nature.

2. **Invariant for Iterative Combination Search:**
   - "If the program extensively checks for combinations of ribbon lengths using multiple nested loops, performance degrades, especially as \(n\) approaches its maximum allowable value."
   - The performance issue is significantly tied to the number of iterations over potential combinations, exacerbated by larger \(n\).

3. **Invariant for Exhaustive Search Conditions:**
   - "When the algorithm employs exhaustive search methods (nested loops) with high iteration counts due to \(n\), and the potential solution space is vast, the program execution time increases."
   - The exhaustive search becomes impractical with larger \(n\), as it scales poorly with input size.

### Conclusion

These invariants capture the conditions under which the program's execution time is adversely affected, focusing on the impact of large input sizes \(n\) with nested loops leading to extensive iterations for potential ribbon length combinations. The strategy here should involve optimizing the search process, possibly using dynamic programming or greedy methods to improve efficiency rather than relying on exhaustive search.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarpus has a ribbon, its length is n. He wants to cut the ribbon in a way that fulfils the following two conditions: 

  * After the cutting each ribbon piece should have length a, b or c. 
  * After the cutting the number of ribbon pieces should be maximum. 



Help Polycarpus and find the number of ribbon pieces after the required cutting.

Input

The first line contains four space-separated integers n, a, b and c (1 ≤ n, a, b, c ≤ 4000) — the length of the original ribbon and the acceptable lengths of the ribbon pieces after the cutting, correspondingly. The numbers a, b and c can coincide.

Output

Print a single number — the maximum possible number of ribbon pieces. It is guaranteed that at least one correct ribbon cutting exists.

Examples

Input

5 5 3 2


Output

2


Input

7 5 5 2


Output

2

Note

In the first example Polycarpus can cut the ribbon in such way: the first piece has length 2, the second piece has length 3.

In the second example Polycarpus can cut the ribbon in such way: the first piece has length 5, the second piece has length 2.

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 and Phase 4 for the given task. 

### Phase 3: Implementing the Natural Language Invariants in C++

Based on the performance-characterizing invariants identified previously, we can create C++ checks to detect when the program might enter a slow path. Here are the check implementations for each invariant:

```cpp
void check_large_n_combination_invariant(int n) {
    if (n > 1000) {  // Arbitrary threshold chosen based on problem constraints and performance observation
        cerr << "Warning: Performance bottleneck condition triggered due to large n with combination checks!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checker Code into the Original Program

Now, let's integrate these checks into the C++ program, making sure to place the checks effectively without adding overhead in tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Check for large n causing performance issues due to exhaustive search
void check_large_n_combination_invariant(int n) {
    if (n > 1000) {  // Arbitrary threshold for demonstration
        cerr << "Warning: Performance bottleneck condition triggered due to large n with combination checks!" << endl;
        abort();
    }
}

int main() {
    int n, a, b, c, d = 1, e = 2, f = 3, i, j, h = 0, k = 0, l = 0, m = 0, o = 0,
                  p = 0, q = 0, r = 0, s = 0, t = 0, u = 0, v = 0, w = 0, x = 0,
                  y = 0;
    cin >> n >> a >> b >> c;

    // Check for performance bottleneck condition based on n
    check_large_n_combination_invariant(n);

    if (a <= b && a <= c)
        j = a;
    else if (b <= a && b <= c)
        j = b;
    else if (c <= a && c <= b)
        j = c;
    if (n % j != 0) {
        if (n == a || n == b || n == c) {
            if (a == b + c || b == c + a || c == a + b) {
            } else {
                o++;
                s = d;
            }
        }
        if (n == a + b || n == b + c || n == a + c) {
            o++;
            s = e;
        }
        if (n == a + b + c) {
            o++;
            s = f;
        }
    }
    for (i = 0; i <= n; i++) {
        for (j = 0; j <= n; j++) {
            if ((i * a) + (j * b) == n) {
                p = i + j;
                if (p > k) k = p;
            }
            if ((i * b) + (j * c) == n) {
                q = i + j;
                if (q > l) l = q;
            }
            if ((i * c) + (j * a) == n) {
                r = i + j;
                if (r > m) m = r;
            }
            if ((i * a) + (j * b) + c == n) {
                t = i + j + 1;
                if (t > u) u = t;
            }
            if ((i * b) + (j * c) + a == n) {
                v = i + j + 1;
                if (v > w) w = v;
            }
            if ((i * c) + (j * a) + b == n) {
                x = i + j + 1;
                if (x > y) y = x;
            }
        }
    }
    if (k > s || l > s || m > s || u > s || w > s || y > s) {
        if (k >= l && k >= m && k >= u && k >= w && k >= y)
            cout << k;
        else if (l >= k && l >= m && l >= u && l >= w && l >= y)
            cout << l;
        else if (m >= k && m >= l && m >= u && m >= w && m >= y)
            cout << m;
        else if (u >= k && u >= l && u >= w && u >= y)
            cout << u;
        else if (w >= k && w >= l && w >= u && w >= y)
            cout << w;
        else if (y >= k && y >= l && y >= u && y >= w)
            cout << y;
    } else {
        cout << s;
    }
    return 0;
}
```

### Explanation

- **Check Insertion Point:** The check for `n` being large is placed immediately after input reading. This is before any heavy computation begins, allowing the program to abort early if a potential bottleneck condition is detected.
- **Threshold Value:** The chosen threshold of 1000 is arbitrary but aims to catch cases where `n` is large enough to cause performance degradation, while still being within problem constraints.
- **Abort on Slow Path:** The program is designed to `abort()` if the invariant condition is met, providing a clear signal of where the bottleneck occurs. This approach is helpful during testing and debugging.

