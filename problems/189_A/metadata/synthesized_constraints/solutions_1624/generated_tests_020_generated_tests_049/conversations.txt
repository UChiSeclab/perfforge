system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarpus has a ribbon, its length is n. He wants to cut the ribbon in a way that fulfils the following two conditions: 

  * After the cutting each ribbon piece should have length a, b or c. 
  * After the cutting the number of ribbon pieces should be maximum. 



Help Polycarpus and find the number of ribbon pieces after the required cutting.

Input

The first line contains four space-separated integers n, a, b and c (1 ≤ n, a, b, c ≤ 4000) — the length of the original ribbon and the acceptable lengths of the ribbon pieces after the cutting, correspondingly. The numbers a, b and c can coincide.

Output

Print a single number — the maximum possible number of ribbon pieces. It is guaranteed that at least one correct ribbon cutting exists.

Examples

Input

5 5 3 2


Output

2


Input

7 5 5 2


Output

2

Note

In the first example Polycarpus can cut the ribbon in such way: the first piece has length 2, the second piece has length 3.

In the second example Polycarpus can cut the ribbon in such way: the first piece has length 5, the second piece has length 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, t, a, b, c, ans;
void solve() {
  ans = -1;
  for (int i = (0), _b = (n); i <= _b; i++) {
    for (int j = (0), _b = (n); j <= _b; j++) {
      int tmp = n - i - j;
      if (tmp < 0) continue;
      if (i % a == 0 && j % b == 0 && tmp % c == 0) {
        int tmp2 = i / a + j / b + tmp / c;
        ans = max(ans, tmp2);
      }
    }
  }
  cout << ans << endl;
}
int main() {
  scanf("%d", &n);
  scanf("%d %d %d", &a, &b, &c);
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4000 5 3 2


(G.2) Fast Input

3 5 3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, t, a, b, c, ans; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  ans = -1; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = (0), _b = (n); i <= _b; i++) { /* line 6 slow_hit_count: 4002, fast_hit_count: 5 */
    for (int j = (0), _b = (n); j <= _b; j++) { /* line 7 slow_hit_count: 16012002, fast_hit_count: 20 */
      int tmp = n - i - j; /* line 8 slow_hit_count: 16008001, fast_hit_count: 16 */
      if (tmp < 0) continue; /* line 9 slow_hit_count: 16008001, fast_hit_count: 16 */
      if (i % a == 0 && j % b == 0 && tmp % c == 0) { /* line 10 slow_hit_count: 8006001, fast_hit_count: 10 */
        int tmp2 = i / a + j / b + tmp / c; /* line 11 slow_hit_count: 267334, fast_hit_count: 1 */
        ans = max(ans, tmp2); /* line 12 slow_hit_count: 267334, fast_hit_count: 1 */
      } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d %d", &a, &b, &c); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Hit Count Analysis:**
   - The outer loop (line 6) iterates 4002 times with the slow input compared to only 5 times with the fast input.
   - The inner loop (line 7) is the most significant bottleneck, with 16,012,002 hits for the slow input, compared to 20 hits for the fast input. This indicates a combinatorial explosion in iterations.
   - The conditional check at line 10 (`if (i % a == 0 && j % b == 0 && tmp % c == 0)`) is hit 8,006,001 times for the slow input, but only 10 times for the fast input.
   - The lines where the temporary calculation and max update occur (lines 11 and 12) are only executed 267,334 times for the slow input, which shows that the condition on line 10 rarely succeeds relative to the number of iterations.

2. **Interaction with Data Structures and Loops:**
   - The nested loops iterate over the possible values of `i` and `j` ranging up to `n`, causing a quadratic complexity.
   - The condition checks involve modulo operations, suggesting inefficiencies when `i`, `j`, and `tmp` (computed from `n - i - j`) do not satisfy the divisibility condition, leading to frequent execution of loops without productive results.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariants:**
   - **Invariant #1:** "When the ribbon length `n` is large, and the target lengths `a`, `b`, and `c` result in many combinations that do not satisfy the divisibility condition, the nested loops iterate excessively, causing a slowdown."
   - **Invariant #2:** "If `n` is at the upper constraint limit and the values of `a`, `b`, and `c` create a high number of unsuccessful checks due to the condition `i % a == 0 && j % b == 0 && tmp % c == 0`, the program significantly slows down."
   - **Invariant #3:** "When lengths `a`, `b`, and `c` are relatively small compared to `n`, the number of redundant iterations in the nested loops increases, leading to performance degradation."

2. **Correlating Conditions to Input Patterns:**
   - These conditions indicate that inefficiency arises when `n` is maximized and the divisibility conditions are rarely met, leading to a waste of computational effort in the loops.
   - The inefficiency correlates with input patterns where `n` approaches its constraint limit, and `a`, `b`, and `c` are not factors that result in frequent successful divisions, thus triggering many unused iterations.

These performance-characterizing invariants are designed to help detect and understand slow performance scenarios in the code while remaining abstract enough to generalize across potential future inputs adhering to the problem constraints (1 ≤ n, a, b, c ≤ 4000).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarpus has a ribbon, its length is n. He wants to cut the ribbon in a way that fulfils the following two conditions: 

  * After the cutting each ribbon piece should have length a, b or c. 
  * After the cutting the number of ribbon pieces should be maximum. 



Help Polycarpus and find the number of ribbon pieces after the required cutting.

Input

The first line contains four space-separated integers n, a, b and c (1 ≤ n, a, b, c ≤ 4000) — the length of the original ribbon and the acceptable lengths of the ribbon pieces after the cutting, correspondingly. The numbers a, b and c can coincide.

Output

Print a single number — the maximum possible number of ribbon pieces. It is guaranteed that at least one correct ribbon cutting exists.

Examples

Input

5 5 3 2


Output

2


Input

7 5 5 2


Output

2

Note

In the first example Polycarpus can cut the ribbon in such way: the first piece has length 2, the second piece has length 3.

In the second example Polycarpus can cut the ribbon in such way: the first piece has length 5, the second piece has length 2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checkers

Below are the checkers implemented in C++ based on the performance-characterizing invariants identified earlier:

```cpp
void check_large_n_with_small_pieces(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large n with small a, b, c leading to excessive loop iterations!" << endl;
        abort();
    }
}

void check_high_unsuccessful_checks(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high number of unsuccessful checks due to divisibility conditions!" << endl;
        abort();
    }
}

void check_relative_size_inefficiency(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient relative sizes of n vs a, b, c!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Here is the original C++ program instrumented with the checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;

int n, t, a, b, c, ans;

// Checker function implementations
void check_large_n_with_small_pieces(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large n with small a, b, c leading to excessive loop iterations!" << endl;
        abort();
    }
}

void check_high_unsuccessful_checks(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high number of unsuccessful checks due to divisibility conditions!" << endl;
        abort();
    }
}

void check_relative_size_inefficiency(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient relative sizes of n vs a, b, c!" << endl;
        abort();
    }
}

void solve() {
    ans = -1;

    // Check for large n with small piece sizes
    check_large_n_with_small_pieces((n > 3000) && (a < 10 || b < 10 || c < 10));

    for (int i = 0, _b = n; i <= _b; i++) {
        for (int j = 0, _b = n; j <= _b; j++) {
            int tmp = n - i - j;
            if (tmp < 0) continue;
            
            // Check for high number of unsuccessful checks
            check_high_unsuccessful_checks((i % a != 0 || j % b != 0 || tmp % c != 0) && (i + j < 10));

            if (i % a == 0 && j % b == 0 && tmp % c == 0) {
                int tmp2 = i / a + j / b + tmp / c;
                ans = max(ans, tmp2);
            }
        }
    }

    cout << ans << endl;
}

int main() {
    scanf("%d", &n);
    scanf("%d %d %d", &a, &b, &c);
    
    // Check for inefficient relative size of n vs a, b, c
    check_relative_size_inefficiency(n > 3500 && a + b + c < 30);

    solve();
    return 0;
}
```

### Comments on the Instrumentation

- **Check for Large `n` with Small Piece Sizes**: Implemented before the loops to prevent excessive iterations when `n` is large, but `a`, `b`, and `c` are small.
- **Check for High Unsuccessful Divisibility Checks**: Placed within the loops but guarded by a heuristic for small loop variable values to balance between effective detection and avoiding unnecessary overhead.
- **Check for Inefficient Relative Sizes**: Implemented before the solve function, ensuring that the sizes of `a`, `b`, and `c` relative to `n` do not result in inefficiencies. 

These checks provide warnings and halt execution when potential performance bottlenecks are detected, aiding in testing and optimization efforts.

