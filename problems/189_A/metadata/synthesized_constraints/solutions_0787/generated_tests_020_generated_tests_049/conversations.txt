system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarpus has a ribbon, its length is n. He wants to cut the ribbon in a way that fulfils the following two conditions: 

  * After the cutting each ribbon piece should have length a, b or c. 
  * After the cutting the number of ribbon pieces should be maximum. 



Help Polycarpus and find the number of ribbon pieces after the required cutting.

Input

The first line contains four space-separated integers n, a, b and c (1 ≤ n, a, b, c ≤ 4000) — the length of the original ribbon and the acceptable lengths of the ribbon pieces after the cutting, correspondingly. The numbers a, b and c can coincide.

Output

Print a single number — the maximum possible number of ribbon pieces. It is guaranteed that at least one correct ribbon cutting exists.

Examples

Input

5 5 3 2


Output

2


Input

7 5 5 2


Output

2

Note

In the first example Polycarpus can cut the ribbon in such way: the first piece has length 2, the second piece has length 3.

In the second example Polycarpus can cut the ribbon in such way: the first piece has length 5, the second piece has length 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long MAX = 1e5 + 5;
const long long modu = 1e9 + 7;
long long n, a, b, c;
long long dp[4005][4005];
long long fun(long long n, long long count) {
  if (n < 0) return 0;
  if (dp[n][count] != -1) return dp[n][count];
  if (n == 0) return count;
  long long ans1 = fun(n - a, count + 1);
  long long ans2 = fun(n - b, count + 1);
  long long ans3 = fun(n - c, count + 1);
  return dp[n][count] = max(ans1, max(ans2, ans3));
}
int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  ;
  cin >> n >> a >> b >> c;
  memset(dp, -1, sizeof(dp));
  cout << fun(n, 0);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4000 5 3 2


(G.2) Fast Input

3 5 3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long MAX = 1e5 + 5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long modu = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long n, a, b, c; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[4005][4005]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long fun(long long n, long long count) { /* line 7 slow_hit_count: 7200001, fast_hit_count: 7 */
  if (n < 0) return 0; /* line 8 slow_hit_count: 7200001, fast_hit_count: 7 */
  if (dp[n][count] != -1) return dp[n][count]; /* line 9 slow_hit_count: 7191606, fast_hit_count: 3 */
  if (n == 0) return count; /* line 10 slow_hit_count: 2403598, fast_hit_count: 3 */
  long long ans1 = fun(n - a, count + 1); /* line 11 slow_hit_count: 2400000, fast_hit_count: 2 */
  long long ans2 = fun(n - b, count + 1); /* line 12 slow_hit_count: 2400000, fast_hit_count: 2 */
  long long ans3 = fun(n - c, count + 1); /* line 13 slow_hit_count: 2400000, fast_hit_count: 2 */
  return dp[n][count] = max(ans1, max(ans2, ans3)); /* line 14 slow_hit_count: 2400000, fast_hit_count: 2 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> a >> b >> c; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, -1, sizeof(dp)); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  cout << fun(n, 0); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 24 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottlenecks in the given C program and derive conditions or invariants characterizing the slowdown, let's analyze the line-level hit counts for both the fast and slow inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - The function `fun` is called significantly more often during the slow input run as compared to the fast input run. Specifically, `slow_hit_count` for the `fun` function and its associated lines is on the order of millions, while the `fast_hit_count` is only 7 or less for the same lines.
   - **Recursion**: The lines responsible for the recursion (`fun(n - a, count + 1)`, `fun(n - b, count + 1)`, `fun(n - c, count + 1)`) are hit 2,400,000 times each under the slow input. The memoization check (`if (dp[n][count] != -1)`) is also heavily utilized, indicating the recursive nature of the problem.

2. **Data Structure Interaction**:
   - The 2D array `dp` is used for memoization. The program checks `dp[n][count]` before proceeding with computation, which is indicative of cached results being reused. However, the recursion still results in deep explorations, particularly with larger values of `n`.

3. **Constraints and Complexity**:
   - The recursive calls explore multiple paths where each path length is reduced by `a`, `b`, or `c`. With the maximum constraints (`n = 4000`), this leads to many overlapping subproblems, and despite memoization, the recursion depth and breadth can grow significantly.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, let's create natural language statements that capture the conditions under which the program slows down:

1. **Recursion Depth and Search Space**:
   - **Invariant**: "When the initial ribbon length `n` is large and close to the constraint limit, and when there are multiple ways to partition the ribbon into pieces of lengths `a`, `b`, and `c`, the recursive exploration of possible cuts can become very broad and deep, significantly increasing computation time."
   
2. **Memoization Efficiency**:
   - **Invariant**: "If the number of distinct subproblems is close to the size of the `dp` array due to high values of `n` and diverse options for `a`, `b`, and `c`, the overhead of memoization may not sufficiently optimize the recursive computation, leading to slower execution."

3. **Path Exploration**:
   - **Invariant**: "When `a`, `b`, and `c` are relatively small compared to `n`, leading to a high branching factor in the recursive function, the number of potential recursive paths increases, thereby exacerbating the performance bottleneck."

These invariants highlight the conditions for slow performance, particularly when the recursive approach has to explore many potential cuts and when memoization cannot fully mitigate this exploration due to the structure and constraints of the problem.

### Recommendations

1. **Memoization Optimization**: Ensure that memoization is effectively capturing and reusing results, potentially reducing the dimensionality of `dp` if possible to the critical parameters.
2. **Iterative Rewrite**: Consider an iterative approach or dynamic programming solution that iteratively builds solutions from smaller subproblems, potentially reducing the recursion overhead.
3. **Threshold for Recursion**: Implement checks or early returns for when `n` is very large and `a`, `b`, and `c` lead to many permutations, limiting unnecessary recursive calls.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarpus has a ribbon, its length is n. He wants to cut the ribbon in a way that fulfils the following two conditions: 

  * After the cutting each ribbon piece should have length a, b or c. 
  * After the cutting the number of ribbon pieces should be maximum. 



Help Polycarpus and find the number of ribbon pieces after the required cutting.

Input

The first line contains four space-separated integers n, a, b and c (1 ≤ n, a, b, c ≤ 4000) — the length of the original ribbon and the acceptable lengths of the ribbon pieces after the cutting, correspondingly. The numbers a, b and c can coincide.

Output

Print a single number — the maximum possible number of ribbon pieces. It is guaranteed that at least one correct ribbon cutting exists.

Examples

Input

5 5 3 2


Output

2


Input

7 5 5 2


Output

2

Note

In the first example Polycarpus can cut the ribbon in such way: the first piece has length 2, the second piece has length 3.

In the second example Polycarpus can cut the ribbon in such way: the first piece has length 5, the second piece has length 2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checker Code in C++

Based on the performance-characterizing invariants derived earlier, we can implement the corresponding checker code. Here are the checkers for each invariant:

1. **Recursion Depth and Search Space Checker**:
   - Checks if `n` is large and the combination of `a`, `b`, and `c` leads to a broad and deep recursive search space.

```cpp
void check_recursion_invariant(long long n, long long a, long long b, long long c) {
    if (n > 3000 && (n % a == 0 || n % b == 0 || n % c == 0)) {
        cerr << "Warning: Recursion invariant triggered - large n with multiple partition options" << endl;
        abort();
    }
}
```

2. **Memoization Efficiency Checker**:
   - Verifies if the number of subproblems approaches the size of the `dp` table, affecting memoization efficiency.

```cpp
void check_memoization_invariant(long long n, long long a, long long b, long long c) {
    if ((n > 3000) && (a < 10 || b < 10 || c < 10)) {
        cerr << "Warning: Memoization invariant triggered - inefficient memoization with small partition lengths" << endl;
        abort();
    }
}
```

3. **Path Exploration Checker**:
   - Checks if small values of `a`, `b`, and `c` result in a high branching factor.

```cpp
void check_branching_invariant(long long a, long long b, long long c) {
    if ((a < 5 && b < 5 && c < 5)) {
        cerr << "Warning: Branching invariant triggered - high branching factor due to small partition lengths" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Now, we will integrate these checks into the original C++ code provided:

```cpp
#include <bits/stdc++.h>
using namespace std;

const long long MAX = 1e5 + 5;
const long long modu = 1e9 + 7;
long long n, a, b, c;
long long dp[4005][4005];

void check_recursion_invariant(long long n, long long a, long long b, long long c) {
    if (n > 3000 && (n % a == 0 || n % b == 0 || n % c == 0)) {
        cerr << "Warning: Recursion invariant triggered - large n with multiple partition options" << endl;
        abort();
    }
}

void check_memoization_invariant(long long n, long long a, long long b, long long c) {
    if ((n > 3000) && (a < 10 || b < 10 || c < 10)) {
        cerr << "Warning: Memoization invariant triggered - inefficient memoization with small partition lengths" << endl;
        abort();
    }
}

void check_branching_invariant(long long a, long long b, long long c) {
    if ((a < 5 && b < 5 && c < 5)) {
        cerr << "Warning: Branching invariant triggered - high branching factor due to small partition lengths" << endl;
        abort();
    }
}

long long fun(long long n, long long count) {
    if (n < 0) return 0;
    if (dp[n][count] != -1) return dp[n][count];
    if (n == 0) return count;
    long long ans1 = fun(n - a, count + 1);
    long long ans2 = fun(n - b, count + 1);
    long long ans3 = fun(n - c, count + 1);
    return dp[n][count] = max(ans1, max(ans2, ans3));
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    cin >> n >> a >> b >> c;

    // Insert checkers after reading inputs
    check_recursion_invariant(n, a, b, c);
    check_memoization_invariant(n, a, b, c);
    check_branching_invariant(a, b, c);

    memset(dp, -1, sizeof(dp));
    cout << fun(n, 0);
}
```

### Explanation

- **Recursion Depth and Search Space**: The check is performed immediately after reading input values to ensure that we catch cases where `n` is large and has multiple partition options.
- **Memoization Efficiency**: Checks are also made after input to ensure `dp` effectiveness.
- **Path Exploration**: Verifies reasonable partition sizes to prevent high branching.
- These checks will help catch edge cases leading to performance bottlenecks, allowing the program to abort and warn about potential inefficiencies.

