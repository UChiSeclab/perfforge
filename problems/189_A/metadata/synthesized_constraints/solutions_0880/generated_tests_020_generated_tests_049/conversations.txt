system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarpus has a ribbon, its length is n. He wants to cut the ribbon in a way that fulfils the following two conditions: 

  * After the cutting each ribbon piece should have length a, b or c. 
  * After the cutting the number of ribbon pieces should be maximum. 



Help Polycarpus and find the number of ribbon pieces after the required cutting.

Input

The first line contains four space-separated integers n, a, b and c (1 ≤ n, a, b, c ≤ 4000) — the length of the original ribbon and the acceptable lengths of the ribbon pieces after the cutting, correspondingly. The numbers a, b and c can coincide.

Output

Print a single number — the maximum possible number of ribbon pieces. It is guaranteed that at least one correct ribbon cutting exists.

Examples

Input

5 5 3 2


Output

2


Input

7 5 5 2


Output

2

Note

In the first example Polycarpus can cut the ribbon in such way: the first piece has length 2, the second piece has length 3.

In the second example Polycarpus can cut the ribbon in such way: the first piece has length 5, the second piece has length 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int i;
int main() {
  int n, a, b, c, best = 0;
  cin >> n >> a >> b >> c;
  for (i = 0; i <= n; i++) {
    for (int j = 0; j <= n; j++) {
      int x, y, z;
      x = a * i, y = j * b, z = n - x - y;
      if (z % c == 0 && z > 0) {
        best = max(best, i + j + (z / c));
      }
      if ((a * i + b * j) == n) best = max(best, i + j);
    }
  }
  cout << best;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4000 5 3 2


(G.2) Fast Input

3 5 3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int i; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int n, a, b, c, best = 0; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> a >> b >> c; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i <= n; i++) { /* line 7 slow_hit_count: 4002, fast_hit_count: 5 */
    for (int j = 0; j <= n; j++) { /* line 8 slow_hit_count: 16012002, fast_hit_count: 20 */
      int x, y, z; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
      x = a * i, y = j * b, z = n - x - y; /* line 10 slow_hit_count: 16008001, fast_hit_count: 16 */
      if (z % c == 0 && z > 0) { /* line 11 slow_hit_count: 16008001, fast_hit_count: 16 */
        best = max(best, i + j + (z / c)); /* line 12 slow_hit_count: 267067, fast_hit_count: 0 */
      } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
      if ((a * i + b * j) == n) best = max(best, i + j); /* line 14 slow_hit_count: 16008001, fast_hit_count: 16 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  cout << best; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 18 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the problem of maximizing the number of ribbon pieces, we need to focus on the code provided and the hit counts for both slow and fast inputs.

### Phase 1: Identifying Expensive or Inefficient Code Segments

From the hit count data:

1. **Outer Loop (`for (i = 0; i <= n; i++)`)**:
   - Slow Input: 4002 hits
   - Fast Input: 5 hits

2. **Inner Loop (`for (int j = 0; j <= n; j++)`)**:
   - Slow Input: 16,012,002 hits
   - Fast Input: 20 hits

3. **Calculations and Conditions (`if` statements)**:
   - The calculations and conditions inside the loops are executed a huge number of times for the slow input (16,008,001 times), while only 16 times for the fast input.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the analysis, we notice that the number of iterations in the nested loops significantly affects performance. Here are the performance-characterizing invariants:

1. **Invariant Related to Large `n`**:
   - **Natural Language Description**: "When `n` is large, and both `a`, `b`, and `c` are relatively small, the number of iterations in the nested loops increases dramatically, leading to a slowdown."
   - **Rationale**: With large `n` and small pieces, the loops iterate over a wide range of possible combinations, increasing computational overhead.

2. **Invariant Related to Combinatorial Explosion**:
   - **Natural Language Description**: "If the possible combinations of cutting lengths (`a`, `b`, `c`) allow many permutations to achieve `n`, the loops will iterate excessively, causing a slowdown."
   - **Rationale**: The loops attempt all possible combinations of `i` and `j` such that the remainder `z` is divisible by `c`. More combinations imply more checks, thus more computational time.

3. **Invariant Related to Large Iterations in Nested Loops**:
   - **Natural Language Description**: "As the combination of `i` and `j` grows large (close to `n`), the execution time increases due to the nested structure, especially when `a`, `b`, and `c` provide many valid cutting strategies."
   - **Rationale**: Here, the nested loops multiply the number of iterations, particularly problematic when `n` is maximized and `a`, `b`, `c` are small, leading to more valid cuts.

### Summary

In summary, the primary bottleneck arises from the high iteration count in the nested loops due to large `n` values combined with small and similar cutting lengths. The nested loops explore a large space of possible combinations, especially when `a`, `b`, `c` are factors or close to factors of `n`. Reducing the loop upper bounds, introducing memoization, or optimizing the approach could mitigate these inefficiencies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarpus has a ribbon, its length is n. He wants to cut the ribbon in a way that fulfils the following two conditions: 

  * After the cutting each ribbon piece should have length a, b or c. 
  * After the cutting the number of ribbon pieces should be maximum. 



Help Polycarpus and find the number of ribbon pieces after the required cutting.

Input

The first line contains four space-separated integers n, a, b and c (1 ≤ n, a, b, c ≤ 4000) — the length of the original ribbon and the acceptable lengths of the ribbon pieces after the cutting, correspondingly. The numbers a, b and c can coincide.

Output

Print a single number — the maximum possible number of ribbon pieces. It is guaranteed that at least one correct ribbon cutting exists.

Examples

Input

5 5 3 2


Output

2


Input

7 5 5 2


Output

2

Note

In the first example Polycarpus can cut the ribbon in such way: the first piece has length 2, the second piece has length 3.

In the second example Polycarpus can cut the ribbon in such way: the first piece has length 5, the second piece has length 2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Based on the natural language invariants derived earlier, we can implement the following checker functions to identify potential performance bottlenecks:

#### Invariant 1: Large `n` with small `a`, `b`, and `c`

```cpp
void check_large_n_small_abc(int n, int a, int b, int c) {
    if (n > 1000 && (a < 10 || b < 10 || c < 10)) {
        cerr << "Warning: Performance bottleneck condition triggered - large n and small a, b, c!" << endl;
        abort();
    }
}
```

#### Invariant 2: Combinatorial Explosion

```cpp
void check_combinatorial_explosion(int n, int a, int b, int c) {
    if (n > 1000 && (n % a == 0 || n % b == 0 || n % c == 0)) {
        cerr << "Warning: Performance bottleneck condition triggered - potential combinatorial explosion!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Program

We will now integrate these checks into the original program, ensuring they do not add overhead inside the loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

int i;

// Check for large n with small a, b, c
void check_large_n_small_abc(int n, int a, int b, int c) {
    if (n > 1000 && (a < 10 || b < 10 || c < 10)) {
        cerr << "Warning: Performance bottleneck condition triggered - large n and small a, b, c!" << endl;
        abort();
    }
}

// Check for potential combinatorial explosion
void check_combinatorial_explosion(int n, int a, int b, int c) {
    if (n > 1000 && (n % a == 0 || n % b == 0 || n % c == 0)) {
        cerr << "Warning: Performance bottleneck condition triggered - potential combinatorial explosion!" << endl;
        abort();
    }
}

int main() {
    int n, a, b, c, best = 0;
    cin >> n >> a >> b >> c;

    // Place checks after input to avoid overhead in loops
    check_large_n_small_abc(n, a, b, c);
    check_combinatorial_explosion(n, a, b, c);

    for (i = 0; i <= n; i++) {
        for (int j = 0; j <= n; j++) {
            int x, y, z;
            x = a * i, y = j * b, z = n - x - y;
            if (z % c == 0 && z > 0) {
                best = max(best, i + j + (z / c));
            }
            if ((a * i + b * j) == n) best = max(best, i + j);
        }
    }
    cout << best;
}
```

### Explanation of Checker Placement

- The check for "large `n` with small `a`, `b`, and `c`" is placed after the input is read to quickly identify scenarios that might lead to excessive iterations.
- The combinatorial explosion check is also placed after input reading to warn about potential performance issues due to the nature of `n`, `a`, `b`, and `c`.
- These checks will help identify slow performance triggers during execution without adding overhead within the performance-critical loops.

