system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarpus has a ribbon, its length is n. He wants to cut the ribbon in a way that fulfils the following two conditions: 

  * After the cutting each ribbon piece should have length a, b or c. 
  * After the cutting the number of ribbon pieces should be maximum. 



Help Polycarpus and find the number of ribbon pieces after the required cutting.

Input

The first line contains four space-separated integers n, a, b and c (1 ≤ n, a, b, c ≤ 4000) — the length of the original ribbon and the acceptable lengths of the ribbon pieces after the cutting, correspondingly. The numbers a, b and c can coincide.

Output

Print a single number — the maximum possible number of ribbon pieces. It is guaranteed that at least one correct ribbon cutting exists.

Examples

Input

5 5 3 2


Output

2


Input

7 5 5 2


Output

2

Note

In the first example Polycarpus can cut the ribbon in such way: the first piece has length 2, the second piece has length 3.

In the second example Polycarpus can cut the ribbon in such way: the first piece has length 5, the second piece has length 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long mod = 1000000007;
long long i, j;
long long temp;
int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long n, a, b, c;
  cin >> n >> a >> b >> c;
  long long max = 0;
  for (i = 0; i < n + 1; i++) {
    for (j = 0; j < n + 1; j++) {
      long long k;
      k = n - (a * i + b * j);
      k /= c;
      if (a * i + b * j + c * k == n && i + j + k > max && k >= 0) {
        max = i + j + k;
      }
    }
  }
  cout << max;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4000 5 3 2


(G.2) Fast Input

3 5 3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1000000007; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long i, j; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long temp; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, a, b, c; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> a >> b >> c; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  long long max = 0; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n + 1; i++) { /* line 12 slow_hit_count: 4002, fast_hit_count: 5 */
    for (j = 0; j < n + 1; j++) { /* line 13 slow_hit_count: 16012002, fast_hit_count: 20 */
      long long k; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
      k = n - (a * i + b * j); /* line 15 slow_hit_count: 16008001, fast_hit_count: 16 */
      k /= c; /* line 16 slow_hit_count: 16008001, fast_hit_count: 16 */
      if (a * i + b * j + c * k == n && i + j + k > max && k >= 0) { /* line 17 slow_hit_count: 16008001, fast_hit_count: 16 */
        max = i + j + k; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  cout << max; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the analysis of the provided C code and the hit counts for both the fast and slow inputs, let's go through the two phases to derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - The outer loop (line 12) runs `n + 1` times, and the inner loop (line 13) also runs `n + 1` times. Thus, the nested loops have a complexity of \(O(n^2)\).
   - For the slow input (n = 4000), the hit count of lines 12 and 13 are extremely high: 4002 and 16012002, respectively. This indicates that these loops are the primary source of inefficiency.
   - For the fast input (n = 3), the hit counts are much smaller, indicating that the loops complete quickly.

2. **Inefficiency Cause**:
   - The high hit counts on lines 15 and 16 suggest that the calculation of `k` and the subsequent conditions are repeated extensively. The main cause is the high iteration count due to large `n`, which leads to a high number of iterations across both loops.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariants Based on the Analysis**:

   - **Invariant 1**: "If the length of the ribbon `n` is large, close to the upper constraint of 4000, and the lengths `a`, `b`, `c` are small, the loops iterate excessively, leading to a slowdown. This happens because the search space for feasible combinations of `i`, `j`, and `k` becomes very large."
     - This invariant suggests that when `n` is large and the possible piece lengths are small, the nested loops are extensively iterated to find a solution.

   - **Invariant 2**: "When the constraints allow many combinations of piece lengths that sum to `n`, the number of iterations in the nested loops increases significantly, causing slow execution."
     - This indicates that if there are many feasible combinations of `a`, `b`, and `c` that add up to `n`, the algorithm will take a longer time to find the best solution.

2. **Suggested Thresholds**:
   - Given `n <= 4000`, performance issues notably arise as `n` approaches this upper bound, especially if `a`, `b`, `c` are significantly smaller than `n`. This needs to be monitored, and optimizing the algorithm logic to reduce unnecessary iterations can help mitigate slowdowns.

### Conclusion

The primary cause of the performance bottleneck is the \(O(n^2)\) complexity arising from the nested loops iterating over all possible combinations of piece lengths. Optimizing the search strategy or leveraging dynamic programming techniques could improve efficiency for large `n`. These invariants help highlight scenarios where the current approach struggles, especially with large `n` and small `a`, `b`, `c`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarpus has a ribbon, its length is n. He wants to cut the ribbon in a way that fulfils the following two conditions: 

  * After the cutting each ribbon piece should have length a, b or c. 
  * After the cutting the number of ribbon pieces should be maximum. 



Help Polycarpus and find the number of ribbon pieces after the required cutting.

Input

The first line contains four space-separated integers n, a, b and c (1 ≤ n, a, b, c ≤ 4000) — the length of the original ribbon and the acceptable lengths of the ribbon pieces after the cutting, correspondingly. The numbers a, b and c can coincide.

Output

Print a single number — the maximum possible number of ribbon pieces. It is guaranteed that at least one correct ribbon cutting exists.

Examples

Input

5 5 3 2


Output

2


Input

7 5 5 2


Output

2

Note

In the first example Polycarpus can cut the ribbon in such way: the first piece has length 2, the second piece has length 3.

In the second example Polycarpus can cut the ribbon in such way: the first piece has length 5, the second piece has length 2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's translate the previously derived performance-characterizing invariants into C++ code snippets that can be integrated into the program to check for potential slowdowns.

#### Invariant 1:
Natural Language: "If the length of the ribbon `n` is large, close to the upper constraint of 4000, and the lengths `a`, `b`, `c` are small, the loops iterate excessively, leading to a slowdown."

```cpp
void check_large_n_small_abc_invariant(long long n, long long a, long long b, long long c) {
    if (n > 3500 && (a < 10 || b < 10 || c < 10)) {
        cerr << "Warning: Performance bottleneck condition triggered - large n with small a, b, c" << endl;
        abort();
    }
}
```

#### Invariant 2:
Natural Language: "When the constraints allow many combinations of piece lengths that sum to `n`, the number of iterations in the nested loops increases significantly, causing slow execution."

```cpp
void check_combinations_invariant(long long n, long long a, long long b, long long c) {
    if (n > 3500 && (a + b + c < 20)) {
        cerr << "Warning: Performance bottleneck condition triggered - many feasible combinations" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code with the Original Program

Here is the fully integrated C++ program with the performance checkers added to detect potential bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long mod = 1000000007;
long long i, j;
long long temp;

void check_large_n_small_abc_invariant(long long n, long long a, long long b, long long c) {
    if (n > 3500 && (a < 10 || b < 10 || c < 10)) {
        cerr << "Warning: Performance bottleneck condition triggered - large n with small a, b, c" << endl;
        abort();
    }
}

void check_combinations_invariant(long long n, long long a, long long b, long long c) {
    if (n > 3500 && (a + b + c < 20)) {
        cerr << "Warning: Performance bottleneck condition triggered - many feasible combinations" << endl;
        abort();
    }
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    long long n, a, b, c;
    cin >> n >> a >> b >> c;

    // Insert performance checkers
    check_large_n_small_abc_invariant(n, a, b, c);
    check_combinations_invariant(n, a, b, c);

    long long max = 0;
    for (i = 0; i < n + 1; i++) {
        for (j = 0; j < n + 1; j++) {
            long long k;
            k = n - (a * i + b * j);
            k /= c;
            if (a * i + b * j + c * k == n && i + j + k > max && k >= 0) {
                max = i + j + k;
            }
        }
    }
    cout << max;
    return 0;
}
```

### Explanation of Integration

- **Checker Placement**: The performance checkers are placed immediately after reading the input values. This ensures the conditions are evaluated before entering the potentially expensive loops.
- **Abort Mechanism**: Both checkers will output a warning and terminate the program if the conditions suggesting a potential bottleneck are met. This makes it easier to identify problematic input conditions during testing or fuzzing.
- **Thresholds**: The values such as `n > 3500` and piece lengths `a, b, c` less than 10 are chosen based on the invariant analysis to represent scenarios where performance degradation might occur due to large iteration counts. These thresholds were chosen considering the constraints (1 ≤ n, a, b, c ≤ 4000).

