system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Polycarpus has a ribbon, its length is n. He wants to cut the ribbon in a way that fulfils the following two conditions: 

  * After the cutting each ribbon piece should have length a, b or c. 
  * After the cutting the number of ribbon pieces should be maximum. 



Help Polycarpus and find the number of ribbon pieces after the required cutting.

Input

The first line contains four space-separated integers n, a, b and c (1 ≤ n, a, b, c ≤ 4000) — the length of the original ribbon and the acceptable lengths of the ribbon pieces after the cutting, correspondingly. The numbers a, b and c can coincide.

Output

Print a single number — the maximum possible number of ribbon pieces. It is guaranteed that at least one correct ribbon cutting exists.

Examples

Input

5 5 3 2


Output

2


Input

7 5 5 2


Output

2

Note

In the first example Polycarpus can cut the ribbon in such way: the first piece has length 2, the second piece has length 3.

In the second example Polycarpus can cut the ribbon in such way: the first piece has length 5, the second piece has length 2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MAX = 1e5;
const int MAX2 = 1e9;
const long long MAX3 = 1e12;
int gcd(int a, int b) {
  if (b == 0) {
    return a;
  }
  int a1 = a % b;
  return gcd(b, a1);
}
void swap1(char& x, char& y) {
  char t = x;
  x = y;
  y = t;
}
int main() {
  int n, a, b, c, sum = 0;
  cin >> n >> a >> b >> c;
  for (int x = 0; x <= n; x++) {
    for (int y = 0; y <= n; y++) {
      int s = a * x + b * y;
      int z = abs(n - s) / c;
      if (sum < x + y + z && s + c * z == n) {
        sum = x + y + z;
      }
    }
  }
  cout << sum;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4000 5 3 2


(G.2) Fast Input

3 5 3 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MAX = 1e5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int MAX2 = 1e9; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long MAX3 = 1e12; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int gcd(int a, int b) { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  if (b == 0) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    return a; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  int a1 = a % b; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  return gcd(b, a1); /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
void swap1(char& x, char& y) { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  char t = x; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  x = y; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  y = t; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  int n, a, b, c, sum = 0; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> a >> b >> c; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (int x = 0; x <= n; x++) { /* line 21 slow_hit_count: 4002, fast_hit_count: 5 */
    for (int y = 0; y <= n; y++) { /* line 22 slow_hit_count: 16012002, fast_hit_count: 20 */
      int s = a * x + b * y; /* line 23 slow_hit_count: 16008001, fast_hit_count: 16 */
      int z = abs(n - s) / c; /* line 24 slow_hit_count: 16008001, fast_hit_count: 16 */
      if (sum < x + y + z && s + c * z == n) { /* line 25 slow_hit_count: 16008001, fast_hit_count: 16 */
        sum = x + y + z; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
      } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  cout << sum; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the given C program for the problem of cutting a ribbon into pieces of lengths \(a\), \(b\), or \(c\) and maximizing the number of pieces, I will follow the steps outlined in your request. The analysis will be based on the provided hit count information for both the slow and fast inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**:  
   - The primary structure of the code is a double loop iterating over possible counts of \(x\) and \(y\) ribbon pieces of lengths \(a\) and \(b\), respectively.
   - The outer loop (line 21) runs from 0 to \( n \), hitting 4002 times for the slow input compared to only 5 times for the fast input.
   - The inner loop (line 22) runs from 0 to \( n \) as well, combining for 16,012,002 iterations in the slow input vs. 20 in the fast input.

2. **Pinpoint Lines with Significant Hits**:  
   - Line 22, where the inner loop begins, is hit 16,012,002 times for the slow input, which is a massive increase over the fast input.
   - Lines 23 to 25 compute the current solution and check if it is optimal, with each being executed 16,008,001 times during the slow run.

3. **Interaction with Data Structures and Loops**:  
   - The code calculates potential solutions for all combinations of \(x\) and \(y\), and then computes \(z\) based on the remaining ribbon length. The constraints \(x \leq n\) and \(y \leq n\), combined with checks for valid configurations, result in a large number of iterations through both loops.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Slow Path Conditions in Natural Language**:  
   - **Invariant 1**: The program's performance is likely to degrade when the total search space for combinations of ribbon pieces becomes large. This occurs when the remaining ribbon length, after selecting pieces of lengths \(a\) and \(b\), can be divided by \(c\) in many ways.
   
     Natural language description: "When the lengths \(a\), \(b\), and \(c\) allow for many different valid combinations of ribbon cuts that sum up to \(n\), the program may perform inefficently due to the exhaustive search space."

   - **Invariant 2**: The nested loops iterate over every possible count of pieces \(x\) and \(y\), which becomes computationally expensive when \(n\) is large.

     Natural language description: "For large values of \(n\) close to the constraints' maximum, the double loop structure leads to an exponential growth in iterations, significantly slowing down performance."

2. **Avoid Specific Numeric Values**:  
   - These conditions abstractly describe scenarios that cause slowdowns without relying on specific input values. Instead, they focus on the combinatorial explosion of loop iterations and valid configurations.

3. **Thresholds Aligning with Constraints**:  
   - Since the problem constraints stipulate \(n, a, b, c \leq 4000\), the invariants consider large \(n\) values close to these limits as potential triggers for performance issues, particularly when \(a\), \(b\), and \(c\) allow multiple valid compositions.

### Conclusion

The analysis reveals that the inefficiency arises mainly from the nested loops over \(x\) and \(y\) which can execute billions of iterations for large values of \(n\), especially when \(a\), \(b\), and \(c\) allow many combinations. The program efficiently handles smaller \(n\) or less flexible piece lengths. These invariants help identify why certain inputs lead to longer execution times, guiding potential optimizations or alternative approaches for future scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Polycarpus has a ribbon, its length is n. He wants to cut the ribbon in a way that fulfils the following two conditions: 

  * After the cutting each ribbon piece should have length a, b or c. 
  * After the cutting the number of ribbon pieces should be maximum. 



Help Polycarpus and find the number of ribbon pieces after the required cutting.

Input

The first line contains four space-separated integers n, a, b and c (1 ≤ n, a, b, c ≤ 4000) — the length of the original ribbon and the acceptable lengths of the ribbon pieces after the cutting, correspondingly. The numbers a, b and c can coincide.

Output

Print a single number — the maximum possible number of ribbon pieces. It is guaranteed that at least one correct ribbon cutting exists.

Examples

Input

5 5 3 2


Output

2


Input

7 5 5 2


Output

2

Note

In the first example Polycarpus can cut the ribbon in such way: the first piece has length 2, the second piece has length 3.

In the second example Polycarpus can cut the ribbon in such way: the first piece has length 5, the second piece has length 2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Performance-Characterizing Invariants as C++ Checks

Let's implement the performance-characterizing invariants derived in the previous analysis in C++.

#### Invariant 1: Large Search Space Combinations
Natural language description: When the lengths \(a\), \(b\), and \(c\) allow for many different valid combinations of ribbon cuts that sum up to \(n\), the program may become inefficient due to the exhaustive search space.

**Checker Code**:
```cpp
void check_large_search_space(int n, int a, int b, int c) {
    if (n > 1000 && (n % gcd(gcd(a, b), c) == 0)) { // Assumes gcd function is available
        cerr << "Warning: Performance bottleneck condition triggered due to large search space combinations!" << endl;
        abort();
    }
}

// Helper function to calculate gcd
int gcd(int a, int b) {
    if (b == 0) return a;
    return gcd(b, a % b);
}
```

#### Invariant 2: Exponential Growth in Iterations
Natural language description: For large values of \(n\) close to the constraints' maximum, the double loop structure leads to an exponential growth in iterations, significantly slowing down performance.

**Checker Code**:
```cpp
void check_exponential_iterations(int n, int a, int b, int c) {
    if (n > 3500) { // Choosing 3500 as a high threshold close to the maximum constraints
        cerr << "Warning: Performance bottleneck condition triggered due to exponential growth in iterations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checks into the given C++ solution, ensuring they are placed before the computationally expensive loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Helper function to calculate gcd
int gcd(int a, int b) {
    if (b == 0) return a;
    return gcd(b, a % b);
}

// Checker for large search space combinations
void check_large_search_space(int n, int a, int b, int c) {
    if (n > 1000 && (n % gcd(gcd(a, b), c) == 0)) {
        cerr << "Warning: Performance bottleneck condition triggered due to large search space combinations!" << endl;
        abort();
    }
}

// Checker for exponential growth in iterations
void check_exponential_iterations(int n, int a, int b, int c) {
    if (n > 3500) {
        cerr << "Warning: Performance bottleneck condition triggered due to exponential growth in iterations!" << endl;
        abort();
    }
}

int main() {
    int n, a, b, c, sum = 0;
    cin >> n >> a >> b >> c;

    // Insert checks before starting the loops
    check_large_search_space(n, a, b, c);
    check_exponential_iterations(n, a, b, c);

    for (int x = 0; x <= n; x++) {
        for (int y = 0; y <= n; y++) {
            int s = a * x + b * y;
            int z = abs(n - s) / c;
            if (sum < x + y + z && s + c * z == n) {
                sum = x + y + z;
            }
        }
    }

    cout << sum;
}
```

### Explanation

- **Placement of Checks**: The checks are placed after reading the inputs and before the nested loops to prevent performance degradation within the loops.
- **Checker Logic**: The checkers are based on high-level conditions that reflect the identified performance bottlenecks, such as the potential for a large search space and the computational burden of exponential iterations.
- **Abort on Condition**: If a condition indicating a performance bottleneck is met, the program outputs a warning and aborts, which is useful for fuzz testing to identify slow scenarios.

