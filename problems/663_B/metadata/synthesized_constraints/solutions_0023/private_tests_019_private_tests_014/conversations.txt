system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

International Abbreviation Olympiad takes place annually starting from 1989. Each year the competition receives an abbreviation of form IAO'y, where y stands for some number of consequent last digits of the current year. Organizers always pick an abbreviation with non-empty string y that has never been used before. Among all such valid abbreviations they choose the shortest one and announce it to be the abbreviation of this year's competition.

For example, the first three Olympiads (years 1989, 1990 and 1991, respectively) received the abbreviations IAO'9, IAO'0 and IAO'1, while the competition in 2015 received an abbreviation IAO'15, as IAO'5 has been already used in 1995.

You are given a list of abbreviations. For each of them determine the year it stands for.

Input

The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of abbreviations to process. 

Then n lines follow, each containing a single abbreviation. It's guaranteed that each abbreviation contains at most nine digits.

Output

For each abbreviation given in the input, find the year of the corresponding Olympiad.

Examples

Input

5
IAO'15
IAO'2015
IAO'1
IAO'9
IAO'0


Output

2015
12015
1991
1989
1990


Input

4
IAO'9
IAO'99
IAO'999
IAO'9999


Output

1989
1999
2999
9999

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 510000;
long long a[N], ten[N], ans[N];
struct node {
  long long x, y;
} b[N];
bool cmp(const node &a, const node &b) {
  return a.x < b.x || a.x == b.x && a.y < b.y;
}
char s[N];
int main() {
  int T;
  scanf("%d", &T);
  while (T--) {
    scanf("%s", s + 1);
    long long n = 0;
    int len = 0;
    for (int i = 1; i <= strlen(s + 1); i++)
      if (s[i] >= '0' && s[i] <= '9') n = n * 10 + s[i] - '0', len++;
    int top = 0;
    for (int i = 1; i <= len; i++) {
      a[++top] = n % 10;
      n /= 10;
    }
    ten[0] = 1;
    for (int i = 1; i <= 20; i++) ten[i] = ten[i - 1] * 10;
    for (int i = 1; i <= top; i++) a[i] = a[i - 1] + ten[i - 1] * a[i];
    int tp = 0;
    for (int i = 1; i <= top; i++) {
      int up = 0;
      if (i == 1)
        up = 3000;
      else if (i == 2)
        up = 700;
      else
        up = 300;
      for (int j = 0; j <= up; j++) {
        if (a[i] + j * ten[i] < 1989) continue;
        b[++tp].x = a[i] + j * ten[i];
        b[tp].y = i;
      }
    }
    sort(b + 1, b + 1 + tp, cmp);
    for (int i = 1; i <= top; i++) ans[i] = 0;
    for (int l = 1; l <= tp;) {
      int r = l;
      while (r < tp && b[r + 1].x == b[l].x) r++;
      for (int i = l; i <= r; i++)
        if (ans[b[i].y] == 0) {
          ans[b[i].y] = b[i].x;
          break;
        }
      l = r + 1;
    }
    cout << ans[top];
    printf("\n");
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1
IAO'123456789


(G.2) Fast Input

1
IAO'089


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 510000; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long a[N], ten[N], ans[N]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
struct node { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  long long x, y; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} b[N]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp(const node &a, const node &b) { /* line 8 slow_hit_count: 96850, fast_hit_count: 58968 */
  return a.x < b.x || a.x == b.x && a.y < b.y; /* line 9 slow_hit_count: 96850, fast_hit_count: 58968 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
char s[N]; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  int T; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &T); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  while (T--) { /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
    scanf("%s", s + 1); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
    long long n = 0; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
    int len = 0; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i <= strlen(s + 1); i++) /* line 19 slow_hit_count: 14, fast_hit_count: 8 */
      if (s[i] >= '0' && s[i] <= '9') n = n * 10 + s[i] - '0', len++; /* line 20 slow_hit_count: 13, fast_hit_count: 7 */
    int top = 0; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i <= len; i++) { /* line 22 slow_hit_count: 10, fast_hit_count: 4 */
      a[++top] = n % 10; /* line 23 slow_hit_count: 9, fast_hit_count: 3 */
      n /= 10; /* line 24 slow_hit_count: 9, fast_hit_count: 3 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    ten[0] = 1; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i <= 20; i++) ten[i] = ten[i - 1] * 10; /* line 27 slow_hit_count: 21, fast_hit_count: 21 */
    for (int i = 1; i <= top; i++) a[i] = a[i - 1] + ten[i - 1] * a[i]; /* line 28 slow_hit_count: 10, fast_hit_count: 4 */
    int tp = 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i <= top; i++) { /* line 30 slow_hit_count: 10, fast_hit_count: 4 */
      int up = 0; /* line 31 slow_hit_count: 9, fast_hit_count: 3 */
      if (i == 1) /* line 32 slow_hit_count: 9, fast_hit_count: 3 */
        up = 3000; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
      else if (i == 2) /* line 34 slow_hit_count: 8, fast_hit_count: 2 */
        up = 700; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
      else /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
        up = 300; /* line 37 slow_hit_count: 7, fast_hit_count: 1 */
      for (int j = 0; j <= up; j++) { /* line 38 slow_hit_count: 5818, fast_hit_count: 4006 */
        if (a[i] + j * ten[i] < 1989) continue; /* line 39 slow_hit_count: 5809, fast_hit_count: 4003 */
        b[++tp].x = a[i] + j * ten[i]; /* line 40 slow_hit_count: 5590, fast_hit_count: 3784 */
        b[tp].y = i; /* line 41 slow_hit_count: 5590, fast_hit_count: 3784 */
      } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    sort(b + 1, b + 1 + tp, cmp); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i <= top; i++) ans[i] = 0; /* line 45 slow_hit_count: 10, fast_hit_count: 4 */
    for (int l = 1; l <= tp;) { /* line 46 slow_hit_count: 5062, fast_hit_count: 3435 */
      int r = l; /* line 47 slow_hit_count: 5061, fast_hit_count: 3434 */
      while (r < tp && b[r + 1].x == b[l].x) r++; /* line 48 slow_hit_count: 5590, fast_hit_count: 3784 */
      for (int i = l; i <= r; i++) /* line 49 slow_hit_count: 10641, fast_hit_count: 7213 */
        if (ans[b[i].y] == 0) { /* line 50 slow_hit_count: 5589, fast_hit_count: 3782 */
          ans[b[i].y] = b[i].x; /* line 51 slow_hit_count: 9, fast_hit_count: 3 */
          break; /* line 52 slow_hit_count: 9, fast_hit_count: 3 */
        } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
      l = r + 1; /* line 54 slow_hit_count: 5061, fast_hit_count: 3434 */
    } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans[top]; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
    printf("\n"); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 59 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis of Hit Counts:

1. **Lines with High Hit Counts:**
   - Lines 38-41 (nested loop over `j` with `up` limits): The loop is iterating with varying `up` values, up to 3000, 700, or 300. This loop is hit significantly more in the slow input (`5818` times) than the fast input (`4006` times).
   - Lines 46-54 (traversing `b` and setting `ans`): The outer loop structure that cycles through potential results with `tp` range also shows higher activity in the slow input scenario.

2. **Sorting (Line 44):**
   - The sorting operation using `cmp` is invoked with a hit count of `96850` for the slow input compared to `58968` for the fast input, indicating a substantial time spent sorting, which scales with `tp`.

3. **Recursive and Nested Operations:**
   - The inner workings of the loops, especially around condition checks and operations on each potential year candidate, suggest inefficiencies, particularly when handling larger numbers due to the large number of permutations considered.

### Interaction with Data Structures:

- **Usage of Arrays:** The arrays `a`, `b`, and `ans` are central to the operation, with `b` being populated with potential years and sorted, while `ans` stores the final result for each abbreviation.
- **Loop Dependencies:** The nested loops rely on the values of `ten`, `a`, and `b`, where changes in these values (arising from different digits in the abbreviation) impact the work done within loops, amplified by `up` limits.

## Phase 2: Derive Performance-Characterizing Invariants

### Performance Invariants:

1. **Nested Loop Permutations:**
   - **Natural Language Description:** "When the abbreviation involves a lengthy sequence of digits, particularly exceeding 7 digits, the numerous permutations considered by the loops lead to performance degradation, especially if these loops involve large `up` limits."
   - **Reasoning:** The loops perform exponentially more calculations with longer digit sequences, worsened by the fact large `up` limits lead to more iterations.

2. **Sorting Overhead:**
   - **Natural Language Description:** "As the number of potential year candidates (`tp`) grows, which is directly influenced by long numeric sequences, the sorting step becomes a significant bottleneck due to increased comparisons."
   - **Reasoning:** `cmp` function hit count highlights sorting as a major processing step, growing with larger input-derived permutations.

3. **Repeated Conditionals in Large Loops:**
   - **Natural Language Description:** "When the sequence of digits in the abbreviation leads to a large pool of candidate years, the repeated conditional checks in loops (like verifying against 1989) increase execution time significantly."
   - **Reasoning:** Loops checking conditions for many candidates reveal the inefficiency, especially as the candidate pool size increases with the number of digits.

### Conclusion:

These performance characterizations highlight how the structure and size of the abbreviation string, particularly when composed of numerous digits, lead to increased computational effort across sorting and nested loops. This analysis provides insights into potential slowdown triggers for future input scenarios, aligning with the constraint that each abbreviation contains at most nine digits.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
International Abbreviation Olympiad takes place annually starting from 1989. Each year the competition receives an abbreviation of form IAO'y, where y stands for some number of consequent last digits of the current year. Organizers always pick an abbreviation with non-empty string y that has never been used before. Among all such valid abbreviations they choose the shortest one and announce it to be the abbreviation of this year's competition.

For example, the first three Olympiads (years 1989, 1990 and 1991, respectively) received the abbreviations IAO'9, IAO'0 and IAO'1, while the competition in 2015 received an abbreviation IAO'15, as IAO'5 has been already used in 1995.

You are given a list of abbreviations. For each of them determine the year it stands for.

Input

The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of abbreviations to process. 

Then n lines follow, each containing a single abbreviation. It's guaranteed that each abbreviation contains at most nine digits.

Output

For each abbreviation given in the input, find the year of the corresponding Olympiad.

Examples

Input

5
IAO'15
IAO'2015
IAO'1
IAO'9
IAO'0


Output

2015
12015
1991
1989
1990


Input

4
IAO'9
IAO'99
IAO'999
IAO'9999


Output

1989
1999
2999
9999

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Invariants in C++

### Translation of Natural Language Invariants to C++ Checkers

1. **Nested Loop Permutations Invariant:**

   - **Checker Code:**
   ```cpp
   void check_nested_loop_invariant(int top, int up) {
       if (top > 7 || up > 3000) {
           cerr << "Warning: Performance bottleneck condition triggered in nested loops!" << endl;
           abort();
       }
   }
   ```

2. **Sorting Overhead Invariant:**

   - **Checker Code:**
   ```cpp
   void check_sort_invariant(int tp) {
       if (tp > 10000) {
           cerr << "Warning: Performance bottleneck condition triggered due to large sorting operation!" << endl;
           abort();
       }
   }
   ```

3. **Repeated Conditionals in Large Loops Invariant:**

   - **Checker Code:**
   ```cpp
   void check_conditional_invariant(int tp, int up) {
       if ((tp > 5000) && (up > 300)) {
           cerr << "Warning: Performance bottleneck condition triggered in repeated conditionals!" << endl;
           abort();
       }
   }
   ```

## Phase 4: Integrate the Checkers into the Original Program

### Instrumented C++ Code

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 510000;
long long a[N], ten[N], ans[N];
struct node {
  long long x, y;
} b[N];
bool cmp(const node &a, const node &b) {
  return a.x < b.x || a.x == b.x && a.y < b.y;
}
char s[N];

// Checker functions
void check_nested_loop_invariant(int top, int up) {
    if (top > 7 || up > 3000) {
        cerr << "Warning: Performance bottleneck condition triggered in nested loops!" << endl;
        abort();
    }
}

void check_sort_invariant(int tp) {
    if (tp > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large sorting operation!" << endl;
        abort();
    }
}

void check_conditional_invariant(int tp, int up) {
    if ((tp > 5000) && (up > 300)) {
        cerr << "Warning: Performance bottleneck condition triggered in repeated conditionals!" << endl;
        abort();
    }
}

int main() {
  int T;
  scanf("%d", &T);
  while (T--) {
    scanf("%s", s + 1);
    long long n = 0;
    int len = 0;
    for (int i = 1; i <= strlen(s + 1); i++)
      if (s[i] >= '0' && s[i] <= '9') n = n * 10 + s[i] - '0', len++;
    int top = 0;
    for (int i = 1; i <= len; i++) {
      a[++top] = n % 10;
      n /= 10;
    }
    ten[0] = 1;
    for (int i = 1; i <= 20; i++) ten[i] = ten[i - 1] * 10;
    for (int i = 1; i <= top; i++) a[i] = a[i - 1] + ten[i - 1] * a[i];
    int tp = 0;
    for (int i = 1; i <= top; i++) {
      int up = 0;
      if (i == 1)
        up = 3000;
      else if (i == 2)
        up = 700;
      else
        up = 300;

      // Place check for nested loop permutations
      check_nested_loop_invariant(top, up);

      for (int j = 0; j <= up; j++) {
        if (a[i] + j * ten[i] < 1989) continue;
        b[++tp].x = a[i] + j * ten[i];
        b[tp].y = i;
      }
    }

    // Place check for sorting overhead before sorting
    check_sort_invariant(tp);

    sort(b + 1, b + 1 + tp, cmp);

    for (int i = 1; i <= top; i++) ans[i] = 0;
    for (int l = 1; l <= tp;) {
      int r = l;
      while (r < tp && b[r + 1].x == b[l].x) r++;

      // Place check for repeated conditionals
      check_conditional_invariant(tp, r - l);

      for (int i = l; i <= r; i++)
        if (ans[b[i].y] == 0) {
          ans[b[i].y] = b[i].x;
          break;
        }
      l = r + 1;
    }
    cout << ans[top];
    printf("\n");
  }
}
```

### Integration Explanation

- **Nested Loop Permutations Check:** Inserted before entering the innermost loop over `j` to detect large values of `top` and `up`, which indicate many permutations being calculated.
- **Sorting Overhead Check:** Placed right before invoking the `sort` function to ensure that the number of elements (`tp`) isn't excessive.
- **Repeated Conditionals Check:** Added before entering the loop where multiple conditionals are evaluated, ensuring that the loop isn't iterating over too many elements unnecessarily. 

These checks should help in identifying performance bottlenecks during execution without introducing additional overhead into tight loops.

