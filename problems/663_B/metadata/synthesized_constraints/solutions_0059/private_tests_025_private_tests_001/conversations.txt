system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

International Abbreviation Olympiad takes place annually starting from 1989. Each year the competition receives an abbreviation of form IAO'y, where y stands for some number of consequent last digits of the current year. Organizers always pick an abbreviation with non-empty string y that has never been used before. Among all such valid abbreviations they choose the shortest one and announce it to be the abbreviation of this year's competition.

For example, the first three Olympiads (years 1989, 1990 and 1991, respectively) received the abbreviations IAO'9, IAO'0 and IAO'1, while the competition in 2015 received an abbreviation IAO'15, as IAO'5 has been already used in 1995.

You are given a list of abbreviations. For each of them determine the year it stands for.

Input

The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of abbreviations to process. 

Then n lines follow, each containing a single abbreviation. It's guaranteed that each abbreviation contains at most nine digits.

Output

For each abbreviation given in the input, find the year of the corresponding Olympiad.

Examples

Input

5
IAO'15
IAO'2015
IAO'1
IAO'9
IAO'0


Output

2015
12015
1991
1989
1990


Input

4
IAO'9
IAO'99
IAO'999
IAO'9999


Output

1989
1999
2999
9999

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long parse_int(const string& s) {
  long long res = 0;
  for (char c : s) res = 10 * res + (c - '0');
  return res;
}
string stringify(long long i) {
  char buf[32], *p = &buf[32];
  *--p = '\0';
  while (i > 0) *--p = '0' + i % 10, i /= 10;
  return string(p);
}
long long next_candidate(const string& suffix, int& state) {
  if (state == 0) {
    switch (suffix.size()) {
      case 0:
        state = 1989;
        break;
      case 1:
        state = 198;
        break;
      case 2:
        state = 19;
        break;
      default:
        state = 1;
        break;
    }
    if (suffix[0] != '0') {
      long long x = parse_int(suffix);
      if (x >= 1989) return x;
    }
  }
  for (;;) {
    long long x = parse_int(stringify(state) + suffix);
    ++state;
    if (x >= 1989) return x;
  }
}
string abbreviation(long long i) {
  string s = stringify(i);
  for (int n = 1; n <= s.size(); ++n) {
    string t = s.substr(s.size() - n);
    int state = 0;
    for (;;) {
      long long j = next_candidate(t, state);
      if (i == j) return t;
      if (abbreviation(j) == t) break;
    }
  }
  return "";
}
long long solve(string s) {
  int state = 0;
  for (;;) {
    long long i = next_candidate(s, state);
    if (abbreviation(i) == s) return i;
  }
  return -1;
}
int main() {
  int cases = 0;
  cin >> cases;
  for (int c = 0; c < cases; ++c) {
    string s;
    cin >> s;
    cout << solve(s.substr(4)) << '\n';
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

9
IAO'0
IAO'00
IAO'000
IAO'0000
IAO'00000
IAO'000000
IAO'0000000
IAO'00000000
IAO'000000000


(G.2) Fast Input

2
IAO'0
IAO'00


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long parse_int(const string& s) { /* line 3 slow_hit_count: 2814, fast_hit_count: 12 */
  long long res = 0; /* line 4 slow_hit_count: 2814, fast_hit_count: 12 */
  for (char c : s) res = 10 * res + (c - '0'); /* line 5 slow_hit_count: 14310, fast_hit_count: 60 */
  return res; /* line 6 slow_hit_count: 2814, fast_hit_count: 12 */
} /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
string stringify(long long i) { /* line 8 slow_hit_count: 3581, fast_hit_count: 15 */
  char buf[32], *p = &buf[32]; /* line 9 slow_hit_count: 3581, fast_hit_count: 15 */
  *--p = '\0'; /* line 10 slow_hit_count: 3581, fast_hit_count: 15 */
  while (i > 0) *--p = '0' + i % 10, i /= 10; /* line 11 slow_hit_count: 13423, fast_hit_count: 59 */
  return string(p); /* line 12 slow_hit_count: 3581, fast_hit_count: 15 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
long long next_candidate(const string& suffix, int& state) { /* line 14 slow_hit_count: 1534, fast_hit_count: 6 */
  if (state == 0) { /* line 15 slow_hit_count: 1534, fast_hit_count: 6 */
    switch (suffix.size()) { /* line 16 slow_hit_count: 1406, fast_hit_count: 6 */
      case 0: /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
        state = 1989; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
      case 1: /* line 20 slow_hit_count: 768, fast_hit_count: 4 */
        state = 198; /* line 21 slow_hit_count: 768, fast_hit_count: 4 */
        break; /* line 22 slow_hit_count: 768, fast_hit_count: 4 */
      case 2: /* line 23 slow_hit_count: 384, fast_hit_count: 2 */
        state = 19; /* line 24 slow_hit_count: 384, fast_hit_count: 2 */
        break; /* line 25 slow_hit_count: 384, fast_hit_count: 2 */
      default: /* line 26 slow_hit_count: 254, fast_hit_count: 0 */
        state = 1; /* line 27 slow_hit_count: 254, fast_hit_count: 0 */
        break; /* line 28 slow_hit_count: 254, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    if (suffix[0] != '0') { /* line 30 slow_hit_count: 1406, fast_hit_count: 6 */
      long long x = parse_int(suffix); /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      if (x >= 1989) return x; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  for (;;) { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    long long x = parse_int(stringify(state) + suffix); /* line 36 slow_hit_count: 2814, fast_hit_count: 12 */
    ++state; /* line 37 slow_hit_count: 2814, fast_hit_count: 12 */
    if (x >= 1989) return x; /* line 38 slow_hit_count: 2814, fast_hit_count: 12 */
  } /* line 39 slow_hit_count: 1280, fast_hit_count: 6 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
string abbreviation(long long i) { /* line 41 slow_hit_count: 767, fast_hit_count: 3 */
  string s = stringify(i); /* line 42 slow_hit_count: 1534, fast_hit_count: 6 */
  for (int n = 1; n <= s.size(); ++n) { /* line 43 slow_hit_count: 1397, fast_hit_count: 4 */
    string t = s.substr(s.size() - n); /* line 44 slow_hit_count: 1397, fast_hit_count: 4 */
    int state = 0; /* line 45 slow_hit_count: 1397, fast_hit_count: 4 */
    for (;;) { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
      long long j = next_candidate(t, state); /* line 47 slow_hit_count: 1524, fast_hit_count: 4 */
      if (i == j) return t; /* line 48 slow_hit_count: 1524, fast_hit_count: 4 */
      if (abbreviation(j) == t) break; /* line 49 slow_hit_count: 757, fast_hit_count: 1 */
    } /* line 50 slow_hit_count: 127, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  return ""; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
long long solve(string s) { /* line 54 slow_hit_count: 9, fast_hit_count: 2 */
  int state = 0; /* line 55 slow_hit_count: 9, fast_hit_count: 2 */
  for (;;) { /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    long long i = next_candidate(s, state); /* line 57 slow_hit_count: 10, fast_hit_count: 2 */
    if (abbreviation(i) == s) return i; /* line 58 slow_hit_count: 10, fast_hit_count: 2 */
  } /* line 59 slow_hit_count: 1, fast_hit_count: 0 */
  return -1; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  int cases = 0; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> cases; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  for (int c = 0; c < cases; ++c) { /* line 65 slow_hit_count: 10, fast_hit_count: 3 */
    string s; /* line 66 slow_hit_count: 9, fast_hit_count: 2 */
    cin >> s; /* line 67 slow_hit_count: 9, fast_hit_count: 2 */
    cout << solve(s.substr(4)) << '\n'; /* line 68 slow_hit_count: 9, fast_hit_count: 2 */
  } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 70 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Given the line-level hit counts, we can observe the following:

1. **High Hit Count in `parse_int` function**:
   - Line 5: `for (char c : s) res = 10 * res + (c - '0');` has a high hit count, indicating frequent parsing of strings to integers. This suggests repeated conversion operations.

2. **Frequent Calls to `stringify` and `next_candidate`**:
   - Line 11: `while (i > 0) *--p = '0' + i % 10, i /= 10;` inside `stringify` has a high hit count, indicating frequent conversion of integers to strings.
   - Line 36: `long long x = parse_int(stringify(state) + suffix);` in `next_candidate` has a high hit count, indicating frequent candidate generation and checking.

3. **Nested Loops and Recursion**:
   - The function `abbreviation` calls `next_candidate` in a loop (lines 43-49) and recursively calls itself (line 49). The recursion combined with nested loops suggests significant branching or repeated work.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Frequent Parsing and String Manipulation:**
   - **Invariant:** "If an abbreviation has many trailing zeroes (e.g., '000000'), the code frequently parses and manipulates strings representing large numbers, leading to increased overhead."
   - **Reasoning:** The repeated conversion between strings and integers suggests inefficiency, especially when the suffix contains leading zeros, causing more iterations and checks.

2. **Deep Recursion and Nested Loops:**
   - **Invariant:** "When the abbreviation's suffix is long or contains many zeros, the recursive exploration of potential candidates increases, leading to performance degradation."
   - **Reasoning:** The combination of recursion and string length leads to more iterations, especially when dealing with strings like '000000', which results in deeper recursive calls and extended loop iterations.

3. **Inefficient Candidate Generation:**
   - **Invariant:** "If the suffix does not directly map to a known abbreviation, the program explores numerous candidate states, increasing computational time."
   - **Reasoning:** The function `next_candidate` is called repeatedly to generate and verify candidates, causing delays when the suffix leads to multiple possible candidate explorations.

These invariants capture the conditions that likely trigger slow execution paths, focusing on repeated string parsing, recursion depth, and inefficient candidate generation. They consider the input constraints and typical patterns that lead to performance issues.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
International Abbreviation Olympiad takes place annually starting from 1989. Each year the competition receives an abbreviation of form IAO'y, where y stands for some number of consequent last digits of the current year. Organizers always pick an abbreviation with non-empty string y that has never been used before. Among all such valid abbreviations they choose the shortest one and announce it to be the abbreviation of this year's competition.

For example, the first three Olympiads (years 1989, 1990 and 1991, respectively) received the abbreviations IAO'9, IAO'0 and IAO'1, while the competition in 2015 received an abbreviation IAO'15, as IAO'5 has been already used in 1995.

You are given a list of abbreviations. For each of them determine the year it stands for.

Input

The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of abbreviations to process. 

Then n lines follow, each containing a single abbreviation. It's guaranteed that each abbreviation contains at most nine digits.

Output

For each abbreviation given in the input, find the year of the corresponding Olympiad.

Examples

Input

5
IAO'15
IAO'2015
IAO'1
IAO'9
IAO'0


Output

2015
12015
1991
1989
1990


Input

4
IAO'9
IAO'99
IAO'999
IAO'9999


Output

1989
1999
2999
9999

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Based on the natural language invariants derived previously, we can implement the checks as follows:

1. **Frequent Parsing and String Manipulation Check:**

This check ensures that if the suffix has many zeroes, which would lead to repeated parsing and string manipulations, a warning is triggered.

```cpp
void check_frequent_parsing(const std::string& suffix) {
    int zero_count = 0;
    for (char c : suffix) {
        if (c == '0') zero_count++;
        else break;
    }
    if (zero_count > 5) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive zeroes in suffix" << endl;
        abort();
    }
}
```

2. **Deep Recursion and Nested Loops Check:**

This check is designed to trigger if the recursion depth or the iteration over string-generated candidates becomes excessive.

```cpp
void check_deep_recursion(int recursion_depth, int max_limit) {
    if (recursion_depth > max_limit) {
        cerr << "Warning: Performance bottleneck condition triggered - deep recursion" << endl;
        abort();
    }
}
```

3. **Inefficient Candidate Generation Check:**

This check is triggered if the suffix length leads to many candidate generations, indicating inefficiency.

```cpp
void check_candidate_generation(int candidate_count) {
    if (candidate_count > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive candidate generation" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original C++ Code

Now, let's integrate these checks into the original C++ program, ensuring they are placed at logical points without causing performance overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance invariants
void check_frequent_parsing(const std::string& suffix) {
    int zero_count = 0;
    for (char c : suffix) {
        if (c == '0') zero_count++;
        else break;
    }
    if (zero_count > 5) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive zeroes in suffix" << endl;
        abort();
    }
}

void check_deep_recursion(int recursion_depth, int max_limit) {
    if (recursion_depth > max_limit) {
        cerr << "Warning: Performance bottleneck condition triggered - deep recursion" << endl;
        abort();
    }
}

void check_candidate_generation(int candidate_count) {
    if (candidate_count > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive candidate generation" << endl;
        abort();
    }
}

long long parse_int(const string& s) {
    long long res = 0;
    for (char c : s) res = 10 * res + (c - '0');
    return res;
}

string stringify(long long i) {
    char buf[32], *p = &buf[32];
    *--p = '\0';
    while (i > 0) *--p = '0' + i % 10, i /= 10;
    return string(p);
}

long long next_candidate(const string& suffix, int& state) {
    static int candidate_count = 0; // Track candidate generations
    check_frequent_parsing(suffix); // Check for parsing bottlenecks

    if (state == 0) {
        switch (suffix.size()) {
            case 0:
                state = 1989;
                break;
            case 1:
                state = 198;
                break;
            case 2:
                state = 19;
                break;
            default:
                state = 1;
                break;
        }
        if (suffix[0] != '0') {
            long long x = parse_int(suffix);
            if (x >= 1989) return x;
        }
    }
    for (;;) {
        long long x = parse_int(stringify(state) + suffix);
        ++state;
        candidate_count++;
        check_candidate_generation(candidate_count); // Check for candidate generation bottlenecks
        if (x >= 1989) return x;
    }
}

string abbreviation(long long i, int depth = 0) {
    check_deep_recursion(depth, 100); // Check for recursion depth

    string s = stringify(i);
    for (int n = 1; n <= s.size(); ++n) {
        string t = s.substr(s.size() - n);
        int state = 0;
        for (;;) {
            long long j = next_candidate(t, state);
            if (i == j) return t;
            if (abbreviation(j, depth + 1) == t) break;
        }
    }
    return "";
}

long long solve(string s) {
    int state = 0;
    for (;;) {
        long long i = next_candidate(s, state);
        if (abbreviation(i) == s) return i;
    }
    return -1;
}

int main() {
    int cases = 0;
    cin >> cases;
    for (int c = 0; c < cases; ++c) {
        string s;
        cin >> s;
        cout << solve(s.substr(4)) << '\n';
    }
}
```

### Explanation

- **Check Placement**: The checks are placed where string parsing, candidate generation, and recursion depth occur, ensuring we capture the performance bottlenecks without introducing additional overhead in tight loops.
- **Invariant Checks**: These checks will help identify conditions leading to slow execution paths, facilitating debugging and performance optimization.

