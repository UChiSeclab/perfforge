system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

International Abbreviation Olympiad takes place annually starting from 1989. Each year the competition receives an abbreviation of form IAO'y, where y stands for some number of consequent last digits of the current year. Organizers always pick an abbreviation with non-empty string y that has never been used before. Among all such valid abbreviations they choose the shortest one and announce it to be the abbreviation of this year's competition.

For example, the first three Olympiads (years 1989, 1990 and 1991, respectively) received the abbreviations IAO'9, IAO'0 and IAO'1, while the competition in 2015 received an abbreviation IAO'15, as IAO'5 has been already used in 1995.

You are given a list of abbreviations. For each of them determine the year it stands for.

Input

The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of abbreviations to process. 

Then n lines follow, each containing a single abbreviation. It's guaranteed that each abbreviation contains at most nine digits.

Output

For each abbreviation given in the input, find the year of the corresponding Olympiad.

Examples

Input

5
IAO'15
IAO'2015
IAO'1
IAO'9
IAO'0


Output

2015
12015
1991
1989
1990


Input

4
IAO'9
IAO'99
IAO'999
IAO'9999


Output

1989
1999
2999
9999

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 26;
string s, target;
int vis[N][2][15], id = 1;
int f[15];
bool dp[N][2][15];
int get(char x, int ind, char y) {
  if (x == y) return ind + 1;
  if (ind) return get(x, f[ind - 1], target[f[ind - 1]]);
  return 0;
}
bool solve(int ind, bool l, int j) {
  if (ind == (int)s.size()) return (j + 1 == target.size()) && l;
  int &v = vis[ind][l][j];
  bool &ret = dp[ind][l][j];
  if (v == id) return ret;
  ret = 0;
  v = id;
  for (char i = '0'; i <= '9'; i++) {
    if (i < s[ind] && !l) continue;
    ret |= solve(ind + 1, l | (i > s[ind]), get(i, j, target[j]));
  }
  return ret;
}
void build(int ind, bool l, int j, string &t) {
  if (ind == s.size()) return;
  for (char i = '0'; i <= '9'; i++) {
    if (i < s[ind] && !l) continue;
    if (solve(ind + 1, l | (i > s[ind]), get(i, j, target[j]))) {
      t += i;
      build(ind + 1, l | (i > s[ind]), get(i, j, target[j]), t);
      break;
    }
  }
}
void build(string &t) {
  int j = 0;
  f[0] = 0;
  for (int i = 1; i < t.size(); ++i) {
    while (j > 0 && t[i] != t[j]) j = f[j - 1];
    if (t[i] == t[j]) ++j;
    f[i] = j;
  }
}
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  while (s.size() < 20) s += "0";
  s += "1988";
  string T = s;
  int n;
  cin >> n;
  while (n--) {
    string t;
    cin >> t;
    target = " ";
    s = T;
    int i = t.size() - 1;
    while (t[i] >= '0' && t[i] <= '9') {
      target = t[i] + target;
      build(target);
      i--;
      id++;
      solve(0, 0, 0);
      string f = "";
      build(0, 0, 0, f);
      s = f;
    }
    i = 0;
    while (i < s.size() && s[i] == '0') i++;
    cout << s.substr(i) << '\n';
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

9
IAO'0
IAO'00
IAO'000
IAO'0000
IAO'00000
IAO'000000
IAO'0000000
IAO'00000000
IAO'000000000


(G.2) Fast Input

2
IAO'0
IAO'00


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 26; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
string s, target; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int vis[N][2][15], id = 1; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int f[15]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
bool dp[N][2][15]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int get(char x, int ind, char y) { /* line 8 slow_hit_count: 169480, fast_hit_count: 4284 */
  if (x == y) return ind + 1; /* line 9 slow_hit_count: 169480, fast_hit_count: 4284 */
  if (ind) return get(x, f[ind - 1], target[f[ind - 1]]); /* line 10 slow_hit_count: 162098, fast_hit_count: 3937 */
  return 0; /* line 11 slow_hit_count: 48540, fast_hit_count: 2009 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
bool solve(int ind, bool l, int j) { /* line 13 slow_hit_count: 54887, fast_hit_count: 2287 */
  if (ind == (int)s.size()) return (j + 1 == target.size()) && l; /* line 14 slow_hit_count: 54887, fast_hit_count: 2287 */
  int &v = vis[ind][l][j]; /* line 15 slow_hit_count: 52364, fast_hit_count: 2200 */
  bool &ret = dp[ind][l][j]; /* line 16 slow_hit_count: 52364, fast_hit_count: 2200 */
  if (v == id) return ret; /* line 17 slow_hit_count: 52364, fast_hit_count: 2200 */
  ret = 0; /* line 18 slow_hit_count: 5415, fast_hit_count: 228 */
  v = id; /* line 19 slow_hit_count: 5415, fast_hit_count: 228 */
  for (char i = '0'; i <= '9'; i++) { /* line 20 slow_hit_count: 59565, fast_hit_count: 2508 */
    if (i < s[ind] && !l) continue; /* line 21 slow_hit_count: 54150, fast_hit_count: 2280 */
    ret |= solve(ind + 1, l | (i > s[ind]), get(i, j, target[j])); /* line 22 slow_hit_count: 53717, fast_hit_count: 2209 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 24 slow_hit_count: 5415, fast_hit_count: 228 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
void build(int ind, bool l, int j, string &t) { /* line 26 slow_hit_count: 1125, fast_hit_count: 75 */
  if (ind == s.size()) return; /* line 27 slow_hit_count: 1125, fast_hit_count: 75 */
  for (char i = '0'; i <= '9'; i++) { /* line 28 slow_hit_count: 1309, fast_hit_count: 112 */
    if (i < s[ind] && !l) continue; /* line 29 slow_hit_count: 1309, fast_hit_count: 112 */
    if (solve(ind + 1, l | (i > s[ind]), get(i, j, target[j]))) { /* line 30 slow_hit_count: 1125, fast_hit_count: 75 */
      t += i; /* line 31 slow_hit_count: 1080, fast_hit_count: 72 */
      build(ind + 1, l | (i > s[ind]), get(i, j, target[j]), t); /* line 32 slow_hit_count: 1080, fast_hit_count: 72 */
      break; /* line 33 slow_hit_count: 1080, fast_hit_count: 72 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
void build(string &t) { /* line 37 slow_hit_count: 45, fast_hit_count: 3 */
  int j = 0; /* line 38 slow_hit_count: 45, fast_hit_count: 3 */
  f[0] = 0; /* line 39 slow_hit_count: 45, fast_hit_count: 3 */
  for (int i = 1; i < t.size(); ++i) { /* line 40 slow_hit_count: 210, fast_hit_count: 7 */
    while (j > 0 && t[i] != t[j]) j = f[j - 1]; /* line 41 slow_hit_count: 285, fast_hit_count: 5 */
    if (t[i] == t[j]) ++j; /* line 42 slow_hit_count: 165, fast_hit_count: 4 */
    f[i] = j; /* line 43 slow_hit_count: 165, fast_hit_count: 4 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 45 slow_hit_count: 45, fast_hit_count: 3 */
int main() { /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  while (s.size() < 20) s += "0"; /* line 49 slow_hit_count: 21, fast_hit_count: 21 */
  s += "1988"; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  string T = s; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  while (n--) { /* line 54 slow_hit_count: 10, fast_hit_count: 3 */
    string t; /* line 55 slow_hit_count: 9, fast_hit_count: 2 */
    cin >> t; /* line 56 slow_hit_count: 9, fast_hit_count: 2 */
    target = " "; /* line 57 slow_hit_count: 9, fast_hit_count: 2 */
    s = T; /* line 58 slow_hit_count: 9, fast_hit_count: 2 */
    int i = t.size() - 1; /* line 59 slow_hit_count: 9, fast_hit_count: 2 */
    while (t[i] >= '0' && t[i] <= '9') { /* line 60 slow_hit_count: 54, fast_hit_count: 5 */
      target = t[i] + target; /* line 61 slow_hit_count: 45, fast_hit_count: 3 */
      build(target); /* line 62 slow_hit_count: 45, fast_hit_count: 3 */
      i--; /* line 63 slow_hit_count: 45, fast_hit_count: 3 */
      id++; /* line 64 slow_hit_count: 45, fast_hit_count: 3 */
      solve(0, 0, 0); /* line 65 slow_hit_count: 45, fast_hit_count: 3 */
      string f = ""; /* line 66 slow_hit_count: 90, fast_hit_count: 6 */
      build(0, 0, 0, f); /* line 67 slow_hit_count: 45, fast_hit_count: 3 */
      s = f; /* line 68 slow_hit_count: 45, fast_hit_count: 3 */
    } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    i = 0; /* line 70 slow_hit_count: 9, fast_hit_count: 2 */
    while (i < s.size() && s[i] == '0') i++; /* line 71 slow_hit_count: 168, fast_hit_count: 42 */
    cout << s.substr(i) << '\n'; /* line 72 slow_hit_count: 9, fast_hit_count: 2 */
  } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 75 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the provided C++ program, we need to compare the line-level hit counts from both the "slow" and "fast" inputs, and then derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Function `get` (lines 8-12):** This function has a high number of hits, especially line 10, which has 162,098 hits for the slow input compared to 3,937 for the fast input. This recursive call is a likely contributor to the slowdown.

2. **Function `solve` (lines 13-25):** Lines within this function, especially lines 20 and 22, show significant hit count discrepancies (59,565 vs 2,508 for line 20 and 53,717 vs 2,209 for line 22) between slow and fast inputs. This suggests that this function is being iteratively called many more times under the slow input.

3. **Loop Complexity:** The nested loops and recursive calls in `solve` and `get` indicate excessive computations, particularly when handling the characteristics of the input strings.

### Phase 2: Derive Performance-Characterizing Invariants in Natural Language

Based on the slow input analysis and hit count differences, here are the performance-characterizing invariants:

1. **Recursive Depth and Repeated Calls:**
   - Natural Language Description: "The program experiences a slowdown when the recursive function `get` is called excessively within nested loops. This happens when processing inputs with repetitive sequences of digits, causing deep recursive calls and backtracking."
   - This is evidenced by the high hit count on the recursive line in `get`.

2. **Complexity of `solve` Function:**
   - Natural Language Description: "If the input involves repetitive patterns that require extensive state exploration, the function `solve` enters a slow path, iteratively computing similar states multiple times."
   - The high hit counts for `solve` indicate repeated evaluations, especially for inputs with long sequences of zeros.

3. **Input Pattern Sensitivity:**
   - Natural Language Description: "Inputs that consist of long sequences of identical digits require processing of a large search space, leading to increased recursive call depth and prolonged execution time."
   - This is seen by the significant difference in hit counts on loops and recursive calls for slow inputs like `IAO'000000000`.

These invariants suggest that to avoid performance slowdowns, the program should handle repetitive patterns more efficiently, possibly through memoization or by limiting the depth of recursion and redundant computations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
International Abbreviation Olympiad takes place annually starting from 1989. Each year the competition receives an abbreviation of form IAO'y, where y stands for some number of consequent last digits of the current year. Organizers always pick an abbreviation with non-empty string y that has never been used before. Among all such valid abbreviations they choose the shortest one and announce it to be the abbreviation of this year's competition.

For example, the first three Olympiads (years 1989, 1990 and 1991, respectively) received the abbreviations IAO'9, IAO'0 and IAO'1, while the competition in 2015 received an abbreviation IAO'15, as IAO'5 has been already used in 1995.

You are given a list of abbreviations. For each of them determine the year it stands for.

Input

The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of abbreviations to process. 

Then n lines follow, each containing a single abbreviation. It's guaranteed that each abbreviation contains at most nine digits.

Output

For each abbreviation given in the input, find the year of the corresponding Olympiad.

Examples

Input

5
IAO'15
IAO'2015
IAO'1
IAO'9
IAO'0


Output

2015
12015
1991
1989
1990


Input

4
IAO'9
IAO'99
IAO'999
IAO'9999


Output

1989
1999
2999
9999

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement Natural Language Invariants in C++

Based on the performance-characterizing invariants derived previously, we can implement the corresponding checker code in C++ as follows:

1. **Recursive Depth and Repeated Calls**:
   - We will check for potential excessive recursion depth in the `get` function.

```cpp
void check_recursion_depth_invariant(int depth, int threshold) {
    if (depth > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - recursive depth too high!" << endl;
        abort();
    }
}
```

2. **Complexity of `solve` Function**:
   - We will check for repeated exploration of similar states in the `solve` function.

```cpp
void check_solve_invariant(int callCount, int threshold) {
    if (callCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive calls to solve function!" << endl;
        abort();
    }
}
```

3. **Input Pattern Sensitivity**:
   - Check for input patterns that lead to high branching factors.

```cpp
void check_input_pattern_invariant(const string& input) {
    int consecutiveZeros = 0;
    for (char c : input) {
        if (c == '0') {
            consecutiveZeros++;
        } else {
            consecutiveZeros = 0;
        }
        if (consecutiveZeros > 5) {
            cerr << "Warning: Performance bottleneck condition triggered - excessive consecutive zeros in input!" << endl;
            abort();
        }
    }
}
```

## Phase 4: Integrate Checkers into the C++ Program

Now, we integrate these checkers into the existing C++ solution at appropriate points without adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 26;
string s, target;
int vis[N][2][15], id = 1;
int f[15];
bool dp[N][2][15];

// Checker functions
void check_recursion_depth_invariant(int depth, int threshold) {
    if (depth > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - recursive depth too high!" << endl;
        abort();
    }
}

void check_solve_invariant(int callCount, int threshold) {
    if (callCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive calls to solve function!" << endl;
        abort();
    }
}

void check_input_pattern_invariant(const string& input) {
    int consecutiveZeros = 0;
    for (char c : input) {
        if (c == '0') {
            consecutiveZeros++;
        } else {
            consecutiveZeros = 0;
        }
        if (consecutiveZeros > 5) {
            cerr << "Warning: Performance bottleneck condition triggered - excessive consecutive zeros in input!" << endl;
            abort();
        }
    }
}

// Recursive function with depth check
int get(char x, int ind, char y, int depth = 0) {
    check_recursion_depth_invariant(depth, 10); // Threshold for recursion depth
    if (x == y) return ind + 1;
    if (ind) return get(x, f[ind - 1], target[f[ind - 1]], depth + 1);
    return 0;
}

// Solve function with call count check
bool solve(int ind, bool l, int j, int& callCount) {
    callCount++;
    check_solve_invariant(callCount, 1000); // Threshold for number of calls
    if (ind == (int)s.size()) return (j + 1 == target.size()) && l;
    int &v = vis[ind][l][j];
    bool &ret = dp[ind][l][j];
    if (v == id) return ret;
    ret = 0;
    v = id;
    for (char i = '0'; i <= '9'; i++) {
        if (i < s[ind] && !l) continue;
        ret |= solve(ind + 1, l | (i > s[ind]), get(i, j, target[j]), callCount);
    }
    return ret;
}

void build(int ind, bool l, int j, string &t) {
    if (ind == s.size()) return;
    for (char i = '0'; i <= '9'; i++) {
        if (i < s[ind] && !l) continue;
        if (solve(ind + 1, l | (i > s[ind]), get(i, j, target[j]), *(new int(0)))) {
            t += i;
            build(ind + 1, l | (i > s[ind]), get(i, j, target[j]), t);
            break;
        }
    }
}

void build(string &t) {
    int j = 0;
    f[0] = 0;
    for (int i = 1; i < t.size(); ++i) {
        while (j > 0 && t[i] != t[j]) j = f[j - 1];
        if (t[i] == t[j]) ++j;
        f[i] = j;
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    while (s.size() < 20) s += "0";
    s += "1988";
    string T = s;
    int n;
    cin >> n;
    while (n--) {
        string t;
        cin >> t;
        check_input_pattern_invariant(t); // Check input pattern before processing
        target = " ";
        s = T;
        int i = t.size() - 1;
        while (t[i] >= '0' && t[i] <= '9') {
            target = t[i] + target;
            build(target);
            i--;
            id++;
            int solveCallCount = 0;
            solve(0, 0, 0, solveCallCount);
            string f = "";
            build(0, 0, 0, f);
            s = f;
        }
        i = 0;
        while (i < s.size() && s[i] == '0') i++;
        cout << s.substr(i) << '\n';
    }
    return 0;
}
```

### Explanation

- **Recursion Depth Check:** The `get` function now includes a check for the maximum recursion depth, set to a threshold of 10 (arbitrary, based on pre-analysis).
- **Solve Function Call Count Check:** The `solve` function tracks the number of times it is called and throws an alert if it exceeds a threshold of 1000 calls.
- **Input Pattern Check:** Before processing each input abbreviation, the program checks for excessive sequences of zeros.

These checks are designed to catch the conditions that previously caused performance bottlenecks, ensuring that the program halts execution if they are exceeded.

