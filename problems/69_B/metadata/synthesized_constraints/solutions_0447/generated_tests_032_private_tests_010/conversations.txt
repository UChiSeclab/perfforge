system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

In Chelyabinsk lives a much respected businessman Nikita with a strange nickname "Boss". Once Nikita decided to go with his friend Alex to the Summer Biathlon World Cup. Nikita, as a very important person, received a token which allows to place bets on each section no more than on one competitor.

To begin with friends learned the rules: in the race there are n sections of equal length and m participants. The participants numbered from 1 to m. About each participant the following is known:

  * li — the number of the starting section, 
  * ri — the number of the finishing section (li ≤ ri),
  * ti — the time a biathlete needs to complete an section of the path,
  * ci — the profit in roubles. If the i-th sportsman wins on one of the sections, the profit will be given to the man who had placed a bet on that sportsman.



The i-th biathlete passes the sections from li to ri inclusive. The competitor runs the whole way in (ri - li + 1)·ti time units. It takes him exactly ti time units to pass each section. In case of the athlete's victory on k sections the man who has betted on him receives k·ci roubles.

In each section the winner is determined independently as follows: if there is at least one biathlete running this in this section, then among all of them the winner is the one who has ran this section in minimum time (spent minimum time passing this section). In case of equality of times the athlete with the smaller index number wins. If there are no participants in this section, then the winner in this section in not determined. We have to say that in the summer biathlon all the participants are moving at a constant speed.

We should also add that Nikita can bet on each section and on any contestant running in this section.

Help the friends find the maximum possible profit.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 100). Then follow m lines, each containing 4 integers li, ri, ti, ci (1 ≤ li ≤ ri ≤ n, 1 ≤ ti, ci ≤ 1000).

Output

Print a single integer, the maximal profit in roubles that the friends can get. In each of n sections it is not allowed to place bets on more than one sportsman.

Examples

Input

4 4
1 4 20 5
1 3 21 10
3 3 4 30
3 4 4 20


Output

60

Input

8 4
1 5 24 10
2 4 6 15
4 6 30 50
6 7 4 20


Output

105

Note

In the first test the optimal bet is: in the 1-2 sections on biathlete 1, in section 3 on biathlete 3, in section 4 on biathlete 4. Total: profit of 5 rubles for 1 section, the profit of 5 rubles for 2 section, profit of 30 rubles for a 3 section, profit of 20 rubles for 4 section. Total profit 60 rubles.

In the second test the optimal bet is: on 1 and 5 sections on biathlete 1, in the 2-4 sections on biathlete 2, in the 6-7 sections on athlete 4. There is no winner in the 8 section. Total: profit of 10 rubles for 1 section, the profit of 15 rubles for 2,3,4 section, profit of 10 rubles for a 5 section, profit of 20 rubles for 6, 7 section. Total profit 105 rubles.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
struct node {
  int t = INT_MAX, idx = 0, c = 0;
};
using namespace std;
int main() {
  ios ::sync_with_stdio(false);
  map<int, deque<node> > mappy;
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int l, r, t, c;
    cin >> l >> r >> t >> c;
    node obj;
    obj.t = t;
    obj.idx = i;
    obj.c = c;
    for (int j = l; j <= r; j++) mappy[j].push_back(obj);
  }
  long long int ans = 0;
  for (int i = 1; i <= n; i++) {
    node curr;
    while (!mappy[i].empty()) {
      node obj = mappy[i].front();
      if (obj.t < curr.t)
        curr = obj;
      else if (obj.t == curr.t && obj.idx < curr.idx)
        curr = obj;
      mappy[i].pop_front();
    }
    ans += curr.c;
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 1
3 82 727 390


(G.2) Fast Input

1 1
1 1 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
struct node { /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
  int t = INT_MAX, idx = 0, c = 0; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  ios ::sync_with_stdio(false); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  map<int, deque<node> > mappy; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < m; i++) { /* line 11 slow_hit_count: 2, fast_hit_count: 2 */
    int l, r, t, c; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> l >> r >> t >> c; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
    node obj; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    obj.t = t; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    obj.idx = i; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
    obj.c = c; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
    for (int j = l; j <= r; j++) mappy[j].push_back(obj); /* line 18 slow_hit_count: 81, fast_hit_count: 2 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  long long int ans = 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 21 slow_hit_count: 101, fast_hit_count: 2 */
    node curr; /* line 22 slow_hit_count: 100, fast_hit_count: 1 */
    while (!mappy[i].empty()) { /* line 23 slow_hit_count: 180, fast_hit_count: 2 */
      node obj = mappy[i].front(); /* line 24 slow_hit_count: 80, fast_hit_count: 1 */
      if (obj.t < curr.t) /* line 25 slow_hit_count: 80, fast_hit_count: 1 */
        curr = obj; /* line 26 slow_hit_count: 80, fast_hit_count: 1 */
      else if (obj.t == curr.t && obj.idx < curr.idx) /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
        curr = obj; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      mappy[i].pop_front(); /* line 29 slow_hit_count: 80, fast_hit_count: 1 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    ans += curr.c; /* line 31 slow_hit_count: 100, fast_hit_count: 1 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the given C program, we can analyze the provided hit count data and identify which sections of the code are getting significantly more hits in the slow input versus the fast input. Then, we can derive performance-characterizing invariants based on our analysis.

### Phase 1: Identify Expensive or Inefficient Code Segments

From the hit count information:

1. **Line 18**: `mappy[j].push_back(obj);` is hit 81 times for the slow input but only 2 times for the fast input. This indicates that the loop is iterating significantly more times due to a larger range `[l, r]` for the slow input.

2. **Line 21**: `for (int i = 1; i <= n; i++) {` is hit 101 times for the slow input but only 2 times for the fast input. This indicates that the outer loop runs for all sections, which makes sense given that `n = 100` for the slow input.

3. **Line 23**: `while (!mappy[i].empty()) {` is hit 180 times in the slow input compared to just 2 times in the fast input. This indicates that sections have multiple participants, leading to more iterations.

4. **Line 24-26**: The logic to find the minimum time participant (`obj.t < curr.t`) is executed 80 times for the slow input but only once for the fast input. This shows that for each section, comparisons are made multiple times due to multiple participants.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following performance-characterizing invariants:

#### Invariant 1: Large Range of Initialization
- **Natural Language Description**: "If the range `[l, r]` for participants is large, causing many entries for sections in the map, the program may slow down due to repeated processing of these entries."
- **Rationale**: In the slow input, the range `[l, r]` for a single participant spans many sections, leading to high hit counts in the loop filling `mappy`.

#### Invariant 2: High Participant Density per Section
- **Natural Language Description**: "If a section has many participants, the selection process for the fastest participant within that section can become costly due to numerous comparisons."
- **Rationale**: The slow input involves a higher number of participants compared in each section, as indicated by the high hit count in the comparison loop (`obj.t < curr.t`).

#### Invariant 3: Maximum Section Processing
- **Natural Language Description**: "If the number of sections `n` approaches the upper limit of 100 and participants span many sections, the processing becomes expensive due to increased iterations."
- **Rationale**: The outer loop iterates over all sections, and as `n` is at its max, it triggers more work in both filling the map and processing it.

### Conclusion

These invariants highlight conditions where the program's performance degrades due to large data structures and repeated operations. By focusing on input patterns such as the size of ranges and the density of participants per section, we can better understand and potentially mitigate performance issues.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
In Chelyabinsk lives a much respected businessman Nikita with a strange nickname "Boss". Once Nikita decided to go with his friend Alex to the Summer Biathlon World Cup. Nikita, as a very important person, received a token which allows to place bets on each section no more than on one competitor.

To begin with friends learned the rules: in the race there are n sections of equal length and m participants. The participants numbered from 1 to m. About each participant the following is known:

  * li — the number of the starting section, 
  * ri — the number of the finishing section (li ≤ ri),
  * ti — the time a biathlete needs to complete an section of the path,
  * ci — the profit in roubles. If the i-th sportsman wins on one of the sections, the profit will be given to the man who had placed a bet on that sportsman.



The i-th biathlete passes the sections from li to ri inclusive. The competitor runs the whole way in (ri - li + 1)·ti time units. It takes him exactly ti time units to pass each section. In case of the athlete's victory on k sections the man who has betted on him receives k·ci roubles.

In each section the winner is determined independently as follows: if there is at least one biathlete running this in this section, then among all of them the winner is the one who has ran this section in minimum time (spent minimum time passing this section). In case of equality of times the athlete with the smaller index number wins. If there are no participants in this section, then the winner in this section in not determined. We have to say that in the summer biathlon all the participants are moving at a constant speed.

We should also add that Nikita can bet on each section and on any contestant running in this section.

Help the friends find the maximum possible profit.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 100). Then follow m lines, each containing 4 integers li, ri, ti, ci (1 ≤ li ≤ ri ≤ n, 1 ≤ ti, ci ≤ 1000).

Output

Print a single integer, the maximal profit in roubles that the friends can get. In each of n sections it is not allowed to place bets on more than one sportsman.

Examples

Input

4 4
1 4 20 5
1 3 21 10
3 3 4 30
3 4 4 20


Output

60

Input

8 4
1 5 24 10
2 4 6 15
4 6 30 50
6 7 4 20


Output

105

Note

In the first test the optimal bet is: in the 1-2 sections on biathlete 1, in section 3 on biathlete 3, in section 4 on biathlete 4. Total: profit of 5 rubles for 1 section, the profit of 5 rubles for 2 section, profit of 30 rubles for a 3 section, profit of 20 rubles for 4 section. Total profit 60 rubles.

In the second test the optimal bet is: on 1 and 5 sections on biathlete 1, in the 2-4 sections on biathlete 2, in the 6-7 sections on athlete 4. There is no winner in the 8 section. Total: profit of 10 rubles for 1 section, the profit of 15 rubles for 2,3,4 section, profit of 10 rubles for a 5 section, profit of 20 rubles for 6, 7 section. Total profit 105 rubles.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ implementations of the performance-characterizing invariants as runtime checks:

1. **Invariant for Large Range of Initialization**:
    - Checks if a participant covers a large range, which can lead to excessive entries in the map.

```cpp
void check_large_range_invariant(int l, int r, int threshold) {
    if ((r - l + 1) > threshold) {
        cerr << "Warning: Performance bottleneck due to large range of sections covered by a participant!" << endl;
        abort();
    }
}
```

2. **Invariant for High Participant Density per Section**:
    - Checks if the number of participants in a section exceeds a threshold, causing higher computational cost.

```cpp
void check_high_density_invariant(int participantsInSection, int threshold) {
    if (participantsInSection > threshold) {
        cerr << "Warning: Performance bottleneck due to high participant density in a section!" << endl;
        abort();
    }
}
```

3. **Invariant for Maximum Section Processing**:
    - Checks if the number of sections `n` and participants `m` at their limits triggers excessive computations.

```cpp
void check_max_section_processing_invariant(int n, int m, int n_threshold, int m_threshold) {
    if (n >= n_threshold && m >= m_threshold) {
        cerr << "Warning: Performance bottleneck due to maximum section processing!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Here we integrate the above checks into the original C++ code at appropriate points to ensure they capture potential performance issues without adding overhead in tight loops:

```cpp
#include <bits/stdc++.h>
struct node {
    int t = INT_MAX, idx = 0, c = 0;
};
using namespace std;

// Checker functions
void check_large_range_invariant(int l, int r, int threshold) {
    if ((r - l + 1) > threshold) {
        cerr << "Warning: Performance bottleneck due to large range of sections covered by a participant!" << endl;
        abort();
    }
}

void check_high_density_invariant(int participantsInSection, int threshold) {
    if (participantsInSection > threshold) {
        cerr << "Warning: Performance bottleneck due to high participant density in a section!" << endl;
        abort();
    }
}

void check_max_section_processing_invariant(int n, int m, int n_threshold, int m_threshold) {
    if (n >= n_threshold && m >= m_threshold) {
        cerr << "Warning: Performance bottleneck due to maximum section processing!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(false);
    map<int, deque<node>> mappy;
    int n, m;
    cin >> n >> m;

    // Check for maximum section processing invariant
    check_max_section_processing_invariant(n, m, 100, 100);

    for (int i = 0; i < m; i++) {
        int l, r, t, c;
        cin >> l >> r >> t >> c;
        
        // Check for large range invariant
        check_large_range_invariant(l, r, 50);

        node obj;
        obj.t = t;
        obj.idx = i;
        obj.c = c;
        for (int j = l; j <= r; j++) mappy[j].push_back(obj);
    }

    long long int ans = 0;
    for (int i = 1; i <= n; i++) {
        node curr;
        int participantsInSection = mappy[i].size();

        // Check for high density invariant
        check_high_density_invariant(participantsInSection, 10);

        while (!mappy[i].empty()) {
            node obj = mappy[i].front();
            if (obj.t < curr.t)
                curr = obj;
            else if (obj.t == curr.t && obj.idx < curr.idx)
                curr = obj;
            mappy[i].pop_front();
        }
        ans += curr.c;
    }
    cout << ans;
    return 0;
}
```

### Explanation

- **Large Range of Initialization**: The check is placed right after reading each participant's `l` and `r` values to ensure we avoid adding too many entries for a participant.

- **High Participant Density per Section**: The check is placed right before the loop that processes participants in each section to catch high participant counts that might cause slowdowns.

- **Maximum Section Processing**: This check is placed immediately after reading `n` and `m` to ensure the overall setup isn't at the threshold where processing becomes costly.

These checks help ensure that potential performance bottlenecks are identified during runtime, alerting users to input scenarios that could degrade performance significantly.

