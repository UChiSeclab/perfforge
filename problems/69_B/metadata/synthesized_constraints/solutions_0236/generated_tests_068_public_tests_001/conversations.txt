system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

In Chelyabinsk lives a much respected businessman Nikita with a strange nickname "Boss". Once Nikita decided to go with his friend Alex to the Summer Biathlon World Cup. Nikita, as a very important person, received a token which allows to place bets on each section no more than on one competitor.

To begin with friends learned the rules: in the race there are n sections of equal length and m participants. The participants numbered from 1 to m. About each participant the following is known:

  * li — the number of the starting section, 
  * ri — the number of the finishing section (li ≤ ri),
  * ti — the time a biathlete needs to complete an section of the path,
  * ci — the profit in roubles. If the i-th sportsman wins on one of the sections, the profit will be given to the man who had placed a bet on that sportsman.



The i-th biathlete passes the sections from li to ri inclusive. The competitor runs the whole way in (ri - li + 1)·ti time units. It takes him exactly ti time units to pass each section. In case of the athlete's victory on k sections the man who has betted on him receives k·ci roubles.

In each section the winner is determined independently as follows: if there is at least one biathlete running this in this section, then among all of them the winner is the one who has ran this section in minimum time (spent minimum time passing this section). In case of equality of times the athlete with the smaller index number wins. If there are no participants in this section, then the winner in this section in not determined. We have to say that in the summer biathlon all the participants are moving at a constant speed.

We should also add that Nikita can bet on each section and on any contestant running in this section.

Help the friends find the maximum possible profit.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 100). Then follow m lines, each containing 4 integers li, ri, ti, ci (1 ≤ li ≤ ri ≤ n, 1 ≤ ti, ci ≤ 1000).

Output

Print a single integer, the maximal profit in roubles that the friends can get. In each of n sections it is not allowed to place bets on more than one sportsman.

Examples

Input

4 4
1 4 20 5
1 3 21 10
3 3 4 30
3 4 4 20


Output

60

Input

8 4
1 5 24 10
2 4 6 15
4 6 30 50
6 7 4 20


Output

105

Note

In the first test the optimal bet is: in the 1-2 sections on biathlete 1, in section 3 on biathlete 3, in section 4 on biathlete 4. Total: profit of 5 rubles for 1 section, the profit of 5 rubles for 2 section, profit of 30 rubles for a 3 section, profit of 20 rubles for 4 section. Total profit 60 rubles.

In the second test the optimal bet is: on 1 and 5 sections on biathlete 1, in the 2-4 sections on biathlete 2, in the 6-7 sections on athlete 4. There is no winner in the 8 section. Total: profit of 10 rubles for 1 section, the profit of 15 rubles for 2,3,4 section, profit of 10 rubles for a 5 section, profit of 20 rubles for 6, 7 section. Total profit 105 rubles.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const double EPS = (1e-7);
int dcmp(double x, double y) { return fabs(x - y) <= EPS ? 0 : x < y ? -1 : 1; }
const int OO = (int)1e6;
pair<long long, pair<long long, long long> > extendedEuclid(long long a,
                                                            long long b) {
  if (a == 0) return make_pair(b, make_pair(0, 1));
  pair<long long, pair<long long, long long> > p;
  p = extendedEuclid(b % a, a);
  return make_pair(
      p.first,
      make_pair(p.second.second - p.second.first * (b / a), p.second.first));
}
long long modInverse(long long a, long long m) {
  return (extendedEuclid(a, m).second.first + m) % m;
}
long long powmod(long long base, long long pw, long long mod) {
  long long ret = 1;
  while (pw) {
    if (pw & 1) ret = (ret * base) % mod;
    base = (base * base) % mod;
    pw >>= 1;
  }
  return ret;
}
long long GCD(long long a, long long b) {
  if (b == 0) return a;
  return GCD(b, a % b);
}
long long LCM(long long a, long long b) { return (a / GCD(a, b)) * b; }
long long Bigmod(long long x, long long y, long long m) {
  if (y == 0) return 1 % m;
  if (y % 2 == 0) {
    long long temp = Bigmod(x, y / 2, m);
    return (temp * temp) % m;
  }
  return (x % m * Bigmod(x, y - 1, m)) % m;
}
const int MAX_N = 1000000;
vector<int> primes;
bool is_prime[MAX_N];
void sieve() {
  for (int i = 0; i < MAX_N; i++) is_prime[i] = true;
  is_prime[0] = is_prime[1] = false;
  for (int i = 2; i < MAX_N; i++) {
    if (is_prime[i]) {
      primes.push_back(i);
      for (int j = i + i; j < MAX_N; j += i) is_prime[j] = false;
    }
  }
}
vector<int> prime_Factors(long long N) {
  vector<int> factors;
  long long PF_idx = 0, PF = primes[PF_idx];
  while (N != 1 && (PF * PF <= N)) {
    while (N % PF == 0) {
      N /= PF;
      factors.push_back(PF);
    }
    PF = primes[++PF_idx];
  }
  if (N != 1) factors.push_back(N);
  return factors;
}
long long numPF(long long N) {
  long long PF_idx = 0, PF = primes[PF_idx], ans = 0;
  while (N != 1 && (PF * PF <= N)) {
    while (N % PF == 0) {
      N /= PF;
      ans++;
    }
    PF = primes[++PF_idx];
  }
  if (N != 1) ans++;
  return ans;
}
long long numDiv(long long N) {
  long long PF_idx = 0, PF = primes[PF_idx], ans = 1;
  while (N != 1 && (PF * PF <= N)) {
    long long power = 0;
    while (N % PF == 0) {
      N /= PF;
      power++;
    }
    ans *= (power + 1);
    PF = primes[++PF_idx];
  }
  if (N != 1) ans *= 2;
  return ans;
}
long long sumDiv(long long N) {
  long long PF_idx = 0, PF = primes[PF_idx], ans = 1;
  while (N != 1 && (PF * PF <= N)) {
    long long power = 0;
    while (N % PF == 0) {
      N /= PF;
      power++;
    }
    ans *= ((long long)pow((double)PF, power + 1.0) - 1) / (PF - 1);
    PF = primes[++PF_idx];
  }
  if (N != 1) ans *= ((long long)pow((double)N, 2.0) - 1) / (N - 1);
  return ans;
}
long long modulo(long long m, long long n) {
  return m >= 0 ? m % n : (n - abs(m % n)) % n;
}
bool cmp(const pair<int, pair<int, int> >& a,
         const pair<int, pair<int, int> >& b) {
  if (a.first < b.first) return true;
  if (a.first == b.first)
    if (a.second.first < b.second.first) return true;
  return false;
}
int main() {
  cin.tie(0);
  int n, m;
  cin >> n >> m;
  vector<vector<pair<int, pair<int, int> > > > v(n + 1);
  for (int i = 0; i < m; i++) {
    int l, r, t, c;
    cin >> l >> r >> t >> c;
    for (int j = l; j <= r; j++) {
      v[j].push_back(make_pair(t, make_pair(i + 1, c)));
    }
  }
  for (int i = 1; i <= n; i++) sort(v[i].begin(), v[i].end(), cmp);
  long long res = 0;
  for (int i = 1; i <= n; i++) {
    if (v[i].size()) res += v[i][0].second.second;
  }
  cout << res;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

20 30
1 20 49 91
15 15 60 37
14 14 3 79
11 12 81 66
8 12 71 31
3 13 8 14
2 10 11 35
19 20 7 28
12 14 6 75
16 18 100 100
20 20 89 74
16 16 27 98
18 18 21 24
1 18 69 98
7 13 70 57
9 20 41 79
17 17 75 75
11 16 19 14
1 15 62 59
12 15 33 91
3 17 10 79
15 16 100 80
10 16 5 5
9 19 53 100
9 18 65 42
4 13 34 13
6 13 61 47
17 19 68 25
5 5 42 59
6 8 48 92


(G.2) Fast Input

8 4
1 5 24 10
2 4 6 15
4 6 30 50
6 7 4 20


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const double EPS = (1e-7); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int dcmp(double x, double y) { return fabs(x - y) <= EPS ? 0 : x < y ? -1 : 1; } /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int OO = (int)1e6; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
pair<long long, pair<long long, long long> > extendedEuclid(long long a, /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
                                                            long long b) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  if (a == 0) return make_pair(b, make_pair(0, 1)); /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  pair<long long, pair<long long, long long> > p; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  p = extendedEuclid(b % a, a); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  return make_pair( /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
      p.first, /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
      make_pair(p.second.second - p.second.first * (b / a), p.second.first)); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
long long modInverse(long long a, long long m) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return (extendedEuclid(a, m).second.first + m) % m; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
long long powmod(long long base, long long pw, long long mod) { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  long long ret = 1; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  while (pw) { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    if (pw & 1) ret = (ret * base) % mod; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    base = (base * base) % mod; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    pw >>= 1; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
long long GCD(long long a, long long b) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  if (b == 0) return a; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  return GCD(b, a % b); /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
long long LCM(long long a, long long b) { return (a / GCD(a, b)) * b; } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
long long Bigmod(long long x, long long y, long long m) { /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  if (y == 0) return 1 % m; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  if (y % 2 == 0) { /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    long long temp = Bigmod(x, y / 2, m); /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    return (temp * temp) % m; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  return (x % m * Bigmod(x, y - 1, m)) % m; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
const int MAX_N = 1000000; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> primes; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
bool is_prime[MAX_N]; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
void sieve() { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < MAX_N; i++) is_prime[i] = true; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  is_prime[0] = is_prime[1] = false; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 2; i < MAX_N; i++) { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    if (is_prime[i]) { /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      primes.push_back(i); /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = i + i; j < MAX_N; j += i) is_prime[j] = false; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> prime_Factors(long long N) { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> factors; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  long long PF_idx = 0, PF = primes[PF_idx]; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  while (N != 1 && (PF * PF <= N)) { /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    while (N % PF == 0) { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
      N /= PF; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
      factors.push_back(PF); /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    PF = primes[++PF_idx]; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  if (N != 1) factors.push_back(N); /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  return factors; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
long long numPF(long long N) { /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  long long PF_idx = 0, PF = primes[PF_idx], ans = 0; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  while (N != 1 && (PF * PF <= N)) { /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
    while (N % PF == 0) { /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
      N /= PF; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
      ans++; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
    PF = primes[++PF_idx]; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  if (N != 1) ans++; /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
long long numDiv(long long N) { /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
  long long PF_idx = 0, PF = primes[PF_idx], ans = 1; /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  while (N != 1 && (PF * PF <= N)) { /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
    long long power = 0; /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
    while (N % PF == 0) { /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
      N /= PF; /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
      power++; /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
    ans *= (power + 1); /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
    PF = primes[++PF_idx]; /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  if (N != 1) ans *= 2; /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
long long sumDiv(long long N) { /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  long long PF_idx = 0, PF = primes[PF_idx], ans = 1; /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  while (N != 1 && (PF * PF <= N)) { /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
    long long power = 0; /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
    while (N % PF == 0) { /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
      N /= PF; /* line 97 slow_hit_count: 0, fast_hit_count: 0 */
      power++; /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
    ans *= ((long long)pow((double)PF, power + 1.0) - 1) / (PF - 1); /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
    PF = primes[++PF_idx]; /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
  if (N != 1) ans *= ((long long)pow((double)N, 2.0) - 1) / (N - 1); /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
long long modulo(long long m, long long n) { /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
  return m >= 0 ? m % n : (n - abs(m % n)) % n; /* line 107 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp(const pair<int, pair<int, int> >& a, /* line 109 slow_hit_count: 686, fast_hit_count: 8 */
         const pair<int, pair<int, int> >& b) { /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
  if (a.first < b.first) return true; /* line 111 slow_hit_count: 686, fast_hit_count: 8 */
  if (a.first == b.first) /* line 112 slow_hit_count: 291, fast_hit_count: 4 */
    if (a.second.first < b.second.first) return true; /* line 113 slow_hit_count: 1, fast_hit_count: 0 */
  return false; /* line 114 slow_hit_count: 291, fast_hit_count: 4 */
} /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 116 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 117 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 119 slow_hit_count: 1, fast_hit_count: 1 */
  vector<vector<pair<int, pair<int, int> > > > v(n + 1); /* line 120 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < m; i++) { /* line 121 slow_hit_count: 31, fast_hit_count: 5 */
    int l, r, t, c; /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> l >> r >> t >> c; /* line 123 slow_hit_count: 30, fast_hit_count: 4 */
    for (int j = l; j <= r; j++) { /* line 124 slow_hit_count: 223, fast_hit_count: 17 */
      v[j].push_back(make_pair(t, make_pair(i + 1, c))); /* line 125 slow_hit_count: 193, fast_hit_count: 13 */
    } /* line 126 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 127 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) sort(v[i].begin(), v[i].end(), cmp); /* line 128 slow_hit_count: 21, fast_hit_count: 9 */
  long long res = 0; /* line 129 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 130 slow_hit_count: 21, fast_hit_count: 9 */
    if (v[i].size()) res += v[i][0].second.second; /* line 131 slow_hit_count: 20, fast_hit_count: 8 */
  } /* line 132 slow_hit_count: 0, fast_hit_count: 0 */
  cout << res; /* line 133 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 134 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 135 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - The `cmp` function (lines 109-115) shows a significant difference in hit counts between the slow and fast input. It is hit 686 times for the slow input but only 8 times for the fast input.
   - The loop `for (int j = l; j <= r; j++)` in line 124, which populates a vector of competitors (`v[j].push_back(...)`), has a much higher hit count for the slow input (223) compared to the fast input (17).

2. **Inference:**
   - The high hit count in the `cmp` function suggests that sorting is a significant contributor to the slowdown, as this comparator is called frequently during sorting operations.
   - The loop populating the vector indicates that there are many overlapping ranges for the competitors, leading to a more complex sorting process in the subsequent line.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariant #1: Sorting Complexity**
   - **Description:** "When the number of competitors running in overlapping section ranges is high, the sorting operations become a bottleneck, as the list of competitors for each section requires frequent sorting."
   - **Threshold Suggestion:** Given the constraints, if the number of competitors with overlapping sections approaches a high portion of n (e.g., several overlapping for most of the sections), sorting will be invoked frequently, increasing execution time.

2. **Natural Language Invariant #2: Overlapping Competitor Ranges**
   - **Description:** "If many competitors have extensive overlapping sections, especially when multiple competitors cover the same section range, the time complexity increases due to numerous insertions and sorting operations."
   - **Threshold Suggestion:** The slowdown could be triggered when the overlapping competitors per section are significantly high relative to n, leading to increased data structure manipulation.

3. **Natural Language Invariant #3: High Overlap in Section Assignments**
   - **Description:** "The program will slow down if there are many sections with a high number of overlapping competitors, as each section requires sorting to determine the winner, increasing computational overhead."
   - **Threshold Suggestion:** Look for situations where the number of competitors per section is close to m (the total number of competitors), which leads to increased sorting and calculation requirements.

### Important Considerations

- These invariants are designed to capture the essence of what makes the program slow without relying on exact values from a particular input.
- They abstract away from specific numeric values and instead focus on general patterns and conditions that can lead to increased computational effort, such as sorting complexity, overlapping ranges, and data structure manipulations.
- The focus is on conditions that naturally arise given the problem constraints (n, m ≤ 100) and how they interact with the algorithm's logic.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
In Chelyabinsk lives a much respected businessman Nikita with a strange nickname "Boss". Once Nikita decided to go with his friend Alex to the Summer Biathlon World Cup. Nikita, as a very important person, received a token which allows to place bets on each section no more than on one competitor.

To begin with friends learned the rules: in the race there are n sections of equal length and m participants. The participants numbered from 1 to m. About each participant the following is known:

  * li — the number of the starting section, 
  * ri — the number of the finishing section (li ≤ ri),
  * ti — the time a biathlete needs to complete an section of the path,
  * ci — the profit in roubles. If the i-th sportsman wins on one of the sections, the profit will be given to the man who had placed a bet on that sportsman.



The i-th biathlete passes the sections from li to ri inclusive. The competitor runs the whole way in (ri - li + 1)·ti time units. It takes him exactly ti time units to pass each section. In case of the athlete's victory on k sections the man who has betted on him receives k·ci roubles.

In each section the winner is determined independently as follows: if there is at least one biathlete running this in this section, then among all of them the winner is the one who has ran this section in minimum time (spent minimum time passing this section). In case of equality of times the athlete with the smaller index number wins. If there are no participants in this section, then the winner in this section in not determined. We have to say that in the summer biathlon all the participants are moving at a constant speed.

We should also add that Nikita can bet on each section and on any contestant running in this section.

Help the friends find the maximum possible profit.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 100). Then follow m lines, each containing 4 integers li, ri, ti, ci (1 ≤ li ≤ ri ≤ n, 1 ≤ ti, ci ≤ 1000).

Output

Print a single integer, the maximal profit in roubles that the friends can get. In each of n sections it is not allowed to place bets on more than one sportsman.

Examples

Input

4 4
1 4 20 5
1 3 21 10
3 3 4 30
3 4 4 20


Output

60

Input

8 4
1 5 24 10
2 4 6 15
4 6 30 50
6 7 4 20


Output

105

Note

In the first test the optimal bet is: in the 1-2 sections on biathlete 1, in section 3 on biathlete 3, in section 4 on biathlete 4. Total: profit of 5 rubles for 1 section, the profit of 5 rubles for 2 section, profit of 30 rubles for a 3 section, profit of 20 rubles for 4 section. Total profit 60 rubles.

In the second test the optimal bet is: on 1 and 5 sections on biathlete 1, in the 2-4 sections on biathlete 2, in the 6-7 sections on athlete 4. There is no winner in the 8 section. Total: profit of 10 rubles for 1 section, the profit of 15 rubles for 2,3,4 section, profit of 10 rubles for a 5 section, profit of 20 rubles for 6, 7 section. Total profit 105 rubles.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Invariants into Checker Code in C++

Here are the C++ code snippets that implement the performance-characterizing invariants derived in Phase 2.

1. **Invariant for Sorting Complexity:**
   
   ```cpp
   void check_sort_invariant(int numCompetitors) {
       if (numCompetitors > 70) {  // Assuming 70 as a high threshold for overlap
           cerr << "Warning: Performance bottleneck due to excessive sorting!" << endl;
           abort();
       }
   }
   ```

2. **Invariant for Overlapping Competitor Ranges:**

   ```cpp
   void check_overlap_invariant(int overlapCount) {
       if (overlapCount > 50) {  // Assuming 50 as a high threshold for overlap
           cerr << "Warning: Performance bottleneck due to high overlap in sections!" << endl;
           abort();
       }
   }
   ```

3. **Invariant for High Overlap in Section Assignments:**

   ```cpp
   void check_section_overlap_invariant(int sectionsWithHighOverlap) {
       if (sectionsWithHighOverlap > 10) {  // Assuming 10 as a high threshold for sections
           cerr << "Warning: Performance bottleneck due to many high-overlap sections!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Code into the Original Program

Below is the instrumented version of the original C++ code with the invariant checks integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance invariants
void check_sort_invariant(int numCompetitors) {
    if (numCompetitors > 70) {
        cerr << "Warning: Performance bottleneck due to excessive sorting!" << endl;
        abort();
    }
}

void check_overlap_invariant(int overlapCount) {
    if (overlapCount > 50) {
        cerr << "Warning: Performance bottleneck due to high overlap in sections!" << endl;
        abort();
    }
}

void check_section_overlap_invariant(int sectionsWithHighOverlap) {
    if (sectionsWithHighOverlap > 10) {
        cerr << "Warning: Performance bottleneck due to many high-overlap sections!" << endl;
        abort();
    }
}

bool cmp(const pair<int, pair<int, int> >& a,
         const pair<int, pair<int, int> >& b) {
    if (a.first < b.first) return true;
    if (a.first == b.first)
        if (a.second.first < b.second.first) return true;
    return false;
}

int main() {
    cin.tie(0);
    int n, m;
    cin >> n >> m;
    vector<vector<pair<int, pair<int, int> > > > v(n + 1);

    // Track overlaps for each section
    vector<int> sectionCompetitors(n + 1, 0);

    for (int i = 0; i < m; i++) {
        int l, r, t, c;
        cin >> l >> r >> t >> c;
        for (int j = l; j <= r; j++) {
            v[j].push_back(make_pair(t, make_pair(i + 1, c)));
            sectionCompetitors[j]++;
        }
    }

    // Check for high overlap before sorting
    for (int i = 1; i <= n; i++) {
        check_overlap_invariant(sectionCompetitors[i]);
    }

    int sectionsWithHighOverlap = 0;
    for (int i = 1; i <= n; i++) {
        if (sectionCompetitors[i] > 50) {
            sectionsWithHighOverlap++;
        }
    }
    check_section_overlap_invariant(sectionsWithHighOverlap);

    // Sorting competitors in each section
    for (int i = 1; i <= n; i++) {
        sort(v[i].begin(), v[i].end(), cmp);
        check_sort_invariant(v[i].size());
    }

    long long res = 0;
    for (int i = 1; i <= n; i++) {
        if (v[i].size()) res += v[i][0].second.second;
    }
    cout << res;
    return 0;
}
```

### Explanation

- **Location of Checks:** The checks for overlap and sorting complexity are placed strategically to ensure they don't add overhead in tight loops. They are positioned before the sorting operation to catch high overlap and complex sorting scenarios.
  
- **Thresholds:** The thresholds (e.g., 70 for sorting and 50 for overlap) are chosen based on reasonable assumptions for the constraints given (n, m ≤ 100). These thresholds should capture scenarios that lead to significant slowdowns.

- **Checker Functions:** These functions encapsulate the logic for detecting potential performance bottlenecks and provide a centralized way to trigger warnings and abort execution if the conditions are met.

