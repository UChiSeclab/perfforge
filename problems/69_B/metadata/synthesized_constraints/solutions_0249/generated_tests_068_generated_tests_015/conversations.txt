system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

In Chelyabinsk lives a much respected businessman Nikita with a strange nickname "Boss". Once Nikita decided to go with his friend Alex to the Summer Biathlon World Cup. Nikita, as a very important person, received a token which allows to place bets on each section no more than on one competitor.

To begin with friends learned the rules: in the race there are n sections of equal length and m participants. The participants numbered from 1 to m. About each participant the following is known:

  * li — the number of the starting section, 
  * ri — the number of the finishing section (li ≤ ri),
  * ti — the time a biathlete needs to complete an section of the path,
  * ci — the profit in roubles. If the i-th sportsman wins on one of the sections, the profit will be given to the man who had placed a bet on that sportsman.



The i-th biathlete passes the sections from li to ri inclusive. The competitor runs the whole way in (ri - li + 1)·ti time units. It takes him exactly ti time units to pass each section. In case of the athlete's victory on k sections the man who has betted on him receives k·ci roubles.

In each section the winner is determined independently as follows: if there is at least one biathlete running this in this section, then among all of them the winner is the one who has ran this section in minimum time (spent minimum time passing this section). In case of equality of times the athlete with the smaller index number wins. If there are no participants in this section, then the winner in this section in not determined. We have to say that in the summer biathlon all the participants are moving at a constant speed.

We should also add that Nikita can bet on each section and on any contestant running in this section.

Help the friends find the maximum possible profit.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 100). Then follow m lines, each containing 4 integers li, ri, ti, ci (1 ≤ li ≤ ri ≤ n, 1 ≤ ti, ci ≤ 1000).

Output

Print a single integer, the maximal profit in roubles that the friends can get. In each of n sections it is not allowed to place bets on more than one sportsman.

Examples

Input

4 4
1 4 20 5
1 3 21 10
3 3 4 30
3 4 4 20


Output

60

Input

8 4
1 5 24 10
2 4 6 15
4 6 30 50
6 7 4 20


Output

105

Note

In the first test the optimal bet is: in the 1-2 sections on biathlete 1, in section 3 on biathlete 3, in section 4 on biathlete 4. Total: profit of 5 rubles for 1 section, the profit of 5 rubles for 2 section, profit of 30 rubles for a 3 section, profit of 20 rubles for 4 section. Total profit 60 rubles.

In the second test the optimal bet is: on 1 and 5 sections on biathlete 1, in the 2-4 sections on biathlete 2, in the 6-7 sections on athlete 4. There is no winner in the 8 section. Total: profit of 10 rubles for 1 section, the profit of 15 rubles for 2,3,4 section, profit of 10 rubles for a 5 section, profit of 20 rubles for 6, 7 section. Total profit 105 rubles.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int inf = 1e9;
struct item {
  int c, t, num;
};
bool boolf(item p, item p1) {
  return p.t < p1.t || (p.t == p1.t && p.num < p1.num);
}
int main() {
  int n, m, i, j;
  cin >> n >> m;
  vector<item> a[200];
  for (int i = 0; i < m; i++) {
    int l, r, t, c;
    cin >> l >> r >> t >> c;
    item tt;
    tt.num = i;
    tt.t = t;
    tt.c = c;
    for (j = l; j <= r; j++) a[j].push_back(tt);
  }
  int ans = 0;
  for (i = 1; i <= n; i++) {
    if (a[i].empty()) continue;
    sort(a[i].begin(), a[i].end(), boolf);
    item anst = a[i][0];
    ans += anst.c;
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

20 30
1 20 49 91
15 15 60 37
14 14 3 79
11 12 81 66
8 12 71 31
3 13 8 14
2 10 11 35
19 20 7 28
12 14 6 75
16 18 100 100
20 20 89 74
16 16 27 98
18 18 21 24
1 18 69 98
7 13 70 57
9 20 41 79
17 17 75 75
11 16 19 14
1 15 62 59
12 15 33 91
3 17 10 79
15 16 100 80
10 16 5 5
9 19 53 100
9 18 65 42
4 13 34 13
6 13 61 47
17 19 68 25
5 5 42 59
6 8 48 92


(G.2) Fast Input

8 4
1 5 24 10
2 2 6 15
4 6 30 50
6 7 4 20


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 1e9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
struct item { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  int c, t, num; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
bool boolf(item p, item p1) { /* line 7 slow_hit_count: 686, fast_hit_count: 6 */
  return p.t < p1.t || (p.t == p1.t && p.num < p1.num); /* line 8 slow_hit_count: 686, fast_hit_count: 6 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, i, j; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  vector<item> a[200]; /* line 13 slow_hit_count: 402, fast_hit_count: 402 */
  for (int i = 0; i < m; i++) { /* line 14 slow_hit_count: 31, fast_hit_count: 5 */
    int l, r, t, c; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> l >> r >> t >> c; /* line 16 slow_hit_count: 30, fast_hit_count: 4 */
    item tt; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    tt.num = i; /* line 18 slow_hit_count: 30, fast_hit_count: 4 */
    tt.t = t; /* line 19 slow_hit_count: 30, fast_hit_count: 4 */
    tt.c = c; /* line 20 slow_hit_count: 30, fast_hit_count: 4 */
    for (j = l; j <= r; j++) a[j].push_back(tt); /* line 21 slow_hit_count: 223, fast_hit_count: 15 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 1; i <= n; i++) { /* line 24 slow_hit_count: 21, fast_hit_count: 9 */
    if (a[i].empty()) continue; /* line 25 slow_hit_count: 20, fast_hit_count: 8 */
    sort(a[i].begin(), a[i].end(), boolf); /* line 26 slow_hit_count: 20, fast_hit_count: 7 */
    item anst = a[i][0]; /* line 27 slow_hit_count: 20, fast_hit_count: 7 */
    ans += anst.c; /* line 28 slow_hit_count: 20, fast_hit_count: 7 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line 7-8**: The function `boolf` is used to determine the sorting order and it has a significantly higher hit count in the slow run (686 times) compared to the fast run (6 times). This suggests that the sorting operation on line 26 is being executed more frequently.

2. **Line 21**: The loop responsible for populating the vector of participants `a[j]` is hit 223 times in the slow run but only 15 times in the fast run. This implies that the number of sections each participant covers is more extensive in the slow input, leading to more entries in `a[j]`.

3. **Line 26**: The sort operation is triggered 20 times in the slow input compared to 7 times in the fast input. This indicates that sorting is a critical performance bottleneck.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following performance-characterizing invariants can be derived:

1. **Sorting Frequency and Input Coverage**:
   - **Natural Language Invariant**: "Performance degrades when the number of participants covering each section is high, leading to frequent and expensive sorting operations. If many participants span multiple sections, the sorting operation on each section becomes a significant bottleneck."
   - **Threshold**: This situation tends to occur when multiple participants have overlapping coverage over many sections, leading to increased complexity in determining the section winner.

2. **Participant Overlap**:
   - **Natural Language Invariant**: "When participants have starting and ending sections that overlap significantly with each other, the program spends more time managing and sorting these overlapping entries."
   - **Threshold**: A threshold for this invariant could be when the average number of participants per section approaches the upper limit set by `m` (i.e., close to 100 participants overlapping in sections).

3. **Computation Time Per Section**:
   - **Natural Language Invariant**: "If the range of sections (`r - l`) a participant covers is large for many participants, it results in heavy computational overhead to evaluate the best participant for each section."
   - **Threshold**: This might manifest when the average range (`r - l + 1`) covered by athletes is large, indicating higher overlaps and more extensive sorting operations per section.

By implementing performance checks based on these invariants, the program could anticipate potential slowdowns and optimize or warn about situations that could lead to inefficient execution. These checks are not meant to be placed within the tight loops but rather as pre-computation checks or limits that signal potential inefficiencies based on input characteristics.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
In Chelyabinsk lives a much respected businessman Nikita with a strange nickname "Boss". Once Nikita decided to go with his friend Alex to the Summer Biathlon World Cup. Nikita, as a very important person, received a token which allows to place bets on each section no more than on one competitor.

To begin with friends learned the rules: in the race there are n sections of equal length and m participants. The participants numbered from 1 to m. About each participant the following is known:

  * li — the number of the starting section, 
  * ri — the number of the finishing section (li ≤ ri),
  * ti — the time a biathlete needs to complete an section of the path,
  * ci — the profit in roubles. If the i-th sportsman wins on one of the sections, the profit will be given to the man who had placed a bet on that sportsman.



The i-th biathlete passes the sections from li to ri inclusive. The competitor runs the whole way in (ri - li + 1)·ti time units. It takes him exactly ti time units to pass each section. In case of the athlete's victory on k sections the man who has betted on him receives k·ci roubles.

In each section the winner is determined independently as follows: if there is at least one biathlete running this in this section, then among all of them the winner is the one who has ran this section in minimum time (spent minimum time passing this section). In case of equality of times the athlete with the smaller index number wins. If there are no participants in this section, then the winner in this section in not determined. We have to say that in the summer biathlon all the participants are moving at a constant speed.

We should also add that Nikita can bet on each section and on any contestant running in this section.

Help the friends find the maximum possible profit.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 100). Then follow m lines, each containing 4 integers li, ri, ti, ci (1 ≤ li ≤ ri ≤ n, 1 ≤ ti, ci ≤ 1000).

Output

Print a single integer, the maximal profit in roubles that the friends can get. In each of n sections it is not allowed to place bets on more than one sportsman.

Examples

Input

4 4
1 4 20 5
1 3 21 10
3 3 4 30
3 4 4 20


Output

60

Input

8 4
1 5 24 10
2 4 6 15
4 6 30 50
6 7 4 20


Output

105

Note

In the first test the optimal bet is: in the 1-2 sections on biathlete 1, in section 3 on biathlete 3, in section 4 on biathlete 4. Total: profit of 5 rubles for 1 section, the profit of 5 rubles for 2 section, profit of 30 rubles for a 3 section, profit of 20 rubles for 4 section. Total profit 60 rubles.

In the second test the optimal bet is: on 1 and 5 sections on biathlete 1, in the 2-4 sections on biathlete 2, in the 6-7 sections on athlete 4. There is no winner in the 8 section. Total: profit of 10 rubles for 1 section, the profit of 15 rubles for 2,3,4 section, profit of 10 rubles for a 5 section, profit of 20 rubles for 6, 7 section. Total profit 105 rubles.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checkers

Let's implement the performance-characterizing invariants we derived earlier as C++ checker functions.

1. **Sorting Frequency and Input Coverage**:
   - **C++ Invariant Checker**: This checks if there are too many athletes covering an average section, leading to frequent and expensive sorting operations.
   ```cpp
   void check_sort_invariant(int total_athletes, int total_sections) {
       if (total_athletes / total_sections > 10) { // Example threshold
           cerr << "Warning: sort_invariant triggered - too many athletes per section." << endl;
           abort();
       }
   }
   ```

2. **Participant Overlap**:
   - **C++ Invariant Checker**: This checks for significant overlap in the sections covered by different athletes.
   ```cpp
   void check_overlap_invariant(int max_overlap, int threshold = 20) {
       if (max_overlap > threshold) {
           cerr << "Warning: overlap_invariant triggered - excessive overlap in sections." << endl;
           abort();
       }
   }
   ```

3. **Computation Time Per Section**:
   - **C++ Invariant Checker**: This checks if the average section coverage length is too large, indicating potential computational overhead.
   ```cpp
   void check_coverage_invariant(int total_coverage, int num_athletes) {
       if (total_coverage / num_athletes > 15) { // Example threshold
           cerr << "Warning: coverage_invariant triggered - high average section coverage." << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checkers into the Original Program

Now we will integrate these checkers into the provided C++ program at appropriate locations.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int inf = 1e9;

struct item {
    int c, t, num;
};

bool boolf(item p, item p1) {
    return p.t < p1.t || (p.t == p1.t && p.num < p1.num);
}

// Checker functions for performance invariants
void check_sort_invariant(int total_athletes, int total_sections) {
    if (total_athletes / total_sections > 10) { // Example threshold
        cerr << "Warning: sort_invariant triggered - too many athletes per section." << endl;
        abort();
    }
}

void check_overlap_invariant(int max_overlap, int threshold = 20) {
    if (max_overlap > threshold) {
        cerr << "Warning: overlap_invariant triggered - excessive overlap in sections." << endl;
        abort();
    }
}

void check_coverage_invariant(int total_coverage, int num_athletes) {
    if (total_coverage / num_athletes > 15) { // Example threshold
        cerr << "Warning: coverage_invariant triggered - high average section coverage." << endl;
        abort();
    }
}

int main() {
    int n, m, i, j;
    cin >> n >> m;
    vector<item> a[200];
    int total_coverage = 0;
    int max_overlap = 0;

    for (int i = 0; i < m; i++) {
        int l, r, t, c;
        cin >> l >> r >> t >> c;
        item tt;
        tt.num = i;
        tt.t = t;
        tt.c = c;
        total_coverage += (r - l + 1);
        for (j = l; j <= r; j++) {
            a[j].push_back(tt);
            max_overlap = max(max_overlap, (int)a[j].size());
        }
    }

    // Execute checkers after data input
    check_sort_invariant(m, n); // Check for sorting bottleneck
    check_overlap_invariant(max_overlap); // Check for section overlap issues
    check_coverage_invariant(total_coverage, m); // Check for average coverage issues

    int ans = 0;
    for (i = 1; i <= n; i++) {
        if (a[i].empty()) continue;
        sort(a[i].begin(), a[i].end(), boolf);
        item anst = a[i][0];
        ans += anst.c;
    }
    cout << ans;
    return 0;
}
```

### Explanation

- **Sorting Frequency and Input Coverage** (`check_sort_invariant`): This checker is called after input parsing to ensure no excessive sorting occurs due to too many athletes in sections.

- **Participant Overlap** (`check_overlap_invariant`): This checker monitors the maximum overlap of athletes across sections to prevent overly complex sorting operations.

- **Computation Time Per Section** (`check_coverage_invariant`): Checks if the average length of coverage per athlete is excessively high, indicating potential for slow computations. 

These checkers help proactively identify conditions that could lead to performance degradation. They are placed strategically after input parsing to avoid introducing overhead in critical loops.

