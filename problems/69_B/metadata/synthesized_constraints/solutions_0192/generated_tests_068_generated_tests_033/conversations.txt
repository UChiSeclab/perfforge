system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

In Chelyabinsk lives a much respected businessman Nikita with a strange nickname "Boss". Once Nikita decided to go with his friend Alex to the Summer Biathlon World Cup. Nikita, as a very important person, received a token which allows to place bets on each section no more than on one competitor.

To begin with friends learned the rules: in the race there are n sections of equal length and m participants. The participants numbered from 1 to m. About each participant the following is known:

  * li — the number of the starting section, 
  * ri — the number of the finishing section (li ≤ ri),
  * ti — the time a biathlete needs to complete an section of the path,
  * ci — the profit in roubles. If the i-th sportsman wins on one of the sections, the profit will be given to the man who had placed a bet on that sportsman.



The i-th biathlete passes the sections from li to ri inclusive. The competitor runs the whole way in (ri - li + 1)·ti time units. It takes him exactly ti time units to pass each section. In case of the athlete's victory on k sections the man who has betted on him receives k·ci roubles.

In each section the winner is determined independently as follows: if there is at least one biathlete running this in this section, then among all of them the winner is the one who has ran this section in minimum time (spent minimum time passing this section). In case of equality of times the athlete with the smaller index number wins. If there are no participants in this section, then the winner in this section in not determined. We have to say that in the summer biathlon all the participants are moving at a constant speed.

We should also add that Nikita can bet on each section and on any contestant running in this section.

Help the friends find the maximum possible profit.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 100). Then follow m lines, each containing 4 integers li, ri, ti, ci (1 ≤ li ≤ ri ≤ n, 1 ≤ ti, ci ≤ 1000).

Output

Print a single integer, the maximal profit in roubles that the friends can get. In each of n sections it is not allowed to place bets on more than one sportsman.

Examples

Input

4 4
1 4 20 5
1 3 21 10
3 3 4 30
3 4 4 20


Output

60

Input

8 4
1 5 24 10
2 4 6 15
4 6 30 50
6 7 4 20


Output

105

Note

In the first test the optimal bet is: in the 1-2 sections on biathlete 1, in section 3 on biathlete 3, in section 4 on biathlete 4. Total: profit of 5 rubles for 1 section, the profit of 5 rubles for 2 section, profit of 30 rubles for a 3 section, profit of 20 rubles for 4 section. Total profit 60 rubles.

In the second test the optimal bet is: on 1 and 5 sections on biathlete 1, in the 2-4 sections on biathlete 2, in the 6-7 sections on athlete 4. There is no winner in the 8 section. Total: profit of 10 rubles for 1 section, the profit of 15 rubles for 2,3,4 section, profit of 10 rubles for a 5 section, profit of 20 rubles for 6, 7 section. Total profit 105 rubles.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long int maxx(long long int a, long long int b) { return a > b ? a : b; }
long long int n, m;
long long int bs(long long int lo, long long int hi) {
  long long int lolo = lo;
  long long int hihi = hi;
  long long int ans = 0;
  while (lolo <= hihi) {
    long long int mid = (lolo + hihi) / 2;
    if (m * mid <= n - mid + 1) {
      ans = mid;
      lolo = mid + 1;
    } else
      hihi = mid - 1;
  }
  return ans;
}
vector<pair<pair<int, int>, int> > v[101];
void solve() {
  int n, m;
  cin >> n >> m;
  for (int i = 0; i < m; i++) {
    int l, r, t, c;
    cin >> l >> r >> t >> c;
    for (int j = l; j <= r; j++) v[j].push_back({{t, i}, c});
  }
  for (int i = 1; i <= 100; i++) sort(v[i].begin(), v[i].end());
  int ans = 0;
  for (int i = 1; i <= 100; i++)
    if (v[i].size() > 0) ans += v[i][0].second;
  cout << ans << endl;
}
int main() { solve(); }


(G) The Slow & Fast Inputs

(G.1) Slow Input

20 30
1 20 49 91
15 15 60 37
14 14 3 79
11 12 81 66
8 12 71 31
3 13 8 14
2 10 11 35
19 20 7 28
12 14 6 75
16 18 100 100
20 20 89 74
16 16 27 98
18 18 21 24
1 18 69 98
7 13 70 57
9 20 41 79
17 17 75 75
11 16 19 14
1 15 62 59
12 15 33 91
3 17 10 79
15 16 100 80
10 16 5 5
9 19 53 100
9 18 65 42
4 13 34 13
6 13 61 47
17 19 68 25
5 5 42 59
6 8 48 92


(G.2) Fast Input

8 4
1 3 24 10
2 4 6 15
4 6 30 50
6 7 4 20


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long int maxx(long long int a, long long int b) { return a > b ? a : b; } /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long int n, m; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long int bs(long long int lo, long long int hi) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  long long int lolo = lo; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  long long int hihi = hi; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  long long int ans = 0; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  while (lolo <= hihi) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    long long int mid = (lolo + hihi) / 2; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    if (m * mid <= n - mid + 1) { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
      ans = mid; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
      lolo = mid + 1; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    } else /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
      hihi = mid - 1; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<pair<int, int>, int> > v[101]; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < m; i++) { /* line 23 slow_hit_count: 31, fast_hit_count: 5 */
    int l, r, t, c; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> l >> r >> t >> c; /* line 25 slow_hit_count: 30, fast_hit_count: 4 */
    for (int j = l; j <= r; j++) v[j].push_back({{t, i}, c}); /* line 26 slow_hit_count: 223, fast_hit_count: 15 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= 100; i++) sort(v[i].begin(), v[i].end()); /* line 28 slow_hit_count: 101, fast_hit_count: 101 */
  int ans = 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 100; i++) /* line 30 slow_hit_count: 101, fast_hit_count: 101 */
    if (v[i].size() > 0) ans += v[i][0].second; /* line 31 slow_hit_count: 100, fast_hit_count: 100 */
  cout << ans << endl; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
int main() { solve(); } /* line 34 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance of the given C program and identify the potential causes for slowdown, let's go through the steps outlined in the task:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-level Hit Counts:**

   - **Line 23-26:** These lines read input data and populate the vector `v` for each participant. The hit count is 31 for the slow input and 5 for the fast input, revealing that the slow input contains more participants (30 vs. 4).
   - **Line 26:** The inner loop in line 26 has a hit count of 223 for the slow input and 15 for the fast input. This indicates that the slow input involves significantly more operations to populate vector `v`, as it covers more sections.
   - **Line 28:** Sorting the vector `v` for each section is executed 101 times for both inputs, but the sorting operation will scale with the number of entries in each vector, which is much larger for the slow input due to its 30 participants.

2. **Inference on Code Interaction:**

   - The program’s performance is largely affected by how `v` is populated and sorted. With more participants, especially with overlapping sections, the vectors for each section become larger and more costly to sort.
   - Sorting operations (line 28) scale with the number of participants and their overlapping sections, leading to increased time complexity.

### Phase 2: Derive Performance-characterizing Invariants

Based on the observations above, here are some natural language invariants to describe the conditions under which the program tends to slow down:

1. **High Participant Count with Overlapping Sections:**
   - *Invariant:* "When there are many participants with overlapping sections, vectors for these sections grow large, leading to costly sorting operations. This increases the program’s running time significantly."

2. **Large Number of Sections with Participants:**
   - *Invariant:* "If most sections have several participants, especially with overlapping ranges, the initialization and sorting operations for these sections become a performance bottleneck."

3. **Extensive Range of Sections per Participant:**
   - *Invariant:* "When participants cover extensive ranges of sections, the insertion operations into vectors for these sections become repetitive and costly, affecting performance."

### Conclusion

The program's performance tends to degrade when there is a high density of participants across sections, especially if each participant spans a wide range of sections. This results in larger data structures that require more extensive sorting, leading to increased execution time. By focusing on these invariants, it is possible to identify and optimize the algorithm's bottlenecks for better handling such scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
In Chelyabinsk lives a much respected businessman Nikita with a strange nickname "Boss". Once Nikita decided to go with his friend Alex to the Summer Biathlon World Cup. Nikita, as a very important person, received a token which allows to place bets on each section no more than on one competitor.

To begin with friends learned the rules: in the race there are n sections of equal length and m participants. The participants numbered from 1 to m. About each participant the following is known:

  * li — the number of the starting section, 
  * ri — the number of the finishing section (li ≤ ri),
  * ti — the time a biathlete needs to complete an section of the path,
  * ci — the profit in roubles. If the i-th sportsman wins on one of the sections, the profit will be given to the man who had placed a bet on that sportsman.



The i-th biathlete passes the sections from li to ri inclusive. The competitor runs the whole way in (ri - li + 1)·ti time units. It takes him exactly ti time units to pass each section. In case of the athlete's victory on k sections the man who has betted on him receives k·ci roubles.

In each section the winner is determined independently as follows: if there is at least one biathlete running this in this section, then among all of them the winner is the one who has ran this section in minimum time (spent minimum time passing this section). In case of equality of times the athlete with the smaller index number wins. If there are no participants in this section, then the winner in this section in not determined. We have to say that in the summer biathlon all the participants are moving at a constant speed.

We should also add that Nikita can bet on each section and on any contestant running in this section.

Help the friends find the maximum possible profit.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 100). Then follow m lines, each containing 4 integers li, ri, ti, ci (1 ≤ li ≤ ri ≤ n, 1 ≤ ti, ci ≤ 1000).

Output

Print a single integer, the maximal profit in roubles that the friends can get. In each of n sections it is not allowed to place bets on more than one sportsman.

Examples

Input

4 4
1 4 20 5
1 3 21 10
3 3 4 30
3 4 4 20


Output

60

Input

8 4
1 5 24 10
2 4 6 15
4 6 30 50
6 7 4 20


Output

105

Note

In the first test the optimal bet is: in the 1-2 sections on biathlete 1, in section 3 on biathlete 3, in section 4 on biathlete 4. Total: profit of 5 rubles for 1 section, the profit of 5 rubles for 2 section, profit of 30 rubles for a 3 section, profit of 20 rubles for 4 section. Total profit 60 rubles.

In the second test the optimal bet is: on 1 and 5 sections on biathlete 1, in the 2-4 sections on biathlete 2, in the 6-7 sections on athlete 4. There is no winner in the 8 section. Total: profit of 10 rubles for 1 section, the profit of 15 rubles for 2,3,4 section, profit of 10 rubles for a 5 section, profit of 20 rubles for 6, 7 section. Total profit 105 rubles.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants as C++ Checkers

Based on the performance-characterizing invariants identified earlier, we can implement the following C++ checkers to monitor potential performance bottlenecks:

```cpp
void check_participant_overlap(int totalParticipants, int sections, int maxSections) {
    // If the number of participants is large and they overlap many sections, there may be a slowdown
    if (totalParticipants > 20 && sections > 10) {
        cerr << "Warning: Performance bottleneck due to high participant overlap across sections!" << endl;
        abort();
    }
}

void check_large_vector_sorting(std::vector<std::pair<std::pair<int, int>, int>>& v) {
    // If the vector size for a section is large, sorting may become expensive
    for (int i = 1; i <= 100; ++i) {
        if (v[i].size() > 10) {
            cerr << "Warning: Performance bottleneck due to sorting large vectors!" << endl;
            abort();
        }
    }
}

void check_extensive_range(int l, int r, int maxSections) {
    // If a participant covers an extensive range of sections, it may lead to performance issues
    if ((r - l + 1) > (maxSections / 2)) {
        cerr << "Warning: Performance bottleneck due to extensive section range for a participant!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code Into Original Program

Now, let's integrate these checkers into the C++ program. We should ensure these checks are placed effectively to monitor conditions without adding significant overhead within tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions based on the identified performance invariants
void check_participant_overlap(int totalParticipants, int sections, int maxSections) {
    if (totalParticipants > 20 && sections > 10) {
        cerr << "Warning: Performance bottleneck due to high participant overlap across sections!" << endl;
        abort();
    }
}

void check_large_vector_sorting(vector<pair<pair<int, int>, int>>& v) {
    for (int i = 1; i <= 100; ++i) {
        if (v[i].size() > 10) {
            cerr << "Warning: Performance bottleneck due to sorting large vectors!" << endl;
            abort();
        }
    }
}

void check_extensive_range(int l, int r, int maxSections) {
    if ((r - l + 1) > (maxSections / 2)) {
        cerr << "Warning: Performance bottleneck due to extensive section range for a participant!" << endl;
        abort();
    }
}

long long int maxx(long long int a, long long int b) { return a > b ? a : b; }
vector<pair<pair<int, int>, int>> v[101];

void solve() {
    int n, m;
    cin >> n >> m;

    // Check for potential overlap issues with participants and sections
    check_participant_overlap(m, n, 100);

    for (int i = 0; i < m; i++) {
        int l, r, t, c;
        cin >> l >> r >> t >> c;

        // Check for extensive range of sections for each participant
        check_extensive_range(l, r, n);

        for (int j = l; j <= r; j++) {
            v[j].push_back({{t, i}, c});
        }
    }

    // Check for large vector sorting issues in each section after data input
    check_large_vector_sorting(v);

    for (int i = 1; i <= 100; i++) {
        sort(v[i].begin(), v[i].end());
    }

    int ans = 0;
    for (int i = 1; i <= 100; i++) {
        if (v[i].size() > 0) ans += v[i][0].second;
    }
    cout << ans << endl;
}

int main() {
    solve();
}
```

**Explanation:**

- **`check_participant_overlap`:** This function is placed after reading the initial input values for `n` and `m` to ensure the input doesn't have too many overlapping participants across sections.
- **`check_large_vector_sorting`:** This function is called once the vectors `v` are fully populated, just before sorting, to ensure that sorting operations are not being performed on excessively large vectors.
- **`check_extensive_range`:** This is invoked within the loop where participant data is read, checking if any participant spans too many sections, potentially causing performance issues.

These checks provide an early warning for potential performance bottlenecks, helping to optimize the code for better handling of edge cases.

