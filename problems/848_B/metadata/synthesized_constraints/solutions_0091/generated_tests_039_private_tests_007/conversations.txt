system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Wherever the destination is, whoever we meet, let's render this song together.

On a Cartesian coordinate plane lies a rectangular stage of size w × h, represented by a rectangle with corners (0, 0), (w, 0), (w, h) and (0, h). It can be seen that no collisions will happen before one enters the stage.

On the sides of the stage stand n dancers. The i-th of them falls into one of the following groups: 

  * Vertical: stands at (xi, 0), moves in positive y direction (upwards); 
  * Horizontal: stands at (0, yi), moves in positive x direction (rightwards). 

<image>

According to choreography, the i-th dancer should stand still for the first ti milliseconds, and then start moving in the specified direction at 1 unit per millisecond, until another border is reached. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

When two dancers collide (i.e. are on the same point at some time when both of them are moving), they immediately exchange their moving directions and go on.

<image>

Dancers stop when a border of the stage is reached. Find out every dancer's stopping position.

Input

The first line of input contains three space-separated positive integers n, w and h (1 ≤ n ≤ 100 000, 2 ≤ w, h ≤ 100 000) — the number of dancers and the width and height of the stage, respectively.

The following n lines each describes a dancer: the i-th among them contains three space-separated integers gi, pi, and ti (1 ≤ gi ≤ 2, 1 ≤ pi ≤ 99 999, 0 ≤ ti ≤ 100 000), describing a dancer's group gi (gi = 1 — vertical, gi = 2 — horizontal), position, and waiting time. If gi = 1 then pi = xi; otherwise pi = yi. It's guaranteed that 1 ≤ xi ≤ w - 1 and 1 ≤ yi ≤ h - 1. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

Output

Output n lines, the i-th of which contains two space-separated integers (xi, yi) — the stopping position of the i-th dancer in the input.

Examples

Input

8 10 8
1 1 10
1 4 13
1 7 1
1 8 2
2 2 0
2 5 14
2 6 0
2 6 1


Output

4 8
10 5
8 8
10 6
10 2
1 8
7 8
10 6


Input

3 2 3
1 1 2
2 1 1
1 1 5


Output

1 3
2 1
1 3

Note

The first example corresponds to the initial setup in the legend, and the tracks of dancers are marked with different colours in the following figure.

<image>

In the second example, no dancers collide.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
vector<pair<int, int> > px[200010], py[200010];
const int N = 1e5 + 1;
pair<int, int> ans[200010], P[200010];
int main() {
  int n, w, h;
  cin >> n >> w >> h;
  int mx = 0;
  for (int i = 1; i <= n; i++) {
    int g, p, t;
    scanf("%d %d %d", &g, &p, &t);
    if (g == 1)
      px[p - t + N].push_back(pair<int, int>(p, i));
    else
      py[p - t + N].push_back(pair<int, int>(p, i));
    mx = max(mx, p - t + N);
  }
  for (int i = 1; i <= mx; i++) sort(px[i].begin(), px[i].end());
  for (int i = 1; i <= mx; i++) sort(py[i].begin(), py[i].end());
  for (int i = 1; i <= mx; i++) {
    int nn = 0;
    for (auto p : px[i]) {
      P[++nn] = pair<int, int>(p.first, h);
    }
    for (int j = py[i].size() - 1; j >= 0; j--)
      P[++nn] = pair<int, int>(w, py[i][j].first);
    for (int j = px[i].size() - 1; j >= 0; j--) {
      int id = px[i][j].second;
      ans[id] = P[nn--];
    }
    for (auto p : py[i]) {
      int id = p.second;
      ans[id] = P[nn--];
    }
  }
  for (int i = 1; i <= n; i++) printf("%d %d\n", ans[i].first, ans[i].second);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

20 50000 50000
2 45955 55488
1 8618 29337
2 3767 90811
2 42724 33558
1 46985 56518
2 21094 30627
2 5787 15320
1 4262 91306
2 37231 46764
1 18125 27658
1 43778 12317
1 31330 50288
1 18992 28525
1 29387 9962
1 44654 54187
2 45485 55018
2 36850 46383
1 44649 54182
1 40922 50455
2 12781 99825


(G.2) Fast Input

20 15 15
2 7 100000
1 2 100000
2 1 100000
1 9 100000
2 4 100000
2 3 100000
2 14 100000
1 6 100000
1 10 100000
2 5 100000
2 13 100000
1 8 100000
1 13 100000
1 14 100000
2 10 100000
1 5 100000
1 11 100000
1 12 100000
1 1 100000
2 2 100000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int> > px[200010], py[200010]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e5 + 1; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
pair<int, int> ans[200010], P[200010]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int n, w, h; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> w >> h; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int mx = 0; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 10 slow_hit_count: 21, fast_hit_count: 21 */
    int g, p, t; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d %d %d", &g, &p, &t); /* line 12 slow_hit_count: 20, fast_hit_count: 20 */
    if (g == 1) /* line 13 slow_hit_count: 20, fast_hit_count: 20 */
      px[p - t + N].push_back(pair<int, int>(p, i)); /* line 14 slow_hit_count: 11, fast_hit_count: 11 */
    else /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
      py[p - t + N].push_back(pair<int, int>(p, i)); /* line 16 slow_hit_count: 9, fast_hit_count: 9 */
    mx = max(mx, p - t + N); /* line 17 slow_hit_count: 20, fast_hit_count: 20 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= mx; i++) sort(px[i].begin(), px[i].end()); /* line 19 slow_hit_count: 131463, fast_hit_count: 16 */
  for (int i = 1; i <= mx; i++) sort(py[i].begin(), py[i].end()); /* line 20 slow_hit_count: 131463, fast_hit_count: 16 */
  for (int i = 1; i <= mx; i++) { /* line 21 slow_hit_count: 131463, fast_hit_count: 16 */
    int nn = 0; /* line 22 slow_hit_count: 131462, fast_hit_count: 15 */
    for (auto p : px[i]) { /* line 23 slow_hit_count: 131473, fast_hit_count: 26 */
      P[++nn] = pair<int, int>(p.first, h); /* line 24 slow_hit_count: 11, fast_hit_count: 11 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = py[i].size() - 1; j >= 0; j--) /* line 26 slow_hit_count: 131471, fast_hit_count: 24 */
      P[++nn] = pair<int, int>(w, py[i][j].first); /* line 27 slow_hit_count: 9, fast_hit_count: 9 */
    for (int j = px[i].size() - 1; j >= 0; j--) { /* line 28 slow_hit_count: 131473, fast_hit_count: 26 */
      int id = px[i][j].second; /* line 29 slow_hit_count: 11, fast_hit_count: 11 */
      ans[id] = P[nn--]; /* line 30 slow_hit_count: 11, fast_hit_count: 11 */
    } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto p : py[i]) { /* line 32 slow_hit_count: 131471, fast_hit_count: 24 */
      int id = p.second; /* line 33 slow_hit_count: 9, fast_hit_count: 9 */
      ans[id] = P[nn--]; /* line 34 slow_hit_count: 9, fast_hit_count: 9 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) printf("%d %d\n", ans[i].first, ans[i].second); /* line 37 slow_hit_count: 21, fast_hit_count: 21 */
  return 0; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the hit counts, we can identify the lines of code that are significantly more executed during the slow input compared to the fast input:

1. **Lines 19 and 20**: These lines perform sorting operations on `px[i]` and `py[i]`. They both have an extraordinarily high hit count for the slow input (`131,463` for both) compared to the fast input (`16` for both). This indicates that the operations within these loops are likely contributing significantly to the slowdown.

2. **Line 21**: The loop iterating over `mx` is also executed `131,463` times in the slow case versus `16` in the fast case. This suggests that `mx` is significantly larger for the slow input, leading to more iterations and thus more operations.

3. **Lines 23, 26, 28, and 32**: These lines involve iterating over the vectors `px[i]` and `py[i]`. The hit counts for these lines (and the subsequent lines within these loops) are significantly higher in the slow input, further contributing to the performance issues.

### Phase 2: Derive Performance-Characterizing Invariants

Given the analysis above, we can derive the following performance-characterizing invariants that explain the conditions under which the code slows down:

1. **Invariant on Sorting**:
   - **Natural Language**: "The performance of the program degrades notably when the range of indices `px[i]` or `py[i]`, determined by `p - t + N`, spans a large interval. This causes repeated sorting operations over potentially large collections of dancers, especially when they are not evenly distributed across this range."
   - **Explanation**: If the values of `p - t` vary widely, the effective range of indices (i.e., `mx`) becomes large, resulting in multiple sorting operations on empty or small vectors, which cumulatively add up to a higher execution time.

2. **Invariant on Index Range**:
   - **Natural Language**: "The loop iterating over `mx` becomes particularly costly when `p - t + N` covers a large range, increasing the number of iterations in which even empty or redundant operations are performed."
   - **Explanation**: This occurs when the dancers' positions and their waiting times create a wide distribution in `p - t`, especially when the subtraction results in negative or unusually high values that still fall within the valid range due to the addition of `N`.

3. **Invariant on Vector Operations**:
   - **Natural Language**: "The accumulation of operations on vectors `px[i]` and `py[i]` is likely to cause a slow down when the vectors do not get evenly populated across their range, leading to unnecessary iterations over many empty or near-empty vectors."
   - **Explanation**: This condition is exacerbated when the dancers' initial positions and waiting times are such that they cluster only around certain indices while leaving others empty, causing the computational overhead without meaningful operations.

These invariants help to identify the patterns or conditions in the input that lead to a significant slowdown, without relying on specific values from the slow input, but rather focusing on the characteristics that lead to costly operations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Wherever the destination is, whoever we meet, let's render this song together.

On a Cartesian coordinate plane lies a rectangular stage of size w × h, represented by a rectangle with corners (0, 0), (w, 0), (w, h) and (0, h). It can be seen that no collisions will happen before one enters the stage.

On the sides of the stage stand n dancers. The i-th of them falls into one of the following groups: 

  * Vertical: stands at (xi, 0), moves in positive y direction (upwards); 
  * Horizontal: stands at (0, yi), moves in positive x direction (rightwards). 

<image>

According to choreography, the i-th dancer should stand still for the first ti milliseconds, and then start moving in the specified direction at 1 unit per millisecond, until another border is reached. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

When two dancers collide (i.e. are on the same point at some time when both of them are moving), they immediately exchange their moving directions and go on.

<image>

Dancers stop when a border of the stage is reached. Find out every dancer's stopping position.

Input

The first line of input contains three space-separated positive integers n, w and h (1 ≤ n ≤ 100 000, 2 ≤ w, h ≤ 100 000) — the number of dancers and the width and height of the stage, respectively.

The following n lines each describes a dancer: the i-th among them contains three space-separated integers gi, pi, and ti (1 ≤ gi ≤ 2, 1 ≤ pi ≤ 99 999, 0 ≤ ti ≤ 100 000), describing a dancer's group gi (gi = 1 — vertical, gi = 2 — horizontal), position, and waiting time. If gi = 1 then pi = xi; otherwise pi = yi. It's guaranteed that 1 ≤ xi ≤ w - 1 and 1 ≤ yi ≤ h - 1. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

Output

Output n lines, the i-th of which contains two space-separated integers (xi, yi) — the stopping position of the i-th dancer in the input.

Examples

Input

8 10 8
1 1 10
1 4 13
1 7 1
1 8 2
2 2 0
2 5 14
2 6 0
2 6 1


Output

4 8
10 5
8 8
10 6
10 2
1 8
7 8
10 6


Input

3 2 3
1 1 2
2 1 1
1 1 5


Output

1 3
2 1
1 3

Note

The first example corresponds to the initial setup in the legend, and the tracks of dancers are marked with different colours in the following figure.

<image>

In the second example, no dancers collide.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Invariants in C++

Based on the natural language invariants derived earlier, here are the C++ checker functions:

1. **Invariant on Sorting**: Checking for excessive sorting range.
2. **Invariant on Index Range**: Confirming `mx` is within a reasonable threshold.
3. **Invariant on Vector Operations**: Ensuring vectors aren't operated on excessively for negligible effect.

```cpp
void check_sorting_invariant(int range, int threshold) {
    if (range > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive sorting range!" << endl;
        abort();
    }
}

void check_index_range_invariant(int mx, int threshold) {
    if (mx > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - large mx leading to excessive operations!" << endl;
        abort();
    }
}

void check_vector_operations_invariant(int px_size, int py_size, int threshold) {
    if (px_size > threshold || py_size > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive operations on vectors!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checker functions into the original C++ code, placing them strategically to avoid performance degradation:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Threshold values based on reasonable assumptions for this problem
const int SORTING_THRESHOLD = 1000; // Example threshold for sorting range
const int MX_THRESHOLD = 1000; // Example threshold for mx
const int VECTOR_OP_THRESHOLD = 1000; // Example threshold for vector operation size

vector<pair<int, int> > px[200010], py[200010];
const int N = 1e5 + 1;
pair<int, int> ans[200010], P[200010];

// Function to check sorting invariant
void check_sorting_invariant(int range, int threshold) {
    if (range > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive sorting range!" << endl;
        abort();
    }
}

// Function to check index range invariant
void check_index_range_invariant(int mx, int threshold) {
    if (mx > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - large mx leading to excessive operations!" << endl;
        abort();
    }
}

// Function to check vector operations invariant
void check_vector_operations_invariant(int px_size, int py_size, int threshold) {
    if (px_size > threshold || py_size > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive operations on vectors!" << endl;
        abort();
    }
}

int main() {
    int n, w, h;
    cin >> n >> w >> h;
    int mx = 0;
    for (int i = 1; i <= n; i++) {
        int g, p, t;
        scanf("%d %d %d", &g, &p, &t);
        if (g == 1)
            px[p - t + N].push_back(pair<int, int>(p, i));
        else
            py[p - t + N].push_back(pair<int, int>(p, i));
        mx = max(mx, p - t + N);
    }

    // Check the index range invariant
    check_index_range_invariant(mx, MX_THRESHOLD);

    for (int i = 1; i <= mx; i++) {
        // Check sorting invariant before sorting
        if (!px[i].empty()) {
            check_sorting_invariant(px[i].size(), SORTING_THRESHOLD);
            sort(px[i].begin(), px[i].end());
        }
        if (!py[i].empty()) {
            check_sorting_invariant(py[i].size(), SORTING_THRESHOLD);
            sort(py[i].begin(), py[i].end());
        }
    }

    for (int i = 1; i <= mx; i++) {
        int nn = 0;
        for (auto p : px[i]) {
            P[++nn] = pair<int, int>(p.first, h);
        }
        for (int j = py[i].size() - 1; j >= 0; j--)
            P[++nn] = pair<int, int>(w, py[i][j].first);

        // Check vector operations invariant
        check_vector_operations_invariant(px[i].size(), py[i].size(), VECTOR_OP_THRESHOLD);

        for (int j = px[i].size() - 1; j >= 0; j--) {
            int id = px[i][j].second;
            ans[id] = P[nn--];
        }
        for (auto p : py[i]) {
            int id = p.second;
            ans[id] = P[nn--];
        }
    }
    for (int i = 1; i <= n; i++) printf("%d %d\n", ans[i].first, ans[i].second);
    return 0;
}
```

### Explanation:

- **Thresholds**: The thresholds (`SORTING_THRESHOLD`, `MX_THRESHOLD`, `VECTOR_OP_THRESHOLD`) are hypothetical and should be tuned based on profiling results or empirical analysis.
- **Placement**: The checkers are placed after input parsing and before any potential costly operations occur, ensuring that they do not affect the speed of tight loops.
- **Abort on Trigger**: If any of these conditions are triggered, the program will output a warning and terminate, which is useful for fuzzing or identifying performance bottlenecks in development.

