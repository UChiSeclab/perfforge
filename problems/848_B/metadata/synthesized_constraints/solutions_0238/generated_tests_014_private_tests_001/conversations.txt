system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Wherever the destination is, whoever we meet, let's render this song together.

On a Cartesian coordinate plane lies a rectangular stage of size w × h, represented by a rectangle with corners (0, 0), (w, 0), (w, h) and (0, h). It can be seen that no collisions will happen before one enters the stage.

On the sides of the stage stand n dancers. The i-th of them falls into one of the following groups: 

  * Vertical: stands at (xi, 0), moves in positive y direction (upwards); 
  * Horizontal: stands at (0, yi), moves in positive x direction (rightwards). 

<image>

According to choreography, the i-th dancer should stand still for the first ti milliseconds, and then start moving in the specified direction at 1 unit per millisecond, until another border is reached. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

When two dancers collide (i.e. are on the same point at some time when both of them are moving), they immediately exchange their moving directions and go on.

<image>

Dancers stop when a border of the stage is reached. Find out every dancer's stopping position.

Input

The first line of input contains three space-separated positive integers n, w and h (1 ≤ n ≤ 100 000, 2 ≤ w, h ≤ 100 000) — the number of dancers and the width and height of the stage, respectively.

The following n lines each describes a dancer: the i-th among them contains three space-separated integers gi, pi, and ti (1 ≤ gi ≤ 2, 1 ≤ pi ≤ 99 999, 0 ≤ ti ≤ 100 000), describing a dancer's group gi (gi = 1 — vertical, gi = 2 — horizontal), position, and waiting time. If gi = 1 then pi = xi; otherwise pi = yi. It's guaranteed that 1 ≤ xi ≤ w - 1 and 1 ≤ yi ≤ h - 1. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

Output

Output n lines, the i-th of which contains two space-separated integers (xi, yi) — the stopping position of the i-th dancer in the input.

Examples

Input

8 10 8
1 1 10
1 4 13
1 7 1
1 8 2
2 2 0
2 5 14
2 6 0
2 6 1


Output

4 8
10 5
8 8
10 6
10 2
1 8
7 8
10 6


Input

3 2 3
1 1 2
2 1 1
1 1 5


Output

1 3
2 1
1 3

Note

The first example corresponds to the initial setup in the legend, and the tracks of dancers are marked with different colours in the following figure.

<image>

In the second example, no dancers collide.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using vi = vector<int>;
using db = double;
const int N = 2e5L + 11;
int g[N], p[N], t[N];
map<int, vi> mp[3];
int x[N], y[N];
bool cmp(int i, int j) { return p[i] < p[j]; }
using pii = pair<int, int>;
bool cmp2(pii a, pii b) {
  if (a.second == b.second) return a.first < b.first;
  return a.second > b.second;
}
int main() {
  ios ::sync_with_stdio(0);
  int n, w, h;
  cin >> n >> w >> h;
  for (int i = 1; i <= n; i++) {
    cin >> g[i] >> p[i] >> t[i];
    mp[g[i]][p[i] - t[i]].push_back(i);
    if (g[i] == 1) {
      x[i] = p[i];
      y[i] = h;
    } else {
      y[i] = p[i];
      x[i] = w;
    }
  }
  for (int i = -100000; i <= 100000; i++)
    if (mp[1].count(i) && mp[2].count(i)) {
      sort(mp[1][i].begin(), mp[1][i].end(), cmp);
      sort(mp[2][i].begin(), mp[2][i].end(), cmp);
      reverse(mp[2][i].begin(), mp[2][i].end());
      vector<pii> v;
      for (int j : mp[1][i]) v.push_back({x[j], y[j]});
      for (int j : mp[2][i]) v.push_back({x[j], y[j]});
      sort(v.begin(), v.end(), cmp2);
      int t = 0;
      for (int j : mp[2][i]) {
        x[j] = v[t].first;
        y[j] = v[t].second;
        t++;
      }
      for (int j : mp[1][i]) {
        x[j] = v[t].first;
        y[j] = v[t].second;
        t++;
      }
    }
  for (int i = 1; i <= n; i++) cout << x[i] << ' ' << y[i] << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

15 15 15
1 10 1
2 11 0
2 6 4
1 1 0
1 7 5
1 14 3
1 3 1
1 4 0
1 9 0
2 10 1
1 12 1
2 2 0
1 5 3
2 3 0
2 4 2


(G.2) Fast Input

5 20 20
1 15 3
2 15 3
2 3 1
2 1 0
1 16 4


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using vi = vector<int>; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using db = double; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 2e5L + 11; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int g[N], p[N], t[N]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
map<int, vi> mp[3]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int x[N], y[N]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp(int i, int j) { return p[i] < p[j]; } /* line 10 slow_hit_count: 10, fast_hit_count: 2 */
using pii = pair<int, int>; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp2(pii a, pii b) { /* line 12 slow_hit_count: 18, fast_hit_count: 4 */
  if (a.second == b.second) return a.first < b.first; /* line 13 slow_hit_count: 18, fast_hit_count: 4 */
  return a.second > b.second; /* line 14 slow_hit_count: 10, fast_hit_count: 2 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  ios ::sync_with_stdio(0); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  int n, w, h; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> w >> h; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 20 slow_hit_count: 16, fast_hit_count: 6 */
    cin >> g[i] >> p[i] >> t[i]; /* line 21 slow_hit_count: 15, fast_hit_count: 5 */
    mp[g[i]][p[i] - t[i]].push_back(i); /* line 22 slow_hit_count: 15, fast_hit_count: 5 */
    if (g[i] == 1) { /* line 23 slow_hit_count: 15, fast_hit_count: 5 */
      x[i] = p[i]; /* line 24 slow_hit_count: 9, fast_hit_count: 2 */
      y[i] = h; /* line 25 slow_hit_count: 9, fast_hit_count: 2 */
    } else { /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      y[i] = p[i]; /* line 27 slow_hit_count: 6, fast_hit_count: 3 */
      x[i] = w; /* line 28 slow_hit_count: 6, fast_hit_count: 3 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = -100000; i <= 100000; i++) /* line 31 slow_hit_count: 200002, fast_hit_count: 200002 */
    if (mp[1].count(i) && mp[2].count(i)) { /* line 32 slow_hit_count: 200001, fast_hit_count: 200001 */
      sort(mp[1][i].begin(), mp[1][i].end(), cmp); /* line 33 slow_hit_count: 3, fast_hit_count: 1 */
      sort(mp[2][i].begin(), mp[2][i].end(), cmp); /* line 34 slow_hit_count: 3, fast_hit_count: 1 */
      reverse(mp[2][i].begin(), mp[2][i].end()); /* line 35 slow_hit_count: 3, fast_hit_count: 1 */
      vector<pii> v; /* line 36 slow_hit_count: 6, fast_hit_count: 2 */
      for (int j : mp[1][i]) v.push_back({x[j], y[j]}); /* line 37 slow_hit_count: 10, fast_hit_count: 3 */
      for (int j : mp[2][i]) v.push_back({x[j], y[j]}); /* line 38 slow_hit_count: 8, fast_hit_count: 2 */
      sort(v.begin(), v.end(), cmp2); /* line 39 slow_hit_count: 3, fast_hit_count: 1 */
      int t = 0; /* line 40 slow_hit_count: 3, fast_hit_count: 1 */
      for (int j : mp[2][i]) { /* line 41 slow_hit_count: 8, fast_hit_count: 2 */
        x[j] = v[t].first; /* line 42 slow_hit_count: 5, fast_hit_count: 1 */
        y[j] = v[t].second; /* line 43 slow_hit_count: 5, fast_hit_count: 1 */
        t++; /* line 44 slow_hit_count: 5, fast_hit_count: 1 */
      } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j : mp[1][i]) { /* line 46 slow_hit_count: 10, fast_hit_count: 3 */
        x[j] = v[t].first; /* line 47 slow_hit_count: 7, fast_hit_count: 2 */
        y[j] = v[t].second; /* line 48 slow_hit_count: 7, fast_hit_count: 2 */
        t++; /* line 49 slow_hit_count: 7, fast_hit_count: 2 */
      } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) cout << x[i] << ' ' << y[i] << '\n'; /* line 52 slow_hit_count: 16, fast_hit_count: 6 */
  return 0; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance issues in the given C program, let's break down the analysis in two phases as requested:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison**:
   - The loop on line 31 looping from -100,000 to 100,000 runs a total of 200,002 times for both fast and slow inputs, indicating a potential performance bottleneck.
   - Inside this loop, line 32 checks whether both vertical (`mp[1]`) and horizontal (`mp[2]`) dancers exist for a given key `i`. This line is hit 200,001 times.
   - The nested operations on lines 33 to 49 are executed far fewer times, but cumulatively they involve sorting and manipulating vectors of dancers when collisions are detected.

2. **Pinpointed Expensive Operations**:
   - Sorting operations on lines 33, 34, and 39 (using `sort` with custom comparators) are computationally expensive and triggered significantly more times on the slow input (hits 3 times compared to 1 time).
   - The use of `reverse` on line 35 and the subsequent vector operations suggest manipulation of potentially large datasets during these iterations.

3. **Inferred Data Interaction**:
   - The performance hit is likely due to the way the dancers' movements and collisions are managed. Once a collision is detected (lines 32 onward), the logic involves costly sorting and reorganizing of dancers, which is exacerbated when there are more simultaneous or overlapping collisions.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following performance-characterizing invariants can be identified:

1. **Invariant on Large Iterative Ranges**:
   - **Natural Language Description**: "The execution becomes slow when the number of unique time intervals, represented by (p[i] - t[i]), is high, causing extensive iterations over the range from -100,000 to 100,000. This leads to repeated checks for possible dancer collisions."
   - **Reason**: With larger ranges or more unique interval points, the loop iterating from -100,000 to 100,000 results in more frequent collision checks and operations.

2. **Invariant on Vector Sorting and Manipulation**:
   - **Natural Language Description**: "Performance degradation is likely when many dancers share collision intervals, causing repeated and costly sorting operations on their states. This is exacerbated when there are many dancers (close to n = 100,000) or when multiple dancers converge at similar positions and times."
   - **Reason**: Sorting operations on lines 33, 34, and 39, combined with vector manipulations, are computationally expensive, especially when repeated frequently due to multiple dancers sharing similar time-space collision points.

3. **Invariant on Dense Collision Points**:
   - **Natural Language Description**: "When the number of dancers interacting at a single collision point is high, the computational overhead from sorting, reversing, and reassigning positions increases, leading to slower overall execution."
   - **Reason**: Dense collision points mean the vectors involved in dancer positions become larger, leading to more intensive computational steps inside the loop from lines 32 to 49.

By focusing on these invariants, one can better understand and potentially mitigate performance issues related to the choreography and collision handling in the dancer simulation.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Wherever the destination is, whoever we meet, let's render this song together.

On a Cartesian coordinate plane lies a rectangular stage of size w × h, represented by a rectangle with corners (0, 0), (w, 0), (w, h) and (0, h). It can be seen that no collisions will happen before one enters the stage.

On the sides of the stage stand n dancers. The i-th of them falls into one of the following groups: 

  * Vertical: stands at (xi, 0), moves in positive y direction (upwards); 
  * Horizontal: stands at (0, yi), moves in positive x direction (rightwards). 

<image>

According to choreography, the i-th dancer should stand still for the first ti milliseconds, and then start moving in the specified direction at 1 unit per millisecond, until another border is reached. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

When two dancers collide (i.e. are on the same point at some time when both of them are moving), they immediately exchange their moving directions and go on.

<image>

Dancers stop when a border of the stage is reached. Find out every dancer's stopping position.

Input

The first line of input contains three space-separated positive integers n, w and h (1 ≤ n ≤ 100 000, 2 ≤ w, h ≤ 100 000) — the number of dancers and the width and height of the stage, respectively.

The following n lines each describes a dancer: the i-th among them contains three space-separated integers gi, pi, and ti (1 ≤ gi ≤ 2, 1 ≤ pi ≤ 99 999, 0 ≤ ti ≤ 100 000), describing a dancer's group gi (gi = 1 — vertical, gi = 2 — horizontal), position, and waiting time. If gi = 1 then pi = xi; otherwise pi = yi. It's guaranteed that 1 ≤ xi ≤ w - 1 and 1 ≤ yi ≤ h - 1. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

Output

Output n lines, the i-th of which contains two space-separated integers (xi, yi) — the stopping position of the i-th dancer in the input.

Examples

Input

8 10 8
1 1 10
1 4 13
1 7 1
1 8 2
2 2 0
2 5 14
2 6 0
2 6 1


Output

4 8
10 5
8 8
10 6
10 2
1 8
7 8
10 6


Input

3 2 3
1 1 2
2 1 1
1 1 5


Output

1 3
2 1
1 3

Note

The first example corresponds to the initial setup in the legend, and the tracks of dancers are marked with different colours in the following figure.

<image>

In the second example, no dancers collide.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

We will implement the natural language invariants derived earlier as runtime checks using C++ code. Here are the checks:

1. **Invariant on Large Iterative Ranges**:
   - **Checker Code**: This invariant checks whether the range of unique time intervals results in excessive iteration.
   ```cpp
   void check_large_iterative_range(int uniqueIntervalCount) {
       if (uniqueIntervalCount > 1000) { // Arbitrary threshold for excessive uniqueness
           cerr << "Warning: Performance bottleneck condition triggered due to large iterative range!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Vector Sorting and Manipulation**:
   - **Checker Code**: This invariant checks for many dancers sharing collision intervals, prompting repeated sorting.
   ```cpp
   void check_vector_sorting(int vectorSize) {
       if (vectorSize > 100) { // Threshold based on typical manageable vector size
           cerr << "Warning: Performance bottleneck condition triggered due to repeated vector sorting!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Dense Collision Points**:
   - **Checker Code**: Checks for too many dancers interacting at a collision point.
   ```cpp
   void check_dense_collisions(int collidingDancers) {
       if (collidingDancers > 10) { // Threshold for excessive dancer collisions
           cerr << "Warning: Performance bottleneck condition triggered due to dense collision points!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checks into the Original Program

Let's instrument the provided C++ program with these performance checks at strategic points to avoid adding overhead to tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using vi = vector<int>;
using db = double;
const int N = 2e5L + 11;
int g[N], p[N], t[N];
map<int, vi> mp[3];
int x[N], y[N];
bool cmp(int i, int j) { return p[i] < p[j]; }
using pii = pair<int, int>;
bool cmp2(pii a, pii b) {
  if (a.second == b.second) return a.first < b.first;
  return a.second > b.second;
}

// Checkers
void check_large_iterative_range(int uniqueIntervalCount) {
    if (uniqueIntervalCount > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large iterative range!" << endl;
        abort();
    }
}

void check_vector_sorting(int vectorSize) {
    if (vectorSize > 100) {
        cerr << "Warning: Performance bottleneck condition triggered due to repeated vector sorting!" << endl;
        abort();
    }
}

void check_dense_collisions(int collidingDancers) {
    if (collidingDancers > 10) {
        cerr << "Warning: Performance bottleneck condition triggered due to dense collision points!" << endl;
        abort();
    }
}

int main() {
  ios ::sync_with_stdio(0);
  int n, w, h;
  cin >> n >> w >> h;
  for (int i = 1; i <= n; i++) {
    cin >> g[i] >> p[i] >> t[i];
    mp[g[i]][p[i] - t[i]].push_back(i);
    if (g[i] == 1) {
      x[i] = p[i];
      y[i] = h;
    } else {
      y[i] = p[i];
      x[i] = w;
    }
  }

  // Check the number of unique time intervals
  check_large_iterative_range(mp[1].size() + mp[2].size());

  for (int i = -100000; i <= 100000; i++)
    if (mp[1].count(i) && mp[2].count(i)) {

      // Check if vector sizes for sorting are large
      check_vector_sorting(mp[1][i].size());
      check_vector_sorting(mp[2][i].size());

      sort(mp[1][i].begin(), mp[1][i].end(), cmp);
      sort(mp[2][i].begin(), mp[2][i].end(), cmp);
      reverse(mp[2][i].begin(), mp[2][i].end());
      vector<pii> v;
      for (int j : mp[1][i]) v.push_back({x[j], y[j]});
      for (int j : mp[2][i]) v.push_back({x[j], y[j]});
      sort(v.begin(), v.end(), cmp2);

      // Check for dense collision points
      check_dense_collisions(v.size());

      int t = 0;
      for (int j : mp[2][i]) {
        x[j] = v[t].first;
        y[j] = v[t].second;
        t++;
      }
      for (int j : mp[1][i]) {
        x[j] = v[t].first;
        y[j] = v[t].second;
        t++;
      }
    }
  for (int i = 1; i <= n; i++) cout << x[i] << ' ' << y[i] << '\n';
  return 0;
}
```

### Explanation of Integration:

- **Large Iterative Range Check**: Placed after the data is read and mapped, checking the number of unique time intervals.
- **Vector Sorting Check**: Placed just before sorting operations inside the loop to ensure vectors aren't excessively large.
- **Dense Collision Check**: Placed before reassigning dancer positions to catch excessive dancer collisions.

Each check is strategically inserted to avoid performance drag while effectively monitoring potential bottlenecks, aiding in early detection and debugging.

