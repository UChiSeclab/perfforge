system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Wherever the destination is, whoever we meet, let's render this song together.

On a Cartesian coordinate plane lies a rectangular stage of size w × h, represented by a rectangle with corners (0, 0), (w, 0), (w, h) and (0, h). It can be seen that no collisions will happen before one enters the stage.

On the sides of the stage stand n dancers. The i-th of them falls into one of the following groups: 

  * Vertical: stands at (xi, 0), moves in positive y direction (upwards); 
  * Horizontal: stands at (0, yi), moves in positive x direction (rightwards). 

<image>

According to choreography, the i-th dancer should stand still for the first ti milliseconds, and then start moving in the specified direction at 1 unit per millisecond, until another border is reached. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

When two dancers collide (i.e. are on the same point at some time when both of them are moving), they immediately exchange their moving directions and go on.

<image>

Dancers stop when a border of the stage is reached. Find out every dancer's stopping position.

Input

The first line of input contains three space-separated positive integers n, w and h (1 ≤ n ≤ 100 000, 2 ≤ w, h ≤ 100 000) — the number of dancers and the width and height of the stage, respectively.

The following n lines each describes a dancer: the i-th among them contains three space-separated integers gi, pi, and ti (1 ≤ gi ≤ 2, 1 ≤ pi ≤ 99 999, 0 ≤ ti ≤ 100 000), describing a dancer's group gi (gi = 1 — vertical, gi = 2 — horizontal), position, and waiting time. If gi = 1 then pi = xi; otherwise pi = yi. It's guaranteed that 1 ≤ xi ≤ w - 1 and 1 ≤ yi ≤ h - 1. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

Output

Output n lines, the i-th of which contains two space-separated integers (xi, yi) — the stopping position of the i-th dancer in the input.

Examples

Input

8 10 8
1 1 10
1 4 13
1 7 1
1 8 2
2 2 0
2 5 14
2 6 0
2 6 1


Output

4 8
10 5
8 8
10 6
10 2
1 8
7 8
10 6


Input

3 2 3
1 1 2
2 1 1
1 1 5


Output

1 3
2 1
1 3

Note

The first example corresponds to the initial setup in the legend, and the tracks of dancers are marked with different colours in the following figure.

<image>

In the second example, no dancers collide.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
struct dancer {
  int g;
  int p;
  int t;
  int id;
};
int n, xs, ys;
map<int, vector<dancer>> groups;
map<int, pair<int, int>> finalPos;
bool s1(dancer a, dancer b) {
  if (a.g != b.g) return a.g > b.g;
  if (a.g == 1)
    return a.p < b.p;
  else
    return a.p > b.p;
}
bool s2(dancer a, dancer b) {
  if (a.g != b.g) return a.g < b.g;
  if (a.g == 1)
    return a.p < b.p;
  else
    return a.p > b.p;
}
int main() {
  cin >> n >> xs >> ys;
  for (int i = 1; i <= n; i++) {
    int g, p, t;
    cin >> g >> p >> t;
    dancer d;
    d.p = p;
    d.g = g;
    d.t = t;
    d.id = i;
    groups[t - p].push_back(d);
  }
  for (pair<int, vector<dancer>> i : groups) {
    vector<dancer> sort1 = i.second;
    vector<dancer> sort2 = i.second;
    sort(sort1.begin(), sort1.end(), s1);
    sort(sort2.begin(), sort2.end(), s2);
    for (int j = 0; j < (int)sort1.size(); j++) {
      if (sort2[j].g == 1)
        finalPos[sort1[j].id] = make_pair(sort2[j].p, ys);
      else
        finalPos[sort1[j].id] = make_pair(xs, sort2[j].p);
    }
  }
  for (int i = 1; i <= n; i++) {
    cout << finalPos[i].first << " " << finalPos[i].second << endl;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

20 15 15
2 7 100000
1 2 100000
2 1 100000
1 9 100000
2 4 100000
2 3 100000
2 14 100000
1 6 100000
1 10 100000
2 5 100000
2 13 100000
1 8 100000
1 13 100000
1 14 100000
2 10 100000
1 5 100000
1 11 100000
1 12 100000
1 1 100000
2 2 100000


(G.2) Fast Input

3 7 8
1 3 9
2 1 9
2 1 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
struct dancer { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  int g; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  int p; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  int t; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  int id; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int n, xs, ys; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
map<int, vector<dancer>> groups; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
map<int, pair<int, int>> finalPos; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
bool s1(dancer a, dancer b) { /* line 12 slow_hit_count: 10, fast_hit_count: 0 */
  if (a.g != b.g) return a.g > b.g; /* line 13 slow_hit_count: 10, fast_hit_count: 0 */
  if (a.g == 1) /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    return a.p < b.p; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    return a.p > b.p; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
bool s2(dancer a, dancer b) { /* line 19 slow_hit_count: 8, fast_hit_count: 0 */
  if (a.g != b.g) return a.g < b.g; /* line 20 slow_hit_count: 8, fast_hit_count: 0 */
  if (a.g == 1) /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    return a.p < b.p; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    return a.p > b.p; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> xs >> ys; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 28 slow_hit_count: 21, fast_hit_count: 4 */
    int g, p, t; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> g >> p >> t; /* line 30 slow_hit_count: 20, fast_hit_count: 3 */
    dancer d; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    d.p = p; /* line 32 slow_hit_count: 20, fast_hit_count: 3 */
    d.g = g; /* line 33 slow_hit_count: 20, fast_hit_count: 3 */
    d.t = t; /* line 34 slow_hit_count: 20, fast_hit_count: 3 */
    d.id = i; /* line 35 slow_hit_count: 20, fast_hit_count: 3 */
    groups[t - p].push_back(d); /* line 36 slow_hit_count: 20, fast_hit_count: 3 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  for (pair<int, vector<dancer>> i : groups) { /* line 38 slow_hit_count: 15, fast_hit_count: 4 */
    vector<dancer> sort1 = i.second; /* line 39 slow_hit_count: 28, fast_hit_count: 6 */
    vector<dancer> sort2 = i.second; /* line 40 slow_hit_count: 28, fast_hit_count: 6 */
    sort(sort1.begin(), sort1.end(), s1); /* line 41 slow_hit_count: 14, fast_hit_count: 3 */
    sort(sort2.begin(), sort2.end(), s2); /* line 42 slow_hit_count: 14, fast_hit_count: 3 */
    for (int j = 0; j < (int)sort1.size(); j++) { /* line 43 slow_hit_count: 34, fast_hit_count: 6 */
      if (sort2[j].g == 1) /* line 44 slow_hit_count: 20, fast_hit_count: 3 */
        finalPos[sort1[j].id] = make_pair(sort2[j].p, ys); /* line 45 slow_hit_count: 11, fast_hit_count: 1 */
      else /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
        finalPos[sort1[j].id] = make_pair(xs, sort2[j].p); /* line 47 slow_hit_count: 9, fast_hit_count: 2 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 50 slow_hit_count: 21, fast_hit_count: 4 */
    cout << finalPos[i].first << " " << finalPos[i].second << endl; /* line 51 slow_hit_count: 20, fast_hit_count: 3 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 53 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Analyzing Hit Counts:**
   - Lines 12-13 (`s1`) and lines 19-20 (`s2`) show a significant difference in hit counts between the slow and fast inputs. Both sorting functions (`sort1` and `sort2`) are heavily invoked during the slow input run.
   - Lines 41 and 42 indicate repeated sorting operations. The hit counts suggest these sorts are significant contributors to the slowdown.
   - The loops at lines 38 and 43 also have increased hits in the slow run, pointing to frequent iterations over grouped dancers.

2. **Interactions with Data Structures:**
   - The `groups` map is populated based on the difference between the waiting time and position (`t - p`). This key determines how dancers are grouped and subsequently sorted.
   - The expensive operations are likely due to the sorting of dancers within each group, which can become costly if the groups are large or if many dancers end up in the same group.

3. **Loops and Recursion:**
   - The nested loop inside line 38 for iterating over `groups` and line 43 for processing `sort1` are critical points. Given the hit counts, larger groups cause more entries into these loops, leading to higher computation times.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Performance Invariants:**

   - **Invariant 1: Large Group Sizes**
     - *Description:* "When many dancers share the same waiting time minus position value (`t - p`), they are grouped together, and the cost of sorting within those groups increases significantly. This can lead to performance issues when the number of dancers in such a group is large."
     - *Implementation Context:* If the number of dancers in any single group grows large, sorting operations can become a major bottleneck.

   - **Invariant 2: Frequent Sorting Operations**
     - *Description:* "Frequent sorting operations on large dancer groups can increase execution time, especially when the number of dancers in a group approaches the upper constraint limit."
     - *Implementation Context:* If multiple groups have high numbers of dancers, the cumulative cost of sorting these groups also increases.

   - **Invariant 3: Input Pattern and Grouping**
     - *Description:* "If the input pattern results in highly uneven distribution of dancers across groups, where some groups have significantly more dancers than others, sorting those few large groups can lead to slowdowns."
     - *Implementation Context:* Detecting and balancing the distribution of dancers during input processing could mitigate these slowdowns.

2. **Thresholds Correlated to Input Patterns and Constraints:**
   - The thresholds for triggering slowdowns are abstracted based on how dancers are grouped (`t - p`). If a group has more than a certain fraction of `n` dancers, it is likely to experience sorting-related slowdowns. Given the constraint `n ≤ 100,000`, a group size nearing thousands could be problematic.

3. **Implementing Checks (Conceptual Example):**

   ```cpp
   void check_group_size_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: group_size_invariant triggered - large dancer group leading to sorting overhead" << endl;
           abort();
       }
   }

   // Example usage after grouping dancers
   for (const auto& group : groups) {
       int groupSize = group.second.size();
       check_group_size_invariant(groupSize > n / 10); // Example threshold
   }
   ```

These performance-characterizing invariants provide a framework to understand potential slowdowns in the given C program, highlighting how group size and sorting interactions dominate the runtime characteristics for certain inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Wherever the destination is, whoever we meet, let's render this song together.

On a Cartesian coordinate plane lies a rectangular stage of size w × h, represented by a rectangle with corners (0, 0), (w, 0), (w, h) and (0, h). It can be seen that no collisions will happen before one enters the stage.

On the sides of the stage stand n dancers. The i-th of them falls into one of the following groups: 

  * Vertical: stands at (xi, 0), moves in positive y direction (upwards); 
  * Horizontal: stands at (0, yi), moves in positive x direction (rightwards). 

<image>

According to choreography, the i-th dancer should stand still for the first ti milliseconds, and then start moving in the specified direction at 1 unit per millisecond, until another border is reached. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

When two dancers collide (i.e. are on the same point at some time when both of them are moving), they immediately exchange their moving directions and go on.

<image>

Dancers stop when a border of the stage is reached. Find out every dancer's stopping position.

Input

The first line of input contains three space-separated positive integers n, w and h (1 ≤ n ≤ 100 000, 2 ≤ w, h ≤ 100 000) — the number of dancers and the width and height of the stage, respectively.

The following n lines each describes a dancer: the i-th among them contains three space-separated integers gi, pi, and ti (1 ≤ gi ≤ 2, 1 ≤ pi ≤ 99 999, 0 ≤ ti ≤ 100 000), describing a dancer's group gi (gi = 1 — vertical, gi = 2 — horizontal), position, and waiting time. If gi = 1 then pi = xi; otherwise pi = yi. It's guaranteed that 1 ≤ xi ≤ w - 1 and 1 ≤ yi ≤ h - 1. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

Output

Output n lines, the i-th of which contains two space-separated integers (xi, yi) — the stopping position of the i-th dancer in the input.

Examples

Input

8 10 8
1 1 10
1 4 13
1 7 1
1 8 2
2 2 0
2 5 14
2 6 0
2 6 1


Output

4 8
10 5
8 8
10 6
10 2
1 8
7 8
10 6


Input

3 2 3
1 1 2
2 1 1
1 1 5


Output

1 3
2 1
1 3

Note

The first example corresponds to the initial setup in the legend, and the tracks of dancers are marked with different colours in the following figure.

<image>

In the second example, no dancers collide.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, here are the C++ checker functions that detect potential slowdowns:

1. **Checker for Large Group Sizes:**

```cpp
void check_group_size_invariant(int groupSize, int threshold) {
    if (groupSize > threshold) {
        cerr << "Warning: group_size_invariant triggered - large dancer group leading to sorting overhead" << endl;
        abort();
    }
}
```

2. **Checker for Frequent Sorting Operations:**

```cpp
void check_sort_invariant(int groupCount, int sortThreshold) {
    if (groupCount > sortThreshold) {
        cerr << "Warning: sort_invariant triggered - frequent sorting operations" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Below is the original C++ program with the checker functions integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;

struct dancer {
    int g;
    int p;
    int t;
    int id;
};

int n, xs, ys;
map<int, vector<dancer>> groups;
map<int, pair<int, int>> finalPos;

// Checker function for large group sizes
void check_group_size_invariant(int groupSize, int threshold) {
    if (groupSize > threshold) {
        cerr << "Warning: group_size_invariant triggered - large dancer group leading to sorting overhead" << endl;
        abort();
    }
}

// Checker function for frequent sorting operations
void check_sort_invariant(int groupCount, int sortThreshold) {
    if (groupCount > sortThreshold) {
        cerr << "Warning: sort_invariant triggered - frequent sorting operations" << endl;
        abort();
    }
}

bool s1(dancer a, dancer b) {
    if (a.g != b.g) return a.g > b.g;
    if (a.g == 1)
        return a.p < b.p;
    else
        return a.p > b.p;
}

bool s2(dancer a, dancer b) {
    if (a.g != b.g) return a.g < b.g;
    if (a.g == 1)
        return a.p < b.p;
    else
        return a.p > b.p;
}

int main() {
    cin >> n >> xs >> ys;
    for (int i = 1; i <= n; i++) {
        int g, p, t;
        cin >> g >> p >> t;
        dancer d;
        d.p = p;
        d.g = g;
        d.t = t;
        d.id = i;
        groups[t - p].push_back(d);
    }

    // Check for large groups before sorting
    for (const auto& group : groups) {
        int groupSize = group.second.size();
        check_group_size_invariant(groupSize, n / 10); // Example threshold for large group size
    }

    // Check for frequent sorting operations
    check_sort_invariant(groups.size(), n / 10); // Example threshold for frequent sorting

    for (pair<int, vector<dancer>> i : groups) {
        vector<dancer> sort1 = i.second;
        vector<dancer> sort2 = i.second;
        sort(sort1.begin(), sort1.end(), s1);
        sort(sort2.begin(), sort2.end(), s2);
        for (int j = 0; j < (int)sort1.size(); j++) {
            if (sort2[j].g == 1)
                finalPos[sort1[j].id] = make_pair(sort2[j].p, ys);
            else
                finalPos[sort1[j].id] = make_pair(xs, sort2[j].p);
        }
    }

    for (int i = 1; i <= n; i++) {
        cout << finalPos[i].first << " " << finalPos[i].second << endl;
    }
}
```

### Explanation

- **Checker Functions:** Implemented for checking large group sizes and frequent sorting operations. The thresholds are set to a fraction of `n`, the number of dancers, as a reasonable starting point.
- **Placement:** The group size check is placed right after the groups are formed, and the sort check before sorting operations, to capture conditions before they lead to slowdowns.
- **Rationale:** These checks help in identifying potential performance bottlenecks dynamically, as suggested in the natural language invariants.

