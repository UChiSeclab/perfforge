system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Wherever the destination is, whoever we meet, let's render this song together.

On a Cartesian coordinate plane lies a rectangular stage of size w × h, represented by a rectangle with corners (0, 0), (w, 0), (w, h) and (0, h). It can be seen that no collisions will happen before one enters the stage.

On the sides of the stage stand n dancers. The i-th of them falls into one of the following groups: 

  * Vertical: stands at (xi, 0), moves in positive y direction (upwards); 
  * Horizontal: stands at (0, yi), moves in positive x direction (rightwards). 

<image>

According to choreography, the i-th dancer should stand still for the first ti milliseconds, and then start moving in the specified direction at 1 unit per millisecond, until another border is reached. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

When two dancers collide (i.e. are on the same point at some time when both of them are moving), they immediately exchange their moving directions and go on.

<image>

Dancers stop when a border of the stage is reached. Find out every dancer's stopping position.

Input

The first line of input contains three space-separated positive integers n, w and h (1 ≤ n ≤ 100 000, 2 ≤ w, h ≤ 100 000) — the number of dancers and the width and height of the stage, respectively.

The following n lines each describes a dancer: the i-th among them contains three space-separated integers gi, pi, and ti (1 ≤ gi ≤ 2, 1 ≤ pi ≤ 99 999, 0 ≤ ti ≤ 100 000), describing a dancer's group gi (gi = 1 — vertical, gi = 2 — horizontal), position, and waiting time. If gi = 1 then pi = xi; otherwise pi = yi. It's guaranteed that 1 ≤ xi ≤ w - 1 and 1 ≤ yi ≤ h - 1. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

Output

Output n lines, the i-th of which contains two space-separated integers (xi, yi) — the stopping position of the i-th dancer in the input.

Examples

Input

8 10 8
1 1 10
1 4 13
1 7 1
1 8 2
2 2 0
2 5 14
2 6 0
2 6 1


Output

4 8
10 5
8 8
10 6
10 2
1 8
7 8
10 6


Input

3 2 3
1 1 2
2 1 1
1 1 5


Output

1 3
2 1
1 3

Note

The first example corresponds to the initial setup in the legend, and the tracks of dancers are marked with different colours in the following figure.

<image>

In the second example, no dancers collide.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;
typedef pair<set<pii>, set<pii> > line;
map<int, line> lines;
int n, w, h;
void insert_dancer(int type, int pos, int t, int i) {
  int line_number = pos - t;
  if (type == 1)
    lines[line_number].first.insert(pii(pos, i));
  else if (type == 2)
    lines[line_number].second.insert(pii(pos, i));
}
int output[100000][2];
int main() {
  cin >> n >> w >> h;
  for (int i = 0; i < n; ++i) {
    int g, p, t;
    cin >> g >> p >> t;
    insert_dancer(g, p, t, i);
  }
  for (auto it = lines.begin(); it != lines.end(); ++it) {
    set<pii> verticals = it->second.first;
    set<pii> horizontals = it->second.second;
    auto outer_iterator =
        verticals.size() ? verticals.begin() : horizontals.end();
    auto inner_iterator =
        horizontals.size() ? horizontals.end() : verticals.begin();
    if (!verticals.size()) --outer_iterator;
    if (horizontals.size()) --inner_iterator;
    bool inner_vertical = horizontals.empty();
    bool outer_horizontal = verticals.empty();
    while (inner_iterator != verticals.end()) {
      const int index = inner_iterator->second;
      const int final_pos = outer_iterator->first;
      if (!outer_horizontal) {
        output[index][0] = final_pos;
        output[index][1] = h;
        ++outer_iterator;
      } else {
        output[index][0] = w;
        output[index][1] = final_pos;
        if (outer_iterator != horizontals.begin()) --outer_iterator;
      }
      if (outer_iterator == verticals.end()) {
        if (horizontals.empty()) break;
        outer_iterator = horizontals.end();
        --outer_iterator;
        outer_horizontal = true;
      }
      if (inner_iterator == horizontals.begin()) {
        inner_iterator = verticals.begin();
        inner_vertical = true;
        continue;
      }
      if (!inner_vertical)
        --inner_iterator;
      else
        ++inner_iterator;
    }
  }
  for (int i = 0; i < n; ++i) {
    cout << output[i][0] << " " << output[i][1] << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

20 50000 50000
2 45955 55488
1 19804 29337
2 3767 17908
2 24025 33558
1 46985 56518
2 21094 30627
2 5787 15320
1 4262 91306
2 37231 46764
1 18125 27658
1 36532 12317
1 31330 40863
1 18992 28525
1 29387 10271
1 44654 54187
2 45485 55018
2 36850 46383
1 44649 54182
1 40922 50455
2 12781 99825


(G.2) Fast Input

1 10 10
2 8 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
typedef pair<int, int> pii; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
typedef pair<set<pii>, set<pii> > line; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
map<int, line> lines; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int n, w, h; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void insert_dancer(int type, int pos, int t, int i) { /* line 7 slow_hit_count: 20, fast_hit_count: 1 */
  int line_number = pos - t; /* line 8 slow_hit_count: 20, fast_hit_count: 1 */
  if (type == 1) /* line 9 slow_hit_count: 20, fast_hit_count: 1 */
    lines[line_number].first.insert(pii(pos, i)); /* line 10 slow_hit_count: 11, fast_hit_count: 0 */
  else if (type == 2) /* line 11 slow_hit_count: 9, fast_hit_count: 1 */
    lines[line_number].second.insert(pii(pos, i)); /* line 12 slow_hit_count: 9, fast_hit_count: 1 */
} /* line 13 slow_hit_count: 20, fast_hit_count: 1 */
int output[100000][2]; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> w >> h; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 17 slow_hit_count: 21, fast_hit_count: 2 */
    int g, p, t; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> g >> p >> t; /* line 19 slow_hit_count: 20, fast_hit_count: 1 */
    insert_dancer(g, p, t, i); /* line 20 slow_hit_count: 20, fast_hit_count: 1 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto it = lines.begin(); it != lines.end(); ++it) { /* line 22 slow_hit_count: 6, fast_hit_count: 2 */
    set<pii> verticals = it->second.first; /* line 23 slow_hit_count: 10, fast_hit_count: 2 */
    set<pii> horizontals = it->second.second; /* line 24 slow_hit_count: 10, fast_hit_count: 2 */
    auto outer_iterator = /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
        verticals.size() ? verticals.begin() : horizontals.end(); /* line 26 slow_hit_count: 5, fast_hit_count: 1 */
    auto inner_iterator = /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
        horizontals.size() ? horizontals.end() : verticals.begin(); /* line 28 slow_hit_count: 5, fast_hit_count: 1 */
    if (!verticals.size()) --outer_iterator; /* line 29 slow_hit_count: 5, fast_hit_count: 1 */
    if (horizontals.size()) --inner_iterator; /* line 30 slow_hit_count: 5, fast_hit_count: 1 */
    bool inner_vertical = horizontals.empty(); /* line 31 slow_hit_count: 5, fast_hit_count: 1 */
    bool outer_horizontal = verticals.empty(); /* line 32 slow_hit_count: 5, fast_hit_count: 1 */
    while (inner_iterator != verticals.end()) { /* line 33 slow_hit_count: 23, fast_hit_count: 2 */
      const int index = inner_iterator->second; /* line 34 slow_hit_count: 20, fast_hit_count: 1 */
      const int final_pos = outer_iterator->first; /* line 35 slow_hit_count: 20, fast_hit_count: 1 */
      if (!outer_horizontal) { /* line 36 slow_hit_count: 20, fast_hit_count: 1 */
        output[index][0] = final_pos; /* line 37 slow_hit_count: 11, fast_hit_count: 0 */
        output[index][1] = h; /* line 38 slow_hit_count: 11, fast_hit_count: 0 */
        ++outer_iterator; /* line 39 slow_hit_count: 11, fast_hit_count: 0 */
      } else { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
        output[index][0] = w; /* line 41 slow_hit_count: 9, fast_hit_count: 1 */
        output[index][1] = final_pos; /* line 42 slow_hit_count: 9, fast_hit_count: 1 */
        if (outer_iterator != horizontals.begin()) --outer_iterator; /* line 43 slow_hit_count: 9, fast_hit_count: 1 */
      } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      if (outer_iterator == verticals.end()) { /* line 45 slow_hit_count: 20, fast_hit_count: 1 */
        if (horizontals.empty()) break; /* line 46 slow_hit_count: 4, fast_hit_count: 0 */
        outer_iterator = horizontals.end(); /* line 47 slow_hit_count: 2, fast_hit_count: 0 */
        --outer_iterator; /* line 48 slow_hit_count: 2, fast_hit_count: 0 */
        outer_horizontal = true; /* line 49 slow_hit_count: 2, fast_hit_count: 0 */
      } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      if (inner_iterator == horizontals.begin()) { /* line 51 slow_hit_count: 18, fast_hit_count: 1 */
        inner_iterator = verticals.begin(); /* line 52 slow_hit_count: 3, fast_hit_count: 1 */
        inner_vertical = true; /* line 53 slow_hit_count: 3, fast_hit_count: 1 */
        continue; /* line 54 slow_hit_count: 3, fast_hit_count: 1 */
      } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      if (!inner_vertical) /* line 56 slow_hit_count: 15, fast_hit_count: 0 */
        --inner_iterator; /* line 57 slow_hit_count: 6, fast_hit_count: 0 */
      else /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
        ++inner_iterator; /* line 59 slow_hit_count: 9, fast_hit_count: 0 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; ++i) { /* line 62 slow_hit_count: 21, fast_hit_count: 2 */
    cout << output[i][0] << " " << output[i][1] << endl; /* line 63 slow_hit_count: 20, fast_hit_count: 1 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 66 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line Comparison:**
   - `insert_dancer` function (Lines 7-13) is hit 20 times for the slow input compared to 1 time for the fast input. 
   - The second loop (Lines 22-60) is a major hotspot, especially:
     - Line 33 (`while (inner_iterator != verticals.end())`) is hit 23 times in the slow run compared to 2 in the fast. This suggests that the loop iterates much more for the slow input.
     - Lines 34-35 are hit 20 times, showing that calculation and assignment within the loop are repeated considerably more on the slow input.
     - Inner loop manipulations like `--inner_iterator` and `++inner_iterator` (Lines 57 and 59) also show activity, indicating back-and-forth movement through the set, which can be costly.

2. **Interaction with Data Structures:**
   - The `lines` map and its `verticals` and `horizontals` sets are central to the performance. The frequent insertion and manipulation suggest that inefficient handling of these sets correlates with the slowdown.

3. **Potential Bottlenecks:**
   - The nested loops over dancers in the same line (Lines 22-60) are likely expensive, especially with large numbers of dancers leading to higher collision handling complexity.
   - The alternating between `verticals` and `horizontals` sets suggests an inefficiency when there are significant interactions or collisions.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: High Number of Interactions in Lines**
   - Natural Language Description: "When there are many dancers with closely aligned waiting times and initial positions, leading to frequent collisions and direction changes, the program can significantly slow down."
   - This invariant captures the essence of increased hit counts due to collisions and back-and-forth direction changes, explaining the increased loop iterations.

2. **Invariant 2: Large Set Size Handling**
   - Natural Language Description: "If there is a high number of dancers on the same line, causing large sets of vertical or horizontal dancers, the program may experience reduced performance due to increased operations on these sets."
   - This invariant points out the inefficiency in handling large sets, which aligns with the repeated manipulations observed in the slow run.

3. **Invariant 3: Extensive Loop Iterations**
   - Natural Language Description: "The performance degrades when the inner loop iterates excessively due to many dancers being processed in the same line, especially with frequent position recalculations."
   - The prolonged loop activity seen in the slow input is indicative of this invariant.

These invariants provide a high-level explanation of the slow execution path, focusing on the interactions and complexities arising with larger input scenarios within given constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Wherever the destination is, whoever we meet, let's render this song together.

On a Cartesian coordinate plane lies a rectangular stage of size w × h, represented by a rectangle with corners (0, 0), (w, 0), (w, h) and (0, h). It can be seen that no collisions will happen before one enters the stage.

On the sides of the stage stand n dancers. The i-th of them falls into one of the following groups: 

  * Vertical: stands at (xi, 0), moves in positive y direction (upwards); 
  * Horizontal: stands at (0, yi), moves in positive x direction (rightwards). 

<image>

According to choreography, the i-th dancer should stand still for the first ti milliseconds, and then start moving in the specified direction at 1 unit per millisecond, until another border is reached. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

When two dancers collide (i.e. are on the same point at some time when both of them are moving), they immediately exchange their moving directions and go on.

<image>

Dancers stop when a border of the stage is reached. Find out every dancer's stopping position.

Input

The first line of input contains three space-separated positive integers n, w and h (1 ≤ n ≤ 100 000, 2 ≤ w, h ≤ 100 000) — the number of dancers and the width and height of the stage, respectively.

The following n lines each describes a dancer: the i-th among them contains three space-separated integers gi, pi, and ti (1 ≤ gi ≤ 2, 1 ≤ pi ≤ 99 999, 0 ≤ ti ≤ 100 000), describing a dancer's group gi (gi = 1 — vertical, gi = 2 — horizontal), position, and waiting time. If gi = 1 then pi = xi; otherwise pi = yi. It's guaranteed that 1 ≤ xi ≤ w - 1 and 1 ≤ yi ≤ h - 1. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

Output

Output n lines, the i-th of which contains two space-separated integers (xi, yi) — the stopping position of the i-th dancer in the input.

Examples

Input

8 10 8
1 1 10
1 4 13
1 7 1
1 8 2
2 2 0
2 5 14
2 6 0
2 6 1


Output

4 8
10 5
8 8
10 6
10 2
1 8
7 8
10 6


Input

3 2 3
1 1 2
2 1 1
1 1 5


Output

1 3
2 1
1 3

Note

The first example corresponds to the initial setup in the legend, and the tracks of dancers are marked with different colours in the following figure.

<image>

In the second example, no dancers collide.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Below are the C++ code snippets corresponding to each natural language invariant derived in Phase 2:

1. **Invariant 1: High Number of Interactions in Lines**

```cpp
void check_interaction_invariant(int verticalCount, int horizontalCount) {
    if (verticalCount > 10 && horizontalCount > 10) { // Example threshold for high interaction
        cerr << "Warning: Performance bottleneck condition triggered - high number of interactions in line!" << endl;
        abort();
    }
}
```

2. **Invariant 2: Large Set Size Handling**

```cpp
void check_set_size_invariant(size_t setSize) {
    if (setSize > 50) { // Example threshold for large set size
        cerr << "Warning: Performance bottleneck condition triggered - large set size!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Extensive Loop Iterations**

```cpp
void check_loop_iteration_invariant(size_t iterationCount) {
    if (iterationCount > 100) { // Example threshold for excessive loop iterations
        cerr << "Warning: Performance bottleneck condition triggered - excessive loop iterations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checkers into the provided C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;
typedef pair<set<pii>, set<pii> > line;
map<int, line> lines;
int n, w, h;

// Checker functions defined above
void check_interaction_invariant(int verticalCount, int horizontalCount);
void check_set_size_invariant(size_t setSize);
void check_loop_iteration_invariant(size_t iterationCount);

void insert_dancer(int type, int pos, int t, int i) {
    int line_number = pos - t;
    if (type == 1)
        lines[line_number].first.insert(pii(pos, i));
    else if (type == 2)
        lines[line_number].second.insert(pii(pos, i));
}

int output[100000][2];

int main() {
    cin >> n >> w >> h;
    for (int i = 0; i < n; ++i) {
        int g, p, t;
        cin >> g >> p >> t;
        insert_dancer(g, p, t, i);
    }

    for (auto it = lines.begin(); it != lines.end(); ++it) {
        set<pii> verticals = it->second.first;
        set<pii> horizontals = it->second.second;

        // Check for large set sizes
        check_set_size_invariant(verticals.size());
        check_set_size_invariant(horizontals.size());

        auto outer_iterator = verticals.size() ? verticals.begin() : horizontals.end();
        auto inner_iterator = horizontals.size() ? horizontals.end() : verticals.begin();

        if (!verticals.size()) --outer_iterator;
        if (horizontals.size()) --inner_iterator;

        bool inner_vertical = horizontals.empty();
        bool outer_horizontal = verticals.empty();

        size_t loopCount = 0;

        while (inner_iterator != verticals.end()) {
            // Increment loop counter
            loopCount++;

            // Check for excessive loop iterations
            check_loop_iteration_invariant(loopCount);

            const int index = inner_iterator->second;
            const int final_pos = outer_iterator->first;

            if (!outer_horizontal) {
                output[index][0] = final_pos;
                output[index][1] = h;
                ++outer_iterator;
            } else {
                output[index][0] = w;
                output[index][1] = final_pos;
                if (outer_iterator != horizontals.begin()) --outer_iterator;
            }

            if (outer_iterator == verticals.end()) {
                if (horizontals.empty()) break;
                outer_iterator = horizontals.end();
                --outer_iterator;
                outer_horizontal = true;
            }
            
            if (inner_iterator == horizontals.begin()) {
                inner_iterator = verticals.begin();
                inner_vertical = true;
                continue;
            }

            if (!inner_vertical)
                --inner_iterator;
            else
                ++inner_iterator;
        }

        // Check for high interaction in the line
        check_interaction_invariant(verticals.size(), horizontals.size());
    }

    for (int i = 0; i < n; ++i) {
        cout << output[i][0] << " " << output[i][1] << endl;
    }

    return 0;
}
```

### Explanation

- **Integration of Checkers:** The checkers are called at strategic points:
  - **Set Size Checks**: Right after extracting verticals and horizontals sets (Lines 23-24).
  - **Loop Iteration Check**: Within the loop to monitor excessive iterations (Line 33 onwards).
  - **Interaction Check**: After processing the dancers in a line to detect high interaction (Before final line processing within the outer loop).
  
- **Threshold Values:** These are illustrative and should be adjusted based on empirical data or further analysis. The purpose is to simulate the conditions causing performance issues without hardcoding specific input values.

