system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Wherever the destination is, whoever we meet, let's render this song together.

On a Cartesian coordinate plane lies a rectangular stage of size w × h, represented by a rectangle with corners (0, 0), (w, 0), (w, h) and (0, h). It can be seen that no collisions will happen before one enters the stage.

On the sides of the stage stand n dancers. The i-th of them falls into one of the following groups: 

  * Vertical: stands at (xi, 0), moves in positive y direction (upwards); 
  * Horizontal: stands at (0, yi), moves in positive x direction (rightwards). 

<image>

According to choreography, the i-th dancer should stand still for the first ti milliseconds, and then start moving in the specified direction at 1 unit per millisecond, until another border is reached. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

When two dancers collide (i.e. are on the same point at some time when both of them are moving), they immediately exchange their moving directions and go on.

<image>

Dancers stop when a border of the stage is reached. Find out every dancer's stopping position.

Input

The first line of input contains three space-separated positive integers n, w and h (1 ≤ n ≤ 100 000, 2 ≤ w, h ≤ 100 000) — the number of dancers and the width and height of the stage, respectively.

The following n lines each describes a dancer: the i-th among them contains three space-separated integers gi, pi, and ti (1 ≤ gi ≤ 2, 1 ≤ pi ≤ 99 999, 0 ≤ ti ≤ 100 000), describing a dancer's group gi (gi = 1 — vertical, gi = 2 — horizontal), position, and waiting time. If gi = 1 then pi = xi; otherwise pi = yi. It's guaranteed that 1 ≤ xi ≤ w - 1 and 1 ≤ yi ≤ h - 1. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

Output

Output n lines, the i-th of which contains two space-separated integers (xi, yi) — the stopping position of the i-th dancer in the input.

Examples

Input

8 10 8
1 1 10
1 4 13
1 7 1
1 8 2
2 2 0
2 5 14
2 6 0
2 6 1


Output

4 8
10 5
8 8
10 6
10 2
1 8
7 8
10 6


Input

3 2 3
1 1 2
2 1 1
1 1 5


Output

1 3
2 1
1 3

Note

The first example corresponds to the initial setup in the legend, and the tracks of dancers are marked with different colours in the following figure.

<image>

In the second example, no dancers collide.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  pair<long double, long double> dest[100005];
  long long int my[100005];
  long long int gi[100005];
  long long int pi[100005];
  long long int ti[100005];
  long long int n, w, h;
  cin >> n >> w >> h;
  map<long long int, vector<long long int> > verhorz;
  map<long long int, long long int> jh;
  for (long long int i = 1; i <= n; i++) {
    long long int g, p, t;
    cin >> g >> p >> t;
    gi[i] = g;
    pi[i] = p;
    ti[i] = t;
    verhorz[p - t].push_back(i);
    jh[p - t]++;
  }
  for (auto y : jh) {
    vector<pair<pair<long double, long double>, long long int> > ends;
    vector<pair<pair<long double, long double>, long long int> > starts;
    for (auto z : verhorz[y.first]) {
      if (gi[z] == 1) {
        starts.push_back(make_pair(make_pair(pi[z], 0), z));
        ends.push_back(make_pair(make_pair(pi[z], -1 * h), z));
      } else {
        starts.push_back(make_pair(make_pair(0, -1 * pi[z]), z));
        ends.push_back(make_pair(make_pair(w, -1 * pi[z]), z));
      }
    }
    sort(starts.begin(), starts.end());
    sort(ends.begin(), ends.end());
    for (long long int i = 0; i < starts.size(); i++) {
      dest[starts[i].second].first = ends[i].first.first;
      dest[starts[i].second].second = -1 * ends[i].first.second;
    }
  }
  for (long long int i = 1; i <= n; i++) {
    cout << dest[i].first << " " << dest[i].second << endl;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

20 15 15
2 7 100000
1 2 100000
2 1 100000
1 9 100000
2 4 100000
2 3 100000
2 14 100000
1 6 100000
1 10 100000
2 5 100000
2 13 100000
1 8 100000
1 13 100000
1 14 100000
2 10 100000
1 5 100000
1 11 100000
1 12 100000
1 1 100000
2 2 100000


(G.2) Fast Input

3 12 8
1 6 15
2 1 9
2 2 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  pair<long double, long double> dest[100005]; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  long long int my[100005]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  long long int gi[100005]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  long long int pi[100005]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  long long int ti[100005]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  long long int n, w, h; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> w >> h; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  map<long long int, vector<long long int> > verhorz; /* line 11 slow_hit_count: 2, fast_hit_count: 2 */
  map<long long int, long long int> jh; /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long int i = 1; i <= n; i++) { /* line 13 slow_hit_count: 21, fast_hit_count: 4 */
    long long int g, p, t; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> g >> p >> t; /* line 15 slow_hit_count: 20, fast_hit_count: 3 */
    gi[i] = g; /* line 16 slow_hit_count: 20, fast_hit_count: 3 */
    pi[i] = p; /* line 17 slow_hit_count: 20, fast_hit_count: 3 */
    ti[i] = t; /* line 18 slow_hit_count: 20, fast_hit_count: 3 */
    verhorz[p - t].push_back(i); /* line 19 slow_hit_count: 20, fast_hit_count: 3 */
    jh[p - t]++; /* line 20 slow_hit_count: 20, fast_hit_count: 3 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto y : jh) { /* line 22 slow_hit_count: 15, fast_hit_count: 4 */
    vector<pair<pair<long double, long double>, long long int> > ends; /* line 23 slow_hit_count: 28, fast_hit_count: 6 */
    vector<pair<pair<long double, long double>, long long int> > starts; /* line 24 slow_hit_count: 28, fast_hit_count: 6 */
    for (auto z : verhorz[y.first]) { /* line 25 slow_hit_count: 34, fast_hit_count: 6 */
      if (gi[z] == 1) { /* line 26 slow_hit_count: 20, fast_hit_count: 3 */
        starts.push_back(make_pair(make_pair(pi[z], 0), z)); /* line 27 slow_hit_count: 11, fast_hit_count: 1 */
        ends.push_back(make_pair(make_pair(pi[z], -1 * h), z)); /* line 28 slow_hit_count: 11, fast_hit_count: 1 */
      } else { /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
        starts.push_back(make_pair(make_pair(0, -1 * pi[z]), z)); /* line 30 slow_hit_count: 9, fast_hit_count: 2 */
        ends.push_back(make_pair(make_pair(w, -1 * pi[z]), z)); /* line 31 slow_hit_count: 9, fast_hit_count: 2 */
      } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    sort(starts.begin(), starts.end()); /* line 34 slow_hit_count: 14, fast_hit_count: 3 */
    sort(ends.begin(), ends.end()); /* line 35 slow_hit_count: 14, fast_hit_count: 3 */
    for (long long int i = 0; i < starts.size(); i++) { /* line 36 slow_hit_count: 34, fast_hit_count: 6 */
      dest[starts[i].second].first = ends[i].first.first; /* line 37 slow_hit_count: 20, fast_hit_count: 3 */
      dest[starts[i].second].second = -1 * ends[i].first.second; /* line 38 slow_hit_count: 20, fast_hit_count: 3 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long int i = 1; i <= n; i++) { /* line 41 slow_hit_count: 21, fast_hit_count: 4 */
    cout << dest[i].first << " " << dest[i].second << endl; /* line 42 slow_hit_count: 20, fast_hit_count: 3 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 44 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks of the given C program and derive performance-characterizing invariants, let’s walk through the process:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis**:
   - **Line 13** (For loop over input dancers): This loop iterates over each dancer and has a hit count proportional to the number of dancers (`n`). In the slow run, it hits 21 times, compared to 4 times in the fast run.
   - **Lines 22-40** (Processing the dancers based on their adjusted time positions): This outer loop is hit 15 times in the slow run versus 4 times in the fast run, indicating that the number of unique `p - t` values (which dictate potential collision groups) is larger in the slow input.
   - **Lines 34 & 35** (Sorting operations): These lines are crucial as they are called frequently and involve sorting operations on vectors, which might become expensive if the vectors are large.
   - **Lines 36-39** (Nested loop over sorted dancer starts/ends): This loop is hit 34 times in the slow run versus 6 times in the fast run, indicating it scales with the number of dancers in collision groups.

2. **Data Structure and Algorithm Interaction**:
   - The primary data structure interaction occurs with the `verhorz` map and its corresponding vectors. The more unique `p-t` values indicate more potential collision groups, leading to more sorting and processing.

### Phase 2: Derive Performance-Characterizing Invariants

Based on this analysis, we can derive the following performance-characterizing invariants:

1. **Invariant 1: Increased Collision Group Size**:
   - **Natural Language**: “When the number of dancers that share a common `p-t` value (indicating potential collision) increases, the program’s performance may degrade significantly due to increased sorting and processing required for each group.”
   - **Threshold**: Consider groups where the number of dancers exceeds a certain fraction of `n`, possibly around `n / 10` or any significant fraction that leads to noticeable processing.

2. **Invariant 2: Sorting and Nested Loop Impact**:
   - **Natural Language**: “If the vectors of starting and ending positions in each collision group become large, particularly when their size approaches `n`, sorting operations and subsequent processing in nested loops can slow the program.”
   - **Threshold**: Trigger when a single collision group contains a substantial number of dancers, such as 10% of `n`.

3. **Invariant 3: High Collision Potential**:
   - **Natural Language**: “When multiple dancer groups with the same time offset (`p-t`) exist, the performance can degrade significantly due to overlapping computations and potential collisions being checked.”
   - **Threshold**: Trigger when the number of groups (`p-t` values) is a large fraction of `n`, indicating high potential for collisions.

These invariants focus on detecting conditions that lead to increased computational complexity due to structural nuances in the input data, particularly related to collision potential and group sorting, while abstracting away from specific parameters of the slow input.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Wherever the destination is, whoever we meet, let's render this song together.

On a Cartesian coordinate plane lies a rectangular stage of size w × h, represented by a rectangle with corners (0, 0), (w, 0), (w, h) and (0, h). It can be seen that no collisions will happen before one enters the stage.

On the sides of the stage stand n dancers. The i-th of them falls into one of the following groups: 

  * Vertical: stands at (xi, 0), moves in positive y direction (upwards); 
  * Horizontal: stands at (0, yi), moves in positive x direction (rightwards). 

<image>

According to choreography, the i-th dancer should stand still for the first ti milliseconds, and then start moving in the specified direction at 1 unit per millisecond, until another border is reached. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

When two dancers collide (i.e. are on the same point at some time when both of them are moving), they immediately exchange their moving directions and go on.

<image>

Dancers stop when a border of the stage is reached. Find out every dancer's stopping position.

Input

The first line of input contains three space-separated positive integers n, w and h (1 ≤ n ≤ 100 000, 2 ≤ w, h ≤ 100 000) — the number of dancers and the width and height of the stage, respectively.

The following n lines each describes a dancer: the i-th among them contains three space-separated integers gi, pi, and ti (1 ≤ gi ≤ 2, 1 ≤ pi ≤ 99 999, 0 ≤ ti ≤ 100 000), describing a dancer's group gi (gi = 1 — vertical, gi = 2 — horizontal), position, and waiting time. If gi = 1 then pi = xi; otherwise pi = yi. It's guaranteed that 1 ≤ xi ≤ w - 1 and 1 ≤ yi ≤ h - 1. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

Output

Output n lines, the i-th of which contains two space-separated integers (xi, yi) — the stopping position of the i-th dancer in the input.

Examples

Input

8 10 8
1 1 10
1 4 13
1 7 1
1 8 2
2 2 0
2 5 14
2 6 0
2 6 1


Output

4 8
10 5
8 8
10 6
10 2
1 8
7 8
10 6


Input

3 2 3
1 1 2
2 1 1
1 1 5


Output

1 3
2 1
1 3

Note

The first example corresponds to the initial setup in the legend, and the tracks of dancers are marked with different colours in the following figure.

<image>

In the second example, no dancers collide.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Based on the natural language invariants derived earlier, here is the C++ code that checks the performance bottleneck conditions at runtime:

```cpp
void check_collision_group_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Collision group size exceeds threshold!" << endl;
        abort();
    }
}

void check_sorting_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Sorting operation on large group!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Original Program

Now, we integrate the above checker functions into the provided C++ program at appropriate locations where they do not add overhead, especially not inside tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_collision_group_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Collision group size exceeds threshold!" << endl;
        abort();
    }
}

void check_sorting_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Sorting operation on large group!" << endl;
        abort();
    }
}

int main() {
    pair<long double, long double> dest[100005];
    long long int my[100005];
    long long int gi[100005];
    long long int pi[100005];
    long long int ti[100005];
    long long int n, w, h;
    cin >> n >> w >> h;
    map<long long int, vector<long long int> > verhorz;
    map<long long int, long long int> jh;
    
    for (long long int i = 1; i <= n; i++) {
        long long int g, p, t;
        cin >> g >> p >> t;
        gi[i] = g;
        pi[i] = p;
        ti[i] = t;
        verhorz[p - t].push_back(i);
        jh[p - t]++;
    }
    
    // Check for collision group size
    for (auto& y : verhorz) {
        check_collision_group_invariant(y.second.size() > n / 10); // Threshold: 10% of total dancers
    }
    
    for (auto y : jh) {
        vector<pair<pair<long double, long double>, long long int> > ends;
        vector<pair<pair<long double, long double>, long long int> > starts;
        
        for (auto z : verhorz[y.first]) {
            if (gi[z] == 1) {
                starts.push_back(make_pair(make_pair(pi[z], 0), z));
                ends.push_back(make_pair(make_pair(pi[z], -1 * h), z));
            } else {
                starts.push_back(make_pair(make_pair(0, -1 * pi[z]), z));
                ends.push_back(make_pair(make_pair(w, -1 * pi[z]), z));
            }
        }
        
        // Check for sorting on large groups
        check_sorting_invariant(starts.size() > n / 10); // Threshold: 10% of total dancers
        
        sort(starts.begin(), starts.end());
        sort(ends.begin(), ends.end());
        
        for (long long int i = 0; i < starts.size(); i++) {
            dest[starts[i].second].first = ends[i].first.first;
            dest[starts[i].second].second = -1 * ends[i].first.second;
        }
    }
    
    for (long long int i = 1; i <= n; i++) {
        cout << dest[i].first << " " << dest[i].second << endl;
    }
}
```

**Comments on Integration**:
- **Collision Group Size Check**: Inserted after building the `verhorz` map to verify that no single group exceeds a defined threshold size (10% of `n`).
- **Sorting Check**: Placed before sorting operations to ensure the vectors being sorted are not excessively large, set to the same 10% of `n` threshold.

These checks help identify potential performance bottlenecks without introducing significant runtime overhead in performance-critical sections.

