system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Wherever the destination is, whoever we meet, let's render this song together.

On a Cartesian coordinate plane lies a rectangular stage of size w × h, represented by a rectangle with corners (0, 0), (w, 0), (w, h) and (0, h). It can be seen that no collisions will happen before one enters the stage.

On the sides of the stage stand n dancers. The i-th of them falls into one of the following groups: 

  * Vertical: stands at (xi, 0), moves in positive y direction (upwards); 
  * Horizontal: stands at (0, yi), moves in positive x direction (rightwards). 

<image>

According to choreography, the i-th dancer should stand still for the first ti milliseconds, and then start moving in the specified direction at 1 unit per millisecond, until another border is reached. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

When two dancers collide (i.e. are on the same point at some time when both of them are moving), they immediately exchange their moving directions and go on.

<image>

Dancers stop when a border of the stage is reached. Find out every dancer's stopping position.

Input

The first line of input contains three space-separated positive integers n, w and h (1 ≤ n ≤ 100 000, 2 ≤ w, h ≤ 100 000) — the number of dancers and the width and height of the stage, respectively.

The following n lines each describes a dancer: the i-th among them contains three space-separated integers gi, pi, and ti (1 ≤ gi ≤ 2, 1 ≤ pi ≤ 99 999, 0 ≤ ti ≤ 100 000), describing a dancer's group gi (gi = 1 — vertical, gi = 2 — horizontal), position, and waiting time. If gi = 1 then pi = xi; otherwise pi = yi. It's guaranteed that 1 ≤ xi ≤ w - 1 and 1 ≤ yi ≤ h - 1. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

Output

Output n lines, the i-th of which contains two space-separated integers (xi, yi) — the stopping position of the i-th dancer in the input.

Examples

Input

8 10 8
1 1 10
1 4 13
1 7 1
1 8 2
2 2 0
2 5 14
2 6 0
2 6 1


Output

4 8
10 5
8 8
10 6
10 2
1 8
7 8
10 6


Input

3 2 3
1 1 2
2 1 1
1 1 5


Output

1 3
2 1
1 3

Note

The first example corresponds to the initial setup in the legend, and the tracks of dancers are marked with different colours in the following figure.

<image>

In the second example, no dancers collide.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MAXN = 100005;
map<int, vector<int> > mapV;
map<int, queue<int> > mapQ;
vector<pair<int, int> > pos[MAXN];
pair<int, int> res[MAXN];
struct Tri {
  int g, p, t, id;
} seq[MAXN];
bool operator<(const Tri &a, const Tri &b) { return a.p > b.p; }
int n, w, h;
int main() {
  ios::sync_with_stdio(false);
  cin >> n >> w >> h;
  for (int i = 1; i <= n; i++)
    cin >> seq[i].g >> seq[i].p >> seq[i].t, seq[i].id = i;
  sort(seq + 1, seq + n + 1);
  for (int i = 1; i <= n; i++) {
    if (seq[i].g == 1)
      pos[seq[i].p].push_back(make_pair(seq[i].id, seq[i].t));
    else {
      int T = seq[i].t - seq[i].p + 1;
      if (mapV.count(T) == 0) {
        mapV[T] = vector<int>();
        mapQ[T] = queue<int>();
      }
      mapV[T].push_back(seq[i].p);
      mapQ[T].push(seq[i].id);
    }
  }
  for (int i = 1; i <= w; i++) {
    if (pos[i].size() > 0) {
      for (vector<pair<int, int> >::iterator it = pos[i].begin();
           it != pos[i].end(); it++) {
        int T = it->second - i + 1;
        if (mapQ.count(T) != 0) {
          int id = mapQ[T].front();
          mapQ[T].pop();
          mapQ[T].push(it->first);
          res[id] = make_pair(i, h);
        } else
          res[it->first] = make_pair(i, h);
      }
    }
  }
  map<int, vector<int> >::iterator a = mapV.begin();
  map<int, queue<int> >::iterator b = mapQ.begin();
  for (; a != mapV.end() && b != mapQ.end(); a++, b++) {
    vector<int> &now = a->second;
    queue<int> &q = b->second;
    for (int i = 0; i < now.size(); i++) {
      res[q.front()] = make_pair(w, now[i]);
      q.pop();
    }
  }
  for (int i = 1; i <= n; i++)
    cout << res[i].first << " " << res[i].second << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

20 50000 50000
2 45955 55488
1 8618 29337
2 3767 90811
2 42724 33558
1 46985 56518
2 21094 30627
2 5787 15320
1 4262 91306
2 37231 46764
1 18125 27658
1 36532 12317
1 31330 40863
1 18992 28525
1 29387 9962
1 44654 54187
2 45485 55018
2 36850 46383
1 44649 54182
1 40922 50455
2 12781 99825


(G.2) Fast Input

1 10 10
2 8 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 100005; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
map<int, vector<int> > mapV; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
map<int, queue<int> > mapQ; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int> > pos[MAXN]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
pair<int, int> res[MAXN]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
struct Tri { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  int g, p, t, id; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
} seq[MAXN]; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
bool operator<(const Tri &a, const Tri &b) { return a.p > b.p; } /* line 11 slow_hit_count: 111, fast_hit_count: 0 */
int n, w, h; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> w >> h; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) /* line 16 slow_hit_count: 21, fast_hit_count: 2 */
    cin >> seq[i].g >> seq[i].p >> seq[i].t, seq[i].id = i; /* line 17 slow_hit_count: 20, fast_hit_count: 1 */
  sort(seq + 1, seq + n + 1); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 19 slow_hit_count: 21, fast_hit_count: 2 */
    if (seq[i].g == 1) /* line 20 slow_hit_count: 20, fast_hit_count: 1 */
      pos[seq[i].p].push_back(make_pair(seq[i].id, seq[i].t)); /* line 21 slow_hit_count: 11, fast_hit_count: 0 */
    else { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      int T = seq[i].t - seq[i].p + 1; /* line 23 slow_hit_count: 9, fast_hit_count: 1 */
      if (mapV.count(T) == 0) { /* line 24 slow_hit_count: 9, fast_hit_count: 1 */
        mapV[T] = vector<int>(); /* line 25 slow_hit_count: 3, fast_hit_count: 1 */
        mapQ[T] = queue<int>(); /* line 26 slow_hit_count: 3, fast_hit_count: 1 */
      } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      mapV[T].push_back(seq[i].p); /* line 28 slow_hit_count: 9, fast_hit_count: 1 */
      mapQ[T].push(seq[i].id); /* line 29 slow_hit_count: 9, fast_hit_count: 1 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= w; i++) { /* line 32 slow_hit_count: 50001, fast_hit_count: 11 */
    if (pos[i].size() > 0) { /* line 33 slow_hit_count: 50000, fast_hit_count: 10 */
      for (vector<pair<int, int> >::iterator it = pos[i].begin(); /* line 34 slow_hit_count: 22, fast_hit_count: 0 */
           it != pos[i].end(); it++) { /* line 35 slow_hit_count: 33, fast_hit_count: 0 */
        int T = it->second - i + 1; /* line 36 slow_hit_count: 11, fast_hit_count: 0 */
        if (mapQ.count(T) != 0) { /* line 37 slow_hit_count: 11, fast_hit_count: 0 */
          int id = mapQ[T].front(); /* line 38 slow_hit_count: 8, fast_hit_count: 0 */
          mapQ[T].pop(); /* line 39 slow_hit_count: 8, fast_hit_count: 0 */
          mapQ[T].push(it->first); /* line 40 slow_hit_count: 8, fast_hit_count: 0 */
          res[id] = make_pair(i, h); /* line 41 slow_hit_count: 8, fast_hit_count: 0 */
        } else /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
          res[it->first] = make_pair(i, h); /* line 43 slow_hit_count: 3, fast_hit_count: 0 */
      } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  map<int, vector<int> >::iterator a = mapV.begin(); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  map<int, queue<int> >::iterator b = mapQ.begin(); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  for (; a != mapV.end() && b != mapQ.end(); a++, b++) { /* line 49 slow_hit_count: 4, fast_hit_count: 2 */
    vector<int> &now = a->second; /* line 50 slow_hit_count: 3, fast_hit_count: 1 */
    queue<int> &q = b->second; /* line 51 slow_hit_count: 3, fast_hit_count: 1 */
    for (int i = 0; i < now.size(); i++) { /* line 52 slow_hit_count: 12, fast_hit_count: 2 */
      res[q.front()] = make_pair(w, now[i]); /* line 53 slow_hit_count: 9, fast_hit_count: 1 */
      q.pop(); /* line 54 slow_hit_count: 9, fast_hit_count: 1 */
    } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) /* line 57 slow_hit_count: 21, fast_hit_count: 2 */
    cout << res[i].first << " " << res[i].second << endl; /* line 58 slow_hit_count: 20, fast_hit_count: 1 */
  return 0; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 60 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the hit count information, we can observe several patterns and potential inefficiencies:

1. **Line 32 (`for (int i = 1; i <= w; i++)`):** The iteration over the width `w` occurs 50,001 times during the slow input run, compared to just 11 times for the fast input. This suggests that the loop over `w` is a significant contributor to the slowdown, particularly because it checks every column of the stage, regardless of whether any dancers are relevant to that column.

2. **Line 33 (`if (pos[i].size() > 0)`):** This line is evaluated 50,000 times for the slow input, indicating that most columns up to the width `w` are being inspected even when not necessary. Only 10 out of the 50000 iterations actually execute the subsequent loop, suggesting inefficient traversal or unnecessary checks.

3. **Line 49 (`for (; a != mapV.end() && b != mapQ.end(); a++, b++)`):** This loop iterates over maps `mapV` and `mapQ`, which together contain dancers grouped by a certain time parameter `T`. The slow input results in 4 iterations of this loop compared to 2 for the fast input, which is not a major difference, but still significant given the context size.

4. **Line 52 (`for (int i = 0; i < now.size(); i++)`):** This loop iterates 12 times for the slow input compared to 2 for the fast input, suggesting more complex processing due to larger data sizes or more collisions in the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants in natural language:

1. **Inefficient Iteration over Stage Width:**
   - **Invariant:** "If the stage width `w` is large and there are sparse or clustered dancers, the iteration checking each position up to `w` may become inefficient. This is especially likely if the number of dancers is small relative to `w`, leading to many unnecessary checks."
   - This is captured by the repeated execution of the outer loop over `w` even when few dancers are relevant.

2. **Sparse Occupancy of Positions Array:**
   - **Invariant:** "If many positions in the `pos` array remain empty (indicating few dancers start at those positions), iterating over this array becomes a bottleneck. The impact is pronounced when `w` approaches its maximum constraint and dancer positions are either highly clustered or spread out such that many positions are empty."
   - This is seen in the frequent execution of the condition `if (pos[i].size() > 0)`.

3. **Complex Grouping and Processing in Maps:**
   - **Invariant:** "When the maps `mapV` and `mapQ` contain many entries due to complex collision patterns or timing differences, processing these maps becomes more expensive. This can result from high variance in dancer starting times or positions."
   - Illustrated by the map traversal steps and the additional iterations observed during the slow input execution.

4. **Dancer Position and Timing Complexity:**
   - **Invariant:** "Dancers with significantly different starting positions and timing can cause more complex handling within the loops and maps, especially when these variations lead to frequent reassignment or temporal overlaps."
   - This is inferred from the additional work in the loops processing the `pos` array and the maps.

By considering these conditions, one can better anticipate the scenarios under which this code might slow down, even without exact numeric thresholds from the provided inputs. This understanding can guide optimization efforts, such as reducing unnecessary iterations or improving data structure access patterns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Wherever the destination is, whoever we meet, let's render this song together.

On a Cartesian coordinate plane lies a rectangular stage of size w × h, represented by a rectangle with corners (0, 0), (w, 0), (w, h) and (0, h). It can be seen that no collisions will happen before one enters the stage.

On the sides of the stage stand n dancers. The i-th of them falls into one of the following groups: 

  * Vertical: stands at (xi, 0), moves in positive y direction (upwards); 
  * Horizontal: stands at (0, yi), moves in positive x direction (rightwards). 

<image>

According to choreography, the i-th dancer should stand still for the first ti milliseconds, and then start moving in the specified direction at 1 unit per millisecond, until another border is reached. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

When two dancers collide (i.e. are on the same point at some time when both of them are moving), they immediately exchange their moving directions and go on.

<image>

Dancers stop when a border of the stage is reached. Find out every dancer's stopping position.

Input

The first line of input contains three space-separated positive integers n, w and h (1 ≤ n ≤ 100 000, 2 ≤ w, h ≤ 100 000) — the number of dancers and the width and height of the stage, respectively.

The following n lines each describes a dancer: the i-th among them contains three space-separated integers gi, pi, and ti (1 ≤ gi ≤ 2, 1 ≤ pi ≤ 99 999, 0 ≤ ti ≤ 100 000), describing a dancer's group gi (gi = 1 — vertical, gi = 2 — horizontal), position, and waiting time. If gi = 1 then pi = xi; otherwise pi = yi. It's guaranteed that 1 ≤ xi ≤ w - 1 and 1 ≤ yi ≤ h - 1. It is guaranteed that no two dancers have the same group, position and waiting time at the same time.

Output

Output n lines, the i-th of which contains two space-separated integers (xi, yi) — the stopping position of the i-th dancer in the input.

Examples

Input

8 10 8
1 1 10
1 4 13
1 7 1
1 8 2
2 2 0
2 5 14
2 6 0
2 6 1


Output

4 8
10 5
8 8
10 6
10 2
1 8
7 8
10 6


Input

3 2 3
1 1 2
2 1 1
1 1 5


Output

1 3
2 1
1 3

Note

The first example corresponds to the initial setup in the legend, and the tracks of dancers are marked with different colours in the following figure.

<image>

In the second example, no dancers collide.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariant Checks in C++

Below are the implementations of the performance-characterizing invariants as checker functions in C++ based on the natural language descriptions from Phase 2.

```cpp
#include <iostream>
using namespace std;

// Check for inefficient iteration over stage width
void check_stage_width_invariant(int w, int n) {
    if (w > 1000 && n < 10) { // Arbitrary threshold for sparse dancer population
        cerr << "Warning: Performance bottleneck condition triggered - large stage width with few dancers!" << endl;
        abort();
    }
}

// Check for sparse occupancy of positions array
void check_sparse_positions_invariant(const vector<pair<int, int> > pos[], int w) {
    int empty_positions = 0;
    for (int i = 1; i <= w; i++) {
        if (pos[i].empty()) {
            empty_positions++;
        }
    }
    if (empty_positions > w * 0.9) { // Arbitrary threshold for sparsity
        cerr << "Warning: Performance bottleneck condition triggered - many empty positions in pos array!" << endl;
        abort();
    }
}

// Check for complex grouping and processing in maps
void check_map_complexity_invariant(int distinctT) {
    if (distinctT > 20) { // Arbitrary threshold for complexity
        cerr << "Warning: Performance bottleneck condition triggered - complex map grouping!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original Program

Now, let's integrate these checks into the original C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 100005;
map<int, vector<int> > mapV;
map<int, queue<int> > mapQ;
vector<pair<int, int> > pos[MAXN];
pair<int, int> res[MAXN];
struct Tri {
    int g, p, t, id;
} seq[MAXN];
bool operator<(const Tri &a, const Tri &b) { return a.p > b.p; }
int n, w, h;

// Check functions
void check_stage_width_invariant(int w, int n) {
    if (w > 1000 && n < 10) {
        cerr << "Warning: Performance bottleneck condition triggered - large stage width with few dancers!" << endl;
        abort();
    }
}

void check_sparse_positions_invariant(const vector<pair<int, int> > pos[], int w) {
    int empty_positions = 0;
    for (int i = 1; i <= w; i++) {
        if (pos[i].empty()) {
            empty_positions++;
        }
    }
    if (empty_positions > w * 0.9) {
        cerr << "Warning: Performance bottleneck condition triggered - many empty positions in pos array!" << endl;
        abort();
    }
}

void check_map_complexity_invariant(int distinctT) {
    if (distinctT > 20) {
        cerr << "Warning: Performance bottleneck condition triggered - complex map grouping!" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin >> n >> w >> h;
    
    // Insert stage width invariant check after reading inputs
    check_stage_width_invariant(w, n);

    for (int i = 1; i <= n; i++)
        cin >> seq[i].g >> seq[i].p >> seq[i].t, seq[i].id = i;
    sort(seq + 1, seq + n + 1);

    for (int i = 1; i <= n; i++) {
        if (seq[i].g == 1)
            pos[seq[i].p].push_back(make_pair(seq[i].id, seq[i].t));
        else {
            int T = seq[i].t - seq[i].p + 1;
            if (mapV.count(T) == 0) {
                mapV[T] = vector<int>();
                mapQ[T] = queue<int>();
            }
            mapV[T].push_back(seq[i].p);
            mapQ[T].push(seq[i].id);
        }
    }

    // Insert sparse positions invariant check after populating `pos`
    check_sparse_positions_invariant(pos, w);

    for (int i = 1; i <= w; i++) {
        if (pos[i].size() > 0) {
            for (vector<pair<int, int> >::iterator it = pos[i].begin(); it != pos[i].end(); it++) {
                int T = it->second - i + 1;
                if (mapQ.count(T) != 0) {
                    int id = mapQ[T].front();
                    mapQ[T].pop();
                    mapQ[T].push(it->first);
                    res[id] = make_pair(i, h);
                } else
                    res[it->first] = make_pair(i, h);
            }
        }
    }

    // Insert map complexity invariant check before processing `mapV` and `mapQ`
    check_map_complexity_invariant(mapV.size());

    map<int, vector<int> >::iterator a = mapV.begin();
    map<int, queue<int> >::iterator b = mapQ.begin();
    for (; a != mapV.end() && b != mapQ.end(); a++, b++) {
        vector<int> &now = a->second;
        queue<int> &q = b->second;
        for (int i = 0; i < now.size(); i++) {
            res[q.front()] = make_pair(w, now[i]);
            q.pop();
        }
    }
    
    for (int i = 1; i <= n; i++)
        cout << res[i].first << " " << res[i].second << endl;
    
    return 0;
}
```

### Explanation

- **Stage Width Invariant:** We check the stage width and number of dancers immediately after reading inputs.
- **Sparse Positions Invariant:** This check is invoked after the `pos` array is populated to detect sparsity.
- **Map Complexity Invariant:** The complexity of grouping in `mapV` is checked before processing these maps. 

Each check is placed such that it does not add overhead inside tight loops while still ensuring that potential performance bottlenecks are detected early.

