system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The stardate is 1977 and the science and art of detecting Death Stars is in its infancy. Princess Heidi has received information about the stars in the nearby solar system from the Rebel spies and now, to help her identify the exact location of the Death Star, she needs to know whether this information is correct. 

Two rebel spies have provided her with the maps of the solar system. Each map is an N × N grid, where each cell is either occupied by a star or empty. To see whether the information is correct, Heidi needs to know whether the two maps are of the same solar system, or if possibly one of the spies is actually an Empire double agent, feeding her false information.

Unfortunately, spies may have accidentally rotated a map by 90, 180, or 270 degrees, or flipped it along the vertical or the horizontal axis, before delivering it to Heidi. If Heidi can rotate or flip the maps so that two of them become identical, then those maps are of the same solar system. Otherwise, there are traitors in the Rebel ranks! Help Heidi find out.

Input

The first line of the input contains one number N (1 ≤ N ≤ 10) – the dimension of each map. Next N lines each contain N characters, depicting the first map: 'X' indicates a star, while 'O' indicates an empty quadrant of space. Next N lines each contain N characters, depicting the second map in the same format.

Output

The only line of output should contain the word Yes if the maps are identical, or No if it is impossible to match them by performing rotations and translations.

Examples

Input

4
XOOO
XXOO
OOOO
XXXX
XOOO
XOOO
XOXO
XOXX


Output

Yes


Input

2
XX
OO
XO
OX


Output

No

Note

In the first test, you can match the first map to the second map by first flipping the first map along the vertical axis, and then by rotating it 90 degrees clockwise.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <typename t1, typename t2>
inline bool upmax(t1 &a, t2 b) {
  if (a < (t1)b) {
    a = (t1)b;
    return true;
  } else
    return false;
}
template <typename t1, typename t2>
inline bool upmin(t1 &a, t2 b) {
  if (a > (t1)b) {
    a = (t1)b;
    return true;
  } else
    return false;
}
template <typename T>
inline bool pal(T &x) {
  int n = (int((x.size())));
  for (int i = 0; i < n / 2; i++) {
    if (x[i] != x[n - i - 1]) return 0;
  }
  return 1;
}
template <typename T>
inline T gcd(T a, T b) {
  return b ? gcd(b, a % b) : a;
}
template <typename T>
inline T lcm(T a, T b) {
  return a * (b / gcd(a, b));
}
template <typename T>
inline T sqr(T a) {
  return a * a;
}
int month[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
int dx[] = {1, 0, -1, 0, 1, 1, -1, -1};
int dy[] = {0, 1, 0, -1, 1, -1, 1, -1};
inline long long mp(long long a, long long b) { return (a << 31) + b; }
class PQ_compare {
 public:
  bool operator()(const int a, const int b) const { return 1; }
};
const int INF = 1000000404;
const long long LINF = 4000000000000000404ll;
const long long MOD = 1000000007ll;
const long double PI = acos(-1.0);
const long double EPS = 1e-9;
int SQ = 404;
vector<string> rotate(vector<string> a) {
  int n = (int((a.size())));
  int m = (int((a[0].size())));
  vector<string> b(m);
  for (int i = 0; i < m; i++) {
    for (int j = 0; j < n; j++) {
      b[i] += "@";
    }
  }
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
      b[j][n - i - 1] = a[i][j];
    }
  }
  return b;
}
vector<string> flipV(vector<string> a) {
  int n = (int((a.size())));
  int m = (int((a[0].size())));
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < m / 2; j++) {
      swap(a[i][j], a[i][m - j - 1]);
    }
  }
  return a;
}
vector<string> flipH(vector<string> a) {
  int n = (int((a.size())));
  int m = (int((a[0].size())));
  for (int i = 0; i < n / 2; i++) {
    for (int j = 0; j < m; j++) {
      swap(a[i][j], a[n - i - 1][j]);
    }
  }
  return a;
}
bool same(vector<string> &a, vector<string> &b) {
  for (int i = 0; i < (int((a.size()))); i++) {
    for (int j = 0; j < (int((a.size()))); j++) {
      if (a[i][j] != b[i][j]) return false;
    }
  }
  return true;
}
void solve() {
  int n, m;
  cin >> n;
  vector<string> a;
  vector<string> c;
  for (int i = 0; i < n; i++) {
    string s;
    cin >> s;
    a.push_back(s);
  }
  for (int i = 0; i < n; i++) {
    string s;
    cin >> s;
    c.push_back(s);
  }
  int cm[] = {0, 1, 2, 3, 4};
  do {
    vector<string> b = a;
    for (int i = 0; i < 5; i++) {
      if (cm[i] == 0) {
        b = flipH(b);
      } else if (cm[i] == 4) {
        b = flipV(b);
      } else {
        for (int j = 0; j < cm[i]; j++) b = rotate(b);
      }
      if (same(b, c)) {
        cout << "Yes";
        return;
      }
    }
  } while (next_permutation(cm, cm + 5));
  cout << "No";
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  int t = 1;
  while (t--) solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
XXXOXOOXXX
OOXXOXXOXO
OOOOXOOXOX
XOOXOXOOXX
XOXXOXOOXX
OOOXXOXOXX
OOOXOOOOXO
OOXOOXXOXX
XXOXOOXOOX
OXXXOOXOXX
XXOXOOXXXO
XOOXOOXOXX
OOXOOXXOXX
OXOOOOXOOO
XXOXOXXOOO
XXOOXOXXOX
XXOOXOXOOX
XOXOOXOOOO
OXOXXOXXOO
XXXOOXOXXX


(G.2) Fast Input

10
XXXOXOOXXX
OOXXOXXOXO
OOOOXOOXOX
XOOXOXOOXX
XOXXOXOOXX
OOOXXOXOXX
OOOXOOOOXO
OOXOOXXOXX
XXOXOOXOOX
OXXXOOXOXX
XXOXOOXXXO
XOOXOOXOXX
XXOXXOOXOO
OXOOOOXOOO
XXOXOXXOOO
XXOOXOXXOX
XXOOXOXOOX
XOXOOXOOOO
OXOXXOXXOO
XXXOOXOXXX


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <typename t1, typename t2> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
inline bool upmax(t1 &a, t2 b) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  if (a < (t1)b) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
    a = (t1)b; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
    return true; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  } else /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    return false; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
template <typename t1, typename t2> /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
inline bool upmin(t1 &a, t2 b) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  if (a > (t1)b) { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    a = (t1)b; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    return true; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } else /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    return false; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
inline bool pal(T &x) { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  int n = (int((x.size()))); /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n / 2; i++) { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    if (x[i] != x[n - i - 1]) return 0; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  return 1; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
inline T gcd(T a, T b) { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  return b ? gcd(b, a % b) : a; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
inline T lcm(T a, T b) { /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  return a * (b / gcd(a, b)); /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
inline T sqr(T a) { /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  return a * a; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
int month[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
int dx[] = {1, 0, -1, 0, 1, 1, -1, -1}; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
int dy[] = {0, 1, 0, -1, 1, -1, 1, -1}; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
inline long long mp(long long a, long long b) { return (a << 31) + b; } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
class PQ_compare { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  bool operator()(const int a, const int b) const { return 1; } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 1000000404; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
const long long LINF = 4000000000000000404ll; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 1000000007ll; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
const long double PI = acos(-1.0); /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
const long double EPS = 1e-9; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
int SQ = 404; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
vector<string> rotate(vector<string> a) { /* line 53 slow_hit_count: 720, fast_hit_count: 12 */
  int n = (int((a.size()))); /* line 54 slow_hit_count: 720, fast_hit_count: 12 */
  int m = (int((a[0].size()))); /* line 55 slow_hit_count: 720, fast_hit_count: 12 */
  vector<string> b(m); /* line 56 slow_hit_count: 720, fast_hit_count: 12 */
  for (int i = 0; i < m; i++) { /* line 57 slow_hit_count: 7920, fast_hit_count: 132 */
    for (int j = 0; j < n; j++) { /* line 58 slow_hit_count: 79200, fast_hit_count: 1320 */
      b[i] += "@"; /* line 59 slow_hit_count: 72000, fast_hit_count: 1200 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 62 slow_hit_count: 7920, fast_hit_count: 132 */
    for (int j = 0; j < m; j++) { /* line 63 slow_hit_count: 79200, fast_hit_count: 1320 */
      b[j][n - i - 1] = a[i][j]; /* line 64 slow_hit_count: 72000, fast_hit_count: 1200 */
    } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  return b; /* line 67 slow_hit_count: 720, fast_hit_count: 12 */
} /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
vector<string> flipV(vector<string> a) { /* line 69 slow_hit_count: 120, fast_hit_count: 2 */
  int n = (int((a.size()))); /* line 70 slow_hit_count: 120, fast_hit_count: 2 */
  int m = (int((a[0].size()))); /* line 71 slow_hit_count: 120, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) { /* line 72 slow_hit_count: 1320, fast_hit_count: 22 */
    for (int j = 0; j < m / 2; j++) { /* line 73 slow_hit_count: 7200, fast_hit_count: 120 */
      swap(a[i][j], a[i][m - j - 1]); /* line 74 slow_hit_count: 6000, fast_hit_count: 100 */
    } /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  return a; /* line 77 slow_hit_count: 120, fast_hit_count: 2 */
} /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
vector<string> flipH(vector<string> a) { /* line 79 slow_hit_count: 120, fast_hit_count: 2 */
  int n = (int((a.size()))); /* line 80 slow_hit_count: 120, fast_hit_count: 2 */
  int m = (int((a[0].size()))); /* line 81 slow_hit_count: 120, fast_hit_count: 2 */
  for (int i = 0; i < n / 2; i++) { /* line 82 slow_hit_count: 720, fast_hit_count: 12 */
    for (int j = 0; j < m; j++) { /* line 83 slow_hit_count: 6600, fast_hit_count: 110 */
      swap(a[i][j], a[n - i - 1][j]); /* line 84 slow_hit_count: 6000, fast_hit_count: 100 */
    } /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
  return a; /* line 87 slow_hit_count: 120, fast_hit_count: 2 */
} /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
bool same(vector<string> &a, vector<string> &b) { /* line 89 slow_hit_count: 600, fast_hit_count: 10 */
  for (int i = 0; i < (int((a.size()))); i++) { /* line 90 slow_hit_count: 808, fast_hit_count: 20 */
    for (int j = 0; j < (int((a.size()))); j++) { /* line 91 slow_hit_count: 3472, fast_hit_count: 130 */
      if (a[i][j] != b[i][j]) return false; /* line 92 slow_hit_count: 3264, fast_hit_count: 120 */
    } /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 95 slow_hit_count: 0, fast_hit_count: 1 */
} /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 97 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m; /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
  vector<string> a; /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
  vector<string> c; /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 102 slow_hit_count: 11, fast_hit_count: 11 */
    string s; /* line 103 slow_hit_count: 20, fast_hit_count: 20 */
    cin >> s; /* line 104 slow_hit_count: 10, fast_hit_count: 10 */
    a.push_back(s); /* line 105 slow_hit_count: 10, fast_hit_count: 10 */
  } /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 107 slow_hit_count: 11, fast_hit_count: 11 */
    string s; /* line 108 slow_hit_count: 20, fast_hit_count: 20 */
    cin >> s; /* line 109 slow_hit_count: 10, fast_hit_count: 10 */
    c.push_back(s); /* line 110 slow_hit_count: 10, fast_hit_count: 10 */
  } /* line 111 slow_hit_count: 0, fast_hit_count: 0 */
  int cm[] = {0, 1, 2, 3, 4}; /* line 112 slow_hit_count: 1, fast_hit_count: 1 */
  do { /* line 113 slow_hit_count: 119, fast_hit_count: 1 */
    vector<string> b = a; /* line 114 slow_hit_count: 120, fast_hit_count: 2 */
    for (int i = 0; i < 5; i++) { /* line 115 slow_hit_count: 720, fast_hit_count: 11 */
      if (cm[i] == 0) { /* line 116 slow_hit_count: 600, fast_hit_count: 10 */
        b = flipH(b); /* line 117 slow_hit_count: 120, fast_hit_count: 2 */
      } else if (cm[i] == 4) { /* line 118 slow_hit_count: 480, fast_hit_count: 8 */
        b = flipV(b); /* line 119 slow_hit_count: 120, fast_hit_count: 2 */
      } else { /* line 120 slow_hit_count: 0, fast_hit_count: 0 */
        for (int j = 0; j < cm[i]; j++) b = rotate(b); /* line 121 slow_hit_count: 1080, fast_hit_count: 18 */
      } /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
      if (same(b, c)) { /* line 123 slow_hit_count: 600, fast_hit_count: 10 */
        cout << "Yes"; /* line 124 slow_hit_count: 0, fast_hit_count: 1 */
        return; /* line 125 slow_hit_count: 0, fast_hit_count: 1 */
      } /* line 126 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 127 slow_hit_count: 0, fast_hit_count: 0 */
  } while (next_permutation(cm, cm + 5)); /* line 128 slow_hit_count: 120, fast_hit_count: 1 */
  cout << "No"; /* line 129 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 130 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 131 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 132 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 133 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 134 slow_hit_count: 1, fast_hit_count: 1 */
  int t = 1; /* line 135 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) solve(); /* line 136 slow_hit_count: 2, fast_hit_count: 2 */
  return 0; /* line 137 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 138 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks of the given C program, let's follow a structured approach to identify where the slowdown occurs and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information provided, some areas of the code have significantly higher hit counts for the slow input compared to the fast input. We will focus on these areas to understand the performance bottlenecks:

1. **Rotation Function (`rotate`)**:
   - The `rotate` function is called 720 times for the slow input but only 12 times for the fast input.
   - The nested loops inside the `rotate` function are executed significantly more times, and the operations within these loops contribute to the slowdown.

2. **Flip Functions (`flipV` and `flipH`)**:
   - Both `flipV` and `flipH` functions have higher hit counts for the slow input, with `flipH` being called 120 times and `flipV` 120 times for the slow input, compared to 2 each for the fast input.

3. **Same Function (`same`)**:
   - The `same` function, which checks if two maps are identical, has higher hit counts because it is repeatedly called within permutations and transformations.

4. **Permutation and Transformation Logic**:
   - The main loop using `next_permutation` generates all possible transformations, and for each transformation, multiple flips and rotations are being tried. This results in high iteration counts when the transformation checks do not lead to an early exit (`cout << "Yes"; return;`).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the natural language performance invariants that describe the conditions under which the code slows down:

1. **Rotation Overuse Invariant**:
   - Natural Language Description: "If a map undergoes repeated rotations (more than 90 rotations for an N=10 grid), the algorithm may slow down significantly as each rotation involves multiple nested loop iterations."
   - This condition is triggered when a sequence of operations requires numerous rotations to attempt to match the maps.

2. **Permutation Exhaustion Invariant**:
   - Natural Language Description: "If the algorithm explores nearly all permutations of transformations without finding a match, the performance may degrade since each permutation involves costly transformation checks."
   - High hit counts in the permutation logic suggest that the algorithm exhaustively tries transformations, especially when initial transformations do not lead to early matches.

3. **Flip Redundancy Invariant**:
   - Natural Language Description: "Excessive horizontal or vertical flips (more than 20 flips for N=10) in combination with rotations can lead to performance bottlenecks due to repetitive processing of similar transformations."
   - This indicates that when flips are performed repeatedly without immediate effect, the combination with rotations becomes particularly costly.

4. **Combination Complexity Invariant**:
   - Natural Language Description: "Complex combinations of flips and rotations that do not quickly yield a match can lead to slow performance, especially when the N is at its maximum limit (N=10)."
   - This reflects the slow path when complex combinations do not result in early exits.

These invariants abstract the conditions leading to slow execution into patterns of operations and input, avoiding reliance on specific input values while considering the problem constraints (e.g., N=10).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The stardate is 1977 and the science and art of detecting Death Stars is in its infancy. Princess Heidi has received information about the stars in the nearby solar system from the Rebel spies and now, to help her identify the exact location of the Death Star, she needs to know whether this information is correct. 

Two rebel spies have provided her with the maps of the solar system. Each map is an N × N grid, where each cell is either occupied by a star or empty. To see whether the information is correct, Heidi needs to know whether the two maps are of the same solar system, or if possibly one of the spies is actually an Empire double agent, feeding her false information.

Unfortunately, spies may have accidentally rotated a map by 90, 180, or 270 degrees, or flipped it along the vertical or the horizontal axis, before delivering it to Heidi. If Heidi can rotate or flip the maps so that two of them become identical, then those maps are of the same solar system. Otherwise, there are traitors in the Rebel ranks! Help Heidi find out.

Input

The first line of the input contains one number N (1 ≤ N ≤ 10) – the dimension of each map. Next N lines each contain N characters, depicting the first map: 'X' indicates a star, while 'O' indicates an empty quadrant of space. Next N lines each contain N characters, depicting the second map in the same format.

Output

The only line of output should contain the word Yes if the maps are identical, or No if it is impossible to match them by performing rotations and translations.

Examples

Input

4
XOOO
XXOO
OOOO
XXXX
XOOO
XOOO
XOXO
XOXX


Output

Yes


Input

2
XX
OO
XO
OX


Output

No

Note

In the first test, you can match the first map to the second map by first flipping the first map along the vertical axis, and then by rotating it 90 degrees clockwise.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Here, we will convert the natural language invariants derived earlier into C++ checker code.

1. **Rotation Overuse Invariant**:
   ```cpp
   void check_rotation_invariant(int rotationCount) {
       if (rotationCount > 90) {  // Assuming N=10, more than 90 rotations is excessive
           cerr << "Warning: Performance bottleneck condition triggered - excessive rotations!" << endl;
           abort();
       }
   }
   ```

2. **Permutation Exhaustion Invariant**:
   ```cpp
   void check_permutation_invariant(int permutationCount) {
       if (permutationCount > 100) {  // Arbitrary threshold for permutation checks
           cerr << "Warning: Performance bottleneck condition triggered - excessive permutations!" << endl;
           abort();
       }
   }
   ```

3. **Flip Redundancy Invariant**:
   ```cpp
   void check_flip_invariant(int flipCount) {
       if (flipCount > 20) {  // More than 20 flips can be considered excessive for N=10
           cerr << "Warning: Performance bottleneck condition triggered - excessive flips!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checker Code into the Original Program

Below is the instrumented C++ code with the performance checkers incorporated:

```cpp
#include <bits/stdc++.h>
using namespace std;

vector<string> rotate(vector<string> a) {
    int n = (int((a.size())));
    int m = (int((a[0].size())));
    vector<string> b(m);
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            b[i] += "@";
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            b[j][n - i - 1] = a[i][j];
        }
    }
    return b;
}

vector<string> flipV(vector<string> a) {
    int n = (int((a.size())));
    int m = (int((a[0].size())));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m / 2; j++) {
            swap(a[i][j], a[i][m - j - 1]);
        }
    }
    return a;
}

vector<string> flipH(vector<string> a) {
    int n = (int((a.size())));
    int m = (int((a[0].size())));
    for (int i = 0; i < n / 2; i++) {
        for (int j = 0; j < m; j++) {
            swap(a[i][j], a[n - i - 1][j]);
        }
    }
    return a;
}

bool same(vector<string>& a, vector<string>& b) {
    for (int i = 0; i < (int((a.size()))); i++) {
        for (int j = 0; j < (int((a.size()))); j++) {
            if (a[i][j] != b[i][j]) return false;
        }
    }
    return true;
}

// Checker functions
void check_rotation_invariant(int rotationCount) {
    if (rotationCount > 90) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive rotations!" << endl;
        abort();
    }
}

void check_permutation_invariant(int permutationCount) {
    if (permutationCount > 100) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive permutations!" << endl;
        abort();
    }
}

void check_flip_invariant(int flipCount) {
    if (flipCount > 20) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive flips!" << endl;
        abort();
    }
}

void solve() {
    int n;
    cin >> n;
    vector<string> a;
    vector<string> c;
    for (int i = 0; i < n; i++) {
        string s;
        cin >> s;
        a.push_back(s);
    }
    for (int i = 0; i < n; i++) {
        string s;
        cin >> s;
        c.push_back(s);
    }
    int cm[] = {0, 1, 2, 3, 4};
    int rotationCount = 0, permutationCount = 0, flipCount = 0;  // Counters for invariants

    do {
        permutationCount++;
        check_permutation_invariant(permutationCount);  // Check for excessive permutations

        vector<string> b = a;
        for (int i = 0; i < 5; i++) {
            if (cm[i] == 0) {
                b = flipH(b);
                flipCount++;
                check_flip_invariant(flipCount);  // Check for excessive flips
            } else if (cm[i] == 4) {
                b = flipV(b);
                flipCount++;
                check_flip_invariant(flipCount);  // Check for excessive flips
            } else {
                for (int j = 0; j < cm[i]; j++) {
                    b = rotate(b);
                    rotationCount++;
                    check_rotation_invariant(rotationCount);  // Check for excessive rotations
                }
            }
            if (same(b, c)) {
                cout << "Yes";
                return;
            }
        }
    } while (next_permutation(cm, cm + 5));
    cout << "No";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int t = 1;
    while (t--) solve();
    return 0;
}
```

### Explanation

- **Placement of Checks**: The checks are placed outside of tight loops but within logical flow areas where permutations, rotations, and flips occur, to minimize additional overhead.
- **Counters**: Counters are used to track the number of permutations, rotations, and flips. These counters are checked against thresholds to trigger performance warnings.
- **Effective Use**: These checks are designed to catch potential performance issues without interfering with normal operation when conditions are within reasonable limits.

