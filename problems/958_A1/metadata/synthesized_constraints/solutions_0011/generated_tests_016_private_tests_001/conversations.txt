system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The stardate is 1977 and the science and art of detecting Death Stars is in its infancy. Princess Heidi has received information about the stars in the nearby solar system from the Rebel spies and now, to help her identify the exact location of the Death Star, she needs to know whether this information is correct. 

Two rebel spies have provided her with the maps of the solar system. Each map is an N × N grid, where each cell is either occupied by a star or empty. To see whether the information is correct, Heidi needs to know whether the two maps are of the same solar system, or if possibly one of the spies is actually an Empire double agent, feeding her false information.

Unfortunately, spies may have accidentally rotated a map by 90, 180, or 270 degrees, or flipped it along the vertical or the horizontal axis, before delivering it to Heidi. If Heidi can rotate or flip the maps so that two of them become identical, then those maps are of the same solar system. Otherwise, there are traitors in the Rebel ranks! Help Heidi find out.

Input

The first line of the input contains one number N (1 ≤ N ≤ 10) – the dimension of each map. Next N lines each contain N characters, depicting the first map: 'X' indicates a star, while 'O' indicates an empty quadrant of space. Next N lines each contain N characters, depicting the second map in the same format.

Output

The only line of output should contain the word Yes if the maps are identical, or No if it is impossible to match them by performing rotations and translations.

Examples

Input

4
XOOO
XXOO
OOOO
XXXX
XOOO
XOOO
XOXO
XOXX


Output

Yes


Input

2
XX
OO
XO
OX


Output

No

Note

In the first test, you can match the first map to the second map by first flipping the first map along the vertical axis, and then by rotating it 90 degrees clockwise.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using Matrix = vector<vector<char>>;
Matrix Rotate90(const Matrix& m) {
  const int n = (int)m.size();
  Matrix res(n, vector<char>(n));
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < n; ++j) {
      res[i][j] = m[n - 1 - j][i];
    }
  }
  return res;
}
Matrix Rotate180(const Matrix& m) { return Rotate90(Rotate90(m)); }
Matrix Rotate270(const Matrix& m) { return Rotate90(Rotate180(m)); }
Matrix FlipVertical(const Matrix& m) {
  const int n = (int)m.size();
  Matrix res(n, vector<char>(n));
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < n; ++j) {
      res[i][j] = m[n - i - 1][j];
    }
  }
  return res;
}
Matrix FlipHorizontal(const Matrix& m) {
  return Rotate180(FlipVertical(Rotate180(m)));
}
int main() {
  int n;
  cin >> n;
  Matrix a(n, vector<char>(n)), b(n, vector<char>(n));
  for (auto& x : {&a, &b}) {
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < n; ++j) {
        cin >> (*x)[i][j];
      }
    }
  }
  vector<Matrix (*)(const Matrix&)> funcs = {Rotate90, Rotate180, Rotate270};
  for (int i = 0; i <= 3; ++i) {
    Matrix x = (i == 3) ? b : funcs[i](b);
    for (int mask = 0; mask <= 3; ++mask) {
      if (mask & 1) {
        x = FlipVertical(x);
      }
      if (mask >> 1 & 1) {
        x = FlipHorizontal(x);
      }
      for (int j = 0; j <= 3; ++j) {
        Matrix y = (j == 3) ? x : funcs[j](x);
        if (y == a) {
          cout << "Yes\n";
          return 0;
        }
      }
    }
  }
  cout << "No\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
XXXOXOOXXX
OOXXOXXOXO
OOOOXOOXOX
XOOXOXOOXX
XOXXOXOOXX
OOOXXOXOXX
OOOXOOOOXO
OOXOOXXOXX
XXOXOOXOOX
OXXXOOXOXX
XXOXOOXXXO
XOOXOOXOXX
OOXOOXXOXX
OXOOOOXOOO
XXOXOXXOOO
XXOOXOXXOX
XXOOXOXOOX
XOXOOXOOOO
OXOXXOXXOO
XXXOOXOXXX


(G.2) Fast Input

10
XXXOXOOXXX
OOXXOXXOXO
OOOOXOOXOX
XOOXOXOOXX
XOXXOXOOXX
OOOXXOXOXX
OOOXOOOOXO
OOXOOXXOXX
XXOXOOXOOX
OXXXOOXOXX
XXOXOOXXXO
XOOXOOXOXX
XXOXXOOXOO
OXOOOOXOOO
XXOXOXXOOO
XXOOXOXXOX
XXOOXOXOOX
XOXOOXOOOO
OXOXXOXXOO
XXXOOXOXXX


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using Matrix = vector<vector<char>>; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
Matrix Rotate90(const Matrix& m) { /* line 4 slow_hit_count: 134, fast_hit_count: 2 */
  const int n = (int)m.size(); /* line 5 slow_hit_count: 134, fast_hit_count: 2 */
  Matrix res(n, vector<char>(n)); /* line 6 slow_hit_count: 268, fast_hit_count: 4 */
  for (int i = 0; i < n; ++i) { /* line 7 slow_hit_count: 1474, fast_hit_count: 22 */
    for (int j = 0; j < n; ++j) { /* line 8 slow_hit_count: 14740, fast_hit_count: 220 */
      res[i][j] = m[n - 1 - j][i]; /* line 9 slow_hit_count: 13400, fast_hit_count: 200 */
    } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 12 slow_hit_count: 134, fast_hit_count: 2 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
Matrix Rotate180(const Matrix& m) { return Rotate90(Rotate90(m)); } /* line 14 slow_hit_count: 100, fast_hit_count: 0 */
Matrix Rotate270(const Matrix& m) { return Rotate90(Rotate180(m)); } /* line 15 slow_hit_count: 34, fast_hit_count: 0 */
Matrix FlipVertical(const Matrix& m) { /* line 16 slow_hit_count: 16, fast_hit_count: 0 */
  const int n = (int)m.size(); /* line 17 slow_hit_count: 16, fast_hit_count: 0 */
  Matrix res(n, vector<char>(n)); /* line 18 slow_hit_count: 32, fast_hit_count: 0 */
  for (int i = 0; i < n; ++i) { /* line 19 slow_hit_count: 176, fast_hit_count: 0 */
    for (int j = 0; j < n; ++j) { /* line 20 slow_hit_count: 1760, fast_hit_count: 0 */
      res[i][j] = m[n - i - 1][j]; /* line 21 slow_hit_count: 1600, fast_hit_count: 0 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 24 slow_hit_count: 16, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
Matrix FlipHorizontal(const Matrix& m) { /* line 26 slow_hit_count: 8, fast_hit_count: 0 */
  return Rotate180(FlipVertical(Rotate180(m))); /* line 27 slow_hit_count: 16, fast_hit_count: 0 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  Matrix a(n, vector<char>(n)), b(n, vector<char>(n)); /* line 32 slow_hit_count: 3, fast_hit_count: 3 */
  for (auto& x : {&a, &b}) { /* line 33 slow_hit_count: 3, fast_hit_count: 3 */
    for (int i = 0; i < n; ++i) { /* line 34 slow_hit_count: 22, fast_hit_count: 22 */
      for (int j = 0; j < n; ++j) { /* line 35 slow_hit_count: 220, fast_hit_count: 220 */
        cin >> (*x)[i][j]; /* line 36 slow_hit_count: 200, fast_hit_count: 200 */
      } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  vector<Matrix (*)(const Matrix&)> funcs = {Rotate90, Rotate180, Rotate270}; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 3; ++i) { /* line 41 slow_hit_count: 5, fast_hit_count: 1 */
    Matrix x = (i == 3) ? b : funcs[i](b); /* line 42 slow_hit_count: 4, fast_hit_count: 1 */
    for (int mask = 0; mask <= 3; ++mask) { /* line 43 slow_hit_count: 20, fast_hit_count: 1 */
      if (mask & 1) { /* line 44 slow_hit_count: 16, fast_hit_count: 1 */
        x = FlipVertical(x); /* line 45 slow_hit_count: 8, fast_hit_count: 0 */
      } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
      if (mask >> 1 & 1) { /* line 47 slow_hit_count: 16, fast_hit_count: 1 */
        x = FlipHorizontal(x); /* line 48 slow_hit_count: 8, fast_hit_count: 0 */
      } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = 0; j <= 3; ++j) { /* line 50 slow_hit_count: 80, fast_hit_count: 1 */
        Matrix y = (j == 3) ? x : funcs[j](x); /* line 51 slow_hit_count: 64, fast_hit_count: 1 */
        if (y == a) { /* line 52 slow_hit_count: 64, fast_hit_count: 1 */
          cout << "Yes\n"; /* line 53 slow_hit_count: 0, fast_hit_count: 1 */
          return 0; /* line 54 slow_hit_count: 0, fast_hit_count: 1 */
        } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "No\n"; /* line 59 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 60 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To tackle the performance issues observed in the C program, we need to analyze the code and identify sections that contribute significantly to the slowdown, particularly when comparing the hit counts for the slow and fast inputs. Here's a descriptive breakdown and our findings:

### Phase 1: Identify Expensive Code Segments

1. **Significant Lines with High Hit Count Differences:**
   - **`Rotate90` Function:**
     - The `Rotate90` function has a high hit count in the slow input (`134` calls) compared to the fast input (`2` calls). This suggests that this function is invoked far more frequently in the slow scenario.
     - Within `Rotate90`, the nested loops (lines 7-9) exhibit a considerable number of iterations, contributing to the sluggish performance.
   
   - **Rotation Functions (`Rotate180`, `Rotate270`):**
     - Both `Rotate180` and `Rotate270` are invoked more often in the slow input, with `Rotate180` being called `100` times and `Rotate270` `34` times, while they are not called at all in the fast input.
   
   - **Flipping Functions:**
     - `FlipVertical` and `FlipHorizontal` are also called more frequently in the slow input, indicating that the combination of flipping and rotating is excessive when handling the slow input.

2. **Loops and Transformations:**
   - The main bottleneck seems to stem from the nested loops in the `Rotate90` function, combined with the multiple calls to transformation functions (`Rotate180`, `Rotate270`, `FlipVertical`, and `FlipHorizontal`). These operations form multiple combinations of transformations that can be computationally expensive when executed repeatedly.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations above, we can derive the following natural language invariants which describe conditions likely to trigger slow execution paths:

1. **Invariant on Rotation Overhead:**
   - **Natural Language Description:** "If the code frequently attempts to align maps by repeatedly applying rotations (90, 180, and 270 degrees) and flips, the repeated transformations can significantly degrade performance, especially when each transformation is computationally expensive."
   
2. **Invariant on Excessive Transformations:**
   - **Natural Language Description:** "When a large number of transformation combinations (including both rotations and flips) are attempted in sequence, the resulting overhead may slow down the program. This is exacerbated if the transformation functions are called many times within nested loops."

3. **Invariant on Redundant Checks:**
   - **Natural Language Description:** "If the program checks for map equivalence against all possible transformed states without early exits when a match is found, excessive computation may occur, leading to performance bottlenecks."

### Suggested Improvements

To mitigate these performance issues, consider implementing:
- **Early Exit on Match:** Once a matching configuration is found, exit further transformation checks immediately to save unnecessary computations.
- **Optimize Transformations:** Consider caching results of transformations to avoid redundant calculations or streamline the number of transformations by recognizing symmetrical properties of maps.

These performance-characterizing invariants and potential improvements should help identify and address slow execution paths effectively, ensuring the program runs efficiently even under challenging conditions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The stardate is 1977 and the science and art of detecting Death Stars is in its infancy. Princess Heidi has received information about the stars in the nearby solar system from the Rebel spies and now, to help her identify the exact location of the Death Star, she needs to know whether this information is correct. 

Two rebel spies have provided her with the maps of the solar system. Each map is an N × N grid, where each cell is either occupied by a star or empty. To see whether the information is correct, Heidi needs to know whether the two maps are of the same solar system, or if possibly one of the spies is actually an Empire double agent, feeding her false information.

Unfortunately, spies may have accidentally rotated a map by 90, 180, or 270 degrees, or flipped it along the vertical or the horizontal axis, before delivering it to Heidi. If Heidi can rotate or flip the maps so that two of them become identical, then those maps are of the same solar system. Otherwise, there are traitors in the Rebel ranks! Help Heidi find out.

Input

The first line of the input contains one number N (1 ≤ N ≤ 10) – the dimension of each map. Next N lines each contain N characters, depicting the first map: 'X' indicates a star, while 'O' indicates an empty quadrant of space. Next N lines each contain N characters, depicting the second map in the same format.

Output

The only line of output should contain the word Yes if the maps are identical, or No if it is impossible to match them by performing rotations and translations.

Examples

Input

4
XOOO
XXOO
OOOO
XXXX
XOOO
XOOO
XOXO
XOXX


Output

Yes


Input

2
XX
OO
XO
OX


Output

No

Note

In the first test, you can match the first map to the second map by first flipping the first map along the vertical axis, and then by rotating it 90 degrees clockwise.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as Runtime Checks in C++

Here, I will translate the previously derived natural language performance invariants into C++ runtime checkers. These checkers will detect potential performance bottlenecks during execution.

#### Invariant 1: Rotation Overhead
**Description:** Detects if excessive rotations are being attempted.

```cpp
void check_rotation_invariant(int rotationCount) {
    if (rotationCount > 10) { // Since N <= 10, using a threshold of 10 rotations as a precaution
        cerr << "Warning: Performance bottleneck condition triggered - excessive rotations!" << endl;
        abort();
    }
}
```

#### Invariant 2: Excessive Transformations
**Description:** Checks for excessive combinations of transformations (rotations and flips).

```cpp
void check_transformation_invariant(int transformationCount) {
    if (transformationCount > 50) { // Arbitrary threshold to catch excessive transformations
        cerr << "Warning: Performance bottleneck condition triggered - excessive transformations!" << endl;
        abort();
    }
}
```

#### Invariant 3: Redundant Checks
**Description:** Warns if equivalence checks are repeated excessively without early termination.

```cpp
void check_equivalence_invariant(int checkCount) {
    if (checkCount > 100) { // Since N <= 10, a high number of checks would be unusual
        cerr << "Warning: Performance bottleneck condition triggered - excessive equivalence checks!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Runtime Checks into the Original Program

Now, I will integrate these checks into the original C++ program at appropriate locations to monitor performance conditions without introducing significant overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;
using Matrix = vector<vector<char>>;

// Checker functions
void check_rotation_invariant(int rotationCount) {
    if (rotationCount > 10) { // Excessive rotations
        cerr << "Warning: Performance bottleneck condition triggered - excessive rotations!" << endl;
        abort();
    }
}

void check_transformation_invariant(int transformationCount) {
    if (transformationCount > 50) { // Excessive transformations
        cerr << "Warning: Performance bottleneck condition triggered - excessive transformations!" << endl;
        abort();
    }
}

void check_equivalence_invariant(int checkCount) {
    if (checkCount > 100) { // Excessive equivalence checks
        cerr << "Warning: Performance bottleneck condition triggered - excessive equivalence checks!" << endl;
        abort();
    }
}

Matrix Rotate90(const Matrix& m) {
    const int n = (int)m.size();
    Matrix res(n, vector<char>(n));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            res[i][j] = m[n - 1 - j][i];
        }
    }
    return res;
}

Matrix Rotate180(const Matrix& m) { return Rotate90(Rotate90(m)); }
Matrix Rotate270(const Matrix& m) { return Rotate90(Rotate180(m)); }

Matrix FlipVertical(const Matrix& m) {
    const int n = (int)m.size();
    Matrix res(n, vector<char>(n));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            res[i][j] = m[n - i - 1][j];
        }
    }
    return res;
}

Matrix FlipHorizontal(const Matrix& m) {
    return Rotate180(FlipVertical(Rotate180(m)));
}

int main() {
    int n;
    cin >> n;
    Matrix a(n, vector<char>(n)), b(n, vector<char>(n));
    for (auto& x : {&a, &b}) {
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                cin >> (*x)[i][j];
            }
        }
    }
    
    vector<Matrix (*)(const Matrix&)> funcs = {Rotate90, Rotate180, Rotate270};
    int rotationCount = 0;
    int transformationCount = 0;
    int checkCount = 0;
    
    for (int i = 0; i <= 3; ++i) {
        Matrix x = (i == 3) ? b : funcs[i](b);
        rotationCount++;
        check_rotation_invariant(rotationCount);
        
        for (int mask = 0; mask <= 3; ++mask) {
            transformationCount++;
            check_transformation_invariant(transformationCount);
            
            if (mask & 1) {
                x = FlipVertical(x);
            }
            if (mask >> 1 & 1) {
                x = FlipHorizontal(x);
            }
            
            for (int j = 0; j <= 3; ++j) {
                Matrix y = (j == 3) ? x : funcs[j](x);
                checkCount++;
                check_equivalence_invariant(checkCount);
                
                if (y == a) {
                    cout << "Yes\n";
                    return 0;
                }
            }
        }
    }
    cout << "No\n";
}
```

### Explanation of Instrumentation

- **Rotation Count:** Tracks the number of rotation operations to catch excessive rotations early.
- **Transformation Count:** Monitors overall transformation operations, including flips, to prevent excessive combinations.
- **Equivalence Check Count:** Ensures that map equivalence checks do not become excessive without finding a match.

These checkers are inserted in strategic locations (outside tight loops) to monitor execution without significant performance degradation, providing useful feedback for potential optimization or debugging.

