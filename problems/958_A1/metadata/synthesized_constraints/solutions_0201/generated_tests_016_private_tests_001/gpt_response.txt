=== Invariants Response ===
## Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information provided, the most significant differences between the slow and fast inputs occur in the nested loops starting at lines 59 through 69. Specifically, the following patterns emerge:

1. The loops controlled by the variables `i`, `j`, `k`, `r1`, and `r2` (lines 59-63) are executed a large number of times for the slow input compared to the fast input. For instance, lines within these loops, such as line 63, are hit 320 times in slow input, compared to 4 in the fast input.

2. The `rotate`, `vflip`, and `hflip` functions are called repeatedly within these loops (e.g., lines 65, 66, 67, 68, 69). The `rotate` function, in particular, is called extensively (e.g., line 30 inside `rotate` is hit 126,720 times for the slow input compared to 660 for the fast input).

3. The condition checks and comparisons, especially `v == to` at line 70, are also evaluated many times more in the slow case.

These patterns indicate that the combined operations of rotating, flipping, and comparing matrices are executed many more times in the slow input, suggesting that combinations of transformations are being heavily evaluated without finding a match promptly.

## Phase 2: Derive Performance-Characterizing Invariants

1. **Excessive Combinations of Transformations:**
   - **Invariant:** "When maps require many transformations (rotations/flips) to match, the program may explore a large number of combinations, leading to slow performance."
   - **Explanation:** The combination of multiple rotations and flips increases exponentially with the number of attempts needed to match the matrices. If the initial states of the maps require extensive transformations to find a match, this can lead to significant slowdown due to the exhaustive nature of the approach.

2. **High Redundancy in Transformation Attempts:**
   - **Invariant:** "If the maps have complex symmetrical patterns or similar star distributions that require exhaustive checks, performance may degrade due to redundant transformation evaluations."
   - **Explanation:** Symmetrical or repetitive patterns may cause the same transformations to be tried multiple times with little change in outcome, leading to inefficiency. This can be particularly true when there are multiple similar regions within the maps.

3. **Dependent Operations on Matrix Size:**
   - **Invariant:** "Although n is small (â‰¤ 10), the exhaustive approach of trying up to 64 transformations (4 rotations * 2 vertical flips * 2 horizontal flips * 4 rotations again) per map comparison is significant for complex star patterns. This can result in slower execution when attempting to match maps with intricate patterns."
   - **Explanation:** The complexity of operations given constraints might seem manageable, but the nature of the input (i.e., intricate star arrangements) could trigger all possible transformation paths, leading to slowdowns for certain configurations.

These invariants focus on the complexity introduced by the algorithm's exhaustive approach to matching maps, highlighting how specific map characteristics can exacerbate inherent inefficiencies within this approach.

=== Checker Response ===
## Phase 3: Implement the Performance-Characterizing Invariants in C++

Here are the C++ implementations of the performance-characterizing invariants derived from the analysis:

```cpp
void check_excessive_transformation_invariant(int transformations) {
    if (transformations > 64) { // Since we exhaustively check at most 64 combinations
        cerr << "Warning: Performance bottleneck condition triggered - excessive transformations!" << endl;
        abort();
    }
}

void check_pattern_complexity_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - complex pattern!" << endl;
        abort();
    }
}

void check_matrix_size_invariant(int n) {
    if (n > 10) { // Given constraint, though redundant, ensures in case of future changes
        cerr << "Warning: Performance bottleneck condition triggered - large matrix size!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checker Code with the Original C++ Program

Below is the original C++ code with the integrated performance checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using vi = vector<int>;
using vvi = vector<vi>;
using pii = pair<int, int>;
constexpr auto MOD = 1000000007LL;
constexpr auto LINF = (1LL << 60);
constexpr auto INF = 2147483647LL;
constexpr auto PI = 3.1415926535897932384626433;
constexpr auto EPS = 1E-9;

void check_excessive_transformation_invariant(int transformations) {
    if (transformations > 64) { // Exhaustive check limit
        cerr << "Warning: Performance bottleneck condition triggered - excessive transformations!" << endl;
        abort();
    }
}

void check_pattern_complexity_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - complex pattern!" << endl;
        abort();
    }
}

void check_matrix_size_invariant(int n) {
    if (n > 10) { // Given constraint
        cerr << "Warning: Performance bottleneck condition triggered - large matrix size!" << endl;
        abort();
    }
}

template <typename T1, typename T2>
ostream& operator<<(ostream& out, const pair<T1, T2> p) {
    out << p.first << ' ' << p.second;
    return out;
}

template <typename T1, typename T2>
istream& operator>>(istream& in, pair<T1, T2>& p) {
    in >> p.first >> p.second;
    return in;
}

auto printVector = []<typename T>(ostream& out, vector<T> v) {
    copy(v.begin(), v.end(), ostream_iterator<T>(out, " "));
};

int n, vis[4][2][2];
vvi to, v;

vvi rotate(vvi v) {
    vvi ret(n, vi(n, 0));
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++) ret[n - 1 - j][i] = v[i][j];
    return ret;
}

vvi vflip(vvi v) {
    vvi ret(n, vi(n, 0));
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++) ret[i][n - 1 - j] = v[i][j];
    return ret;
}

vvi hflip(vvi v) {
    vvi ret(n, vi(n, 0));
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++) ret[n - 1 - i][j] = v[i][j];
    return ret;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin >> n;
    
    // Insert matrix size invariant check
    check_matrix_size_invariant(n);
    
    to = v = vvi(n, vi(n, 0));
    for (int i = 0; i < n; i++) {
        string str;
        cin >> str;
        for (int j = 0; j < n; j++) v[i][j] = str[j] == 'O';
    }
    for (int i = 0; i < n; i++) {
        string str;
        cin >> str;
        for (int j = 0; j < n; j++) to[i][j] = str[j] == 'O';
    }

    int transformation_attempts = 0;

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 2; j++) {
            for (int k = 0; k < 2; k++) {
                for (int r1 = 0; r1 < 4; r1++) {
                    for (int r2 = 0; r2 < 4; r2++) {
                        auto now = v;
                        for (int ii = 0; ii < i; ii++) v = rotate(v);
                        if (j) v = vflip(v);
                        for (int ii = 0; ii < r1; ii++) v = rotate(v);
                        if (k) v = hflip(v);
                        for (int ii = 0; ii < r2; ii++) v = rotate(v);
                        
                        // Count each transformation attempt
                        transformation_attempts++;

                        if (v == to) {
                            cout << "YES" << endl;
                            return 0;
                        }
                    }
                }
            }
        }
    }

    // Check excessive transformation attempts
    check_excessive_transformation_invariant(transformation_attempts);
    
    cout << "NO" << endl;
    return 0;
}
```

### Explanation:

- **Matrix Size Check:** Ensures `n` does not exceed the constraint, even though it's redundant with current problem constraints, it acts as a safeguard.
- **Transformation Attempts Check:** Counts attempts and ensures they don't exceed the feasible exhaustive checks (64 transformations).
- **Pattern Complexity Check:** This placeholder is for future checks that could evaluate patterns if additional data was available to define what constitutes 'complex patterns'. Here it is exemplified but not utilized due to lack of specific pattern complexity conditions.
