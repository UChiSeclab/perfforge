system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

In Berland it is the holiday of equality. In honor of the holiday the king decided to equalize the welfare of all citizens in Berland by the expense of the state treasury. 

Totally in Berland there are n citizens, the welfare of each of them is estimated as the integer in ai burles (burle is the currency in Berland).

You are the royal treasurer, which needs to count the minimum charges of the kingdom on the king's present. The king can only give money, he hasn't a power to take away them. 

Input

The first line contains the integer n (1 ≤ n ≤ 100) — the number of citizens in the kingdom.

The second line contains n integers a1, a2, ..., an, where ai (0 ≤ ai ≤ 106) — the welfare of the i-th citizen.

Output

In the only line print the integer S — the minimum number of burles which are had to spend.

Examples

Input

5
0 1 2 3 4


Output

10

Input

5
1 1 0 1 1


Output

1

Input

3
1 3 1


Output

4

Input

1
12


Output

0

Note

In the first example if we add to the first citizen 4 burles, to the second 3, to the third 2 and to the fourth 1, then the welfare of all citizens will equal 4.

In the second example it is enough to give one burle to the third citizen. 

In the third example it is necessary to give two burles to the first and the third citizens to make the welfare of citizens equal 3.

In the fourth example it is possible to give nothing to everyone because all citizens have 12 burles.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int cnt = 0;
  int t, c;
  cin >> t;
  vector<int> r;
  for (int i = 0; i < t; i++) {
    cin >> c;
    r.push_back(c);
  }
  for (int j = 0; j < t; j++) {
    cnt += abs((*max_element(r.begin(), r.end()) - r[j]));
  }
  cout << cnt << endl;
  ;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 1000000


(G.2) Fast Input

1
0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int cnt = 0; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int t, c; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> t; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> r; /* line 7 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < t; i++) { /* line 8 slow_hit_count: 101, fast_hit_count: 2 */
    cin >> c; /* line 9 slow_hit_count: 100, fast_hit_count: 1 */
    r.push_back(c); /* line 10 slow_hit_count: 100, fast_hit_count: 1 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  for (int j = 0; j < t; j++) { /* line 12 slow_hit_count: 101, fast_hit_count: 2 */
    cnt += abs((*max_element(r.begin(), r.end()) - r[j])); /* line 13 slow_hit_count: 100, fast_hit_count: 1 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  cout << cnt << endl; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the provided C code, let's break down the tasks and derive the performance-characterizing invariants from the given data.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Line-Level Hit Counts**:
   - The code line `cnt += abs((*max_element(r.begin(), r.end()) - r[j]));` within the second loop (line 13) shows significant differences between the slow and fast input runs. It is executed 100 times for the slow input and only once for the fast input.
   - The line `for (int j = 0; j < t; j++) {` (line 12) also shows a high execution count (101 for the slow input), reflecting the loop iterations.

2. **Pinpointing Lines with More Hits**:
   - The function `max_element` called in line 13 is a potential bottleneck. It is being called `t` times within a loop, each time iterating over the entire `r` vector to find the maximum value, leading to a time complexity of `O(n^2)`.

3. **Inferring Interactions**:
   - The repeated calculation of `max_element` in a loop over the `r` vector indicates inefficient handling, especially as `t` approaches 100 (the maximum constraint).

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: Inefficient Maximum Calculation**:
   - **Natural Language Description**: "If the code needs to find the maximum element of a list repeatedly within a loop, and the list size is close to the upper limit allowed by constraints (e.g., n is large), the execution may become slower due to repeated full-list traversal."
   
   This invariant identifies the inefficiency of multiple passes over the list when calculating the maximum value.

2. **Invariant 2: Nested Loop Complexity**:
   - **Natural Language Description**: "When there is a nested loop structure, and the inner loop performs operations that scale with the list size, the overall complexity can become quadratic, which is a performance concern as the list size nears its maximum allowed value."

   This invariant is derived from the insight that the inner loop operation involves traversing the list through `max_element`.

3. **Invariant 3: High Input Size Impact**:
   - **Natural Language Description**: "The performance of the algorithm degrades when input is large, causing repeated operations that should otherwise be optimized outside of loops. If the input size approaches 100, and each operation's cost scales with n, performance issues are likely."

   This invariant addresses the general impact of hitting the upper constraint limit without optimizing operations.

### Conclusion

The provided code's inefficiencies mainly stem from recalculating the maximum value of the array repeatedly in a loop. The solution should be refactored to calculate this value once and use it in subsequent calculations. By understanding and implementing these performance-characterizing invariants, future inputs that might cause similar slowdowns can be identified and optimized proactively.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
In Berland it is the holiday of equality. In honor of the holiday the king decided to equalize the welfare of all citizens in Berland by the expense of the state treasury. 

Totally in Berland there are n citizens, the welfare of each of them is estimated as the integer in ai burles (burle is the currency in Berland).

You are the royal treasurer, which needs to count the minimum charges of the kingdom on the king's present. The king can only give money, he hasn't a power to take away them. 

Input

The first line contains the integer n (1 ≤ n ≤ 100) — the number of citizens in the kingdom.

The second line contains n integers a1, a2, ..., an, where ai (0 ≤ ai ≤ 106) — the welfare of the i-th citizen.

Output

In the only line print the integer S — the minimum number of burles which are had to spend.

Examples

Input

5
0 1 2 3 4


Output

10

Input

5
1 1 0 1 1


Output

1

Input

3
1 3 1


Output

4

Input

1
12


Output

0

Note

In the first example if we add to the first citizen 4 burles, to the second 3, to the third 2 and to the fourth 1, then the welfare of all citizens will equal 4.

In the second example it is enough to give one burle to the third citizen. 

In the third example it is necessary to give two burles to the first and the third citizens to make the welfare of citizens equal 3.

In the fourth example it is possible to give nothing to everyone because all citizens have 12 burles.

Solution (C++ code):
{solution}


assistant: Phase 3: Implement Natural Language Invariants in C++

For each of the natural language invariants derived in Phase 2, we can create a corresponding C++ checker function. These functions will emit warnings and abort the execution if the conditions indicating performance bottlenecks are met.

### Invariant Checkers in C++

1. **Inefficient Maximum Calculation**:
   ```cpp
   // Check if the max_element is repeatedly calculated within a loop
   void check_max_element_invariant(int loopCount, int arraySize) {
       // Since n can be at most 100, we check if the loop repeats near its maximum and the array size is large.
       if (loopCount > 50 && arraySize > 50) {
           cerr << "Warning: max_element invariant triggered - repeated maximum calculation in loop" << endl;
           abort();
       }
   }
   ```

2. **Nested Loop Complexity**:
   ```cpp
   // Check for nested loop complexity with large input size
   void check_nested_loop_invariant(int outerLoopSize, int innerLoopSize) {
       if (outerLoopSize > 50 && innerLoopSize > 50) {
           cerr << "Warning: nested loop invariant triggered - potential quadratic complexity" << endl;
           abort();
       }
   }
   ```

3. **High Input Size Impact**:
   ```cpp
   // Check for high input size impact on performance
   void check_input_size_invariant(int inputSize, int threshold) {
       if (inputSize > threshold) {
           cerr << "Warning: input size invariant triggered - large input impacting performance" << endl;
           abort();
       }
   }
   ```

These checks are designed to capture the conditions that lead to performance degradation based on the analysis.

Phase 4: Integrate Checkers into the Original C++ Code

Next, we'll integrate these checkers into the provided C++ program, making sure to place them at strategic locations to detect performance bottlenecks without adding undue overhead.

### Instrumented C++ Code

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for inefficient calculation of max_element
void check_max_element_invariant(int loopCount, int arraySize) {
    if (loopCount > 50 && arraySize > 50) {
        cerr << "Warning: max_element invariant triggered - repeated maximum calculation in loop" << endl;
        abort();
    }
}

// Checker for nested loop complexity
void check_nested_loop_invariant(int outerLoopSize, int innerLoopSize) {
    if (outerLoopSize > 50 && innerLoopSize > 50) {
        cerr << "Warning: nested loop invariant triggered - potential quadratic complexity" << endl;
        abort();
    }
}

// Checker for high input size impacting performance
void check_input_size_invariant(int inputSize, int threshold) {
    if (inputSize > threshold) {
        cerr << "Warning: input size invariant triggered - large input impacting performance" << endl;
        abort();
    }
}

int main() {
    int cnt = 0;
    int t, c;
    cin >> t;

    // Check input size invariant
    check_input_size_invariant(t, 75); // Adjust threshold as appropriate within constraints

    vector<int> r;
    for (int i = 0; i < t; i++) {
        cin >> c;
        r.push_back(c);
    }

    // Check nested loop complexity
    check_nested_loop_invariant(t, r.size()); // Checks for potential quadratic behavior

    for (int j = 0; j < t; j++) {
        // Check max_element calculation inefficiency
        check_max_element_invariant(t, r.size());
        
        cnt += abs((*max_element(r.begin(), r.end()) - r[j]));
    }

    cout << cnt << endl;
}
```

### Explanation

- **`check_input_size_invariant`**: This function checks if the input size is too large, potentially causing performance issues. It's called after reading the input size `t`.
  
- **`check_nested_loop_invariant`**: Called before the second loop, it checks for potentially inefficient nested looping.

- **`check_max_element_invariant`**: Placed before the max element calculation within the loop, it checks for repeated inefficient calculations.

These checks should help detect performance bottlenecks in realistic scenarios within the problem constraints.

