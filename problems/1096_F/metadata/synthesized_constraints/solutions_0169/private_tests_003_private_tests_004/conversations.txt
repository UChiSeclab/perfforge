system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A permutation of size n is an array of size n such that each integer from 1 to n occurs exactly once in this array. An inversion in a permutation p is a pair of indices (i, j) such that i > j and a_i < a_j. For example, a permutation [4, 1, 3, 2] contains 4 inversions: (2, 1), (3, 1), (4, 1), (4, 3).

You are given a permutation p of size n. However, the numbers on some positions are replaced by -1. Let the valid permutation be such a replacement of -1 in this sequence back to numbers from 1 to n in such a way that the resulting sequence is a permutation of size n.

The given sequence was turned into a valid permutation randomly with the equal probability of getting each valid permutation.

Calculate the expected total number of inversions in the resulting valid permutation.

It can be shown that it is in the form of P/Q where P and Q are non-negative integers and Q ≠ 0. Report the value of P ⋅ Q^{-1} \pmod {998244353}.

Input

The first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the sequence.

The second line contains n integers p_1, p_2, ..., p_n (-1 ≤ p_i ≤ n, p_i ≠ 0) — the initial sequence.

It is guaranteed that all elements not equal to -1 are pairwise distinct.

Output

Print a single integer — the expected total number of inversions in the resulting valid permutation.

It can be shown that it is in the form of P/Q where P and Q are non-negative integers and Q ≠ 0. Report the value of P ⋅ Q^{-1} \pmod {998244353}.

Examples

Input


3
3 -1 -1


Output


499122179


Input


2
1 2


Output


0


Input


2
-1 -1


Output


499122177

Note

In the first example two resulting valid permutations are possible:

  * [3, 1, 2] — 2 inversions; 
  * [3, 2, 1] — 3 inversions. 



The expected value is (2 ⋅ 1 + 3 ⋅ 1)/(2) = 2.5.

In the second example no -1 are present, thus the only valid permutation is possible — the given one. It has 0 inversions.

In the third example there are two resulting valid permutations — one with 0 inversions and one with 1 inversion.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a[200005];
const int mod = 998244353;
long long p(long long x, long long y) {
  long long ret = 1;
  while (y) {
    if (y % 2) {
      ret = (ret * x) % mod;
    }
    x = (x * x) % mod;
    y >>= 1;
  }
  return ret;
}
int c[200005], n;
int get(int x) {
  int ret = 0;
  while (x) {
    ret += c[x];
    x -= x & (-x);
  }
  return ret;
}
void add(int x) {
  while (x <= n) {
    c[x]++;
    x += x & (-x);
  }
}
set<int> s;
vector<int> b;
int main() {
  cin >> n;
  for (int i = 1; i <= n; i++) s.insert(i);
  long long ans = 0;
  long long unknown = 0;
  for (int i = 0; i < n; i++) {
    cin >> a[i];
    if (a[i] == -1)
      unknown++;
    else
      s.erase(a[i]);
  }
  for (auto it = s.begin(); it != s.end(); it++) b.push_back(*it);
  long long tmp = 0;
  tmp += ((unknown - 1) * (unknown)) % mod;
  tmp *= p(4, mod - 2);
  tmp %= mod;
  ans = tmp;
  for (int i = n - 1; i >= 0; i--) {
    if (a[i] == -1) continue;
    ans = (ans + get(a[i])) % mod;
    add(a[i]);
  }
  long long lft = 0;
  for (int i = 0; i < n; i++) {
    if (a[i] == -1)
      lft++;
    else {
      long long gt =
          (long long)(lower_bound(b.begin(), b.end(), a[i]) - b.begin());
      gt = unknown - gt;
      long long tmp = (gt * lft) % mod;
      tmp = (tmp * p(unknown, mod - 2)) % mod;
      ans = (ans + tmp) % mod;
    }
  }
  lft = 0;
  for (int i = n - 1; i >= 0; i--) {
    if (a[i] == -1)
      lft++;
    else {
      long long gt =
          (long long)(lower_bound(b.begin(), b.end(), a[i]) - b.begin());
      long long tmp = (gt * lft) % mod;
      tmp = (tmp * p(unknown, mod - 2)) % mod;
      ans = (ans + tmp) % mod;
    }
  }
  cout << ans << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

69
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1


(G.2) Fast Input

1
-1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a[200005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 998244353; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long p(long long x, long long y) { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  long long ret = 1; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  while (y) { /* line 7 slow_hit_count: 31, fast_hit_count: 31 */
    if (y % 2) { /* line 8 slow_hit_count: 30, fast_hit_count: 30 */
      ret = (ret * x) % mod; /* line 9 slow_hit_count: 28, fast_hit_count: 28 */
    } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    x = (x * x) % mod; /* line 11 slow_hit_count: 30, fast_hit_count: 30 */
    y >>= 1; /* line 12 slow_hit_count: 30, fast_hit_count: 30 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int c[200005], n; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
int get(int x) { /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  int ret = 0; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  while (x) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    ret += c[x]; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    x -= x & (-x); /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
void add(int x) { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  while (x <= n) { /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    c[x]++; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    x += x & (-x); /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
set<int> s; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> b; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) s.insert(i); /* line 35 slow_hit_count: 70, fast_hit_count: 2 */
  long long ans = 0; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  long long unknown = 0; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 38 slow_hit_count: 70, fast_hit_count: 2 */
    cin >> a[i]; /* line 39 slow_hit_count: 69, fast_hit_count: 1 */
    if (a[i] == -1) /* line 40 slow_hit_count: 69, fast_hit_count: 1 */
      unknown++; /* line 41 slow_hit_count: 69, fast_hit_count: 1 */
    else /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      s.erase(a[i]); /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto it = s.begin(); it != s.end(); it++) b.push_back(*it); /* line 45 slow_hit_count: 70, fast_hit_count: 2 */
  long long tmp = 0; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  tmp += ((unknown - 1) * (unknown)) % mod; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  tmp *= p(4, mod - 2); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  tmp %= mod; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  ans = tmp; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = n - 1; i >= 0; i--) { /* line 51 slow_hit_count: 70, fast_hit_count: 2 */
    if (a[i] == -1) continue; /* line 52 slow_hit_count: 69, fast_hit_count: 1 */
    ans = (ans + get(a[i])) % mod; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    add(a[i]); /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  long long lft = 0; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 57 slow_hit_count: 70, fast_hit_count: 2 */
    if (a[i] == -1) /* line 58 slow_hit_count: 69, fast_hit_count: 1 */
      lft++; /* line 59 slow_hit_count: 69, fast_hit_count: 1 */
    else { /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      long long gt = /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
          (long long)(lower_bound(b.begin(), b.end(), a[i]) - b.begin()); /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
      gt = unknown - gt; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
      long long tmp = (gt * lft) % mod; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
      tmp = (tmp * p(unknown, mod - 2)) % mod; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
      ans = (ans + tmp) % mod; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  lft = 0; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = n - 1; i >= 0; i--) { /* line 70 slow_hit_count: 70, fast_hit_count: 2 */
    if (a[i] == -1) /* line 71 slow_hit_count: 69, fast_hit_count: 1 */
      lft++; /* line 72 slow_hit_count: 69, fast_hit_count: 1 */
    else { /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
      long long gt = /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
          (long long)(lower_bound(b.begin(), b.end(), a[i]) - b.begin()); /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
      long long tmp = (gt * lft) % mod; /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
      tmp = (tmp * p(unknown, mod - 2)) % mod; /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
      ans = (ans + tmp) % mod; /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 82 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To address the problem of performance bottlenecks in the provided C program, let's follow the tasks outlined in the problem statement:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - Examining the hit counts, we notice that the majority of the lines in the code are hit approximately the same number of times in both the slow and fast runs. However, the loops in lines 38, 51, 57, and 70 show significantly higher hit counts during the slow run compared to the fast run.

2. **Pinpoint Lines or Functions with Significant Hits:**
   - **Line 38:** This loop initializes `a[i]` and counts the number of `-1` values in `unknown`. The count is high due to the large number of `-1` entries in the slow input.
   - **Line 57 and 70:** These loops are related to computing inversions and are hit often in the slow input because they iterate over the entire array.

3. **Infer Interactions with Data Structures and Loops:**
   - The loops are iterating over the elements of the array and interact with the `set` and `vector` data structures to manage unknown elements. The loops that count or utilize `-1` values show potential inefficiencies when the array has many `-1` values, leading to redundant computations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Generate Natural Language Descriptions:**

   - **Invariant 1: High Count of Unknown Elements**
     - **Description:** "When the permutation has a large number of `-1` placeholders (unknown elements), the program must perform additional work to account for possible permutations of these unknowns, leading to potential slowdowns."

   - **Invariant 2: Large-Scale Iterations Over Arrays**
     - **Description:** "If the number of `-1` entries is large, causing repeated calculations in loops where n is iterated over multiple times, the program may experience significant slowdowns."

   - **Invariant 3: Extensive Use of Data Structures**
     - **Description:** "If the data structures like `set` and `vector` are heavily used during the processing of many `-1` elements, especially in loops that iterate in reverse, the performance can degrade due to increased complexity in managing these unknowns."

2. **Abstract the Conditions:**
   - These conditions focus on the relationships between the number of `-1` placeholders and the operations performed by loops and data structures. The conditions are broad enough to encompass potential future scenarios with different but similarly structured inputs.

3. **Correlate Strongly to Input Patterns:**
   - The conditions directly relate to the presence of unknown elements (`-1`), which is a defining pattern of the slow input.
   - The input pattern of having nearly all `-1` elements triggers these inefficiencies, making the performance characterization realistic.

In summary, the performance issues arise from the handling of permutations with many `-1` placeholders, which lead to higher complexity in loops and data structure operations. The natural language invariants capture these performance triggers, emphasizing the potential inefficiencies when dealing with many unknown elements.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A permutation of size n is an array of size n such that each integer from 1 to n occurs exactly once in this array. An inversion in a permutation p is a pair of indices (i, j) such that i > j and a_i < a_j. For example, a permutation [4, 1, 3, 2] contains 4 inversions: (2, 1), (3, 1), (4, 1), (4, 3).

You are given a permutation p of size n. However, the numbers on some positions are replaced by -1. Let the valid permutation be such a replacement of -1 in this sequence back to numbers from 1 to n in such a way that the resulting sequence is a permutation of size n.

The given sequence was turned into a valid permutation randomly with the equal probability of getting each valid permutation.

Calculate the expected total number of inversions in the resulting valid permutation.

It can be shown that it is in the form of P/Q where P and Q are non-negative integers and Q ≠ 0. Report the value of P ⋅ Q^{-1} \pmod {998244353}.

Input

The first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of the sequence.

The second line contains n integers p_1, p_2, ..., p_n (-1 ≤ p_i ≤ n, p_i ≠ 0) — the initial sequence.

It is guaranteed that all elements not equal to -1 are pairwise distinct.

Output

Print a single integer — the expected total number of inversions in the resulting valid permutation.

It can be shown that it is in the form of P/Q where P and Q are non-negative integers and Q ≠ 0. Report the value of P ⋅ Q^{-1} \pmod {998244353}.

Examples

Input


3
3 -1 -1


Output


499122179


Input


2
1 2


Output


0


Input


2
-1 -1


Output


499122177

Note

In the first example two resulting valid permutations are possible:

  * [3, 1, 2] — 2 inversions; 
  * [3, 2, 1] — 3 inversions. 



The expected value is (2 ⋅ 1 + 3 ⋅ 1)/(2) = 2.5.

In the second example no -1 are present, thus the only valid permutation is possible — the given one. It has 0 inversions.

In the third example there are two resulting valid permutations — one with 0 inversions and one with 1 inversion.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants with Checker Code in C++

Based on the natural language invariants derived earlier, let's create checker code that will be inserted into the C++ program.

1. **Invariant 1: High Count of Unknown Elements**

```cpp
void check_high_unknowns(int unknown, int n) {
    if (unknown > n / 2) {  // Assume a threshold: if more than half of the elements are unknown, it could slow down
        cerr << "Warning: Performance bottleneck due to high count of unknown elements!" << endl;
        abort();
    }
}
```

2. **Invariant 2: Large-Scale Iterations Over Arrays**

```cpp
void check_large_iterations(int unknown, int n) {
    if (unknown > n / 2) {  // Again, using a similar threshold
        cerr << "Warning: Performance bottleneck due to large-scale iterations over arrays!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Extensive Use of Data Structures**

```cpp
void check_data_structure_usage(int size, int n) {
    if (size > n / 2) {  // Using a threshold for when data structures are heavily used
        cerr << "Warning: Performance bottleneck due to extensive data structure usage!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now, integrate these checkers into the existing C++ program at appropriate points.

```cpp
#include <bits/stdc++.h>
using namespace std;

int a[200005];
const int mod = 998244353;
long long p(long long x, long long y) {
    long long ret = 1;
    while (y) {
        if (y % 2) {
            ret = (ret * x) % mod;
        }
        x = (x * x) % mod;
        y >>= 1;
    }
    return ret;
}
int c[200005], n;

int get(int x) {
    int ret = 0;
    while (x) {
        ret += c[x];
        x -= x & (-x);
    }
    return ret;
}

void add(int x) {
    while (x <= n) {
        c[x]++;
        x += x & (-x);
    }
}

set<int> s;
vector<int> b;

void check_high_unknowns(int unknown, int n) {
    if (unknown > n / 2) {
        cerr << "Warning: Performance bottleneck due to high count of unknown elements!" << endl;
        abort();
    }
}

void check_large_iterations(int unknown, int n) {
    if (unknown > n / 2) {
        cerr << "Warning: Performance bottleneck due to large-scale iterations over arrays!" << endl;
        abort();
    }
}

void check_data_structure_usage(int size, int n) {
    if (size > n / 2) {
        cerr << "Warning: Performance bottleneck due to extensive data structure usage!" << endl;
        abort();
    }
}

int main() {
    cin >> n;
    for (int i = 1; i <= n; i++) s.insert(i);

    long long ans = 0;
    long long unknown = 0;

    for (int i = 0; i < n; i++) {
        cin >> a[i];
        if (a[i] == -1)
            unknown++;
        else
            s.erase(a[i]);
    }

    // Check for high unknowns
    check_high_unknowns(unknown, n);

    for (auto it = s.begin(); it != s.end(); it++) b.push_back(*it);

    // Check data structure usage
    check_data_structure_usage(b.size(), n);

    long long tmp = 0;
    tmp += ((unknown - 1) * (unknown)) % mod;
    tmp *= p(4, mod - 2);
    tmp %= mod;
    ans = tmp;

    for (int i = n - 1; i >= 0; i--) {
        if (a[i] == -1) continue;
        ans = (ans + get(a[i])) % mod;
        add(a[i]);
    }

    long long lft = 0;
    for (int i = 0; i < n; i++) {
        if (a[i] == -1)
            lft++;
        else {
            long long gt = (long long)(lower_bound(b.begin(), b.end(), a[i]) - b.begin());
            gt = unknown - gt;
            long long tmp = (gt * lft) % mod;
            tmp = (tmp * p(unknown, mod - 2)) % mod;
            ans = (ans + tmp) % mod;
        }
    }

    lft = 0;
    for (int i = n - 1; i >= 0; i--) {
        if (a[i] == -1)
            lft++;
        else {
            long long gt = (long long)(lower_bound(b.begin(), b.end(), a[i]) - b.begin());
            long long tmp = (gt * lft) % mod;
            tmp = (tmp * p(unknown, mod - 2)) % mod;
            ans = (ans + tmp) % mod;
        }
    }

    cout << ans << endl;
}
```

### Explanation

- **Checker Functions:** Three checker functions are added to detect performance bottlenecks based on the number of unknown elements (`-1`) and data structure usage.
- **Integration Points:** The checkers are invoked after reading inputs (for high unknowns) and constructing data structures (for data structure usage), thus avoiding overhead in tight loops.
- **Thresholds:** The conditions use thresholds relative to `n` to maintain generality across different inputs and potential future scenarios.

This integration provides early detection of scenarios that might lead to performance degradation, helping in debugging and optimizing the code effectively.

