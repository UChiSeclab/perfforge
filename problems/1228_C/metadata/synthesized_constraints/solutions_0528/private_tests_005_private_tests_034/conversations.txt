system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's introduce some definitions that will be needed later.

Let prime(x) be the set of prime divisors of x. For example, prime(140) = \{ 2, 5, 7 \}, prime(169) = \{ 13 \}.

Let g(x, p) be the maximum possible integer p^k where k is an integer such that x is divisible by p^k. For example:

  * g(45, 3) = 9 (45 is divisible by 3^2=9 but not divisible by 3^3=27), 
  * g(63, 7) = 7 (63 is divisible by 7^1=7 but not divisible by 7^2=49). 



Let f(x, y) be the product of g(y, p) for all p in prime(x). For example:

  * f(30, 70) = g(70, 2) ⋅ g(70, 3) ⋅ g(70, 5) = 2^1 ⋅ 3^0 ⋅ 5^1 = 10, 
  * f(525, 63) = g(63, 3) ⋅ g(63, 5) ⋅ g(63, 7) = 3^2 ⋅ 5^0 ⋅ 7^1 = 63. 



You have integers x and n. Calculate f(x, 1) ⋅ f(x, 2) ⋅ … ⋅ f(x, n) mod{(10^{9} + 7)}.

Input

The only line contains integers x and n (2 ≤ x ≤ 10^{9}, 1 ≤ n ≤ 10^{18}) — the numbers used in formula.

Output

Print the answer.

Examples

Input


10 2


Output


2


Input


20190929 1605


Output


363165664


Input


947 987654321987654321


Output


593574252

Note

In the first example, f(10, 1) = g(1, 2) ⋅ g(1, 5) = 1, f(10, 2) = g(2, 2) ⋅ g(2, 5) = 2.

In the second example, actual value of formula is approximately 1.597 ⋅ 10^{171}. Make sure you print the answer modulo (10^{9} + 7).

In the third example, be careful about overflow issue.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long m = 1000000007;
long long binpow(long long a, long long n) {
  if (n == 1) return a;
  if (n == 0) return 1;
  long long b = binpow(a, n / 2);
  return (((b * b) % m) * (binpow(a, n % 2))) % m;
}
signed main() {
  long long n, x;
  cin >> x >> n;
  vector<long long> pr;
  long long x1 = x;
  for (long long i = 2; i <= (long long)sqrt(x); ++i) {
    if (x1 % i != 0) continue;
    pr.push_back(i);
    while (x1 % i == 0) {
      x1 /= i;
    }
  }
  long long ans = 1;
  if (x1 != 1) pr.push_back(x1);
  for (auto p : pr) {
    long long n1 = n;
    while (n1 >= p) {
      n1 /= p;
      ans = (ans * (binpow(p, n1))) % m;
    }
  }
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000000 1000000000000000000


(G.2) Fast Input

139 1000000000000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long m = 1000000007; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long binpow(long long a, long long n) { /* line 4 slow_hit_count: 4962, fast_hit_count: 444 */
  if (n == 1) return a; /* line 5 slow_hit_count: 4962, fast_hit_count: 444 */
  if (n == 0) return 1; /* line 6 slow_hit_count: 3810, fast_hit_count: 336 */
  long long b = binpow(a, n / 2); /* line 7 slow_hit_count: 2439, fast_hit_count: 218 */
  return (((b * b) % m) * (binpow(a, n % 2))) % m; /* line 8 slow_hit_count: 2439, fast_hit_count: 218 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, x; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> x >> n; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> pr; /* line 13 slow_hit_count: 2, fast_hit_count: 2 */
  long long x1 = x; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 2; i <= (long long)sqrt(x); ++i) { /* line 15 slow_hit_count: 31622, fast_hit_count: 11 */
    if (x1 % i != 0) continue; /* line 16 slow_hit_count: 31621, fast_hit_count: 10 */
    pr.push_back(i); /* line 17 slow_hit_count: 2, fast_hit_count: 0 */
    while (x1 % i == 0) { /* line 18 slow_hit_count: 20, fast_hit_count: 0 */
      x1 /= i; /* line 19 slow_hit_count: 18, fast_hit_count: 0 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 1; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  if (x1 != 1) pr.push_back(x1); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto p : pr) { /* line 24 slow_hit_count: 3, fast_hit_count: 2 */
    long long n1 = n; /* line 25 slow_hit_count: 2, fast_hit_count: 1 */
    while (n1 >= p) { /* line 26 slow_hit_count: 86, fast_hit_count: 9 */
      n1 /= p; /* line 27 slow_hit_count: 84, fast_hit_count: 8 */
      ans = (ans * (binpow(p, n1))) % m; /* line 28 slow_hit_count: 84, fast_hit_count: 8 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 32 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the provided C program, we will perform a two-phase analysis based on the hit count information for both slow and fast input cases. We'll then derive performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

**Hit Count Analysis:**

1. **Line 15 (`for` loop over square root of `x`):** 
   - Slow Input Hit Count: 31,622
   - Fast Input Hit Count: 11
   - The loop runs significantly more times for the slow input, indicating the square root of `x` is much higher in the slow case.

2. **Line 16 (modulus check within the loop):**
   - Similarly high hit count, reflecting the loop's extensive execution.

3. **Line 24 (iteration over prime divisors):**
   - Slow Input Hit Count: 3
   - Fast Input Hit Count: 2
   - This indicates that the number of prime factors of `x` is small, but likely significant.

4. **Lines 26-28 (while loop and calculations involving `n`):**
   - High hit counts during the slow run (86 iterations) compared to the fast run (9 iterations).
   - Indicates repeated calculations based on the value of `n`.

**Inference:**

- **Prime Factorization:** Calculating prime factors of `x` involves iterating up to `sqrt(x)`, which is computationally expensive when `x` is very large.
- **Power Computation:** The while loop in lines 26-28 repeatedly divides `n` by each prime factor `p` and involves repeated power calculations via `binpow`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Prime Factorization Complexity:**
   - **Natural Language Description:** "The program experiences a slowdown when the value of `x` is large, necessitating extensive prime factorization up to its square root."
   - **Threshold Suggestion:** The complexity of this operation increases with the size of `x`, particularly when `x` has a large square root, such as close to the upper constraint of `10^9`.

2. **Repeated Power Calculations:**
   - **Natural Language Description:** "When `n` is large, the repetition in power calculations for each prime factor of `x` can slow down the program significantly."
   - **Threshold Suggestion:** This condition is especially impactful if `n` is large (close to `10^18`), in conjunction with multiple prime factors.

3. **Compound Effect of Both Factors:**
   - **Natural Language Description:** "A combination of high `x` values (requiring extensive factorization) and very large `n` values (causing numerous power computations) results in significant performance degradation."
   - **Threshold Suggestion:** This situation arises prominently when both `x` is near `10^9` and `n` is significantly large.

These invariants focus on the size and complexity of operations involved, particularly under conditions constrained by the problem's input limits.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's introduce some definitions that will be needed later.

Let prime(x) be the set of prime divisors of x. For example, prime(140) = \{ 2, 5, 7 \}, prime(169) = \{ 13 \}.

Let g(x, p) be the maximum possible integer p^k where k is an integer such that x is divisible by p^k. For example:

  * g(45, 3) = 9 (45 is divisible by 3^2=9 but not divisible by 3^3=27), 
  * g(63, 7) = 7 (63 is divisible by 7^1=7 but not divisible by 7^2=49). 



Let f(x, y) be the product of g(y, p) for all p in prime(x). For example:

  * f(30, 70) = g(70, 2) ⋅ g(70, 3) ⋅ g(70, 5) = 2^1 ⋅ 3^0 ⋅ 5^1 = 10, 
  * f(525, 63) = g(63, 3) ⋅ g(63, 5) ⋅ g(63, 7) = 3^2 ⋅ 5^0 ⋅ 7^1 = 63. 



You have integers x and n. Calculate f(x, 1) ⋅ f(x, 2) ⋅ … ⋅ f(x, n) mod{(10^{9} + 7)}.

Input

The only line contains integers x and n (2 ≤ x ≤ 10^{9}, 1 ≤ n ≤ 10^{18}) — the numbers used in formula.

Output

Print the answer.

Examples

Input


10 2


Output


2


Input


20190929 1605


Output


363165664


Input


947 987654321987654321


Output


593574252

Note

In the first example, f(10, 1) = g(1, 2) ⋅ g(1, 5) = 1, f(10, 2) = g(2, 2) ⋅ g(2, 5) = 2.

In the second example, actual value of formula is approximately 1.597 ⋅ 10^{171}. Make sure you print the answer modulo (10^{9} + 7).

In the third example, be careful about overflow issue.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Invariants as Runtime Checks in C++

Based on the performance-characterizing invariants derived earlier, here are the C++ code snippets to check each condition:

1. **Prime Factorization Complexity:**

    This check validates if `x` is large, as the loop iterating through its prime factors can be expensive.

    ```cpp
    void check_prime_factorization_invariant(long long x) {
        if (x > 1e9 / 10) {  // Arbitrary threshold indicating large `x`
            cerr << "Warning: Performance bottleneck condition triggered - large prime factorization!" << endl;
            abort();
        }
    }
    ```

2. **Repeated Power Calculations:**

    This check asserts that `n` is very large, leading to extensive calculations.

    ```cpp
    void check_power_calculation_invariant(long long n) {
        if (n > 1e17) {  // Threshold indicating large `n`
            cerr << "Warning: Performance bottleneck condition triggered - large power calculations!" << endl;
            abort();
        }
    }
    ```

3. **Compound Effect of Both Factors:**

    Combined check for both conditions -- large `x` and `n`.

    ```cpp
    void check_compound_invariant(long long x, long long n) {
        if (x > 1e9 / 10 && n > 1e17) {
            cerr << "Warning: Performance bottleneck condition triggered - large `x` and `n` combination!" << endl;
            abort();
        }
    }
    ```

### Phase 4: Integrate the Checks into the Existing C++ Program

Here is the instrumented C++ code with inserted checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

long long m = 1000000007;

long long binpow(long long a, long long n) {
    if (n == 1) return a;
    if (n == 0) return 1;
    long long b = binpow(a, n / 2);
    return (((b * b) % m) * (binpow(a, n % 2))) % m;
}

// Prime factorization complexity check
void check_prime_factorization_invariant(long long x) {
    if (x > 1e9 / 10) {  // Arbitrary threshold indicating large `x`
        cerr << "Warning: Performance bottleneck condition triggered - large prime factorization!" << endl;
        abort();
    }
}

// Repeated power calculations check
void check_power_calculation_invariant(long long n) {
    if (n > 1e17) {  // Threshold indicating large `n`
        cerr << "Warning: Performance bottleneck condition triggered - large power calculations!" << endl;
        abort();
    }
}

// Compound check for both large `x` and `n`
void check_compound_invariant(long long x, long long n) {
    if (x > 1e9 / 10 && n > 1e17) {
        cerr << "Warning: Performance bottleneck condition triggered - large `x` and `n` combination!" << endl;
        abort();
    }
}

signed main() {
    long long n, x;
    cin >> x >> n;

    // Perform checks after reading inputs
    check_prime_factorization_invariant(x);
    check_power_calculation_invariant(n);
    check_compound_invariant(x, n);

    vector<long long> pr;
    long long x1 = x;
    for (long long i = 2; i <= (long long)sqrt(x); ++i) {
        if (x1 % i != 0) continue;
        pr.push_back(i);
        while (x1 % i == 0) {
            x1 /= i;
        }
    }
    long long ans = 1;
    if (x1 != 1) pr.push_back(x1);
    for (auto p : pr) {
        long long n1 = n;
        while (n1 >= p) {
            n1 /= p;
            ans = (ans * (binpow(p, n1))) % m;
        }
    }
    cout << ans;
}
```

### Explanation:

- **Check Placement:** The checks are strategically placed right after reading the inputs `x` and `n`. This avoids adding overhead inside tight loops or critical sections of the code.
- **Thresholds:** The thresholds used in checks are arbitrarily chosen but aligned with the constraints. They represent conditions where performance is expected to degrade significantly due to either the size of `x`, `n`, or their combination. 

This instrumented code will now be able to detect potential performance bottlenecks based on the input size and complexity, providing early warnings if such conditions are met.

