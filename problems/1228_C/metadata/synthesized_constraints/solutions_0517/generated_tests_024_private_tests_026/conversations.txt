system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's introduce some definitions that will be needed later.

Let prime(x) be the set of prime divisors of x. For example, prime(140) = \{ 2, 5, 7 \}, prime(169) = \{ 13 \}.

Let g(x, p) be the maximum possible integer p^k where k is an integer such that x is divisible by p^k. For example:

  * g(45, 3) = 9 (45 is divisible by 3^2=9 but not divisible by 3^3=27), 
  * g(63, 7) = 7 (63 is divisible by 7^1=7 but not divisible by 7^2=49). 



Let f(x, y) be the product of g(y, p) for all p in prime(x). For example:

  * f(30, 70) = g(70, 2) ⋅ g(70, 3) ⋅ g(70, 5) = 2^1 ⋅ 3^0 ⋅ 5^1 = 10, 
  * f(525, 63) = g(63, 3) ⋅ g(63, 5) ⋅ g(63, 7) = 3^2 ⋅ 5^0 ⋅ 7^1 = 63. 



You have integers x and n. Calculate f(x, 1) ⋅ f(x, 2) ⋅ … ⋅ f(x, n) mod{(10^{9} + 7)}.

Input

The only line contains integers x and n (2 ≤ x ≤ 10^{9}, 1 ≤ n ≤ 10^{18}) — the numbers used in formula.

Output

Print the answer.

Examples

Input


10 2


Output


2


Input


20190929 1605


Output


363165664


Input


947 987654321987654321


Output


593574252

Note

In the first example, f(10, 1) = g(1, 2) ⋅ g(1, 5) = 1, f(10, 2) = g(2, 2) ⋅ g(2, 5) = 2.

In the second example, actual value of formula is approximately 1.597 ⋅ 10^{171}. Make sure you print the answer modulo (10^{9} + 7).

In the third example, be careful about overflow issue.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MX = 1e5 + 50;
const long long MOD = 1e9 + 7;
long long n, x;
int len = 0;
long long prime[MX];
bool is_prime[MX];
long long qadd(long long x, long long p) {
  long long ans = 0;
  while (p) {
    if (p & 1) ans = (x + ans) % MOD;
    x = (x + x) % MOD;
    p >>= 1;
  }
  return ans;
}
long long qpow(long long x, long long p) {
  long long ans = 1;
  while (p) {
    if (p & 1) ans = qadd(ans, x);
    x = qadd(x, x);
    p >>= 1;
  }
  return ans;
}
void init() {
  memset(is_prime, true, sizeof(is_prime));
  for (int i = 2; i < MX; i++) {
    if (is_prime[i]) {
      prime[len++] = i;
      for (int j = i * 2; j < MX; j += i) {
        is_prime[j] = false;
      }
    }
  }
}
long long p[MX];
int plen = 0;
void make_p() {
  for (int i = 0; i < len && x != 0; i++) {
    if (x % prime[i] == 0)
      p[plen++] = prime[i];
    else
      continue;
    while (x % prime[i] == 0) {
      x /= prime[i];
    }
  }
  if (x != 1) p[plen++] = x;
}
int main() {
  ios::sync_with_stdio(true);
  init();
  cin >> x >> n;
  make_p();
  long long ans = 1;
  for (int i = 0; i < plen; i++) {
    long long t = p[i], cnt = 0, pre = 0;
    while (t <= n / p[i]) t *= p[i];
    while (t / p[i] != 0) {
      long long mi = n / t - pre;
      ans = ans * qpow(t, mi) % MOD;
      pre = n / t;
      t /= p[i];
    }
  }
  cout << ans << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1633050 602411242538130481


(G.2) Fast Input

844561 602411242538130481


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MX = 1e5 + 50; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long n, x; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int len = 0; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long prime[MX]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
bool is_prime[MX]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
long long qadd(long long x, long long p) { /* line 9 slow_hit_count: 6101, fast_hit_count: 232 */
  long long ans = 0; /* line 10 slow_hit_count: 6101, fast_hit_count: 232 */
  while (p) { /* line 11 slow_hit_count: 182294, fast_hit_count: 6997 */
    if (p & 1) ans = (x + ans) % MOD; /* line 12 slow_hit_count: 176193, fast_hit_count: 6765 */
    x = (x + x) % MOD; /* line 13 slow_hit_count: 176193, fast_hit_count: 6765 */
    p >>= 1; /* line 14 slow_hit_count: 176193, fast_hit_count: 6765 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 16 slow_hit_count: 6101, fast_hit_count: 232 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
long long qpow(long long x, long long p) { /* line 18 slow_hit_count: 141, fast_hit_count: 6 */
  long long ans = 1; /* line 19 slow_hit_count: 141, fast_hit_count: 6 */
  while (p) { /* line 20 slow_hit_count: 4241, fast_hit_count: 157 */
    if (p & 1) ans = qadd(ans, x); /* line 21 slow_hit_count: 4100, fast_hit_count: 151 */
    x = qadd(x, x); /* line 22 slow_hit_count: 4100, fast_hit_count: 151 */
    p >>= 1; /* line 23 slow_hit_count: 4100, fast_hit_count: 151 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 25 slow_hit_count: 141, fast_hit_count: 6 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
void init() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  memset(is_prime, true, sizeof(is_prime)); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i < MX; i++) { /* line 29 slow_hit_count: 100049, fast_hit_count: 100049 */
    if (is_prime[i]) { /* line 30 slow_hit_count: 100048, fast_hit_count: 100048 */
      prime[len++] = i; /* line 31 slow_hit_count: 9596, fast_hit_count: 9596 */
      for (int j = i * 2; j < MX; j += i) { /* line 32 slow_hit_count: 266536, fast_hit_count: 266536 */
        is_prime[j] = false; /* line 33 slow_hit_count: 256940, fast_hit_count: 256940 */
      } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
long long p[MX]; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
int plen = 0; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
void make_p() { /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < len && x != 0; i++) { /* line 41 slow_hit_count: 9597, fast_hit_count: 9597 */
    if (x % prime[i] == 0) /* line 42 slow_hit_count: 9596, fast_hit_count: 9596 */
      p[plen++] = prime[i]; /* line 43 slow_hit_count: 5, fast_hit_count: 1 */
    else /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      continue; /* line 45 slow_hit_count: 9591, fast_hit_count: 9595 */
    while (x % prime[i] == 0) { /* line 46 slow_hit_count: 12, fast_hit_count: 3 */
      x /= prime[i]; /* line 47 slow_hit_count: 7, fast_hit_count: 2 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  if (x != 1) p[plen++] = x; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(true); /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  init(); /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> x >> n; /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  make_p(); /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 1; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < plen; i++) { /* line 58 slow_hit_count: 6, fast_hit_count: 2 */
    long long t = p[i], cnt = 0, pre = 0; /* line 59 slow_hit_count: 5, fast_hit_count: 1 */
    while (t <= n / p[i]) t *= p[i]; /* line 60 slow_hit_count: 141, fast_hit_count: 6 */
    while (t / p[i] != 0) { /* line 61 slow_hit_count: 146, fast_hit_count: 7 */
      long long mi = n / t - pre; /* line 62 slow_hit_count: 141, fast_hit_count: 6 */
      ans = ans * qpow(t, mi) % MOD; /* line 63 slow_hit_count: 141, fast_hit_count: 6 */
      pre = n / t; /* line 64 slow_hit_count: 141, fast_hit_count: 6 */
      t /= p[i]; /* line 65 slow_hit_count: 141, fast_hit_count: 6 */
    } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 69 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks in the given C program, let's proceed through the tasks step by step.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**
   - The most significant differences in hit counts occur in the functions `qadd` and `qpow`.
   - `qadd` was called 6101 times in the slow input versus 232 times in the fast input.
   - Lines within `qadd` (lines 11-14) were executed 176,193 times for the slow input compared to 6,765 times for the fast input.
   - `qpow` was called 141 times for the slow input versus 6 times for the fast input.
   - Lines within `qpow` (lines 20-23) were similarly disproportionate, with `qadd` called within `qpow` 4,100 times for the slow input versus 151 times for the fast input.

2. **Analysis of Affected Code and Data Structures:**
   - The function `qpow` computes powers using repeated addition (via `qadd`), which appears to be a computational bottleneck. The high hit counts suggest that it is called with larger parameters more frequently in the slow input.
   - The loop in `main` (lines 58-65) iterates over prime factors of `x` and performs calculations involving powers up to `n`. The performance difference is likely due to the number and size of prime factors (`plen` and `p[i]`) affecting the loop iterations and subsequent calls to `qpow`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the natural language statements that describe the conditions leading to slow performance:

1. **Large Exponentiation with Modulo:**
   - **Invariant:** "If the number of prime factors (`plen`) of `x` is large, the program may slow down due to multiple calls to compute powers with large exponents using repeated addition."
   - **Explanation:** The presence of many prime factors leads to numerous calls to `qpow`, which is inefficiently using `qadd` for large calculations.

2. **High Power Calculations:**
   - **Invariant:** "When a prime factor of `x` has a large exponent relative to `n`, the computation of powers becomes expensive, causing a slowdown."
   - **Explanation:** If `n` is large and results in many iterations of multiplying the prime factor, `qpow` is called repeatedly, amplifying the inefficiency of `qadd`.

3. **Prime Factor Iteration:**
   - **Invariant:** "If `x` has a prime factor `p` such that multiple high powers of `p` are less than or equal to `n`, the program becomes slower as it iterates deeply in the loop."
   - **Explanation:** The loop in `main` (lines 58-65) becomes a bottleneck if it needs to iterate through many divisions for each prime factor.

### Conclusion

These invariants highlight the nature of performance bottlenecks observed with certain inputs, providing a basis for potential optimization strategies such as improving the efficiency of power computation and modular arithmetic. These statements aim to capture scenarios that are likely to trigger slowdowns based on the given input constraints and observed behaviors.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's introduce some definitions that will be needed later.

Let prime(x) be the set of prime divisors of x. For example, prime(140) = \{ 2, 5, 7 \}, prime(169) = \{ 13 \}.

Let g(x, p) be the maximum possible integer p^k where k is an integer such that x is divisible by p^k. For example:

  * g(45, 3) = 9 (45 is divisible by 3^2=9 but not divisible by 3^3=27), 
  * g(63, 7) = 7 (63 is divisible by 7^1=7 but not divisible by 7^2=49). 



Let f(x, y) be the product of g(y, p) for all p in prime(x). For example:

  * f(30, 70) = g(70, 2) ⋅ g(70, 3) ⋅ g(70, 5) = 2^1 ⋅ 3^0 ⋅ 5^1 = 10, 
  * f(525, 63) = g(63, 3) ⋅ g(63, 5) ⋅ g(63, 7) = 3^2 ⋅ 5^0 ⋅ 7^1 = 63. 



You have integers x and n. Calculate f(x, 1) ⋅ f(x, 2) ⋅ … ⋅ f(x, n) mod{(10^{9} + 7)}.

Input

The only line contains integers x and n (2 ≤ x ≤ 10^{9}, 1 ≤ n ≤ 10^{18}) — the numbers used in formula.

Output

Print the answer.

Examples

Input


10 2


Output


2


Input


20190929 1605


Output


363165664


Input


947 987654321987654321


Output


593574252

Note

In the first example, f(10, 1) = g(1, 2) ⋅ g(1, 5) = 1, f(10, 2) = g(2, 2) ⋅ g(2, 5) = 2.

In the second example, actual value of formula is approximately 1.597 ⋅ 10^{171}. Make sure you print the answer modulo (10^{9} + 7).

In the third example, be careful about overflow issue.

Solution (C++ code):
{solution}


assistant: Let's begin with Phase 3, where we translate the natural language performance-characterizing invariants into C++ code snippets to detect potential performance bottlenecks.

### Phase 3: Implementing Checker Code in C++

Based on the performance invariants derived earlier, we need to implement runtime checks to detect when the computation may become inefficient. These checks will be embedded in the program to trigger a warning and abort execution when a potential bottleneck is detected.

Here are the checker functions based on our natural language invariants:

```cpp
// Check for a large number of prime factors
void check_prime_factor_count(int primeFactorCount) {
    if (primeFactorCount > 10) {  // Threshold determined to detect potential slowdowns
        cerr << "Warning: Performance bottleneck condition triggered - too many prime factors of x!" << endl;
        abort();
    }
}

// Check for large exponentiation due to high powers
void check_large_exponentiation(long long base, long long exponent) {
    if (exponent > 1e9) {  // Arbitrary threshold to indicate potential slowdown
        cerr << "Warning: Performance bottleneck condition triggered - large exponentiation!" << endl;
        abort();
    }
}

// Check for excessive iteration in prime factor loop
void check_excessive_iterations(long long n, long long prime) {
    if (n / prime > 1e9) {  // Threshold to catch excessive loop iterations
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations in loop!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now, let's integrate these checker functions into the original C++ program to ensure they are invoked at appropriate points to monitor and potentially detect slow execution paths.

Here is the instrumented C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MX = 1e5 + 50;
const long long MOD = 1e9 + 7;
long long n, x;
int len = 0;
long long prime[MX];
bool is_prime[MX];

// Check for a large number of prime factors
void check_prime_factor_count(int primeFactorCount) {
    if (primeFactorCount > 10) {  // Threshold determined to detect potential slowdowns
        cerr << "Warning: Performance bottleneck condition triggered - too many prime factors of x!" << endl;
        abort();
    }
}

// Check for large exponentiation due to high powers
void check_large_exponentiation(long long base, long long exponent) {
    if (exponent > 1e9) {  // Arbitrary threshold to indicate potential slowdown
        cerr << "Warning: Performance bottleneck condition triggered - large exponentiation!" << endl;
        abort();
    }
}

// Check for excessive iteration in prime factor loop
void check_excessive_iterations(long long n, long long prime) {
    if (n / prime > 1e9) {  // Threshold to catch excessive loop iterations
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations in loop!" << endl;
        abort();
    }
}

long long qadd(long long x, long long p) {
    long long ans = 0;
    while (p) {
        if (p & 1) ans = (x + ans) % MOD;
        x = (x + x) % MOD;
        p >>= 1;
    }
    return ans;
}

long long qpow(long long x, long long p) {
    long long ans = 1;
    while (p) {
        if (p & 1) ans = qadd(ans, x);
        x = qadd(x, x);
        p >>= 1;
    }
    return ans;
}

void init() {
    memset(is_prime, true, sizeof(is_prime));
    for (int i = 2; i < MX; i++) {
        if (is_prime[i]) {
            prime[len++] = i;
            for (int j = i * 2; j < MX; j += i) {
                is_prime[j] = false;
            }
        }
    }
}

long long p[MX];
int plen = 0;

void make_p() {
    for (int i = 0; i < len && x != 0; i++) {
        if (x % prime[i] == 0)
            p[plen++] = prime[i];
        else
            continue;
        while (x % prime[i] == 0) {
            x /= prime[i];
        }
    }
    if (x != 1) p[plen++] = x;

    // Check for a large number of prime factors
    check_prime_factor_count(plen);
}

int main() {
    ios::sync_with_stdio(true);
    init();
    cin >> x >> n;
    make_p();
    long long ans = 1;
    for (int i = 0; i < plen; i++) {
        long long t = p[i], cnt = 0, pre = 0;

        // Check for excessive iteration in prime factor loop
        check_excessive_iterations(n, p[i]);

        while (t <= n / p[i]) t *= p[i];
        while (t / p[i] != 0) {
            long long mi = n / t - pre;

            // Check for large exponentiation
            check_large_exponentiation(t, mi);

            ans = ans * qpow(t, mi) % MOD;
            pre = n / t;
            t /= p[i];
        }
    }
    cout << ans << endl;
}
```

### Explanation of Instrumented Code:

- **Prime Factor Count Check:** After populating the array `p`, we check if the number of prime factors (`plen`) exceeds a reasonable threshold.
- **Excessive Iteration Check:** Before entering the main loop to calculate powers, we ensure that for each prime factor `p[i]`, the number of iterations will not become excessive.
- **Large Exponentiation Check:** Just before multiplying powers using `qpow`, we check if the exponents (`mi` in this case) are larger than a threshold, which would indicate potential slowdown due to computation cost.

This instrumented code helps identify conditions leading to inefficient execution and alerts the developer with a warning message and aborts execution, allowing for further investigation and optimization.

