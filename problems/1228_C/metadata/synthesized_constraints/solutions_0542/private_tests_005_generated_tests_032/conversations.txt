system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's introduce some definitions that will be needed later.

Let prime(x) be the set of prime divisors of x. For example, prime(140) = \{ 2, 5, 7 \}, prime(169) = \{ 13 \}.

Let g(x, p) be the maximum possible integer p^k where k is an integer such that x is divisible by p^k. For example:

  * g(45, 3) = 9 (45 is divisible by 3^2=9 but not divisible by 3^3=27), 
  * g(63, 7) = 7 (63 is divisible by 7^1=7 but not divisible by 7^2=49). 



Let f(x, y) be the product of g(y, p) for all p in prime(x). For example:

  * f(30, 70) = g(70, 2) ⋅ g(70, 3) ⋅ g(70, 5) = 2^1 ⋅ 3^0 ⋅ 5^1 = 10, 
  * f(525, 63) = g(63, 3) ⋅ g(63, 5) ⋅ g(63, 7) = 3^2 ⋅ 5^0 ⋅ 7^1 = 63. 



You have integers x and n. Calculate f(x, 1) ⋅ f(x, 2) ⋅ … ⋅ f(x, n) mod{(10^{9} + 7)}.

Input

The only line contains integers x and n (2 ≤ x ≤ 10^{9}, 1 ≤ n ≤ 10^{18}) — the numbers used in formula.

Output

Print the answer.

Examples

Input


10 2


Output


2


Input


20190929 1605


Output


363165664


Input


947 987654321987654321


Output


593574252

Note

In the first example, f(10, 1) = g(1, 2) ⋅ g(1, 5) = 1, f(10, 2) = g(2, 2) ⋅ g(2, 5) = 2.

In the second example, actual value of formula is approximately 1.597 ⋅ 10^{171}. Make sure you print the answer modulo (10^{9} + 7).

In the third example, be careful about overflow issue.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long mod = 1e9 + 7;
long long calc(long long n, long long x) {
  long long z = 0;
  while (n) {
    z += n / x;
    n /= x;
  }
  return z;
}
long long mul(long long x, long long y) {
  x %= mod;
  y %= mod;
  return (x * y) % mod;
}
long long pp(long long x, long long y) {
  long long res = 1;
  while (y) {
    if (y & 1) res = mul(res, x);
    x = mul(x, x);
    y >>= 1;
  }
  return res;
}
int main(int argc, char const *argv[]) {
  long long x, n;
  cin >> x >> n;
  ;
  const long long MX = 2 * sqrt(x);
  std::vector<bool> v(MX, 0);
  std::vector<long long> p;
  v[1] = 1;
  for (int i = 1; i < MX; ++i) {
    if (v[i]) continue;
    if (x % i == 0) p.push_back(i);
    for (int j = 2 * i; j < MX; j += i) v[j] = 1;
  }
  set<long long> P;
  long long tmp = x;
  for (long long xx : p) {
    if (tmp % xx == 0) {
      while (tmp % xx == 0) tmp /= xx;
    }
  }
  if (tmp > 1) p.push_back(tmp);
  long long ans = 1;
  for (long long xx : p) {
    ans = mul(ans, pp(xx, calc(n, xx)));
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000000 1000000000000000000


(G.2) Fast Input

23 1000000000000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long calc(long long n, long long x) { /* line 4 slow_hit_count: 2, fast_hit_count: 1 */
  long long z = 0; /* line 5 slow_hit_count: 2, fast_hit_count: 1 */
  while (n) { /* line 6 slow_hit_count: 88, fast_hit_count: 15 */
    z += n / x; /* line 7 slow_hit_count: 86, fast_hit_count: 14 */
    n /= x; /* line 8 slow_hit_count: 86, fast_hit_count: 14 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  return z; /* line 10 slow_hit_count: 2, fast_hit_count: 1 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
long long mul(long long x, long long y) { /* line 12 slow_hit_count: 195, fast_hit_count: 85 */
  x %= mod; /* line 13 slow_hit_count: 195, fast_hit_count: 85 */
  y %= mod; /* line 14 slow_hit_count: 195, fast_hit_count: 85 */
  return (x * y) % mod; /* line 15 slow_hit_count: 195, fast_hit_count: 85 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
long long pp(long long x, long long y) { /* line 17 slow_hit_count: 2, fast_hit_count: 1 */
  long long res = 1; /* line 18 slow_hit_count: 2, fast_hit_count: 1 */
  while (y) { /* line 19 slow_hit_count: 120, fast_hit_count: 57 */
    if (y & 1) res = mul(res, x); /* line 20 slow_hit_count: 118, fast_hit_count: 56 */
    x = mul(x, x); /* line 21 slow_hit_count: 118, fast_hit_count: 56 */
    y >>= 1; /* line 22 slow_hit_count: 118, fast_hit_count: 56 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 24 slow_hit_count: 2, fast_hit_count: 1 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
int main(int argc, char const *argv[]) { /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  long long x, n; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> x >> n; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  const long long MX = 2 * sqrt(x); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  std::vector<bool> v(MX, 0); /* line 31 slow_hit_count: 2, fast_hit_count: 2 */
  std::vector<long long> p; /* line 32 slow_hit_count: 2, fast_hit_count: 2 */
  v[1] = 1; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < MX; ++i) { /* line 34 slow_hit_count: 63245, fast_hit_count: 9 */
    if (v[i]) continue; /* line 35 slow_hit_count: 63244, fast_hit_count: 8 */
    if (x % i == 0) p.push_back(i); /* line 36 slow_hit_count: 6337, fast_hit_count: 4 */
    for (int j = 2 * i; j < MX; j += i) v[j] = 1; /* line 37 slow_hit_count: 165801, fast_hit_count: 8 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  set<long long> P; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  long long tmp = x; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long xx : p) { /* line 41 slow_hit_count: 3, fast_hit_count: 1 */
    if (tmp % xx == 0) { /* line 42 slow_hit_count: 2, fast_hit_count: 0 */
      while (tmp % xx == 0) tmp /= xx; /* line 43 slow_hit_count: 20, fast_hit_count: 0 */
    } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  if (tmp > 1) p.push_back(tmp); /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 1; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long xx : p) { /* line 48 slow_hit_count: 3, fast_hit_count: 2 */
    ans = mul(ans, pp(xx, calc(n, xx))); /* line 49 slow_hit_count: 2, fast_hit_count: 1 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Analyzing the hit counts for both the fast and slow inputs, the following observations are made:

1. **Prime Calculation Loop (Lines 34-38):**
   - The loop iterating through `i` from 1 to `MX` (twice the square root of `x`) has significantly more hits in the slow input (`63245` hits) compared to the fast input (`9` hits).
   - This loop is responsible for marking non-prime numbers and identifying divisors of `x`.

2. **Nested Loop for Setting Non-prime Flags (Line 37):**
   - This line has a high number of hits (`165801` for slow input vs. `8` for fast input). It marks the multiples of each `i` as non-prime.

3. **Prime Factorization Check (Lines 41-45):**
   - For the slow input, lines 41-43 are executed significantly more times. This is the part of the code that checks for divisibility and performs factorization.

4. **Power and Multiplication Calculation (Lines 19-22, Line 49):**
   - The `pp` function (lines 19-22) and the operations in line 49 have more iterations in the slow input, reflecting deeper or more frequent recursive calculations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified bottlenecks, we can derive the following performance-characterizing invariants:

1. **High Prime Factor Count:** 
   - “When `x` has a large number of small prime factors, the primality sieving and divisor checking processes become extensive, leading to increased computation time.”

2. **Deep Factorization:**
   - “If `x` is highly composite with many divisors within its square root, the division and factorization loops will experience more iterations, slowing down the execution.”

3. **Heavy Recursive Computation:**
   - “When the input `n` is extremely large, the power calculation using repeated multiplication in the `pp` function becomes costly, especially if the prime factors of `x` are numerous or large.”

4. **Complexity of Primality Sieve:**
   - “For composite numbers `x` with complex factors, the nested loops marking non-prime numbers will be triggered more frequently, leading to longer execution times.”

These natural language invariants articulate the circumstances under which the program slows down. They focus on the input characteristics that affect the complexity of loop iterations and recursive depth, without relying on specific numeric values of the slow input.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's introduce some definitions that will be needed later.

Let prime(x) be the set of prime divisors of x. For example, prime(140) = \{ 2, 5, 7 \}, prime(169) = \{ 13 \}.

Let g(x, p) be the maximum possible integer p^k where k is an integer such that x is divisible by p^k. For example:

  * g(45, 3) = 9 (45 is divisible by 3^2=9 but not divisible by 3^3=27), 
  * g(63, 7) = 7 (63 is divisible by 7^1=7 but not divisible by 7^2=49). 



Let f(x, y) be the product of g(y, p) for all p in prime(x). For example:

  * f(30, 70) = g(70, 2) ⋅ g(70, 3) ⋅ g(70, 5) = 2^1 ⋅ 3^0 ⋅ 5^1 = 10, 
  * f(525, 63) = g(63, 3) ⋅ g(63, 5) ⋅ g(63, 7) = 3^2 ⋅ 5^0 ⋅ 7^1 = 63. 



You have integers x and n. Calculate f(x, 1) ⋅ f(x, 2) ⋅ … ⋅ f(x, n) mod{(10^{9} + 7)}.

Input

The only line contains integers x and n (2 ≤ x ≤ 10^{9}, 1 ≤ n ≤ 10^{18}) — the numbers used in formula.

Output

Print the answer.

Examples

Input


10 2


Output


2


Input


20190929 1605


Output


363165664


Input


947 987654321987654321


Output


593574252

Note

In the first example, f(10, 1) = g(1, 2) ⋅ g(1, 5) = 1, f(10, 2) = g(2, 2) ⋅ g(2, 5) = 2.

In the second example, actual value of formula is approximately 1.597 ⋅ 10^{171}. Make sure you print the answer modulo (10^{9} + 7).

In the third example, be careful about overflow issue.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Let's translate the natural language performance invariants into C++ checker code:

1. **High Prime Factor Count:**
   ```cpp
   void check_high_prime_factor_count(long long x, const std::vector<long long>& primes) {
       if (primes.size() > 10) {  // Assuming more than 10 prime factors is excessive for x
           cerr << "Warning: High prime factor count detected, potential slowdown!" << endl;
           abort();
       }
   }
   ```

2. **Deep Factorization:**
   ```cpp
   void check_deep_factorization(long long x, const std::vector<long long>& primes) {
       long long factor_count = 0;
       for (long long p : primes) {
           while (x % p == 0) {
               x /= p;
               factor_count++;
               if (factor_count > 20) {  // Arbitrary threshold for deep factorization
                   cerr << "Warning: Deep factorization detected, potential slowdown!" << endl;
                   abort();
               }
           }
       }
   }
   ```

3. **Heavy Recursive Computation:**
   ```cpp
   void check_heavy_recursive_computation(long long n) {
       if (n > 1e17) {  // Set a threshold for n indicating potential deep recursion
           cerr << "Warning: Large n detected, potential heavy recursive computation!" << endl;
           abort();
       }
   }
   ```

4. **Complexity of Primality Sieve:**
   ```cpp
   void check_primality_sieve_complexity(long long x) {
       long long MX = 2 * sqrt(x);
       if (MX > 10000) {  // Assuming a large MX could lead to slow primality sieving
           cerr << "Warning: High complexity in primality sieve, potential slowdown!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original Program

We will now integrate these checkers into the provided C++ code at appropriate locations.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long mod = 1e9 + 7;

// Checker for high prime factor count
void check_high_prime_factor_count(const std::vector<long long>& primes) {
    if (primes.size() > 10) {  // Assuming more than 10 prime factors is excessive for x
        cerr << "Warning: High prime factor count detected, potential slowdown!" << endl;
        abort();
    }
}

// Checker for deep factorization
void check_deep_factorization(long long x, const std::vector<long long>& primes) {
    long long factor_count = 0;
    for (long long p : primes) {
        while (x % p == 0) {
            x /= p;
            factor_count++;
            if (factor_count > 20) {  // Arbitrary threshold for deep factorization
                cerr << "Warning: Deep factorization detected, potential slowdown!" << endl;
                abort();
            }
        }
    }
}

// Checker for heavy recursive computation
void check_heavy_recursive_computation(long long n) {
    if (n > 1e17) {  // Set a threshold for n indicating potential deep recursion
        cerr << "Warning: Large n detected, potential heavy recursive computation!" << endl;
        abort();
    }
}

// Checker for complexity of primality sieve
void check_primality_sieve_complexity(long long x) {
    long long MX = 2 * sqrt(x);
    if (MX > 10000) {  // Assuming a large MX could lead to slow primality sieving
        cerr << "Warning: High complexity in primality sieve, potential slowdown!" << endl;
        abort();
    }
}

long long calc(long long n, long long x) {
    long long z = 0;
    while (n) {
        z += n / x;
        n /= x;
    }
    return z;
}

long long mul(long long x, long long y) {
    x %= mod;
    y %= mod;
    return (x * y) % mod;
}

long long pp(long long x, long long y) {
    long long res = 1;
    while (y) {
        if (y & 1) res = mul(res, x);
        x = mul(x, x);
        y >>= 1;
    }
    return res;
}

int main(int argc, char const *argv[]) {
    long long x, n;
    cin >> x >> n;
    
    // Perform initial checks
    check_heavy_recursive_computation(n);
    check_primality_sieve_complexity(x);

    const long long MX = 2 * sqrt(x);
    std::vector<bool> v(MX, 0);
    std::vector<long long> p;
    v[1] = 1;
    for (int i = 1; i < MX; ++i) {
        if (v[i]) continue;
        if (x % i == 0) p.push_back(i);
        for (int j = 2 * i; j < MX; j += i) v[j] = 1;
    }

    // Check prime factor count
    check_high_prime_factor_count(p);

    set<long long> P;
    long long tmp = x;
    for (long long xx : p) {
        if (tmp % xx == 0) {
            while (tmp % xx == 0) tmp /= xx;
        }
    }
    if (tmp > 1) p.push_back(tmp);

    // Check deep factorization
    check_deep_factorization(x, p);

    long long ans = 1;
    for (long long xx : p) {
        ans = mul(ans, pp(xx, calc(n, xx)));
    }
    cout << ans << endl;
    return 0;
}
```

**Notes:**
- Each checker function is placed right after relevant inputs are read or data structures are initialized.
- These checkers are designed to abort execution when a potential performance bottleneck is identified, helping in diagnostics during testing or fuzzing.

