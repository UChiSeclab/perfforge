system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's introduce some definitions that will be needed later.

Let prime(x) be the set of prime divisors of x. For example, prime(140) = \{ 2, 5, 7 \}, prime(169) = \{ 13 \}.

Let g(x, p) be the maximum possible integer p^k where k is an integer such that x is divisible by p^k. For example:

  * g(45, 3) = 9 (45 is divisible by 3^2=9 but not divisible by 3^3=27), 
  * g(63, 7) = 7 (63 is divisible by 7^1=7 but not divisible by 7^2=49). 



Let f(x, y) be the product of g(y, p) for all p in prime(x). For example:

  * f(30, 70) = g(70, 2) ⋅ g(70, 3) ⋅ g(70, 5) = 2^1 ⋅ 3^0 ⋅ 5^1 = 10, 
  * f(525, 63) = g(63, 3) ⋅ g(63, 5) ⋅ g(63, 7) = 3^2 ⋅ 5^0 ⋅ 7^1 = 63. 



You have integers x and n. Calculate f(x, 1) ⋅ f(x, 2) ⋅ … ⋅ f(x, n) mod{(10^{9} + 7)}.

Input

The only line contains integers x and n (2 ≤ x ≤ 10^{9}, 1 ≤ n ≤ 10^{18}) — the numbers used in formula.

Output

Print the answer.

Examples

Input


10 2


Output


2


Input


20190929 1605


Output


363165664


Input


947 987654321987654321


Output


593574252

Note

In the first example, f(10, 1) = g(1, 2) ⋅ g(1, 5) = 1, f(10, 2) = g(2, 2) ⋅ g(2, 5) = 2.

In the second example, actual value of formula is approximately 1.597 ⋅ 10^{171}. Make sure you print the answer modulo (10^{9} + 7).

In the third example, be careful about overflow issue.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int mod = (1e9) + 7;
bool isprime(long long int a) {
  if (a <= 1) return false;
  for (long long int i = 2; i < floor(sqrt(a) + 1); i++) {
    if (a % i == 0) {
      return false;
    }
  }
  return true;
}
long long int modpow(long long int x, long long int y) {
  long long int ans = 1;
  while (y > 0) {
    if (y & 1) {
      ans = ((ans % mod) * (x % mod)) % mod;
    }
    y = y >> 1;
    x = ((x % mod) * (x % mod)) % mod;
  }
  return ans;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  long long int x, n, ans = 1;
  cin >> x >> n;
  for (long long int i = 1; i < floor(sqrt(x)) + 1; i++) {
    if (x % i == 0 && isprime(i)) {
      long long int m = n / i;
      while (m) {
        ans = (ans * modpow(i, m)) % mod;
        m = m / i;
      }
    }
    if (x % i == 0 && isprime((x / i)) && i != (x / i)) {
      long long int m = n / (x / i);
      while (m) {
        ans = (ans * modpow((x / i), m)) % mod;
        m = m / (x / i);
      }
    }
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000000 1000000000000000000


(G.2) Fast Input

139 1000000000000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = (1e9) + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
bool isprime(long long int a) { /* line 4 slow_hit_count: 100, fast_hit_count: 2 */
  if (a <= 1) return false; /* line 5 slow_hit_count: 100, fast_hit_count: 2 */
  for (long long int i = 2; i < floor(sqrt(a) + 1); i++) { /* line 6 slow_hit_count: 124, fast_hit_count: 11 */
    if (a % i == 0) { /* line 7 slow_hit_count: 122, fast_hit_count: 10 */
      return false; /* line 8 slow_hit_count: 97, fast_hit_count: 0 */
    } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 11 slow_hit_count: 2, fast_hit_count: 1 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long int modpow(long long int x, long long int y) { /* line 13 slow_hit_count: 84, fast_hit_count: 8 */
  long long int ans = 1; /* line 14 slow_hit_count: 84, fast_hit_count: 8 */
  while (y > 0) { /* line 15 slow_hit_count: 2607, fast_hit_count: 234 */
    if (y & 1) { /* line 16 slow_hit_count: 2523, fast_hit_count: 226 */
      ans = ((ans % mod) * (x % mod)) % mod; /* line 17 slow_hit_count: 1152, fast_hit_count: 108 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    y = y >> 1; /* line 19 slow_hit_count: 2523, fast_hit_count: 226 */
    x = ((x % mod) * (x % mod)) % mod; /* line 20 slow_hit_count: 2523, fast_hit_count: 226 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 22 slow_hit_count: 84, fast_hit_count: 8 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(NULL); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  long long int x, n, ans = 1; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> x >> n; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long int i = 1; i < floor(sqrt(x)) + 1; i++) { /* line 30 slow_hit_count: 31623, fast_hit_count: 12 */
    if (x % i == 0 && isprime(i)) { /* line 31 slow_hit_count: 31622, fast_hit_count: 11 */
      long long int m = n / i; /* line 32 slow_hit_count: 2, fast_hit_count: 0 */
      while (m) { /* line 33 slow_hit_count: 86, fast_hit_count: 0 */
        ans = (ans * modpow(i, m)) % mod; /* line 34 slow_hit_count: 84, fast_hit_count: 0 */
        m = m / i; /* line 35 slow_hit_count: 84, fast_hit_count: 0 */
      } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    if (x % i == 0 && isprime((x / i)) && i != (x / i)) { /* line 38 slow_hit_count: 31622, fast_hit_count: 11 */
      long long int m = n / (x / i); /* line 39 slow_hit_count: 0, fast_hit_count: 1 */
      while (m) { /* line 40 slow_hit_count: 0, fast_hit_count: 9 */
        ans = (ans * modpow((x / i), m)) % mod; /* line 41 slow_hit_count: 0, fast_hit_count: 8 */
        m = m / (x / i); /* line 42 slow_hit_count: 0, fast_hit_count: 8 */
      } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze and derive the performance-characterizing invariants for the given C program, we can break down the analysis into the two phases as requested:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - For both inputs, the function `isprime()` is called multiple times. However, it significantly impacts the slow input because of the high number of iterations it performs, especially in the line where it checks divisibility up to `floor(sqrt(a) + 1)`.
   - The `modpow()` function, while called repeatedly, is less of a bottleneck compared to the prime-checking logic.
   - The loops within `main()` are hit thousands of times in the slow input, particularly around the operations involving prime factor calculations and power computations.

2. **Significantly Affected Lines:**
   - The `isprime()` function loop (`line 6`) has a high hit count for the slow input, indicating frequent re-evaluation for primality.
   - The `for` loop in `main()` (`line 30`) is another major contributor to high execution time since it iterates over a range dictated by `floor(sqrt(x))`.

3. **Data Structures and Loops:**
   - The performance degradation is linked to the primality test and the recursive computation of powers. The complexity arises from iterating over potential divisors of `x` and handling large values of `n`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can generate the following natural language statements that describe conditions under which the program likely enters a slow path:

1. **High Prime Checking Overhead:**
   - **Invariant:** "The program experiences slow performance when `x` is composed of small prime factors and `floor(sqrt(x))` is large, resulting in numerous primality checks."
   - **Reasoning:** Since the hit counts reveal extensive primality checks, especially for composite numbers with small factors, the primality test becomes a bottleneck.

2. **Excessive Iteration for Large `n`:**
   - **Invariant:** "Performance bottlenecks occur when `n` is very large, leading to excessive iterations in nested loops processing prime factors."
   - **Reasoning:** The calculation of power products in loops, modulated by `n`, results in numerous iterations, particularly when `n` is at its upper limit.

3. **Expensive Power Calculations:**
   - **Invariant:** "If `x` is divisible by small primes, the frequent computation of powers within loops can significantly slow down execution."
   - **Reasoning:** The loops that compute power products for each prime factor are heavily impacted when these factors are small, as indicated by the frequent calls to `modpow()`.

4. **Composite Structure of `x`:**
   - **Invariant:** "When `x` has many divisors below its square root, the primality tests and power calculations proliferate, leading to poor performance."
   - **Reasoning:** The loop iterating over potential divisors of `x` becomes computationally expensive when most of these are small, thus increasing the number of operations.

These invariants capture the conditions that lead to slowdowns in the program, highlighting the interactions between large `n`, the structure of `x`, and the computational intensity of primality checks and recursive power calculations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's introduce some definitions that will be needed later.

Let prime(x) be the set of prime divisors of x. For example, prime(140) = \{ 2, 5, 7 \}, prime(169) = \{ 13 \}.

Let g(x, p) be the maximum possible integer p^k where k is an integer such that x is divisible by p^k. For example:

  * g(45, 3) = 9 (45 is divisible by 3^2=9 but not divisible by 3^3=27), 
  * g(63, 7) = 7 (63 is divisible by 7^1=7 but not divisible by 7^2=49). 



Let f(x, y) be the product of g(y, p) for all p in prime(x). For example:

  * f(30, 70) = g(70, 2) ⋅ g(70, 3) ⋅ g(70, 5) = 2^1 ⋅ 3^0 ⋅ 5^1 = 10, 
  * f(525, 63) = g(63, 3) ⋅ g(63, 5) ⋅ g(63, 7) = 3^2 ⋅ 5^0 ⋅ 7^1 = 63. 



You have integers x and n. Calculate f(x, 1) ⋅ f(x, 2) ⋅ … ⋅ f(x, n) mod{(10^{9} + 7)}.

Input

The only line contains integers x and n (2 ≤ x ≤ 10^{9}, 1 ≤ n ≤ 10^{18}) — the numbers used in formula.

Output

Print the answer.

Examples

Input


10 2


Output


2


Input


20190929 1605


Output


363165664


Input


947 987654321987654321


Output


593574252

Note

In the first example, f(10, 1) = g(1, 2) ⋅ g(1, 5) = 1, f(10, 2) = g(2, 2) ⋅ g(2, 5) = 2.

In the second example, actual value of formula is approximately 1.597 ⋅ 10^{171}. Make sure you print the answer modulo (10^{9} + 7).

In the third example, be careful about overflow issue.

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3 and Phase 4 as requested.

### Phase 3: Implementing Invariants as Checker Code in C++

Based on the natural language invariants we derived earlier, we'll create C++ code snippets that represent these logical checks at runtime.

1. **Checker for High Prime Checking Overhead:**

   ```cpp
   void check_prime_checker_invariant(long long int x) {
       if (floor(sqrt(x)) > 31622) {  // Approximate upper threshold for x = 10^9
           cerr << "Warning: Performance bottleneck condition triggered due to high prime checking overhead!" << endl;
           abort();
       }
   }
   ```

2. **Checker for Excessive Iteration for Large `n`:**

   ```cpp
   void check_large_n_invariant(long long int n) {
       if (n > 1e18) {
           cerr << "Warning: Performance bottleneck condition triggered due to excessive iterations with large n!" << endl;
           abort();
       }
   }
   ```

3. **Checker for Composite Structure of `x`:**

   ```cpp
   void check_composite_x_invariant(long long int x) {
       int divisor_count = 0;
       for (long long int i = 1; i <= floor(sqrt(x)); ++i) {
           if (x % i == 0) {
               divisor_count += (i == x / i) ? 1 : 2;
           }
       }
       if (divisor_count > 10) {  // Threshold number of divisors
           cerr << "Warning: Performance bottleneck condition triggered due to many divisors of x!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Original Program

Now, let's integrate these checker snippets into the original C++ program to detect potential performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int mod = (1e9) + 7;

bool isprime(long long int a) {
    if (a <= 1) return false;
    for (long long int i = 2; i < floor(sqrt(a) + 1); i++) {
        if (a % i == 0) {
            return false;
        }
    }
    return true;
}

long long int modpow(long long int x, long long int y) {
    long long int ans = 1;
    while (y > 0) {
        if (y & 1) {
            ans = ((ans % mod) * (x % mod)) % mod;
        }
        y = y >> 1;
        x = ((x % mod) * (x % mod)) % mod;
    }
    return ans;
}

// Checker functions
void check_prime_checker_invariant(long long int x) {
    if (floor(sqrt(x)) > 31622) {  // Approximate upper threshold for x = 10^9
        cerr << "Warning: Performance bottleneck condition triggered due to high prime checking overhead!" << endl;
        abort();
    }
}

void check_large_n_invariant(long long int n) {
    if (n > 1e18) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive iterations with large n!" << endl;
        abort();
    }
}

void check_composite_x_invariant(long long int x) {
    int divisor_count = 0;
    for (long long int i = 1; i <= floor(sqrt(x)); ++i) {
        if (x % i == 0) {
            divisor_count += (i == x / i) ? 1 : 2;
        }
    }
    if (divisor_count > 10) {  // Threshold number of divisors
        cerr << "Warning: Performance bottleneck condition triggered due to many divisors of x!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    long long int x, n, ans = 1;
    cin >> x >> n;
    
    // Insert checks after input
    check_prime_checker_invariant(x);  // Check for high prime checking overhead
    check_large_n_invariant(n);        // Check for large n
    check_composite_x_invariant(x);    // Check for composite structure of x

    for (long long int i = 1; i < floor(sqrt(x)) + 1; i++) {
        if (x % i == 0 && isprime(i)) {
            long long int m = n / i;
            while (m) {
                ans = (ans * modpow(i, m)) % mod;
                m = m / i;
            }
        }
        if (x % i == 0 && isprime((x / i)) && i != (x / i)) {
            long long int m = n / (x / i);
            while (m) {
                ans = (ans * modpow((x / i), m)) % mod;
                m = m / (x / i);
            }
        }
    }
    cout << ans;
    return 0;
}
```

### Explanation:

- **Checker Integration:** The checkers are placed right after reading input values for `x` and `n`. This ensures that the potential bottleneck conditions are detected early and do not add overhead during the main computational loop.
- **Abort on Detection:** Each checker uses `abort()` to terminate the program if a bottleneck condition is triggered, which is useful for debugging and optimization during testing.
- **Thresholds:** These conditions and thresholds are chosen based on the analysis from Phase 2, aiming to capture realistic triggers for slow performance while adhering to the problem constraints.

