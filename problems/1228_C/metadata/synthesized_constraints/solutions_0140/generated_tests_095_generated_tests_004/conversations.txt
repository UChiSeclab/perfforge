system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's introduce some definitions that will be needed later.

Let prime(x) be the set of prime divisors of x. For example, prime(140) = \{ 2, 5, 7 \}, prime(169) = \{ 13 \}.

Let g(x, p) be the maximum possible integer p^k where k is an integer such that x is divisible by p^k. For example:

  * g(45, 3) = 9 (45 is divisible by 3^2=9 but not divisible by 3^3=27), 
  * g(63, 7) = 7 (63 is divisible by 7^1=7 but not divisible by 7^2=49). 



Let f(x, y) be the product of g(y, p) for all p in prime(x). For example:

  * f(30, 70) = g(70, 2) ⋅ g(70, 3) ⋅ g(70, 5) = 2^1 ⋅ 3^0 ⋅ 5^1 = 10, 
  * f(525, 63) = g(63, 3) ⋅ g(63, 5) ⋅ g(63, 7) = 3^2 ⋅ 5^0 ⋅ 7^1 = 63. 



You have integers x and n. Calculate f(x, 1) ⋅ f(x, 2) ⋅ … ⋅ f(x, n) mod{(10^{9} + 7)}.

Input

The only line contains integers x and n (2 ≤ x ≤ 10^{9}, 1 ≤ n ≤ 10^{18}) — the numbers used in formula.

Output

Print the answer.

Examples

Input


10 2


Output


2


Input


20190929 1605


Output


363165664


Input


947 987654321987654321


Output


593574252

Note

In the first example, f(10, 1) = g(1, 2) ⋅ g(1, 5) = 1, f(10, 2) = g(2, 2) ⋅ g(2, 5) = 2.

In the second example, actual value of formula is approximately 1.597 ⋅ 10^{171}. Make sure you print the answer modulo (10^{9} + 7).

In the third example, be careful about overflow issue.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long powmod(long long p, long long n) {
  if (n == 0) return 1;
  if (n % 2 == 1) return (p * powmod(p, n - 1)) % 1000000007;
  long long z = powmod(p, n / 2);
  return (z * z) % 1000000007;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long x, n;
  cin >> x >> n;
  set<long long> P;
  for (long long i = 2; i < 100000 && x > 1; ++i) {
    while (x % i == 0) {
      P.insert(i);
      x /= i;
    }
  }
  if (x > 1) P.insert(x);
  long long ans = 1;
  for (long long p : P) {
    long long a = 0;
    long long b = n;
    while (b) {
      b /= p;
      a += b;
      a %= (1000000007 - 1);
    }
    ans *= powmod(p, a);
    ans %= 1000000007;
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000001001 1000000000010000000


(G.2) Fast Input

1000000000 1000000000010000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long powmod(long long p, long long n) { /* line 3 slow_hit_count: 120, fast_hit_count: 79 */
  if (n == 0) return 1; /* line 4 slow_hit_count: 120, fast_hit_count: 79 */
  if (n % 2 == 1) return (p * powmod(p, n - 1)) % 1000000007; /* line 5 slow_hit_count: 117, fast_hit_count: 77 */
  long long z = powmod(p, n / 2); /* line 6 slow_hit_count: 76, fast_hit_count: 51 */
  return (z * z) % 1000000007; /* line 7 slow_hit_count: 76, fast_hit_count: 51 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  long long x, n; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> x >> n; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  set<long long> P; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 2; i < 100000 && x > 1; ++i) { /* line 15 slow_hit_count: 99999, fast_hit_count: 5 */
    while (x % i == 0) { /* line 16 slow_hit_count: 100000, fast_hit_count: 22 */
      P.insert(i); /* line 17 slow_hit_count: 2, fast_hit_count: 18 */
      x /= i; /* line 18 slow_hit_count: 2, fast_hit_count: 18 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  if (x > 1) P.insert(x); /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 1; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long p : P) { /* line 23 slow_hit_count: 4, fast_hit_count: 3 */
    long long a = 0; /* line 24 slow_hit_count: 3, fast_hit_count: 2 */
    long long b = n; /* line 25 slow_hit_count: 3, fast_hit_count: 2 */
    while (b) { /* line 26 slow_hit_count: 51, fast_hit_count: 88 */
      b /= p; /* line 27 slow_hit_count: 48, fast_hit_count: 86 */
      a += b; /* line 28 slow_hit_count: 48, fast_hit_count: 86 */
      a %= (1000000007 - 1); /* line 29 slow_hit_count: 48, fast_hit_count: 86 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    ans *= powmod(p, a); /* line 31 slow_hit_count: 3, fast_hit_count: 2 */
    ans %= 1000000007; /* line 32 slow_hit_count: 3, fast_hit_count: 2 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance characteristics of the provided C program, we follow two main phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Line-Level Hit Counts:**

   - **Line 15 (Factorization Loop):** 
     - Slow input hit count: 99,999
     - Fast input hit count: 5
     - **Observation:** This loop iterates significantly more times for the slow input.
   
   - **Line 16 (Inner While Loop):** 
     - Slow input hit count: 100,000
     - Fast input hit count: 22
     - **Observation:** The inner loop is also executed more frequently for the slow input, indicating more factors.

2. **Analysis of the Code Segments:**

   - The first loop (lines 15-18) iterates over potential prime factors. For the slow input, the loop runs almost the entire range of 2 to 100,000. This indicates that `x` for the slow input has many small factors.
   
   - The second loop (lines 26-29) calculates the exponent for each prime factor. For the slow input, it shows a decrease in hit count compared to the fast input, suggesting this section is not the primary bottleneck.

3. **Interaction with Data Structures:**

   - The set `P` is used to store the prime factors of `x`. The slow input results in more factors being added to this set, which directly impacts the number of iterations needed in the subsequent prime factor exponent calculation.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, the following natural language invariants describe conditions that likely lead to slow execution:

1. **Invariant 1: High Number of Small Prime Factors**
   - **Description:** "If the number `x` has many small prime factors that fall within the range of 2 to 100,000, the program is likely to enter a slow path due to extensive factorization computations."
   - This captures the situation where `x` has a high density of small factors, causing the loop in lines 15-18 to run extensively, resulting in many operations and slowing the program.

2. **Invariant 2: Inefficient Prime Factorization of `x`**
   - **Description:** "When `x` has a complex factorization involving many divisible primes, the time spent iterating through the potential divisors increases, leading to a performance bottleneck."
   - This indicates that complex factorization of `x` significantly contributes to the slowdown due to the nested loop structure.

3. **Invariant 3: Large Exponent Calculations**
   - **Description:** "If `n` is large and `x` has more than a few prime factors, the repeated calculations of power moduli can become expensive, though this may not be the primary bottleneck for small `x`."
   - While the hit counts reveal that the primary factorization loop is the main bottleneck, large power calculations could also contribute if the factorization results in many primes.

These invariants help to anticipate slow execution conditions by identifying the characteristics of `x` that lead to extensive looping and computational overhead.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's introduce some definitions that will be needed later.

Let prime(x) be the set of prime divisors of x. For example, prime(140) = \{ 2, 5, 7 \}, prime(169) = \{ 13 \}.

Let g(x, p) be the maximum possible integer p^k where k is an integer such that x is divisible by p^k. For example:

  * g(45, 3) = 9 (45 is divisible by 3^2=9 but not divisible by 3^3=27), 
  * g(63, 7) = 7 (63 is divisible by 7^1=7 but not divisible by 7^2=49). 



Let f(x, y) be the product of g(y, p) for all p in prime(x). For example:

  * f(30, 70) = g(70, 2) ⋅ g(70, 3) ⋅ g(70, 5) = 2^1 ⋅ 3^0 ⋅ 5^1 = 10, 
  * f(525, 63) = g(63, 3) ⋅ g(63, 5) ⋅ g(63, 7) = 3^2 ⋅ 5^0 ⋅ 7^1 = 63. 



You have integers x and n. Calculate f(x, 1) ⋅ f(x, 2) ⋅ … ⋅ f(x, n) mod{(10^{9} + 7)}.

Input

The only line contains integers x and n (2 ≤ x ≤ 10^{9}, 1 ≤ n ≤ 10^{18}) — the numbers used in formula.

Output

Print the answer.

Examples

Input


10 2


Output


2


Input


20190929 1605


Output


363165664


Input


947 987654321987654321


Output


593574252

Note

In the first example, f(10, 1) = g(1, 2) ⋅ g(1, 5) = 1, f(10, 2) = g(2, 2) ⋅ g(2, 5) = 2.

In the second example, actual value of formula is approximately 1.597 ⋅ 10^{171}. Make sure you print the answer modulo (10^{9} + 7).

In the third example, be careful about overflow issue.

Solution (C++ code):
{solution}


assistant: Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants identified earlier, we can now translate them into C++ runtime checks. These checks will help us identify when the program is entering a performance bottleneck.

### Implementation of Invariants in C++

```cpp
#include <iostream>
#include <set>

void check_high_number_of_small_prime_factors(bool condition) {
    if (condition) {
        std::cerr << "Warning: Performance bottleneck condition triggered - high density of small prime factors!" << std::endl;
        abort();
    }
}

void check_complex_factorization(bool condition) {
    if (condition) {
        std::cerr << "Warning: Performance bottleneck condition triggered - complex factorization!" << std::endl;
        abort();
    }
}

void check_large_exponent_calculations(bool condition) {
    if (condition) {
        std::cerr << "Warning: Performance bottleneck condition triggered - large exponent calculations!" << std::endl;
        abort();
    }
}
```

### Explanation of Checkers

1. **check_high_number_of_small_prime_factors:** This function checks if the number `x` has a high density of small prime factors, which might cause excessive iterations in the factorization loop.

2. **check_complex_factorization:** This function checks if `x` has a complex factorization that involves many potential divisors, leading to a performance bottleneck.

3. **check_large_exponent_calculations:** This function verifies if the combination of a large `n` and multiple prime factors leads to expensive calculations of power moduli, although this is not the primary bottleneck for small `x`.

Phase 4: Integrate the Checkers into the Program

Now, let's incorporate these checks into the original C++ program while ensuring they do not add unnecessary overhead.

### Instrumented C++ Program

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_high_number_of_small_prime_factors(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high density of small prime factors!" << endl;
        abort();
    }
}

void check_complex_factorization(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - complex factorization!" << endl;
        abort();
    }
}

void check_large_exponent_calculations(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large exponent calculations!" << endl;
        abort();
    }
}

long long powmod(long long p, long long n) {
    if (n == 0) return 1;
    if (n % 2 == 1) return (p * powmod(p, n - 1)) % 1000000007;
    long long z = powmod(p, n / 2);
    return (z * z) % 1000000007;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    long long x, n;
    cin >> x >> n;
    set<long long> P;

    long long original_x = x;
    for (long long i = 2; i < 100000 && x > 1; ++i) {
        while (x % i == 0) {
            P.insert(i);
            x /= i;
        }
    }
    if (x > 1) P.insert(x);

    // Check for high number of small prime factors
    check_high_number_of_small_prime_factors(original_x > 1000000000 && P.size() > 10);

    long long ans = 1;
    for (long long p : P) {
        long long a = 0;
        long long b = n;
        while (b) {
            b /= p;
            a += b;
            a %= (1000000007 - 1);
        }

        // Check for large exponent calculations
        check_large_exponent_calculations(n > 1000000000000000000 && a > 10);

        ans *= powmod(p, a);
        ans %= 1000000007;
    }

    cout << ans << endl;
    return 0;
}
```

### Explanation of Integrated Checkers

- **Place Checks Effectively:** The checks are placed after the potential bottleneck conditions are established, such as after factorization and before exponentiation.
  
- **Avoid Overhead in Tight Loops:** Checks are not placed inside tight loops to avoid degrading performance.

- **Commented Integration:** Each check is commented to explain which bottleneck it detects and why it's placed at that point.

With these integrated checks, the program will abort if the input conditions are likely to result in a performance bottleneck, thus helping in quick identification and debugging.

