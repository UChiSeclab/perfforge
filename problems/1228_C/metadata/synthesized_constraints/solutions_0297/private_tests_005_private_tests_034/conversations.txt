system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's introduce some definitions that will be needed later.

Let prime(x) be the set of prime divisors of x. For example, prime(140) = \{ 2, 5, 7 \}, prime(169) = \{ 13 \}.

Let g(x, p) be the maximum possible integer p^k where k is an integer such that x is divisible by p^k. For example:

  * g(45, 3) = 9 (45 is divisible by 3^2=9 but not divisible by 3^3=27), 
  * g(63, 7) = 7 (63 is divisible by 7^1=7 but not divisible by 7^2=49). 



Let f(x, y) be the product of g(y, p) for all p in prime(x). For example:

  * f(30, 70) = g(70, 2) ⋅ g(70, 3) ⋅ g(70, 5) = 2^1 ⋅ 3^0 ⋅ 5^1 = 10, 
  * f(525, 63) = g(63, 3) ⋅ g(63, 5) ⋅ g(63, 7) = 3^2 ⋅ 5^0 ⋅ 7^1 = 63. 



You have integers x and n. Calculate f(x, 1) ⋅ f(x, 2) ⋅ … ⋅ f(x, n) mod{(10^{9} + 7)}.

Input

The only line contains integers x and n (2 ≤ x ≤ 10^{9}, 1 ≤ n ≤ 10^{18}) — the numbers used in formula.

Output

Print the answer.

Examples

Input


10 2


Output


2


Input


20190929 1605


Output


363165664


Input


947 987654321987654321


Output


593574252

Note

In the first example, f(10, 1) = g(1, 2) ⋅ g(1, 5) = 1, f(10, 2) = g(2, 2) ⋅ g(2, 5) = 2.

In the second example, actual value of formula is approximately 1.597 ⋅ 10^{171}. Make sure you print the answer modulo (10^{9} + 7).

In the third example, be careful about overflow issue.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  unsigned long long int n, x, i, j, ans = 1, c, s, k;
  unsigned long long int p[1000];
  k = 0;
  cin >> x >> n;
  c = x;
  if (c % 2 == 0) p[k++] = 2;
  while (c % 2 == 0) c /= 2;
  for (i = 3; i <= sqrt(x); i++) {
    if (c % i == 0) p[k++] = i;
    while (c % i == 0) c /= i;
  }
  if (c > 2) p[k++] = c;
  for (i = 0; i < k; i++) {
    c = p[i];
    s = 0;
    while (c <= n) {
      s += (n / c);
      s %= (1000000007 - 1);
      if (c > (n / p[i])) break;
      c *= p[i];
    }
    while (s > 0) {
      if (s % 2 == 1) ans = (ans * p[i]) % 1000000007;
      s /= 2;
      p[i] = (p[i] * p[i]) % 1000000007;
    }
  }
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1000000000 1000000000000000000


(G.2) Fast Input

139 1000000000000000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  unsigned long long int n, x, i, j, ans = 1, c, s, k; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  unsigned long long int p[1000]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  k = 0; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> x >> n; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  c = x; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  if (c % 2 == 0) p[k++] = 2; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  while (c % 2 == 0) c /= 2; /* line 10 slow_hit_count: 10, fast_hit_count: 1 */
  for (i = 3; i <= sqrt(x); i++) { /* line 11 slow_hit_count: 31621, fast_hit_count: 10 */
    if (c % i == 0) p[k++] = i; /* line 12 slow_hit_count: 31620, fast_hit_count: 9 */
    while (c % i == 0) c /= i; /* line 13 slow_hit_count: 31629, fast_hit_count: 9 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  if (c > 2) p[k++] = c; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < k; i++) { /* line 16 slow_hit_count: 3, fast_hit_count: 2 */
    c = p[i]; /* line 17 slow_hit_count: 2, fast_hit_count: 1 */
    s = 0; /* line 18 slow_hit_count: 2, fast_hit_count: 1 */
    while (c <= n) { /* line 19 slow_hit_count: 84, fast_hit_count: 8 */
      s += (n / c); /* line 20 slow_hit_count: 84, fast_hit_count: 8 */
      s %= (1000000007 - 1); /* line 21 slow_hit_count: 84, fast_hit_count: 8 */
      if (c > (n / p[i])) break; /* line 22 slow_hit_count: 84, fast_hit_count: 8 */
      c *= p[i]; /* line 23 slow_hit_count: 82, fast_hit_count: 7 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    while (s > 0) { /* line 25 slow_hit_count: 35, fast_hit_count: 31 */
      if (s % 2 == 1) ans = (ans * p[i]) % 1000000007; /* line 26 slow_hit_count: 33, fast_hit_count: 30 */
      s /= 2; /* line 27 slow_hit_count: 33, fast_hit_count: 30 */
      p[i] = (p[i] * p[i]) % 1000000007; /* line 28 slow_hit_count: 33, fast_hit_count: 30 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon comparing the line-level hit counts between the fast and slow runs, the following observations can be made:

1. **Prime Factorization Loop (Lines 11-13):**
   - The loop that runs from line 11 (`for (i = 3; i <= sqrt(x); i++)`) has significantly more iterations in the slow input than in the fast input (31621 vs. 10). This loop is meant to find prime factors of `x`.

2. **Nested While Loop (Lines 19-23):**
   - The loop starting at line 19 (`while (c <= n)`) is also more active in the slow input, with 84 iterations versus 8 in the fast input. This loop computes sums related to prime powers of `n`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive potential conditions that lead to a slowdown:

1. **Invariant Regarding the Prime Factorization Loop:**
   - Natural language description: "If the number `x` has a large number of small prime factors or `x` is a perfect power, the prime factorization process becomes expensive."
   - Reasoning: The loop iterating from 3 up to `sqrt(x)` will have more iterations if `x` has many small prime factors or if `x` is a perfect power, causing extensive division operations.

2. **Invariant Regarding the Nested While Loop:**
   - Natural language description: "If the prime factors of `x` produce large powers of `p` such that multiple iterations are needed to compute `s` for large `n`, the computation becomes costly."
   - Reasoning: The while loop that calculates `s += (n / c)` will execute more iterations if `c` can grow significantly before exceeding `n`, which happens when `n` is large and `c` grows slowly due to exponential multiplication (`c *= p[i]`).

3. **Invariant Related to Large `n` and Prime Exponents:**
   - Natural language description: "When `n` is significantly large, the repetitive multiplicative operations involving powers of `p` can lead to performance issues, especially when combined with recursion or nested iterations over prime factors."
   - Reasoning: The large value of `n` contributes to the high iterations in loops calculating contributions of each prime divisor, especially when combined with the presence of high exponents.

### Summary

The analysis and resulting invariants suggest that the slowing conditions are largely related to the properties of the number `x` (in terms of its prime composition) and the size of `n`, influencing the extent and complexity of the loop operations. These invariants help in identifying scenarios where the program might enter a slower execution path, serving as a guide for future performance optimization or for tuning input conditions when testing.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's introduce some definitions that will be needed later.

Let prime(x) be the set of prime divisors of x. For example, prime(140) = \{ 2, 5, 7 \}, prime(169) = \{ 13 \}.

Let g(x, p) be the maximum possible integer p^k where k is an integer such that x is divisible by p^k. For example:

  * g(45, 3) = 9 (45 is divisible by 3^2=9 but not divisible by 3^3=27), 
  * g(63, 7) = 7 (63 is divisible by 7^1=7 but not divisible by 7^2=49). 



Let f(x, y) be the product of g(y, p) for all p in prime(x). For example:

  * f(30, 70) = g(70, 2) ⋅ g(70, 3) ⋅ g(70, 5) = 2^1 ⋅ 3^0 ⋅ 5^1 = 10, 
  * f(525, 63) = g(63, 3) ⋅ g(63, 5) ⋅ g(63, 7) = 3^2 ⋅ 5^0 ⋅ 7^1 = 63. 



You have integers x and n. Calculate f(x, 1) ⋅ f(x, 2) ⋅ … ⋅ f(x, n) mod{(10^{9} + 7)}.

Input

The only line contains integers x and n (2 ≤ x ≤ 10^{9}, 1 ≤ n ≤ 10^{18}) — the numbers used in formula.

Output

Print the answer.

Examples

Input


10 2


Output


2


Input


20190929 1605


Output


363165664


Input


947 987654321987654321


Output


593574252

Note

In the first example, f(10, 1) = g(1, 2) ⋅ g(1, 5) = 1, f(10, 2) = g(2, 2) ⋅ g(2, 5) = 2.

In the second example, actual value of formula is approximately 1.597 ⋅ 10^{171}. Make sure you print the answer modulo (10^{9} + 7).

In the third example, be careful about overflow issue.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants as C++ Checkers

Based on the derived invariants, here are the C++ checkers that will be implemented:

1. **Checker for Prime Factorization Complexity:**
   - This checker is based on the number of small prime factors or if `x` is a perfect power.

```cpp
void check_prime_factorization_invariant(unsigned long long x) {
    int num_small_factors = 0;
    unsigned long long c = x;
    if (c % 2 == 0) {
        num_small_factors++;
        while (c % 2 == 0) c /= 2;
    }
    for (unsigned long long i = 3; i <= sqrt(x); i += 2) {
        if (c % i == 0) {
            num_small_factors++;
            while (c % i == 0) c /= i;
        }
    }
    if (c > 2) num_small_factors++; // Remaining prime factor
    if (num_small_factors > 5) { // Arbitrary threshold for number of small prime factors
        cerr << "Warning: Performance bottleneck due to excessive prime factors in x!" << endl;
        abort();
    }
}
```

2. **Checker for Large `n` and Prime Exponents:**
   - This checker is for detecting large `n` affecting loop execution.

```cpp
void check_large_n_invariant(unsigned long long n) {
    // Arbitrary threshold for n being too large impacting performance
    unsigned long long threshold = 1000000000000000000ULL; 
    if (n >= threshold) {
        cerr << "Warning: Performance bottleneck due to large n!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the C++ Program

Here is the original C++ program with integrated checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_prime_factorization_invariant(unsigned long long x) {
    int num_small_factors = 0;
    unsigned long long c = x;
    if (c % 2 == 0) {
        num_small_factors++;
        while (c % 2 == 0) c /= 2;
    }
    for (unsigned long long i = 3; i <= sqrt(x); i += 2) {
        if (c % i == 0) {
            num_small_factors++;
            while (c % i == 0) c /= i;
        }
    }
    if (c > 2) num_small_factors++; // Remaining prime factor
    if (num_small_factors > 5) { 
        cerr << "Warning: Performance bottleneck due to excessive prime factors in x!" << endl;
        abort();
    }
}

void check_large_n_invariant(unsigned long long n) {
    unsigned long long threshold = 1000000000000000000ULL;
    if (n >= threshold) {
        cerr << "Warning: Performance bottleneck due to large n!" << endl;
        abort();
    }
}

int main() {
    unsigned long long int n, x, i, j, ans = 1, c, s, k;
    unsigned long long int p[1000];
    k = 0;
    cin >> x >> n;

    // Integrate checkers after input
    check_prime_factorization_invariant(x);
    check_large_n_invariant(n);

    c = x;
    if (c % 2 == 0) p[k++] = 2;
    while (c % 2 == 0) c /= 2;
    for (i = 3; i <= sqrt(x); i++) {
        if (c % i == 0) p[k++] = i;
        while (c % i == 0) c /= i;
    }
    if (c > 2) p[k++] = c;
    for (i = 0; i < k; i++) {
        c = p[i];
        s = 0;
        while (c <= n) {
            s += (n / c);
            s %= (1000000007 - 1);
            if (c > (n / p[i])) break;
            c *= p[i];
        }
        while (s > 0) {
            if (s % 2 == 1) ans = (ans * p[i]) % 1000000007;
            s /= 2;
            p[i] = (p[i] * p[i]) % 1000000007;
        }
    }
    cout << ans << endl;
    return 0;
}
```

### Explanation of Integration
- The checkers have been placed immediately after reading input values (`x` and `n`) because they pertain to properties of these input values. This placement avoids introducing overhead inside the performance-critical loops. The checkers will terminate execution with a descriptive message if a potential performance bottleneck is detected based on the criteria described in the earlier phases.

