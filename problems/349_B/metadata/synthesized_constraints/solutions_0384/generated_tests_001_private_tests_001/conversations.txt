system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Igor has fallen in love with Tanya. Now Igor wants to show his feelings and write a number on the fence opposite to Tanya's house. Igor thinks that the larger the number is, the more chance to win Tanya's heart he has. 

Unfortunately, Igor could only get v liters of paint. He did the math and concluded that digit d requires ad liters of paint. Besides, Igor heard that Tanya doesn't like zeroes. That's why Igor won't use them in his number.

Help Igor find the maximum number he can write on the fence.

Input

The first line contains a positive integer v (0 ≤ v ≤ 106). The second line contains nine positive integers a1, a2, ..., a9 (1 ≤ ai ≤ 105).

Output

Print the maximum number Igor can write on the fence. If he has too little paint for any digit (so, he cannot write anything), print -1.

Examples

Input

5
5 4 3 2 1 2 3 4 5


Output

55555


Input

2
9 11 1 12 5 8 9 10 6


Output

33


Input

0
1 1 1 1 1 1 1 1 1


Output

-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int M = 1e6 + 7;
int a[10], dp[10][M];
int call(int pos, int cap) {
  if (cap < 0) return -1 << 29;
  if (pos >= 10) {
    if (cap >= 0) return 0;
    return -1 << 29;
  }
  if (dp[pos][cap] != -1) return dp[pos][cap];
  int p = 0, q = 0;
  p = call(pos + 1, cap);
  q = 1 + call(pos, cap - a[pos]);
  return dp[pos][cap] = max(p, q);
}
void solve() {
  memset(dp, -1, sizeof dp);
  int cap;
  cin >> cap;
  for (int i = 1; i <= 9; i++) cin >> a[i];
  int digLen = call(1, cap);
  if (digLen <= 0) {
    cout << "-1"
         << "\n";
    ;
    return;
  }
  string res = "";
  int rem;
  for (int i = 1; i <= 9; i++) {
    int div = cap / a[i];
    rem = cap % a[i];
    int cnt = 0;
    int d = -1;
    for (int j = 1; j <= 9; j++) {
      if (rem >= a[j]) {
        cnt = 1;
        d = j;
        rem -= a[j];
        break;
      }
    }
    if ((div + cnt) == digLen) {
      for (int j = 1; j <= div; j++) res += i + '0';
      if (cnt) res += d + '0';
      break;
    }
  }
  for (int i = 0; i < digLen; i++) {
    int val = res[i] - '0';
    rem += a[val];
    for (int j = 9; j >= 1; j--) {
      if (rem >= a[j]) {
        res[i] = j + '0';
        rem -= a[j];
        break;
      }
    }
  }
  cout << res << "\n";
  ;
}
int main() {
  ios_base::sync_with_stdio(false), cin.tie(0);
  int t = 1;
  while (t--) {
    solve();
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

898207
99745 46416 99748 99752 99760 99776 99808 99872 100000


(G.2) Fast Input

898207
99745 99746 99748 99752 99760 99776 99808 99872 100000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int M = 1e6 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int a[10], dp[10][M]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int call(int pos, int cap) { /* line 5 slow_hit_count: 100819, fast_hit_count: 22465 */
  if (cap < 0) return -1 << 29; /* line 6 slow_hit_count: 100819, fast_hit_count: 22465 */
  if (pos >= 10) { /* line 7 slow_hit_count: 82199, fast_hit_count: 19229 */
    if (cap >= 0) return 0; /* line 8 slow_hit_count: 21132, fast_hit_count: 4563 */
    return -1 << 29; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[pos][cap] != -1) return dp[pos][cap]; /* line 11 slow_hit_count: 61067, fast_hit_count: 14666 */
  int p = 0, q = 0; /* line 12 slow_hit_count: 50409, fast_hit_count: 11232 */
  p = call(pos + 1, cap); /* line 13 slow_hit_count: 50409, fast_hit_count: 11232 */
  q = 1 + call(pos, cap - a[pos]); /* line 14 slow_hit_count: 50409, fast_hit_count: 11232 */
  return dp[pos][cap] = max(p, q); /* line 15 slow_hit_count: 50409, fast_hit_count: 11232 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, -1, sizeof dp); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  int cap; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> cap; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 9; i++) cin >> a[i]; /* line 21 slow_hit_count: 10, fast_hit_count: 10 */
  int digLen = call(1, cap); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  if (digLen <= 0) { /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "-1" /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
         << "\n"; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    ; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  string res = ""; /* line 29 slow_hit_count: 2, fast_hit_count: 2 */
  int rem; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= 9; i++) { /* line 31 slow_hit_count: 2, fast_hit_count: 1 */
    int div = cap / a[i]; /* line 32 slow_hit_count: 2, fast_hit_count: 1 */
    rem = cap % a[i]; /* line 33 slow_hit_count: 2, fast_hit_count: 1 */
    int cnt = 0; /* line 34 slow_hit_count: 2, fast_hit_count: 1 */
    int d = -1; /* line 35 slow_hit_count: 2, fast_hit_count: 1 */
    for (int j = 1; j <= 9; j++) { /* line 36 slow_hit_count: 20, fast_hit_count: 10 */
      if (rem >= a[j]) { /* line 37 slow_hit_count: 18, fast_hit_count: 9 */
        cnt = 1; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
        d = j; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
        rem -= a[j]; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    if ((div + cnt) == digLen) { /* line 44 slow_hit_count: 2, fast_hit_count: 1 */
      for (int j = 1; j <= div; j++) res += i + '0'; /* line 45 slow_hit_count: 20, fast_hit_count: 10 */
      if (cnt) res += d + '0'; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
      break; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < digLen; i++) { /* line 50 slow_hit_count: 20, fast_hit_count: 10 */
    int val = res[i] - '0'; /* line 51 slow_hit_count: 19, fast_hit_count: 9 */
    rem += a[val]; /* line 52 slow_hit_count: 19, fast_hit_count: 9 */
    for (int j = 9; j >= 1; j--) { /* line 53 slow_hit_count: 152, fast_hit_count: 45 */
      if (rem >= a[j]) { /* line 54 slow_hit_count: 152, fast_hit_count: 45 */
        res[i] = j + '0'; /* line 55 slow_hit_count: 19, fast_hit_count: 9 */
        rem -= a[j]; /* line 56 slow_hit_count: 19, fast_hit_count: 9 */
        break; /* line 57 slow_hit_count: 19, fast_hit_count: 9 */
      } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  cout << res << "\n"; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false), cin.tie(0); /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  int t = 1; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 67 slow_hit_count: 2, fast_hit_count: 2 */
    solve(); /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 71 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison**:
   - The `call` function at line 5 is significantly more hit in the slow input (100,819 vs 22,465).
   - Conditional checks at lines 6, 7, and 8 show that the recursion depth or the number of recursive calls is much higher in the slow input.
   - The `dp` array check at line 11 also shows more hits in the slow input, indicating potentially many redundant calculations being cached.

2. **Significant Lines and Function Calls**:
   - **Recursive Function `call`**: The recursive function `call` is crucial as it affects the computational complexity with its depth and branching. It attempts to make a decision at each position to either skip the current digit or include it by decrementing the capacity.
   - **Dynamic Programming Array `dp`**: The hit counts suggest that memoization might not be used effectively or the problem is such that different calls are still needed repeatedly.

3. **Interaction with Data Structures**:
   - The interactions with the `dp` array are not improving performance as expected, suggesting that the pattern of calls does not optimally leverage memoization.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Recursive Depth and Branching Invariant**:
   - **Invariant Description**: When the recursive depth or number of recursive calls becomes large due to multiple viable choices for each digit that fits within the capacity, the execution time increases significantly.
   - **Natural Language Statement**: "If a high number of potential combinations or positions need to be explored recursively due to close prices of paints for digits, the function may incur excessive recursive calls, leading to slow performance."

2. **Memoization Utilization Invariant**:
   - **Invariant Description**: If the dynamic programming table (`dp`) is not effectively utilized due to slight variations in capacity remaining after attempting many digits, the function calls might become redundant and performance will degrade.
   - **Natural Language Statement**: "When many similar recursion states are explored due to slight variations in remaining capacity, memoization may not effectively reduce redundant calculations, potentially leading to slow performance."

3. **Cost-Effective Digit Selection Invariant**:
   - **Invariant Description**: When the cost of painting digits is close to each other, selecting digits becomes computationally expensive as more recursive checks must be made for every small capacity increment.
   - **Natural Language Statement**: "If the costs of painting different digits are closely matched, more combinations and recursive calls are explored, increasing the likelihood of executing slow paths and hindering performance."

By focusing on these invariants, we can anticipate the conditions under which the program may slow down and help guide performance improvement efforts, such as optimizing the recursive logic or better utilizing memoization. These statements should provide insight into potential future slow scenarios beyond the provided slow and fast input cases.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Igor has fallen in love with Tanya. Now Igor wants to show his feelings and write a number on the fence opposite to Tanya's house. Igor thinks that the larger the number is, the more chance to win Tanya's heart he has. 

Unfortunately, Igor could only get v liters of paint. He did the math and concluded that digit d requires ad liters of paint. Besides, Igor heard that Tanya doesn't like zeroes. That's why Igor won't use them in his number.

Help Igor find the maximum number he can write on the fence.

Input

The first line contains a positive integer v (0 ≤ v ≤ 106). The second line contains nine positive integers a1, a2, ..., a9 (1 ≤ ai ≤ 105).

Output

Print the maximum number Igor can write on the fence. If he has too little paint for any digit (so, he cannot write anything), print -1.

Examples

Input

5
5 4 3 2 1 2 3 4 5


Output

55555


Input

2
9 11 1 12 5 8 9 10 6


Output

33


Input

0
1 1 1 1 1 1 1 1 1


Output

-1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ code snippets implementing the performance-characterizing invariants derived in Phase 2. Each snippet is structured to check the respective condition and provide warnings if the conditions are met, which indicate potential performance bottlenecks.

#### Invariant 1: Recursive Depth and Branching Invariant
```cpp
void check_recursive_depth_branching(int recursiveCalls, int capacity, int currentPosition) {
    if (recursiveCalls > 100000 && currentPosition < 9) { // Arbitrary large threshold
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive calls!" << endl;
        abort();
    }
}
```

#### Invariant 2: Memoization Utilization Invariant
```cpp
void check_memoization_usage(int remainingCapacity, int lastDigitPaintCost) {
    if (remainingCapacity < lastDigitPaintCost / 10) { // Arbitrary threshold to check small variations
        cerr << "Warning: Performance bottleneck condition triggered - inefficient memoization usage!" << endl;
        abort();
    }
}
```

#### Invariant 3: Cost-Effective Digit Selection Invariant
```cpp
void check_digit_selection(const vector<int>& paintCosts) {
    int closeCostCount = 0;
    for (int i = 1; i <= 9; ++i) {
        for (int j = i + 1; j <= 9; ++j) {
            if (abs(paintCosts[i] - paintCosts[j]) < 10) { // Arbitrary close cost threshold
                closeCostCount++;
                if (closeCostCount > 5) { // Arbitrary threshold
                    cerr << "Warning: Performance bottleneck condition triggered - closely matched digit costs!" << endl;
                    abort();
                }
            }
        }
    }
}
```

### Phase 4: Integrate Checks into the Original C++ Program

Below is the instrumented version of the original program with the performance-checking logic included. The checks are inserted at effective points in the control flow to avoid unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int M = 1e6 + 7;
int a[10], dp[10][M];

void check_recursive_depth_branching(int recursiveCalls, int capacity, int currentPosition) {
    if (recursiveCalls > 100000 && currentPosition < 9) { // Arbitrary large threshold
        cerr << "Warning: Performance bottleneck condition triggered - excessive recursive calls!" << endl;
        abort();
    }
}

void check_memoization_usage(int remainingCapacity, int lastDigitPaintCost) {
    if (remainingCapacity < lastDigitPaintCost / 10) { // Arbitrary threshold to check small variations
        cerr << "Warning: Performance bottleneck condition triggered - inefficient memoization usage!" << endl;
        abort();
    }
}

void check_digit_selection(const int paintCosts[]) {
    int closeCostCount = 0;
    for (int i = 1; i <= 9; ++i) {
        for (int j = i + 1; j <= 9; ++j) {
            if (abs(paintCosts[i] - paintCosts[j]) < 10) { // Arbitrary close cost threshold
                closeCostCount++;
                if (closeCostCount > 5) { // Arbitrary threshold
                    cerr << "Warning: Performance bottleneck condition triggered - closely matched digit costs!" << endl;
                    abort();
                }
            }
        }
    }
}

int call(int pos, int cap, int& recursiveCalls) {
    recursiveCalls++;
    if (cap < 0) return -1 << 29;
    if (pos >= 10) {
        if (cap >= 0) return 0;
        return -1 << 29;
    }
    if (dp[pos][cap] != -1) return dp[pos][cap];
    int p = 0, q = 0;
    p = call(pos + 1, cap, recursiveCalls);
    q = 1 + call(pos, cap - a[pos], recursiveCalls);
    return dp[pos][cap] = max(p, q);
}

void solve() {
    memset(dp, -1, sizeof dp);
    int cap, recursiveCalls = 0;
    cin >> cap;
    for (int i = 1; i <= 9; i++) cin >> a[i];

    // Check digit selection for closely matched costs
    check_digit_selection(a);

    int digLen = call(1, cap, recursiveCalls);

    // Check recursive depth and branching
    check_recursive_depth_branching(recursiveCalls, cap, 1);

    if (digLen <= 0) {
        cout << "-1"
             << "\n";
        return;
    }
    string res = "";
    int rem;
    for (int i = 1; i <= 9; i++) {
        int div = cap / a[i];
        rem = cap % a[i];
        int cnt = 0;
        int d = -1;
        for (int j = 1; j <= 9; j++) {
            if (rem >= a[j]) {
                cnt = 1;
                d = j;
                rem -= a[j];
                break;
            }
        }
        if ((div + cnt) == digLen) {
            for (int j = 1; j <= div; j++) res += i + '0';
            if (cnt) res += d + '0';
            break;
        }
    }
    for (int i = 0; i < digLen; i++) {
        int val = res[i] - '0';
        rem += a[val];
        for (int j = 9; j >= 1; j--) {
            if (rem >= a[j]) {
                res[i] = j + '0';
                rem -= a[j];
                break;
            }
        }

        // Check inefficient memoization usage
        check_memoization_usage(rem, a[val]);
    }
    cout << res << "\n";
}

int main() {
    ios_base::sync_with_stdio(false), cin.tie(0);
    int t = 1;
    while (t--) {
        solve();
    }
    return 0;
}
```

### Explanation of Integrations

1. **Recursive Depth and Branching Check**: 
   - Implemented in the `call` function, checking after recursive calls to ensure excessive depth or branching isn't occurring.

2. **Memoization Utilization Check**:
   - Placed in the final loop where we refine the result string, checking if the remaining paint causes inefficient memoization states.

3. **Cost-Effective Digit Selection Check**:
   - Implemented before the main processing loop, checking for closely matched digit paint costs to avoid performance issues during digit selection. 

These checks ensure that the program can warn users about potential performance issues based on the identified invariants, helping developers or testers detect and rectify bottlenecks early in the execution.

