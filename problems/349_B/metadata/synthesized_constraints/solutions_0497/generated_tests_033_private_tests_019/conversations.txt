system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Igor has fallen in love with Tanya. Now Igor wants to show his feelings and write a number on the fence opposite to Tanya's house. Igor thinks that the larger the number is, the more chance to win Tanya's heart he has. 

Unfortunately, Igor could only get v liters of paint. He did the math and concluded that digit d requires ad liters of paint. Besides, Igor heard that Tanya doesn't like zeroes. That's why Igor won't use them in his number.

Help Igor find the maximum number he can write on the fence.

Input

The first line contains a positive integer v (0 ≤ v ≤ 106). The second line contains nine positive integers a1, a2, ..., a9 (1 ≤ ai ≤ 105).

Output

Print the maximum number Igor can write on the fence. If he has too little paint for any digit (so, he cannot write anything), print -1.

Examples

Input

5
5 4 3 2 1 2 3 4 5


Output

55555


Input

2
9 11 1 12 5 8 9 10 6


Output

33


Input

0
1 1 1 1 1 1 1 1 1


Output

-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int kn;
int main() {
  int k;
  cin >> k;
  int n = 9;
  kn = k;
  int a[10];
  int minm = INT_MAX, ind = -1;
  for (int i = 1; i <= 9; i++) {
    int x;
    cin >> x;
    a[i] = x;
    if (minm > a[i]) {
      minm = a[i];
      ind = i;
    }
  }
  int len = k / minm;
  if (len == 0) {
    cout << "-1\n";
  } else {
    string ans = "";
    k = k - (len)*minm;
    for (int i = 0; i < len; i++) {
      ans += to_string(ind);
    }
    int i = 9, j = 0;
    while (j < ans.length() && i > 0) {
      if (k + a[ans[j] - '0'] >= a[i]) {
        string f = to_string(i);
        k = k + a[ans[j] - '0'] - a[i];
        ans[j] = f[0];
        j++;
      } else
        i--;
    }
    cout << ans << "\n";
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

21069
31 7 36 30 28 43 21 25 32


(G.2) Fast Input

153
85 91 28 53 29 30 92 36 89


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int kn; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int k; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> k; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int n = 9; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  kn = k; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int a[10]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  int minm = INT_MAX, ind = -1; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 9; i++) { /* line 11 slow_hit_count: 10, fast_hit_count: 10 */
    int x; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x; /* line 13 slow_hit_count: 9, fast_hit_count: 9 */
    a[i] = x; /* line 14 slow_hit_count: 9, fast_hit_count: 9 */
    if (minm > a[i]) { /* line 15 slow_hit_count: 9, fast_hit_count: 9 */
      minm = a[i]; /* line 16 slow_hit_count: 2, fast_hit_count: 2 */
      ind = i; /* line 17 slow_hit_count: 2, fast_hit_count: 2 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  int len = k / minm; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  if (len == 0) { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "-1\n"; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    string ans = ""; /* line 24 slow_hit_count: 2, fast_hit_count: 2 */
    k = k - (len)*minm; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i < len; i++) { /* line 26 slow_hit_count: 3010, fast_hit_count: 6 */
      ans += to_string(ind); /* line 27 slow_hit_count: 3009, fast_hit_count: 5 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    int i = 9, j = 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
    while (j < ans.length() && i > 0) { /* line 30 slow_hit_count: 3017, fast_hit_count: 12 */
      if (k + a[ans[j] - '0'] >= a[i]) { /* line 31 slow_hit_count: 3016, fast_hit_count: 11 */
        string f = to_string(i); /* line 32 slow_hit_count: 3009, fast_hit_count: 5 */
        k = k + a[ans[j] - '0'] - a[i]; /* line 33 slow_hit_count: 3009, fast_hit_count: 5 */
        ans[j] = f[0]; /* line 34 slow_hit_count: 3009, fast_hit_count: 5 */
        j++; /* line 35 slow_hit_count: 3009, fast_hit_count: 5 */
      } else /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
        i--; /* line 37 slow_hit_count: 7, fast_hit_count: 6 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans << "\n"; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 41 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit count information, here are the observations:

1. **Loop Iterations**:
   - The loop on line 26 (`for (int i = 0; i < len; i++)`) runs significantly more times for the slow input (3010 times) compared to the fast input (6 times). This suggests that `len` is much larger for the slow input.
   - The while loop on line 30 (`while (j < ans.length() && i > 0)`) is also executed many more times for the slow input (3017 times) compared to the fast input (12 times).

2. **Conditional Checks**:
   - The condition on line 31 (`if (k + a[ans[j] - '0'] >= a[i])`) is evaluated very frequently for the slow input (3016 times), indicating that this check is a critical point in the program's execution speed.

3. **Expensive Operations**:
   - The creation of strings and modification of the `ans` string in lines 27, 32, 34, and 35 are executed many times for the slow input, which can be computationally expensive due to the repeated allocation and deallocation of string resources.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, here are some natural language invariants that describe conditions under which the program is likely to slow down:

1. **Invariant: Large Number Construction**  
   "If the minimum paint required for any digit is very small, allowing the construction of a very long string of that digit, the program may experience a slowdown due to the high number of iterations and string operations."

2. **Invariant: Frequent Conditional Checks**  
   "If the number of digits initially decided (based on the minimum paint per digit) results in a large number of conditional checks to potentially replace each digit with a larger one, the program may slow down significantly."

3. **Invariant: String Operations in Loops**  
   "When the length of the string representing the number becomes large, the repeated construction and modification of the string in nested loops contribute to the slowdown."

4. **Invariant: High Loop Iterations**  
   "The program may slow down when the ratio of total paint available to the smallest paint needed for a digit is large, resulting in a high number of iterations to construct the number and attempt digit replacements."

These invariants suggest general patterns in input and execution that lead to slower performance, without relying on specific numeric values from the inputs. They focus on the relationships between paint requirements and the operations performed by the program, adhering to the constraints provided (e.g., `v <= 106`).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Igor has fallen in love with Tanya. Now Igor wants to show his feelings and write a number on the fence opposite to Tanya's house. Igor thinks that the larger the number is, the more chance to win Tanya's heart he has. 

Unfortunately, Igor could only get v liters of paint. He did the math and concluded that digit d requires ad liters of paint. Besides, Igor heard that Tanya doesn't like zeroes. That's why Igor won't use them in his number.

Help Igor find the maximum number he can write on the fence.

Input

The first line contains a positive integer v (0 ≤ v ≤ 106). The second line contains nine positive integers a1, a2, ..., a9 (1 ≤ ai ≤ 105).

Output

Print the maximum number Igor can write on the fence. If he has too little paint for any digit (so, he cannot write anything), print -1.

Examples

Input

5
5 4 3 2 1 2 3 4 5


Output

55555


Input

2
9 11 1 12 5 8 9 10 6


Output

33


Input

0
1 1 1 1 1 1 1 1 1


Output

-1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Here are the C++ code snippets implementing the performance-characterizing invariants derived from Phase 2:

1. **Invariant: Large Number Construction**

```cpp
void check_large_number_construction(int len) {
    if (len > 1000) { // Assuming a significant threshold for len
        cerr << "Warning: Performance bottleneck condition triggered - large number construction!" << endl;
        abort();
    }
}
```

2. **Invariant: Frequent Conditional Checks**

```cpp
void check_frequent_conditional_checks(int len, int max_iter) {
    if (len * max_iter > 2000) { // Assuming a threshold for the product of len and possible iterations
        cerr << "Warning: Performance bottleneck condition triggered - frequent conditional checks!" << endl;
        abort();
    }
}
```

3. **Invariant: String Operations in Loops**

```cpp
void check_string_operations_in_loops(int len) {
    if (len > 1000) { // Similar threshold as large number construction due to similar reasons
        cerr << "Warning: Performance bottleneck condition triggered - extensive string operations!" << endl;
        abort();
    }
}
```

4. **Invariant: High Loop Iterations**

```cpp
void check_high_loop_iterations(int len) {
    if (len > 1000) { // High number of iterations 
        cerr << "Warning: Performance bottleneck condition triggered - high loop iterations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Here is the instrumented C++ code with the integrated performance checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance bottlenecks
void check_large_number_construction(int len) {
    if (len > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - large number construction!" << endl;
        abort();
    }
}

void check_frequent_conditional_checks(int len, int max_iter) {
    if (len * max_iter > 2000) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent conditional checks!" << endl;
        abort();
    }
}

void check_string_operations_in_loops(int len) {
    if (len > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - extensive string operations!" << endl;
        abort();
    }
}

void check_high_loop_iterations(int len) {
    if (len > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - high loop iterations!" << endl;
        abort();
    }
}

int main() {
    int k;
    cin >> k;
    int n = 9;
    int a[10];
    int minm = INT_MAX, ind = -1;
    for (int i = 1; i <= 9; i++) {
        int x;
        cin >> x;
        a[i] = x;
        if (minm > a[i]) {
            minm = a[i];
            ind = i;
        }
    }
    int len = k / minm;
    check_large_number_construction(len); // Check for large number construction
    check_high_loop_iterations(len);      // Check for high loop iterations

    if (len == 0) {
        cout << "-1\n";
    } else {
        string ans = "";
        k = k - (len)*minm;
        for (int i = 0; i < len; i++) {
            ans += to_string(ind);
            check_string_operations_in_loops(len); // Check for extensive string operations
        }
        int i = 9, j = 0;
        int max_iter = 0;
        while (j < ans.length() && i > 0) {
            max_iter++;
            if (k + a[ans[j] - '0'] >= a[i]) {
                string f = to_string(i);
                k = k + a[ans[j] - '0'] - a[i];
                ans[j] = f[0];
                j++;
            } else
                i--;
        }
        check_frequent_conditional_checks(len, max_iter); // Check for frequent conditional checks
        cout << ans << "\n";
    }
}
```

**Explanation of Integration:**

- **`check_large_number_construction(len)`**: Placed after computing the length `len` based on available paint, checking if the initial construction is excessive.
- **`check_high_loop_iterations(len)`**: Added after computing `len`, ensuring the main loop for number construction does not over-iterate.
- **`check_string_operations_in_loops(len)`**: Placed within the loop that builds the initial string `ans`, checking if string operations are excessive.
- **`check_frequent_conditional_checks(len, max_iter)`**: Added after the conditional manipulation loop to ensure it does not iterate excessively with combined length and conditions.

