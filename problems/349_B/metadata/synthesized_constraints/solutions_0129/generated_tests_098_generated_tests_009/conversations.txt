system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Igor has fallen in love with Tanya. Now Igor wants to show his feelings and write a number on the fence opposite to Tanya's house. Igor thinks that the larger the number is, the more chance to win Tanya's heart he has. 

Unfortunately, Igor could only get v liters of paint. He did the math and concluded that digit d requires ad liters of paint. Besides, Igor heard that Tanya doesn't like zeroes. That's why Igor won't use them in his number.

Help Igor find the maximum number he can write on the fence.

Input

The first line contains a positive integer v (0 ≤ v ≤ 106). The second line contains nine positive integers a1, a2, ..., a9 (1 ≤ ai ≤ 105).

Output

Print the maximum number Igor can write on the fence. If he has too little paint for any digit (so, he cannot write anything), print -1.

Examples

Input

5
5 4 3 2 1 2 3 4 5


Output

55555


Input

2
9 11 1 12 5 8 9 10 6


Output

33


Input

0
1 1 1 1 1 1 1 1 1


Output

-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
vector<int> v;
int dp[1000002][9];
int best[1000002][9][2];
int cal(int l, int nd) {
  if (dp[l][nd] != -1) return dp[l][nd];
  int i, mx, ind, il, in, nl;
  if (l < v[nd]) {
    dp[l][nd] = 0;
    return dp[l][nd];
  }
  nl = l - v[nd];
  mx = 1 + cal(nl, 8);
  il = nl;
  in = 8;
  for (i = 7; i >= 0; i--) {
    if (mx < 1 + cal(nl, i)) {
      mx = 1 + cal(nl, i);
      il = nl;
      in = i;
    }
  }
  best[l][nd][0] = il;
  best[l][nd][1] = in;
  dp[l][nd] = mx;
  return dp[l][nd];
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int i, tem, m, mx, il, in, j;
  cin >> m;
  for (i = 0; i < 9; i++) {
    cin >> tem;
    v.emplace_back(tem);
  }
  for (i = 0; i <= m; i++) {
    for (j = 0; j < 9; j++) {
      dp[i][j] = -1;
      best[i][j][0] = -1;
      best[i][j][1] = -1;
    }
  }
  mx = cal(m, 8);
  il = m;
  in = 8;
  for (i = 7; i >= 0; i--) {
    if (mx < cal(m, i)) {
      mx = cal(m, i);
      il = m;
      in = i;
    }
  }
  if (mx == 0)
    cout << -1;
  else {
    for (i = 0; i < mx; i++) {
      cout << in + 1;
      int tl = il;
      int tn = in;
      il = best[tl][tn][0];
      in = best[tl][tn][1];
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

21069
31 7 36 30 28 43 21 26 32


(G.2) Fast Input

4822
35 36 21 13 32 36 14 16 20


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> v; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int dp[1000002][9]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int best[1000002][9][2]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int cal(int l, int nd) { /* line 6 slow_hit_count: 2188050, fast_hit_count: 409981 */
  if (dp[l][nd] != -1) return dp[l][nd]; /* line 7 slow_hit_count: 2188050, fast_hit_count: 409981 */
  int i, mx, ind, il, in, nl; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  if (l < v[nd]) { /* line 9 slow_hit_count: 189378, fast_hit_count: 43209 */
    dp[l][nd] = 0; /* line 10 slow_hit_count: 254, fast_hit_count: 223 */
    return dp[l][nd]; /* line 11 slow_hit_count: 254, fast_hit_count: 223 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  nl = l - v[nd]; /* line 13 slow_hit_count: 189124, fast_hit_count: 42986 */
  mx = 1 + cal(nl, 8); /* line 14 slow_hit_count: 189124, fast_hit_count: 42986 */
  il = nl; /* line 15 slow_hit_count: 189124, fast_hit_count: 42986 */
  in = 8; /* line 16 slow_hit_count: 189124, fast_hit_count: 42986 */
  for (i = 7; i >= 0; i--) { /* line 17 slow_hit_count: 1702116, fast_hit_count: 386874 */
    if (mx < 1 + cal(nl, i)) { /* line 18 slow_hit_count: 1512992, fast_hit_count: 343888 */
      mx = 1 + cal(nl, i); /* line 19 slow_hit_count: 485923, fast_hit_count: 23098 */
      il = nl; /* line 20 slow_hit_count: 485923, fast_hit_count: 23098 */
      in = i; /* line 21 slow_hit_count: 485923, fast_hit_count: 23098 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  best[l][nd][0] = il; /* line 24 slow_hit_count: 189124, fast_hit_count: 42986 */
  best[l][nd][1] = in; /* line 25 slow_hit_count: 189124, fast_hit_count: 42986 */
  dp[l][nd] = mx; /* line 26 slow_hit_count: 189124, fast_hit_count: 42986 */
  return dp[l][nd]; /* line 27 slow_hit_count: 189124, fast_hit_count: 42986 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  int i, tem, m, mx, il, in, j; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> m; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < 9; i++) { /* line 34 slow_hit_count: 10, fast_hit_count: 10 */
    cin >> tem; /* line 35 slow_hit_count: 9, fast_hit_count: 9 */
    v.emplace_back(tem); /* line 36 slow_hit_count: 9, fast_hit_count: 9 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i <= m; i++) { /* line 38 slow_hit_count: 21071, fast_hit_count: 4824 */
    for (j = 0; j < 9; j++) { /* line 39 slow_hit_count: 210700, fast_hit_count: 48230 */
      dp[i][j] = -1; /* line 40 slow_hit_count: 189630, fast_hit_count: 43407 */
      best[i][j][0] = -1; /* line 41 slow_hit_count: 189630, fast_hit_count: 43407 */
      best[i][j][1] = -1; /* line 42 slow_hit_count: 189630, fast_hit_count: 43407 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  mx = cal(m, 8); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  il = m; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  in = 8; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 7; i >= 0; i--) { /* line 48 slow_hit_count: 9, fast_hit_count: 9 */
    if (mx < cal(m, i)) { /* line 49 slow_hit_count: 8, fast_hit_count: 8 */
      mx = cal(m, i); /* line 50 slow_hit_count: 2, fast_hit_count: 0 */
      il = m; /* line 51 slow_hit_count: 2, fast_hit_count: 0 */
      in = i; /* line 52 slow_hit_count: 2, fast_hit_count: 0 */
    } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  if (mx == 0) /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
    cout << -1; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  else { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    for (i = 0; i < mx; i++) { /* line 58 slow_hit_count: 3010, fast_hit_count: 371 */
      cout << in + 1; /* line 59 slow_hit_count: 3009, fast_hit_count: 370 */
      int tl = il; /* line 60 slow_hit_count: 3009, fast_hit_count: 370 */
      int tn = in; /* line 61 slow_hit_count: 3009, fast_hit_count: 370 */
      il = best[tl][tn][0]; /* line 62 slow_hit_count: 3009, fast_hit_count: 370 */
      in = best[tl][tn][1]; /* line 63 slow_hit_count: 3009, fast_hit_count: 370 */
    } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 67 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - The function `cal` (line 6) is heavily invoked, with 2,188,050 calls for the slow input versus 409,981 calls for the fast input. This indicates high recursion or repetitive computation.
   - Lines 17-21, involving a loop and conditional logic inside `cal`, also show a considerable discrepancy in hit counts between slow and fast inputs (e.g., line 18 has 1,512,992 hits for slow input compared to 343,888 for fast input).
   - The initialization of `dp` and `best` arrays (lines 38-42) and their high hit counts suggest a large memory usage due to the extensive initialization process, especially given `m` (the amount of paint).

2. **Inference on Data Structures and Algorithms:**
   - The recursive calculation in `cal` is a major contributor to the slowdown. The function is repeatedly called with subproblems, leading to excessive computations.
   - The loop in `cal` (lines 17-21) evaluates potential digits to use, which significantly impacts performance due to repeated recursive calls.
   - The dynamic programming approach involves recalculating `cal(nl, i)` multiple times, suggesting a potential inefficiency in how subproblem solutions are reused.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Performance Invariants:**

   - **Invariant 1:** "If the amount of paint `v` is high and each digit requires a distinct amount of paint, the recursive calculations become extensive, slowing down the program."
     - This invariant highlights how an increased number of recursive calls and extensive branching decisions (due to varying paint requirements) can degrade performance.

   - **Invariant 2:** "When the paint cost for digits varies significantly, the program's tendency to evaluate many combinations can lead to excessive function calls, especially if more economical digits are available earlier."
     - This reflects how the algorithm explores many branches to find optimal solutions, which can be time-consuming when the cost disparity between digits is substantial.

   - **Invariant 3:** "The program slows when a substantial number of recursive depth levels are explored before a solution is established, which can happen when `v` is large enough to allow extensive calculations."
     - This invariant emphasizes the impact of high recursion depth coupled with numerous branching possibilities.

2. **Avoidance of Numeric Values and Use of Thresholds:**
   - The statements abstract from specific input values and instead focus on general conditions such as the amount of paint, varying costs, and recursion depth to determine slow execution paths.
   - The constraints of `v <= 10^6` and `1 ≤ ai ≤ 10^5` suggest that the slow path is triggered not merely by large `v` but by how digit costs interact with `v` to maximize recursion and branching.

By addressing these invariants in a fuzzing utility, potential slow execution paths can be detected by hitting these conditions, which will help in optimizing the program further.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Igor has fallen in love with Tanya. Now Igor wants to show his feelings and write a number on the fence opposite to Tanya's house. Igor thinks that the larger the number is, the more chance to win Tanya's heart he has. 

Unfortunately, Igor could only get v liters of paint. He did the math and concluded that digit d requires ad liters of paint. Besides, Igor heard that Tanya doesn't like zeroes. That's why Igor won't use them in his number.

Help Igor find the maximum number he can write on the fence.

Input

The first line contains a positive integer v (0 ≤ v ≤ 106). The second line contains nine positive integers a1, a2, ..., a9 (1 ≤ ai ≤ 105).

Output

Print the maximum number Igor can write on the fence. If he has too little paint for any digit (so, he cannot write anything), print -1.

Examples

Input

5
5 4 3 2 1 2 3 4 5


Output

55555


Input

2
9 11 1 12 5 8 9 10 6


Output

33


Input

0
1 1 1 1 1 1 1 1 1


Output

-1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived, we can implement checker functions in C++ to detect potential slow paths:

#### Invariant 1: High Paint and Distinct Digits

This invariant suggests that if the amount of paint `v` is high, the recursive calculations can become extensive due to variations in `ai`. We can implement a check that triggers if `v` is above a certain threshold, indicating potential extensive recursive calculations.

```cpp
void check_high_paint_invariant(int v) {
    if (v > 100000) { // Arbitrary threshold indicating high paint
        cerr << "Warning: Performance bottleneck condition triggered due to high paint." << endl;
        abort();
    }
}
```

#### Invariant 2: Significant Variation in Paint Costs

This invariant suggests that if there is a substantial variation in the paint costs for digits, many combinations can be evaluated, causing excessive function calls. We can check for significant differences in paint costs (`ai`).

```cpp
void check_variation_invariant(const vector<int>& paintCosts) {
    int maxCost = *max_element(paintCosts.begin(), paintCosts.end());
    int minCost = *min_element(paintCosts.begin(), paintCosts.end());
    if ((maxCost - minCost) > 10000) { // Arbitrary threshold for variation
        cerr << "Warning: Performance bottleneck condition triggered due to high variation in paint costs." << endl;
        abort();
    }
}
```

#### Invariant 3: High Recursion Depth due to Large Paint

This invariant suggests that when a large number of recursive depth levels are explored, it indicates a potential slowdown. We can add a check to estimate the recursion depth.

```cpp
void check_recursion_depth_invariant(int depth) {
    if (depth > 1000) { // Arbitrary threshold for recursion depth
        cerr << "Warning: Performance bottleneck condition triggered due to high recursion depth." << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Here's how these checkers can be integrated into the original C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;

vector<int> v;
int dp[1000002][9];
int best[1000002][9][2];

// Checker functions
void check_high_paint_invariant(int v) {
    if (v > 100000) { 
        cerr << "Warning: Performance bottleneck condition triggered due to high paint." << endl;
        abort();
    }
}

void check_variation_invariant(const vector<int>& paintCosts) {
    int maxCost = *max_element(paintCosts.begin(), paintCosts.end());
    int minCost = *min_element(paintCosts.begin(), paintCosts.end());
    if ((maxCost - minCost) > 10000) { 
        cerr << "Warning: Performance bottleneck condition triggered due to high variation in paint costs." << endl;
        abort();
    }
}

int cal(int l, int nd) {
    // Check estimated recursion depth invariant
    check_recursion_depth_invariant(l);
    
    if (dp[l][nd] != -1) return dp[l][nd];
    int i, mx, ind, il, in, nl;
    if (l < v[nd]) {
        dp[l][nd] = 0;
        return dp[l][nd];
    }
    nl = l - v[nd];
    mx = 1 + cal(nl, 8);
    il = nl;
    in = 8;
    for (i = 7; i >= 0; i--) {
        if (mx < 1 + cal(nl, i)) {
            mx = 1 + cal(nl, i);
            il = nl;
            in = i;
        }
    }
    best[l][nd][0] = il;
    best[l][nd][1] = in;
    dp[l][nd] = mx;
    return dp[l][nd];
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int i, tem, m, mx, il, in, j;
    cin >> m;
    
    // Check high paint invariant
    check_high_paint_invariant(m);
    
    for (i = 0; i < 9; i++) {
        cin >> tem;
        v.emplace_back(tem);
    }
    
    // Check variation in paint costs invariant
    check_variation_invariant(v);
    
    for (i = 0; i <= m; i++) {
        for (j = 0; j < 9; j++) {
            dp[i][j] = -1;
            best[i][j][0] = -1;
            best[i][j][1] = -1;
        }
    }
    mx = cal(m, 8);
    il = m;
    in = 8;
    for (i = 7; i >= 0; i--) {
        if (mx < cal(m, i)) {
            mx = cal(m, i);
            il = m;
            in = i;
        }
    }
    if (mx == 0)
        cout << -1;
    else {
        for (i = 0; i < mx; i++) {
            cout << in + 1;
            int tl = il;
            int tn = in;
            il = best[tl][tn][0];
            in = best[tl][tn][1];
        }
    }
    return 0;
}
```

### Explanation

- **High Paint Check:** This check is placed after reading `m` to ensure it doesn't exceed the threshold that could trigger extensive recursion.
- **Variation Check:** This is done after reading `ai` values to check for significant cost variation.
- **Recursion Depth Check:** This is added in the `cal` function to abort if the recursion depth becomes excessively high.

These checks help detect early conditions that could lead to performance bottlenecks without introducing significant overhead into tight loops.

