system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Igor has fallen in love with Tanya. Now Igor wants to show his feelings and write a number on the fence opposite to Tanya's house. Igor thinks that the larger the number is, the more chance to win Tanya's heart he has. 

Unfortunately, Igor could only get v liters of paint. He did the math and concluded that digit d requires ad liters of paint. Besides, Igor heard that Tanya doesn't like zeroes. That's why Igor won't use them in his number.

Help Igor find the maximum number he can write on the fence.

Input

The first line contains a positive integer v (0 ≤ v ≤ 106). The second line contains nine positive integers a1, a2, ..., a9 (1 ≤ ai ≤ 105).

Output

Print the maximum number Igor can write on the fence. If he has too little paint for any digit (so, he cannot write anything), print -1.

Examples

Input

5
5 4 3 2 1 2 3 4 5


Output

55555


Input

2
9 11 1 12 5 8 9 10 6


Output

33


Input

0
1 1 1 1 1 1 1 1 1


Output

-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1e6 + 2;
int dp[N][2];
int arr[10];
string ans;
void build(int l) {
  if (dp[l][1] == -1) {
    cout << -1 << endl;
    return;
  }
  while (dp[l][1] != -1) {
    cout << dp[l][1] + 1;
    l -= arr[dp[l][1]];
  }
}
int rec(int l) {
  if (dp[l][0] != -1) return dp[l][0];
  for (int i = 8; i >= 0; i--) {
    if (l >= arr[i]) {
      int k = rec(l - arr[i]) + 1;
      if (k > dp[l][0]) dp[l][0] = k, dp[l][1] = i;
    }
  }
  if (dp[l][0] == -1) return 0;
  return dp[l][0];
}
int main() {
  int l;
  cin >> l;
  memset(dp, -1, sizeof dp);
  for (int i = 0; i < 9; i++) cin >> arr[i];
  rec(l), build(l);
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

898207
99745 46416 99748 99752 99760 99776 99808 99872 100000


(G.2) Fast Input

898207
99745 99746 99748 99752 99760 99776 99808 99872 100000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e6 + 2; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int dp[N][2]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int arr[10]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
string ans; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void build(int l) { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  if (dp[l][1] == -1) { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    cout << -1 << endl; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  while (dp[l][1] != -1) { /* line 12 slow_hit_count: 20, fast_hit_count: 10 */
    cout << dp[l][1] + 1; /* line 13 slow_hit_count: 19, fast_hit_count: 9 */
    l -= arr[dp[l][1]]; /* line 14 slow_hit_count: 19, fast_hit_count: 9 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
int rec(int l) { /* line 17 slow_hit_count: 121105, fast_hit_count: 29118 */
  if (dp[l][0] != -1) return dp[l][0]; /* line 18 slow_hit_count: 121105, fast_hit_count: 29118 */
  for (int i = 8; i >= 0; i--) { /* line 19 slow_hit_count: 425790, fast_hit_count: 124800 */
    if (l >= arr[i]) { /* line 20 slow_hit_count: 383211, fast_hit_count: 112320 */
      int k = rec(l - arr[i]) + 1; /* line 21 slow_hit_count: 121104, fast_hit_count: 29117 */
      if (k > dp[l][0]) dp[l][0] = k, dp[l][1] = i; /* line 22 slow_hit_count: 121104, fast_hit_count: 29117 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  if (dp[l][0] == -1) return 0; /* line 25 slow_hit_count: 42579, fast_hit_count: 12480 */
  return dp[l][0]; /* line 26 slow_hit_count: 17185, fast_hit_count: 3291 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  int l; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> l; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  memset(dp, -1, sizeof dp); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 9; i++) cin >> arr[i]; /* line 32 slow_hit_count: 10, fast_hit_count: 10 */
  rec(l), build(l); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 34 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Based on the hit count information and the input problem, let's analyze the code to derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Function `rec(int l)`**:
   - The hit count for function `rec` is significantly higher on the slow input (`121,105` hits) compared to the fast input (`29,118` hits).
   - The loop inside `rec` (lines 19-23) iterates over the nine available digits and checks whether the remaining paint is sufficient to use a digit. The recursive call `rec(l - arr[i])` takes place if a digit can be used.
   - Due to high hit counts in the loop and recursion, it seems that the function explores many combinations of digits, leading to a high number of recursive calls.

2. **Line `while (dp[l][1] != -1)` in Function `build(int l)`**:
   - This line is responsible for reconstructing the solution. It also has a higher hit count on the slow input (20 hits) compared to the fast input (10 hits).

### Phase 2: Derive Performance-Characterizing Invariants

1. **Recursive Exploration and Digit Combinations**:
   - **Invariant**: "When the paint costs of digits are close to each other, particularly where the cheapest digit is not significantly cheaper than others, the recursive exploration in `rec` becomes extensive, leading to performance degradation. This is because multiple digits are viable at similar costs, resulting in numerous combinations to explore."
   
2. **Reconstruction of the Solution**:
   - **Invariant**: "If the number of digits with close paint costs leads to a large number of maximum-length combinations, the `build` function may need to iterate through more steps to output the result, slowing down performance."

### Explanation of Conditions

- The primary performance issue arises from the recursive `rec` function's behavior when digit paint costs are closely packed. The function attempts to maximize the number of digits by exploring various combinations recursively. If several digits have similar costs, especially when the cheapest digit is not distinctively cheaper, it results in a high branching factor, causing many recursive calls.
  
- Additionally, the `build` function's slowdown is a result of the large number of maximal-length numbers, which it needs to reconstruct and output. The solution reconstruction becomes performance-intensive if multiple equally good options exist due to the similar costs of the digits.

These invariants focus on the general structure of the problem and potential input scenarios rather than relying on exact numeric values from the slow input. They aim to capture situations that can cause slowdowns due to characteristics of the input data rather than just the input size.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Igor has fallen in love with Tanya. Now Igor wants to show his feelings and write a number on the fence opposite to Tanya's house. Igor thinks that the larger the number is, the more chance to win Tanya's heart he has. 

Unfortunately, Igor could only get v liters of paint. He did the math and concluded that digit d requires ad liters of paint. Besides, Igor heard that Tanya doesn't like zeroes. That's why Igor won't use them in his number.

Help Igor find the maximum number he can write on the fence.

Input

The first line contains a positive integer v (0 ≤ v ≤ 106). The second line contains nine positive integers a1, a2, ..., a9 (1 ≤ ai ≤ 105).

Output

Print the maximum number Igor can write on the fence. If he has too little paint for any digit (so, he cannot write anything), print -1.

Examples

Input

5
5 4 3 2 1 2 3 4 5


Output

55555


Input

2
9 11 1 12 5 8 9 10 6


Output

33


Input

0
1 1 1 1 1 1 1 1 1


Output

-1

Solution (C++ code):
{solution}


assistant: Let's proceed with Phase 3, where we will implement the natural language invariants derived earlier into checker code in C++.

### Phase 3: Implement Natural Language Invariants in C++

1. **Invariant: Recursive Exploration and Digit Combinations**

   The bottleneck here is the recursive exploration when digit paint costs are close. We'll check if the minimum cost is not significantly lower than other costs, potentially leading to multiple viable combinations and a high branching factor in recursion.

   ```cpp
   void check_recursion_invariant(int* costs, int size) {
       int minCost = *std::min_element(costs, costs + size);
       int closeCosts = 0;
       for (int i = 0; i < size; ++i) {
           if (costs[i] <= minCost + 10) { // Arbitrary threshold for close costs
               closeCosts++;
           }
       }
       if (closeCosts > 3) { // More than 3 digits with close paint costs
           cerr << "Warning: Performance bottleneck condition triggered - "
                   "high branching factor due to similar digit costs!" << endl;
           abort();
       }
   }
   ```

2. **Invariant: Reconstruction of the Solution**

   The bottleneck occurs when reconstructing many maximum-length numbers. We'll check if the maximum length of the number is particularly high.

   ```cpp
   void check_reconstruction_invariant(int maxLength) {
       if (maxLength > 50) { // Arbitrary threshold for a long number
           cerr << "Warning: Performance bottleneck condition triggered - "
                   "reconstruction of a very long number!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Now, let's place these checks effectively in the C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 1e6 + 2;
int dp[N][2];
int arr[10];

// Checkers for performance bottlenecks

// Checks if the recursion may lead to a high branching factor
void check_recursion_invariant(int* costs, int size) {
    int minCost = *std::min_element(costs, costs + size);
    int closeCosts = 0;
    for (int i = 0; i < size; ++i) {
        if (costs[i] <= minCost + 10) { // Arbitrary threshold for close costs
            closeCosts++;
        }
    }
    if (closeCosts > 3) { // More than 3 digits with close paint costs
        cerr << "Warning: Performance bottleneck condition triggered - "
                "high branching factor due to similar digit costs!" << endl;
        abort();
    }
}

// Checks if the reconstruction might lead to performance issues
void check_reconstruction_invariant(int maxLength) {
    if (maxLength > 50) { // Arbitrary threshold for a long number
        cerr << "Warning: Performance bottleneck condition triggered - "
                "reconstruction of a very long number!" << endl;
        abort();
    }
}

void build(int l) {
    if (dp[l][1] == -1) {
        cout << -1 << endl;
        return;
    }
    int maxLength = 0;
    while (dp[l][1] != -1) {
        cout << dp[l][1] + 1;
        l -= arr[dp[l][1]];
        maxLength++;
    }
    check_reconstruction_invariant(maxLength); // Check during reconstruction
}

int rec(int l) {
    if (dp[l][0] != -1) return dp[l][0];
    for (int i = 8; i >= 0; i--) {
        if (l >= arr[i]) {
            int k = rec(l - arr[i]) + 1;
            if (k > dp[l][0]) dp[l][0] = k, dp[l][1] = i;
        }
    }
    if (dp[l][0] == -1) return 0;
    return dp[l][0];
}

int main() {
    int l;
    cin >> l;
    memset(dp, -1, sizeof dp);
    for (int i = 0; i < 9; i++) cin >> arr[i];
    
    check_recursion_invariant(arr, 9); // Check after reading costs
    
    rec(l), build(l);
}
```

### Explanation of Checker Placement

- **`check_recursion_invariant`** is called after reading the paint costs to assess if the recursive function might struggle with branching due to similar costs.

- **`check_reconstruction_invariant`** is called during the `build` process to ensure that the program doesn't attempt to output an excessively long number, which could indicate inefficiencies in reconstruction.

These checks act as early warnings for potential performance bottlenecks, aligning with our initial invariants while being careful not to introduce additional overhead in performance-critical sections.

