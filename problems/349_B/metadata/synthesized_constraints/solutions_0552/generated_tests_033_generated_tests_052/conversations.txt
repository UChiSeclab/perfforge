system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Igor has fallen in love with Tanya. Now Igor wants to show his feelings and write a number on the fence opposite to Tanya's house. Igor thinks that the larger the number is, the more chance to win Tanya's heart he has. 

Unfortunately, Igor could only get v liters of paint. He did the math and concluded that digit d requires ad liters of paint. Besides, Igor heard that Tanya doesn't like zeroes. That's why Igor won't use them in his number.

Help Igor find the maximum number he can write on the fence.

Input

The first line contains a positive integer v (0 ≤ v ≤ 106). The second line contains nine positive integers a1, a2, ..., a9 (1 ≤ ai ≤ 105).

Output

Print the maximum number Igor can write on the fence. If he has too little paint for any digit (so, he cannot write anything), print -1.

Examples

Input

5
5 4 3 2 1 2 3 4 5


Output

55555


Input

2
9 11 1 12 5 8 9 10 6


Output

33


Input

0
1 1 1 1 1 1 1 1 1


Output

-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void oj() {}
signed main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  ;
  oj();
  long long t, x, y, n;
  cin >> n;
  map<char, long long> m;
  for (long long i = 0; i < 9; i++) {
    cin >> x;
    m['1' + i] = x;
  }
  long long d = LLONG_MIN;
  char ch;
  for (auto x : m) {
    if (n / x.second > d) {
      ch = x.first;
      d = n / x.second;
    } else if (n / x.second == d) {
      if (x.second < m[ch])
        ch = x.first;
      else if (x.second == m[ch])
        ch = max(ch, x.first);
    }
  }
  if (d == 0) {
    cout << -1;
    return 0;
  }
  string ans(d, ch);
  long long rem = n - d * m[ch];
  long long i = 0;
  while (rem > 0 && i < ans.length()) {
    for (long long j = 9; j >= 0; j--) {
      if (rem + m[ans[i]] >= m[j + '0']) {
        rem = rem + m[ans[i]] - m[j + '0'];
        ans[i] = j + '0';
        break;
      }
    }
    i++;
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

21069
31 7 36 30 28 43 21 25 32


(G.2) Fast Input

21069
31 19 36 30 28 43 21 25 32


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void oj() {} /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
signed main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  oj(); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  long long t, x, y, n; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  map<char, long long> m; /* line 11 slow_hit_count: 2, fast_hit_count: 2 */
  for (long long i = 0; i < 9; i++) { /* line 12 slow_hit_count: 10, fast_hit_count: 10 */
    cin >> x; /* line 13 slow_hit_count: 9, fast_hit_count: 9 */
    m['1' + i] = x; /* line 14 slow_hit_count: 9, fast_hit_count: 9 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  long long d = LLONG_MIN; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  char ch; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto x : m) { /* line 18 slow_hit_count: 10, fast_hit_count: 10 */
    if (n / x.second > d) { /* line 19 slow_hit_count: 9, fast_hit_count: 9 */
      ch = x.first; /* line 20 slow_hit_count: 2, fast_hit_count: 2 */
      d = n / x.second; /* line 21 slow_hit_count: 2, fast_hit_count: 2 */
    } else if (n / x.second == d) { /* line 22 slow_hit_count: 7, fast_hit_count: 7 */
      if (x.second < m[ch]) /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
        ch = x.first; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      else if (x.second == m[ch]) /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
        ch = max(ch, x.first); /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  if (d == 0) { /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
    cout << -1; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  string ans(d, ch); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  long long rem = n - d * m[ch]; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  long long i = 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  while (rem > 0 && i < ans.length()) { /* line 36 slow_hit_count: 3010, fast_hit_count: 4 */
    for (long long j = 9; j >= 0; j--) { /* line 37 slow_hit_count: 24072, fast_hit_count: 7 */
      if (rem + m[ans[i]] >= m[j + '0']) { /* line 38 slow_hit_count: 24072, fast_hit_count: 7 */
        rem = rem + m[ans[i]] - m[j + '0']; /* line 39 slow_hit_count: 3009, fast_hit_count: 3 */
        ans[i] = j + '0'; /* line 40 slow_hit_count: 3009, fast_hit_count: 3 */
        break; /* line 41 slow_hit_count: 3009, fast_hit_count: 3 */
      } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    i++; /* line 44 slow_hit_count: 3009, fast_hit_count: 3 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Hit Counts**:
   - The `while` loop at line 36 in combination with the nested `for` loop at line 37 shows a significant difference in hit counts between the slow and fast inputs. Specifically, the slow input has a hit count of 3010 for the `while` loop and 24072 for the `for` loop, whereas the fast input has much lower hit counts of 4 and 7, respectively.

2. **Pinpointing Critical Code Segments**:
   - The bottleneck appears to be the nested loops starting at lines 36 and 37. The inner `for` loop iteratively checks conditions and updates the `ans` string, which leads to a high number of iterations for the slow input. This suggests that the slow input data results in conditions that cause these loops to execute more frequently.

3. **Data Structure Interaction**:
   - The `map` `m` is used to store the paint costs for each digit. The algorithm tries to maximize the number by replacing digits in `ans` with larger possible digits within the remaining paint budget (`rem`). The high hit counts indicate that the conditions under the `while` loop allow many iterations of attempts to upgrade digits, primarily due to the `rem` allowing these operations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: High Iterations in Nested Loops**:
   - **Natural Language Description**: "When the initial choice of digit leads to a high number of potential replacements due to small differences in paint costs, the nested loops may result in excessive iterations, slowing down the process."
   - **Explanation**: If the paint costs of the digits are such that a significant number of replacements can be made with the remaining paint, the loops will iterate more frequently, attempting to maximize each position in the number.

2. **Invariant 2: Small Differences Between Paint Costs**:
   - **Natural Language Description**: "If the paint costs for several digits are close, especially for the cheapest digits, the program may undergo many iterations of improvement attempts, causing slow performance."
   - **Explanation**: The program efficiently uses leftover paint by attempting to replace digits with more significant ones. If the digits have similar costs, this may lead to repeated checks and replacements, increasing the computation time.

3. **Invariant 3: Remaining Paint Utilization**:
   - **Natural Language Description**: "When the initial computation leaves a non-trivial amount of paint (`rem`) close to the cost of several small digits, the loop will repeatedly attempt to upgrade digits, leading to slow execution."
   - **Explanation**: The algorithm optimally uses every unit of paint. When `rem` is sufficient to make small changes but not enough for optimal large digit replacements, the program loops to re-calculate the number configuration.

### Considerations

- These performance-characterizing invariants help encapsulate why the program slows down under specific conditions without relying on specific numeric values from the slow input.
- The key takeaway is that the nested loops, driven by the interaction of paint costs and remaining paint, can cause significant slowdowns when conditions align unfavorably, such as when many small iterative improvements can be made.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Igor has fallen in love with Tanya. Now Igor wants to show his feelings and write a number on the fence opposite to Tanya's house. Igor thinks that the larger the number is, the more chance to win Tanya's heart he has. 

Unfortunately, Igor could only get v liters of paint. He did the math and concluded that digit d requires ad liters of paint. Besides, Igor heard that Tanya doesn't like zeroes. That's why Igor won't use them in his number.

Help Igor find the maximum number he can write on the fence.

Input

The first line contains a positive integer v (0 ≤ v ≤ 106). The second line contains nine positive integers a1, a2, ..., a9 (1 ≤ ai ≤ 105).

Output

Print the maximum number Igor can write on the fence. If he has too little paint for any digit (so, he cannot write anything), print -1.

Examples

Input

5
5 4 3 2 1 2 3 4 5


Output

55555


Input

2
9 11 1 12 5 8 9 10 6


Output

33


Input

0
1 1 1 1 1 1 1 1 1


Output

-1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Performance-Characterizing Invariants in C++

Below are the code snippets that check the performance-characterizing conditions derived from the natural language invariants:

1. **Invariant 1: High Iterations in Nested Loops**

```cpp
void check_high_iterations_invariant(long long initial_digit, long long iterations) {
    if (iterations > 1000 && initial_digit < 5) {  // Example condition
        cerr << "Warning: Performance bottleneck condition triggered due to high iterations!" << endl;
        abort();
    }
}
```

2. **Invariant 2: Small Differences Between Paint Costs**

```cpp
void check_small_cost_difference(std::map<char, long long>& m) {
    long long min_cost = LLONG_MAX;
    long long second_min_cost = LLONG_MAX;

    for (auto& entry : m) {
        if (entry.second < min_cost) {
            second_min_cost = min_cost;
            min_cost = entry.second;
        } else if (entry.second < second_min_cost) {
            second_min_cost = entry.second;
        }
    }

    if (second_min_cost - min_cost <= 2) {  // Example small difference
        cerr << "Warning: Performance bottleneck condition triggered due to small differences in paint costs!" << endl;
        abort();
    }
}
```

3. **Invariant 3: Remaining Paint Utilization**

```cpp
void check_remaining_paint_usage(long long rem, long long smallest_paint_cost) {
    if (rem >= smallest_paint_cost && rem < 10) {  // Example condition
        cerr << "Warning: Performance bottleneck condition triggered due to inefficient remaining paint usage!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checks into the Original Program

Below is the original C++ code with the integrated invariant checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checkers for performance bottlenecks
void check_high_iterations_invariant(long long initial_digit, long long iterations) {
    if (iterations > 1000 && initial_digit < 5) {  // Example condition
        cerr << "Warning: Performance bottleneck condition triggered due to high iterations!" << endl;
        abort();
    }
}

void check_small_cost_difference(map<char, long long>& m) {
    long long min_cost = LLONG_MAX;
    long long second_min_cost = LLONG_MAX;

    for (auto& entry : m) {
        if (entry.second < min_cost) {
            second_min_cost = min_cost;
            min_cost = entry.second;
        } else if (entry.second < second_min_cost) {
            second_min_cost = entry.second;
        }
    }

    if (second_min_cost - min_cost <= 2) {  // Example small difference
        cerr << "Warning: Performance bottleneck condition triggered due to small differences in paint costs!" << endl;
        abort();
    }
}

void check_remaining_paint_usage(long long rem, long long smallest_paint_cost) {
    if (rem >= smallest_paint_cost && rem < 10) {  // Example condition
        cerr << "Warning: Performance bottleneck condition triggered due to inefficient remaining paint usage!" << endl;
        abort();
    }
}

void oj() {}

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    oj();
    long long t, x, y, n;
    cin >> n;
    map<char, long long> m;
    for (long long i = 0; i < 9; i++) {
        cin >> x;
        m['1' + i] = x;
    }

    // Apply check for small differences in paint costs
    check_small_cost_difference(m);

    long long d = LLONG_MIN;
    char ch;
    for (auto x : m) {
        if (n / x.second > d) {
            ch = x.first;
            d = n / x.second;
        } else if (n / x.second == d) {
            if (x.second < m[ch])
                ch = x.first;
            else if (x.second == m[ch])
                ch = max(ch, x.first);
        }
    }

    if (d == 0) {
        cout << -1;
        return 0;
    }

    string ans(d, ch);
    long long rem = n - d * m[ch];
    long long i = 0;
    long long initial_digit = ch - '0';
    long long iterations = 0;

    while (rem > 0 && i < ans.length()) {
        for (long long j = 9; j >= 1; j--) {
            iterations++;
            if (rem + m[ans[i]] >= m[j + '0']) {
                rem = rem + m[ans[i]] - m[j + '0'];
                ans[i] = j + '0';
                break;
            }
        }
        i++;
    }

    // Apply check for high iterations in nested loops
    check_high_iterations_invariant(initial_digit, iterations);

    // Apply check for remaining paint utilization
    check_remaining_paint_usage(rem, m['1']);

    cout << ans;
    return 0;
}
```

### Explanation of Instrumentation

- **Small Cost Difference Check**: Placed immediately after reading the paint costs to determine if the problem will potentially lead to inefficiencies.
  
- **High Iterations Check**: Located at the end of the loop that attempts to maximize the number, measuring loop iterations to capture inefficiencies.

- **Remaining Paint Utilization Check**: Positioned after calculating the remaining paint once the main loop completes, ensuring it captures inefficiencies in resource use. 

Each check is designed to capture specific scenarios leading to slowdowns, helping highlight potential bottlenecks for debugging or optimization.

