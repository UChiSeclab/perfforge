system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Catherine received an array of integers as a gift for March 8. Eventually she grew bored with it, and she started calculated various useless characteristics for it. She succeeded to do it for each one she came up with. But when she came up with another one — xor of all pairwise sums of elements in the array, she realized that she couldn't compute it for a very large array, thus she asked for your help. Can you do it? Formally, you need to compute

$$$ (a_1 + a_2) ⊕ (a_1 + a_3) ⊕ … ⊕ (a_1 + a_n) \\\ ⊕ (a_2 + a_3) ⊕ … ⊕ (a_2 + a_n) \\\ … \\\ ⊕ (a_{n-1} + a_n) \\\ $$$

Here x ⊕ y is a bitwise XOR operation (i.e. x ^ y in many modern programming languages). You can read about it in Wikipedia: <https://en.wikipedia.org/wiki/Exclusive_or#Bitwise_operation>.

Input

The first line contains a single integer n (2 ≤ n ≤ 400 000) — the number of integers in the array.

The second line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^7).

Output

Print a single integer — xor of all pairwise sums of integers in the given array.

Examples

Input


2
1 2


Output


3

Input


3
1 2 3


Output


2

Note

In the first sample case there is only one sum 1 + 2 = 3.

In the second sample case there are three sums: 1 + 2 = 3, 1 + 3 = 4, 2 + 3 = 5. In binary they are represented as 011_2 ⊕ 100_2 ⊕ 101_2 = 010_2, thus the answer is 2.

⊕ is the bitwise xor operation. To define x ⊕ y, consider binary representations of integers x and y. We put the i-th bit of the result to be 1 when exactly one of the i-th bits of x and y is 1. Otherwise, the i-th bit of the result is put to be 0. For example, 0101_2   ⊕   0011_2 = 0110_2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, a[400005], b[400005];
long long cnt(long long l, long long r) {
  return upper_bound(b, b + n, r) - lower_bound(b, b + n, l);
}
int main(int argc, char const *argv[]) {
  cin >> n;
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
  }
  long long ans = 0;
  for (long long j = 0; j <= 30; ++j) {
    long long c = 0;
    for (int i = 0; i < n; ++i) {
      b[i] = a[i] % (1ll << (j + 1));
    }
    sort(b, b + n);
    for (int i = 0; i < n; ++i) {
      c += cnt((1ll << j) - b[i], (1ll << (j + 1)) - 1 - b[i]);
      c += cnt((1ll << (j + 1)) + (1ll << j) - b[i],
               (1ll << (j + 2)) - 2 - b[i]);
      if (2 * b[i] >= (1ll << j) && 2 * b[i] < (1ll << (j + 1))) c--;
      if (2 * b[i] >= (1ll << (j + 1)) + (1ll << j) &&
          2 * b[i] <= (1ll << (j + 2)) - 2)
        c--;
    }
    c >>= 1;
    if (c & 1) ans |= (1ll << j);
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 41 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100


(G.2) Fast Input

50
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, a[400005], b[400005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long cnt(long long l, long long r) { /* line 4 slow_hit_count: 6200, fast_hit_count: 3100 */
  return upper_bound(b, b + n, r) - lower_bound(b, b + n, l); /* line 5 slow_hit_count: 6200, fast_hit_count: 3100 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main(int argc, char const *argv[]) { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 9 slow_hit_count: 101, fast_hit_count: 51 */
    cin >> a[i]; /* line 10 slow_hit_count: 100, fast_hit_count: 50 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long j = 0; j <= 30; ++j) { /* line 13 slow_hit_count: 32, fast_hit_count: 32 */
    long long c = 0; /* line 14 slow_hit_count: 31, fast_hit_count: 31 */
    for (int i = 0; i < n; ++i) { /* line 15 slow_hit_count: 3131, fast_hit_count: 1581 */
      b[i] = a[i] % (1ll << (j + 1)); /* line 16 slow_hit_count: 3100, fast_hit_count: 1550 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    sort(b, b + n); /* line 18 slow_hit_count: 31, fast_hit_count: 31 */
    for (int i = 0; i < n; ++i) { /* line 19 slow_hit_count: 3131, fast_hit_count: 1581 */
      c += cnt((1ll << j) - b[i], (1ll << (j + 1)) - 1 - b[i]); /* line 20 slow_hit_count: 3100, fast_hit_count: 1550 */
      c += cnt((1ll << (j + 1)) + (1ll << j) - b[i], /* line 21 slow_hit_count: 6200, fast_hit_count: 3100 */
               (1ll << (j + 2)) - 2 - b[i]); /* line 22 slow_hit_count: 3100, fast_hit_count: 1550 */
      if (2 * b[i] >= (1ll << j) && 2 * b[i] < (1ll << (j + 1))) c--; /* line 23 slow_hit_count: 3100, fast_hit_count: 1550 */
      if (2 * b[i] >= (1ll << (j + 1)) + (1ll << j) && /* line 24 slow_hit_count: 3100, fast_hit_count: 1550 */
          2 * b[i] <= (1ll << (j + 2)) - 2) /* line 25 slow_hit_count: 115, fast_hit_count: 47 */
        c--; /* line 26 slow_hit_count: 115, fast_hit_count: 47 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    c >>= 1; /* line 28 slow_hit_count: 31, fast_hit_count: 31 */
    if (c & 1) ans |= (1ll << j); /* line 29 slow_hit_count: 31, fast_hit_count: 31 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the provided C program, we will examine the hit count data for the slow and fast inputs to identify inefficient code segments and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information, the following observations are made:

1. **Function `cnt`:** 
   - Line 4 (function call to `cnt`) has 6200 hits for the slow input compared to 3100 for the fast input. 
   - Line 5 (inside `cnt` function) also reflects this pattern.
   - This indicates that the `cnt` function is called significantly more frequently for the slow input.

2. **Inner Loops:**
   - The loops on lines 15 and 19 have been executed more times for the slow input (3131 times) versus the fast input (1581 times).
   - This suggests that the logic within these loops contributes to the overall slowdown.

3. **Conditional Operations:**
   - Lines 20-26 within the nested loops appear to be executed frequently and contribute to the overall operation count, especially due to repeated calls to `cnt`.

The key inefficiencies stem from repeated operations within these nested loops, especially due to the function `cnt` and the operations performed on the array `b`.

### Phase 2: Derive Performance-Characterizing Invariants

From these observations, we can derive the following performance-characterizing invariants in natural language:

1. **Invariant 1: Repeated Calculations on Sorted Array**
   - **Description:** "When the algorithm frequently sorts a large array (close to the maximum constraint, n = 100), it may lead to performance degradation because each sort operation is followed by repeated range count calculations."
   - **Condition:** This is particularly notable when `n` is near the upper constraint.

2. **Invariant 2: High Iteration Counts for Count Calculation**
   - **Description:** "If the number of iterations for calculating pairwise sums and their counts increases substantially (e.g., the number of combinations approaches n^2), the performance could degrade significantly."
   - **Condition:** This is especially true when array elements have values that lead to many similar modulo results, increasing the workload within loops.

3. **Invariant 3: Conditional Reductions in Dense Loops**
   - **Description:** "When complex conditional checks are performed within dense nested loops over the entire array, there may be a decrease in efficiency, particularly with large arrays or when conditions are frequently met."
   - **Condition:** This becomes apparent when `n` is large, and elements are such that conditional reductions are triggered often.

These invariants describe scenarios where the program's performance could drop due to the complexity of operations and repeated evaluations within loops, particularly under conditions approaching or at the problem's constraints. By understanding these triggers, future inputs that might slow down execution can be anticipated and tested effectively.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Catherine received an array of integers as a gift for March 8. Eventually she grew bored with it, and she started calculated various useless characteristics for it. She succeeded to do it for each one she came up with. But when she came up with another one — xor of all pairwise sums of elements in the array, she realized that she couldn't compute it for a very large array, thus she asked for your help. Can you do it? Formally, you need to compute

$$$ (a_1 + a_2) ⊕ (a_1 + a_3) ⊕ … ⊕ (a_1 + a_n) \\\ ⊕ (a_2 + a_3) ⊕ … ⊕ (a_2 + a_n) \\\ … \\\ ⊕ (a_{n-1} + a_n) \\\ $$$

Here x ⊕ y is a bitwise XOR operation (i.e. x ^ y in many modern programming languages). You can read about it in Wikipedia: <https://en.wikipedia.org/wiki/Exclusive_or#Bitwise_operation>.

Input

The first line contains a single integer n (2 ≤ n ≤ 400 000) — the number of integers in the array.

The second line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^7).

Output

Print a single integer — xor of all pairwise sums of integers in the given array.

Examples

Input


2
1 2


Output


3

Input


3
1 2 3


Output


2

Note

In the first sample case there is only one sum 1 + 2 = 3.

In the second sample case there are three sums: 1 + 2 = 3, 1 + 3 = 4, 2 + 3 = 5. In binary they are represented as 011_2 ⊕ 100_2 ⊕ 101_2 = 010_2, thus the answer is 2.

⊕ is the bitwise xor operation. To define x ⊕ y, consider binary representations of integers x and y. We put the i-th bit of the result to be 1 when exactly one of the i-th bits of x and y is 1. Otherwise, the i-th bit of the result is put to be 0. For example, 0101_2   ⊕   0011_2 = 0110_2.

Solution (C++ code):
{solution}


assistant: Let's go through the tasks required in Phases 3 and 4 to integrate the performance-characterizing invariants into the C++ program.

### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants previously derived, we will implement runtime checks.

#### Invariant 1: Repeated Calculations on Sorted Array

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}
```

#### Invariant 2: High Iteration Counts for Count Calculation

```cpp
void check_iteration_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: iteration_invariant triggered - high iteration count for calculations" << endl;
        abort();
    }
}
```

#### Invariant 3: Conditional Reductions in Dense Loops

```cpp
void check_conditional_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: conditional_invariant triggered - intensive conditional checks within loops" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Now, we integrate these checks into the original C++ program, making sure they are placed effectively in the control/data flow.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

void check_iteration_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: iteration_invariant triggered - high iteration count for calculations" << endl;
        abort();
    }
}

void check_conditional_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: conditional_invariant triggered - intensive conditional checks within loops" << endl;
        abort();
    }
}

long long n, a[400005], b[400005];

long long cnt(long long l, long long r) {
    return upper_bound(b, b + n, r) - lower_bound(b, b + n, l);
}

int main(int argc, char const *argv[]) {
    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }

    // Check for potential performance issues based on input size and operations
    check_sort_invariant(n > 100000);  // Example threshold for large data
    check_iteration_invariant(n > 100000);  // Assume high iteration count could be problematic
    
    long long ans = 0;
    for (long long j = 0; j <= 30; ++j) {
        long long c = 0;
        for (int i = 0; i < n; ++i) {
            b[i] = a[i] % (1ll << (j + 1));
        }
        sort(b, b + n);
        
        // Check conditionals inside performance critical loops
        check_conditional_invariant(n > 100000);  // Example of intensive conditional checks
        
        for (int i = 0; i < n; ++i) {
            c += cnt((1ll << j) - b[i], (1ll << (j + 1)) - 1 - b[i]);
            c += cnt((1ll << (j + 1)) + (1ll << j) - b[i],
                     (1ll << (j + 2)) - 2 - b[i]);
            if (2 * b[i] >= (1ll << j) && 2 * b[i] < (1ll << (j + 1))) c--;
            if (2 * b[i] >= (1ll << (j + 1)) + (1ll << j) &&
                2 * b[i] <= (1ll << (j + 2)) - 2)
                c--;
        }
        c >>= 1;
        if (c & 1) ans |= (1ll << j);
    }
    cout << ans;
    return 0;
}
```

### Explanation

- **Invariant Checks:** Each invariant check function is placed after reading inputs and before entering potentially expensive operations. These checks will abort execution if performance bottlenecks are detected based on the input size or compute-intensive operations.
- **Thresholds:** Thresholds for these checks are set based on understanding that higher values of `n` lead to more intensive calculations. These can be tuned further based on profiling data.
- **Avoiding Overhead:** Check functions are called outside of the tight loops to prevent performance degradation from the checks themselves. 

This instrumentation should help identify potential performance issues during runtime without significantly affecting performance during normal operation.

