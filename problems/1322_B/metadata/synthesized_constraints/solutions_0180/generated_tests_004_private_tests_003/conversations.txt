system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Catherine received an array of integers as a gift for March 8. Eventually she grew bored with it, and she started calculated various useless characteristics for it. She succeeded to do it for each one she came up with. But when she came up with another one — xor of all pairwise sums of elements in the array, she realized that she couldn't compute it for a very large array, thus she asked for your help. Can you do it? Formally, you need to compute

$$$ (a_1 + a_2) ⊕ (a_1 + a_3) ⊕ … ⊕ (a_1 + a_n) \\\ ⊕ (a_2 + a_3) ⊕ … ⊕ (a_2 + a_n) \\\ … \\\ ⊕ (a_{n-1} + a_n) \\\ $$$

Here x ⊕ y is a bitwise XOR operation (i.e. x ^ y in many modern programming languages). You can read about it in Wikipedia: <https://en.wikipedia.org/wiki/Exclusive_or#Bitwise_operation>.

Input

The first line contains a single integer n (2 ≤ n ≤ 400 000) — the number of integers in the array.

The second line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^7).

Output

Print a single integer — xor of all pairwise sums of integers in the given array.

Examples

Input


2
1 2


Output


3

Input


3
1 2 3


Output


2

Note

In the first sample case there is only one sum 1 + 2 = 3.

In the second sample case there are three sums: 1 + 2 = 3, 1 + 3 = 4, 2 + 3 = 5. In binary they are represented as 011_2 ⊕ 100_2 ⊕ 101_2 = 010_2, thus the answer is 2.

⊕ is the bitwise xor operation. To define x ⊕ y, consider binary representations of integers x and y. We put the i-th bit of the result to be 1 when exactly one of the i-th bits of x and y is 1. Otherwise, the i-th bit of the result is put to be 0. For example, 0101_2   ⊕   0011_2 = 0110_2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <typename A, typename B>
string to_string(pair<A, B> p);
template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p);
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p);
string to_string(const string &s) { return '"' + s + '"'; }
string to_string(const char *s) { return to_string((string)s); }
string to_string(bool b) { return (b ? "true" : "false"); }
string to_string(vector<bool> v) {
  bool first = true;
  string res = "{";
  for (int i = 0; i < static_cast<int>(v.size()); i++) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(v[i]);
  }
  res += "}";
  return res;
}
template <size_t N>
string to_string(bitset<N> v) {
  string res = "";
  for (size_t i = 0; i < N; i++) {
    res += static_cast<char>('0' + v[i]);
  }
  return res;
}
template <typename A>
string to_string(A v) {
  bool first = true;
  string res = "{";
  for (const auto &x : v) {
    if (!first) {
      res += ", ";
    }
    first = false;
    res += to_string(x);
  }
  res += "}";
  return res;
}
template <typename A, typename B>
string to_string(pair<A, B> p) {
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}
template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p) {
  return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " +
         to_string(get<2>(p)) + ")";
}
template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) {
  return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " +
         to_string(get<2>(p)) + ", " + to_string(get<3>(p)) + ")";
}
void debug_out() { cerr << endl; }
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}
const int mod = (int)1e9 + 7;
int getInRange(vector<int> &a, int start, int lo, int hi) {
  return upper_bound(a.begin() + start, a.end(), hi) -
         lower_bound(a.begin() + start, a.end(), lo);
}
int main() {
  ios_base::sync_with_stdio(false), cin.tie(nullptr);
  int n;
  cin >> n;
  vector<int> a(n);
  for (int &x : a) {
    cin >> x;
  }
  int ans = 0;
  for (int b = 0; b < 30; b++) {
    vector<int> A(n);
    for (int i = 0; i < n; i++) {
      int num = 0;
      for (int j = b; j >= 0; j--) {
        num *= 2;
        if (a[i] & (1 << j)) {
          num++;
        }
      }
      A[i] = num;
    }
    sort(A.begin(), A.end());
    int B = b + 1;
    int64_t cntPairs = 0;
    for (int i = 0; i < n; i++) {
      cntPairs +=
          getInRange(A, i + 1, (1 << (B - 1)) - A[i], (1 << B) - 1 - A[i]);
      cntPairs +=
          getInRange(A, i + 1, (1 << B) + (1 << (B - 1)) - A[i], (int)1e9);
    }
    if (cntPairs % 2 != 0) {
      ans |= (1 << b);
    }
  }
  cout << ans << "\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 41 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100


(G.2) Fast Input

50
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A, typename B> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(pair<A, B> p); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A, typename B, typename C> /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(tuple<A, B, C> p); /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A, typename B, typename C, typename D> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(tuple<A, B, C, D> p); /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(const string &s) { return '"' + s + '"'; } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(const char *s) { return to_string((string)s); } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(bool b) { return (b ? "true" : "false"); } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(vector<bool> v) { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  bool first = true; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  string res = "{"; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < static_cast<int>(v.size()); i++) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    if (!first) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
      res += ", "; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    first = false; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    res += to_string(v[i]); /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  res += "}"; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
template <size_t N> /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(bitset<N> v) { /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  string res = ""; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  for (size_t i = 0; i < N; i++) { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    res += static_cast<char>('0' + v[i]); /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A> /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(A v) { /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  bool first = true; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  string res = "{"; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  for (const auto &x : v) { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    if (!first) { /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
      res += ", "; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    first = false; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    res += to_string(x); /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  res += "}"; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A, typename B> /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(pair<A, B> p) { /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  return "(" + to_string(p.first) + ", " + to_string(p.second) + ")"; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A, typename B, typename C> /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(tuple<A, B, C> p) { /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
         to_string(get<2>(p)) + ")"; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
template <typename A, typename B, typename C, typename D> /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
string to_string(tuple<A, B, C, D> p) { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
         to_string(get<2>(p)) + ", " + to_string(get<3>(p)) + ")"; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
void debug_out() { cerr << endl; } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
template <typename Head, typename... Tail> /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
void debug_out(Head H, Tail... T) { /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  cerr << " " << to_string(H); /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  debug_out(T...); /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = (int)1e9 + 7; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
int getInRange(vector<int> &a, int start, int lo, int hi) { /* line 68 slow_hit_count: 6000, fast_hit_count: 3000 */
  return upper_bound(a.begin() + start, a.end(), hi) - /* line 69 slow_hit_count: 6000, fast_hit_count: 3000 */
         lower_bound(a.begin() + start, a.end(), lo); /* line 70 slow_hit_count: 12000, fast_hit_count: 6000 */
} /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false), cin.tie(nullptr); /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> a(n); /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  for (int &x : a) { /* line 77 slow_hit_count: 101, fast_hit_count: 51 */
    cin >> x; /* line 78 slow_hit_count: 100, fast_hit_count: 50 */
  } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
  for (int b = 0; b < 30; b++) { /* line 81 slow_hit_count: 31, fast_hit_count: 31 */
    vector<int> A(n); /* line 82 slow_hit_count: 60, fast_hit_count: 60 */
    for (int i = 0; i < n; i++) { /* line 83 slow_hit_count: 3030, fast_hit_count: 1530 */
      int num = 0; /* line 84 slow_hit_count: 3000, fast_hit_count: 1500 */
      for (int j = b; j >= 0; j--) { /* line 85 slow_hit_count: 49500, fast_hit_count: 24750 */
        num *= 2; /* line 86 slow_hit_count: 46500, fast_hit_count: 23250 */
        if (a[i] & (1 << j)) { /* line 87 slow_hit_count: 46500, fast_hit_count: 23250 */
          num++; /* line 88 slow_hit_count: 8623, fast_hit_count: 3764 */
        } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
      A[i] = num; /* line 91 slow_hit_count: 3000, fast_hit_count: 1500 */
    } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
    sort(A.begin(), A.end()); /* line 93 slow_hit_count: 30, fast_hit_count: 30 */
    int B = b + 1; /* line 94 slow_hit_count: 30, fast_hit_count: 30 */
    int64_t cntPairs = 0; /* line 95 slow_hit_count: 30, fast_hit_count: 30 */
    for (int i = 0; i < n; i++) { /* line 96 slow_hit_count: 3030, fast_hit_count: 1530 */
      cntPairs += /* line 97 slow_hit_count: 3000, fast_hit_count: 1500 */
          getInRange(A, i + 1, (1 << (B - 1)) - A[i], (1 << B) - 1 - A[i]); /* line 98 slow_hit_count: 3000, fast_hit_count: 1500 */
      cntPairs += /* line 99 slow_hit_count: 3000, fast_hit_count: 1500 */
          getInRange(A, i + 1, (1 << B) + (1 << (B - 1)) - A[i], (int)1e9); /* line 100 slow_hit_count: 3000, fast_hit_count: 1500 */
    } /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
    if (cntPairs % 2 != 0) { /* line 102 slow_hit_count: 30, fast_hit_count: 30 */
      ans |= (1 << b); /* line 103 slow_hit_count: 3, fast_hit_count: 2 */
    } /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 106 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 107 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 108 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C program, let's break down the tasks as follows:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The `getInRange` function (lines 68-70) is called significantly more often in the slow input, with hits doubling compared to the fast input.
   - Lines 85-91, which involve creating numbers from binary bits and storing them in an array, also have a high discrepancy in execution between slow and fast inputs.
   - Sorting on line 93 is executed the same number of times, but the complexity of sorting increases with the size of `n`.

2. **Pinpoint Lines or Functions with More Hits:**
   - `getInRange` is a critical function, significantly contributing to the performance bottleneck with its high execution frequency.
   - The nested loop structure on lines 83-101 also sees a proportional increase in hits as the input size increases.

3. **Infer Interaction with Data Structures:**
   - The program involves sorting a list and executing binary operations within nested loops. When `n` increases, the complexity grows, particularly due to the sorting step and repeated range queries.

### Phase 2: Derive Performance-Characterizing Invariants

Given the analysis, here are the natural language performance-characterizing invariants:

1. **Invariant Related to Sorting and Binary Operations:**
   - "When the input size `n` is large, particularly towards its upper constraint (n close to 100), sorting and binary operations within nested loops can lead to increased computational cost. This is especially true when operating over binary representations for multiple bit levels."

2. **Invariant Related to Range Queries:**
   - "If the number of elements `n` in the array is large, the frequent computation of range queries using binary search operations (in `getInRange`) becomes costly, due to repeated evaluations over subsets of sorted arrays."

3. **Invariant Related to Nested Loop Complexity:**
   - "A slowdown occurs when the program processes a large number of elements within nested loops for each bit position, where each inner loop iteration involves multiple operations, including conditionals and arithmetic computations."

These performance characteristics are abstract and applicable given the constraints `n <= 100` (which is the actual upper bound of the input size in this specific case, despite the problem allowing up to 400,000 in a general case). They provide insight into operational patterns that could lead to slow execution, independent of the specific numeric values from the slow input.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Catherine received an array of integers as a gift for March 8. Eventually she grew bored with it, and she started calculated various useless characteristics for it. She succeeded to do it for each one she came up with. But when she came up with another one — xor of all pairwise sums of elements in the array, she realized that she couldn't compute it for a very large array, thus she asked for your help. Can you do it? Formally, you need to compute

$$$ (a_1 + a_2) ⊕ (a_1 + a_3) ⊕ … ⊕ (a_1 + a_n) \\\ ⊕ (a_2 + a_3) ⊕ … ⊕ (a_2 + a_n) \\\ … \\\ ⊕ (a_{n-1} + a_n) \\\ $$$

Here x ⊕ y is a bitwise XOR operation (i.e. x ^ y in many modern programming languages). You can read about it in Wikipedia: <https://en.wikipedia.org/wiki/Exclusive_or#Bitwise_operation>.

Input

The first line contains a single integer n (2 ≤ n ≤ 400 000) — the number of integers in the array.

The second line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^7).

Output

Print a single integer — xor of all pairwise sums of integers in the given array.

Examples

Input


2
1 2


Output


3

Input


3
1 2 3


Output


2

Note

In the first sample case there is only one sum 1 + 2 = 3.

In the second sample case there are three sums: 1 + 2 = 3, 1 + 3 = 4, 2 + 3 = 5. In binary they are represented as 011_2 ⊕ 100_2 ⊕ 101_2 = 010_2, thus the answer is 2.

⊕ is the bitwise xor operation. To define x ⊕ y, consider binary representations of integers x and y. We put the i-th bit of the result to be 1 when exactly one of the i-th bits of x and y is 1. Otherwise, the i-th bit of the result is put to be 0. For example, 0101_2   ⊕   0011_2 = 0110_2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants in C++

Let’s translate the previously derived natural language performance-characterizing invariants into runtime checks in C++.

#### Invariant 1: Sorting and Binary Operations
```cpp
void check_sort_and_binary_operations(int n, int bitLevel) {
    if (n > 80 && bitLevel > 20) { // Example threshold
        cerr << "Warning: Potential slowdown due to large n and high bit levels in nested loop operations!" << endl;
        abort();
    }
}
```

#### Invariant 2: Range Queries
```cpp
void check_range_queries(int n) {
    if (n > 80) { // Example threshold
        cerr << "Warning: Performance bottleneck - excessive range queries with large n!" << endl;
        abort();
    }
}
```

#### Invariant 3: Nested Loop Complexity
```cpp
void check_nested_loop_complexity(int n) {
    if (n > 80) { // Example threshold for problematic nested loops
        cerr << "Warning: Performance bottleneck - nested loop complexity increases with large n!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original Program

Now, integrate these checks into the existing C++ solution to monitor potential performance bottlenecks. Here is the instrumented program:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_sort_and_binary_operations(int n, int bitLevel) {
    if (n > 80 && bitLevel > 20) { // Example threshold
        cerr << "Warning: Potential slowdown due to large n and high bit levels in nested loop operations!" << endl;
        abort();
    }
}

void check_range_queries(int n) {
    if (n > 80) { // Example threshold
        cerr << "Warning: Performance bottleneck - excessive range queries with large n!" << endl;
        abort();
    }
}

void check_nested_loop_complexity(int n) {
    if (n > 80) { // Example threshold for problematic nested loops
        cerr << "Warning: Performance bottleneck - nested loop complexity increases with large n!" << endl;
        abort();
    }
}

// Original main function with integrated checks
int main() {
    ios_base::sync_with_stdio(false), cin.tie(nullptr);
    int n;
    cin >> n;

    // Insert checks after reading input
    check_range_queries(n);
    check_nested_loop_complexity(n);

    vector<int> a(n);
    for (int &x : a) {
        cin >> x;
    }

    int ans = 0;
    for (int b = 0; b < 30; b++) {
        vector<int> A(n);
        for (int i = 0; i < n; i++) {
            int num = 0;
            for (int j = b; j >= 0; j--) {
                num *= 2;
                if (a[i] & (1 << j)) {
                    num++;
                }
            }
            A[i] = num;
        }

        // Check for sorting and binary operation bottleneck
        check_sort_and_binary_operations(n, b);

        sort(A.begin(), A.end());
        int B = b + 1;
        int64_t cntPairs = 0;
        for (int i = 0; i < n; i++) {
            cntPairs += getInRange(A, i + 1, (1 << (B - 1)) - A[i], (1 << B) - 1 - A[i]);
            cntPairs += getInRange(A, i + 1, (1 << B) + (1 << (B - 1)) - A[i], (int)1e9);
        }
        if (cntPairs % 2 != 0) {
            ans |= (1 << b);
        }
    }
    cout << ans << "\n";
    return 0;
}
```

### Explanation

- **Check Placement**: Checks are placed after reading input values to avoid adding overhead inside intensive loops.
- **Thresholds**: Thresholds are chosen based on the problem's constraints and typical performance bottlenecks when `n` approaches higher values.
- **Abort on Violation**: Each check, when triggered, outputs a warning and aborts the program to signal the detection of a potential performance issue.

