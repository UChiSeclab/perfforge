system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Catherine received an array of integers as a gift for March 8. Eventually she grew bored with it, and she started calculated various useless characteristics for it. She succeeded to do it for each one she came up with. But when she came up with another one — xor of all pairwise sums of elements in the array, she realized that she couldn't compute it for a very large array, thus she asked for your help. Can you do it? Formally, you need to compute

$$$ (a_1 + a_2) ⊕ (a_1 + a_3) ⊕ … ⊕ (a_1 + a_n) \\\ ⊕ (a_2 + a_3) ⊕ … ⊕ (a_2 + a_n) \\\ … \\\ ⊕ (a_{n-1} + a_n) \\\ $$$

Here x ⊕ y is a bitwise XOR operation (i.e. x ^ y in many modern programming languages). You can read about it in Wikipedia: <https://en.wikipedia.org/wiki/Exclusive_or#Bitwise_operation>.

Input

The first line contains a single integer n (2 ≤ n ≤ 400 000) — the number of integers in the array.

The second line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^7).

Output

Print a single integer — xor of all pairwise sums of integers in the given array.

Examples

Input


2
1 2


Output


3

Input


3
1 2 3


Output


2

Note

In the first sample case there is only one sum 1 + 2 = 3.

In the second sample case there are three sums: 1 + 2 = 3, 1 + 3 = 4, 2 + 3 = 5. In binary they are represented as 011_2 ⊕ 100_2 ⊕ 101_2 = 010_2, thus the answer is 2.

⊕ is the bitwise xor operation. To define x ⊕ y, consider binary representations of integers x and y. We put the i-th bit of the result to be 1 when exactly one of the i-th bits of x and y is 1. Otherwise, the i-th bit of the result is put to be 0. For example, 0101_2   ⊕   0011_2 = 0110_2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int bits;
bool cmp(int a, int b) {
  a = ((1 << bits) - 1) & a;
  b = ((1 << bits) - 1) & b;
  return a < b;
}
int main() {
  int n;
  scanf("%d", &n);
  int vec[n];
  for (int i = 0; i < n; i++) {
    scanf("%d", &vec[i]);
  }
  int ans = 0;
  ans = 0;
  int pot = 1;
  for (int i = 1; i <= 25; i++) {
    bits = i;
    sort(vec, vec + n, cmp);
    int cnt = 0;
    for (int j = 0; j < n; j++) {
      int num = (((1 << bits) - 1) & vec[j]);
      int aux = (1 << (bits - 1));
      int ini = j + 1, fin;
      if (aux - num >= 0)
        ini = max(ini, (int)(lower_bound(vec, vec + n, aux - num, cmp) - vec));
      aux = (1 << bits) - 1;
      fin = upper_bound(vec, vec + n, aux - num, cmp) - vec;
      if (ini < fin) cnt += fin - ini;
      aux = (1 << (bits - 1)) + (1 << bits);
      if (aux - num >= (1 << bits))
        ini = n;
      else
        ini =
            max(j + 1, (int)(lower_bound(vec, vec + n, aux - num, cmp) - vec));
      fin = n;
      if (ini < fin) cnt += fin - ini;
    }
    if (cnt % 2 == 1) ans += pot;
    pot <<= 1;
  }
  printf("%d\n", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 41 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100


(G.2) Fast Input

50
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int bits; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
bool cmp(int a, int b) { /* line 4 slow_hit_count: 46515, fast_hit_count: 19174 */
  a = ((1 << bits) - 1) & a; /* line 5 slow_hit_count: 46515, fast_hit_count: 19174 */
  b = ((1 << bits) - 1) & b; /* line 6 slow_hit_count: 46515, fast_hit_count: 19174 */
  return a < b; /* line 7 slow_hit_count: 46515, fast_hit_count: 19174 */
} /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &n); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  int vec[n]; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 13 slow_hit_count: 101, fast_hit_count: 51 */
    scanf("%d", &vec[i]); /* line 14 slow_hit_count: 100, fast_hit_count: 50 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  ans = 0; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  int pot = 1; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 25; i++) { /* line 19 slow_hit_count: 26, fast_hit_count: 26 */
    bits = i; /* line 20 slow_hit_count: 25, fast_hit_count: 25 */
    sort(vec, vec + n, cmp); /* line 21 slow_hit_count: 25, fast_hit_count: 25 */
    int cnt = 0; /* line 22 slow_hit_count: 25, fast_hit_count: 25 */
    for (int j = 0; j < n; j++) { /* line 23 slow_hit_count: 2525, fast_hit_count: 1275 */
      int num = (((1 << bits) - 1) & vec[j]); /* line 24 slow_hit_count: 2500, fast_hit_count: 1250 */
      int aux = (1 << (bits - 1)); /* line 25 slow_hit_count: 2500, fast_hit_count: 1250 */
      int ini = j + 1, fin; /* line 26 slow_hit_count: 2500, fast_hit_count: 1250 */
      if (aux - num >= 0) /* line 27 slow_hit_count: 2500, fast_hit_count: 1250 */
        ini = max(ini, (int)(lower_bound(vec, vec + n, aux - num, cmp) - vec)); /* line 28 slow_hit_count: 2283, fast_hit_count: 1164 */
      aux = (1 << bits) - 1; /* line 29 slow_hit_count: 2500, fast_hit_count: 1250 */
      fin = upper_bound(vec, vec + n, aux - num, cmp) - vec; /* line 30 slow_hit_count: 2500, fast_hit_count: 1250 */
      if (ini < fin) cnt += fin - ini; /* line 31 slow_hit_count: 2500, fast_hit_count: 1250 */
      aux = (1 << (bits - 1)) + (1 << bits); /* line 32 slow_hit_count: 2500, fast_hit_count: 1250 */
      if (aux - num >= (1 << bits)) /* line 33 slow_hit_count: 2500, fast_hit_count: 1250 */
        ini = n; /* line 34 slow_hit_count: 2283, fast_hit_count: 1164 */
      else /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
        ini = /* line 36 slow_hit_count: 217, fast_hit_count: 86 */
            max(j + 1, (int)(lower_bound(vec, vec + n, aux - num, cmp) - vec)); /* line 37 slow_hit_count: 217, fast_hit_count: 86 */
      fin = n; /* line 38 slow_hit_count: 2500, fast_hit_count: 1250 */
      if (ini < fin) cnt += fin - ini; /* line 39 slow_hit_count: 2500, fast_hit_count: 1250 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    if (cnt % 2 == 1) ans += pot; /* line 41 slow_hit_count: 25, fast_hit_count: 25 */
    pot <<= 1; /* line 42 slow_hit_count: 25, fast_hit_count: 25 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 45 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Let's analyze the given C program to identify performance bottlenecks and derive performance-characterizing invariants based on the slow and fast input scenarios.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**
    - The `cmp` function (lines 4-7) is hit significantly more often in the slow input compared to the fast input, suggesting it's called multiple times, likely due to sorting operations.
    - The loop inside `main` that iterates over `j` (line 23) is also hit more frequently in the slow input, indicating a potential bottleneck here as well.

2. **Potential Bottleneck Analysis:**
    - The program sorts the array `vec` multiple times inside a loop (line 21), which seems to be key to the slowdown. Sorting within a loop that runs 25 times (`i <= 25`) and further loops over `j` up to `n` (line 23) can lead to significant performance overhead for larger `n`.
    - Use of `lower_bound` and `upper_bound`, along with custom comparator `cmp`, suggests that these are contributing to the computational overhead.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following natural language performance invariants can be derived:

1. **Sorting Overhead Invariant:**
   - **Natural Language Description:** "When the array size `n` is large, repeated sorting operations with a custom comparator in a nested loop can lead to significant performance degradation. This is particularly true when the array is sorted multiple times inside loops with a quadratic time complexity aspect."
   - **Threshold Suggestion:** For arrays approaching the maximum constraint (`n = 100` for this scenario), the repeated sort operations become a critical concern.

2. **Comparator Function Overhead Invariant:**
   - **Natural Language Description:** "Frequent use of a custom comparator in sorting routines can slow down performance significantly, especially when nested within multiple iterations over the data structure."
   - **Threshold Suggestion:** The cumulative effect of comparator calls is exacerbated as `n` increases, especially in the presence of additional array transformations or manipulations.

3. **Quadratic Growth Pattern Invariant:**
   - **Natural Language Description:** "If the number of operations grows quadratically with the size of the input due to nested loops and repeated processing of the same data (like sorting), it may lead to severe slowdowns as input size approaches its upper limit."
   - **Threshold Suggestion:** As `n` nears 100, the quadratic growth in operations due to nested loops and sorting can cause substantial performance issues.

These invariants articulate the conditions under which the program experiences significant slowdowns, abstracting away specific numeric values and focusing on potential growth patterns that lead to performance degradation.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Catherine received an array of integers as a gift for March 8. Eventually she grew bored with it, and she started calculated various useless characteristics for it. She succeeded to do it for each one she came up with. But when she came up with another one — xor of all pairwise sums of elements in the array, she realized that she couldn't compute it for a very large array, thus she asked for your help. Can you do it? Formally, you need to compute

$$$ (a_1 + a_2) ⊕ (a_1 + a_3) ⊕ … ⊕ (a_1 + a_n) \\\ ⊕ (a_2 + a_3) ⊕ … ⊕ (a_2 + a_n) \\\ … \\\ ⊕ (a_{n-1} + a_n) \\\ $$$

Here x ⊕ y is a bitwise XOR operation (i.e. x ^ y in many modern programming languages). You can read about it in Wikipedia: <https://en.wikipedia.org/wiki/Exclusive_or#Bitwise_operation>.

Input

The first line contains a single integer n (2 ≤ n ≤ 400 000) — the number of integers in the array.

The second line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^7).

Output

Print a single integer — xor of all pairwise sums of integers in the given array.

Examples

Input


2
1 2


Output


3

Input


3
1 2 3


Output


2

Note

In the first sample case there is only one sum 1 + 2 = 3.

In the second sample case there are three sums: 1 + 2 = 3, 1 + 3 = 4, 2 + 3 = 5. In binary they are represented as 011_2 ⊕ 100_2 ⊕ 101_2 = 010_2, thus the answer is 2.

⊕ is the bitwise xor operation. To define x ⊕ y, consider binary representations of integers x and y. We put the i-th bit of the result to be 1 when exactly one of the i-th bits of x and y is 1. Otherwise, the i-th bit of the result is put to be 0. For example, 0101_2   ⊕   0011_2 = 0110_2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Performance-Characterizing Invariants in C++

Based on the natural language invariants derived earlier, here are the C++ code snippets to check for potential performance bottlenecks:

```cpp
void check_sorting_overhead_invariant(int n, int timesSorted, int maxAllowedSize) {
    if (n > maxAllowedSize && timesSorted > 1) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive sorting detected for large array size!" << endl;
        abort();
    }
}

void check_comparator_overhead_invariant(int comparatorCalls, int threshold) {
    if (comparatorCalls > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive calls to comparator function!" << endl;
        abort();
    }
}

void check_quadratic_growth_invariant(int n, int iterations, int maxAllowedIterations) {
    if (n * iterations > maxAllowedIterations) {
        cerr << "Warning: Performance bottleneck condition triggered - quadratic growth pattern detected!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Now, let's integrate these checks into the provided C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

int bits;
bool cmp(int a, int b) {
    a = ((1 << bits) - 1) & a;
    b = ((1 << bits) - 1) & b;
    return a < b;
}

void check_sorting_overhead_invariant(int n, int timesSorted, int maxAllowedSize) {
    if (n > maxAllowedSize && timesSorted > 1) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive sorting detected for large array size!" << endl;
        abort();
    }
}

void check_comparator_overhead_invariant(int comparatorCalls, int threshold) {
    if (comparatorCalls > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive calls to comparator function!" << endl;
        abort();
    }
}

void check_quadratic_growth_invariant(int n, int iterations, int maxAllowedIterations) {
    if (n * iterations > maxAllowedIterations) {
        cerr << "Warning: Performance bottleneck condition triggered - quadratic growth pattern detected!" << endl;
        abort();
    }
}

int main() {
    int n;
    scanf("%d", &n);
    int vec[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &vec[i]);
    }

    int ans = 0;
    int pot = 1;
    int comparatorCallCount = 0;

    for (int i = 1; i <= 25; i++) {
        bits = i;
        
        // Check for excessive sorting
        check_sorting_overhead_invariant(n, i, 100); // Max size set to 100 for demonstration

        sort(vec, vec + n, [&](int a, int b) {
            comparatorCallCount++;
            return cmp(a, b);
        });

        int cnt = 0;
        for (int j = 0; j < n; j++) {
            int num = (((1 << bits) - 1) & vec[j]);
            int aux = (1 << (bits - 1));
            int ini = j + 1, fin;

            if (aux - num >= 0)
                ini = max(ini, (int)(lower_bound(vec, vec + n, aux - num, cmp) - vec));
            aux = (1 << bits) - 1;
            fin = upper_bound(vec, vec + n, aux - num, cmp) - vec;
            if (ini < fin) cnt += fin - ini;
            aux = (1 << (bits - 1)) + (1 << bits);
            if (aux - num >= (1 << bits))
                ini = n;
            else
                ini = max(j + 1, (int)(lower_bound(vec, vec + n, aux - num, cmp) - vec));
            fin = n;
            if (ini < fin) cnt += fin - ini;
        }

        // Check for quadratic growth
        check_quadratic_growth_invariant(n, 25, 10000); // Arbitrary threshold for demonstration

        if (cnt % 2 == 1) ans += pot;
        pot <<= 1;
    }

    // Check for excessive comparator calls
    check_comparator_overhead_invariant(comparatorCallCount, 50000); // Arbitrary threshold for demonstration

    printf("%d\n", ans);
    return 0;
}
```

### Explanation

- **Sorting Overhead Invariant:** This check is placed before each sorting operation to catch excessive sorting operations when `n` is large.
- **Comparator Overhead Invariant:** This check is placed after all sort calls to ensure the comparator is not excessively invoked.
- **Quadratic Growth Invariant:** This check is placed after the inner loop to ensure the quadratic growth due to nested loops does not exceed a threshold.

These checks are designed to capture conditions that can lead to performance bottlenecks, as derived from the natural language invariants. The thresholds used here are for demonstration purposes and should be adjusted according to the specific performance requirements and constraints of the task.

