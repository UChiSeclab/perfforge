system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Catherine received an array of integers as a gift for March 8. Eventually she grew bored with it, and she started calculated various useless characteristics for it. She succeeded to do it for each one she came up with. But when she came up with another one — xor of all pairwise sums of elements in the array, she realized that she couldn't compute it for a very large array, thus she asked for your help. Can you do it? Formally, you need to compute

$$$ (a_1 + a_2) ⊕ (a_1 + a_3) ⊕ … ⊕ (a_1 + a_n) \\\ ⊕ (a_2 + a_3) ⊕ … ⊕ (a_2 + a_n) \\\ … \\\ ⊕ (a_{n-1} + a_n) \\\ $$$

Here x ⊕ y is a bitwise XOR operation (i.e. x ^ y in many modern programming languages). You can read about it in Wikipedia: <https://en.wikipedia.org/wiki/Exclusive_or#Bitwise_operation>.

Input

The first line contains a single integer n (2 ≤ n ≤ 400 000) — the number of integers in the array.

The second line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^7).

Output

Print a single integer — xor of all pairwise sums of integers in the given array.

Examples

Input


2
1 2


Output


3

Input


3
1 2 3


Output


2

Note

In the first sample case there is only one sum 1 + 2 = 3.

In the second sample case there are three sums: 1 + 2 = 3, 1 + 3 = 4, 2 + 3 = 5. In binary they are represented as 011_2 ⊕ 100_2 ⊕ 101_2 = 010_2, thus the answer is 2.

⊕ is the bitwise xor operation. To define x ⊕ y, consider binary representations of integers x and y. We put the i-th bit of the result to be 1 when exactly one of the i-th bits of x and y is 1. Otherwise, the i-th bit of the result is put to be 0. For example, 0101_2   ⊕   0011_2 = 0110_2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long double eps = (long double)1 / 1e7;
long long inf = INT_MAX, mod2 = 998244353, mod1 = 1e9 + 7;
long long sqr(long long a) { return a * a; }
long long qb(long long a) { return a * a * a; }
long long gcd(long long a, long long b) { return !a ? b : gcd(b % a, a); }
long long binpow(long long a, long long b, long long mod) {
  return b ? (b % 2 ? (a * (sqr(binpow(a, b / 2, mod)) % mod)) % mod
                    : sqr(binpow(a, b / 2, mod)) % mod)
           : 1;
}
long long binmult(long long a, long long b, long long mod) {
  return b ? (b % 2 ? (2 * binmult(a, b / 2, mod) + a) % mod
                    : (2 * binmult(a, b / 2, mod)) % mod)
           : 0;
}
const long long R = 1e4;
const long long tx[4] = {0, 0, -1, 1};
const long long ty[4] = {-1, 1, 0, 0};
const char rev_to[4] = {'E', 'W', 'N', 'S'};
const long long N = 2 * 1e5 + 4;
long long need(long long i, vector<long long> &b, long long pos_in_v) {
  long long first = upper_bound(b.begin() + pos_in_v + 1, b.end(),
                                (1ll << i + 1) - b[pos_in_v] - 1) -
                    b.begin() - pos_in_v;
  first -=
      lower_bound(b.begin() + pos_in_v + 1, b.end(), (1ll << i) - b[pos_in_v]) -
      b.begin();
  long long second = upper_bound(b.begin() + pos_in_v + 1, b.end(),
                                 (1ll << i + 2) - 2 - b[pos_in_v]) -
                     b.begin() - pos_in_v;
  second -= lower_bound(b.begin() + pos_in_v + 1, b.end(),
                        (1ll << i + 1) + (1ll << i) - b[pos_in_v]) -
            b.begin();
  return first + second;
}
bool add(long long bit, vector<long long> a) {
  vector<long long> b((long long)a.size());
  long long n = (long long)a.size();
  for (long long i = 0; i < n; i++) {
    b[i] = a[i] % (1ll << bit + 1);
  }
  sort(b.begin(), b.end());
  long long cnt = 0;
  for (long long i = 0; i < n; i++) {
    cnt += need(bit, b, i);
  }
  return cnt % 2;
}
signed main() {
  cin.tie(0);
  cout.tie(0);
  ios_base::sync_with_stdio(0);
  ;
  long long n;
  cin >> n;
  vector<long long> a(n);
  for (auto &z : a) cin >> z;
  long long ans = 0;
  for (long long i = 0; i < 32; i++) {
    if (add(i, a)) {
      ans += (1ll << i);
    }
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 41 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100


(G.2) Fast Input

50
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long double eps = (long double)1 / 1e7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long inf = INT_MAX, mod2 = 998244353, mod1 = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long sqr(long long a) { return a * a; } /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
long long qb(long long a) { return a * a * a; } /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long a, long long b) { return !a ? b : gcd(b % a, a); } /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
long long binpow(long long a, long long b, long long mod) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  return b ? (b % 2 ? (a * (sqr(binpow(a, b / 2, mod)) % mod)) % mod /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
                    : sqr(binpow(a, b / 2, mod)) % mod) /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
           : 1; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long long binmult(long long a, long long b, long long mod) { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  return b ? (b % 2 ? (2 * binmult(a, b / 2, mod) + a) % mod /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
                    : (2 * binmult(a, b / 2, mod)) % mod) /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
           : 0; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
const long long R = 1e4; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
const long long tx[4] = {0, 0, -1, 1}; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
const long long ty[4] = {-1, 1, 0, 0}; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
const char rev_to[4] = {'E', 'W', 'N', 'S'}; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
const long long N = 2 * 1e5 + 4; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
long long need(long long i, vector<long long> &b, long long pos_in_v) { /* line 23 slow_hit_count: 3200, fast_hit_count: 1600 */
  long long first = upper_bound(b.begin() + pos_in_v + 1, b.end(), /* line 24 slow_hit_count: 3200, fast_hit_count: 1600 */
                                (1ll << i + 1) - b[pos_in_v] - 1) - /* line 25 slow_hit_count: 6400, fast_hit_count: 3200 */
                    b.begin() - pos_in_v; /* line 26 slow_hit_count: 3200, fast_hit_count: 1600 */
  first -= /* line 27 slow_hit_count: 3200, fast_hit_count: 1600 */
      lower_bound(b.begin() + pos_in_v + 1, b.end(), (1ll << i) - b[pos_in_v]) - /* line 28 slow_hit_count: 3200, fast_hit_count: 1600 */
      b.begin(); /* line 29 slow_hit_count: 3200, fast_hit_count: 1600 */
  long long second = upper_bound(b.begin() + pos_in_v + 1, b.end(), /* line 30 slow_hit_count: 3200, fast_hit_count: 1600 */
                                 (1ll << i + 2) - 2 - b[pos_in_v]) - /* line 31 slow_hit_count: 6400, fast_hit_count: 3200 */
                     b.begin() - pos_in_v; /* line 32 slow_hit_count: 3200, fast_hit_count: 1600 */
  second -= lower_bound(b.begin() + pos_in_v + 1, b.end(), /* line 33 slow_hit_count: 3200, fast_hit_count: 1600 */
                        (1ll << i + 1) + (1ll << i) - b[pos_in_v]) - /* line 34 slow_hit_count: 6400, fast_hit_count: 3200 */
            b.begin(); /* line 35 slow_hit_count: 3200, fast_hit_count: 1600 */
  return first + second; /* line 36 slow_hit_count: 3200, fast_hit_count: 1600 */
} /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
bool add(long long bit, vector<long long> a) { /* line 38 slow_hit_count: 32, fast_hit_count: 32 */
  vector<long long> b((long long)a.size()); /* line 39 slow_hit_count: 32, fast_hit_count: 32 */
  long long n = (long long)a.size(); /* line 40 slow_hit_count: 32, fast_hit_count: 32 */
  for (long long i = 0; i < n; i++) { /* line 41 slow_hit_count: 3232, fast_hit_count: 1632 */
    b[i] = a[i] % (1ll << bit + 1); /* line 42 slow_hit_count: 3200, fast_hit_count: 1600 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  sort(b.begin(), b.end()); /* line 44 slow_hit_count: 32, fast_hit_count: 32 */
  long long cnt = 0; /* line 45 slow_hit_count: 32, fast_hit_count: 32 */
  for (long long i = 0; i < n; i++) { /* line 46 slow_hit_count: 3232, fast_hit_count: 1632 */
    cnt += need(bit, b, i); /* line 47 slow_hit_count: 3200, fast_hit_count: 1600 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  return cnt % 2; /* line 49 slow_hit_count: 64, fast_hit_count: 64 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  long long n; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> a(n); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto &z : a) cin >> z; /* line 59 slow_hit_count: 101, fast_hit_count: 51 */
  long long ans = 0; /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < 32; i++) { /* line 61 slow_hit_count: 33, fast_hit_count: 33 */
    if (add(i, a)) { /* line 62 slow_hit_count: 32, fast_hit_count: 32 */
      ans += (1ll << i); /* line 63 slow_hit_count: 3, fast_hit_count: 2 */
    } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 68 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance bottleneck in the given C program, we need to analyze the code execution and identify where the slow input triggers significant delays compared to the fast input. Based on the provided hit counts, we can derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Function `need`:** This function is called significantly more times for the slow input than the fast input. The slow input shows that it gets hit 3200 times compared to 1600 times with the fast input. This suggests that this function is a core contributor to the slowdown.

2. **Function `add`:** The loop inside this function (lines 41-47) also shows increased hit counts for the slow input. Specifically, the line `cnt += need(bit, b, i);` (line 47) is a major contributor to this.

3. **Sorting Operation:** The sorting operation on line 44 (`sort(b.begin(), b.end());`) is executed 32 times, which implies that for each bit level from 0 to 31, this sort operation is repeated. While sorting itself is not the most hit operation, it contributes to the overall cost due to its execution frequency.

### Phase 2: Derive Performance-Characterizing Invariants

Here are the natural language statements describing the conditions under which the program likely enters a slow path:

1. **High Frequency of Pairwise Operations:**
   - "The program becomes inefficient when the function `need`, responsible for calculating pairwise sums within a loop, is invoked excessively. This happens more frequently when the input size `n` is approaching its upper constraint, leading to a quadratic number of pairwise comparisons."

2. **Repetition of Sorting in Loops:**
   - "Repeated sorting operations within the `add` function contribute to slow performance. Even though the sorting is for a reduced dataset (using bitwise conditions), running it repeatedly across 32 iterations (for each bit) exacerbates the inefficiency, especially as `n` increases."

3. **Impact of Input Size Near Constraint:**
   - "When the input size `n` is large and close to the constraint limit (e.g., `n` is near 100), the nested operations in the `need` function result in excessive computational overhead due to the quadratic growth of pairwise iterations."

These statements abstract the specific numeric values from the slow input, focusing instead on the general conditions and structures that lead to inefficiencies. These conditions are centered on the complexity of operations related to large input sizes and repeated computational steps, reflecting the pattern of the function calls and data manipulations that cause the slowdown.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Catherine received an array of integers as a gift for March 8. Eventually she grew bored with it, and she started calculated various useless characteristics for it. She succeeded to do it for each one she came up with. But when she came up with another one — xor of all pairwise sums of elements in the array, she realized that she couldn't compute it for a very large array, thus she asked for your help. Can you do it? Formally, you need to compute

$$$ (a_1 + a_2) ⊕ (a_1 + a_3) ⊕ … ⊕ (a_1 + a_n) \\\ ⊕ (a_2 + a_3) ⊕ … ⊕ (a_2 + a_n) \\\ … \\\ ⊕ (a_{n-1} + a_n) \\\ $$$

Here x ⊕ y is a bitwise XOR operation (i.e. x ^ y in many modern programming languages). You can read about it in Wikipedia: <https://en.wikipedia.org/wiki/Exclusive_or#Bitwise_operation>.

Input

The first line contains a single integer n (2 ≤ n ≤ 400 000) — the number of integers in the array.

The second line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^7).

Output

Print a single integer — xor of all pairwise sums of integers in the given array.

Examples

Input


2
1 2


Output


3

Input


3
1 2 3


Output


2

Note

In the first sample case there is only one sum 1 + 2 = 3.

In the second sample case there are three sums: 1 + 2 = 3, 1 + 3 = 4, 2 + 3 = 5. In binary they are represented as 011_2 ⊕ 100_2 ⊕ 101_2 = 010_2, thus the answer is 2.

⊕ is the bitwise xor operation. To define x ⊕ y, consider binary representations of integers x and y. We put the i-th bit of the result to be 1 when exactly one of the i-th bits of x and y is 1. Otherwise, the i-th bit of the result is put to be 0. For example, 0101_2   ⊕   0011_2 = 0110_2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the checker functions in C++ based on the performance-characterizing invariants derived in natural language:

1. **High Frequency of Pairwise Operations:**

```cpp
void check_pairwise_operations_invariant(long long n, long long maxAllowedSize) {
    if (n > maxAllowedSize) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive pairwise operations!" << endl;
        abort();
    }
}
```

2. **Repetition of Sorting in Loops:**

```cpp
void check_repeated_sorting_invariant(long long numSorts, long long n) {
    if (numSorts > 30 && n > 70) { // Example threshold for repeated sorting cost
        cerr << "Warning: Performance bottleneck condition triggered - repeated sorting operations!" << endl;
        abort();
    }
}
```

3. **Impact of Input Size Near Constraint:**

```cpp
void check_input_size_invariant(long long n, long long threshold) {
    if (n > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - large input size!" << endl;
        abort();
    }
}
```

### Phase 4: Propagate and Insert Conditional Checks

Now, we will integrate the checker functions into the original C++ code by placing them at effective points in the control flow. This integration ensures that the program checks for potential performance bottlenecks during execution.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for excessive pairwise operation
void check_pairwise_operations_invariant(long long n, long long maxAllowedSize) {
    if (n > maxAllowedSize) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive pairwise operations!" << endl;
        abort();
    }
}

// Checker for repeated sorting
void check_repeated_sorting_invariant(long long numSorts, long long n) {
    if (numSorts > 30 && n > 70) { // Threshold for repeated sorting cost
        cerr << "Warning: Performance bottleneck condition triggered - repeated sorting operations!" << endl;
        abort();
    }
}

// Checker for large input size
void check_input_size_invariant(long long n, long long threshold) {
    if (n > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - large input size!" << endl;
        abort();
    }
}

long long need(long long i, vector<long long> &b, long long pos_in_v) {
    long long first = upper_bound(b.begin() + pos_in_v + 1, b.end(), (1ll << (i + 1)) - b[pos_in_v] - 1) - b.begin() - pos_in_v;
    first -= lower_bound(b.begin() + pos_in_v + 1, b.end(), (1ll << i) - b[pos_in_v]) - b.begin();
    long long second = upper_bound(b.begin() + pos_in_v + 1, b.end(), (1ll << (i + 2)) - 2 - b[pos_in_v]) - b.begin() - pos_in_v;
    second -= lower_bound(b.begin() + pos_in_v + 1, b.end(), (1ll << (i + 1)) + (1ll << i) - b[pos_in_v]) - b.begin();
    return first + second;
}

bool add(long long bit, vector<long long> a) {
    vector<long long> b((long long)a.size());
    long long n = (long long)a.size();
    for (long long i = 0; i < n; i++) {
        b[i] = a[i] % (1ll << (bit + 1));
    }
    sort(b.begin(), b.end());
    long long cnt = 0;
    for (long long i = 0; i < n; i++) {
        cnt += need(bit, b, i);
    }
    return cnt % 2;
}

signed main() {
    cin.tie(0);
    cout.tie(0);
    ios_base::sync_with_stdio(0);
    
    long long n;
    cin >> n;
    vector<long long> a(n);
    for (auto &z : a) cin >> z;
    
    // Insert checkers
    check_pairwise_operations_invariant(n, 80); // Example threshold for pairwise operations
    check_input_size_invariant(n, 90); // Example threshold for large input size

    long long ans = 0;
    for (long long i = 0; i < 32; i++) {
        // Check repeated sorting (in `add` function)
        check_repeated_sorting_invariant(i, n);
        if (add(i, a)) {
            ans += (1ll << i);
        }
    }
    cout << ans;
    return 0;
}
```

**Explanation of Inserted Checks:**
- **`check_pairwise_operations_invariant`:** Added after input to ensure the program doesn't proceed with excessive pairwise operations if `n` is too large.
- **`check_repeated_sorting_invariant`:** Placed inside the loop that iterates over bits to limit the cost of repeated sorting when both `i` and `n` are large.
- **`check_input_size_invariant`:** Added immediately after input to catch excessive input sizes which may lead to performance issues.

These integrated checks will abort the program and provide warnings when performance-critical conditions are met, helping to trace and understand the bottlenecks during runtime.

