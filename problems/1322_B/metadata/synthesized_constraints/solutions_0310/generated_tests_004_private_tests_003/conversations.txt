system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Catherine received an array of integers as a gift for March 8. Eventually she grew bored with it, and she started calculated various useless characteristics for it. She succeeded to do it for each one she came up with. But when she came up with another one — xor of all pairwise sums of elements in the array, she realized that she couldn't compute it for a very large array, thus she asked for your help. Can you do it? Formally, you need to compute

$$$ (a_1 + a_2) ⊕ (a_1 + a_3) ⊕ … ⊕ (a_1 + a_n) \\\ ⊕ (a_2 + a_3) ⊕ … ⊕ (a_2 + a_n) \\\ … \\\ ⊕ (a_{n-1} + a_n) \\\ $$$

Here x ⊕ y is a bitwise XOR operation (i.e. x ^ y in many modern programming languages). You can read about it in Wikipedia: <https://en.wikipedia.org/wiki/Exclusive_or#Bitwise_operation>.

Input

The first line contains a single integer n (2 ≤ n ≤ 400 000) — the number of integers in the array.

The second line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^7).

Output

Print a single integer — xor of all pairwise sums of integers in the given array.

Examples

Input


2
1 2


Output


3

Input


3
1 2 3


Output


2

Note

In the first sample case there is only one sum 1 + 2 = 3.

In the second sample case there are three sums: 1 + 2 = 3, 1 + 3 = 4, 2 + 3 = 5. In binary they are represented as 011_2 ⊕ 100_2 ⊕ 101_2 = 010_2, thus the answer is 2.

⊕ is the bitwise xor operation. To define x ⊕ y, consider binary representations of integers x and y. We put the i-th bit of the result to be 1 when exactly one of the i-th bits of x and y is 1. Otherwise, the i-th bit of the result is put to be 0. For example, 0101_2   ⊕   0011_2 = 0110_2.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
void zanj0() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
}
void out(vector<int>& v) {
  for (int i : v) {
    cout << i << " ";
  }
  cout << "\n";
}
int getVal(vector<int>& v, int curr, int till, int dontTake) {
  int low = curr;
  int high = v.size() - 1;
  int start = -1, endd = -1;
  while (low <= high) {
    int mid = low + (high - low) / 2;
    if (v[mid] >= till) {
      start = mid;
      high = mid - 1;
    } else {
      low = mid + 1;
    }
  }
  low = curr;
  high = v.size() - 1;
  endd = high + 1;
  while (low <= high) {
    int mid = low + (high - low) / 2;
    if (v[mid] >= dontTake) {
      endd = mid;
      high = mid - 1;
    } else {
      low = mid + 1;
    }
  }
  if (start == -1 || endd < start) return 0;
  return endd - start;
}
void solve() {
  int n;
  cin >> n;
  vector<int> v(n), v2(n);
  for (int i = 0; i < n; i++) cin >> v[i];
  int ret = 0;
  for (int i = 0; i <= 24; i++) {
    int div = (1l << (i + 1));
    for (int j = 0; j < n; j++) {
      v2[j] = v[j] % div;
    }
    sort(v2.begin(), v2.end());
    int cnt = 0;
    for (int j = 0; j + 1 < n; j++) {
      int firstTill = pow(2, i) - v2[j];
      int firstDontTake = pow(2, i + 1) - v2[j];
      cnt += getVal(v2, j + 1, firstTill, firstDontTake);
      int secondTill = pow(2, i) + pow(2, i + 1) - v2[j];
      int secondDontTake = (pow(2, i + 2) - 2) + 1 - v2[j];
      cnt += getVal(v2, j + 1, secondTill, secondDontTake);
    }
    if (cnt & 1) ret += pow(2, i);
  }
  cout << ret << "\n";
}
int32_t main() {
  zanj0();
  solve();
  cerr << "Time : " << 1000 * (long double)clock() / (long double)CLOCKS_PER_SEC
       << "ms\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 41 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100


(G.2) Fast Input

50
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
void zanj0() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
void out(vector<int>& v) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i : v) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    cout << i << " "; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "\n"; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int getVal(vector<int>& v, int curr, int till, int dontTake) { /* line 14 slow_hit_count: 4950, fast_hit_count: 2450 */
  int low = curr; /* line 15 slow_hit_count: 4950, fast_hit_count: 2450 */
  int high = v.size() - 1; /* line 16 slow_hit_count: 4950, fast_hit_count: 2450 */
  int start = -1, endd = -1; /* line 17 slow_hit_count: 4950, fast_hit_count: 2450 */
  while (low <= high) { /* line 18 slow_hit_count: 32897, fast_hit_count: 14023 */
    int mid = low + (high - low) / 2; /* line 19 slow_hit_count: 27947, fast_hit_count: 11573 */
    if (v[mid] >= till) { /* line 20 slow_hit_count: 27947, fast_hit_count: 11573 */
      start = mid; /* line 21 slow_hit_count: 3457, fast_hit_count: 1166 */
      high = mid - 1; /* line 22 slow_hit_count: 3457, fast_hit_count: 1166 */
    } else { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      low = mid + 1; /* line 24 slow_hit_count: 24490, fast_hit_count: 10407 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  low = curr; /* line 27 slow_hit_count: 4950, fast_hit_count: 2450 */
  high = v.size() - 1; /* line 28 slow_hit_count: 4950, fast_hit_count: 2450 */
  endd = high + 1; /* line 29 slow_hit_count: 4950, fast_hit_count: 2450 */
  while (low <= high) { /* line 30 slow_hit_count: 33211, fast_hit_count: 14155 */
    int mid = low + (high - low) / 2; /* line 31 slow_hit_count: 28261, fast_hit_count: 11705 */
    if (v[mid] >= dontTake) { /* line 32 slow_hit_count: 28261, fast_hit_count: 11705 */
      endd = mid; /* line 33 slow_hit_count: 1839, fast_hit_count: 608 */
      high = mid - 1; /* line 34 slow_hit_count: 1839, fast_hit_count: 608 */
    } else { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      low = mid + 1; /* line 36 slow_hit_count: 26422, fast_hit_count: 11097 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  if (start == -1 || endd < start) return 0; /* line 39 slow_hit_count: 4950, fast_hit_count: 2450 */
  return endd - start; /* line 40 slow_hit_count: 949, fast_hit_count: 398 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> v(n), v2(n); /* line 45 slow_hit_count: 3, fast_hit_count: 3 */
  for (int i = 0; i < n; i++) cin >> v[i]; /* line 46 slow_hit_count: 101, fast_hit_count: 51 */
  int ret = 0; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= 24; i++) { /* line 48 slow_hit_count: 26, fast_hit_count: 26 */
    int div = (1l << (i + 1)); /* line 49 slow_hit_count: 25, fast_hit_count: 25 */
    for (int j = 0; j < n; j++) { /* line 50 slow_hit_count: 2525, fast_hit_count: 1275 */
      v2[j] = v[j] % div; /* line 51 slow_hit_count: 2500, fast_hit_count: 1250 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
    sort(v2.begin(), v2.end()); /* line 53 slow_hit_count: 25, fast_hit_count: 25 */
    int cnt = 0; /* line 54 slow_hit_count: 25, fast_hit_count: 25 */
    for (int j = 0; j + 1 < n; j++) { /* line 55 slow_hit_count: 2500, fast_hit_count: 1250 */
      int firstTill = pow(2, i) - v2[j]; /* line 56 slow_hit_count: 2475, fast_hit_count: 1225 */
      int firstDontTake = pow(2, i + 1) - v2[j]; /* line 57 slow_hit_count: 2475, fast_hit_count: 1225 */
      cnt += getVal(v2, j + 1, firstTill, firstDontTake); /* line 58 slow_hit_count: 2475, fast_hit_count: 1225 */
      int secondTill = pow(2, i) + pow(2, i + 1) - v2[j]; /* line 59 slow_hit_count: 2475, fast_hit_count: 1225 */
      int secondDontTake = (pow(2, i + 2) - 2) + 1 - v2[j]; /* line 60 slow_hit_count: 2475, fast_hit_count: 1225 */
      cnt += getVal(v2, j + 1, secondTill, secondDontTake); /* line 61 slow_hit_count: 2475, fast_hit_count: 1225 */
    } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    if (cnt & 1) ret += pow(2, i); /* line 63 slow_hit_count: 25, fast_hit_count: 25 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ret << "\n"; /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
int32_t main() { /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  zanj0(); /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  cerr << "Time : " << 1000 * (long double)clock() / (long double)CLOCKS_PER_SEC /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
       << "ms\n"; /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 73 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

#### Analysis of Line-Level Hit Counts:

1. **Function `getVal`:**
   - The function `getVal` shows a significant difference in hit counts between the slow and fast inputs. Specifically, lines 18-40 are executed 2 to 3 times more for the slow input than for the fast input.
   - This function seems to be a bottleneck due to its repeated binary search operations.

2. **Loop in `solve`:**
   - The nested loop around the `getVal` function (lines 50-61) is executed more frequently in the slow input, particularly the inner loop on line 55. The high hit counts suggest that the loop's execution time increases significantly as `n` grows.

3. **Sorting Operation:**
   - The `sort` function on line 53 is called as many times as the outer loop runs. While sorting itself is efficient (O(n log n)), its repeated application can become costly depending on the input size.

#### Interaction with Data Structures:
- The program heavily depends on manipulating and sorting the vector `v2`, and performing binary searches on it. Repeated updates and searches within loops can lead to inefficiencies, especially as input size approaches the upper constraints.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants that describe conditions under which the program is likely to slow down:

1. **High Loop Iteration with Expensive Calls:**
   - Natural Language Invariant: "If the outer loop iteration count approaches the maximum input size and involves repeated calls to expensive functions like `getVal`, the program may enter a slow path."
   - This is due to the increased overhead from executing `getVal` multiple times as `n` increases.

2. **Frequent Sorting of Large Arrays:**
   - Natural Language Invariant: "If the vector `v2` is sorted repeatedly in each iteration of a loop whose total operations are amplified by a large input size, the aggregate cost of sorting can slow down the program."
   - The repeated sorting of `v2` for large `n` contributes to the performance degradation.

3. **Resource-Intensive Binary Searches:**
   - Natural Language Invariant: "When the binary search within `getVal` is applied repeatedly over a large range of values, particularly close to the `n` constraint, the cumulative cost may degrade performance."
   - Binary search, although efficient per call, becomes costly when invoked repeatedly for large data sets, contributing to the slowdown.

### Recommendations:
- Consider refactoring parts of the code to reduce repeated sorting and move expensive operations outside of critical loops when possible.
- Investigate whether computations can be combined or optimized to reduce the number of calls to `getVal` and minimize unnecessary recalculations or searches.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Catherine received an array of integers as a gift for March 8. Eventually she grew bored with it, and she started calculated various useless characteristics for it. She succeeded to do it for each one she came up with. But when she came up with another one — xor of all pairwise sums of elements in the array, she realized that she couldn't compute it for a very large array, thus she asked for your help. Can you do it? Formally, you need to compute

$$$ (a_1 + a_2) ⊕ (a_1 + a_3) ⊕ … ⊕ (a_1 + a_n) \\\ ⊕ (a_2 + a_3) ⊕ … ⊕ (a_2 + a_n) \\\ … \\\ ⊕ (a_{n-1} + a_n) \\\ $$$

Here x ⊕ y is a bitwise XOR operation (i.e. x ^ y in many modern programming languages). You can read about it in Wikipedia: <https://en.wikipedia.org/wiki/Exclusive_or#Bitwise_operation>.

Input

The first line contains a single integer n (2 ≤ n ≤ 400 000) — the number of integers in the array.

The second line contains integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^7).

Output

Print a single integer — xor of all pairwise sums of integers in the given array.

Examples

Input


2
1 2


Output


3

Input


3
1 2 3


Output


2

Note

In the first sample case there is only one sum 1 + 2 = 3.

In the second sample case there are three sums: 1 + 2 = 3, 1 + 3 = 4, 2 + 3 = 5. In binary they are represented as 011_2 ⊕ 100_2 ⊕ 101_2 = 010_2, thus the answer is 2.

⊕ is the bitwise xor operation. To define x ⊕ y, consider binary representations of integers x and y. We put the i-th bit of the result to be 1 when exactly one of the i-th bits of x and y is 1. Otherwise, the i-th bit of the result is put to be 0. For example, 0101_2   ⊕   0011_2 = 0110_2.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Below are the C++ code snippets that implement the performance-characterizing invariants derived in Phase 2. These checks are designed to detect potential bottlenecks at runtime.

```cpp
// Check for high loop iteration with expensive calls
void check_high_iteration_invariant(int n, int loopCount, int threshold) {
    if (n >= threshold && loopCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration count with potential expensive calls!" << endl;
        abort();
    }
}

// Check for frequent sorting of large arrays
void check_frequent_sorting_invariant(int n, int sortCount, int threshold) {
    if (n >= threshold && sortCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent sorting of large arrays!" << endl;
        abort();
    }
}

// Check for resource-intensive binary searches
void check_binary_search_invariant(int n, int searchCount, int threshold) {
    if (n >= threshold && searchCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - intensive binary search operations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original C++ Program

Below is the original C++ program with the integrated checker functions. These checks are strategically placed to avoid adding overhead in tight loops and help detect conditions that may lead to slow performance.

```cpp
#include <bits/stdc++.h>
using namespace std;

void zanj0() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
}

// Checkers as defined in Phase 3
void check_high_iteration_invariant(int n, int loopCount, int threshold) {
    if (n >= threshold && loopCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration count with potential expensive calls!" << endl;
        abort();
    }
}

void check_frequent_sorting_invariant(int n, int sortCount, int threshold) {
    if (n >= threshold && sortCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent sorting of large arrays!" << endl;
        abort();
    }
}

void check_binary_search_invariant(int n, int searchCount, int threshold) {
    if (n >= threshold && searchCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - intensive binary search operations!" << endl;
        abort();
    }
}

int getVal(vector<int>& v, int curr, int till, int dontTake) {
  int low = curr;
  int high = v.size() - 1;
  int start = -1, endd = -1;
  while (low <= high) {
    int mid = low + (high - low) / 2;
    if (v[mid] >= till) {
      start = mid;
      high = mid - 1;
    } else {
      low = mid + 1;
    }
  }
  low = curr;
  high = v.size() - 1;
  endd = high + 1;
  while (low <= high) {
    int mid = low + (high - low) / 2;
    if (v[mid] >= dontTake) {
      endd = mid;
      high = mid - 1;
    } else {
      low = mid + 1;
    }
  }
  if (start == -1 || endd < start) return 0;
  return endd - start;
}

void solve() {
  int n;
  cin >> n;
  vector<int> v(n), v2(n);
  for (int i = 0; i < n; i++) cin >> v[i];

  int ret = 0;
  int threshold = 100; // Example threshold based on problem constraints

  // Check potential issues before starting the main loop
  check_frequent_sorting_invariant(n, 25, threshold);

  for (int i = 0; i <= 24; i++) {
    int div = (1l << (i + 1));
    for (int j = 0; j < n; j++) {
      v2[j] = v[j] % div;
    }
    sort(v2.begin(), v2.end());
   
    int cnt = 0;
    int loopCount = 0;
    for (int j = 0; j + 1 < n; j++) {
      int firstTill = pow(2, i) - v2[j];
      int firstDontTake = pow(2, i + 1) - v2[j];
      cnt += getVal(v2, j + 1, firstTill, firstDontTake);

      int secondTill = pow(2, i) + pow(2, i + 1) - v2[j];
      int secondDontTake = (pow(2, i + 2) - 2) + 1 - v2[j];
      cnt += getVal(v2, j + 1, secondTill, secondDontTake);
      
      loopCount++;
    }

    // Check for high iteration count coupled with expensive operations
    check_high_iteration_invariant(n, loopCount, threshold);

    if (cnt & 1) ret += pow(2, i);
  }
  cout << ret << "\n";
}

int32_t main() {
  zanj0();
  solve();
  cerr << "Time : " << 1000 * (long double)clock() / (long double)CLOCKS_PER_SEC << "ms\n";
  return 0;
}
```

### Explanation

- **Placement of Checks:** The checks are placed at strategic points in the `solve` function to monitor the execution before entering critical loops and during iterations.
- **Thresholds:** Chosen based on problem constraints (`n <= 400000`) and typical performance characteristics.
- **Checker Functions:** Abort the program and output a warning if a potential performance bottleneck is detected, helping in identifying slow paths during fuzz testing or debugging.

