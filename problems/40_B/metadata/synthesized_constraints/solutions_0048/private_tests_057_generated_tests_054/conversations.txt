system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A chessboard n × m in size is given. During the zero minute we repaint all the black squares to the 0 color. During the i-th minute we repaint to the i color the initially black squares that have exactly four corner-adjacent squares painted i - 1 (all such squares are repainted simultaneously). This process continues ad infinitum. You have to figure out how many squares we repainted exactly x times.

The upper left square of the board has to be assumed to be always black. Two squares are called corner-adjacent, if they have exactly one common point.

Input

The first line contains integers n and m (1 ≤ n, m ≤ 5000). The second line contains integer x (1 ≤ x ≤ 109).

Output

Print how many squares will be painted exactly x times.

Examples

Input

3 3
1


Output

4


Input

3 3
2


Output

1


Input

1 1
1


Output

1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  long long n, m, x, s = 0;
  cin >> n >> m >> x;
  for (long long i = x; i <= n - x + 1; i++) {
    for (long long j = x; j <= m - x + 1; j++) {
      if (i % 2 == j % 2)
        if (min(min(i, j), min(n - i + 1, m - j + 1)) == x) ++s;
    }
  }
  cout << s;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3250 2992
127


(G.2) Fast Input

3250 195
127


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, m, x, s = 0; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> x; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = x; i <= n - x + 1; i++) { /* line 6 slow_hit_count: 2999, fast_hit_count: 2999 */
    for (long long j = x; j <= m - x + 1; j++) { /* line 7 slow_hit_count: 8217518, fast_hit_count: 2998 */
      if (i % 2 == j % 2) /* line 8 slow_hit_count: 8214520, fast_hit_count: 0 */
        if (min(min(i, j), min(n - i + 1, m - j + 1)) == x) ++s; /* line 9 slow_hit_count: 4107260, fast_hit_count: 0 */
    } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  cout << s; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottleneck in the given C code, we must first look at the provided hit counts for different lines during the execution with both slow and fast inputs. The goal is to identify where the significant differences occur and how those differences relate to the algorithm's performance.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - **Line 6:** The outer loop is executed 2999 times for both inputs, which indicates that the outer loop's range isn't directly contributing to the slowness.
   - **Line 7:** The inner loop is executed 8,217,518 times for the slow input but only 2,998 times for the fast input, indicating that this inner loop is a critical source of slowdown.
   - **Line 8 and Line 9:** These lines are hit for the slow input but not at all for the fast input. This suggests that the condition `i % 2 == j % 2` holds true significantly more often during the slow run.

2. **Interaction with Data Structures:**
   - The loop boundaries depend on the values `n`, `m`, and `x`, directly affecting how often the inner loop executes. The input `x`, which dictates the range of i and j, plays a crucial role in loop execution.
   - The nested loop structure and conditional checks (`i % 2 == j % 2` and `min(min(i, j), min(n - i + 1, m - j + 1)) == x`) create a scenario where certain configurations of `n`, `m`, and `x` lead to significantly more computations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariants:**

   - **Invariant 1:** "If the values of `m` are such that `m` is large and leads to a wide range for the inner loop based on `x`, the program execution will be slower. This situation is particularly impactful when `m` is significantly larger than `x`, leading to more iterations in the nested loop."
   
   - **Invariant 2:** "When `x` is relatively small compared to `n` and `m`, particularly when `m` is large, the inner loop runs more times, as the range `(m - 2*x + 1)` becomes larger. This increases the number of checks for each `i, j` combination, slowing down the program."

   - **Invariant 3:** "The condition `i % 2 == j % 2` being true for a large number of `i, j` combinations contributes to slow performance. This is more likely when `m` is large, allowing more room for such pairs to exist."

2. **Broad Thresholds:**
   - Instead of using specific values from the slow input, recognize that when `m` gets close to the upper limit (e.g., 5000) and `x` is much smaller (e.g., around 127 as in the slow input), the inner loop iterates through a large grid, leading to performance issues.
  
3. **Future Scenarios:**
   - These invariants can help identify potential future slowdowns when `m` approaches its maximum while `x` is kept significantly smaller, suggesting that alterations in the loop's range should be considered carefully.

By focusing on the nested loops and the conditions within, we encapsulate the performance characteristics that lead to the observed slowdown. This analysis helps in understanding how certain configurations of `n`, `m`, and `x` can result in excessive computation, guiding optimizations or refactoring efforts.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A chessboard n × m in size is given. During the zero minute we repaint all the black squares to the 0 color. During the i-th minute we repaint to the i color the initially black squares that have exactly four corner-adjacent squares painted i - 1 (all such squares are repainted simultaneously). This process continues ad infinitum. You have to figure out how many squares we repainted exactly x times.

The upper left square of the board has to be assumed to be always black. Two squares are called corner-adjacent, if they have exactly one common point.

Input

The first line contains integers n and m (1 ≤ n, m ≤ 5000). The second line contains integer x (1 ≤ x ≤ 109).

Output

Print how many squares will be painted exactly x times.

Examples

Input

3 3
1


Output

4


Input

3 3
2


Output

1


Input

1 1
1


Output

1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants into C++ Code

Let's translate the previously inferred natural language invariants into C++ checker code.

#### Invariant 1:
- **Natural Language:** If the values of `m` are such that `m` is large and leads to a wide range for the inner loop based on `x`, the program execution will be slower. This situation is particularly impactful when `m` is significantly larger than `x`, leading to more iterations in the nested loop.

```cpp
void check_large_m_invariant(long long m, long long x) {
    if (m - 2 * x + 1 > 1000) { // Threshold is chosen based on problem constraints
        cerr << "Warning: Performance bottleneck - large range for inner loop due to m" << endl;
        abort();
    }
}
```

#### Invariant 2:
- **Natural Language:** When `x` is relatively small compared to `n` and `m`, particularly when `m` is large, the inner loop runs more times, as the range `(m - 2*x + 1)` becomes larger. This increases the number of checks for each `i, j` combination, slowing down the program.

```cpp
void check_small_x_invariant(long long n, long long m, long long x) {
    if (x < n / 10 && m > 1000) { // Example threshold where x is small compared to n, and m is large
        cerr << "Warning: Performance bottleneck - small x relative to large m" << endl;
        abort();
    }
}
```

#### Invariant 3:
- **Natural Language:** The condition `i % 2 == j % 2` being true for a large number of `i, j` combinations contributes to slow performance. This is more likely when `m` is large, allowing more room for such pairs to exist.

```cpp
void check_even_matching_condition(long long m) {
    if (m > 1000) { // Large m increases chances of i % 2 == j % 2 conditions
        cerr << "Warning: Performance bottleneck - high matches for even-index condition" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now, let's integrate these checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checkers for performance bottlenecks
void check_large_m_invariant(long long m, long long x) {
    if (m - 2 * x + 1 > 1000) {
        cerr << "Warning: Performance bottleneck - large range for inner loop due to m" << endl;
        abort();
    }
}

void check_small_x_invariant(long long n, long long m, long long x) {
    if (x < n / 10 && m > 1000) {
        cerr << "Warning: Performance bottleneck - small x relative to large m" << endl;
        abort();
    }
}

void check_even_matching_condition(long long m) {
    if (m > 1000) {
        cerr << "Warning: Performance bottleneck - high matches for even-index condition" << endl;
        abort();
    }
}

int main() {
    long long n, m, x, s = 0;
    cin >> n >> m >> x;

    // Insert performance checks before heavy computations
    check_large_m_invariant(m, x);
    check_small_x_invariant(n, m, x);
    check_even_matching_condition(m);

    for (long long i = x; i <= n - x + 1; i++) {
        for (long long j = x; j <= m - x + 1; j++) {
            if (i % 2 == j % 2)
                if (min(min(i, j), min(n - i + 1, m - j + 1)) == x) ++s;
        }
    }
    cout << s;
    return 0;
}
```

### Explanation of Integration:

- **Placement of Checks:** The checks are placed immediately after reading the input values and before entering the nested loops. This ensures no added overhead within the loops while still effectively catching the potential performance bottlenecks.
- **Thresholds:** These are set based on problem constraints, avoiding hardcoding of specific input values but capturing broad scenarios that could lead to slowdowns.

