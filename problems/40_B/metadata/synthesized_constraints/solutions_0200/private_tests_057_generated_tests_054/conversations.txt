system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A chessboard n × m in size is given. During the zero minute we repaint all the black squares to the 0 color. During the i-th minute we repaint to the i color the initially black squares that have exactly four corner-adjacent squares painted i - 1 (all such squares are repainted simultaneously). This process continues ad infinitum. You have to figure out how many squares we repainted exactly x times.

The upper left square of the board has to be assumed to be always black. Two squares are called corner-adjacent, if they have exactly one common point.

Input

The first line contains integers n and m (1 ≤ n, m ≤ 5000). The second line contains integer x (1 ≤ x ≤ 109).

Output

Print how many squares will be painted exactly x times.

Examples

Input

3 3
1


Output

4


Input

3 3
2


Output

1


Input

1 1
1


Output

1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
int n, m, x, r, i, j;
int main() {
  scanf("%d%d%d", &n, &m, &x);
  for (i = x; i <= n - x + 1; i++)
    for (j = x; j <= m - x + 1; j++)
      if (((i + j) & 1) == 0 &&
          (i == x || i == n - x + 1 || j == x || j == m - x + 1))
        r++;
  printf("%d\n", r);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3250 2992
127


(G.2) Fast Input

3250 195
127


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, x, r, i, j; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d%d", &n, &m, &x); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = x; i <= n - x + 1; i++) /* line 5 slow_hit_count: 2999, fast_hit_count: 2999 */
    for (j = x; j <= m - x + 1; j++) /* line 6 slow_hit_count: 8217518, fast_hit_count: 2998 */
      if (((i + j) & 1) == 0 && /* line 7 slow_hit_count: 8214520, fast_hit_count: 0 */
          (i == x || i == n - x + 1 || j == x || j == m - x + 1)) /* line 8 slow_hit_count: 4107260, fast_hit_count: 0 */
        r++; /* line 9 slow_hit_count: 5736, fast_hit_count: 0 */
  printf("%d\n", r); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottleneck in the provided C code, let's walk through the tasks step by step.

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Step 1: Compare Hit Counts
- **Line 5 (`for (i = x; i <= n - x + 1; i++)`)**: This loop iterates a constant number of times (2999) in both fast and slow runs, indicating it's not the major bottleneck.
- **Line 6 (`for (j = x; j <= m - x + 1; j++)`)**: This inner loop is the primary area of concern. It executes 8,217,518 times on the slow input compared to 2,998 times on the fast input. This suggests a significant increase in iterations for the slow input.
- **Lines 7-9 (conditional and increment statements)**: These lines get hit far more often during the slow run, with the condition being checked 8,214,520 times.

#### Step 2: Pinpointing the Bottleneck
The inner loop, particularly when iterating over `j`, is executing significantly more times during the slow run. The difference in iterations between the fast and slow inputs for this loop suggests that the condition on line 8 is evaluated frequently and is likely the source of slowdown.

#### Step 3: Infer Data Structure and Loop Interactions
The expensive part here is the nested loop controlled by `j` because of the condition checks. In this specific problem, the slowdown is exacerbated by the fact that the variable `m` for the slow input is significantly larger than the corresponding `m` in the fast input.

### Phase 2: Derive Performance-Characterizing Invariants

Based on this analysis, here are some performance-characterizing invariants:

1. **Nested Loop Invariant**:
   - Natural Language Description: "If the number of iterations of the inner loop controlled by `j` is significantly large due to high values of `m`, the program may experience a slowdown. Specifically, when `m` is relatively large compared to `n`, the inner loop executes more often, leading to performance degradation."
   - This is observed because the slow input has a large `m` causing the nested loop to run extensively.

2. **Condition Check Invariant**:
   - Natural Language Description: "If the condition inside the nested loop is evaluated very frequently due to high values of `m`, the conditional checks contribute heavily to the overall execution time."
   - This points to the fact that each evaluation of the condition adds computational overhead, especially when loop bounds are large.

3. **Threshold Invariant**:
   - Natural Language Description: "The program potentially slows down when `m` is significantly larger than `n`, leading the inner loop to dominate computation time. For performance, ensure `m` is not excessively larger than `n` under conditions such as `n, m ≤ 5000`."

These invariants describe general conditions where performance issues arise and are abstracted to provide utility across different but similar scenarios, without relying on specific values from the slow input.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A chessboard n × m in size is given. During the zero minute we repaint all the black squares to the 0 color. During the i-th minute we repaint to the i color the initially black squares that have exactly four corner-adjacent squares painted i - 1 (all such squares are repainted simultaneously). This process continues ad infinitum. You have to figure out how many squares we repainted exactly x times.

The upper left square of the board has to be assumed to be always black. Two squares are called corner-adjacent, if they have exactly one common point.

Input

The first line contains integers n and m (1 ≤ n, m ≤ 5000). The second line contains integer x (1 ≤ x ≤ 109).

Output

Print how many squares will be painted exactly x times.

Examples

Input

3 3
1


Output

4


Input

3 3
2


Output

1


Input

1 1
1


Output

1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checkers for Performance Invariants

Let's transform the natural language performance-characterizing invariants into C++ code that checks these conditions at runtime. We're focusing on the conditions that indicate potential performance bottlenecks.

#### Invariant 1: Nested Loop Invariant

- **Natural Language**: "If the number of iterations of the inner loop controlled by `j` is significantly large due to high values of `m`, the program may experience a slowdown."
  
```cpp
void check_nested_loop_invariant(int n, int m, int x) {
    if ((m - 2 * x + 1) > 1000) { // Threshold based on observed performance
        cerr << "Warning: Performance bottleneck condition triggered - Inner loop executes extensively." << endl;
        abort();
    }
}
```

#### Invariant 2: Condition Check Invariant

- **Natural Language**: "If the condition inside the nested loop is evaluated very frequently due to high values of `m`, the conditional checks contribute heavily to the overall execution time."

```cpp
void check_condition_evaluation_invariant(int n, int m, int x) {
    if ((m - 2 * x + 1) * (n - 2 * x + 1) > 1000000) { // Threshold for high condition checks
        cerr << "Warning: Performance bottleneck condition triggered - Condition evaluations dominate execution." << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the C++ Program

Now, we will integrate these checker functions into the provided C++ code, ensuring they are called at effective points in the program's execution flow to catch potential performance bottlenecks without adding unnecessary overhead.

```cpp
#include <iostream>
using namespace std;

int n, m, x, r, i, j;

// Checker function for nested loop invariant
void check_nested_loop_invariant(int n, int m, int x) {
    if ((m - 2 * x + 1) > 1000) { // Threshold based on observed performance
        cerr << "Warning: Performance bottleneck condition triggered - Inner loop executes extensively." << endl;
        abort();
    }
}

// Checker function for condition evaluation invariant
void check_condition_evaluation_invariant(int n, int m, int x) {
    if ((m - 2 * x + 1) * (n - 2 * x + 1) > 1000000) { // Threshold for high condition checks
        cerr << "Warning: Performance bottleneck condition triggered - Condition evaluations dominate execution." << endl;
        abort();
    }
}

int main() {
    scanf("%d%d%d", &n, &m, &x);
    
    // Insert checker function call after input is read
    check_nested_loop_invariant(n, m, x);
    check_condition_evaluation_invariant(n, m, x);

    for (i = x; i <= n - x + 1; i++) {
        for (j = x; j <= m - x + 1; j++) {
            if (((i + j) & 1) == 0 &&
                (i == x || i == n - x + 1 || j == x || j == m - x + 1)) {
                r++;
            }
        }
    }
    printf("%d\n", r);
    return 0;
}
```

### Explanation of Integration
- **Check Placement**: The checker functions are invoked immediately after reading the input values. This placement ensures that any potential performance issues are flagged before entering the performance-critical loops.
- **Thresholds**: The thresholds used in the checkers are based on the understanding that `m` and the product of loop bounds significantly contribute to the execution time. Adjust these thresholds based on empirical observations and testing for different input scenarios.
- **Abort on Detection**: The program will abort with a warning message if any of these performance conditions are met, making it useful for identifying slow scenarios during testing and fuzzing.

