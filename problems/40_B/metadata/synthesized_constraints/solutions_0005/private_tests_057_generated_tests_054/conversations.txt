system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A chessboard n × m in size is given. During the zero minute we repaint all the black squares to the 0 color. During the i-th minute we repaint to the i color the initially black squares that have exactly four corner-adjacent squares painted i - 1 (all such squares are repainted simultaneously). This process continues ad infinitum. You have to figure out how many squares we repainted exactly x times.

The upper left square of the board has to be assumed to be always black. Two squares are called corner-adjacent, if they have exactly one common point.

Input

The first line contains integers n and m (1 ≤ n, m ≤ 5000). The second line contains integer x (1 ≤ x ≤ 109).

Output

Print how many squares will be painted exactly x times.

Examples

Input

3 3
1


Output

4


Input

3 3
2


Output

1


Input

1 1
1


Output

1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using LL = long long;
constexpr int N = 1e5 + 5;
int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  int n, m, x;
  cin >> n >> m >> x;
  n = n - 2 * x + 2;
  m = m - 2 * x + 2;
  if (n < 0 or m < 0) return cout << 0, 0;
  int result = 0;
  for (int i = 0; i < n; i++)
    for (int j = 0; j < m; j++)
      if (i == 0 or j == 0 or i == n - 1 or j == m - 1)
        if ((i + j) % 2 == 0) result++;
  cout << result << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3250 2992
127


(G.2) Fast Input

3250 195
127


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using LL = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
constexpr int N = 1e5 + 5; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, x; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m >> x; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  n = n - 2 * x + 2; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  m = m - 2 * x + 2; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  if (n < 0 or m < 0) return cout << 0, 0; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  int result = 0; /* line 13 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) /* line 14 slow_hit_count: 2999, fast_hit_count: 0 */
    for (int j = 0; j < m; j++) /* line 15 slow_hit_count: 8217518, fast_hit_count: 0 */
      if (i == 0 or j == 0 or i == n - 1 or j == m - 1) /* line 16 slow_hit_count: 8214520, fast_hit_count: 0 */
        if ((i + j) % 2 == 0) result++; /* line 17 slow_hit_count: 11472, fast_hit_count: 0 */
  cout << result << endl; /* line 18 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 1, fast_hit_count: 0 */


assistant: To effectively analyze the performance bottleneck of the given C program, we can break down the provided information and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts**:
   - The inner loop at lines 14 and 15 shows a significant difference in hit counts between the slow and fast inputs. Specifically, line 15 has a hit count of 8,217,518 for the slow input compared to 0 for the fast input.
   - The condition in line 16 and line 17 also has a high number of hits with the slow input.

2. **Pinpoint Key Lines**:
   - The nested loops (lines 14 and 15) iterate over the dimensions `n` and `m`, which are calculated as `n = n - 2 * x + 2` and `m = m - 2 * x + 2`. This suggests that the effective dimensions are significantly reduced based on `x`.
   - A critical observation is that when `n` and `m` remain large after the transformation, the loops iterate over a large number of elements.

3. **Inference on Data Interactions**:
   - The nested loop structure indicates a potentially quadratic complexity relative to the adjusted dimensions `n` and `m`. Therefore, if these dimensions remain large, the number of iterations becomes extensive, leading to the slow execution.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the information extracted from the analysis, we can derive the following natural language invariants to describe the performance conditions:

1. **Invariant 1: Large Effective Dimensions**:
   - "If the transformed dimensions `(n - 2 * x + 2)` and `(m - 2 * x + 2)` remain large, the nested looping structure will extensively iterate over these dimensions, causing slow performance due to the quadratic growth in iterations."

2. **Invariant 2: Input Size close to Limits**:
   - "When the input dimensions `n` and `m` are close to their upper constraint limits (5000), even a moderate value of `x` can lead to large effective dimensions for the loops, resulting in a high number of operations."

3. **Invariant 3: Minimal Reduction by `x`**:
   - "If `x` is much smaller than the initial dimensions `n` and `m`, the adjustment `(n - 2 * x + 2)` and `(m - 2 * x + 2)` remains large, allowing the double-nested loop to execute many iterations, thereby significantly increasing computation time."

These invariants highlight scenarios where the slow path is triggered. They correlate strongly with input patterns that result in large counting operations within the nested loop, particularly when `x` doesn't sufficiently reduce the size of the effective operational grid on the chessboard.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A chessboard n × m in size is given. During the zero minute we repaint all the black squares to the 0 color. During the i-th minute we repaint to the i color the initially black squares that have exactly four corner-adjacent squares painted i - 1 (all such squares are repainted simultaneously). This process continues ad infinitum. You have to figure out how many squares we repainted exactly x times.

The upper left square of the board has to be assumed to be always black. Two squares are called corner-adjacent, if they have exactly one common point.

Input

The first line contains integers n and m (1 ≤ n, m ≤ 5000). The second line contains integer x (1 ≤ x ≤ 109).

Output

Print how many squares will be painted exactly x times.

Examples

Input

3 3
1


Output

4


Input

3 3
2


Output

1


Input

1 1
1


Output

1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants in C++

For each of the natural language invariants, we need to write C++ checker functions that will be integrated into the original program. Here are the implementations of those invariants:

1. **Invariant 1: Large Effective Dimensions**

This invariant will check if the transformed dimensions `(n - 2 * x + 2)` and `(m - 2 * x + 2)` are large enough to potentially cause performance bottlenecks.

```cpp
void check_large_dimensions_invariant(int transformed_n, int transformed_m) {
    if (transformed_n > 1000 && transformed_m > 1000) { // Arbitrary threshold
        cerr << "Warning: Large dimensions invariant triggered - potential performance bottleneck due to large effective dimensions." << endl;
        abort();
    }
}
```

2. **Invariant 2: Input Size close to Limits**

This invariant checks if the input dimensions `n` and `m` are close to the upper limits, which could lead to large effective dimensions post-transformation.

```cpp
void check_input_size_invariant(int n, int m) {
    if (n > 4000 || m > 4000) { // Arbitrary threshold close to the upper constraint
        cerr << "Warning: Input size invariant triggered - inputs near upper limits may cause large computation time." << endl;
        abort();
    }
}
```

3. **Invariant 3: Minimal Reduction by `x`**

This invariant ensures that `x` doesn't cause significant reduction in the effective dimensions, leading to slow execution.

```cpp
void check_minimal_reduction_invariant(int original_n, int original_m, int x) {
    if (original_n - 2 * x + 2 > 1000 && original_m - 2 * x + 2 > 1000) { // Arbitrary large threshold
        cerr << "Warning: Minimal reduction invariant triggered - `x` is insufficient for reducing dimensions." << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checker functions into the original C++ program at appropriate locations:

```cpp
#include <bits/stdc++.h>
using namespace std;
using LL = long long;
constexpr int N = 1e5 + 5;

// Checker functions
void check_large_dimensions_invariant(int transformed_n, int transformed_m) {
    if (transformed_n > 1000 && transformed_m > 1000) { // Arbitrary threshold
        cerr << "Warning: Large dimensions invariant triggered - potential performance bottleneck due to large effective dimensions." << endl;
        abort();
    }
}

void check_input_size_invariant(int n, int m) {
    if (n > 4000 || m > 4000) { // Arbitrary threshold close to the upper constraint
        cerr << "Warning: Input size invariant triggered - inputs near upper limits may cause large computation time." << endl;
        abort();
    }
}

void check_minimal_reduction_invariant(int original_n, int original_m, int x) {
    if (original_n - 2 * x + 2 > 1000 && original_m - 2 * x + 2 > 1000) { // Arbitrary large threshold
        cerr << "Warning: Minimal reduction invariant triggered - `x` is insufficient for reducing dimensions." << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    int n, m, x;
    cin >> n >> m >> x;

    // Invariant checks
    check_input_size_invariant(n, m); // Check input size close to limits before transformation

    int transformed_n = n - 2 * x + 2;
    int transformed_m = m - 2 * x + 2;

    check_large_dimensions_invariant(transformed_n, transformed_m); // Check large effective dimensions
    check_minimal_reduction_invariant(n, m, x); // Check minimal reduction by `x`

    if (transformed_n < 0 or transformed_m < 0) return cout << 0, 0;
    
    int result = 0;
    for (int i = 0; i < transformed_n; i++)
        for (int j = 0; j < transformed_m; j++)
            if (i == 0 or j == 0 or i == transformed_n - 1 or j == transformed_m - 1)
                if ((i + j) % 2 == 0) result++;
    
    cout << result << endl;
}
```

### Explanation:

- **Checker Placement**: The checkers are placed after reading the input and calculating the transformed dimensions `n` and `m`, but before entering the nested loops. This ensures that performance bottlenecks are detected early without adding overhead inside the loops.
- **Thresholds**: The thresholds used in these checks are arbitrary but are chosen to reasonably reflect conditions that could lead to slow execution, given the constraints of the problem. Adjust these thresholds as necessary based on empirical testing.

This instrumented code will now warn and abort if it detects any of the conditions that could lead to performance issues, thus aiding in performance debugging and testing with fuzzers.

