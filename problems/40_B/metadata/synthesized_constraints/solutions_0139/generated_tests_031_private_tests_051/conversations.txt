system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A chessboard n × m in size is given. During the zero minute we repaint all the black squares to the 0 color. During the i-th minute we repaint to the i color the initially black squares that have exactly four corner-adjacent squares painted i - 1 (all such squares are repainted simultaneously). This process continues ad infinitum. You have to figure out how many squares we repainted exactly x times.

The upper left square of the board has to be assumed to be always black. Two squares are called corner-adjacent, if they have exactly one common point.

Input

The first line contains integers n and m (1 ≤ n, m ≤ 5000). The second line contains integer x (1 ≤ x ≤ 109).

Output

Print how many squares will be painted exactly x times.

Examples

Input

3 3
1


Output

4


Input

3 3
2


Output

1


Input

1 1
1


Output

1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma comment(linker, "/stack:256000000")
using namespace std;
template <typename first>
inline first abs(const first& a) {
  return a < 0 ? -a : a;
}
template <typename first>
inline first sqr(const first& a) {
  return a * a;
}
const int INF = INT_MAX / 2;
const long double EPS = 1e-9;
const long double PI = 3.1415926535897932384626433832795;
const int N = 5000 + 13;
const int dx[] = {1, 1, -1, -1};
const int dy[] = {1, -1, 1, -1};
int n, m;
int cnt[N];
int d[N][N];
int main() {
  cin >> n >> m;
  int x;
  cin >> x;
  if (x >= N) {
    cout << 0 << endl;
    return 0;
  }
  queue<pair<int, int> > q;
  int firstAns = 0;
  for (int i = 0; i < int(n); i++)
    for (int it = 0; it < int(2); it++) {
      int j = 0;
      if (it == 1) j = m - 1;
      if (!(i == 0 || i == n - 1 || j == 0 || j == m - 1)) continue;
      if (i % 2 != j % 2) continue;
      if (d[i][j] == 0) firstAns++;
      d[i][j] = 1;
      q.push(make_pair((i), (j)));
    }
  for (int j = 0; j < int(m); j++)
    for (int it = 0; it < int(2); it++) {
      int i = 0;
      if (it == 1) i = n - 1;
      if (!(i == 0 || i == n - 1 || j == 0 || j == m - 1)) continue;
      if (i % 2 != j % 2) continue;
      if (d[i][j] == 0) firstAns++;
      d[i][j] = 1;
      q.push(make_pair((i), (j)));
    }
  if (n > 4000 && m > 4000 && x < 1501) {
    int ans = firstAns;
    ans -= 4 * (x - 1);
    cout << ans << endl;
    return 0;
  }
  while (!q.empty()) {
    pair<int, int> cur = q.front();
    q.pop();
    int x = cur.first;
    int y = cur.second;
    for (int i = 0; i < int(4); i++) {
      int nx = x + dx[i];
      int ny = y + dy[i];
      if (!(0 <= (nx) && (nx) < (n) && 0 <= (ny) && (ny) < (m))) continue;
      if (d[nx][ny] > d[x][y] + 1 || d[nx][ny] == 0) {
        d[nx][ny] = d[x][y] + 1;
        q.push(make_pair((nx), (ny)));
      }
    }
  }
  for (int i = 0; i < int(n); i++)
    for (int j = 0; j < int(m); j++) cnt[d[i][j]]++;
  cout << cnt[x] << endl;
  cerr << clock() << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

4273 3181
159


(G.2) Fast Input

4273 4835
159


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma comment(linker, "/stack:256000000") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
template <typename first> /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
inline first abs(const first& a) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  return a < 0 ? -a : a; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
template <typename first> /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
inline first sqr(const first& a) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  return a * a; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = INT_MAX / 2; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
const long double EPS = 1e-9; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
const long double PI = 3.1415926535897932384626433832795; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 5000 + 13; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
const int dx[] = {1, 1, -1, -1}; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
const int dy[] = {1, -1, 1, -1}; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
int cnt[N]; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
int d[N][N]; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  int x; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> x; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  if (x >= N) { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0 << endl; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  queue<pair<int, int> > q; /* line 29 slow_hit_count: 2, fast_hit_count: 2 */
  int firstAns = 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < int(n); i++) /* line 31 slow_hit_count: 4274, fast_hit_count: 4274 */
    for (int it = 0; it < int(2); it++) { /* line 32 slow_hit_count: 12819, fast_hit_count: 12819 */
      int j = 0; /* line 33 slow_hit_count: 8546, fast_hit_count: 8546 */
      if (it == 1) j = m - 1; /* line 34 slow_hit_count: 8546, fast_hit_count: 8546 */
      if (!(i == 0 || i == n - 1 || j == 0 || j == m - 1)) continue; /* line 35 slow_hit_count: 12818, fast_hit_count: 12818 */
      if (i % 2 != j % 2) continue; /* line 36 slow_hit_count: 8546, fast_hit_count: 8546 */
      if (d[i][j] == 0) firstAns++; /* line 37 slow_hit_count: 4274, fast_hit_count: 4274 */
      d[i][j] = 1; /* line 38 slow_hit_count: 4274, fast_hit_count: 4274 */
      q.push(make_pair((i), (j))); /* line 39 slow_hit_count: 4274, fast_hit_count: 4274 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  for (int j = 0; j < int(m); j++) /* line 41 slow_hit_count: 3182, fast_hit_count: 4836 */
    for (int it = 0; it < int(2); it++) { /* line 42 slow_hit_count: 9543, fast_hit_count: 14505 */
      int i = 0; /* line 43 slow_hit_count: 6362, fast_hit_count: 9670 */
      if (it == 1) i = n - 1; /* line 44 slow_hit_count: 6362, fast_hit_count: 9670 */
      if (!(i == 0 || i == n - 1 || j == 0 || j == m - 1)) continue; /* line 45 slow_hit_count: 9542, fast_hit_count: 14504 */
      if (i % 2 != j % 2) continue; /* line 46 slow_hit_count: 6362, fast_hit_count: 9670 */
      if (d[i][j] == 0) firstAns++; /* line 47 slow_hit_count: 3182, fast_hit_count: 4836 */
      d[i][j] = 1; /* line 48 slow_hit_count: 3182, fast_hit_count: 4836 */
      q.push(make_pair((i), (j))); /* line 49 slow_hit_count: 3182, fast_hit_count: 4836 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  if (n > 4000 && m > 4000 && x < 1501) { /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
    int ans = firstAns; /* line 52 slow_hit_count: 0, fast_hit_count: 1 */
    ans -= 4 * (x - 1); /* line 53 slow_hit_count: 0, fast_hit_count: 1 */
    cout << ans << endl; /* line 54 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 55 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  while (!q.empty()) { /* line 57 slow_hit_count: 6796212, fast_hit_count: 0 */
    pair<int, int> cur = q.front(); /* line 58 slow_hit_count: 6796211, fast_hit_count: 0 */
    q.pop(); /* line 59 slow_hit_count: 6796211, fast_hit_count: 0 */
    int x = cur.first; /* line 60 slow_hit_count: 6796211, fast_hit_count: 0 */
    int y = cur.second; /* line 61 slow_hit_count: 6796211, fast_hit_count: 0 */
    for (int i = 0; i < int(4); i++) { /* line 62 slow_hit_count: 33981055, fast_hit_count: 0 */
      int nx = x + dx[i]; /* line 63 slow_hit_count: 27184844, fast_hit_count: 0 */
      int ny = y + dy[i]; /* line 64 slow_hit_count: 27184844, fast_hit_count: 0 */
      if (!(0 <= (nx) && (nx) < (n) && 0 <= (ny) && (ny) < (m))) continue; /* line 65 slow_hit_count: 27184844, fast_hit_count: 0 */
      if (d[nx][ny] > d[x][y] + 1 || d[nx][ny] == 0) { /* line 66 slow_hit_count: 27169924, fast_hit_count: 0 */
        d[nx][ny] = d[x][y] + 1; /* line 67 slow_hit_count: 6788755, fast_hit_count: 0 */
        q.push(make_pair((nx), (ny))); /* line 68 slow_hit_count: 6788755, fast_hit_count: 0 */
      } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < int(n); i++) /* line 72 slow_hit_count: 4274, fast_hit_count: 0 */
    for (int j = 0; j < int(m); j++) cnt[d[i][j]]++; /* line 73 slow_hit_count: 13596686, fast_hit_count: 0 */
  cout << cnt[x] << endl; /* line 74 slow_hit_count: 1, fast_hit_count: 0 */
  cerr << clock() << endl; /* line 75 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 76 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 77 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the problem of diagnosing why the program runs slowly for certain inputs, we can break down the analysis using the provided data. Let's proceed with the analysis and derive performance-characterizing invariants:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The `while (!q.empty())` loop starting at line 57 has an exceptionally high hit count in the slow input but zero in the fast input. This loop is likely the primary source of the slowdown.
   - The loop at line 62 (`for (int i = 0; i < int(4); i++)`) also has a significantly high hit count, indicating the inner operations are executed frequently.

2. **Pinpointed Lines/Functions:**
   - Lines 58 to 68 within the `while` loop are heavily hit during the slow input run, indicating repeated processing of elements from the queue and potential frequent updates to the `d` matrix.

3. **Interaction Inference:**
   - The operation involves a breadth-first search (BFS) pattern using a queue to propagate color changes across the grid, which is inherently dependent on the structure and dimensions of the input board.
   - The slowdown suggests that for certain inputs, the BFS expands to cover a large portion of the grid, causing frequent queue operations and matrix updates.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Performance Invariants:**

   - **Invariant 1: Large Matrix with High Sparsity of Initial Black Squares**
     - "Performance may degrade significantly when the matrix dimensions are large, but the initially black squares are sparse, causing extensive queue operations as the BFS propagates slowly across the grid."

   - **Invariant 2: Large `x` Value with Insufficient Early Termination**
     - "If the parameter `x` is large relative to the size constraints, and early termination conditions are insufficient, the program may experience excessive iterations, leading to slowdown."

   - **Invariant 3: High Spread of BFS Due to Boundary Conditions**
     - "When a large grid size combines with boundary conditions that initiate a broad spread of BFS operations, the BFS can cover more grid cells, increasing the number of updates and queue operations."

2. **Threshold Suggestions:**
   - Avoid specific numeric values but suggest that performance issues likely arise when `n` and `m` are both close to 5000, creating a large grid, and when `x` is significantly high without triggering early exit paths.
   - The BFS operations become costly when the grid is almost entirely traversed due to the initial conditions or when `x` demands a deeper colored layer propagation.

These performance-characterizing invariants will aid in understanding under which conditions the program is likely to slow down, focusing on input patterns and algorithmic structures that drive inefficiencies.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A chessboard n × m in size is given. During the zero minute we repaint all the black squares to the 0 color. During the i-th minute we repaint to the i color the initially black squares that have exactly four corner-adjacent squares painted i - 1 (all such squares are repainted simultaneously). This process continues ad infinitum. You have to figure out how many squares we repainted exactly x times.

The upper left square of the board has to be assumed to be always black. Two squares are called corner-adjacent, if they have exactly one common point.

Input

The first line contains integers n and m (1 ≤ n, m ≤ 5000). The second line contains integer x (1 ≤ x ≤ 109).

Output

Print how many squares will be painted exactly x times.

Examples

Input

3 3
1


Output

4


Input

3 3
2


Output

1


Input

1 1
1


Output

1

Solution (C++ code):
{solution}


assistant: Let's proceed with implementing and integrating performance checkers based on the previously derived invariants. We'll first implement these as standalone C++ code snippets (Phase 3) and then integrate them into the original program (Phase 4).

### Phase 3: Implement Invariants as C++ Checkers

For each invariant, we will create a function or inline condition that captures the performance issue it describes.

**Invariant 1: Large Matrix with High Sparsity of Initial Black Squares**

```cpp
void check_large_sparse_matrix(bool condition) {
    if (condition) {
        cerr << "Warning: large_sparse_matrix_invariant triggered - potential slow BFS propagation!" << endl;
        abort();
    }
}
```

**Invariant 2: Large `x` Value with Insufficient Early Termination**

```cpp
void check_large_x_value(bool condition) {
    if (condition) {
        cerr << "Warning: large_x_value_invariant triggered - excessive iterations likely!" << endl;
        abort();
    }
}
```

**Invariant 3: High Spread of BFS Due to Boundary Conditions**

```cpp
void check_bfs_spread(bool condition) {
    if (condition) {
        cerr << "Warning: bfs_spread_invariant triggered - broad BFS expansion!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checkers into the original C++ code, ensuring they are placed to intercept potential performance bottlenecks effectively.

```cpp
#include <bits/stdc++.h>
#pragma comment(linker, "/stack:256000000")
using namespace std;

const int N = 5000 + 13;
const int dx[] = {1, 1, -1, -1};
const int dy[] = {1, -1, 1, -1};
int n, m;
int cnt[N];
int d[N][N];

// Invariant checkers
void check_large_sparse_matrix(bool condition) {
    if (condition) {
        cerr << "Warning: large_sparse_matrix_invariant triggered - potential slow BFS propagation!" << endl;
        abort();
    }
}

void check_large_x_value(bool condition) {
    if (condition) {
        cerr << "Warning: large_x_value_invariant triggered - excessive iterations likely!" << endl;
        abort();
    }
}

void check_bfs_spread(bool condition) {
    if (condition) {
        cerr << "Warning: bfs_spread_invariant triggered - broad BFS expansion!" << endl;
        abort();
    }
}

int main() {
    cin >> n >> m;
    int x;
    cin >> x;

    // Check invariants at the beginning of the program
    check_large_sparse_matrix(n * m > 20000000); // Example threshold for large grids
    check_large_x_value(x > 1000 && n < 100 && m < 100); // Large x with small n, m combination
    check_bfs_spread(n > 4000 && m > 4000 && x < 1500); // Large grid with small x

    if (x >= N) {
        cout << 0 << endl;
        return 0;
    }
    
    queue<pair<int, int>> q;
    int firstAns = 0;
    
    for (int i = 0; i < int(n); i++)
        for (int it = 0; it < int(2); it++) {
            int j = 0;
            if (it == 1) j = m - 1;
            if (!(i == 0 || i == n - 1 || j == 0 || j == m - 1)) continue;
            if (i % 2 != j % 2) continue;
            if (d[i][j] == 0) firstAns++;
            d[i][j] = 1;
            q.push(make_pair((i), (j)));
        }
    
    for (int j = 0; j < int(m); j++)
        for (int it = 0; it < int(2); it++) {
            int i = 0;
            if (it == 1) i = n - 1;
            if (!(i == 0 || i == n - 1 || j == 0 || j == m - 1)) continue;
            if (i % 2 != j % 2) continue;
            if (d[i][j] == 0) firstAns++;
            d[i][j] = 1;
            q.push(make_pair((i), (j)));
        }
    
    if (n > 4000 && m > 4000 && x < 1501) {
        int ans = firstAns;
        ans -= 4 * (x - 1);
        cout << ans << endl;
        return 0;
    }
    
    while (!q.empty()) {
        pair<int, int> cur = q.front();
        q.pop();
        int x = cur.first;
        int y = cur.second;
        for (int i = 0; i < int(4); i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (!(0 <= (nx) && (nx) < (n) && 0 <= (ny) && (ny) < (m))) continue;
            if (d[nx][ny] > d[x][y] + 1 || d[nx][ny] == 0) {
                d[nx][ny] = d[x][y] + 1;
                q.push(make_pair((nx), (ny)));
            }
        }
    }
    
    for (int i = 0; i < int(n); i++)
        for (int j = 0; j < int(m); j++) cnt[d[i][j]]++;
    
    cout << cnt[x] << endl;
    cerr << clock() << endl;
    return 0;
}
```

### Explanation of Instrumented Code:
- **`check_large_sparse_matrix`**: Placed right after input to capture cases where large grid dimensions could cause sparse initial black square configurations, leading to slow BFS propagation.
- **`check_large_x_value`**: Checks are placed to catch scenarios where `x` is large relative to the input grid size, potentially causing excessive iterations.
- **`check_bfs_spread`**: This invariant captures situations where a large grid combined with a small `x` might lead to widespread BFS operations, thus slowing the computation.

