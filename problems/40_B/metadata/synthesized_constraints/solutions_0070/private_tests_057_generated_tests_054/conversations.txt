system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A chessboard n × m in size is given. During the zero minute we repaint all the black squares to the 0 color. During the i-th minute we repaint to the i color the initially black squares that have exactly four corner-adjacent squares painted i - 1 (all such squares are repainted simultaneously). This process continues ad infinitum. You have to figure out how many squares we repainted exactly x times.

The upper left square of the board has to be assumed to be always black. Two squares are called corner-adjacent, if they have exactly one common point.

Input

The first line contains integers n and m (1 ≤ n, m ≤ 5000). The second line contains integer x (1 ≤ x ≤ 109).

Output

Print how many squares will be painted exactly x times.

Examples

Input

3 3
1


Output

4


Input

3 3
2


Output

1


Input

1 1
1


Output

1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  cout << fixed;
  cout.precision(9);
  int n, m, x;
  cin >> n >> m >> x;
  n -= 2 * (x - 1);
  m -= 2 * (x - 1);
  if (n <= 0 || m <= 0) {
    cout << 0 << "\n";
  } else {
    int r = 0;
    for (int i = 0; i < m; i++)
      for (int j = 0; j < n; j++)
        if (i == 0 || j == 0 || i == m - 1 || j == n - 1) {
          if ((i + j) % 2 == 0) {
            r++;
          }
        }
    cout << r << "\n";
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3250 2992
127


(G.2) Fast Input

3250 195
127


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  cout << fixed; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cout.precision(9); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int n, m, x; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m >> x; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  n -= 2 * (x - 1); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  m -= 2 * (x - 1); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  if (n <= 0 || m <= 0) { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0 << "\n"; /* line 11 slow_hit_count: 0, fast_hit_count: 1 */
  } else { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    int r = 0; /* line 13 slow_hit_count: 1, fast_hit_count: 0 */
    for (int i = 0; i < m; i++) /* line 14 slow_hit_count: 2741, fast_hit_count: 0 */
      for (int j = 0; j < n; j++) /* line 15 slow_hit_count: 8217260, fast_hit_count: 0 */
        if (i == 0 || j == 0 || i == m - 1 || j == n - 1) { /* line 16 slow_hit_count: 8214520, fast_hit_count: 0 */
          if ((i + j) % 2 == 0) { /* line 17 slow_hit_count: 11472, fast_hit_count: 0 */
            r++; /* line 18 slow_hit_count: 5736, fast_hit_count: 0 */
          } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    cout << r << "\n"; /* line 21 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the given C program, let's analyze the hit counts and the code logic.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Analyzing Hit Counts**:
   - The loops on lines 14 and 15 are the most significant contributors to the number of operations. Specifically, line 15 has a hit count of 8,217,260 in the slow input case.
   - This indicates that the nested loops are being executed a very large number of times, which significantly contributes to the slowdown.

2. **Interaction with Input Constraints**:
   - The program reduces `n` and `m` by `2 * (x - 1)`. For large values of `x`, this can result in negative or zero dimensions, short-circuiting further calculations.
   - However, when `n` and `m` remain positive after this reduction, the loops iterate over almost the entire board size, which is computationally expensive.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants for the program:

1. **Invariant on Loop Execution**:
   - **Natural Language Description**: "The program slows down significantly when the dimensions `n` and `m` remain large after accounting for the reduction by `2 * (x - 1)`, causing the nested loops to iterate over a large area of the chessboard."
   - **Threshold Consideration**: Since the original constraints are `1 ≤ n, m ≤ 5000`, a substantial slowdown happens when `n > 0` and `m > 0` after reduction, and they are still large enough to result in a high number of loop iterations, such as when they are close to 5000.

2. **Invariant on Boundary Conditions**:
   - **Natural Language Description**: "A slowdown is observed when the condition `(i == 0 || j == 0 || i == m - 1 || j == n - 1)` frequently evaluates to true in a large chessboard after reduction, leading to excessive checks and increments in the innermost loop."
   - **Threshold Consideration**: This condition becomes impactful when both `n` and `m` are reduced but still large, causing many iterations over the boundary cells.

3. **Invariant on Reduction Impact**:
   - **Natural Language Description**: "If the reduction `2 * (x - 1)` results in `n` and `m` being positive but significantly reduced from their initial size, while still allowing for many iterations, the program may still perform a large number of operations."
   - **Threshold Consideration**: This situation typically arises when `x` is large but not large enough to make `n` or `m` zero or negative, keeping loops active over a considerable grid area.

These invariants capture the essence of performance issues by characterizing the conditions that lead to excessive loop iterations, especially when `n` and `m` are not reduced enough to avoid the nested loops entirely while still remaining substantial in size.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A chessboard n × m in size is given. During the zero minute we repaint all the black squares to the 0 color. During the i-th minute we repaint to the i color the initially black squares that have exactly four corner-adjacent squares painted i - 1 (all such squares are repainted simultaneously). This process continues ad infinitum. You have to figure out how many squares we repainted exactly x times.

The upper left square of the board has to be assumed to be always black. Two squares are called corner-adjacent, if they have exactly one common point.

Input

The first line contains integers n and m (1 ≤ n, m ≤ 5000). The second line contains integer x (1 ≤ x ≤ 109).

Output

Print how many squares will be painted exactly x times.

Examples

Input

3 3
1


Output

4


Input

3 3
2


Output

1


Input

1 1
1


Output

1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as Checker Code in C++

Based on the performance-characterizing invariants derived earlier, here are the C++ checkers:

1. **Invariant on Loop Execution**:
   - **Checker Code**:
   ```cpp
   // Check if n and m remain large after reduction
   void check_loop_invariant(int n, int m) {
       if (n > 100 && m > 100) {  // Assuming a threshold for large values after reduction
           cerr << "Warning: Performance bottleneck condition triggered - large loops!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Boundary Conditions**:
   - **Checker Code**:
   ```cpp
   // Check if n and m allow frequent boundary checks
   void check_boundary_invariant(int n, int m, int x) {
       if ((n > 20 || m > 20) && x > 1) {  // Thresholds where boundary conditions frequently hit
           cerr << "Warning: Performance bottleneck condition triggered - excessive boundary checks!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Reduction Impact**:
   - **Checker Code**:
   ```cpp
   // Check if dimensions remain substantial after reduction
   void check_reduction_invariant(int n, int m) {
       if (n > 0 && m > 0 && n * m > 10000) {  // Condition where reduced dimensions still cause heavy computation
           cerr << "Warning: Performance bottleneck condition triggered - large computation area after reduction!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code with the Original Program

Now, let's integrate the above checkers into the original C++ solution:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Check if n and m remain large after reduction
void check_loop_invariant(int n, int m) {
    if (n > 100 && m > 100) {
        cerr << "Warning: Performance bottleneck condition triggered - large loops!" << endl;
        abort();
    }
}

// Check if n and m allow frequent boundary checks
void check_boundary_invariant(int n, int m, int x) {
    if ((n > 20 || m > 20) && x > 1) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive boundary checks!" << endl;
        abort();
    }
}

// Check if dimensions remain substantial after reduction
void check_reduction_invariant(int n, int m) {
    if (n > 0 && m > 0 && n * m > 10000) {
        cerr << "Warning: Performance bottleneck condition triggered - large computation area after reduction!" << endl;
        abort();
    }
}

int main() {
    cout << fixed;
    cout.precision(9);
    int n, m, x;
    cin >> n >> m >> x;

    // Checkers before computation
    check_loop_invariant(n, m);
    check_boundary_invariant(n, m, x);

    n -= 2 * (x - 1);
    m -= 2 * (x - 1);

    // Additional check after reduction
    check_reduction_invariant(n, m);

    if (n <= 0 || m <= 0) {
        cout << 0 << "\n";
    } else {
        int r = 0;
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                if (i == 0 || j == 0 || i == m - 1 || j == n - 1) {
                    if ((i + j) % 2 == 0) {
                        r++;
                    }
                }
        cout << r << "\n";
    }
    return 0;
}
```

### Explanation

- **Placement of Checks**: The checks are strategically placed just after reading inputs and before the main computation. This ensures that potential bottlenecks are detected early without adding extra overhead during the loop execution itself.
- **Thresholds**: The thresholds for the checks are set to capture conditions where `n` and `m` remain significantly large after reduction, leading to extensive computations, as inferred from the problem constraints and observed slow inputs.

