system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

A chessboard n × m in size is given. During the zero minute we repaint all the black squares to the 0 color. During the i-th minute we repaint to the i color the initially black squares that have exactly four corner-adjacent squares painted i - 1 (all such squares are repainted simultaneously). This process continues ad infinitum. You have to figure out how many squares we repainted exactly x times.

The upper left square of the board has to be assumed to be always black. Two squares are called corner-adjacent, if they have exactly one common point.

Input

The first line contains integers n and m (1 ≤ n, m ≤ 5000). The second line contains integer x (1 ≤ x ≤ 109).

Output

Print how many squares will be painted exactly x times.

Examples

Input

3 3
1


Output

4


Input

3 3
2


Output

1


Input

1 1
1


Output

1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
bool arr[5005][5005];
int main() {
  int i, a, n, m, x, ret = 0;
  scanf("%d %d %d", &n, &m, &x);
  n -= 2 * (x - 1);
  m -= 2 * (x - 1);
  if (n <= 0 && m <= 0)
    printf("0\n");
  else {
    for (i = 0; i < n; i++) {
      if (i % 2 == 0)
        arr[i][0] = 1;
      else
        arr[i][0] = 0;
      for (a = 1; a < m; a++) arr[i][a] = !arr[i][a - 1];
    }
    for (i = 0; i < n; i++)
      for (a = 0; a < m; a++)
        if (i == 0 || i == n - 1 || a == 0 || a == m - 1) ret += arr[i][a];
    printf("%d\n", ret);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

3250 2992
127


(G.2) Fast Input

3250 195
127


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
bool arr[5005][5005]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  int i, a, n, m, x, ret = 0; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d %d", &n, &m, &x); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  n -= 2 * (x - 1); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  m -= 2 * (x - 1); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  if (n <= 0 && m <= 0) /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
    printf("0\n"); /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  else { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    for (i = 0; i < n; i++) { /* line 12 slow_hit_count: 2999, fast_hit_count: 2999 */
      if (i % 2 == 0) /* line 13 slow_hit_count: 2998, fast_hit_count: 2998 */
        arr[i][0] = 1; /* line 14 slow_hit_count: 1499, fast_hit_count: 1499 */
      else /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
        arr[i][0] = 0; /* line 16 slow_hit_count: 1499, fast_hit_count: 1499 */
      for (a = 1; a < m; a++) arr[i][a] = !arr[i][a - 1]; /* line 17 slow_hit_count: 8214520, fast_hit_count: 2998 */
    } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    for (i = 0; i < n; i++) /* line 19 slow_hit_count: 2999, fast_hit_count: 2999 */
      for (a = 0; a < m; a++) /* line 20 slow_hit_count: 8217518, fast_hit_count: 2998 */
        if (i == 0 || i == n - 1 || a == 0 || a == m - 1) ret += arr[i][a]; /* line 21 slow_hit_count: 8214520, fast_hit_count: 0 */
    printf("%d\n", ret); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Here is the analysis of the given C program, focusing on identifying expensive or inefficient code segments, and deriving performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - **Line 17:** `for (a = 1; a < m; a++) arr[i][a] = !arr[i][a - 1];` has a hit count of 8,214,520 for the slow input compared to 2,998 for the fast input. This line seems to be part of a nested loop that is executed significantly more times for the slow input.
   - **Line 21:** `if (i == 0 || i == n - 1 || a == 0 || a == m - 1) ret += arr[i][a];` has a hit count of 8,214,520 for the slow input and 0 for the fast input. This suggests that the condition is satisfied much more often for the slow input, indicating potential inefficiencies in this check or its context.

2. **Interaction with Data Structures:**
   - The primary data structure affected is `arr`, which is a boolean array of size 5005x5005. The nested loops iterate over substantial portions of this array, especially for the slow input.

3. **Loops and Computational Complexity:**
   - Two nested loops are primarily responsible for the performance difference, controlled by the variables `n` and `m`. The loops iterate over a board of adjusted dimensions (`n - 2 * (x - 1)` by `m - 2 * (x - 1)`), causing a high number of operations when these dimensions are large.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: Nested Loop Over Large Adjusted Dimensions**
   - **Natural Language Description:** 
     "If the adjusted dimensions of the board, `n - 2 * (x - 1)` and `m - 2 * (x - 1)`, remain large, then the nested loops will be executed numerous times, slowing down the computation."
   - **Explanation:** This reflects the situation where both dimensions remain sufficiently large after adjustments, leading to prolonged execution in nested loops.

2. **Invariant 2: High Frequency of Boundary Checks**
   - **Natural Language Description:** 
     "If many elements fall on the boundaries of the adjusted board dimensions, the condition checking for boundary cells will be triggered frequently, contributing to a performance bottleneck."
   - **Explanation:** This condition is indicative of excessive computation when many elements in the array are located at the boundary, causing the associated operations to add up.

3. **Invariant 3: Large Input Size with High Iterative Count**
   - **Natural Language Description:** 
     "When the original input dimensions `n` and `m` are large and the repainting iteration count `x` is high, the effective working dimensions become non-trivially large, causing extensive data processing in each iteration."
   - **Explanation:** This describes the scenario where even with high `x`, the effective dimensions do not shrink enough, leading to heavy computation every iteration.

### Important Considerations

- The given constraints (1 ≤ n, m ≤ 5000 and 1 ≤ x ≤ 10^9) should be respected, ensuring the invariants are applicable to any valid input within these bounds.
- These invariants are crafted to help expose performance issues during testing, without relying on specific slow input values but rather on understanding the conditions that could universally trigger slowdowns.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
A chessboard n × m in size is given. During the zero minute we repaint all the black squares to the 0 color. During the i-th minute we repaint to the i color the initially black squares that have exactly four corner-adjacent squares painted i - 1 (all such squares are repainted simultaneously). This process continues ad infinitum. You have to figure out how many squares we repainted exactly x times.

The upper left square of the board has to be assumed to be always black. Two squares are called corner-adjacent, if they have exactly one common point.

Input

The first line contains integers n and m (1 ≤ n, m ≤ 5000). The second line contains integer x (1 ≤ x ≤ 109).

Output

Print how many squares will be painted exactly x times.

Examples

Input

3 3
1


Output

4


Input

3 3
2


Output

1


Input

1 1
1


Output

1

Solution (C++ code):
{solution}


assistant: Below is the translation of the performance-characterizing invariants into C++ checker code snippets, followed by integrating those checks into the original program.

### Phase 3: Implementing the Natural Language Invariants in C++

1. **Invariant 1: Nested Loop Over Large Adjusted Dimensions**
   - **Checker Code:**
     ```cpp
     void check_loop_invariant(int n, int m) {
         if (n > 1000 || m > 1000) {  // Example threshold to detect large loops
             cerr << "Warning: Performance bottleneck condition triggered - large adjusted dimensions in loops!" << endl;
             abort();
         }
     }
     ```

2. **Invariant 2: High Frequency of Boundary Checks**
   - **Checker Code:**
     ```cpp
     void check_boundary_invariant(int n, int m) {
         if (n * m > 1000000) {  // Example threshold to detect high boundary checks
             cerr << "Warning: Performance bottleneck condition triggered - excessive boundary checks!" << endl;
             abort();
         }
     }
     ```

3. **Invariant 3: Large Input Size with High Iterative Count**
   - **Checker Code:**
     ```cpp
     void check_high_iterative_invariant(int n, int m, int x) {
         if ((n > 1000 || m > 1000) && x > 1000) {  // Threshold for large dimensions and x
             cerr << "Warning: Performance bottleneck condition triggered - large input size with high iterations!" << endl;
             abort();
         }
     }
     ```

### Phase 4: Integrating Checker Code into the Original Program

Below is the original C++ program with integrated checker code to detect potential performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

bool arr[5005][5005];

void check_loop_invariant(int n, int m) {
    if (n > 1000 || m > 1000) {  // Example threshold to detect large loops
        cerr << "Warning: Performance bottleneck condition triggered - large adjusted dimensions in loops!" << endl;
        abort();
    }
}

void check_boundary_invariant(int n, int m) {
    if (n * m > 1000000) {  // Example threshold to detect high boundary checks
        cerr << "Warning: Performance bottleneck condition triggered - excessive boundary checks!" << endl;
        abort();
    }
}

void check_high_iterative_invariant(int n, int m, int x) {
    if ((n > 1000 || m > 1000) && x > 1000) {  // Threshold for large dimensions and x
        cerr << "Warning: Performance bottleneck condition triggered - large input size with high iterations!" << endl;
        abort();
    }
}

int main() {
    int i, a, n, m, x, ret = 0;
    scanf("%d %d %d", &n, &m, &x);

    // Placing the checkers right after input is read
    check_high_iterative_invariant(n, m, x);

    // Adjust dimensions
    n -= 2 * (x - 1);
    m -= 2 * (x - 1);

    // Check if adjusted dimensions are large before entering loops
    check_loop_invariant(n, m);
    check_boundary_invariant(n, m);

    if (n <= 0 && m <= 0)
        printf("0\n");
    else {
        for (i = 0; i < n; i++) {
            if (i % 2 == 0)
                arr[i][0] = 1;
            else
                arr[i][0] = 0;
            for (a = 1; a < m; a++) arr[i][a] = !arr[i][a - 1];
        }
        for (i = 0; i < n; i++)
            for (a = 0; a < m; a++)
                if (i == 0 || i == n - 1 || a == 0 || a == m - 1) ret += arr[i][a];
        printf("%d\n", ret);
    }
    return 0;
}
```

### Explanation

- **Check Placement:** The checks are placed immediately after reading the inputs and adjusting the dimensions to ensure they capture the conditions before the loops begin executing.
- **Threshold Values:** The thresholds used (e.g., `n > 1000`, `m > 1000`, etc.) are chosen to illustrate the concept of detecting large input scenarios. These can be adjusted based on further analysis or specific scenarios that trigger performance issues.

