system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Jon Snow now has to fight with White Walkers. He has n rangers, each of which has his own strength. Also Jon Snow has his favourite number x. Each ranger can fight with a white walker only if the strength of the white walker equals his strength. He however thinks that his rangers are weak and need to improve. Jon now thinks that if he takes the bitwise XOR of strengths of some of rangers with his favourite number x, he might get soldiers of high strength. So, he decided to do the following operation k times: 

  1. Arrange all the rangers in a straight line in the order of increasing strengths.
  2. Take the bitwise XOR (is written as <image>) of the strength of each alternate ranger with x and update it's strength.

Suppose, Jon has 5 rangers with strengths [9, 7, 11, 15, 5] and he performs the operation 1 time with x = 2. He first arranges them in the order of their strengths, [5, 7, 9, 11, 15]. Then he does the following: 

  1. The strength of first ranger is updated to <image>, i.e. 7.
  2. The strength of second ranger remains the same, i.e. 7.
  3. The strength of third ranger is updated to <image>, i.e. 11.
  4. The strength of fourth ranger remains the same, i.e. 11.
  5. The strength of fifth ranger is updated to <image>, i.e. 13.

The new strengths of the 5 rangers are [7, 7, 11, 11, 13]

Now, Jon wants to know the maximum and minimum strength of the rangers after performing the above operations k times. He wants your help for this task. Can you help him?

Input

First line consists of three integers n, k, x (1 ≤ n ≤ 105, 0 ≤ k ≤ 105, 0 ≤ x ≤ 103) — number of rangers Jon has, the number of times Jon will carry out the operation and Jon's favourite number respectively.

Second line consists of n integers representing the strengths of the rangers a1, a2, ..., an (0 ≤ ai ≤ 103).

Output

Output two integers, the maximum and the minimum strength of the rangers after performing the operation k times.

Examples

Input

5 1 2
9 7 11 15 5


Output

13 7

Input

2 100000 569
605 986


Output

986 605

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
vector<int> a, b, c;
int n, k, x;
int main() {
  ios_base::sync_with_stdio(false);
  scanf("%d %d %d", &n, &k, &x);
  int t;
  for (int i = 0; i < 1050; i++) {
    a.push_back(0);
    b.push_back(0);
    c.push_back(0);
  }
  for (int i = 0; i < n; i++) {
    scanf("%d", &t);
    a[t]++;
  }
  int cnt[1050];
  for (int i = 0; i < k; i++) {
    if (i % 2 == 0) {
      b = c;
      cnt[0] = a[0];
      for (int i = 1; i < 1050; i++) cnt[i] = cnt[i - 1] + a[i];
      for (int i = 0; i < 1050; i++) {
        int prev = 0;
        if (i > 0) prev = cnt[i - 1];
        if (prev % 2 == 0) {
          b[i ^ x] += ceil((double)a[i] / 2.00);
          b[i] += a[i] / 2;
        } else {
          b[i] += ceil((double)a[i] / 2.00);
          b[i ^ x] += a[i] / 2;
        }
      }
    } else {
      cnt[0] = b[0];
      for (int i = 1; i < 1050; i++) cnt[i] = cnt[i - 1] + b[i];
      a = c;
      for (int i = 0; i < 1050; i++) {
        int prev = 0;
        if (i > 0) prev = cnt[i - 1];
        if (prev % 2 == 0) {
          a[i ^ x] += ceil((double)b[i] / 2.00);
          a[i] += b[i] / 2;
        } else {
          a[i] += ceil((double)b[i] / 2.00);
          a[i ^ x] += b[i] / 2;
        }
      }
    }
  }
  int mini = 10000;
  int maxi = -1;
  if (k % 2 == 0) {
    for (int i = 0; i < 1050; i++) {
      if (a[i] > 0) {
        mini = min(i, mini);
        maxi = max(i, maxi);
      }
    }
  } else {
    for (int i = 0; i < 1050; i++) {
      if (b[i] > 0) {
        mini = min(i, mini);
        maxi = max(i, maxi);
      }
    }
  }
  cout << maxi << " " << mini;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 99999 581
61 112 235 397 397 620 645 659 780 897


(G.2) Fast Input

10 3 581
61 112 235 397 397 620 645 659 780 897


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> a, b, c; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, x; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d %d %d", &n, &k, &x); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int t; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < 1050; i++) { /* line 9 slow_hit_count: 1051, fast_hit_count: 1051 */
    a.push_back(0); /* line 10 slow_hit_count: 1050, fast_hit_count: 1050 */
    b.push_back(0); /* line 11 slow_hit_count: 1050, fast_hit_count: 1050 */
    c.push_back(0); /* line 12 slow_hit_count: 1050, fast_hit_count: 1050 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 14 slow_hit_count: 11, fast_hit_count: 11 */
    scanf("%d", &t); /* line 15 slow_hit_count: 10, fast_hit_count: 10 */
    a[t]++; /* line 16 slow_hit_count: 10, fast_hit_count: 10 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  int cnt[1050]; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < k; i++) { /* line 19 slow_hit_count: 100000, fast_hit_count: 4 */
    if (i % 2 == 0) { /* line 20 slow_hit_count: 99999, fast_hit_count: 3 */
      b = c; /* line 21 slow_hit_count: 50000, fast_hit_count: 2 */
      cnt[0] = a[0]; /* line 22 slow_hit_count: 50000, fast_hit_count: 2 */
      for (int i = 1; i < 1050; i++) cnt[i] = cnt[i - 1] + a[i]; /* line 23 slow_hit_count: 52500000, fast_hit_count: 2100 */
      for (int i = 0; i < 1050; i++) { /* line 24 slow_hit_count: 52550000, fast_hit_count: 2102 */
        int prev = 0; /* line 25 slow_hit_count: 52500000, fast_hit_count: 2100 */
        if (i > 0) prev = cnt[i - 1]; /* line 26 slow_hit_count: 52500000, fast_hit_count: 2100 */
        if (prev % 2 == 0) { /* line 27 slow_hit_count: 52500000, fast_hit_count: 2100 */
          b[i ^ x] += ceil((double)a[i] / 2.00); /* line 28 slow_hit_count: 18850090, fast_hit_count: 844 */
          b[i] += a[i] / 2; /* line 29 slow_hit_count: 18850090, fast_hit_count: 844 */
        } else { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
          b[i] += ceil((double)a[i] / 2.00); /* line 31 slow_hit_count: 33649910, fast_hit_count: 1256 */
          b[i ^ x] += a[i] / 2; /* line 32 slow_hit_count: 33649910, fast_hit_count: 1256 */
        } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      cnt[0] = b[0]; /* line 36 slow_hit_count: 49999, fast_hit_count: 1 */
      for (int i = 1; i < 1050; i++) cnt[i] = cnt[i - 1] + b[i]; /* line 37 slow_hit_count: 52498950, fast_hit_count: 1050 */
      a = c; /* line 38 slow_hit_count: 49999, fast_hit_count: 1 */
      for (int i = 0; i < 1050; i++) { /* line 39 slow_hit_count: 52548949, fast_hit_count: 1051 */
        int prev = 0; /* line 40 slow_hit_count: 52498950, fast_hit_count: 1050 */
        if (i > 0) prev = cnt[i - 1]; /* line 41 slow_hit_count: 52498950, fast_hit_count: 1050 */
        if (prev % 2 == 0) { /* line 42 slow_hit_count: 52498950, fast_hit_count: 1050 */
          a[i ^ x] += ceil((double)b[i] / 2.00); /* line 43 slow_hit_count: 34899396, fast_hit_count: 792 */
          a[i] += b[i] / 2; /* line 44 slow_hit_count: 34899396, fast_hit_count: 792 */
        } else { /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
          a[i] += ceil((double)b[i] / 2.00); /* line 46 slow_hit_count: 17599554, fast_hit_count: 258 */
          a[i ^ x] += b[i] / 2; /* line 47 slow_hit_count: 17599554, fast_hit_count: 258 */
        } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  int mini = 10000; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  int maxi = -1; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  if (k % 2 == 0) { /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i < 1050; i++) { /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
      if (a[i] > 0) { /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
        mini = min(i, mini); /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
        maxi = max(i, maxi); /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < 1050; i++) { /* line 62 slow_hit_count: 1051, fast_hit_count: 1051 */
      if (b[i] > 0) { /* line 63 slow_hit_count: 1050, fast_hit_count: 1050 */
        mini = min(i, mini); /* line 64 slow_hit_count: 10, fast_hit_count: 10 */
        maxi = max(i, maxi); /* line 65 slow_hit_count: 10, fast_hit_count: 10 */
      } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  cout << maxi << " " << mini; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 71 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in this C program, we need to compare the line-level hit counts between the fast and slow runs and derive performance-characterizing invariants based on those observations.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis:**
   - The loop at line 19 (`for (int i = 0; i < k; i++)`) has the highest hit count difference between the slow and fast inputs, with `100000` for slow input compared to just `4` for fast input. This significant difference is due to the high value of `k` in the slow input.
   - Lines 23 and 24, as well as similar lines in the alternate block (lines 37 and 39), have disproportionately high hit counts for the slow input. These lines involve iterating over a range and updating counts, which is repeated `k` times.
   - The operations inside these loops, like the XOR operation and accumulation of values, are hit multiple times because they are nested within the `k` iterations.

2. **Interaction with Data Structures:**
   - Arrays `a`, `b`, and `c` are used to track the strength distribution and are updated repeatedly in these loops. The large hit counts suggest that operations on them are a significant part of the slowdown.
   - The bitwise operations combined with frequent accesses and updates to these vectors exacerbate the performance hit when repeated many times, especially for large `k`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the hit count analysis and understanding of the algorithm, here are some performance-characterizing invariants for the slow path of the program:

1. **High Iteration Count:**
   - **Invariant:** "If the number of operations `k` is very high, approaching its upper constraint, and the number of distinct strength values is moderate, the repeated computation and data updates will significantly slow the program."
   - **Explanation:** When `k` is large, each alternate update cycle doubles the number of times the inner loops execute, causing a quadratic-like increase in iterations.

2. **Data Redistribution:**
   - **Invariant:** "If there are a moderate number of unique strength values and `k` is high, the repetitive redistribution of strengths using XOR operations increases execution time."
   - **Explanation:** The hit counts indicate that iterating over the entire possible strength space (1050 possible values) is a key factor in the slowdown. This is particularly true when redistributing values each time.

3. **Bitwise Operations:**
   - **Invariant:** "When `k` is large, the repeated bitwise XOR operation on array indices leads to significant slowdowns, especially if the distribution of strengths is not sparse."
   - **Explanation:** Frequent bitwise operations over a large set of values can become costly due to repeated memory accesses and modifications.

4. **Switching Arrays:**
   - **Invariant:** "If `k` is large and the switching between arrays `a` and `b` is frequent, execution slows down due to repeated data copying and transformations."
   - **Explanation:** The constant copying back and forth between arrays `a` and `b`, combined with bitwise operations, adds to the overhead when `k` is high.

These invariants are designed to identify potential slow points in the code based on input characteristics without relying on exact values from the slow input, allowing them to generalize to other scenarios under similar input constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Jon Snow now has to fight with White Walkers. He has n rangers, each of which has his own strength. Also Jon Snow has his favourite number x. Each ranger can fight with a white walker only if the strength of the white walker equals his strength. He however thinks that his rangers are weak and need to improve. Jon now thinks that if he takes the bitwise XOR of strengths of some of rangers with his favourite number x, he might get soldiers of high strength. So, he decided to do the following operation k times: 

  1. Arrange all the rangers in a straight line in the order of increasing strengths.
  2. Take the bitwise XOR (is written as <image>) of the strength of each alternate ranger with x and update it's strength.

Suppose, Jon has 5 rangers with strengths [9, 7, 11, 15, 5] and he performs the operation 1 time with x = 2. He first arranges them in the order of their strengths, [5, 7, 9, 11, 15]. Then he does the following: 

  1. The strength of first ranger is updated to <image>, i.e. 7.
  2. The strength of second ranger remains the same, i.e. 7.
  3. The strength of third ranger is updated to <image>, i.e. 11.
  4. The strength of fourth ranger remains the same, i.e. 11.
  5. The strength of fifth ranger is updated to <image>, i.e. 13.

The new strengths of the 5 rangers are [7, 7, 11, 11, 13]

Now, Jon wants to know the maximum and minimum strength of the rangers after performing the above operations k times. He wants your help for this task. Can you help him?

Input

First line consists of three integers n, k, x (1 ≤ n ≤ 105, 0 ≤ k ≤ 105, 0 ≤ x ≤ 103) — number of rangers Jon has, the number of times Jon will carry out the operation and Jon's favourite number respectively.

Second line consists of n integers representing the strengths of the rangers a1, a2, ..., an (0 ≤ ai ≤ 103).

Output

Output two integers, the maximum and the minimum strength of the rangers after performing the operation k times.

Examples

Input

5 1 2
9 7 11 15 5


Output

13 7

Input

2 100000 569
605 986


Output

986 605

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants as Checker Code in C++

Here, I will translate the performance-characterizing invariants identified in natural language into C++ code that checks these conditions at runtime.

```cpp
void check_high_iteration_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high number of operations (k)!" << endl;
        abort();
    }
}

void check_data_redistribution_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated strength redistribution!" << endl;
        abort();
    }
}

void check_bitwise_operations_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive bitwise operations!" << endl;
        abort();
    }
}

void check_switching_arrays_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent array switching!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now, I will integrate the checker functions into the original C++ program, placing them at strategic points to avoid overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
vector<int> a, b, c;
int n, k, x;

// Checker functions for performance bottlenecks
void check_high_iteration_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high number of operations (k)!" << endl;
        abort();
    }
}

void check_data_redistribution_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - repeated strength redistribution!" << endl;
        abort();
    }
}

void check_bitwise_operations_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive bitwise operations!" << endl;
        abort();
    }
}

void check_switching_arrays_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent array switching!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    scanf("%d %d %d", &n, &k, &x);
    int t;

    // Initialize vectors with zeros
    for (int i = 0; i < 1050; i++) {
        a.push_back(0);
        b.push_back(0);
        c.push_back(0);
    }

    // Read ranger strengths
    for (int i = 0; i < n; i++) {
        scanf("%d", &t);
        a[t]++;
    }

    // Check for high iteration count before the main loop
    check_high_iteration_invariant(k > 50000);

    int cnt[1050];
    for (int i = 0; i < k; i++) {
        if (i % 2 == 0) {
            b = c;
            cnt[0] = a[0];
            for (int i = 1; i < 1050; i++) cnt[i] = cnt[i - 1] + a[i];
            for (int i = 0; i < 1050; i++) {
                int prev = 0;
                if (i > 0) prev = cnt[i - 1];
                if (prev % 2 == 0) {
                    b[i ^ x] += ceil((double)a[i] / 2.00);
                    b[i] += a[i] / 2;
                } else {
                    b[i] += ceil((double)a[i] / 2.00);
                    b[i ^ x] += a[i] / 2;
                }
            }
        } else {
            cnt[0] = b[0];
            for (int i = 1; i < 1050; i++) cnt[i] = cnt[i - 1] + b[i];
            a = c;
            for (int i = 0; i < 1050; i++) {
                int prev = 0;
                if (i > 0) prev = cnt[i - 1];
                if (prev % 2 == 0) {
                    a[i ^ x] += ceil((double)b[i] / 2.00);
                    a[i] += b[i] / 2;
                } else {
                    a[i] += ceil((double)b[i] / 2.00);
                    a[i ^ x] += b[i] / 2;
                }
            }
        }
    }

    // Check invariants after the main loop
    check_data_redistribution_invariant(k > 50000 && n < 1000);
    check_bitwise_operations_invariant(k > 50000 && n < 1000);
    check_switching_arrays_invariant(k > 50000 && n < 1000);

    int mini = 10000;
    int maxi = -1;
    if (k % 2 == 0) {
        for (int i = 0; i < 1050; i++) {
            if (a[i] > 0) {
                mini = min(i, mini);
                maxi = max(i, maxi);
            }
        }
    } else {
        for (int i = 0; i < 1050; i++) {
            if (b[i] > 0) {
                mini = min(i, mini);
                maxi = max(i, maxi);
            }
        }
    }
    cout << maxi << " " << mini;
    return 0;
}
```

### Explanation:
1. **Check for High Iteration Count:**
   - Placed before the main loop, this check warns if `k` is very high, signaling potential performance issues due to the large number of iterations.

2. **Checks for Data Redistribution, Bitwise Operations, and Array Switching:**
   - Positioned after the main loop, these checks ensure that the program warns if it encounters heavy data operations, which can degrade performance as described in the invariants. The conditions consider both `k` and `n` to verify that the computational load is realistic within the constraints. 

These checks are strategically placed to avoid unnecessary overhead within tight loops, while still providing valuable information on potential performance bottlenecks.

