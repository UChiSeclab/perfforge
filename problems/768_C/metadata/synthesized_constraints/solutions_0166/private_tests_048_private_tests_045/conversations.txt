system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Jon Snow now has to fight with White Walkers. He has n rangers, each of which has his own strength. Also Jon Snow has his favourite number x. Each ranger can fight with a white walker only if the strength of the white walker equals his strength. He however thinks that his rangers are weak and need to improve. Jon now thinks that if he takes the bitwise XOR of strengths of some of rangers with his favourite number x, he might get soldiers of high strength. So, he decided to do the following operation k times: 

  1. Arrange all the rangers in a straight line in the order of increasing strengths.
  2. Take the bitwise XOR (is written as <image>) of the strength of each alternate ranger with x and update it's strength.

Suppose, Jon has 5 rangers with strengths [9, 7, 11, 15, 5] and he performs the operation 1 time with x = 2. He first arranges them in the order of their strengths, [5, 7, 9, 11, 15]. Then he does the following: 

  1. The strength of first ranger is updated to <image>, i.e. 7.
  2. The strength of second ranger remains the same, i.e. 7.
  3. The strength of third ranger is updated to <image>, i.e. 11.
  4. The strength of fourth ranger remains the same, i.e. 11.
  5. The strength of fifth ranger is updated to <image>, i.e. 13.

The new strengths of the 5 rangers are [7, 7, 11, 11, 13]

Now, Jon wants to know the maximum and minimum strength of the rangers after performing the above operations k times. He wants your help for this task. Can you help him?

Input

First line consists of three integers n, k, x (1 ≤ n ≤ 105, 0 ≤ k ≤ 105, 0 ≤ x ≤ 103) — number of rangers Jon has, the number of times Jon will carry out the operation and Jon's favourite number respectively.

Second line consists of n integers representing the strengths of the rangers a1, a2, ..., an (0 ≤ ai ≤ 103).

Output

Output two integers, the maximum and the minimum strength of the rangers after performing the operation k times.

Examples

Input

5 1 2
9 7 11 15 5


Output

13 7

Input

2 100000 569
605 986


Output

986 605

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int inf = 1000000000;
const long long INF = 1LL * inf * inf;
const double eps = 1e-9;
const long long md = 1e9 + 7;
const double EPS = 1e-5;
const long long maxll = std::numeric_limits<long long>::max();
template <typename name>
inline name sqr(name x) {
  return x * x;
}
long double log(long double base, long double n) { return log(n) / log(base); }
inline long long multmod(long long a, long long b, long long md) {
  if (!a) return 0;
  if (a % 2 == 1)
    return (multmod(a - 1, b, md) + b) % md;
  else
    return sqr(multmod(a / 2, b, md)) % md;
}
template <typename name>
inline name bpow(name base, long long exp, long long md = maxll) {
  if (exp == 0) return 1;
  if (exp % 2 == 1)
    return (base * bpow(base, exp - 1, md)) % md;
  else {
    name k = bpow(base, exp / 2, md);
    return (k * k) % md;
  }
}
unsigned char ccc;
inline void read(int &n) {
  n = 0;
  bool _minus = false;
  while (true) {
    ccc = getchar();
    if (ccc == ' ' || ccc == '\n') break;
    if (ccc == '-') {
      _minus = true;
      continue;
    }
    n = n * 10 + ccc - '0';
  }
  if (_minus) n *= -1;
}
inline void read(int &n, int &m) {
  read(n);
  read(m);
}
inline void read(int &n, int &m, int &k) {
  read(n);
  read(m);
  read(k);
}
inline void read(std::string &s) {
  s = "";
  while (true) {
    ccc = getchar();
    if (ccc == ' ' || ccc == '\n') break;
    s += ccc;
  }
}
const int MAXN = 3000;
int n, k, x, flag, mx, mn, new_cnt[MAXN], cnt[MAXN];
int main() {
  scanf("%d%d%d", &n, &k, &x);
  for (int i = 0; i < n; i++) {
    int x;
    scanf("%d", &x);
    cnt[x]++;
  }
  for (int i = 0; i < k; i++) {
    int cur = 0;
    for (int j = 0; j < MAXN; j++) {
      if (cur == 0) {
        new_cnt[j ^ x] += (cnt[j] + 1) / 2;
        new_cnt[j] += cnt[j] / 2;
      } else {
        new_cnt[j ^ x] += cnt[j] / 2;
        new_cnt[j] += (cnt[j] + 1) / 2;
      }
      cur = (cur + cnt[j]) % 2;
    }
    for (int j = 0; j < MAXN; j++) {
      cnt[j] = new_cnt[j];
      new_cnt[j] = 0;
    }
  }
  for (int i = 0; i < MAXN; i++) {
    if (cnt[i]) mx = i;
    if (cnt[i] && !flag) mn = i, flag = 1;
  }
  cout << mx << " " << mn;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 99999 581
61 112 235 397 397 620 645 659 780 897


(G.2) Fast Input

10 3 581
61 112 235 397 397 620 645 659 780 897


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 1000000000; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 1LL * inf * inf; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const double eps = 1e-9; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const long long md = 1e9 + 7; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
const double EPS = 1e-5; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
const long long maxll = std::numeric_limits<long long>::max(); /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
template <typename name> /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
inline name sqr(name x) { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  return x * x; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
long double log(long double base, long double n) { return log(n) / log(base); } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
inline long long multmod(long long a, long long b, long long md) { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  if (!a) return 0; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  if (a % 2 == 1) /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    return (multmod(a - 1, b, md) + b) % md; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    return sqr(multmod(a / 2, b, md)) % md; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
template <typename name> /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
inline name bpow(name base, long long exp, long long md = maxll) { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  if (exp == 0) return 1; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  if (exp % 2 == 1) /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    return (base * bpow(base, exp - 1, md)) % md; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  else { /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    name k = bpow(base, exp / 2, md); /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    return (k * k) % md; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
unsigned char ccc; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
inline void read(int &n) { /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  n = 0; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  bool _minus = false; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  while (true) { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    ccc = getchar(); /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    if (ccc == ' ' || ccc == '\n') break; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    if (ccc == '-') { /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
      _minus = true; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      continue; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    n = n * 10 + ccc - '0'; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  if (_minus) n *= -1; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
inline void read(int &n, int &m) { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  read(n); /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  read(m); /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
inline void read(int &n, int &m, int &k) { /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  read(n); /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  read(m); /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  read(k); /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
inline void read(std::string &s) { /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  s = ""; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  while (true) { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    ccc = getchar(); /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
    if (ccc == ' ' || ccc == '\n') break; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    s += ccc; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 3000; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
int n, k, x, flag, mx, mn, new_cnt[MAXN], cnt[MAXN]; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d%d", &n, &k, &x); /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 67 slow_hit_count: 11, fast_hit_count: 11 */
    int x; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d", &x); /* line 69 slow_hit_count: 10, fast_hit_count: 10 */
    cnt[x]++; /* line 70 slow_hit_count: 10, fast_hit_count: 10 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < k; i++) { /* line 72 slow_hit_count: 100000, fast_hit_count: 4 */
    int cur = 0; /* line 73 slow_hit_count: 99999, fast_hit_count: 3 */
    for (int j = 0; j < MAXN; j++) { /* line 74 slow_hit_count: 300096999, fast_hit_count: 9003 */
      if (cur == 0) { /* line 75 slow_hit_count: 299997000, fast_hit_count: 9000 */
        new_cnt[j ^ x] += (cnt[j] + 1) / 2; /* line 76 slow_hit_count: 248747536, fast_hit_count: 7486 */
        new_cnt[j] += cnt[j] / 2; /* line 77 slow_hit_count: 248747536, fast_hit_count: 7486 */
      } else { /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
        new_cnt[j ^ x] += cnt[j] / 2; /* line 79 slow_hit_count: 51249464, fast_hit_count: 1514 */
        new_cnt[j] += (cnt[j] + 1) / 2; /* line 80 slow_hit_count: 51249464, fast_hit_count: 1514 */
      } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
      cur = (cur + cnt[j]) % 2; /* line 82 slow_hit_count: 299997000, fast_hit_count: 9000 */
    } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = 0; j < MAXN; j++) { /* line 84 slow_hit_count: 300096999, fast_hit_count: 9003 */
      cnt[j] = new_cnt[j]; /* line 85 slow_hit_count: 299997000, fast_hit_count: 9000 */
      new_cnt[j] = 0; /* line 86 slow_hit_count: 299997000, fast_hit_count: 9000 */
    } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < MAXN; i++) { /* line 89 slow_hit_count: 3001, fast_hit_count: 3001 */
    if (cnt[i]) mx = i; /* line 90 slow_hit_count: 3000, fast_hit_count: 3000 */
    if (cnt[i] && !flag) mn = i, flag = 1; /* line 91 slow_hit_count: 3000, fast_hit_count: 3000 */
  } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  cout << mx << " " << mn; /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 94 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance issues and derive conditions or invariants under which the program encounters slow execution, let's follow the two-phase approach:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - The loop starting at line 72 is executed `k` times. For the slow input, `k = 99999`, resulting in 100,000 iterations.
   - The nested loop starting at line 74 iterates over `MAXN`, which is 3000. Thus, this inner loop executes 3000 times for each of the `k` iterations.
   - Most lines within these loops have significantly higher hit counts during the slow input run compared to the fast input run, indicating that these loops are the primary source of the slowdown.

2. **Critical Observations**:
   - The nested loops operate on the `cnt` and `new_cnt` arrays. These operations include XOR computations and array updates, which are inexpensive on their own but become costly when repeated extensively.
   - The loop at line 72, coupled with the loop at line 74, results in a total number of iterations equal to `k * MAXN`, which can become very large as `k` approaches its upper constraint of 100,000.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the code analysis and hit counts, here are the performance-characterizing invariants:

1. **High Iteration Count in Nested Loops**:
   - Natural Language Invariant: "If the number of operations \( k \) is very high, close to its maximum constraint (100,000), the repeated XOR and count operations over a large range can lead to significant slowdowns."
   - Explanation: When \( k \) is near its upper bound, the main loop runs an extremely high number of times, leading to a performance bottleneck.

2. **Heavy Array Manipulation**:
   - Natural Language Invariant: "When XOR-ing and updating the strengths involves a significant portion of the `cnt` array (up to 3000 elements), and this is repeated numerous times, the cumulative effect can degrade performance significantly."
   - Explanation: Each iteration of the loop involves operations on potentially thousands of elements, and repeating this process \( k \) times can lead to inefficiencies.

3. **Repetitive and Unnecessary Computation**:
   - Natural Language Invariant: "If the alternate strength updates don't change much between iterations, excessive repetition without meaningful change can waste computation cycles."
   - Explanation: Given that the operations might not always lead to significant changes in strength, especially when the same set of strengths is repeatedly XOR-ed, unnecessary computations can slow the process.

These invariants focus on capturing the structural patterns in the code that lead to slow execution, particularly when \( k \) is large, and offer a framework for understanding under what conditions the performance issues arise.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Jon Snow now has to fight with White Walkers. He has n rangers, each of which has his own strength. Also Jon Snow has his favourite number x. Each ranger can fight with a white walker only if the strength of the white walker equals his strength. He however thinks that his rangers are weak and need to improve. Jon now thinks that if he takes the bitwise XOR of strengths of some of rangers with his favourite number x, he might get soldiers of high strength. So, he decided to do the following operation k times: 

  1. Arrange all the rangers in a straight line in the order of increasing strengths.
  2. Take the bitwise XOR (is written as <image>) of the strength of each alternate ranger with x and update it's strength.

Suppose, Jon has 5 rangers with strengths [9, 7, 11, 15, 5] and he performs the operation 1 time with x = 2. He first arranges them in the order of their strengths, [5, 7, 9, 11, 15]. Then he does the following: 

  1. The strength of first ranger is updated to <image>, i.e. 7.
  2. The strength of second ranger remains the same, i.e. 7.
  3. The strength of third ranger is updated to <image>, i.e. 11.
  4. The strength of fourth ranger remains the same, i.e. 11.
  5. The strength of fifth ranger is updated to <image>, i.e. 13.

The new strengths of the 5 rangers are [7, 7, 11, 11, 13]

Now, Jon wants to know the maximum and minimum strength of the rangers after performing the above operations k times. He wants your help for this task. Can you help him?

Input

First line consists of three integers n, k, x (1 ≤ n ≤ 105, 0 ≤ k ≤ 105, 0 ≤ x ≤ 103) — number of rangers Jon has, the number of times Jon will carry out the operation and Jon's favourite number respectively.

Second line consists of n integers representing the strengths of the rangers a1, a2, ..., an (0 ≤ ai ≤ 103).

Output

Output two integers, the maximum and the minimum strength of the rangers after performing the operation k times.

Examples

Input

5 1 2
9 7 11 15 5


Output

13 7

Input

2 100000 569
605 986


Output

986 605

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Inferred Invariants as C++ Checks

For each natural language invariant derived in Phase 2, we now implement a corresponding C++ check:

1. **High Iteration Count in Nested Loops**:
   - Check if \( k \), the number of operations, is very large and likely to cause performance issues.
   
   ```cpp
   void check_high_iteration_count(int k) {
       if (k > 10000) {
           cerr << "Warning: Performance bottleneck due to high iteration count!" << endl;
           abort();
       }
   }
   ```

2. **Heavy Array Manipulation**:
   - Ensure that frequent manipulations over a large range do not become a bottleneck.

   ```cpp
   void check_array_manipulation(int maxN, int k) {
       if (k * maxN > 30000000) { // An arbitrary large threshold for combined iterations
           cerr << "Warning: Performance bottleneck due to heavy array manipulation!" << endl;
           abort();
       }
   }
   ```

3. **Repetitive and Unnecessary Computation**:
   - Check for excessive computations that do not result in significant changes.

   ```cpp
   void check_repetitive_computation(int k) {
       if (k > 50000) {
           cerr << "Warning: Performance bottleneck due to repetitive computation!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Instrument the Original Code with the Checkers

Now we integrate these checks into the main program. We will place them at strategic points where they can effectively monitor performance without adding overhead to tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 3000;
int n, k, x, flag, mx, mn, new_cnt[MAXN], cnt[MAXN];

// Performance checkers
void check_high_iteration_count(int k) {
    if (k > 10000) {
        cerr << "Warning: Performance bottleneck due to high iteration count!" << endl;
        abort();
    }
}

void check_array_manipulation(int maxN, int k) {
    if (k * maxN > 30000000) { // An arbitrary large threshold for combined iterations
        cerr << "Warning: Performance bottleneck due to heavy array manipulation!" << endl;
        abort();
    }
}

void check_repetitive_computation(int k) {
    if (k > 50000) {
        cerr << "Warning: Performance bottleneck due to repetitive computation!" << endl;
        abort();
    }
}

int main() {
    scanf("%d%d%d", &n, &k, &x);

    // Insert checks right after inputs are read
    check_high_iteration_count(k);
    check_array_manipulation(MAXN, k);
    check_repetitive_computation(k);

    for (int i = 0; i < n; i++) {
        int x;
        scanf("%d", &x);
        cnt[x]++;
    }
    for (int i = 0; i < k; i++) {
        int cur = 0;
        for (int j = 0; j < MAXN; j++) {
            if (cur == 0) {
                new_cnt[j ^ x] += (cnt[j] + 1) / 2;
                new_cnt[j] += cnt[j] / 2;
            } else {
                new_cnt[j ^ x] += cnt[j] / 2;
                new_cnt[j] += (cnt[j] + 1) / 2;
            }
            cur = (cur + cnt[j]) % 2;
        }
        for (int j = 0; j < MAXN; j++) {
            cnt[j] = new_cnt[j];
            new_cnt[j] = 0;
        }
    }
    for (int i = 0; i < MAXN; i++) {
        if (cnt[i]) mx = i;
        if (cnt[i] && !flag) mn = i, flag = 1;
    }
    cout << mx << " " << mn;
}
```

### Explanation

- **Placement**: The checks are placed immediately after reading the inputs. This ensures that they assess the potential for performance issues without interfering with the main computation loop.
- **Thresholds**: The thresholds used in the checks are based on reasonable assumptions about what constitutes a heavy load for this problem, ensuring they are activated under conditions likely to cause slowdowns.

This instrumentation should help in detecting scenarios where the program might experience performance issues, aiding in both debugging and optimization efforts.

