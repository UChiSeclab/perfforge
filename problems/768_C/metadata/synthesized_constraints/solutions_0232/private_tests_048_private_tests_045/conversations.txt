system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Jon Snow now has to fight with White Walkers. He has n rangers, each of which has his own strength. Also Jon Snow has his favourite number x. Each ranger can fight with a white walker only if the strength of the white walker equals his strength. He however thinks that his rangers are weak and need to improve. Jon now thinks that if he takes the bitwise XOR of strengths of some of rangers with his favourite number x, he might get soldiers of high strength. So, he decided to do the following operation k times: 

  1. Arrange all the rangers in a straight line in the order of increasing strengths.
  2. Take the bitwise XOR (is written as <image>) of the strength of each alternate ranger with x and update it's strength.

Suppose, Jon has 5 rangers with strengths [9, 7, 11, 15, 5] and he performs the operation 1 time with x = 2. He first arranges them in the order of their strengths, [5, 7, 9, 11, 15]. Then he does the following: 

  1. The strength of first ranger is updated to <image>, i.e. 7.
  2. The strength of second ranger remains the same, i.e. 7.
  3. The strength of third ranger is updated to <image>, i.e. 11.
  4. The strength of fourth ranger remains the same, i.e. 11.
  5. The strength of fifth ranger is updated to <image>, i.e. 13.

The new strengths of the 5 rangers are [7, 7, 11, 11, 13]

Now, Jon wants to know the maximum and minimum strength of the rangers after performing the above operations k times. He wants your help for this task. Can you help him?

Input

First line consists of three integers n, k, x (1 ≤ n ≤ 105, 0 ≤ k ≤ 105, 0 ≤ x ≤ 103) — number of rangers Jon has, the number of times Jon will carry out the operation and Jon's favourite number respectively.

Second line consists of n integers representing the strengths of the rangers a1, a2, ..., an (0 ≤ ai ≤ 103).

Output

Output two integers, the maximum and the minimum strength of the rangers after performing the operation k times.

Examples

Input

5 1 2
9 7 11 15 5


Output

13 7

Input

2 100000 569
605 986


Output

986 605

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
clock_t START;
inline long double TIME() {
  return (long double)(clock() - START) / CLOCKS_PER_SEC;
}
void SHOW() {
  cout << fixed << setprecision(10);
  cout << TIME() << " SECONDS FROM START\n";
}
long double TL = 2.0;
int calls = 0;
inline bool IS() {
  if (TL - TIME() < 0.1) return true;
  return false;
}
template <typename T1, typename T2>
inline bool amin(T1 &a, T2 b) {
  if (a > b) {
    a = b;
    return true;
  }
  return false;
}
template <typename T1, typename T2>
inline bool amax(T1 &a, T2 b) {
  if (a < b) {
    a = b;
    return true;
  }
  return false;
}
template <typename T1, typename T2>
ostream &operator<<(ostream &os, pair<T1, T2> &p) {
  os << p.first << ' ' << p.second;
  return os;
}
template <typename T1, typename T2>
istream &operator>>(istream &is, pair<T1, T2> &p) {
  is >> p.first >> p.second;
  return is;
}
template <typename T>
istream &operator>>(istream &is, vector<T> &v) {
  for (auto &u : v) is >> u;
  return is;
}
template <typename T>
ostream &operator<<(ostream &os, vector<T> &v) {
  for (auto &u : v) os << u << ' ';
  return os;
}
int hash_mod[4] = {1000000007, 998244353, 1000000009, 999999937},
    mod = hash_mod[rnd() % 4];
int hash_pows[4] = {179, 239, 1007, 2003}, P = hash_pows[rnd() % 4];
int binpow(int first, int p) {
  int res = 1;
  while (p) {
    if (p % 2) res = (res * first) % mod;
    first = (first * first) % mod;
    p /= 2;
  }
  return res;
}
const int N = 1e6 + 7, NS = 2e3 + 7, lg = 20, sq = 550, inf = 2e9 + 7;
const long double eps = 1e-9, pi = 3.14159265359;
int cnt[2000], nw[2000];
void solve() {
  int n, k, first;
  cin >> n >> k >> first;
  for (int i = 0; i < n; i++) {
    int a;
    cin >> a;
    cnt[a]++;
  }
  for (int it = 0; it < k; it++) {
    int cur = 0;
    fill(nw, nw + 2000, 0);
    for (int i = 0; i < 2000; i++) {
      int t;
      if (cur % 2 == 0) {
        t = (cnt[i] + 1) / 2;
      } else {
        t = cnt[i] / 2;
      }
      nw[i ^ first] += t;
      nw[i] += cnt[i] - t;
      cur += cnt[i];
    }
    for (int i = 0; i < 2000; i++) cnt[i] = nw[i];
  }
  int mx, mn;
  for (int i = 0; i < 2000; i++) {
    if (cnt[i]) {
      mn = i;
      break;
    }
  }
  for (int i = 1999; i >= 0; i--) {
    if (cnt[i]) {
      mx = i;
      break;
    }
  }
  cout << mx << ' ' << mn;
}
signed main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 99999 581
61 112 235 397 397 620 645 659 780 897


(G.2) Fast Input

10 3 581
61 112 235 397 397 620 645 659 780 897


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count()); /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
clock_t START; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
inline long double TIME() { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  return (long double)(clock() - START) / CLOCKS_PER_SEC; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void SHOW() { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  cout << fixed << setprecision(10); /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  cout << TIME() << " SECONDS FROM START\n"; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
long double TL = 2.0; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int calls = 0; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
inline bool IS() { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  if (TL - TIME() < 0.1) return true; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2> /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
inline bool amin(T1 &a, T2 b) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  if (a > b) { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    a = b; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    return true; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2> /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
inline bool amax(T1 &a, T2 b) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  if (a < b) { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    a = b; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    return true; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2> /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
ostream &operator<<(ostream &os, pair<T1, T2> &p) { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  os << p.first << ' ' << p.second; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T1, typename T2> /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
istream &operator>>(istream &is, pair<T1, T2> &p) { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  is >> p.first >> p.second; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  return is; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
istream &operator>>(istream &is, vector<T> &v) { /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto &u : v) is >> u; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  return is; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
ostream &operator<<(ostream &os, vector<T> &v) { /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto &u : v) os << u << ' '; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
int hash_mod[4] = {1000000007, 998244353, 1000000009, 999999937}, /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    mod = hash_mod[rnd() % 4]; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
int hash_pows[4] = {179, 239, 1007, 2003}, P = hash_pows[rnd() % 4]; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
int binpow(int first, int p) { /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  int res = 1; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  while (p) { /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    if (p % 2) res = (res * first) % mod; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    first = (first * first) % mod; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    p /= 2; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1e6 + 7, NS = 2e3 + 7, lg = 20, sq = 550, inf = 2e9 + 7; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
const long double eps = 1e-9, pi = 3.14159265359; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
int cnt[2000], nw[2000]; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  int n, k, first; /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> k >> first; /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 72 slow_hit_count: 11, fast_hit_count: 11 */
    int a; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> a; /* line 74 slow_hit_count: 10, fast_hit_count: 10 */
    cnt[a]++; /* line 75 slow_hit_count: 10, fast_hit_count: 10 */
  } /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
  for (int it = 0; it < k; it++) { /* line 77 slow_hit_count: 100000, fast_hit_count: 4 */
    int cur = 0; /* line 78 slow_hit_count: 99999, fast_hit_count: 3 */
    fill(nw, nw + 2000, 0); /* line 79 slow_hit_count: 99999, fast_hit_count: 3 */
    for (int i = 0; i < 2000; i++) { /* line 80 slow_hit_count: 200097999, fast_hit_count: 6003 */
      int t; /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
      if (cur % 2 == 0) { /* line 82 slow_hit_count: 199998000, fast_hit_count: 6000 */
        t = (cnt[i] + 1) / 2; /* line 83 slow_hit_count: 148748536, fast_hit_count: 4486 */
      } else { /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
        t = cnt[i] / 2; /* line 85 slow_hit_count: 51249464, fast_hit_count: 1514 */
      } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
      nw[i ^ first] += t; /* line 87 slow_hit_count: 199998000, fast_hit_count: 6000 */
      nw[i] += cnt[i] - t; /* line 88 slow_hit_count: 199998000, fast_hit_count: 6000 */
      cur += cnt[i]; /* line 89 slow_hit_count: 199998000, fast_hit_count: 6000 */
    } /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < 2000; i++) cnt[i] = nw[i]; /* line 91 slow_hit_count: 200097999, fast_hit_count: 6003 */
  } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  int mx, mn; /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < 2000; i++) { /* line 94 slow_hit_count: 62, fast_hit_count: 62 */
    if (cnt[i]) { /* line 95 slow_hit_count: 62, fast_hit_count: 62 */
      mn = i; /* line 96 slow_hit_count: 1, fast_hit_count: 1 */
      break; /* line 97 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1999; i >= 0; i--) { /* line 100 slow_hit_count: 1032, fast_hit_count: 1032 */
    if (cnt[i]) { /* line 101 slow_hit_count: 1032, fast_hit_count: 1032 */
      mx = i; /* line 102 slow_hit_count: 1, fast_hit_count: 1 */
      break; /* line 103 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
  cout << mx << ' ' << mn; /* line 106 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 107 slow_hit_count: 1, fast_hit_count: 1 */
signed main() { /* line 108 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 109 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 110 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 111 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 112 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 113 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To identify the performance bottlenecks in the provided C++ program and derive performance-characterizing invariants, we will go through the code and hit count information. We will analyze how the slow and fast inputs interact with the code.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - The core loop (`for (int it = 0; it < k; it++)`) where `k` iterations are performed is executed 100,000 times for the slow input versus only 4 times for the fast input.
   - The inner loop (`for (int i = 0; i < 2000; i++)`) is executed significantly more for the slow input due to the high value of `k`, leading to more than 200 million iterations.

2. **Pinpointing Expensive Lines:**
   - Lines 80-91 involve iterating over a range and performing operations that depend on the current state of `cnt[]`. These operations are hit a staggering number of times in the slow input due to the high value of `k`.

3. **Interaction with Data Structures:**
   - The `cnt` array, which keeps track of ranger strengths, is updated repeatedly within the nested loop for each iteration of `k`. This results in a tremendous number of operations as `k` increases.
   - The operations involve bitwise XOR and updates to `nw[]`, which are then copied back to `cnt[]`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Invariants:**

   - **Invariant 1:** "When the number of operations `k` is large, specifically approaching the upper constraint limit (e.g., 100,000), the performance significantly degrades due to the cumulative cost of iterating through the ranger strengths repeatedly."
  
   - **Invariant 2:** "Even with a moderate number of rangers (up to 2000 possible strength values), when `k` is high, the inner loop operations over ranger strengths (`cnt[]` manipulations) can become the primary bottleneck, magnifying the update cost through repeated XOR operations."

   - **Invariant 3:** "If `k` is substantial and each ranger’s strength value after XOR remains concentrated in few values, excessive redistribution leads to multiple re-evaluations of similar strengths, causing inefficiency."

2. **Thresholds and Conditions:**

   - **Threshold for `k`:** A large `k` directly correlates with the number of times the nested loop operations are performed. Given `k` can reach up to 100,000, when it is near this upper limit, inefficient processing dominates execution time.
   
   - **Concentration of Values:** If the XOR operation does not significantly diversify the strength values (staying within a limited range), it can cause repeated operations on the same indices, leading to inefficient cycles.

By focusing on these conditions, future inputs that could lead to slow performance can be effectively identified, allowing for optimization of the program's execution flow or problem constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Jon Snow now has to fight with White Walkers. He has n rangers, each of which has his own strength. Also Jon Snow has his favourite number x. Each ranger can fight with a white walker only if the strength of the white walker equals his strength. He however thinks that his rangers are weak and need to improve. Jon now thinks that if he takes the bitwise XOR of strengths of some of rangers with his favourite number x, he might get soldiers of high strength. So, he decided to do the following operation k times: 

  1. Arrange all the rangers in a straight line in the order of increasing strengths.
  2. Take the bitwise XOR (is written as <image>) of the strength of each alternate ranger with x and update it's strength.

Suppose, Jon has 5 rangers with strengths [9, 7, 11, 15, 5] and he performs the operation 1 time with x = 2. He first arranges them in the order of their strengths, [5, 7, 9, 11, 15]. Then he does the following: 

  1. The strength of first ranger is updated to <image>, i.e. 7.
  2. The strength of second ranger remains the same, i.e. 7.
  3. The strength of third ranger is updated to <image>, i.e. 11.
  4. The strength of fourth ranger remains the same, i.e. 11.
  5. The strength of fifth ranger is updated to <image>, i.e. 13.

The new strengths of the 5 rangers are [7, 7, 11, 11, 13]

Now, Jon wants to know the maximum and minimum strength of the rangers after performing the above operations k times. He wants your help for this task. Can you help him?

Input

First line consists of three integers n, k, x (1 ≤ n ≤ 105, 0 ≤ k ≤ 105, 0 ≤ x ≤ 103) — number of rangers Jon has, the number of times Jon will carry out the operation and Jon's favourite number respectively.

Second line consists of n integers representing the strengths of the rangers a1, a2, ..., an (0 ≤ ai ≤ 103).

Output

Output two integers, the maximum and the minimum strength of the rangers after performing the operation k times.

Examples

Input

5 1 2
9 7 11 15 5


Output

13 7

Input

2 100000 569
605 986


Output

986 605

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants as Checkers in C++

Let's translate the natural language performance-characterizing invariants into C++ checker functions.

#### Invariant Checks in C++
```cpp
#include <iostream>
using namespace std;

// Checker for Invariant 1: Large number of operations
void check_large_k_invariant(int k) {
    if (k > 10000) {
        cerr << "Warning: large_k_invariant triggered - k is very large, causing potential performance degradation!" << endl;
        abort();
    }
}

// Checker for Invariant 2: Repeated operations on similar strength values
void check_repeated_operations_invariant(int k, int n) {
    if (k > n * 10) {
        cerr << "Warning: repeated_operations_invariant triggered - high k relative to n may cause performance issues." << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checker functions into the original C++ program. The checks will be placed strategically to avoid unnecessary overhead while effectively detecting conditions that lead to slow execution.

```cpp
#include <bits/stdc++.h>
using namespace std;
mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());

const int N = 1e6 + 7, NS = 2e3 + 7, inf = 2e9 + 7;
int cnt[2000], nw[2000];

// Checker for Invariant 1: Large number of operations
void check_large_k_invariant(int k) {
    if (k > 10000) {
        cerr << "Warning: large_k_invariant triggered - k is very large, causing potential performance degradation!" << endl;
        abort();
    }
}

// Checker for Invariant 2: Repeated operations on similar strength values
void check_repeated_operations_invariant(int k, int n) {
    if (k > n * 10) {
        cerr << "Warning: repeated_operations_invariant triggered - high k relative to n may cause performance issues." << endl;
        abort();
    }
}

void solve() {
    int n, k, first;
    cin >> n >> k >> first;

    check_large_k_invariant(k); // Check for large k
    check_repeated_operations_invariant(k, n); // Check for high k relative to n

    for (int i = 0; i < n; i++) {
        int a;
        cin >> a;
        cnt[a]++;
    }
    for (int it = 0; it < k; it++) {
        int cur = 0;
        fill(nw, nw + 2000, 0);
        for (int i = 0; i < 2000; i++) {
            int t;
            if (cur % 2 == 0) {
                t = (cnt[i] + 1) / 2;
            } else {
                t = cnt[i] / 2;
            }
            nw[i ^ first] += t;
            nw[i] += cnt[i] - t;
            cur += cnt[i];
        }
        for (int i = 0; i < 2000; i++) cnt[i] = nw[i];
    }
    int mx, mn;
    for (int i = 0; i < 2000; i++) {
        if (cnt[i]) {
            mn = i;
            break;
        }
    }
    for (int i = 1999; i >= 0; i--) {
        if (cnt[i]) {
            mx = i;
            break;
        }
    }
    cout << mx << ' ' << mn;
}

signed main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    solve();
}
```

### Explanation

- **`check_large_k_invariant`**: This function ensures that the number `k` is not excessively large, which could lead to performance issues due to the sheer number of operations required. It is invoked immediately after reading `k`.

- **`check_repeated_operations_invariant`**: This function checks if `k` is disproportionately large compared to `n`, indicating repeated operations on the data structure that could degrade performance. It is also invoked after reading `k` and `n`.

These checks help identify and abort the program if it enters known slow conditions, which is especially useful for a fuzzer trying to detect performance issues.

