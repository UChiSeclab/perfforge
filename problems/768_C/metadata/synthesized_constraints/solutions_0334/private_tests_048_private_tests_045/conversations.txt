system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Jon Snow now has to fight with White Walkers. He has n rangers, each of which has his own strength. Also Jon Snow has his favourite number x. Each ranger can fight with a white walker only if the strength of the white walker equals his strength. He however thinks that his rangers are weak and need to improve. Jon now thinks that if he takes the bitwise XOR of strengths of some of rangers with his favourite number x, he might get soldiers of high strength. So, he decided to do the following operation k times: 

  1. Arrange all the rangers in a straight line in the order of increasing strengths.
  2. Take the bitwise XOR (is written as <image>) of the strength of each alternate ranger with x and update it's strength.

Suppose, Jon has 5 rangers with strengths [9, 7, 11, 15, 5] and he performs the operation 1 time with x = 2. He first arranges them in the order of their strengths, [5, 7, 9, 11, 15]. Then he does the following: 

  1. The strength of first ranger is updated to <image>, i.e. 7.
  2. The strength of second ranger remains the same, i.e. 7.
  3. The strength of third ranger is updated to <image>, i.e. 11.
  4. The strength of fourth ranger remains the same, i.e. 11.
  5. The strength of fifth ranger is updated to <image>, i.e. 13.

The new strengths of the 5 rangers are [7, 7, 11, 11, 13]

Now, Jon wants to know the maximum and minimum strength of the rangers after performing the above operations k times. He wants your help for this task. Can you help him?

Input

First line consists of three integers n, k, x (1 ≤ n ≤ 105, 0 ≤ k ≤ 105, 0 ≤ x ≤ 103) — number of rangers Jon has, the number of times Jon will carry out the operation and Jon's favourite number respectively.

Second line consists of n integers representing the strengths of the rangers a1, a2, ..., an (0 ≤ ai ≤ 103).

Output

Output two integers, the maximum and the minimum strength of the rangers after performing the operation k times.

Examples

Input

5 1 2
9 7 11 15 5


Output

13 7

Input

2 100000 569
605 986


Output

986 605

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const int N = (int)4e3 + 228;
using namespace std;
int n, a[N], new_a[N], k, x;
int main() {
  scanf("%d%d%d", &n, &k, &x);
  for (int i = 1; i <= n; i++) {
    int y;
    scanf("%d", &y);
    a[y]++;
  }
  for (int i = 1; i <= k; i++) {
    int cur = 0;
    for (int j = 0; j <= 4000; j++) {
      if (a[j]) {
        if (cur % 2 == 0) {
          new_a[j ^ x] += (a[j] + 1) / 2;
          new_a[j] += a[j] / 2;
        } else {
          new_a[j ^ x] += a[j] / 2;
          new_a[j] += (a[j] + 1) / 2;
        }
        cur += a[j];
      }
    }
    for (int j = 0; j <= 4000; j++) {
      a[j] = new_a[j];
      new_a[j] = 0;
    }
  }
  int mn = N, mx = -1;
  for (int i = 0; i < N; i++) {
    if (a[i]) {
      mn = min(mn, i);
      mx = max(mn, i);
    }
  }
  cout << mx << ' ' << mn << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10 99999 581
61 112 235 397 397 620 645 659 780 897


(G.2) Fast Input

10 3 581
61 112 235 397 397 620 645 659 780 897


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const int N = (int)4e3 + 228; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, a[N], new_a[N], k, x; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d%d", &n, &k, &x); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) { /* line 7 slow_hit_count: 11, fast_hit_count: 11 */
    int y; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d", &y); /* line 9 slow_hit_count: 10, fast_hit_count: 10 */
    a[y]++; /* line 10 slow_hit_count: 10, fast_hit_count: 10 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= k; i++) { /* line 12 slow_hit_count: 100000, fast_hit_count: 4 */
    int cur = 0; /* line 13 slow_hit_count: 99999, fast_hit_count: 3 */
    for (int j = 0; j <= 4000; j++) { /* line 14 slow_hit_count: 400195998, fast_hit_count: 12006 */
      if (a[j]) { /* line 15 slow_hit_count: 400095999, fast_hit_count: 12003 */
        if (cur % 2 == 0) { /* line 16 slow_hit_count: 999989, fast_hit_count: 29 */
          new_a[j ^ x] += (a[j] + 1) / 2; /* line 17 slow_hit_count: 499994, fast_hit_count: 14 */
          new_a[j] += a[j] / 2; /* line 18 slow_hit_count: 499994, fast_hit_count: 14 */
        } else { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
          new_a[j ^ x] += a[j] / 2; /* line 20 slow_hit_count: 499995, fast_hit_count: 15 */
          new_a[j] += (a[j] + 1) / 2; /* line 21 slow_hit_count: 499995, fast_hit_count: 15 */
        } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
        cur += a[j]; /* line 23 slow_hit_count: 999989, fast_hit_count: 29 */
      } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = 0; j <= 4000; j++) { /* line 26 slow_hit_count: 400195998, fast_hit_count: 12006 */
      a[j] = new_a[j]; /* line 27 slow_hit_count: 400095999, fast_hit_count: 12003 */
      new_a[j] = 0; /* line 28 slow_hit_count: 400095999, fast_hit_count: 12003 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  int mn = N, mx = -1; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < N; i++) { /* line 32 slow_hit_count: 4229, fast_hit_count: 4229 */
    if (a[i]) { /* line 33 slow_hit_count: 4228, fast_hit_count: 4228 */
      mn = min(mn, i); /* line 34 slow_hit_count: 10, fast_hit_count: 10 */
      mx = max(mn, i); /* line 35 slow_hit_count: 10, fast_hit_count: 10 */
    } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  cout << mx << ' ' << mn << endl; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The outer loop on line 12 (`for (int i = 1; i <= k; i++)`) is executed 100,000 times for the slow input and only 4 times for the fast input. This shows a direct correlation between the number of iterations and the execution time.
   - The inner loop on line 14 (`for (int j = 0; j <= 4000; j++)`) is a nested loop that is executed an exceedingly high number of times: 400,195,998 times for the slow input versus only 12,006 times for the fast input.
   - Lines within the nested loop (e.g., lines 15-23) have significantly higher hit counts for the slow input, indicating that these lines are the primary contributors to the increased execution time.

2. **Understanding the Interaction with Data Structures:**
   - The loop iterates over a fixed range (0 to 4000), but the operations within it depend on the distribution of non-zero elements in the array `a`.
   - The high hit counts on data manipulation lines (17-23) suggest that the operations involving `new_a` and `a` during the bitwise XOR and strength update contribute to the slowdown.

3. **Input Constraints and Loops:**
   - The problem constraints indicate `n <= 100,000` and `k <= 100,000`. The slow input uses a very high `k` (99,999), which, combined with the nested loop, results in excessive computation.

## Phase 2: Derive Performance-Characterizing Invariants

### Natural Language Performance Invariants

1. **High Iteration Count Due to k:**
   - "When the number of operations `k` is very large, approaching the upper constraint, the repetitive processing of ranger strengths through sorting and XOR operations incurs significant computational overhead."

2. **Fixed Range Loop with Non-zero Conditions:**
   - "The program slows down significantly when each iteration over the potential strength values (0 to 4000) results in numerous non-zero elements being processed repeatedly, especially when combined with a high `k` value."

3. **Recurrent Array Updates:**
   - "If the transformation of strength values through XOR repeatedly redistributes many strengths across the range, creating a dense population of discrete strength values, the computational cost rises alongside `k`."

### Summary

The inefficiencies primarily arise when `k` is near its maximum allowed value, leading to repeated exhaustive checks and updates within the nested loops. This is exacerbated by a scenario where many ranger strengths are non-zero and require frequent redistribution through XOR operations over the full range of potential strengths.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Jon Snow now has to fight with White Walkers. He has n rangers, each of which has his own strength. Also Jon Snow has his favourite number x. Each ranger can fight with a white walker only if the strength of the white walker equals his strength. He however thinks that his rangers are weak and need to improve. Jon now thinks that if he takes the bitwise XOR of strengths of some of rangers with his favourite number x, he might get soldiers of high strength. So, he decided to do the following operation k times: 

  1. Arrange all the rangers in a straight line in the order of increasing strengths.
  2. Take the bitwise XOR (is written as <image>) of the strength of each alternate ranger with x and update it's strength.

Suppose, Jon has 5 rangers with strengths [9, 7, 11, 15, 5] and he performs the operation 1 time with x = 2. He first arranges them in the order of their strengths, [5, 7, 9, 11, 15]. Then he does the following: 

  1. The strength of first ranger is updated to <image>, i.e. 7.
  2. The strength of second ranger remains the same, i.e. 7.
  3. The strength of third ranger is updated to <image>, i.e. 11.
  4. The strength of fourth ranger remains the same, i.e. 11.
  5. The strength of fifth ranger is updated to <image>, i.e. 13.

The new strengths of the 5 rangers are [7, 7, 11, 11, 13]

Now, Jon wants to know the maximum and minimum strength of the rangers after performing the above operations k times. He wants your help for this task. Can you help him?

Input

First line consists of three integers n, k, x (1 ≤ n ≤ 105, 0 ≤ k ≤ 105, 0 ≤ x ≤ 103) — number of rangers Jon has, the number of times Jon will carry out the operation and Jon's favourite number respectively.

Second line consists of n integers representing the strengths of the rangers a1, a2, ..., an (0 ≤ ai ≤ 103).

Output

Output two integers, the maximum and the minimum strength of the rangers after performing the operation k times.

Examples

Input

5 1 2
9 7 11 15 5


Output

13 7

Input

2 100000 569
605 986


Output

986 605

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Natural Language Invariants as Checker Code

To address the performance-characterizing invariants identified in Phase 2, we will implement runtime checks in C++. Each check corresponds to a natural language invariant derived from the analysis.

### Invariant Checkers in C++

1. **High Iteration Count Due to k:**

   ```cpp
   void check_high_k_invariant(int k) {
       if (k > 10000) { // Arbitrary threshold to identify potentially high iteration counts
           cerr << "Warning: Performance bottleneck condition triggered due to high k!" << endl;
           abort();
       }
   }
   ```

2. **Fixed Range Loop with Non-zero Conditions:**

   ```cpp
   void check_dense_population_invariant(int a[], int size) {
       int non_zero_count = 0;
       for (int i = 0; i < size; i++) {
           if (a[i] != 0) {
               non_zero_count++;
           }
       }
       if (non_zero_count > 2000) { // Threshold assumes a significant number of non-zero entries
           cerr << "Warning: Performance bottleneck due to dense strength distribution!" << endl;
           abort();
       }
   }
   ```

3. **Recurrent Array Updates:**

   ```cpp
   void check_recurrent_updates_invariant(int k, int iteration_threshold) {
       if (k > iteration_threshold) {
           cerr << "Warning: Performance bottleneck due to high recurrent updates!" << endl;
           abort();
       }
   }
   ```

## Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checkers into the existing C++ program at appropriate locations to ensure they do not introduce additional overhead within tight loops.

### Instrumented C++ Code with Integrated Checks

```cpp
#include <bits/stdc++.h>
const int N = (int)4e3 + 228;
using namespace std;
int n, a[N], new_a[N], k, x;

void check_high_k_invariant(int k) {
    if (k > 10000) { // Arbitrary threshold to identify potentially high iteration counts
        cerr << "Warning: Performance bottleneck condition triggered due to high k!" << endl;
        abort();
    }
}

void check_dense_population_invariant(int a[], int size) {
    int non_zero_count = 0;
    for (int i = 0; i < size; i++) {
        if (a[i] != 0) {
            non_zero_count++;
        }
    }
    if (non_zero_count > 2000) { // Threshold assumes a significant number of non-zero entries
        cerr << "Warning: Performance bottleneck due to dense strength distribution!" << endl;
        abort();
    }
}

void check_recurrent_updates_invariant(int k, int iteration_threshold) {
    if (k > iteration_threshold) {
        cerr << "Warning: Performance bottleneck due to high recurrent updates!" << endl;
        abort();
    }
}

int main() {
    scanf("%d%d%d", &n, &k, &x);
    check_high_k_invariant(k); // Check condition after input

    for (int i = 1; i <= n; i++) {
        int y;
        scanf("%d", &y);
        a[y]++;
    }
    
    check_dense_population_invariant(a, N); // Check dense distribution

    int iteration_threshold = 50000; // Threshold for recurrent updates check
    check_recurrent_updates_invariant(k, iteration_threshold);

    for (int i = 1; i <= k; i++) {
        int cur = 0;
        for (int j = 0; j <= 4000; j++) {
            if (a[j]) {
                if (cur % 2 == 0) {
                    new_a[j ^ x] += (a[j] + 1) / 2;
                    new_a[j] += a[j] / 2;
                } else {
                    new_a[j ^ x] += a[j] / 2;
                    new_a[j] += (a[j] + 1) / 2;
                }
                cur += a[j];
            }
        }
        for (int j = 0; j <= 4000; j++) {
            a[j] = new_a[j];
            new_a[j] = 0;
        }
    }

    int mn = N, mx = -1;
    for (int i = 0; i < N; i++) {
        if (a[i]) {
            mn = min(mn, i);
            mx = max(mx, i);
        }
    }
    cout << mx << ' ' << mn << endl;
    return 0;
}
```

### Explanation of Integrated Checkers:

- **`check_high_k_invariant`:** Added after reading `k` to ensure it doesn't exceed a practical threshold for performance.
- **`check_dense_population_invariant`:** Applied after initial array population to identify if the number of non-zero elements is significantly high.
- **`check_recurrent_updates_invariant`:** Applied before entering the main loop to warn about potential excessive repetitions based on `k`.

These checks aim to catch potential performance bottlenecks based on the invariants identified earlier, without adding excessive overhead to the program's execution.

