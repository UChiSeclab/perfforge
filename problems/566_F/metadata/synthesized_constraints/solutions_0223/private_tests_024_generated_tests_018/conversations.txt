system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

As you must know, the maximum clique problem in an arbitrary graph is NP-hard. Nevertheless, for some graphs of specific kinds it can be solved effectively.

Just in case, let us remind you that a clique in a non-directed graph is a subset of the vertices of a graph, such that any two vertices of this subset are connected by an edge. In particular, an empty set of vertexes and a set consisting of a single vertex, are cliques.

Let's define a divisibility graph for a set of positive integers A = {a1, a2, ..., an} as follows. The vertices of the given graph are numbers from set A, and two numbers ai and aj (i ≠ j) are connected by an edge if and only if either ai is divisible by aj, or aj is divisible by ai.

You are given a set of non-negative integers A. Determine the size of a maximum clique in a divisibility graph for set A.

Input

The first line contains integer n (1 ≤ n ≤ 106), that sets the size of set A.

The second line contains n distinct positive integers a1, a2, ..., an (1 ≤ ai ≤ 106) — elements of subset A. The numbers in the line follow in the ascending order.

Output

Print a single number — the maximum size of a clique in a divisibility graph for set A.

Examples

Input

8
3 4 6 8 10 18 21 24


Output

3

Note

In the first sample test a clique of size 3 is, for example, a subset of vertexes {3, 6, 18}. A clique of a larger size doesn't exist in this graph.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ull = unsigned long long;
using ld = long double;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using pci = pair<char, int>;
using vi = vector<int>;
using vll = vector<ll>;
using vpii = vector<pii>;
const ll infll = 1e18 + 3;
const int maxn = 1e6 + 77;
const int nmax = 1e6 + 577;
const ll basell = 1e18 + 3;
const int mod = 1e9 + 7;
const ld eps = 1e-7;
const int inf = 1009000999;
const int nv = 100505;
const int baseint = 1000200013;
const ld PI = acos(-1.0);
inline bool EQ(ld a, ld b) { return fabs(a - b) < 1e-9; }
inline bool IF(int a, int b, int c) { return (a >= b && a <= c); }
inline bool IFS(int a, int b, int c) { return (a > b && a < c); }
int a[nmax];
int dp[nmax];
int inline solve() {
  ios::sync_with_stdio(NULL), cin.tie(NULL), cout.tie(NULL);
  ;
  int n;
  cin >> n;
  for (int i = 0; i < n; ++i) {
    cin >> a[i];
    dp[a[i]] = 1;
  }
  int ans = 0;
  for (int i = 0; i < n; ++i) {
    for (int j = 2 * a[i]; j < nmax; j += a[i]) {
      dp[j] = max(dp[j], dp[a[i]] + 1);
    }
    ans = max(ans, dp[a[i]]);
  }
  cout << ans;
  return 0;
}
int32_t main() {
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2
1 1000000


(G.2) Fast Input

2
2 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using ull = unsigned long long; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using ld = long double; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
using pii = pair<int, int>; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
using pll = pair<ll, ll>; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
using pci = pair<char, int>; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
using vi = vector<int>; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
using vll = vector<ll>; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
using vpii = vector<pii>; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
const ll infll = 1e18 + 3; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn = 1e6 + 77; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
const int nmax = 1e6 + 577; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
const ll basell = 1e18 + 3; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e9 + 7; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
const ld eps = 1e-7; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 1009000999; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
const int nv = 100505; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
const int baseint = 1000200013; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
const ld PI = acos(-1.0); /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
inline bool EQ(ld a, ld b) { return fabs(a - b) < 1e-9; } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
inline bool IF(int a, int b, int c) { return (a >= b && a <= c); } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
inline bool IFS(int a, int b, int c) { return (a > b && a < c); } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
int a[nmax]; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
int dp[nmax]; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int inline solve() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(NULL), cin.tie(NULL), cout.tie(NULL); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  ; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  int n; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 32 slow_hit_count: 3, fast_hit_count: 3 */
    cin >> a[i]; /* line 33 slow_hit_count: 2, fast_hit_count: 2 */
    dp[a[i]] = 1; /* line 34 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 37 slow_hit_count: 3, fast_hit_count: 3 */
    for (int j = 2 * a[i]; j < nmax; j += a[i]) { /* line 38 slow_hit_count: 1000577, fast_hit_count: 500289 */
      dp[j] = max(dp[j], dp[a[i]] + 1); /* line 39 slow_hit_count: 1000575, fast_hit_count: 500287 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    ans = max(ans, dp[a[i]]); /* line 41 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 49 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottleneck of the provided C program, we need to consider the differences in line hit counts between the fast and slow inputs. Based on the hit count information, we can derive the following performance-characterizing invariants:

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **Line 38 (`for` loop):** This line shows a significant difference in hit counts between the slow input (1,000,577 hits) and the fast input (500,289 hits). This loop iterates over multiples of `a[i]`, and the high hit count for the slow input indicates that this loop is a major source of slowdown. The key observation is that the divisor relationships in the graph (where one number is a multiple of another) play a critical role in determining the number of iterations.

2. **Line 39 (`dp[j] = max(dp[j], dp[a[i]] + 1)`):** This line is executed almost as many times as the loop on line 38, indicating that the updating of the `dp` array is a frequent operation, especially for the slow input.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the analysis, we can generate the following natural language invariants:

1. **Invariant #1: High Number of Divisor Relationships**
   - **Description:** The program may slow down significantly when there is a number in the input set that has a large number of multiples or divisors within the input range. This causes the nested loop to execute many times, particularly when the smallest number is a common divisor.
   - **Example:** If a small number like `1` is present in the input, it will be a divisor for many numbers up to `1,000,000`, leading to a high number of iterations in the nested loop.

2. **Invariant #2: Large `a[i]` with Many Multiples**
   - **Description:** If a number `a[i]` is chosen such that it has many multiples up to the maximum constraint (`1,000,000`), the performance may degrade. This results in the inner loop iterating over a large list of multiples, leading to more updates in the `dp` array.
   - **Example:** For a number close to `1,000,000`, the number of iterations is limited, but for smaller numbers, especially those with many factors, the loop could iterate significantly more often.

3. **Invariant #3: Smallest Element Being `1`**
   - **Description:** When the smallest element in the input array is `1`, the divisibility graph becomes dense, as `1` divides all other numbers, triggering a large number of divisibility checks and updates.
   - **Example:** If the input includes `1`, every number between `1` and `1,000,000` must be processed in the inner loop for divisibility checks.

These invariants help us understand the conditions under which the code could slow down based on the structure and relationships within the input data, rather than the absolute size of the input itself.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
As you must know, the maximum clique problem in an arbitrary graph is NP-hard. Nevertheless, for some graphs of specific kinds it can be solved effectively.

Just in case, let us remind you that a clique in a non-directed graph is a subset of the vertices of a graph, such that any two vertices of this subset are connected by an edge. In particular, an empty set of vertexes and a set consisting of a single vertex, are cliques.

Let's define a divisibility graph for a set of positive integers A = {a1, a2, ..., an} as follows. The vertices of the given graph are numbers from set A, and two numbers ai and aj (i ≠ j) are connected by an edge if and only if either ai is divisible by aj, or aj is divisible by ai.

You are given a set of non-negative integers A. Determine the size of a maximum clique in a divisibility graph for set A.

Input

The first line contains integer n (1 ≤ n ≤ 106), that sets the size of set A.

The second line contains n distinct positive integers a1, a2, ..., an (1 ≤ ai ≤ 106) — elements of subset A. The numbers in the line follow in the ascending order.

Output

Print a single number — the maximum size of a clique in a divisibility graph for set A.

Examples

Input

8
3 4 6 8 10 18 21 24


Output

3

Note

In the first sample test a clique of size 3 is, for example, a subset of vertexes {3, 6, 18}. A clique of a larger size doesn't exist in this graph.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance Invariants as Runtime Checks

Let's translate the natural language invariants into C++ code snippets that can be integrated into the original program to detect performance bottlenecks.

#### Invariant #1: High Number of Divisor Relationships
- **Checker Code:**
```cpp
void check_divisor_relationships(int smallest) {
    if (smallest == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - smallest element is 1, causing dense divisor relationships" << endl;
        abort();
    }
}
```

#### Invariant #2: Large `a[i]` with Many Multiples
- **Checker Code:**
```cpp
void check_large_multiples(int largest, int n) {
    if (largest / n > 10) { // Example threshold; adjust based on expected range
        cerr << "Warning: Performance bottleneck condition triggered - large number with many multiples" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into Original C++ Program

Now, we'll integrate the checker functions into the existing C++ solution, placing them strategically at points where they can detect potential bottlenecks without adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using ull = unsigned long long;
using ld = long double;
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using pci = pair<char, int>;
using vi = vector<int>;
using vll = vector<ll>;
using vpii = vector<pii>;
const ll infll = 1e18 + 3;
const int maxn = 1e6 + 77;
const int nmax = 1e6 + 577;
const ll basell = 1e18 + 3;
const int mod = 1e9 + 7;
const ld eps = 1e-7;
const int inf = 1009000999;
const int nv = 100505;
const int baseint = 1000200013;
const ld PI = acos(-1.0);
inline bool EQ(ld a, ld b) { return fabs(a - b) < 1e-9; }
inline bool IF(int a, int b, int c) { return (a >= b && a <= c); }
inline bool IFS(int a, int b, int c) { return (a > b && a < c); }
int a[nmax];
int dp[nmax];

// Invariant Checkers
void check_divisor_relationships(int smallest) {
    if (smallest == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - smallest element is 1, causing dense divisor relationships" << endl;
        abort();
    }
}

void check_large_multiples(int largest, int n) {
    if (largest / n > 10) { // Example threshold; adjust based on expected range
        cerr << "Warning: Performance bottleneck condition triggered - large number with many multiples" << endl;
        abort();
    }
}

int inline solve() {
    ios::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);
    
    int n;
    cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
        dp[a[i]] = 1;
    }
    
    // Insert the invariant checkers after reading inputs
    check_divisor_relationships(a[0]); // Check based on the smallest element
    check_large_multiples(a[n-1], n);  // Check based on the largest element and input size
    
    int ans = 0;
    for (int i = 0; i < n; ++i) {
        for (int j = 2 * a[i]; j < nmax; j += a[i]) {
            dp[j] = max(dp[j], dp[a[i]] + 1);
        }
        ans = max(ans, dp[a[i]]);
    }
    cout << ans;
    return 0;
}

int32_t main() {
    solve();
    return 0;
}
```

### Explanation:
- **`check_divisor_relationships`:** Placed after reading inputs, this check uses the smallest element to determine if `1` is in the set, which could cause dense divisor relationships.
- **`check_large_multiples`:** Also placed after input, this check uses a ratio (`largest / n`) as a heuristic to determine if a large number with many multiples exists, potentially causing performance issues.

These checks will help in identifying when the program is likely to encounter performance bottlenecks due to specific input patterns.

