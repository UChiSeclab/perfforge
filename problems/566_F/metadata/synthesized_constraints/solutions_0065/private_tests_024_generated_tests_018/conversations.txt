system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

As you must know, the maximum clique problem in an arbitrary graph is NP-hard. Nevertheless, for some graphs of specific kinds it can be solved effectively.

Just in case, let us remind you that a clique in a non-directed graph is a subset of the vertices of a graph, such that any two vertices of this subset are connected by an edge. In particular, an empty set of vertexes and a set consisting of a single vertex, are cliques.

Let's define a divisibility graph for a set of positive integers A = {a1, a2, ..., an} as follows. The vertices of the given graph are numbers from set A, and two numbers ai and aj (i ≠ j) are connected by an edge if and only if either ai is divisible by aj, or aj is divisible by ai.

You are given a set of non-negative integers A. Determine the size of a maximum clique in a divisibility graph for set A.

Input

The first line contains integer n (1 ≤ n ≤ 106), that sets the size of set A.

The second line contains n distinct positive integers a1, a2, ..., an (1 ≤ ai ≤ 106) — elements of subset A. The numbers in the line follow in the ascending order.

Output

Print a single number — the maximum size of a clique in a divisibility graph for set A.

Examples

Input

8
3 4 6 8 10 18 21 24


Output

3

Note

In the first sample test a clique of size 3 is, for example, a subset of vertexes {3, 6, 18}. A clique of a larger size doesn't exist in this graph.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a[2000000];
int dp[2000000];
int main() {
  int n, i, j, num, ans = 0;
  scanf("%d", &n);
  for (i = 0; i < n; i++) {
    scanf("%d", &a[i]);
    dp[a[i]] = 1;
  }
  for (i = 0; i < n; i++) {
    num = a[i];
    for (j = 2 * num; j <= 1000000; j += num) dp[j] = max(dp[j], 1 + dp[num]);
    ans = max(ans, dp[num]);
  }
  printf("%d", ans);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2
1 1000000


(G.2) Fast Input

2
2 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a[2000000]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int dp[2000000]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int n, i, j, num, ans = 0; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < n; i++) { /* line 8 slow_hit_count: 3, fast_hit_count: 3 */
    scanf("%d", &a[i]); /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
    dp[a[i]] = 1; /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < n; i++) { /* line 12 slow_hit_count: 3, fast_hit_count: 3 */
    num = a[i]; /* line 13 slow_hit_count: 2, fast_hit_count: 2 */
    for (j = 2 * num; j <= 1000000; j += num) dp[j] = max(dp[j], 1 + dp[num]); /* line 14 slow_hit_count: 1000001, fast_hit_count: 500001 */
    ans = max(ans, dp[num]); /* line 15 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d", ans); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance issues with the given C program, we need to consider both the code structure and the hit count data provided for the slow and fast inputs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - Line 14: `for (j = 2 * num; j <= 1000000; j += num) dp[j] = max(dp[j], 1 + dp[num]);`
     - Slow Input Hit Count: 1,000,001
     - Fast Input Hit Count: 500,001
   - This line is executed significantly more often in the slow input than in the fast input.

2. **Inference About Code Interaction:**
   - The inner loop on line 14 iterates over multiples of `num`, marking them in the `dp` array. This loop's execution count is directly influenced by the value of `num`. If `num` is small, the loop will iterate many times, causing a slowdown.
   - For the slow input (`1 1000000`), when `num` is `1`, the loop iterates over every number from `2` to `1,000,000`, resulting in a very high number of iterations. For the fast input (`2 1000000`), when `num` is `2`, it iterates over every even number, which is still substantial but half as many iterations as when `num` is `1`.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant on Small Divisors:**
   - **Natural Language Description:**
     - "If the smallest number in the set is very small (close to 1), the loop iterating over multiples of this number will execute many times, leading to a potential slowdown. This is because every integer up to a maximum limit will be checked for divisibility."
   - **Code Implementation Suggestion:**
     - Although we are not directly modifying the code for performance checks in this context, if we were to check this invariant:
     ```cpp
     void check_small_divisor_invariant(bool condition) {
         if (condition) {
             cerr << "Warning: small_divisor_invariant triggered - small divisor causing many iterations" << endl;
             abort();
         }
     }

     // Before the loop over `n`
     check_small_divisor_invariant(a[0] == 1);
     ```

2. **Invariant on Input Range and Multiples:**
   - **Natural Language Description:**
     - "When the smallest number in the input set is a divisor of many other numbers in the range (e.g., when it is 1 or a small prime), the inner loop processing these multiples may become a performance bottleneck."
   - **Code Implementation Suggestion:**
     ```cpp
     void check_divisor_multiples_invariant(bool condition) {
         if (condition) {
             cerr << "Warning: divisor_multiples_invariant triggered - excessive multiples processing" << endl;
             abort();
         }
     }

     // Before processing each `num` in the second loop
     check_divisor_multiples_invariant(a[0] <= 10); // 10 is a heuristic small threshold
     ```

These invariants highlight conditions under which the program's performance may degrade significantly due to inefficient processing of divisors and multiples, especially in cases where the smallest number in the input is particularly small (close to 1). These conditions are abstract and do not rely on specific numeric values from the inputs, focusing instead on the structural characteristics that lead to performance issues.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
As you must know, the maximum clique problem in an arbitrary graph is NP-hard. Nevertheless, for some graphs of specific kinds it can be solved effectively.

Just in case, let us remind you that a clique in a non-directed graph is a subset of the vertices of a graph, such that any two vertices of this subset are connected by an edge. In particular, an empty set of vertexes and a set consisting of a single vertex, are cliques.

Let's define a divisibility graph for a set of positive integers A = {a1, a2, ..., an} as follows. The vertices of the given graph are numbers from set A, and two numbers ai and aj (i ≠ j) are connected by an edge if and only if either ai is divisible by aj, or aj is divisible by ai.

You are given a set of non-negative integers A. Determine the size of a maximum clique in a divisibility graph for set A.

Input

The first line contains integer n (1 ≤ n ≤ 106), that sets the size of set A.

The second line contains n distinct positive integers a1, a2, ..., an (1 ≤ ai ≤ 106) — elements of subset A. The numbers in the line follow in the ascending order.

Output

Print a single number — the maximum size of a clique in a divisibility graph for set A.

Examples

Input

8
3 4 6 8 10 18 21 24


Output

3

Note

In the first sample test a clique of size 3 is, for example, a subset of vertexes {3, 6, 18}. A clique of a larger size doesn't exist in this graph.

Solution (C++ code):
{solution}


assistant: Let's proceed with the tasks outlined in Phase 3 and Phase 4.

### Phase 3: Implement Checkers for the Invariants

We'll implement the checkers based on the natural language invariants we derived earlier:

1. **Invariant on Small Divisors:**
   - **Condition Check:** If the smallest number in the input is `1`, this could trigger a performance bottleneck due to excessive iterations over multiples.

```cpp
void check_small_divisor_invariant(int smallestElement) {
    if (smallestElement == 1) {
        cerr << "Warning: Performance bottleneck condition triggered due to small divisor (1)!" << endl;
        abort();
    }
}
```

2. **Invariant on Input Range and Multiples:**
   - **Condition Check:** If the smallest number is very small (heuristically less than or equal to `10`), the program may slow due to processing many multiples.

```cpp
void check_divisor_multiples_invariant(int smallestElement) {
    if (smallestElement <= 10) {
        cerr << "Warning: Performance bottleneck condition triggered due to many multiples processing!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checks into the original C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;

int a[2000000];
int dp[2000000];

// Function to check if the input has a small divisor that might cause performance issues
void check_small_divisor_invariant(int smallestElement) {
    if (smallestElement == 1) {
        cerr << "Warning: Performance bottleneck condition triggered due to small divisor (1)!" << endl;
        abort();
    }
}

// Function to check if the input has a small element causing many multiples to be processed
void check_divisor_multiples_invariant(int smallestElement) {
    if (smallestElement <= 10) {
        cerr << "Warning: Performance bottleneck condition triggered due to many multiples processing!" << endl;
        abort();
    }
}

int main() {
    int n, i, j, num, ans = 0;
    scanf("%d", &n);
    for (i = 0; i < n; i++) {
        scanf("%d", &a[i]);
        dp[a[i]] = 1;
    }

    // Place the checks after reading the input to catch potential performance bottlenecks early
    check_small_divisor_invariant(a[0]);
    check_divisor_multiples_invariant(a[0]);

    for (i = 0; i < n; i++) {
        num = a[i];
        for (j = 2 * num; j <= 1000000; j += num) {
            dp[j] = max(dp[j], 1 + dp[num]);
        }
        ans = max(ans, dp[num]);
    }
    
    printf("%d", ans);
    return 0;
}
```

### Explanation of Integration

- **Checker Integration:** The checkers are placed after reading the input (`scanf` loop) and before the processing loop begins. This placement ensures that we do not add overhead inside tight loops and catch potential issues early.
- **Invariant Conditions:** The conditions check the smallest element of the input array `a` to determine potential performance bottlenecks, specifically for very small values that could cause excessive iteration.

