system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

As you must know, the maximum clique problem in an arbitrary graph is NP-hard. Nevertheless, for some graphs of specific kinds it can be solved effectively.

Just in case, let us remind you that a clique in a non-directed graph is a subset of the vertices of a graph, such that any two vertices of this subset are connected by an edge. In particular, an empty set of vertexes and a set consisting of a single vertex, are cliques.

Let's define a divisibility graph for a set of positive integers A = {a1, a2, ..., an} as follows. The vertices of the given graph are numbers from set A, and two numbers ai and aj (i ≠ j) are connected by an edge if and only if either ai is divisible by aj, or aj is divisible by ai.

You are given a set of non-negative integers A. Determine the size of a maximum clique in a divisibility graph for set A.

Input

The first line contains integer n (1 ≤ n ≤ 106), that sets the size of set A.

The second line contains n distinct positive integers a1, a2, ..., an (1 ≤ ai ≤ 106) — elements of subset A. The numbers in the line follow in the ascending order.

Output

Print a single number — the maximum size of a clique in a divisibility graph for set A.

Examples

Input

8
3 4 6 8 10 18 21 24


Output

3

Note

In the first sample test a clique of size 3 is, for example, a subset of vertexes {3, 6, 18}. A clique of a larger size doesn't exist in this graph.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 1000007;
int dp[N];
void solve() {
  int n;
  int ans = 0;
  scanf("%d", &n);
  for (int i = 0; i < (n); ++i) {
    int a;
    scanf("%d", &a);
    dp[a] = max(dp[a], 1);
    for (int b = a + a; b < N; b += a) {
      dp[b] = max(dp[b], dp[a] + 1);
    }
    ans = max(ans, dp[a]);
  }
  printf("%d\n", ans);
}
void testGen() {
  FILE *f = fopen("input.txt", "w");
  fclose(f);
}
int main() {
  cerr << fixed;
  cerr.precision(3);
  cout << fixed;
  cout.precision(9);
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2
1 1000000


(G.2) Fast Input

2
2 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 1000007; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int dp[N]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (n); ++i) { /* line 9 slow_hit_count: 3, fast_hit_count: 3 */
    int a; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d", &a); /* line 11 slow_hit_count: 2, fast_hit_count: 2 */
    dp[a] = max(dp[a], 1); /* line 12 slow_hit_count: 2, fast_hit_count: 2 */
    for (int b = a + a; b < N; b += a) { /* line 13 slow_hit_count: 1000007, fast_hit_count: 500004 */
      dp[b] = max(dp[b], dp[a] + 1); /* line 14 slow_hit_count: 1000005, fast_hit_count: 500002 */
    } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    ans = max(ans, dp[a]); /* line 16 slow_hit_count: 2, fast_hit_count: 2 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
void testGen() { /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  FILE *f = fopen("input.txt", "w"); /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  fclose(f); /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  cerr << fixed; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  cerr.precision(3); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  cout << fixed; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  cout.precision(9); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks of the provided C program, we will follow the tasks outlined in the problem. We will first identify the inefficient code segments and then derive performance-characterizing invariants.

### Phase 1: Identify Inefficient Code Segments

Upon examining the line-level hit counts between the fast and slow runs, we observe the following:

1. **Line 13** (`for (int b = a + a; b < N; b += a) {`) is executed significantly more times in the slow input (1,000,007 times) compared to the fast input (500,004 times).

2. **Line 14** (`dp[b] = max(dp[b], dp[a] + 1);`) also reflects a similar increase in execution frequency, closely matching the loop in line 13.

From these observations, it is evident that lines 13-14 are a major contributor to the slowdown. This loop operates over a large range of values determined by the input numbers. The `b` loop iterates over multiples of `a`, and when `a` is a smaller number like `1`, it results in a high number of iterations up to `N`.

### Phase 2: Derive Performance-Characterizing Invariants

Let's derive the natural language statements that describe the conditions leading to slow performance:

1. **Invariant: Small Divisor Leading to High Iteration Count**
   - **Natural Language Description**: "The program experiences a slowdown when a small integer, like 1, is present in the input set, causing the inner loop to iterate over a large range, leading to excessive operations on the `dp` array."
   - This condition arises because the integer `1` is a divisor for every other number up to `N`, causing the loop to execute a large number of times.

2. **Invariant: Large Number of Updates on `dp` Array**
   - **Natural Language Description**: "Performance may degrade if the inner loop, which updates the `dp` array, iterates for a large number of multiples, especially when the integer is a small divisor of a wide range."
   - This is directly related to the number of times `dp[b]` is updated, which increases the computational overhead significantly.

### Summary of Performance Invariants

- **Presence of Small Number**: If a very small number (especially `1`) is included in the input set, it causes a high number of iterations due to its divisibility property, increasing the execution time significantly.
  
- **High Loop Iteration due to Small Numbers**: The loop executing over multiples of small numbers like `1` can lead to high iteration counts, thereby increasing the number of operations and slowing down performance.

These invariants highlight how specific input characteristics can lead to performance degradation, and they can guide future optimizations by focusing on managing iterations over small divisors.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
As you must know, the maximum clique problem in an arbitrary graph is NP-hard. Nevertheless, for some graphs of specific kinds it can be solved effectively.

Just in case, let us remind you that a clique in a non-directed graph is a subset of the vertices of a graph, such that any two vertices of this subset are connected by an edge. In particular, an empty set of vertexes and a set consisting of a single vertex, are cliques.

Let's define a divisibility graph for a set of positive integers A = {a1, a2, ..., an} as follows. The vertices of the given graph are numbers from set A, and two numbers ai and aj (i ≠ j) are connected by an edge if and only if either ai is divisible by aj, or aj is divisible by ai.

You are given a set of non-negative integers A. Determine the size of a maximum clique in a divisibility graph for set A.

Input

The first line contains integer n (1 ≤ n ≤ 106), that sets the size of set A.

The second line contains n distinct positive integers a1, a2, ..., an (1 ≤ ai ≤ 106) — elements of subset A. The numbers in the line follow in the ascending order.

Output

Print a single number — the maximum size of a clique in a divisibility graph for set A.

Examples

Input

8
3 4 6 8 10 18 21 24


Output

3

Note

In the first sample test a clique of size 3 is, for example, a subset of vertexes {3, 6, 18}. A clique of a larger size doesn't exist in this graph.

Solution (C++ code):
{solution}


assistant: Let's proceed with implementing the performance-characterizing invariants into runtime checks in C++.

### Phase 3: Implementing Natural Language Invariants as C++ Checker Code

For each identified invariant:

1. **Invariant: Small Divisor Leading to High Iteration Count**
   - **Checker Code**: We need to check if the smallest integer in the input set is very low (for example, `1`), leading to potential high iteration counts.

```cpp
void check_small_divisor_invariant(int a) {
    if (a == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - small divisor causing excessive iterations!" << endl;
        abort();
    }
}
```

2. **Invariant: Large Number of Updates on `dp` Array**
   - **Checker Code**: We will ensure the loop that updates the `dp` array is not iterating excessively.

```cpp
void check_large_iteration_invariant(int a) {
    // Check if the number can cause too many iterations
    if (a == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive updates to dp array due to small divisor!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into Original Program

Now, let's integrate these checks into the provided C++ program at appropriate locations:

```cpp
#include <bits/stdc++.h>
using namespace std;

const int N = 1000007;
int dp[N];

// Checker for small divisor leading to high iteration counts
void check_small_divisor_invariant(int a) {
    if (a == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - small divisor causing excessive iterations!" << endl;
        abort();
    }
}

// Checker for large number of updates on dp array
void check_large_iteration_invariant(int a) {
    if (a == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive updates to dp array due to small divisor!" << endl;
        abort();
    }
}

void solve() {
    int n;
    int ans = 0;
    scanf("%d", &n);
    for (int i = 0; i < n; ++i) {
        int a;
        scanf("%d", &a);

        // Check for performance bottlenecks before proceeding
        check_small_divisor_invariant(a);
        check_large_iteration_invariant(a);

        dp[a] = max(dp[a], 1);
        for (int b = a + a; b < N; b += a) {
            dp[b] = max(dp[b], dp[a] + 1);
        }
        ans = max(ans, dp[a]);
    }
    printf("%d\n", ans);
}

void testGen() {
    FILE *f = fopen("input.txt", "w");
    fclose(f);
}

int main() {
    cerr << fixed;
    cerr.precision(3);
    cout << fixed;
    cout.precision(9);
    solve();
    return 0;
}
```

### Explanation of Instrumented Code

- **Checker Placement**: The checks for potential bottlenecks (`check_small_divisor_invariant` and `check_large_iteration_invariant`) are placed immediately after reading an integer from input. This ensures that any problematic small divisor is caught before the nested loop that could cause performance issues.

- **Functionality**: Each check function uses the `abort()` function to halt execution if the invariant condition is triggered, alerting the user to a potential performance problem.

This approach ensures that the program remains efficient by catching input patterns that could cause excessive computation, consistent with the performance-characterizing invariants identified earlier.

