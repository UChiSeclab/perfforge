system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Wet Shark asked Rat Kwesh to generate three positive real numbers x, y and z, from 0.1 to 200.0, inclusive. Wet Krash wants to impress Wet Shark, so all generated numbers will have exactly one digit after the decimal point.

Wet Shark knows Rat Kwesh will want a lot of cheese. So he will give the Rat an opportunity to earn a lot of cheese. He will hand the three numbers x, y and z to Rat Kwesh, and Rat Kwesh will pick one of the these twelve options:

  1. a1 = xyz; 
  2. a2 = xzy; 
  3. a3 = (xy)z; 
  4. a4 = (xz)y; 
  5. a5 = yxz; 
  6. a6 = yzx; 
  7. a7 = (yx)z; 
  8. a8 = (yz)x; 
  9. a9 = zxy; 
  10. a10 = zyx; 
  11. a11 = (zx)y; 
  12. a12 = (zy)x. 



Let m be the maximum of all the ai, and c be the smallest index (from 1 to 12) such that ac = m. Rat's goal is to find that c, and he asks you to help him. Rat Kwesh wants to see how much cheese he gets, so he you will have to print the expression corresponding to that ac.

Input

The only line of the input contains three space-separated real numbers x, y and z (0.1 ≤ x, y, z ≤ 200.0). Each of x, y and z is given with exactly one digit after the decimal point.

Output

Find the maximum value of expression among xyz, xzy, (xy)z, (xz)y, yxz, yzx, (yx)z, (yz)x, zxy, zyx, (zx)y, (zy)x and print the corresponding expression. If there are many maximums, print the one that comes first in the list. 

xyz should be outputted as x^y^z (without brackets), and (xy)z should be outputted as (x^y)^z (quotes for clarity). 

Examples

Input

1.1 3.4 2.5


Output

z^y^x


Input

2.0 2.0 2.0


Output

x^y^z


Input

1.9 1.8 1.7


Output

(x^y)^z

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long double eps = FLT_MIN, inf = 1e60;
long double x, y, z;
long double f(int idx) {
  if (idx == 1) return (x <= 1.) ? -inf : z * log(y) + log(log(x));
  if (idx == 2) return (x <= 1.) ? -inf : y * log(z) + log(log(x));
  if (idx == 3 || idx == 4)
    return (x <= 1.) ? -inf : log(z) + log(y) + log(log(x));
  if (idx == 5) return (y <= 1.) ? -inf : z * log(x) + log(log(y));
  if (idx == 6) return (y <= 1.) ? -inf : x * log(z) + log(log(y));
  if (idx == 7 || idx == 8)
    return (y <= 1.) ? -inf : log(z) + log(x) + log(log(y));
  if (idx == 9) return (z <= 1.) ? -inf : y * log(x) + log(log(z));
  if (idx == 10) return (z <= 1.) ? -inf : x * log(y) + log(log(z));
  if (idx == 11 || idx == 12)
    return (z <= 1.) ? -inf : log(x) + log(y) + log(log(z));
}
long double g(int idx) {
  if (idx == 1) return pow(x, pow(y, z));
  if (idx == 2) return pow(x, pow(z, y));
  if (idx == 3 || idx == 4) return pow(x, y * z);
  if (idx == 5) return pow(y, pow(x, z));
  if (idx == 6) return pow(y, pow(z, x));
  if (idx == 7 || idx == 8) return pow(y, x * z);
  if (idx == 9) return pow(z, pow(x, y));
  if (idx == 10) return pow(z, pow(y, x));
  if (idx == 11 || idx == 12) return pow(z, y * x);
}
long double t(int idx) {
  return (x <= 1 && y <= 1 && z <= 1) ? g(idx) : f(idx);
}
int main() {
  map<int, string> ans;
  ans[1] = "x^y^z";
  ans[2] = "x^z^y";
  ans[3] = "(x^y)^z";
  ans[4] = "(x^z)^y";
  ans[5] = "y^x^z";
  ans[6] = "y^z^x";
  ans[7] = "(y^x)^z";
  ans[8] = "(y^z)^x";
  ans[9] = "z^x^y";
  ans[10] = "z^y^x";
  ans[11] = "(z^x)^y";
  ans[12] = "(z^y)^x";
  cin >> x >> y >> z;
  long double maxi;
  int idx = -1;
  for (int i = 1; i <= 12; i++) {
    fprintf(stderr, "t(%d) = %.10Lf\n", i, t(i));
    if (idx == -1 || (t(i) - maxi > eps)) maxi = t(i), idx = i;
  }
  cout << ans[idx] << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1.0 1.0 1.2657847034121636


(G.2) Fast Input

1.0 1.0 1.0


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long double eps = FLT_MIN, inf = 1e60; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long double x, y, z; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long double f(int idx) { /* line 5 slow_hit_count: 25, fast_hit_count: 0 */
  if (idx == 1) return (x <= 1.) ? -inf : z * log(y) + log(log(x)); /* line 6 slow_hit_count: 25, fast_hit_count: 0 */
  if (idx == 2) return (x <= 1.) ? -inf : y * log(z) + log(log(x)); /* line 7 slow_hit_count: 23, fast_hit_count: 0 */
  if (idx == 3 || idx == 4) /* line 8 slow_hit_count: 21, fast_hit_count: 0 */
    return (x <= 1.) ? -inf : log(z) + log(y) + log(log(x)); /* line 9 slow_hit_count: 4, fast_hit_count: 0 */
  if (idx == 5) return (y <= 1.) ? -inf : z * log(x) + log(log(y)); /* line 10 slow_hit_count: 17, fast_hit_count: 0 */
  if (idx == 6) return (y <= 1.) ? -inf : x * log(z) + log(log(y)); /* line 11 slow_hit_count: 15, fast_hit_count: 0 */
  if (idx == 7 || idx == 8) /* line 12 slow_hit_count: 13, fast_hit_count: 0 */
    return (y <= 1.) ? -inf : log(z) + log(x) + log(log(y)); /* line 13 slow_hit_count: 4, fast_hit_count: 0 */
  if (idx == 9) return (z <= 1.) ? -inf : y * log(x) + log(log(z)); /* line 14 slow_hit_count: 9, fast_hit_count: 0 */
  if (idx == 10) return (z <= 1.) ? -inf : x * log(y) + log(log(z)); /* line 15 slow_hit_count: 6, fast_hit_count: 0 */
  if (idx == 11 || idx == 12) /* line 16 slow_hit_count: 4, fast_hit_count: 0 */
    return (z <= 1.) ? -inf : log(x) + log(y) + log(log(z)); /* line 17 slow_hit_count: 4, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
long double g(int idx) { /* line 19 slow_hit_count: 0, fast_hit_count: 24 */
  if (idx == 1) return pow(x, pow(y, z)); /* line 20 slow_hit_count: 0, fast_hit_count: 24 */
  if (idx == 2) return pow(x, pow(z, y)); /* line 21 slow_hit_count: 0, fast_hit_count: 22 */
  if (idx == 3 || idx == 4) return pow(x, y * z); /* line 22 slow_hit_count: 0, fast_hit_count: 20 */
  if (idx == 5) return pow(y, pow(x, z)); /* line 23 slow_hit_count: 0, fast_hit_count: 16 */
  if (idx == 6) return pow(y, pow(z, x)); /* line 24 slow_hit_count: 0, fast_hit_count: 14 */
  if (idx == 7 || idx == 8) return pow(y, x * z); /* line 25 slow_hit_count: 0, fast_hit_count: 12 */
  if (idx == 9) return pow(z, pow(x, y)); /* line 26 slow_hit_count: 0, fast_hit_count: 8 */
  if (idx == 10) return pow(z, pow(y, x)); /* line 27 slow_hit_count: 0, fast_hit_count: 6 */
  if (idx == 11 || idx == 12) return pow(z, y * x); /* line 28 slow_hit_count: 0, fast_hit_count: 4 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
long double t(int idx) { /* line 30 slow_hit_count: 25, fast_hit_count: 24 */
  return (x <= 1 && y <= 1 && z <= 1) ? g(idx) : f(idx); /* line 31 slow_hit_count: 25, fast_hit_count: 24 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  map<int, string> ans; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  ans[1] = "x^y^z"; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  ans[2] = "x^z^y"; /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  ans[3] = "(x^y)^z"; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  ans[4] = "(x^z)^y"; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  ans[5] = "y^x^z"; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  ans[6] = "y^z^x"; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  ans[7] = "(y^x)^z"; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  ans[8] = "(y^z)^x"; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  ans[9] = "z^x^y"; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  ans[10] = "z^y^x"; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  ans[11] = "(z^x)^y"; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  ans[12] = "(z^y)^x"; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> x >> y >> z; /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  long double maxi; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  int idx = -1; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 12; i++) { /* line 50 slow_hit_count: 13, fast_hit_count: 13 */
    fprintf(stderr, "t(%d) = %.10Lf\n", i, t(i)); /* line 51 slow_hit_count: 12, fast_hit_count: 12 */
    if (idx == -1 || (t(i) - maxi > eps)) maxi = t(i), idx = i; /* line 52 slow_hit_count: 12, fast_hit_count: 12 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans[idx] << endl; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 56 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the given C program and derive performance-characterizing invariants, let's address the tasks step by step.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The function `f(int idx)` is invoked more frequently for the slow input compared to the fast input, as indicated by the hit counts. Specifically, lines 5 through 17 have numerous hits for the slow input, while the function `g(int idx)` (lines 19 through 28) is used predominantly in the fast case.

2. **Pinpoint Lines with Significant Hits:**
   - Lines 5-17 (function `f`) have significantly more hits under the slow input. This suggests that the program is consistently entering the `f` function, which performs logarithmic calculations and has conditional checks leading to potential performance bottlenecks.
   - The `t(int idx)` function (lines 30-32) also shows a notable difference in behavior between the slow and fast inputs, as it conditionally calls either `f` or `g`.

3. **Infer Interactions with Data Structures:**
   - The slowdown arises when the program evaluates the expressions using logarithmic transformations (`log` and `log(log)`) in `f`, which are generally more computationally demanding than straightforward power calculations in `g`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants in natural language:

1. **Invariant 1: When Two or More Variables are Close to 1**
   - Natural Language Description: "If two or more of the variables x, y, and z are close to 1, the calculation may frequently switch to a path involving complex logarithmic evaluations, leading to slow performance."
   - This condition captures the scenario where the program consistently uses the `f` function with logarithmic operations, as seen in the slow input case.

2. **Invariant 2: Logarithmic Path Triggered by Values ≤ 1**
   - Natural Language Description: "If any of the variables x, y, or z is less than or equal to 1, the code may invoke expensive logarithmic calculations which degrade performance, particularly when processing multiple options."
   - This reflects how the program chooses between `f` and `g` based on the values of the variables. The `f` function's path is less efficient due to logarithmic computations.

3. **Invariant 3: Preference for Logarithmic Paths Over Power Paths**
   - Natural Language Description: "When the effective base of exponentiation becomes less than or equal to 1 due to the inputs, the logarithmic transformation path is preferred, which can be computationally demanding."
   - This invariant emphasizes the switch to `f` when dealing with bases of exponentiation that are not conducive to straightforward power operations.

These invariants capture the conditions that lead to the program executing slower paths based on the structure and constraints of the input data. They highlight scenarios where the logarithmic calculations dominate, causing a slowdown.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Wet Shark asked Rat Kwesh to generate three positive real numbers x, y and z, from 0.1 to 200.0, inclusive. Wet Krash wants to impress Wet Shark, so all generated numbers will have exactly one digit after the decimal point.

Wet Shark knows Rat Kwesh will want a lot of cheese. So he will give the Rat an opportunity to earn a lot of cheese. He will hand the three numbers x, y and z to Rat Kwesh, and Rat Kwesh will pick one of the these twelve options:

  1. a1 = xyz; 
  2. a2 = xzy; 
  3. a3 = (xy)z; 
  4. a4 = (xz)y; 
  5. a5 = yxz; 
  6. a6 = yzx; 
  7. a7 = (yx)z; 
  8. a8 = (yz)x; 
  9. a9 = zxy; 
  10. a10 = zyx; 
  11. a11 = (zx)y; 
  12. a12 = (zy)x. 



Let m be the maximum of all the ai, and c be the smallest index (from 1 to 12) such that ac = m. Rat's goal is to find that c, and he asks you to help him. Rat Kwesh wants to see how much cheese he gets, so he you will have to print the expression corresponding to that ac.

Input

The only line of the input contains three space-separated real numbers x, y and z (0.1 ≤ x, y, z ≤ 200.0). Each of x, y and z is given with exactly one digit after the decimal point.

Output

Find the maximum value of expression among xyz, xzy, (xy)z, (xz)y, yxz, yzx, (yx)z, (yz)x, zxy, zyx, (zx)y, (zy)x and print the corresponding expression. If there are many maximums, print the one that comes first in the list. 

xyz should be outputted as x^y^z (without brackets), and (xy)z should be outputted as (x^y)^z (quotes for clarity). 

Examples

Input

1.1 3.4 2.5


Output

z^y^x


Input

2.0 2.0 2.0


Output

x^y^z


Input

1.9 1.8 1.7


Output

(x^y)^z

Solution (C++ code):
{solution}


assistant: Based on the performance-characterizing invariants derived earlier, let's implement the runtime checks and integrate them into the provided C++ program.

### Phase 3: Implementing Performance Invariants as Checker Code in C++

Here are the C++ functions implementing the performance-checking conditions for each invariant:

```cpp
void check_close_to_one_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - two or more variables close to 1!" << endl;
        abort();
    }
}

void check_logarithmic_trigger_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - logarithmic path triggered by values <= 1!" << endl;
        abort();
    }
}

void check_logarithmic_preference_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - preference for logarithmic paths!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Program

Now, let's integrate these checks into the original program, placing them at effective control points, such as after reading inputs but before any heavy computation starts.

```cpp
#include <bits/stdc++.h>
using namespace std;
const long double eps = FLT_MIN, inf = 1e60;
long double x, y, z;

void check_close_to_one_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - two or more variables close to 1!" << endl;
        abort();
    }
}

void check_logarithmic_trigger_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - logarithmic path triggered by values <= 1!" << endl;
        abort();
    }
}

void check_logarithmic_preference_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - preference for logarithmic paths!" << endl;
        abort();
    }
}

long double f(int idx) {
    if (idx == 1) return (x <= 1.) ? -inf : z * log(y) + log(log(x));
    if (idx == 2) return (x <= 1.) ? -inf : y * log(z) + log(log(x));
    if (idx == 3 || idx == 4)
        return (x <= 1.) ? -inf : log(z) + log(y) + log(log(x));
    if (idx == 5) return (y <= 1.) ? -inf : z * log(x) + log(log(y));
    if (idx == 6) return (y <= 1.) ? -inf : x * log(z) + log(log(y));
    if (idx == 7 || idx == 8)
        return (y <= 1.) ? -inf : log(z) + log(x) + log(log(y));
    if (idx == 9) return (z <= 1.) ? -inf : y * log(x) + log(log(z));
    if (idx == 10) return (z <= 1.) ? -inf : x * log(y) + log(log(z));
    if (idx == 11 || idx == 12)
        return (z <= 1.) ? -inf : log(x) + log(y) + log(log(z));
}

long double g(int idx) {
    if (idx == 1) return pow(x, pow(y, z));
    if (idx == 2) return pow(x, pow(z, y));
    if (idx == 3 || idx == 4) return pow(x, y * z);
    if (idx == 5) return pow(y, pow(x, z));
    if (idx == 6) return pow(y, pow(z, x));
    if (idx == 7 || idx == 8) return pow(y, x * z);
    if (idx == 9) return pow(z, pow(x, y));
    if (idx == 10) return pow(z, pow(y, x));
    if (idx == 11 || idx == 12) return pow(z, y * x);
}

long double t(int idx) {
    return (x <= 1 && y <= 1 && z <= 1) ? g(idx) : f(idx);
}

int main() {
    map<int, string> ans;
    ans[1] = "x^y^z";
    ans[2] = "x^z^y";
    ans[3] = "(x^y)^z";
    ans[4] = "(x^z)^y";
    ans[5] = "y^x^z";
    ans[6] = "y^z^x";
    ans[7] = "(y^x)^z";
    ans[8] = "(y^z)^x";
    ans[9] = "z^x^y";
    ans[10] = "z^y^x";
    ans[11] = "(z^x)^y";
    ans[12] = "(z^y)^x";

    cin >> x >> y >> z;

    // Insert checks after input is read
    check_close_to_one_invariant((fabs(x - 1) < 0.1 && fabs(y - 1) < 0.1) || 
                                 (fabs(x - 1) < 0.1 && fabs(z - 1) < 0.1) || 
                                 (fabs(y - 1) < 0.1 && fabs(z - 1) < 0.1));
    
    check_logarithmic_trigger_invariant(x <= 1 || y <= 1 || z <= 1);
    
    check_logarithmic_preference_invariant(x <= 1.1 && y <= 1.1 && z <= 1.1);

    long double maxi;
    int idx = -1;
    for (int i = 1; i <= 12; i++) {
        fprintf(stderr, "t(%d) = %.10Lf\n", i, t(i));
        if (idx == -1 || (t(i) - maxi > eps)) maxi = t(i), idx = i;
    }
    cout << ans[idx] << endl;
    return 0;
}
```

### Explanation
- **Check 1**: Detects if two or more variables are close to 1, which can lead to performance issues due to logarithmic calculations.
- **Check 2**: Detects if any variable is less than or equal to 1, which triggers expensive computations in the function `f`.
- **Check 3**: Detects if all variables are slightly above 1, indicating a preference for more computationally expensive paths.

These checks are placed after reading the input, ensuring they do not add overhead during computationally intensive loops.

