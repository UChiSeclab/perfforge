system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
struct mat {
  int n, m;
  long long c[50][5];
  long long* operator[](int x) { return c[x]; }
  mat(int N = 0, int M = 0) {
    n = N;
    m = M;
    for (int i = 1; i <= n; i++)
      for (int j = 1; j <= m; j++) c[i][j] = 0;
  }
};
mat operator*(mat a, mat b) {
  mat r(a.n, b.m);
  for (int i = 1; i <= a.n; i++)
    for (int j = 1; j <= b.m; j++)
      for (int k = 1; k <= a.m; k++) {
        r[i][j] += (a[i][k] * b[k][j]);
        r[i][j] %= (1000000007ll - 1);
      }
  return r;
}
long long binpow(long long x, long long n) {
  if (n == 0) return 1;
  if (n % 2 == 0) return binpow((x * x) % 1000000007ll, n / 2);
  return (x * binpow(x, n - 1)) % 1000000007ll;
}
mat binpow(mat x, long long n) {
  if (n == 1) return x;
  if (n % 2 == 0) return binpow(x * x, n / 2);
  return x * binpow(x, n - 1);
}
long long n, c, f[4], x, ans = 1, prime;
int k;
mat p, e;
set<int> primes;
map<int, int> ind;
vector<int> pr;
void factor(long long x) {
  prime = 2;
  if (x % prime == 0) {
    primes.insert(prime);
    while (x % prime == 0) x /= prime;
  }
  prime = 3;
  while (prime * prime <= x) {
    if (x % prime == 0) {
      primes.insert(prime);
      while (x % prime == 0) x /= prime;
    }
    prime += 2;
  }
  if (x > 1) primes.insert(x);
}
void tuft(long long x, int t) {
  long long prime = 2;
  if (x % prime == 0) {
    while (x % prime == 0) {
      x /= prime;
      p[ind[prime]][t]++;
    }
  }
  prime = 3;
  while (prime * prime <= x) {
    if (x % prime == 0) {
      while (x % prime == 0) {
        x /= prime;
        p[ind[prime]][t]++;
      }
    }
    prime += 2;
  }
  if (x > 1) p[ind[x]][t]++;
}
int main() {
  cin >> n >> f[1] >> f[2] >> f[3] >> c;
  factor(f[1]);
  factor(f[2]);
  factor(f[3]);
  factor(c);
  pr.push_back(0);
  while (!primes.empty()) {
    k++;
    ind[(*primes.begin())] = k;
    pr.push_back((*primes.begin()));
    primes.erase((*primes.begin()));
  }
  p = mat(k, 3);
  tuft(f[1], 1);
  tuft(c, 1);
  tuft(f[2], 2);
  tuft(c, 2);
  tuft(c, 2);
  tuft(f[3], 3);
  tuft(c, 3);
  tuft(c, 3);
  tuft(c, 3);
  e = mat(3, 3);
  e[2][1] = 1;
  e[3][2] = 1;
  e[1][3] = 1;
  e[2][3] = 1;
  e[3][3] = 1;
  p = p * binpow(e, n - 1);
  for (int i = 1; i <= k; i++) {
    ans *= binpow(pr[i], p[i][1]);
    ans %= 1000000007ll;
  }
  ans *= binpow(binpow(c, n), 1000000007ll - 2);
  ans %= 1000000007ll;
  cout << ans << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

700733589947068748 168164385 420235261 550995719 169674941


(G.2) Fast Input

700733589947068748 168164385 420235261 550995719 280649984


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
struct mat { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  int n, m; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  long long c[50][5]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  long long* operator[](int x) { return c[x]; } /* line 6 slow_hit_count: 10148, fast_hit_count: 10233 */
  mat(int N = 0, int M = 0) { /* line 7 slow_hit_count: 95, fast_hit_count: 95 */
    n = N; /* line 8 slow_hit_count: 95, fast_hit_count: 95 */
    m = M; /* line 9 slow_hit_count: 95, fast_hit_count: 95 */
    for (int i = 1; i <= n; i++) /* line 10 slow_hit_count: 390, fast_hit_count: 392 */
      for (int j = 1; j <= m; j++) c[i][j] = 0; /* line 11 slow_hit_count: 1180, fast_hit_count: 1188 */
  } /* line 12 slow_hit_count: 95, fast_hit_count: 95 */
}; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
mat operator*(mat a, mat b) { /* line 14 slow_hit_count: 91, fast_hit_count: 91 */
  mat r(a.n, b.m); /* line 15 slow_hit_count: 91, fast_hit_count: 91 */
  for (int i = 1; i <= a.n; i++) /* line 16 slow_hit_count: 372, fast_hit_count: 373 */
    for (int j = 1; j <= b.m; j++) /* line 17 slow_hit_count: 1124, fast_hit_count: 1128 */
      for (int k = 1; k <= a.m; k++) { /* line 18 slow_hit_count: 3372, fast_hit_count: 3384 */
        r[i][j] += (a[i][k] * b[k][j]); /* line 19 slow_hit_count: 2529, fast_hit_count: 2538 */
        r[i][j] %= (1000000007ll - 1); /* line 20 slow_hit_count: 2529, fast_hit_count: 2538 */
      } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  return r; /* line 22 slow_hit_count: 91, fast_hit_count: 91 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
long long binpow(long long x, long long n) { /* line 24 slow_hit_count: 638, fast_hit_count: 684 */
  if (n == 0) return 1; /* line 25 slow_hit_count: 638, fast_hit_count: 684 */
  if (n % 2 == 0) return binpow((x * x) % 1000000007ll, n / 2); /* line 26 slow_hit_count: 625, fast_hit_count: 670 */
  return (x * binpow(x, n - 1)) % 1000000007ll; /* line 27 slow_hit_count: 232, fast_hit_count: 248 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
mat binpow(mat x, long long n) { /* line 29 slow_hit_count: 91, fast_hit_count: 91 */
  if (n == 1) return x; /* line 30 slow_hit_count: 91, fast_hit_count: 91 */
  if (n % 2 == 0) return binpow(x * x, n / 2); /* line 31 slow_hit_count: 90, fast_hit_count: 90 */
  return x * binpow(x, n - 1); /* line 32 slow_hit_count: 31, fast_hit_count: 31 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
long long n, c, f[4], x, ans = 1, prime; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
int k; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
mat p, e; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
set<int> primes; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
map<int, int> ind; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> pr; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
void factor(long long x) { /* line 40 slow_hit_count: 4, fast_hit_count: 4 */
  prime = 2; /* line 41 slow_hit_count: 4, fast_hit_count: 4 */
  if (x % prime == 0) { /* line 42 slow_hit_count: 4, fast_hit_count: 4 */
    primes.insert(prime); /* line 43 slow_hit_count: 0, fast_hit_count: 1 */
    while (x % prime == 0) x /= prime; /* line 44 slow_hit_count: 0, fast_hit_count: 9 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  prime = 3; /* line 46 slow_hit_count: 4, fast_hit_count: 4 */
  while (prime * prime <= x) { /* line 47 slow_hit_count: 7367, fast_hit_count: 1378 */
    if (x % prime == 0) { /* line 48 slow_hit_count: 7363, fast_hit_count: 1374 */
      primes.insert(prime); /* line 49 slow_hit_count: 7, fast_hit_count: 7 */
      while (x % prime == 0) x /= prime; /* line 50 slow_hit_count: 14, fast_hit_count: 14 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    prime += 2; /* line 52 slow_hit_count: 7363, fast_hit_count: 1374 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  if (x > 1) primes.insert(x); /* line 54 slow_hit_count: 4, fast_hit_count: 4 */
} /* line 55 slow_hit_count: 4, fast_hit_count: 4 */
void tuft(long long x, int t) { /* line 56 slow_hit_count: 9, fast_hit_count: 9 */
  long long prime = 2; /* line 57 slow_hit_count: 9, fast_hit_count: 9 */
  if (x % prime == 0) { /* line 58 slow_hit_count: 9, fast_hit_count: 9 */
    while (x % prime == 0) { /* line 59 slow_hit_count: 0, fast_hit_count: 54 */
      x /= prime; /* line 60 slow_hit_count: 0, fast_hit_count: 48 */
      p[ind[prime]][t]++; /* line 61 slow_hit_count: 0, fast_hit_count: 48 */
    } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  prime = 3; /* line 64 slow_hit_count: 9, fast_hit_count: 9 */
  while (prime * prime <= x) { /* line 65 slow_hit_count: 39932, fast_hit_count: 3998 */
    if (x % prime == 0) { /* line 66 slow_hit_count: 39923, fast_hit_count: 3989 */
      while (x % prime == 0) { /* line 67 slow_hit_count: 14, fast_hit_count: 14 */
        x /= prime; /* line 68 slow_hit_count: 7, fast_hit_count: 7 */
        p[ind[prime]][t]++; /* line 69 slow_hit_count: 7, fast_hit_count: 7 */
      } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
    prime += 2; /* line 72 slow_hit_count: 39923, fast_hit_count: 3989 */
  } /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
  if (x > 1) p[ind[x]][t]++; /* line 74 slow_hit_count: 9, fast_hit_count: 9 */
} /* line 75 slow_hit_count: 9, fast_hit_count: 9 */
int main() { /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> f[1] >> f[2] >> f[3] >> c; /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
  factor(f[1]); /* line 78 slow_hit_count: 1, fast_hit_count: 1 */
  factor(f[2]); /* line 79 slow_hit_count: 1, fast_hit_count: 1 */
  factor(f[3]); /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
  factor(c); /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
  pr.push_back(0); /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
  while (!primes.empty()) { /* line 83 slow_hit_count: 12, fast_hit_count: 13 */
    k++; /* line 84 slow_hit_count: 11, fast_hit_count: 12 */
    ind[(*primes.begin())] = k; /* line 85 slow_hit_count: 11, fast_hit_count: 12 */
    pr.push_back((*primes.begin())); /* line 86 slow_hit_count: 11, fast_hit_count: 12 */
    primes.erase((*primes.begin())); /* line 87 slow_hit_count: 11, fast_hit_count: 12 */
  } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  p = mat(k, 3); /* line 89 slow_hit_count: 1, fast_hit_count: 1 */
  tuft(f[1], 1); /* line 90 slow_hit_count: 1, fast_hit_count: 1 */
  tuft(c, 1); /* line 91 slow_hit_count: 1, fast_hit_count: 1 */
  tuft(f[2], 2); /* line 92 slow_hit_count: 1, fast_hit_count: 1 */
  tuft(c, 2); /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
  tuft(c, 2); /* line 94 slow_hit_count: 1, fast_hit_count: 1 */
  tuft(f[3], 3); /* line 95 slow_hit_count: 1, fast_hit_count: 1 */
  tuft(c, 3); /* line 96 slow_hit_count: 1, fast_hit_count: 1 */
  tuft(c, 3); /* line 97 slow_hit_count: 1, fast_hit_count: 1 */
  tuft(c, 3); /* line 98 slow_hit_count: 1, fast_hit_count: 1 */
  e = mat(3, 3); /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
  e[2][1] = 1; /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
  e[3][2] = 1; /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
  e[1][3] = 1; /* line 102 slow_hit_count: 1, fast_hit_count: 1 */
  e[2][3] = 1; /* line 103 slow_hit_count: 1, fast_hit_count: 1 */
  e[3][3] = 1; /* line 104 slow_hit_count: 1, fast_hit_count: 1 */
  p = p * binpow(e, n - 1); /* line 105 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= k; i++) { /* line 106 slow_hit_count: 12, fast_hit_count: 13 */
    ans *= binpow(pr[i], p[i][1]); /* line 107 slow_hit_count: 11, fast_hit_count: 12 */
    ans %= 1000000007ll; /* line 108 slow_hit_count: 11, fast_hit_count: 12 */
  } /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
  ans *= binpow(binpow(c, n), 1000000007ll - 2); /* line 110 slow_hit_count: 1, fast_hit_count: 1 */
  ans %= 1000000007ll; /* line 111 slow_hit_count: 1, fast_hit_count: 1 */
  cout << ans << endl; /* line 112 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 113 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 114 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks in the provided C program, let's analyze the hit counts and the structure of the code, focusing on identifying the expensive or inefficient code segments and deriving performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Analysis**:
   - The function `factor()` and especially the `while` loop inside it (line 47) has significantly higher hit counts for the slow input compared to the fast input. This suggests that the slowdown may be related to this function's execution, specifically in how it factors numbers.
   - Similarly, the `tuft()` function, particularly the nested loops (lines 65 and 66), show a noticeable increase in hit counts for the slow input, indicating intensive computation during factorization.

2. **Code Structure and Data Interaction**:
   - The `factor()` and `tuft()` functions work with primes and factorization, which can be computationally expensive if the numbers involved have large prime factors or numerous factors.
   - The use of matrix multiplication and exponentiation (`operator*` and `binpow` functions) also appears frequently but does not display a significant discrepancy in hit counts between the inputs, meaning they likely contribute less to the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are potential performance-characterizing invariants:

1. **Invariant on Factorization**:
   - **Natural Language Description**: "If the input numbers have large prime factors or are products of many small factors, the repeated factorization can lead to performance degradation due to increased computational overhead."
   - **Threshold Suggestion**: Since the prime factors are extracted from `f_1`, `f_2`, `f_3`, and `c`, the condition can be stated as: "If the number of distinct prime factors or the maximum prime factor exceeds a certain threshold, performance may degrade."

2. **Invariant on Matrix Operations and Exponentiation**:
   - **Natural Language Description**: "Matrix exponentiation can become expensive if not optimized for specific input patterns or if the involved numbers have properties leading to extensive computation."
   - **Threshold Suggestion**: While matrix operations are crucial, they don't appear to be the primary slowdown factor compared to factorization. The condition can be: "If matrix dimensions or powers lead to high computational load due to inefficient operations, it may be a contributing factor."

3. **Invariant on Modulo Operations**:
   - **Natural Language Description**: "Repeated modulo operations with large numbers can introduce computational overhead, especially if the operations are nested within loops or recursive calls."
   - **Threshold Suggestion**: Given the constraints `n` up to \(10^{18}\) and large values for `f_1`, `f_2`, `f_3`, `c`, the condition might be: "When n is near its maximum and operations involve large values, the overhead from repeated modulo operations can increase."

By introducing checks or conditions based on these invariants, the code can potentially avoid inefficient paths or flag areas where optimization is necessary. These invariants focus on the patterns and structures that lead to inefficient computation rather than the specific numeric values of inputs, aligning with the program's constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Invariants as C++ Code

Based on the performance-characterizing invariants identified earlier, here are the corresponding runtime checks implemented in C++:

1. **Invariant on Factorization**:
   - **Checker Code**: This check will issue a warning if the input numbers have a large number of distinct prime factors or significant maximum prime factor, which could degrade performance.
   
   ```cpp
   void check_factorization_invariant(set<int>& primes) {
       if (primes.size() > 20) { // Example threshold
           cerr << "Warning: factorization_invariant triggered - too many distinct prime factors" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Matrix Operations and Exponentiation**:
   - **Checker Code**: While matrix operations didn’t show a direct discrepancy in hit counts, this generalized check ensures the dimensions don't become problematic.

   ```cpp
   void check_matrix_invariant(int n, int m) {
       if (n * m > 1000) { // Example threshold for matrix dimension product
           cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Modulo Operations**:
   - **Checker Code**: This check is more general, focusing on large numbers utilized in modulo operations.

   ```cpp
   void check_modulo_invariant(long long value) {
       if (value > 1000000000) { // Example large value threshold
           cerr << "Warning: modulo_invariant triggered - large value used in modulo operation" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checks into the Original Program

These checks are integrated into the original C++ program provided, placing them at appropriate control points to avoid unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_factorization_invariant(set<int>& primes) {
    if (primes.size() > 20) { // Example threshold
        cerr << "Warning: factorization_invariant triggered - too many distinct prime factors" << endl;
        abort();
    }
}

void check_matrix_invariant(int n, int m) {
    if (n * m > 1000) { // Example threshold for matrix dimension product
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

void check_modulo_invariant(long long value) {
    if (value > 1000000000) { // Example large value threshold
        cerr << "Warning: modulo_invariant triggered - large value used in modulo operation" << endl;
        abort();
    }
}

struct mat {
    int n, m;
    long long c[50][5];
    long long* operator[](int x) { return c[x]; }
    mat(int N = 0, int M = 0) {
        n = N;
        m = M;
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= m; j++) c[i][j] = 0;
    }
};

mat operator*(mat a, mat b) {
    mat r(a.n, b.m);
    for (int i = 1; i <= a.n; i++)
        for (int j = 1; j <= b.m; j++)
            for (int k = 1; k <= a.m; k++) {
                r[i][j] += (a[i][k] * b[k][j]);
                r[i][j] %= (1000000007ll - 1);
            }
    return r;
}

long long binpow(long long x, long long n) {
    if (n == 0) return 1;
    if (n % 2 == 0) return binpow((x * x) % 1000000007ll, n / 2);
    return (x * binpow(x, n - 1)) % 1000000007ll;
}

mat binpow(mat x, long long n) {
    if (n == 1) return x;
    if (n % 2 == 0) return binpow(x * x, n / 2);
    return x * binpow(x, n - 1);
}

long long n, c, f[4], x, ans = 1, prime;
int k;
mat p, e;
set<int> primes;
map<int, int> ind;
vector<int> pr;

void factor(long long x) {
    prime = 2;
    if (x % prime == 0) {
        primes.insert(prime);
        while (x % prime == 0) x /= prime;
    }
    prime = 3;
    while (prime * prime <= x) {
        if (x % prime == 0) {
            primes.insert(prime);
            while (x % prime == 0) x /= prime;
        }
        prime += 2;
    }
    if (x > 1) primes.insert(x);
}

void tuft(long long x, int t) {
    long long prime = 2;
    if (x % prime == 0) {
        while (x % prime == 0) {
            x /= prime;
            p[ind[prime]][t]++;
        }
    }
    prime = 3;
    while (prime * prime <= x) {
        if (x % prime == 0) {
            while (x % prime == 0) {
                x /= prime;
                p[ind[prime]][t]++;
            }
        }
        prime += 2;
    }
    if (x > 1) p[ind[x]][t]++;
}

int main() {
    cin >> n >> f[1] >> f[2] >> f[3] >> c;
    factor(f[1]);
    factor(f[2]);
    factor(f[3]);
    factor(c);
    check_factorization_invariant(primes); // Check prime factorization invariant

    pr.push_back(0);
    while (!primes.empty()) {
        k++;
        ind[(*primes.begin())] = k;
        pr.push_back((*primes.begin()));
        primes.erase((*primes.begin()));
    }
    p = mat(k, 3);
    tuft(f[1], 1);
    tuft(c, 1);
    tuft(f[2], 2);
    tuft(c, 2);
    tuft(c, 2);
    tuft(f[3], 3);
    tuft(c, 3);
    tuft(c, 3);
    tuft(c, 3);

    e = mat(3, 3);
    e[2][1] = 1;
    e[3][2] = 1;
    e[1][3] = 1;
    e[2][3] = 1;
    e[3][3] = 1;

    check_matrix_invariant(e.n, e.m); // Check matrix invariant

    p = p * binpow(e, n - 1);

    for (int i = 1; i <= k; i++) {
        ans *= binpow(pr[i], p[i][1]);
        ans %= 1000000007ll;
    }
    
    long long c_pow_n = binpow(c, n);
    check_modulo_invariant(c_pow_n); // Check modulo invariant

    ans *= binpow(c_pow_n, 1000000007ll - 2);
    ans %= 1000000007ll;
    cout << ans << endl;
    return 0;
}
```

### Explanation:

- **Factorization Check**: Placed after all factors are computed to ensure the number of distinct prime factors remains manageable.
- **Matrix Operation Check**: Added before matrix multiplication to ensure dimensions aren't too large.
- **Modulo Operation Check**: Applied before using `c^n` to ensure values stay within a reasonable range.

These checks help catch potential performance bottlenecks and provide feedback, allowing developers to optimize accordingly.

