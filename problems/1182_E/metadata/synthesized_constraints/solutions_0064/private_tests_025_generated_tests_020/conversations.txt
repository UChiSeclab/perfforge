system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <class T>
constexpr T lcm(T m, T n) {
  return m / __gcd(m, n) * n;
}
template <typename I>
void join(ostream &ost, I s, I t, string d = " ") {
  for (auto i = s; i != t; ++i) {
    if (i != s) ost << d;
    ost << *i;
  }
  ost << endl;
}
template <typename T>
istream &operator>>(istream &is, vector<T> &v) {
  for (auto &a : v) is >> a;
  return is;
}
template <typename T, typename U>
istream &operator>>(istream &is, pair<T, U> &p) {
  is >> p.first >> p.second;
  return is;
}
template <typename T, typename U>
bool chmin(T &a, const U &b) {
  return (a > b ? a = b, true : false);
}
template <typename T, typename U>
bool chmax(T &a, const U &b) {
  return (a < b ? a = b, true : false);
}
template <typename T, size_t N, typename U>
void fill_array(T (&a)[N], const U &v) {
  fill((U *)a, (U *)(a + N), v);
}
const long long int mod = 1e9 + 7;
long long int power(long long int n, long long int p, long long int m) {
  long long int ret = 1;
  while (p > 0) {
    if (p & 1) (ret *= n) %= m;
    (n *= n) %= m;
    p /= 2;
  }
  return ret;
}
long long int mod_inv(long long int n, long long int p) {
  return power(n, p - 2, p);
}
vector<long long int> prime_factorize_unique(long long int n) {
  vector<long long int> res;
  for (long long int i = 2LL; i * i <= n; ++i) {
    if (n % i == 0) {
      res.push_back(i);
      while (n % i == 0) {
        n /= i;
      }
    }
  }
  if (n != 1) res.push_back(n);
  return res;
}
template <typename T>
class Matrix {
 private:
  int _row, _col;
  vector<vector<T>> _mat;

 public:
  Matrix() : _row(0), _col(0), _mat() {}
  Matrix(int _row, int _col)
      : _row(_row), _col(_col), _mat(_row, vector<T>(_col)) {}
  Matrix(int _row, int _col, const T &val)
      : _row(_row), _col(_col), _mat(_row, vector<T>(_col, val)) {}
  Matrix(const vector<vector<T>> &m)
      : _row(m.size()), _col(m[0].size()), _mat(m) {}
  int row() const { return _row; }
  int col() const { return _col; }
  const vector<T> &operator[](size_t i) const { return _mat[i]; }
  vector<T> &unsafe_row(size_t i) { return _mat[i]; }
  T &at(size_t r, size_t c) { return _mat[r][c]; }
  Matrix operator+(const Matrix &a) const {
    Matrix<T> ret(_row, _col);
    for (long long int i = (0); i < (_row); ++i)
      for (long long int j = (0); j < (_col); ++j)
        ret.at(i, j) = _mat[i][j] + a[i][j];
    return ret;
  }
  Matrix operator-(const Matrix &a) const {
    Matrix<T> ret(_row, _col);
    for (long long int i = (0); i < (_row); ++i)
      for (long long int j = (0); j < (_col); ++j)
        ret.at(i, j) = _mat[i][j] - a[i][j];
    return ret;
  }
  Matrix operator*(const Matrix &a) const {
    Matrix<T> ret(_row, a.col());
    for (long long int i = (0); i < (_row); ++i)
      for (long long int j = (0); j < (a.col()); ++j)
        for (long long int k = (0); k < (_col); ++k)
          ret.at(i, j) += _mat[i][k] * a[k][j];
    return ret;
  }
  Matrix operator*(const T &k) const {
    Matrix<T> ret(_row, _col);
    for (long long int i = (0); i < (_row); ++i)
      for (long long int j = (0); j < (_col); ++j)
        ret.at(i, j) = _mat[i][j] * k;
    return ret;
  }
  const Matrix &operator+=(const Matrix &a) {
    for (long long int i = (0); i < (_row); ++i) _mat[i] += a[i];
    return *this;
  }
  const Matrix &operator-=(const Matrix &a) {
    for (long long int i = (0); i < (_row); ++i) _mat[i] -= a[i];
    return *this;
  }
  const Matrix &operator*=(const T &k) {
    for (long long int i = (0); i < (_row); ++i) _mat[i] *= k;
    return *this;
  }
  void show_dump() {}
};
template <typename T>
Matrix<T> unit(int size) {
  Matrix<T> ret(size, size);
  for (long long int i = (0); i < (size); ++i) ret.at(i, i) = 1;
  return ret;
}
template <typename T>
Matrix<T> power(const Matrix<T> &a, long long int k) {
  Matrix<T> ret;
  if (k <= 0) return unit<T>(a.row());
  if (k == 1) return a;
  Matrix<T> temp = power(a, k / 2);
  ret = temp * temp;
  if (k % 2) ret = ret * a;
  return ret;
}
template <uint32_t M>
class mod_int_64 {
 public:
  uint64_t val;
  mod_int_64() : val(0) {}
  mod_int_64(int64_t n) : val(n % M) {}
  const mod_int_64 operator+(const mod_int_64 &a) const {
    return mod_int_64((val + a.val) % M);
  }
  const mod_int_64 operator-(const mod_int_64 &a) const {
    return mod_int_64((val - a.val + M) % M);
  }
  const mod_int_64 operator*(const mod_int_64 &a) const {
    return mod_int_64((val * a.val) % M);
  }
  const mod_int_64 operator/(const mod_int_64 &a) const {
    return mod_int_64((val * a.mod_inv().val) % M);
  }
  const mod_int_64 &operator=(const mod_int_64 &a) {
    val = a.val;
    return *this;
  }
  const mod_int_64 &operator+=(const mod_int_64 &a) {
    (val += a.val) %= M;
    return *this;
  }
  const mod_int_64 &operator-=(const mod_int_64 &a) {
    ((val -= a.val) += M) %= M;
    return *this;
  }
  const mod_int_64 &operator*=(const mod_int_64 &a) {
    (val *= a.val) %= M;
    return *this;
  }
  const mod_int_64 &operator/=(const mod_int_64 &a) {
    (val *= a.mod_inv().val) %= M;
    return *this;
  }
  const bool operator==(const mod_int_64 &a) const { return val == a.val; }
  const bool operator!=(const mod_int_64 &a) const { return val != a.val; }
  const mod_int_64 power(long long int p) const {
    mod_int_64 ret = 1, e = val;
    for (; p; e *= e, p >>= 1)
      if (p & 1) ret *= e;
    return ret;
  }
  const mod_int_64 mod_inv() const { return power(M - 2); }
};
template <uint32_t M>
istream &operator>>(istream &is, mod_int_64<M> &a) {
  is >> a.val;
  return is;
}
template <uint32_t M>
ostream &operator<<(ostream &os, const mod_int_64<M> &a) {
  os << a.val;
  return os;
}
const long long int M = mod - 1;
using mint = mod_int_64<M>;
long long int count_prime(long long int n, int p) {
  long long int ret = 0;
  while (n % p == 0) {
    n /= p;
    ++ret;
  }
  return ret;
}
int main() {
  cin.tie(0);
  ios::sync_with_stdio(false);
  long long int n, f1, f2, f3, c;
  while (cin >> n >> f1 >> f2 >> f3 >> c) {
    vector<int> ps;
    {
      auto pc = prime_factorize_unique(c);
      auto p1 = prime_factorize_unique(f1);
      auto p2 = prime_factorize_unique(f2);
      auto p3 = prime_factorize_unique(f3);
      for (auto x : pc) ps.push_back(x);
      for (auto x : p1) ps.push_back(x);
      for (auto x : p2) ps.push_back(x);
      for (auto x : p3) ps.push_back(x);
    }
    sort((ps).begin(), (ps).end());
    ps.erase(unique((ps).begin(), (ps).end()), ps.end());
    ((void)0);
    long long int ans = 1;
    Matrix<mint> m({{1, 1, 1}, {1, 0, 0}, {0, 1, 0}});
    auto mm = power(m, n - 3);
    mm.show_dump();
    for (auto p : ps) {
      long long int x = count_prime(c, p) * 3 % M + count_prime(f3, p) % M;
      long long int y = count_prime(c, p) * 2 % M + count_prime(f2, p) % M;
      long long int z = count_prime(c, p) * 1 % M + count_prime(f1, p) % M;
      ((void)0);
      (x *= mm[0][0].val) %= M;
      (y *= mm[0][1].val) %= M;
      (z *= mm[0][2].val) %= M;
      (ans *= power(p, (x + y + z) % M, mod)) %= mod;
    }
    (ans *= mod_inv(power(c, n, mod), mod)) %= mod;
    cout << ans << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

142310071407520708 617832726 668567895 297892739 643574075


(G.2) Fast Input

142310071407520708 617832726 668567895 25523540 643574075


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <class T> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
constexpr T lcm(T m, T n) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  return m / __gcd(m, n) * n; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
template <typename I> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void join(ostream &ost, I s, I t, string d = " ") { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto i = s; i != t; ++i) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    if (i != s) ost << d; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    ost << *i; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  ost << endl; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
istream &operator>>(istream &is, vector<T> &v) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto &a : v) is >> a; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  return is; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename U> /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
istream &operator>>(istream &is, pair<T, U> &p) { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  is >> p.first >> p.second; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  return is; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename U> /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
bool chmin(T &a, const U &b) { /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  return (a > b ? a = b, true : false); /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename U> /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
bool chmax(T &a, const U &b) { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  return (a < b ? a = b, true : false); /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, size_t N, typename U> /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
void fill_array(T (&a)[N], const U &v) { /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  fill((U *)a, (U *)(a + N), v); /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
const long long int mod = 1e9 + 7; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
long long int power(long long int n, long long int p, long long int m) { /* line 38 slow_hit_count: 12, fast_hit_count: 13 */
  long long int ret = 1; /* line 39 slow_hit_count: 12, fast_hit_count: 13 */
  while (p > 0) { /* line 40 slow_hit_count: 392, fast_hit_count: 419 */
    if (p & 1) (ret *= n) %= m; /* line 41 slow_hit_count: 380, fast_hit_count: 406 */
    (n *= n) %= m; /* line 42 slow_hit_count: 380, fast_hit_count: 406 */
    p /= 2; /* line 43 slow_hit_count: 380, fast_hit_count: 406 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 45 slow_hit_count: 12, fast_hit_count: 13 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
long long int mod_inv(long long int n, long long int p) { /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  return power(n, p - 2, p); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long int> prime_factorize_unique(long long int n) { /* line 50 slow_hit_count: 4, fast_hit_count: 4 */
  vector<long long int> res; /* line 51 slow_hit_count: 4, fast_hit_count: 4 */
  for (long long int i = 2LL; i * i <= n; ++i) { /* line 52 slow_hit_count: 26507, fast_hit_count: 9324 */
    if (n % i == 0) { /* line 53 slow_hit_count: 26503, fast_hit_count: 9320 */
      res.push_back(i); /* line 54 slow_hit_count: 8, fast_hit_count: 12 */
      while (n % i == 0) { /* line 55 slow_hit_count: 17, fast_hit_count: 26 */
        n /= i; /* line 56 slow_hit_count: 9, fast_hit_count: 14 */
      } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  if (n != 1) res.push_back(n); /* line 60 slow_hit_count: 4, fast_hit_count: 4 */
  return res; /* line 61 slow_hit_count: 4, fast_hit_count: 4 */
} /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
class Matrix { /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
 private: /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  int _row, _col; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  vector<vector<T>> _mat; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
  Matrix() : _row(0), _col(0), _mat() {} /* line 70 slow_hit_count: 57, fast_hit_count: 57 */
  Matrix(int _row, int _col) /* line 71 slow_hit_count: 82, fast_hit_count: 82 */
      : _row(_row), _col(_col), _mat(_row, vector<T>(_col)) {} /* line 72 slow_hit_count: 82, fast_hit_count: 82 */
  Matrix(int _row, int _col, const T &val) /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
      : _row(_row), _col(_col), _mat(_row, vector<T>(_col, val)) {} /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  Matrix(const vector<vector<T>> &m) /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
      : _row(m.size()), _col(m[0].size()), _mat(m) {} /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  int row() const { return _row; } /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  int col() const { return _col; } /* line 78 slow_hit_count: 1066, fast_hit_count: 1066 */
  const vector<T> &operator[](size_t i) const { return _mat[i]; } /* line 79 slow_hit_count: 2244, fast_hit_count: 2247 */
  vector<T> &unsafe_row(size_t i) { return _mat[i]; } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  T &at(size_t r, size_t c) { return _mat[r][c]; } /* line 81 slow_hit_count: 2214, fast_hit_count: 2214 */
  Matrix operator+(const Matrix &a) const { /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
    Matrix<T> ret(_row, _col); /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long int i = (0); i < (_row); ++i) /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
      for (long long int j = (0); j < (_col); ++j) /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
        ret.at(i, j) = _mat[i][j] + a[i][j]; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  Matrix operator-(const Matrix &a) const { /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
    Matrix<T> ret(_row, _col); /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long int i = (0); i < (_row); ++i) /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
      for (long long int j = (0); j < (_col); ++j) /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
        ret.at(i, j) = _mat[i][j] - a[i][j]; /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
  Matrix operator*(const Matrix &a) const { /* line 96 slow_hit_count: 82, fast_hit_count: 82 */
    Matrix<T> ret(_row, a.col()); /* line 97 slow_hit_count: 82, fast_hit_count: 82 */
    for (long long int i = (0); i < (_row); ++i) /* line 98 slow_hit_count: 328, fast_hit_count: 328 */
      for (long long int j = (0); j < (a.col()); ++j) /* line 99 slow_hit_count: 984, fast_hit_count: 984 */
        for (long long int k = (0); k < (_col); ++k) /* line 100 slow_hit_count: 2952, fast_hit_count: 2952 */
          ret.at(i, j) += _mat[i][k] * a[k][j]; /* line 101 slow_hit_count: 2214, fast_hit_count: 2214 */
    return ret; /* line 102 slow_hit_count: 82, fast_hit_count: 82 */
  } /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
  Matrix operator*(const T &k) const { /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
    Matrix<T> ret(_row, _col); /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long int i = (0); i < (_row); ++i) /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
      for (long long int j = (0); j < (_col); ++j) /* line 107 slow_hit_count: 0, fast_hit_count: 0 */
        ret.at(i, j) = _mat[i][j] * k; /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
  const Matrix &operator+=(const Matrix &a) { /* line 111 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long int i = (0); i < (_row); ++i) _mat[i] += a[i]; /* line 112 slow_hit_count: 0, fast_hit_count: 0 */
    return *this; /* line 113 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 114 slow_hit_count: 0, fast_hit_count: 0 */
  const Matrix &operator-=(const Matrix &a) { /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long int i = (0); i < (_row); ++i) _mat[i] -= a[i]; /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
    return *this; /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
  const Matrix &operator*=(const T &k) { /* line 119 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long int i = (0); i < (_row); ++i) _mat[i] *= k; /* line 120 slow_hit_count: 0, fast_hit_count: 0 */
    return *this; /* line 121 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
  void show_dump() {} /* line 123 slow_hit_count: 1, fast_hit_count: 1 */
}; /* line 124 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 125 slow_hit_count: 0, fast_hit_count: 0 */
Matrix<T> unit(int size) { /* line 126 slow_hit_count: 0, fast_hit_count: 0 */
  Matrix<T> ret(size, size); /* line 127 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long int i = (0); i < (size); ++i) ret.at(i, i) = 1; /* line 128 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 129 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 130 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 131 slow_hit_count: 0, fast_hit_count: 0 */
Matrix<T> power(const Matrix<T> &a, long long int k) { /* line 132 slow_hit_count: 57, fast_hit_count: 57 */
  Matrix<T> ret; /* line 133 slow_hit_count: 114, fast_hit_count: 114 */
  if (k <= 0) return unit<T>(a.row()); /* line 134 slow_hit_count: 57, fast_hit_count: 57 */
  if (k == 1) return a; /* line 135 slow_hit_count: 57, fast_hit_count: 57 */
  Matrix<T> temp = power(a, k / 2); /* line 136 slow_hit_count: 112, fast_hit_count: 112 */
  ret = temp * temp; /* line 137 slow_hit_count: 56, fast_hit_count: 56 */
  if (k % 2) ret = ret * a; /* line 138 slow_hit_count: 56, fast_hit_count: 56 */
  return ret; /* line 139 slow_hit_count: 56, fast_hit_count: 56 */
} /* line 140 slow_hit_count: 0, fast_hit_count: 0 */
template <uint32_t M> /* line 141 slow_hit_count: 0, fast_hit_count: 0 */
class mod_int_64 { /* line 142 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 143 slow_hit_count: 0, fast_hit_count: 0 */
  uint64_t val; /* line 144 slow_hit_count: 0, fast_hit_count: 0 */
  mod_int_64() : val(0) {} /* line 145 slow_hit_count: 246, fast_hit_count: 246 */
  mod_int_64(int64_t n) : val(n % M) {} /* line 146 slow_hit_count: 2223, fast_hit_count: 2223 */
  const mod_int_64 operator+(const mod_int_64 &a) const { /* line 147 slow_hit_count: 0, fast_hit_count: 0 */
    return mod_int_64((val + a.val) % M); /* line 148 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 149 slow_hit_count: 0, fast_hit_count: 0 */
  const mod_int_64 operator-(const mod_int_64 &a) const { /* line 150 slow_hit_count: 0, fast_hit_count: 0 */
    return mod_int_64((val - a.val + M) % M); /* line 151 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 152 slow_hit_count: 0, fast_hit_count: 0 */
  const mod_int_64 operator*(const mod_int_64 &a) const { /* line 153 slow_hit_count: 2214, fast_hit_count: 2214 */
    return mod_int_64((val * a.val) % M); /* line 154 slow_hit_count: 2214, fast_hit_count: 2214 */
  } /* line 155 slow_hit_count: 0, fast_hit_count: 0 */
  const mod_int_64 operator/(const mod_int_64 &a) const { /* line 156 slow_hit_count: 0, fast_hit_count: 0 */
    return mod_int_64((val * a.mod_inv().val) % M); /* line 157 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 158 slow_hit_count: 0, fast_hit_count: 0 */
  const mod_int_64 &operator=(const mod_int_64 &a) { /* line 159 slow_hit_count: 0, fast_hit_count: 0 */
    val = a.val; /* line 160 slow_hit_count: 0, fast_hit_count: 0 */
    return *this; /* line 161 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 162 slow_hit_count: 0, fast_hit_count: 0 */
  const mod_int_64 &operator+=(const mod_int_64 &a) { /* line 163 slow_hit_count: 2214, fast_hit_count: 2214 */
    (val += a.val) %= M; /* line 164 slow_hit_count: 2214, fast_hit_count: 2214 */
    return *this; /* line 165 slow_hit_count: 2214, fast_hit_count: 2214 */
  } /* line 166 slow_hit_count: 0, fast_hit_count: 0 */
  const mod_int_64 &operator-=(const mod_int_64 &a) { /* line 167 slow_hit_count: 0, fast_hit_count: 0 */
    ((val -= a.val) += M) %= M; /* line 168 slow_hit_count: 0, fast_hit_count: 0 */
    return *this; /* line 169 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 170 slow_hit_count: 0, fast_hit_count: 0 */
  const mod_int_64 &operator*=(const mod_int_64 &a) { /* line 171 slow_hit_count: 0, fast_hit_count: 0 */
    (val *= a.val) %= M; /* line 172 slow_hit_count: 0, fast_hit_count: 0 */
    return *this; /* line 173 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 174 slow_hit_count: 0, fast_hit_count: 0 */
  const mod_int_64 &operator/=(const mod_int_64 &a) { /* line 175 slow_hit_count: 0, fast_hit_count: 0 */
    (val *= a.mod_inv().val) %= M; /* line 176 slow_hit_count: 0, fast_hit_count: 0 */
    return *this; /* line 177 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 178 slow_hit_count: 0, fast_hit_count: 0 */
  const bool operator==(const mod_int_64 &a) const { return val == a.val; } /* line 179 slow_hit_count: 0, fast_hit_count: 0 */
  const bool operator!=(const mod_int_64 &a) const { return val != a.val; } /* line 180 slow_hit_count: 0, fast_hit_count: 0 */
  const mod_int_64 power(long long int p) const { /* line 181 slow_hit_count: 0, fast_hit_count: 0 */
    mod_int_64 ret = 1, e = val; /* line 182 slow_hit_count: 0, fast_hit_count: 0 */
    for (; p; e *= e, p >>= 1) /* line 183 slow_hit_count: 0, fast_hit_count: 0 */
      if (p & 1) ret *= e; /* line 184 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 185 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 186 slow_hit_count: 0, fast_hit_count: 0 */
  const mod_int_64 mod_inv() const { return power(M - 2); } /* line 187 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 188 slow_hit_count: 0, fast_hit_count: 0 */
template <uint32_t M> /* line 189 slow_hit_count: 0, fast_hit_count: 0 */
istream &operator>>(istream &is, mod_int_64<M> &a) { /* line 190 slow_hit_count: 0, fast_hit_count: 0 */
  is >> a.val; /* line 191 slow_hit_count: 0, fast_hit_count: 0 */
  return is; /* line 192 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 193 slow_hit_count: 0, fast_hit_count: 0 */
template <uint32_t M> /* line 194 slow_hit_count: 0, fast_hit_count: 0 */
ostream &operator<<(ostream &os, const mod_int_64<M> &a) { /* line 195 slow_hit_count: 0, fast_hit_count: 0 */
  os << a.val; /* line 196 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 197 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 198 slow_hit_count: 0, fast_hit_count: 0 */
const long long int M = mod - 1; /* line 199 slow_hit_count: 0, fast_hit_count: 0 */
using mint = mod_int_64<M>; /* line 200 slow_hit_count: 0, fast_hit_count: 0 */
long long int count_prime(long long int n, int p) { /* line 201 slow_hit_count: 60, fast_hit_count: 66 */
  long long int ret = 0; /* line 202 slow_hit_count: 60, fast_hit_count: 66 */
  while (n % p == 0) { /* line 203 slow_hit_count: 79, fast_hit_count: 90 */
    n /= p; /* line 204 slow_hit_count: 19, fast_hit_count: 24 */
    ++ret; /* line 205 slow_hit_count: 19, fast_hit_count: 24 */
  } /* line 206 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 207 slow_hit_count: 60, fast_hit_count: 66 */
} /* line 208 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 209 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 210 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(false); /* line 211 slow_hit_count: 1, fast_hit_count: 1 */
  long long int n, f1, f2, f3, c; /* line 212 slow_hit_count: 0, fast_hit_count: 0 */
  while (cin >> n >> f1 >> f2 >> f3 >> c) { /* line 213 slow_hit_count: 2, fast_hit_count: 2 */
    vector<int> ps; /* line 214 slow_hit_count: 2, fast_hit_count: 2 */
    { /* line 215 slow_hit_count: 0, fast_hit_count: 0 */
      auto pc = prime_factorize_unique(c); /* line 216 slow_hit_count: 2, fast_hit_count: 2 */
      auto p1 = prime_factorize_unique(f1); /* line 217 slow_hit_count: 2, fast_hit_count: 2 */
      auto p2 = prime_factorize_unique(f2); /* line 218 slow_hit_count: 2, fast_hit_count: 2 */
      auto p3 = prime_factorize_unique(f3); /* line 219 slow_hit_count: 2, fast_hit_count: 2 */
      for (auto x : pc) ps.push_back(x); /* line 220 slow_hit_count: 3, fast_hit_count: 3 */
      for (auto x : p1) ps.push_back(x); /* line 221 slow_hit_count: 6, fast_hit_count: 6 */
      for (auto x : p2) ps.push_back(x); /* line 222 slow_hit_count: 5, fast_hit_count: 5 */
      for (auto x : p3) ps.push_back(x); /* line 223 slow_hit_count: 2, fast_hit_count: 6 */
    } /* line 224 slow_hit_count: 0, fast_hit_count: 0 */
    sort((ps).begin(), (ps).end()); /* line 225 slow_hit_count: 1, fast_hit_count: 1 */
    ps.erase(unique((ps).begin(), (ps).end()), ps.end()); /* line 226 slow_hit_count: 1, fast_hit_count: 1 */
    ((void)0); /* line 227 slow_hit_count: 0, fast_hit_count: 0 */
    long long int ans = 1; /* line 228 slow_hit_count: 1, fast_hit_count: 1 */
    Matrix<mint> m({{1, 1, 1}, {1, 0, 0}, {0, 1, 0}}); /* line 229 slow_hit_count: 7, fast_hit_count: 7 */
    auto mm = power(m, n - 3); /* line 230 slow_hit_count: 2, fast_hit_count: 2 */
    mm.show_dump(); /* line 231 slow_hit_count: 1, fast_hit_count: 1 */
    for (auto p : ps) { /* line 232 slow_hit_count: 11, fast_hit_count: 12 */
      long long int x = count_prime(c, p) * 3 % M + count_prime(f3, p) % M; /* line 233 slow_hit_count: 10, fast_hit_count: 11 */
      long long int y = count_prime(c, p) * 2 % M + count_prime(f2, p) % M; /* line 234 slow_hit_count: 10, fast_hit_count: 11 */
      long long int z = count_prime(c, p) * 1 % M + count_prime(f1, p) % M; /* line 235 slow_hit_count: 10, fast_hit_count: 11 */
      ((void)0); /* line 236 slow_hit_count: 0, fast_hit_count: 0 */
      (x *= mm[0][0].val) %= M; /* line 237 slow_hit_count: 10, fast_hit_count: 11 */
      (y *= mm[0][1].val) %= M; /* line 238 slow_hit_count: 10, fast_hit_count: 11 */
      (z *= mm[0][2].val) %= M; /* line 239 slow_hit_count: 10, fast_hit_count: 11 */
      (ans *= power(p, (x + y + z) % M, mod)) %= mod; /* line 240 slow_hit_count: 10, fast_hit_count: 11 */
    } /* line 241 slow_hit_count: 0, fast_hit_count: 0 */
    (ans *= mod_inv(power(c, n, mod), mod)) %= mod; /* line 242 slow_hit_count: 1, fast_hit_count: 1 */
    cout << ans << endl; /* line 243 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 244 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 245 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 246 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Prime Factorization (Lines 50-61):**
   - The function `prime_factorize_unique` shows a significant difference in hit counts for lines 52-56 between the slow and fast inputs. This indicates that the prime factorization process is a potential bottleneck. Specifically, the loop on line 52, which checks divisibility by potential prime factors, is hit many more times for the slow input than the fast input.
   - This suggests the presence of a number with many small factors or a very large prime factor in the slow input, causing prolonged execution of this function.

2. **Exponentiation (Lines 38-45):**
   - The `power` function has higher hit counts on lines 40-43 for the slow input, suggesting it's being called more frequently or with larger exponents, possibly due to larger or more complex prime factors being involved in calculations.

3. **Matrix Multiplication (Lines 96-102):**
   - Matrix operations also show comparable hit counts between slow and fast runs. While not a direct bottleneck, the frequency of hit counts indicates these operations are crucial in the computation.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the hit count analysis and the nature of the problem, the following performance-characterizing invariants can highlight conditions under which the program may slow down:

1. **Prime Factorization Complexity:**
   - Natural Language Description: "The program may slow down significantly when inputs have numbers with large prime factors or a high number of small factors, leading to intensive computation in the prime factorization process."
   - This is particularly relevant when the integers `f1`, `f2`, `f3`, or `c` include such factors, as this increases the complexity of factorization in the `prime_factorize_unique` function.

2. **Exponentiation with Large Exponents:**
   - Natural Language Description: "If calculations involve large exponents due to complex factorization results, the repeated squaring in exponentiation becomes computationally intensive."
   - This especially affects the `power` function used in modular arithmetic, as detected by its high hit counts.

3. **Matrix Multiplication Overhead:**
   - Natural Language Description: "Repeated matrix multiplication with high dimensions can compound computational expense, particularly when exponentiated by large numbers."
   - This arises in the exponentiation of matrices used to calculate transformation matrices in the problem.

These invariants focus on capturing scenarios with complex input characteristics—such as large prime factors or high-dimensional matrix operations—that could consistently lead to performance bottlenecks.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the natural language invariants derived earlier, here are the corresponding checker functions in C++:

1. **Prime Factorization Complexity Check:**

```cpp
void check_prime_factorization_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Prime factorization invariant triggered - complex factorization" << endl;
        abort();
    }
}
```

2. **Exponentiation with Large Exponents Check:**

```cpp
void check_exponentiation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Exponentiation invariant triggered - large exponents involved" << endl;
        abort();
    }
}
```

3. **Matrix Multiplication Overhead Check:**

```cpp
void check_matrix_multiplication_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Matrix multiplication invariant triggered - heavy operations" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Below is the instrumented C++ code with integrated checker functions. These checks are strategically placed after input reading and before the main computation begins to avoid adding overhead within tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

template <class T>
constexpr T lcm(T m, T n) {
    return m / __gcd(m, n) * n;
}

const long long int mod = 1e9 + 7;

long long int power(long long int n, long long int p, long long int m) {
    long long int ret = 1;
    while (p > 0) {
        if (p & 1) (ret *= n) %= m;
        (n *= n) %= m;
        p /= 2;
    }
    return ret;
}

long long int mod_inv(long long int n, long long int p) {
    return power(n, p - 2, p);
}

vector<long long int> prime_factorize_unique(long long int n) {
    vector<long long int> res;
    for (long long int i = 2LL; i * i <= n; ++i) {
        if (n % i == 0) {
            res.push_back(i);
            while (n % i == 0) {
                n /= i;
            }
        }
    }
    if (n != 1) res.push_back(n);
    return res;
}

template <typename T>
class Matrix {
private:
    int _row, _col;
    vector<vector<T>> _mat;

public:
    Matrix() : _row(0), _col(0), _mat() {}
    Matrix(int _row, int _col)
        : _row(_row), _col(_col), _mat(_row, vector<T>(_col)) {}
    Matrix(int _row, int _col, const T &val)
        : _row(_row), _col(_col), _mat(_row, vector<T>(_col, val)) {}
    Matrix(const vector<vector<T>> &m)
        : _row(m.size()), _col(m[0].size()), _mat(m) {}
    int row() const { return _row; }
    int col() const { return _col; }
    const vector<T> &operator[](size_t i) const { return _mat[i]; }
    vector<T> &unsafe_row(size_t i) { return _mat[i]; }
    T &at(size_t r, size_t c) { return _mat[r][c]; }
    Matrix operator*(const Matrix &a) const {
        Matrix<T> ret(_row, a.col());
        for (long long int i = 0; i < _row; ++i)
            for (long long int j = 0; j < a.col(); ++j)
                for (long long int k = 0; k < _col; ++k)
                    ret.at(i, j) += _mat[i][k] * a[k][j];
        return ret;
    }
};

template <typename T>
Matrix<T> unit(int size) {
    Matrix<T> ret(size, size);
    for (long long int i = 0; i < size; ++i) ret.at(i, i) = 1;
    return ret;
}

template <typename T>
Matrix<T> power(const Matrix<T> &a, long long int k) {
    Matrix<T> ret;
    if (k <= 0) return unit<T>(a.row());
    if (k == 1) return a;
    Matrix<T> temp = power(a, k / 2);
    ret = temp * temp;
    if (k % 2) ret = ret * a;
    return ret;
}

template <uint32_t M>
class mod_int_64 {
public:
    uint64_t val;
    mod_int_64() : val(0) {}
    mod_int_64(int64_t n) : val(n % M) {}
    const mod_int_64 operator*(const mod_int_64 &a) const {
        return mod_int_64((val * a.val) % M);
    }
    const mod_int_64 &operator+=(const mod_int_64 &a) {
        (val += a.val) %= M;
        return *this;
    }
};

const long long int M = mod - 1;
using mint = mod_int_64<M>;

long long int count_prime(long long int n, int p) {
    long long int ret = 0;
    while (n % p == 0) {
        n /= p;
        ++ret;
    }
    return ret;
}

// Checker functions
void check_prime_factorization_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Prime factorization invariant triggered - complex factorization" << endl;
        abort();
    }
}

void check_exponentiation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Exponentiation invariant triggered - large exponents involved" << endl;
        abort();
    }
}

void check_matrix_multiplication_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Matrix multiplication invariant triggered - heavy operations" << endl;
        abort();
    }
}

int main() {
    cin.tie(0);
    ios::sync_with_stdio(false);
    long long int n, f1, f2, f3, c;
    while (cin >> n >> f1 >> f2 >> f3 >> c) {
        vector<int> ps;
        auto pc = prime_factorize_unique(c);
        auto p1 = prime_factorize_unique(f1);
        auto p2 = prime_factorize_unique(f2);
        auto p3 = prime_factorize_unique(f3);

        // Check for complex prime factorization
        check_prime_factorization_invariant(pc.size() + p1.size() + p2.size() + p3.size() > 100);

        for (auto x : pc) ps.push_back(x);
        for (auto x : p1) ps.push_back(x);
        for (auto x : p2) ps.push_back(x);
        for (auto x : p3) ps.push_back(x);

        sort(ps.begin(), ps.end());
        ps.erase(unique(ps.begin(), ps.end()), ps.end());

        ((void)0);
        long long int ans = 1;
        Matrix<mint> m({{1, 1, 1}, {1, 0, 0}, {0, 1, 0}});

        // Check for heavy matrix operations
        check_matrix_multiplication_invariant(n > 1e6);

        auto mm = power(m, n - 3);

        for (auto p : ps) {
            long long int x = count_prime(c, p) * 3 % M + count_prime(f3, p) % M;
            long long int y = count_prime(c, p) * 2 % M + count_prime(f2, p) % M;
            long long int z = count_prime(c, p) * 1 % M + count_prime(f1, p) % M;
            (x *= mm[0][0].val) %= M;
            (y *= mm[0][1].val) %= M;
            (z *= mm[0][2].val) %= M;
            (ans *= power(p, (x + y + z) % M, mod)) %= mod;
        }

        // Check for large exponents in exponentiation
        check_exponentiation_invariant(n > 1e6);

        (ans *= mod_inv(power(c, n, mod), mod)) %= mod;
        cout << ans << endl;
    }
    return 0;
}
```

### Explanation of Changes

- **Prime Factorization Check:** Added after calculating the unique prime factors of `c`, `f1`, `f2`, and `f3` to detect complex factorizations that could slow performance.
- **Exponentiation Check:** Positioned before performing potentially large exponentiations based on input size `n`.
- **Matrix Multiplication Check:** Placed before matrix exponentiation to catch scenarios where the input size `n` leads to computationally expensive matrix operations.

This setup will help identify performance bottlenecks during execution and abort execution if the conditions are met, facilitating debugging and optimization.

