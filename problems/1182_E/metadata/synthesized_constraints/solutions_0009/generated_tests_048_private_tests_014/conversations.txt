system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
struct matrix {
  int n;
  long long p[7][7];
  void init(int _n) {
    n = _n;
    for (int i = 0; i < n; i++)
      for (int j = 0; j < n; j++) p[i][j] = 0;
  }
};
long long gcd(long long x, long long y) {
  if (y == 0) return x;
  return gcd(y, x % y);
}
matrix multiply(matrix a, matrix b) {
  matrix c;
  c.init(a.n);
  int n = a.n;
  for (int i = 0; i < n; i++)
    for (int j = 0; j < n; j++)
      for (int k = 0; k < n; k++)
        c.p[i][j] =
            (c.p[i][j] + 1ll * a.p[i][k] * b.p[k][j] % (1000000007 - 1)) %
            (1000000007 - 1);
  return c;
}
long long Pow(long long a, long long n, long long m = 1000000007) {
  long long t = 1;
  for (; n; n >>= 1, (a *= a) %= m)
    if (n & 1) (t *= a) %= m;
  return t;
}
long long exbsgs(long long a, long long b, long long p) {
  if (b == 1LL) return 0;
  long long t, d = 1, k = 0;
  while ((t = gcd(a, p)) != 1) {
    if (b % t) return -1;
    ++k, b /= t, p /= t, d = d * (a / t) % p;
    if (b == d) return k;
  }
  unordered_map<long long, long long> dic;
  long long m = ceil(sqrt(p));
  long long a_m = Pow(a, m, p), mul = b;
  for (long long j = 1; j <= m; ++j) mul = mul * a % p, dic[mul] = j;
  for (long long i = 1; i <= m; ++i) {
    d = d * a_m % p;
    if (dic[d]) return i * m - dic[d] + k;
  }
  return -1;
}
int main() {
  long long n, f1, f2, f3, c;
  cin >> n >> f1 >> f2 >> f3 >> c;
  c = exbsgs(5, c, 1000000007);
  f1 = exbsgs(5, f1, 1000000007);
  f2 = exbsgs(5, f2, 1000000007);
  f3 = exbsgs(5, f3, 1000000007);
  n -= 3;
  matrix X;
  X.init(5);
  X.p[0][0] = 1;
  X.p[0][1] = 1;
  X.p[0][2] = 1;
  X.p[0][3] = c * 2 % (1000000007 - 1);
  X.p[0][4] = (-c * 6 % (1000000007 - 1) + (1000000007 - 1)) % (1000000007 - 1);
  X.p[1][0] = 1;
  X.p[2][1] = 1;
  X.p[3][3] = 1;
  X.p[3][4] = 1;
  X.p[4][4] = 1;
  matrix base;
  base.init(5);
  for (int i = 0; i < 5; i++) base.p[i][i] = 1;
  while (n) {
    if (n & 1) base = multiply(base, X);
    X = multiply(X, X);
    n >>= 1;
  }
  long long ret = 0;
  (ret += 1ll * base.p[0][0] * f3) %= (1000000007 - 1);
  (ret += 1ll * base.p[0][1] * f2) %= (1000000007 - 1);
  (ret += 1ll * base.p[0][2] * f1) %= (1000000007 - 1);
  (ret += 1ll * base.p[0][3] * 4ll) %= (1000000007 - 1);
  (ret += 1ll * base.p[0][4]) %= (1000000007 - 1);
  long long ans = 1;
  long long x = 5;
  while (ret) {
    if (ret & 1) ans = ans * x % 1000000007;
    x = x * x % 1000000007;
    ret >>= 1;
  }
  cout << ans << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

89432 31159 22014 72955 62042


(G.2) Fast Input

89432 31159 22014 66629 31727


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
struct matrix { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  int n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  long long p[7][7]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  void init(int _n) { /* line 6 slow_hit_count: 29, fast_hit_count: 29 */
    n = _n; /* line 7 slow_hit_count: 29, fast_hit_count: 29 */
    for (int i = 0; i < n; i++) /* line 8 slow_hit_count: 174, fast_hit_count: 174 */
      for (int j = 0; j < n; j++) p[i][j] = 0; /* line 9 slow_hit_count: 870, fast_hit_count: 870 */
  } /* line 10 slow_hit_count: 29, fast_hit_count: 29 */
}; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long x, long long y) { /* line 12 slow_hit_count: 20, fast_hit_count: 20 */
  if (y == 0) return x; /* line 13 slow_hit_count: 20, fast_hit_count: 20 */
  return gcd(y, x % y); /* line 14 slow_hit_count: 16, fast_hit_count: 16 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
matrix multiply(matrix a, matrix b) { /* line 16 slow_hit_count: 27, fast_hit_count: 27 */
  matrix c; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  c.init(a.n); /* line 18 slow_hit_count: 27, fast_hit_count: 27 */
  int n = a.n; /* line 19 slow_hit_count: 27, fast_hit_count: 27 */
  for (int i = 0; i < n; i++) /* line 20 slow_hit_count: 162, fast_hit_count: 162 */
    for (int j = 0; j < n; j++) /* line 21 slow_hit_count: 810, fast_hit_count: 810 */
      for (int k = 0; k < n; k++) /* line 22 slow_hit_count: 4050, fast_hit_count: 4050 */
        c.p[i][j] = /* line 23 slow_hit_count: 3375, fast_hit_count: 3375 */
            (c.p[i][j] + 1ll * a.p[i][k] * b.p[k][j] % (1000000007 - 1)) % /* line 24 slow_hit_count: 3375, fast_hit_count: 3375 */
            (1000000007 - 1); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  return c; /* line 26 slow_hit_count: 27, fast_hit_count: 27 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
long long Pow(long long a, long long n, long long m = 1000000007) { /* line 28 slow_hit_count: 4, fast_hit_count: 4 */
  long long t = 1; /* line 29 slow_hit_count: 4, fast_hit_count: 4 */
  for (; n; n >>= 1, (a *= a) %= m) /* line 30 slow_hit_count: 64, fast_hit_count: 64 */
    if (n & 1) (t *= a) %= m; /* line 31 slow_hit_count: 60, fast_hit_count: 60 */
  return t; /* line 32 slow_hit_count: 4, fast_hit_count: 4 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
long long exbsgs(long long a, long long b, long long p) { /* line 34 slow_hit_count: 4, fast_hit_count: 4 */
  if (b == 1LL) return 0; /* line 35 slow_hit_count: 4, fast_hit_count: 4 */
  long long t, d = 1, k = 0; /* line 36 slow_hit_count: 4, fast_hit_count: 4 */
  while ((t = gcd(a, p)) != 1) { /* line 37 slow_hit_count: 4, fast_hit_count: 4 */
    if (b % t) return -1; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    ++k, b /= t, p /= t, d = d * (a / t) % p; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    if (b == d) return k; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  unordered_map<long long, long long> dic; /* line 42 slow_hit_count: 8, fast_hit_count: 8 */
  long long m = ceil(sqrt(p)); /* line 43 slow_hit_count: 4, fast_hit_count: 4 */
  long long a_m = Pow(a, m, p), mul = b; /* line 44 slow_hit_count: 4, fast_hit_count: 4 */
  for (long long j = 1; j <= m; ++j) mul = mul * a % p, dic[mul] = j; /* line 45 slow_hit_count: 126496, fast_hit_count: 126496 */
  for (long long i = 1; i <= m; ++i) { /* line 46 slow_hit_count: 82074, fast_hit_count: 43527 */
    d = d * a_m % p; /* line 47 slow_hit_count: 82074, fast_hit_count: 43527 */
    if (dic[d]) return i * m - dic[d] + k; /* line 48 slow_hit_count: 82074, fast_hit_count: 43527 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  return -1; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, f1, f2, f3, c; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> f1 >> f2 >> f3 >> c; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  c = exbsgs(5, c, 1000000007); /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  f1 = exbsgs(5, f1, 1000000007); /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  f2 = exbsgs(5, f2, 1000000007); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  f3 = exbsgs(5, f3, 1000000007); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  n -= 3; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  matrix X; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  X.init(5); /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  X.p[0][0] = 1; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  X.p[0][1] = 1; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  X.p[0][2] = 1; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  X.p[0][3] = c * 2 % (1000000007 - 1); /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  X.p[0][4] = (-c * 6 % (1000000007 - 1) + (1000000007 - 1)) % (1000000007 - 1); /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  X.p[1][0] = 1; /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  X.p[2][1] = 1; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  X.p[3][3] = 1; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  X.p[3][4] = 1; /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  X.p[4][4] = 1; /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  matrix base; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  base.init(5); /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 5; i++) base.p[i][i] = 1; /* line 74 slow_hit_count: 6, fast_hit_count: 6 */
  while (n) { /* line 75 slow_hit_count: 18, fast_hit_count: 18 */
    if (n & 1) base = multiply(base, X); /* line 76 slow_hit_count: 17, fast_hit_count: 17 */
    X = multiply(X, X); /* line 77 slow_hit_count: 17, fast_hit_count: 17 */
    n >>= 1; /* line 78 slow_hit_count: 17, fast_hit_count: 17 */
  } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  long long ret = 0; /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
  (ret += 1ll * base.p[0][0] * f3) %= (1000000007 - 1); /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
  (ret += 1ll * base.p[0][1] * f2) %= (1000000007 - 1); /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
  (ret += 1ll * base.p[0][2] * f1) %= (1000000007 - 1); /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
  (ret += 1ll * base.p[0][3] * 4ll) %= (1000000007 - 1); /* line 84 slow_hit_count: 1, fast_hit_count: 1 */
  (ret += 1ll * base.p[0][4]) %= (1000000007 - 1); /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 1; /* line 86 slow_hit_count: 1, fast_hit_count: 1 */
  long long x = 5; /* line 87 slow_hit_count: 1, fast_hit_count: 1 */
  while (ret) { /* line 88 slow_hit_count: 29, fast_hit_count: 30 */
    if (ret & 1) ans = ans * x % 1000000007; /* line 89 slow_hit_count: 28, fast_hit_count: 29 */
    x = x * x % 1000000007; /* line 90 slow_hit_count: 28, fast_hit_count: 29 */
    ret >>= 1; /* line 91 slow_hit_count: 28, fast_hit_count: 29 */
  } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 94 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the given C program and derive performance-characterizing invariants, we need to identify why the program runs slowly for the "slow" input compared to the "fast" input.

### Phase 1: Identify Expensive or Inefficient Code Segments

#### Analysis of Line-Level Hit Counts

1. **Function `exbsgs` (lines 34-51):** 
   - In the "slow" input, lines 46-48 see significantly more hits. Specifically, the lines within the `for` loop from line 46 are more than double the hits in the "slow" input compared to the "fast" one.
   - This suggests that the loop in the `exbsgs` function is a potential bottleneck. The `exbsgs` function is used for discrete logarithm calculations, which are complex and computationally expensive.

2. **Recursive Exponentiation (lines 88-91):**
   - The loop at lines 88-91 has a slightly higher execution count in the "slow" input.
   - The loop performs repeated calculations of `x = x * x % 1000000007`, which could be sensitive to the value of `ret`, affecting the number of iterations.

#### Interaction with Data Structures and Algorithms

- The `exbsgs` function uses a hash map (`unordered_map`) to store intermediate values in a baby-step giant-step algorithm, which can be inefficient if the operations within the loop (line 45) need to iterate over a large search space.
- The matrix exponentiation and multiplication are computationally intensive but do not show a significant discrepancy in hit counts, indicating they are not the primary slowdown points.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants:

1. **Discrete Logarithm Complexity:**
   - Natural Language: "If the discrete logarithm computation in `exbsgs` requires exploring a larger search space due to certain properties of `c`, `f1`, `f2`, or `f3`, the function can become computationally intensive."
   - Explanation: The slow input likely requires more iterations in the loop within `exbsgs`, indicating that the properties of the input values lead to more extensive computation.

2. **Recursive Exponentiation Loop:**
   - Natural Language: "If the number of iterations in the recursive exponentiation loop is high, possibly due to the value of `ret` being large, this can lead to increased computation time."
   - Explanation: The loop that calculates the power of 5 (lines 88-91) might iterate more times for the slow input due to a larger `ret`, affecting performance.

### Thresholds and Abstract Patterns

- While the exact threshold is not extracted directly from the input, one can infer that the computation becomes significant if the `exbsgs` function's evaluated search space (dictated by a large `m` from `sqrt(p)`) is large.
- The recursive loop in lines 88-91 is sensitive to the size of `ret`, which should be optimized to avoid unnecessary computations.

These performance invariants can help guide further optimizations or indicate conditions that a fuzzer might use to identify slow performance scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checker Code in C++

Let's translate the performance-characterizing invariants derived in Phase 2 into C++ runtime checks.

#### Invariant 1: Discrete Logarithm Complexity
- **Condition:** If the loop in the `exbsgs` function requires many iterations due to a large search space, it may become computationally intensive.

```cpp
void check_exbsgs_invariant(long long m, long long iterations) {
    if (iterations > m * m) { // Check if iterations exceed expected search space
        cerr << "Warning: Performance bottleneck condition triggered in exbsgs - large search space!" << endl;
        abort();
    }
}
```

#### Invariant 2: Recursive Exponentiation Loop
- **Condition:** If the number of iterations in the recursive loop for calculating power is high, possibly due to the value of `ret`.

```cpp
void check_pow_invariant(long long ret) {
    if (ret > 1e9) { // Example threshold based on ret's size
        cerr << "Warning: Performance bottleneck condition triggered in power calculation - excessive iterations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Now, we'll integrate these checks into the original C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;

struct matrix {
  int n;
  long long p[7][7];
  void init(int _n) {
    n = _n;
    for (int i = 0; i < n; i++)
      for (int j = 0; j < n; j++) p[i][j] = 0;
  }
};

long long gcd(long long x, long long y) {
  if (y == 0) return x;
  return gcd(y, x % y);
}

matrix multiply(matrix a, matrix b) {
  matrix c;
  c.init(a.n);
  int n = a.n;
  for (int i = 0; i < n; i++)
    for (int j = 0; j < n; j++)
      for (int k = 0; k < n; k++)
        c.p[i][j] =
            (c.p[i][j] + 1ll * a.p[i][k] * b.p[k][j] % (1000000007 - 1)) %
            (1000000007 - 1);
  return c;
}

long long Pow(long long a, long long n, long long m = 1000000007) {
  long long t = 1;
  for (; n; n >>= 1, (a *= a) %= m)
    if (n & 1) (t *= a) %= m;
  return t;
}

void check_exbsgs_invariant(long long m, long long iterations) {
    if (iterations > m * m) { // Check if iterations exceed expected search space
        cerr << "Warning: Performance bottleneck condition triggered in exbsgs - large search space!" << endl;
        abort();
    }
}

void check_pow_invariant(long long ret) {
    if (ret > 1e9) { // Example threshold based on ret's size
        cerr << "Warning: Performance bottleneck condition triggered in power calculation - excessive iterations!" << endl;
        abort();
    }
}

long long exbsgs(long long a, long long b, long long p) {
  if (b == 1LL) return 0;
  long long t, d = 1, k = 0;
  while ((t = gcd(a, p)) != 1) {
    if (b % t) return -1;
    ++k, b /= t, p /= t, d = d * (a / t) % p;
    if (b == d) return k;
  }
  unordered_map<long long, long long> dic;
  long long m = ceil(sqrt(p));
  long long a_m = Pow(a, m, p), mul = b;
  long long iterations = 0;
  for (long long j = 1; j <= m; ++j) {
    mul = mul * a % p;
    dic[mul] = j;
  }
  for (long long i = 1; i <= m; ++i) {
    d = d * a_m % p;
    iterations++;
    if (dic[d]) return i * m - dic[d] + k;
  }
  check_exbsgs_invariant(m, iterations); // Check for performance bottleneck
  return -1;
}

int main() {
  long long n, f1, f2, f3, c;
  cin >> n >> f1 >> f2 >> f3 >> c;
  c = exbsgs(5, c, 1000000007);
  f1 = exbsgs(5, f1, 1000000007);
  f2 = exbsgs(5, f2, 1000000007);
  f3 = exbsgs(5, f3, 1000000007);
  n -= 3;
  matrix X;
  X.init(5);
  X.p[0][0] = 1;
  X.p[0][1] = 1;
  X.p[0][2] = 1;
  X.p[0][3] = c * 2 % (1000000007 - 1);
  X.p[0][4] = (-c * 6 % (1000000007 - 1) + (1000000007 - 1)) % (1000000007 - 1);
  X.p[1][0] = 1;
  X.p[2][1] = 1;
  X.p[3][3] = 1;
  X.p[3][4] = 1;
  X.p[4][4] = 1;
  matrix base;
  base.init(5);
  for (int i = 0; i < 5; i++) base.p[i][i] = 1;
  while (n) {
    if (n & 1) base = multiply(base, X);
    X = multiply(X, X);
    n >>= 1;
  }
  long long ret = 0;
  (ret += 1ll * base.p[0][0] * f3) %= (1000000007 - 1);
  (ret += 1ll * base.p[0][1] * f2) %= (1000000007 - 1);
  (ret += 1ll * base.p[0][2] * f1) %= (1000000007 - 1);
  (ret += 1ll * base.p[0][3] * 4ll) %= (1000000007 - 1);
  (ret += 1ll * base.p[0][4]) %= (1000000007 - 1);

  check_pow_invariant(ret); // Check for performance issue in exponentiation

  long long ans = 1;
  long long x = 5;
  while (ret) {
    if (ret & 1) ans = ans * x % 1000000007;
    x = x * x % 1000000007;
    ret >>= 1;
  }
  cout << ans << endl;
}
```

### Explanation
- **`check_exbsgs_invariant`:** This function checks if the number of iterations in `exbsgs` exceeds the expected search space size (`m * m`), which could indicate a performance bottleneck.
- **`check_pow_invariant`:** This function checks if `ret` is excessively large, which could lead to performance issues during exponentiation. A threshold of `1e9` is used based on potential computational limits and constraints.

These checks are strategically placed to ensure they detect conditions leading to slow performance without adding significant overhead to the program.

