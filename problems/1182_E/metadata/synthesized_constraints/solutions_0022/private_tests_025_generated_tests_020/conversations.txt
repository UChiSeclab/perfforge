system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 100 + 10;
const int inf = 0x3f3f3f3f;
const int mod = 1e9 + 7 - 1;
struct matrix {
  long long a[N][N];
  int n;
  matrix() {}
  matrix(int k) {
    n = k;
    memset(a, 0, sizeof(a));
  }
  void init() {
    for (int i = 0; i < n; i++) a[i][i] = 1;
  }
  matrix operator*(const matrix &B) {
    matrix C(n);
    for (int i = 0; i < n; i++)
      for (int j = 0; j < n; j++)
        for (int k = 0; k < n; k++)
          C.a[i][j] = (C.a[i][j] + a[i][k] * B.a[k][j]) % mod;
    return C;
  }
  matrix operator^(long long k) {
    matrix A = (*this), res(n);
    res.init();
    while (k) {
      if (k & 1) res = res * A;
      A = A * A;
      k >>= 1;
    }
    return res;
  }
  void print() {
    for (int i = 0; i < n; i++) {
      for (int j = 0; j < n; j++) {
        cout << a[i][j] << ' ';
      }
      cout << endl;
    }
  }
};
vector<long long> pri[4];
long long f[4];
vector<long long> get(long long n) {
  vector<long long> p;
  for (long long i = 2; i * i <= n; i++) {
    if (n % i == 0) {
      p.push_back(i);
      while (n % i == 0) n /= i;
    }
  }
  if (n != 1) p.push_back(n);
  return p;
}
long long qpow(long long n, long long k, long long p) {
  long long res = 1;
  while (k) {
    if (k & 1) res = res * n % p;
    n = n * n % p;
    k >>= 1;
  }
  return res;
}
int main() {
  long long n, c;
  cin >> n;
  for (int i = 1; i <= 3; i++) cin >> f[i], pri[i] = get(f[i]);
  cin >> c;
  matrix a(5);
  for (int i = 0; i < 4; i++) a.a[0][i] = 1;
  a.a[1][0] = a.a[2][1] = 1;
  a.a[3][3] = 1, a.a[3][4] = 2;
  a.a[4][4] = 1;
  a = a ^ (n - 3);
  vector<long long> p;
  for (int i = 1; i <= 3; i++)
    for (long long j : pri[i]) p.push_back(j);
  for (long long j : get(c)) p.push_back(j);
  sort(p.begin(), p.end());
  p.erase(unique(p.begin(), p.end()), p.end());
  long long ans = 1;
  for (long long x : p) {
    long long tem = 0;
    for (int i = 1; i <= 3; i++) {
      int t = 0;
      long long ff = f[i];
      while (ff % x == 0) t++, ff /= x;
      tem += t * a.a[0][3 - i] % mod;
      tem %= mod;
    }
    int t = 0;
    long long ff = c;
    while (ff % x == 0) t++, ff /= x;
    tem += a.a[0][3] * 2 * t % mod;
    tem %= mod;
    tem += a.a[0][4] * t % mod;
    tem %= mod;
    ans = ans * qpow(x, tem, mod + 1) % (mod + 1);
  }
  cout << ans << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

142310071407520708 617832726 668567895 297892739 643574075


(G.2) Fast Input

142310071407520708 617832726 668567895 25523540 643574075


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 100 + 10; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 0x3f3f3f3f; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e9 + 7 - 1; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
struct matrix { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  long long a[N][N]; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  int n; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  matrix() {} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  matrix(int k) { /* line 10 slow_hit_count: 86, fast_hit_count: 86 */
    n = k; /* line 11 slow_hit_count: 86, fast_hit_count: 86 */
    memset(a, 0, sizeof(a)); /* line 12 slow_hit_count: 86, fast_hit_count: 86 */
  } /* line 13 slow_hit_count: 86, fast_hit_count: 86 */
  void init() { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i < n; i++) a[i][i] = 1; /* line 15 slow_hit_count: 6, fast_hit_count: 6 */
  } /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  matrix operator*(const matrix &B) { /* line 17 slow_hit_count: 84, fast_hit_count: 84 */
    matrix C(n); /* line 18 slow_hit_count: 84, fast_hit_count: 84 */
    for (int i = 0; i < n; i++) /* line 19 slow_hit_count: 504, fast_hit_count: 504 */
      for (int j = 0; j < n; j++) /* line 20 slow_hit_count: 2520, fast_hit_count: 2520 */
        for (int k = 0; k < n; k++) /* line 21 slow_hit_count: 12600, fast_hit_count: 12600 */
          C.a[i][j] = (C.a[i][j] + a[i][k] * B.a[k][j]) % mod; /* line 22 slow_hit_count: 10500, fast_hit_count: 10500 */
    return C; /* line 23 slow_hit_count: 84, fast_hit_count: 84 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  matrix operator^(long long k) { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    matrix A = (*this), res(n); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    res.init(); /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
    while (k) { /* line 28 slow_hit_count: 58, fast_hit_count: 58 */
      if (k & 1) res = res * A; /* line 29 slow_hit_count: 57, fast_hit_count: 57 */
      A = A * A; /* line 30 slow_hit_count: 57, fast_hit_count: 57 */
      k >>= 1; /* line 31 slow_hit_count: 57, fast_hit_count: 57 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    return res; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  void print() { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i < n; i++) { /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = 0; j < n; j++) { /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
        cout << a[i][j] << ' '; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      cout << endl; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> pri[4]; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
long long f[4]; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> get(long long n) { /* line 46 slow_hit_count: 4, fast_hit_count: 4 */
  vector<long long> p; /* line 47 slow_hit_count: 4, fast_hit_count: 4 */
  for (long long i = 2; i * i <= n; i++) { /* line 48 slow_hit_count: 26507, fast_hit_count: 9324 */
    if (n % i == 0) { /* line 49 slow_hit_count: 26503, fast_hit_count: 9320 */
      p.push_back(i); /* line 50 slow_hit_count: 8, fast_hit_count: 12 */
      while (n % i == 0) n /= i; /* line 51 slow_hit_count: 17, fast_hit_count: 26 */
    } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  if (n != 1) p.push_back(n); /* line 54 slow_hit_count: 4, fast_hit_count: 4 */
  return p; /* line 55 slow_hit_count: 4, fast_hit_count: 4 */
} /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
long long qpow(long long n, long long k, long long p) { /* line 57 slow_hit_count: 10, fast_hit_count: 11 */
  long long res = 1; /* line 58 slow_hit_count: 10, fast_hit_count: 11 */
  while (k) { /* line 59 slow_hit_count: 300, fast_hit_count: 326 */
    if (k & 1) res = res * n % p; /* line 60 slow_hit_count: 290, fast_hit_count: 315 */
    n = n * n % p; /* line 61 slow_hit_count: 290, fast_hit_count: 315 */
    k >>= 1; /* line 62 slow_hit_count: 290, fast_hit_count: 315 */
  } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 64 slow_hit_count: 10, fast_hit_count: 11 */
} /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, c; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 3; i++) cin >> f[i], pri[i] = get(f[i]); /* line 69 slow_hit_count: 4, fast_hit_count: 4 */
  cin >> c; /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  matrix a(5); /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 4; i++) a.a[0][i] = 1; /* line 72 slow_hit_count: 5, fast_hit_count: 5 */
  a.a[1][0] = a.a[2][1] = 1; /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  a.a[3][3] = 1, a.a[3][4] = 2; /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  a.a[4][4] = 1; /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  a = a ^ (n - 3); /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> p; /* line 77 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 1; i <= 3; i++) /* line 78 slow_hit_count: 4, fast_hit_count: 4 */
    for (long long j : pri[i]) p.push_back(j); /* line 79 slow_hit_count: 13, fast_hit_count: 17 */
  for (long long j : get(c)) p.push_back(j); /* line 80 slow_hit_count: 3, fast_hit_count: 3 */
  sort(p.begin(), p.end()); /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
  p.erase(unique(p.begin(), p.end()), p.end()); /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 1; /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long x : p) { /* line 84 slow_hit_count: 11, fast_hit_count: 12 */
    long long tem = 0; /* line 85 slow_hit_count: 10, fast_hit_count: 11 */
    for (int i = 1; i <= 3; i++) { /* line 86 slow_hit_count: 40, fast_hit_count: 44 */
      int t = 0; /* line 87 slow_hit_count: 30, fast_hit_count: 33 */
      long long ff = f[i]; /* line 88 slow_hit_count: 30, fast_hit_count: 33 */
      while (ff % x == 0) t++, ff /= x; /* line 89 slow_hit_count: 40, fast_hit_count: 48 */
      tem += t * a.a[0][3 - i] % mod; /* line 90 slow_hit_count: 30, fast_hit_count: 33 */
      tem %= mod; /* line 91 slow_hit_count: 30, fast_hit_count: 33 */
    } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
    int t = 0; /* line 93 slow_hit_count: 10, fast_hit_count: 11 */
    long long ff = c; /* line 94 slow_hit_count: 10, fast_hit_count: 11 */
    while (ff % x == 0) t++, ff /= x; /* line 95 slow_hit_count: 13, fast_hit_count: 14 */
    tem += a.a[0][3] * 2 * t % mod; /* line 96 slow_hit_count: 10, fast_hit_count: 11 */
    tem %= mod; /* line 97 slow_hit_count: 10, fast_hit_count: 11 */
    tem += a.a[0][4] * t % mod; /* line 98 slow_hit_count: 10, fast_hit_count: 11 */
    tem %= mod; /* line 99 slow_hit_count: 10, fast_hit_count: 11 */
    ans = ans * qpow(x, tem, mod + 1) % (mod + 1); /* line 100 slow_hit_count: 10, fast_hit_count: 11 */
  } /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << endl; /* line 102 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 103 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon examining the hit counts for both the slow and fast inputs, we observe the following:

1. **Function `get()`**: The loop inside this function, particularly the line checking for divisors (`if (n % i == 0)`), has significantly more hits for the slow input (26,507 hits) compared to the fast input (9,324 hits). This suggests that the computation of prime factors of the input values is more intensive for the slow input.

2. **Line 89 (`while (ff % x == 0)`)**: This line, which calculates the number of times a prime factor divides a number, is hit more frequently in the slow input. This indicates that the numbers involved have more prime factors or require more iterations to reduce.

3. **The matrix exponentiation (`a = a ^ (n - 3)`)**: Although the hit counts for matrix operations are similar between the fast and slow inputs, the complexity of handling the matrix can add to the overall computation time, especially given the large value of `n - 3`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations above, here are some performance-characterizing invariants:

1. **Prime Factorization Complexity**:
   - **Natural Language Invariant**: "If the numbers involved have a large number of small prime divisors, the factorization process can become a significant performance bottleneck."
   - **Impact**: Large numbers with many small divisors cause more iterations in the `get()` function's loop, leading to increased computation time.

2. **Repeated Factor Division in Loops**:
   - **Natural Language Invariant**: "When the input numbers frequently divide by a common factor in loops, this can trigger excessive iterations and slow down the execution."
   - **Impact**: This can particularly affect the while loops used to determine the power of factors in the calculation.

3. **Matrix Exponentiation**:
   - **Natural Language Invariant**: "When matrix dimensions or operations scale with inputs, especially with large powers as in matrix exponentiation, the computational overhead can increase significantly."
   - **Impact**: Although not the main issue here, matrix exponentiation for large `n` can be a hidden cost, especially if not optimized.

These invariants help identify conditions likely to cause performance degradation, providing useful criteria for testing and optimization. Implementing checks for these conditions can alert developers to potential slowdowns in similar future scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, here is the C++ code to check those conditions at runtime:

1. **Prime Factorization Complexity**:
   - This check ensures that if the number of divisors found is excessively large, a warning will be triggered.

```cpp
void check_prime_factorization_invariant(size_t divisor_count) {
    if (divisor_count > 100) { // Threshold chosen for excessive divisors
        cerr << "Warning: Performance bottleneck condition triggered due to large number of divisors!" << endl;
        abort();
    }
}
```

2. **Repeated Factor Division in Loops**:
   - This check ensures that if the loop for factor division iterates excessively, a warning will be triggered.

```cpp
void check_repeated_division_invariant(size_t division_count) {
    if (division_count > 100) { // Threshold for excessive divisions
        cerr << "Warning: Performance bottleneck condition triggered due to excessive repeated divisions!" << endl;
        abort();
    }
}
```

3. **Matrix Exponentiation**:
   - This check evaluates the complexity and potential slowdown due to matrix exponentiation.

```cpp
void check_matrix_exponentiation_invariant(long long n) {
    if (n > 1e6) { // Threshold for large n leading to deep exponentiation
        cerr << "Warning: Performance bottleneck condition triggered due to large matrix exponentiation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checks into the Original C++ Program

Now, I will insert these checks at appropriate points in the original program:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 100 + 10;
const int inf = 0x3f3f3f3f;
const int mod = 1e9 + 7 - 1;

struct matrix {
    long long a[N][N];
    int n;
    matrix() {}
    matrix(int k) {
        n = k;
        memset(a, 0, sizeof(a));
    }
    void init() {
        for (int i = 0; i < n; i++) a[i][i] = 1;
    }
    matrix operator*(const matrix &B) {
        matrix C(n);
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                for (int k = 0; k < n; k++)
                    C.a[i][j] = (C.a[i][j] + a[i][k] * B.a[k][j]) % mod;
        return C;
    }
    matrix operator^(long long k) {
        matrix A = (*this), res(n);
        res.init();
        while (k) {
            if (k & 1) res = res * A;
            A = A * A;
            k >>= 1;
        }
        return res;
    }
    void print() {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cout << a[i][j] << ' ';
            }
            cout << endl;
        }
    }
};

vector<long long> pri[4];
long long f[4];

vector<long long> get(long long n) {
    vector<long long> p;
    size_t divisor_count = 0;  // Track the number of divisor findings
    for (long long i = 2; i * i <= n; i++) {
        if (n % i == 0) {
            p.push_back(i);
            ++divisor_count;
            while (n % i == 0) n /= i;
        }
    }
    if (n != 1) p.push_back(n);
    check_prime_factorization_invariant(divisor_count);  // Check for excessive divisors
    return p;
}

long long qpow(long long n, long long k, long long p) {
    long long res = 1;
    size_t division_count = 0;  // Track the number of divisions in the loop
    while (k) {
        if (k & 1) res = res * n % p;
        n = n * n % p;
        k >>= 1;
        ++division_count;
    }
    check_repeated_division_invariant(division_count);  // Check for excessive divisions
    return res;
}

int main() {
    long long n, c;
    cin >> n;
    check_matrix_exponentiation_invariant(n);  // Check for large n before matrix power
    for (int i = 1; i <= 3; i++) cin >> f[i], pri[i] = get(f[i]);
    cin >> c;
    matrix a(5);
    for (int i = 0; i < 4; i++) a.a[0][i] = 1;
    a.a[1][0] = a.a[2][1] = 1;
    a.a[3][3] = 1, a.a[3][4] = 2;
    a.a[4][4] = 1;
    a = a ^ (n - 3);
    vector<long long> p;
    for (int i = 1; i <= 3; i++)
        for (long long j : pri[i]) p.push_back(j);
    for (long long j : get(c)) p.push_back(j);
    sort(p.begin(), p.end());
    p.erase(unique(p.begin(), p.end()), p.end());
    long long ans = 1;
    for (long long x : p) {
        long long tem = 0;
        for (int i = 1; i <= 3; i++) {
            int t = 0;
            long long ff = f[i];
            while (ff % x == 0) t++, ff /= x;
            tem += t * a.a[0][3 - i] % mod;
            tem %= mod;
        }
        int t = 0;
        long long ff = c;
        while (ff % x == 0) t++, ff /= x;
        tem += a.a[0][3] * 2 * t % mod;
        tem %= mod;
        tem += a.a[0][4] * t % mod;
        tem %= mod;
        ans = ans * qpow(x, tem, mod + 1) % (mod + 1);
    }
    cout << ans << endl;
}
```

### Explanation

- **`check_prime_factorization_invariant`**: This function is called after extracting prime factors to ensure that the number of distinct divisors does not grow excessively large.
- **`check_repeated_division_invariant`**: This function checks the number of iterations in the division loops, triggering if divisions occur excessively.
- **`check_matrix_exponentiation_invariant`**: This function is called after reading `n` to ensure that the matrix exponentiation step is feasible and does not overly burden computation. 

These checks aim to catch potential performance bottlenecks early, aiding in debugging and optimization processes.

