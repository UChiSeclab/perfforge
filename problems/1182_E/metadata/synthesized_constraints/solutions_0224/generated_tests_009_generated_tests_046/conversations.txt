system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7;
long long n;
int f[4], c;
map<int, int> primeTable[5];
vector<int> primes;
int quick_pow(int bas, long long tim) {
  tim %= (mod - 1);
  int ret = 1;
  while (tim) {
    if (tim & 1) ret = 1LL * ret * bas % mod;
    bas = 1LL * bas * bas % mod;
    tim >>= 1;
  }
  return ret;
}
struct matrix {
  int mat[5][5];
  void clear() { memset(mat, 0, sizeof(mat)); }
  int *operator[](const int &rhs) { return mat[rhs]; }
  matrix operator*(const matrix &rhs) {
    matrix ret;
    ret.clear();
    for (int i = 1; i <= 4; i++)
      for (int j = 1; j <= 4; j++)
        for (int k = 1; k <= 4; k++)
          ret[i][j] =
              (1LL * ret[i][j] + 1LL * mat[i][k] * rhs.mat[k][j] % (mod - 1)) %
              (mod - 1);
    return ret;
  }
  matrix operator^(const long long &rhs) {
    long long tim = rhs;
    matrix ret, bas = *this;
    ret.clear();
    for (int i = 1; i <= 4; i++) ret[i][i] = 1;
    while (tim) {
      if (tim & 1LL) ret = ret * bas;
      bas = bas * bas;
      tim >>= 1LL;
    }
    return ret;
  }
} trans, A;
void factorize(int x, int org) {
  for (int i = 2; 1LL * i * i <= x; i++) {
    if (x % i == 0) primes.push_back(i);
    while (x % i == 0) primeTable[org][i]++, x /= i;
  }
  if (x != 1) primes.push_back(x), primeTable[org][x]++;
  sort(primes.begin(), primes.end());
  primes.erase(unique(primes.begin(), primes.end()), primes.end());
}
int main() {
  trans[1][1] = trans[2][1] = trans[3][1] = 1;
  trans[1][2] = trans[2][3] = trans[3][4] = 1;
  scanf("%lld%d%d%d%d", &n, &f[1], &f[2], &f[3], &c);
  trans = trans ^ (n - 3);
  int ans = 1;
  for (int i = 1; i <= 3; i++) {
    factorize(f[i], i);
    for (int d = 1; d <= i; d++) factorize(c, i);
  }
  for (int i = 0, siz = primes.size(); i < siz; i++) {
    A.clear();
    for (int j = 1; j <= 3; j++)
      A[1][4 - j] = (0LL + A[1][4 - j] + primeTable[j][primes[i]]) % (mod - 1);
    A = A * trans;
    ans = 1LL * ans * quick_pow(primes[i], A[1][1]) % mod;
  }
  printf("%lld\n", 1LL * ans * quick_pow(quick_pow(c, mod - 2), n) % mod);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

700733589947068748 168164385 420235261 550995719 169674941


(G.2) Fast Input

700733589947068748 168164385 420235261 550995719 280649984


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int f[4], c; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
map<int, int> primeTable[5]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> primes; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
int quick_pow(int bas, long long tim) { /* line 8 slow_hit_count: 13, fast_hit_count: 14 */
  tim %= (mod - 1); /* line 9 slow_hit_count: 13, fast_hit_count: 14 */
  int ret = 1; /* line 10 slow_hit_count: 13, fast_hit_count: 14 */
  while (tim) { /* line 11 slow_hit_count: 389, fast_hit_count: 420 */
    if (tim & 1) ret = 1LL * ret * bas % mod; /* line 12 slow_hit_count: 376, fast_hit_count: 406 */
    bas = 1LL * bas * bas % mod; /* line 13 slow_hit_count: 376, fast_hit_count: 406 */
    tim >>= 1; /* line 14 slow_hit_count: 376, fast_hit_count: 406 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 16 slow_hit_count: 13, fast_hit_count: 14 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
struct matrix { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  int mat[5][5]; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  void clear() { memset(mat, 0, sizeof(mat)); } /* line 20 slow_hit_count: 114, fast_hit_count: 116 */
  int *operator[](const int &rhs) { return mat[rhs]; } /* line 21 slow_hit_count: 13143, fast_hit_count: 13278 */
  matrix operator*(const matrix &rhs) { /* line 22 slow_hit_count: 102, fast_hit_count: 103 */
    matrix ret; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    ret.clear(); /* line 24 slow_hit_count: 102, fast_hit_count: 103 */
    for (int i = 1; i <= 4; i++) /* line 25 slow_hit_count: 510, fast_hit_count: 515 */
      for (int j = 1; j <= 4; j++) /* line 26 slow_hit_count: 2040, fast_hit_count: 2060 */
        for (int k = 1; k <= 4; k++) /* line 27 slow_hit_count: 8160, fast_hit_count: 8240 */
          ret[i][j] = /* line 28 slow_hit_count: 6528, fast_hit_count: 6592 */
              (1LL * ret[i][j] + 1LL * mat[i][k] * rhs.mat[k][j] % (mod - 1)) % /* line 29 slow_hit_count: 6528, fast_hit_count: 6592 */
              (mod - 1); /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 31 slow_hit_count: 102, fast_hit_count: 103 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  matrix operator^(const long long &rhs) { /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
    long long tim = rhs; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
    matrix ret, bas = *this; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
    ret.clear(); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 1; i <= 4; i++) ret[i][i] = 1; /* line 37 slow_hit_count: 5, fast_hit_count: 5 */
    while (tim) { /* line 38 slow_hit_count: 61, fast_hit_count: 61 */
      if (tim & 1LL) ret = ret * bas; /* line 39 slow_hit_count: 60, fast_hit_count: 60 */
      bas = bas * bas; /* line 40 slow_hit_count: 60, fast_hit_count: 60 */
      tim >>= 1LL; /* line 41 slow_hit_count: 60, fast_hit_count: 60 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    return ret; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
} trans, A; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
void factorize(int x, int org) { /* line 46 slow_hit_count: 9, fast_hit_count: 9 */
  for (int i = 2; 1LL * i * i <= x; i++) { /* line 47 slow_hit_count: 79855, fast_hit_count: 7987 */
    if (x % i == 0) primes.push_back(i); /* line 48 slow_hit_count: 79846, fast_hit_count: 7978 */
    while (x % i == 0) primeTable[org][i]++, x /= i; /* line 49 slow_hit_count: 79853, fast_hit_count: 8033 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  if (x != 1) primes.push_back(x), primeTable[org][x]++; /* line 51 slow_hit_count: 9, fast_hit_count: 9 */
  sort(primes.begin(), primes.end()); /* line 52 slow_hit_count: 9, fast_hit_count: 9 */
  primes.erase(unique(primes.begin(), primes.end()), primes.end()); /* line 53 slow_hit_count: 9, fast_hit_count: 9 */
} /* line 54 slow_hit_count: 9, fast_hit_count: 9 */
int main() { /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  trans[1][1] = trans[2][1] = trans[3][1] = 1; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  trans[1][2] = trans[2][3] = trans[3][4] = 1; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%lld%d%d%d%d", &n, &f[1], &f[2], &f[3], &c); /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  trans = trans ^ (n - 3); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 1; /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 3; i++) { /* line 61 slow_hit_count: 4, fast_hit_count: 4 */
    factorize(f[i], i); /* line 62 slow_hit_count: 3, fast_hit_count: 3 */
    for (int d = 1; d <= i; d++) factorize(c, i); /* line 63 slow_hit_count: 9, fast_hit_count: 9 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0, siz = primes.size(); i < siz; i++) { /* line 65 slow_hit_count: 12, fast_hit_count: 13 */
    A.clear(); /* line 66 slow_hit_count: 11, fast_hit_count: 12 */
    for (int j = 1; j <= 3; j++) /* line 67 slow_hit_count: 44, fast_hit_count: 48 */
      A[1][4 - j] = (0LL + A[1][4 - j] + primeTable[j][primes[i]]) % (mod - 1); /* line 68 slow_hit_count: 33, fast_hit_count: 36 */
    A = A * trans; /* line 69 slow_hit_count: 11, fast_hit_count: 12 */
    ans = 1LL * ans * quick_pow(primes[i], A[1][1]) % mod; /* line 70 slow_hit_count: 11, fast_hit_count: 12 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%lld\n", 1LL * ans * quick_pow(quick_pow(c, mod - 2), n) % mod); /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 74 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided C code and the hit count data for the slow and fast inputs, let's analyze and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Factorization Function (`factorize`)**:
   - The function `factorize` is called multiple times, specifically in the loops inside `main` (lines 62, 63).
   - Hit count analysis shows significant differences between the slow and fast inputs, particularly in the loop at line 47. 
   - For the slow input, the hit count at line 47 is 79855 compared to 7987 for the fast input, indicating the factorization process involves many more iterations for the slow input.

2. **Prime Number Handling**:
   - The number of primes and operations involving primes significantly differ between inputs. 
   - Line 68 also has a higher hit count for the slow input, indicating more prime-related operations.

3. **Matrix Exponentiation (`matrix::operator^`)**:
   - While the matrix exponentiation process doesn’t show a significant difference in line-level hit counts between fast and slow, it’s an inherently expensive operation due to its complexity (involving multiple matrix multiplications).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the hit count analysis and the nature of the operations, we can derive the following performance-characterizing invariants:

1. **Invariant 1: High Factorization Overhead**:
   - Natural Language Description: "If the initial values (f_1, f_2, f_3, c) have a high number of small prime factors, the factorization step may become expensive, particularly when these values lead to a large number of unique primes. This results in increased computation time due to repeated factorization operations and handling of a larger set of primes."

2. **Invariant 2: Large Set of Unique Primes**:
   - Natural Language Description: "When the number of unique prime factors extracted from the inputs (f_1, f_2, f_3, c) is large, it can lead to increased computation time during matrix transformations and power calculations. This is especially true when the prime factors need to be exponentiated multiple times within the matrix exponentiation logic."

3. **Invariant 3: Matrix Exponentiation Complexity**:
   - Natural Language Description: "Although matrix exponentiation is generally efficient, it can become a bottleneck if the involved matrices and primes are numerous, leading to repeated costly operations that multiply their effects. This can be exacerbated by large powers applied to matrices derived from numerous primes."

### Summary

The slow execution is primarily triggered by the complexity introduced by factorizing large numbers with many small prime factors and the subsequent handling of these factors in matrix operations. The increase in unique primes leads to more iterations in loops that manage these factors, causing the slowdown. The derived invariants focus on these patterns and can help identify scenarios where similar slowdowns might occur, independent of specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

Solution (C++ code):
{solution}


assistant: To implement the performance-characterizing invariants as runtime checks and integrate them into the provided program, we'll follow Phase 3 and Phase 4 as outlined. 

### Phase 3: Implement the Natural Language Invariants as C++ Checks

Let's translate the natural language invariants into C++ code:

1. **High Factorization Overhead**:
   - **Natural Language**: "If the initial values (f_1, f_2, f_3, c) have a high number of small prime factors, the factorization step may become expensive, particularly when these values lead to a large number of unique primes."
   - **C++ Check**:
   ```cpp
   void check_high_factorization_overhead(const vector<int>& primes) {
       if (primes.size() > 1000) {  // Arbitrary large threshold for demonstration
           cerr << "Warning: High factorization overhead due to numerous unique primes!" << endl;
           abort();
       }
   }
   ```

2. **Large Set of Unique Primes**:
   - **Natural Language**: "When the number of unique prime factors extracted from the inputs is large, it can lead to increased computation time during matrix transformations and power calculations."
   - **C++ Check**:
   ```cpp
   void check_large_unique_primes(const vector<int>& primes) {
       if (primes.size() > 100) {  // Arbitrary threshold for demonstration
           cerr << "Warning: Large set of unique primes detected!" << endl;
           abort();
       }
   }
   ```

3. **Matrix Exponentiation Complexity**:
   - **Natural Language**: "Matrix exponentiation can become a bottleneck if the involved matrices and primes are numerous."
   - **C++ Check**:
   ```cpp
   void check_matrix_exponentiation_complexity(const matrix& trans) {
       // This is an exemplification; we assume complexity occurs with large matrix transformations
       int complexity_metric = trans.mat[1][1];  // Simplified proxy for complexity
       if (complexity_metric > 10000) {  // Arbitrary threshold for demonstration
           cerr << "Warning: Complex matrix exponentiation detected!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checks into the Program

Now, let's integrate these checks into the provided C++ code. We'll place the checks after reading inputs and before the main computation begins to avoid performance overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7;
long long n;
int f[4], c;
map<int, int> primeTable[5];
vector<int> primes;

// Checkers for performance invariants
void check_high_factorization_overhead(const vector<int>& primes) {
    if (primes.size() > 1000) {
        cerr << "Warning: High factorization overhead due to numerous unique primes!" << endl;
        abort();
    }
}

void check_large_unique_primes(const vector<int>& primes) {
    if (primes.size() > 100) {
        cerr << "Warning: Large set of unique primes detected!" << endl;
        abort();
    }
}

void check_matrix_exponentiation_complexity(const matrix& trans) {
    int complexity_metric = trans.mat[1][1]; // Simplified proxy for complexity
    if (complexity_metric > 10000) {
        cerr << "Warning: Complex matrix exponentiation detected!" << endl;
        abort();
    }
}

int quick_pow(int bas, long long tim) {
  tim %= (mod - 1);
  int ret = 1;
  while (tim) {
    if (tim & 1) ret = 1LL * ret * bas % mod;
    bas = 1LL * bas * bas % mod;
    tim >>= 1;
  }
  return ret;
}

struct matrix {
  int mat[5][5];
  void clear() { memset(mat, 0, sizeof(mat)); }
  int *operator[](const int &rhs) { return mat[rhs]; }
  matrix operator*(const matrix &rhs) {
    matrix ret;
    ret.clear();
    for (int i = 1; i <= 4; i++)
      for (int j = 1; j <= 4; j++)
        for (int k = 1; k <= 4; k++)
          ret[i][j] =
              (1LL * ret[i][j] + 1LL * mat[i][k] * rhs.mat[k][j] % (mod - 1)) %
              (mod - 1);
    return ret;
  }
  matrix operator^(const long long &rhs) {
    long long tim = rhs;
    matrix ret, bas = *this;
    ret.clear();
    for (int i = 1; i <= 4; i++) ret[i][i] = 1;
    while (tim) {
      if (tim & 1LL) ret = ret * bas;
      bas = bas * bas;
      tim >>= 1LL;
    }
    return ret;
  }
} trans, A;

void factorize(int x, int org) {
  for (int i = 2; 1LL * i * i <= x; i++) {
    if (x % i == 0) primes.push_back(i);
    while (x % i == 0) primeTable[org][i]++, x /= i;
  }
  if (x != 1) primes.push_back(x), primeTable[org][x]++;
  sort(primes.begin(), primes.end());
  primes.erase(unique(primes.begin(), primes.end()), primes.end());
}

int main() {
  trans[1][1] = trans[2][1] = trans[3][1] = 1;
  trans[1][2] = trans[2][3] = trans[3][4] = 1;
  scanf("%lld%d%d%d%d", &n, &f[1], &f[2], &f[3], &c);
  
  // Check performance-related invariants
  check_high_factorization_overhead(primes);
  check_large_unique_primes(primes);

  trans = trans ^ (n - 3);
  check_matrix_exponentiation_complexity(trans);

  int ans = 1;
  for (int i = 1; i <= 3; i++) {
    factorize(f[i], i);
    for (int d = 1; d <= i; d++) factorize(c, i);
  }
  for (int i = 0, siz = primes.size(); i < siz; i++) {
    A.clear();
    for (int j = 1; j <= 3; j++)
      A[1][4 - j] = (0LL + A[1][4 - j] + primeTable[j][primes[i]]) % (mod - 1);
    A = A * trans;
    ans = 1LL * ans * quick_pow(primes[i], A[1][1]) % mod;
  }
  printf("%lld\n", 1LL * ans * quick_pow(quick_pow(c, mod - 2), n) % mod);
  return 0;
}
```

**Explanation:**
- The checks are placed right after the input is read and before the main loop to avoid affecting performance during computations.
- Each check validates conditions that can potentially lead to performance degradation based on the derived invariants.
- The checks use arbitrary thresholds to demonstrate the potential conditions under which performance issues are flagged. Adjust these as needed for specific cases.

