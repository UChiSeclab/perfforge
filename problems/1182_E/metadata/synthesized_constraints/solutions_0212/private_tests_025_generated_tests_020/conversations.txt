system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7;
class matrix {
 public:
  int row, col;
  std::vector<std::vector<int>> num;
  matrix(int row, int col, int defaultValue = 0) {
    this->num =
        std::vector<std::vector<int>>(row, std::vector<int>(col, defaultValue));
    this->row = row;
    this->col = col;
  }
  matrix(std::vector<std::vector<int>> num) {
    this->num = num;
    this->row = this->num.size();
    this->col = this->num[0].size();
  }
  matrix operator*(matrix &another) {
    if (this->col != another.row) {
      printf("Wrong size: %d*%d X %d*%d\n", this->row, this->col, another.row,
             another.col);
      throw "Wrong size";
    }
    matrix newone(this->row, another.col);
    for (int r = 0; r < newone.row; r++) {
      for (int c = 0; c < newone.col; c++) {
        for (int k = 0; k < this->col; k++) {
          newone.num[r][c] +=
              1ll * this->num[r][k] * another.num[k][c] % (mod - 1);
          newone.num[r][c] %= mod - 1;
        }
      }
    }
    return newone;
  }
  matrix operator^(long long x) {
    if (x == 0) {
      printf("Not implemented yet.\n");
      throw "Not implemented";
    } else if (x == 1) {
      return *this;
    } else {
      matrix halfpower = (*this) ^ (x / 2);
      if (x % 2 == 0)
        return halfpower * halfpower;
      else
        return halfpower * halfpower * (*this);
    }
  }
};
std::vector<int> primeDecomposition(int x) {
  std::vector<int> answer;
  for (int i = 2; i * i <= x; i++) {
    if (x % i == 0) {
      answer.push_back(i);
      while (x % i == 0) x /= i;
    }
  }
  if (x > 1) answer.push_back(x);
  return answer;
}
int power(int a, long long b) {
  if (b == 0) return 1;
  int half = power(a, b / 2);
  if (b % 2 == 0)
    return 1ll * half * half % mod;
  else
    return 1ll * half * half % mod * a % mod;
}
int main() {
  long long n;
  int f[4], c, answer(1);
  scanf("%lld%d%d%d%d", &n, &f[1], &f[2], &f[3], &c);
  matrix baseMatrix({{1, 1, 1}, {1, 0, 0}, {0, 1, 0}});
  baseMatrix = baseMatrix ^ (n - 3);
  std::set<int> primeSet;
  for (int t : primeDecomposition(c)) primeSet.insert(t);
  for (int i = 1; i <= 3; i++)
    for (int t : primeDecomposition(f[i])) primeSet.insert(t);
  for (int t : primeSet) {
    matrix countMatrix(3, 1);
    for (int i = 0; i < 3; i++) {
      for (int k = f[i + 1]; k % t == 0; k /= t)
        countMatrix.num[3 - i - 1][0]++;
      for (int k = c; k % t == 0; k /= t)
        countMatrix.num[3 - i - 1][0] += i + 1;
    }
    countMatrix = baseMatrix * countMatrix;
    answer = 1ll * answer * power(t, countMatrix.num[0][0]) % mod;
  }
  answer = 1ll * answer * power(power(c, mod - 2), n) % mod;
  printf("%d\n", answer);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

142310071407520708 617832726 668567895 297892739 643574075


(G.2) Fast Input

142310071407520708 617832726 668567895 25523540 643574075


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
class matrix { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
 public: /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  int row, col; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  std::vector<std::vector<int>> num; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  matrix(int row, int col, int defaultValue = 0) { /* line 8 slow_hit_count: 102, fast_hit_count: 104 */
    this->num = /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
        std::vector<std::vector<int>>(row, std::vector<int>(col, defaultValue)); /* line 10 slow_hit_count: 102, fast_hit_count: 104 */
    this->row = row; /* line 11 slow_hit_count: 102, fast_hit_count: 104 */
    this->col = col; /* line 12 slow_hit_count: 102, fast_hit_count: 104 */
  } /* line 13 slow_hit_count: 102, fast_hit_count: 104 */
  matrix(std::vector<std::vector<int>> num) { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    this->num = num; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    this->row = this->num.size(); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
    this->col = this->num[0].size(); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  matrix operator*(matrix &another) { /* line 19 slow_hit_count: 92, fast_hit_count: 93 */
    if (this->col != another.row) { /* line 20 slow_hit_count: 92, fast_hit_count: 93 */
      printf("Wrong size: %d*%d X %d*%d\n", this->row, this->col, another.row, /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
             another.col); /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      throw "Wrong size"; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    matrix newone(this->row, another.col); /* line 25 slow_hit_count: 92, fast_hit_count: 93 */
    for (int r = 0; r < newone.row; r++) { /* line 26 slow_hit_count: 368, fast_hit_count: 372 */
      for (int c = 0; c < newone.col; c++) { /* line 27 slow_hit_count: 1044, fast_hit_count: 1050 */
        for (int k = 0; k < this->col; k++) { /* line 28 slow_hit_count: 3072, fast_hit_count: 3084 */
          newone.num[r][c] += /* line 29 slow_hit_count: 2304, fast_hit_count: 2313 */
              1ll * this->num[r][k] * another.num[k][c] % (mod - 1); /* line 30 slow_hit_count: 2304, fast_hit_count: 2313 */
          newone.num[r][c] %= mod - 1; /* line 31 slow_hit_count: 2304, fast_hit_count: 2313 */
        } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    return newone; /* line 35 slow_hit_count: 92, fast_hit_count: 93 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  matrix operator^(long long x) { /* line 37 slow_hit_count: 57, fast_hit_count: 57 */
    if (x == 0) { /* line 38 slow_hit_count: 57, fast_hit_count: 57 */
      printf("Not implemented yet.\n"); /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      throw "Not implemented"; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    } else if (x == 1) { /* line 41 slow_hit_count: 57, fast_hit_count: 57 */
      return *this; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
    } else { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
      matrix halfpower = (*this) ^ (x / 2); /* line 44 slow_hit_count: 112, fast_hit_count: 112 */
      if (x % 2 == 0) /* line 45 slow_hit_count: 56, fast_hit_count: 56 */
        return halfpower * halfpower; /* line 46 slow_hit_count: 30, fast_hit_count: 30 */
      else /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
        return halfpower * halfpower * (*this); /* line 48 slow_hit_count: 52, fast_hit_count: 52 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
std::vector<int> primeDecomposition(int x) { /* line 52 slow_hit_count: 4, fast_hit_count: 4 */
  std::vector<int> answer; /* line 53 slow_hit_count: 4, fast_hit_count: 4 */
  for (int i = 2; i * i <= x; i++) { /* line 54 slow_hit_count: 26507, fast_hit_count: 9324 */
    if (x % i == 0) { /* line 55 slow_hit_count: 26503, fast_hit_count: 9320 */
      answer.push_back(i); /* line 56 slow_hit_count: 8, fast_hit_count: 12 */
      while (x % i == 0) x /= i; /* line 57 slow_hit_count: 17, fast_hit_count: 26 */
    } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  if (x > 1) answer.push_back(x); /* line 60 slow_hit_count: 4, fast_hit_count: 4 */
  return answer; /* line 61 slow_hit_count: 4, fast_hit_count: 4 */
} /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
int power(int a, long long b) { /* line 63 slow_hit_count: 392, fast_hit_count: 419 */
  if (b == 0) return 1; /* line 64 slow_hit_count: 392, fast_hit_count: 419 */
  int half = power(a, b / 2); /* line 65 slow_hit_count: 380, fast_hit_count: 406 */
  if (b % 2 == 0) /* line 66 slow_hit_count: 380, fast_hit_count: 406 */
    return 1ll * half * half % mod; /* line 67 slow_hit_count: 182, fast_hit_count: 195 */
  else /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
    return 1ll * half * half % mod * a % mod; /* line 69 slow_hit_count: 198, fast_hit_count: 211 */
} /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
  long long n; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  int f[4], c, answer(1); /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%lld%d%d%d%d", &n, &f[1], &f[2], &f[3], &c); /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  matrix baseMatrix({{1, 1, 1}, {1, 0, 0}, {0, 1, 0}}); /* line 75 slow_hit_count: 7, fast_hit_count: 7 */
  baseMatrix = baseMatrix ^ (n - 3); /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  std::set<int> primeSet; /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
  for (int t : primeDecomposition(c)) primeSet.insert(t); /* line 78 slow_hit_count: 3, fast_hit_count: 3 */
  for (int i = 1; i <= 3; i++) /* line 79 slow_hit_count: 4, fast_hit_count: 4 */
    for (int t : primeDecomposition(f[i])) primeSet.insert(t); /* line 80 slow_hit_count: 13, fast_hit_count: 17 */
  for (int t : primeSet) { /* line 81 slow_hit_count: 11, fast_hit_count: 12 */
    matrix countMatrix(3, 1); /* line 82 slow_hit_count: 10, fast_hit_count: 11 */
    for (int i = 0; i < 3; i++) { /* line 83 slow_hit_count: 40, fast_hit_count: 44 */
      for (int k = f[i + 1]; k % t == 0; k /= t) /* line 84 slow_hit_count: 40, fast_hit_count: 48 */
        countMatrix.num[3 - i - 1][0]++; /* line 85 slow_hit_count: 10, fast_hit_count: 15 */
      for (int k = c; k % t == 0; k /= t) /* line 86 slow_hit_count: 39, fast_hit_count: 42 */
        countMatrix.num[3 - i - 1][0] += i + 1; /* line 87 slow_hit_count: 9, fast_hit_count: 9 */
    } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
    countMatrix = baseMatrix * countMatrix; /* line 89 slow_hit_count: 10, fast_hit_count: 11 */
    answer = 1ll * answer * power(t, countMatrix.num[0][0]) % mod; /* line 90 slow_hit_count: 10, fast_hit_count: 11 */
  } /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
  answer = 1ll * answer * power(power(c, mod - 2), n) % mod; /* line 92 slow_hit_count: 1, fast_hit_count: 1 */
  printf("%d\n", answer); /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 94 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 95 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided data, let's analyze the C code to understand why the program runs slower with certain inputs. We'll derive performance-characterizing invariants based on this analysis.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Matrix Multiplication and Exponentiation**:
   - The line numbers 29-31, 46, and 48, which are involved in matrix multiplication and exponentiation, have high hit counts and are executed more frequently.
   - Matrix multiplication (`operator*`) and exponentiation (`operator^`) are computationally expensive operations.
   - The recursive nature of `operator^` can lead to a significant increase in executions, especially when dealing with large powers.

2. **Prime Decomposition**:
   - Lines 54-60, responsible for prime decomposition, are hit significantly more in the slow input.
   - This indicates that prime factorization, which is inherently non-trivial, might be disproportionately costly for certain values of `c` or `f[i]`.

3. **Nested Loops in the Main Function**:
   - The nested loops inside the main function, especially in lines 84 and 86, have slightly higher hit counts for the slow input.
   - These lines decompose `f[i]` and `c` over primes and accumulate into `countMatrix`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some potential performance-characterizing invariants that explain when the code might slow down:

1. **Invariant on Matrix Exponentiation**:
   - **Natural language description**: "The program may slow down when matrix exponentiation is required for large values of `n`, especially when multiple matrix multiplications are involved."
   - This is due to the recursive depth and the frequency of matrix multiplications, which grow with the size of `n`.

2. **Invariant on Prime Decomposition**:
   - **Natural language description**: "Performance degrades when the values of `c` or `f[i]` have a large number of small prime factors, leading to repeated computations in prime decomposition."
   - Since prime decomposition can be repetitive and expensive, having many small factors significantly increases computation.

3. **Invariant on Combined Complexity**:
   - **Natural language description**: "A slowdown occurs when the combined complexity of matrix operations and prime factorization increase, particularly when both `n` is large and the input values contain many small factors."
   - This combines the two previous invariants and highlights scenarios where both matrix operations and prime decomposition are costly.

These invariants help to identify input conditions that can lead to performance bottlenecks. They focus on the nature of the problem rather than relying on specific input values, making them applicable to various scenarios within the given constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants as C++ Checkers

Let's implement the checker functions based on the performance-characterizing invariants derived previously:

1. **Invariant on Matrix Exponentiation**:
   ```cpp
   void check_matrix_exponentiation_invariant(long long n) {
       // Check if n is particularly large, indicating that matrix exponentiation is involved.
       if (n > 1e17) { // Arbitrary threshold for detecting potential slowdown
           cerr << "Warning: Potential slowdown due to large matrix exponentiation." << endl;
           abort();
       }
   }
   ```

2. **Invariant on Prime Decomposition**:
   ```cpp
   void check_prime_decomposition_invariant(int c, int f1, int f2, int f3) {
       // Check if the values have many small factors, which could slow down prime decomposition
       int factors[] = {c, f1, f2, f3};
       for (int factor : factors) {
           int count = 0;
           for (int i = 2; i <= 1000 && factor > 1; ++i) { // Arbitrary small number limit
               while (factor % i == 0) {
                   factor /= i;
                   count++;
               }
           }
           if (count > 10) { // Threshold for too many small factors
               cerr << "Warning: Potential slowdown due to many small prime factors." << endl;
               abort();
           }
       }
   }
   ```

3. **Invariant on Combined Complexity**:
   ```cpp
   void check_combined_complexity_invariant(long long n, int c, int f1, int f2, int f3) {
       // Check combined conditions for potential slowdown
       if (n > 1e17 && (c % 2 == 0 || f1 % 3 == 0 || f2 % 5 == 0 || f3 % 7 == 0)) {
           cerr << "Warning: Combined complexity conditions triggered slowdown." << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Original Program

Now, let's integrate these checks into the original C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int mod = 1e9 + 7;

class matrix {
public:
    int row, col;
    std::vector<std::vector<int>> num;
    matrix(int row, int col, int defaultValue = 0) {
        this->num = std::vector<std::vector<int>>(row, std::vector<int>(col, defaultValue));
        this->row = row;
        this->col = col;
    }
    matrix(std::vector<std::vector<int>> num) {
        this->num = num;
        this->row = this->num.size();
        this->col = this->num[0].size();
    }
    matrix operator*(matrix &another) {
        if (this->col != another.row) {
            printf("Wrong size: %d*%d X %d*%d\n", this->row, this->col, another.row, another.col);
            throw "Wrong size";
        }
        matrix newone(this->row, another.col);
        for (int r = 0; r < newone.row; r++) {
            for (int c = 0; c < newone.col; c++) {
                for (int k = 0; k < this->col; k++) {
                    newone.num[r][c] += 1ll * this->num[r][k] * another.num[k][c] % (mod - 1);
                    newone.num[r][c] %= mod - 1;
                }
            }
        }
        return newone;
    }
    matrix operator^(long long x) {
        if (x == 0) {
            printf("Not implemented yet.\n");
            throw "Not implemented";
        } else if (x == 1) {
            return *this;
        } else {
            matrix halfpower = (*this) ^ (x / 2);
            if (x % 2 == 0)
                return halfpower * halfpower;
            else
                return halfpower * halfpower * (*this);
        }
    }
};

std::vector<int> primeDecomposition(int x) {
    std::vector<int> answer;
    for (int i = 2; i * i <= x; i++) {
        if (x % i == 0) {
            answer.push_back(i);
            while (x % i == 0) x /= i;
        }
    }
    if (x > 1) answer.push_back(x);
    return answer;
}

int power(int a, long long b) {
    if (b == 0) return 1;
    int half = power(a, b / 2);
    if (b % 2 == 0)
        return 1ll * half * half % mod;
    else
        return 1ll * half * half % mod * a % mod;
}

// Inserted checkers for performance invariants

void check_matrix_exponentiation_invariant(long long n) {
    if (n > 1e17) {
        cerr << "Warning: Potential slowdown due to large matrix exponentiation." << endl;
        abort();
    }
}

void check_prime_decomposition_invariant(int c, int f1, int f2, int f3) {
    int factors[] = {c, f1, f2, f3};
    for (int factor : factors) {
        int count = 0;
        for (int i = 2; i <= 1000 && factor > 1; ++i) {
            while (factor % i == 0) {
                factor /= i;
                count++;
            }
        }
        if (count > 10) {
            cerr << "Warning: Potential slowdown due to many small prime factors." << endl;
            abort();
        }
    }
}

void check_combined_complexity_invariant(long long n, int c, int f1, int f2, int f3) {
    if (n > 1e17 && (c % 2 == 0 || f1 % 3 == 0 || f2 % 5 == 0 || f3 % 7 == 0)) {
        cerr << "Warning: Combined complexity conditions triggered slowdown." << endl;
        abort();
    }
}

int main() {
    long long n;
    int f[4], c, answer(1);
    scanf("%lld%d%d%d%d", &n, &f[1], &f[2], &f[3], &c);

    // Perform checks based on the performance-characterizing invariants
    check_matrix_exponentiation_invariant(n);
    check_prime_decomposition_invariant(c, f[1], f[2], f[3]);
    check_combined_complexity_invariant(n, c, f[1], f[2], f[3]);

    matrix baseMatrix({{1, 1, 1}, {1, 0, 0}, {0, 1, 0}});
    baseMatrix = baseMatrix ^ (n - 3);

    std::set<int> primeSet;
    for (int t : primeDecomposition(c)) primeSet.insert(t);
    for (int i = 1; i <= 3; i++)
        for (int t : primeDecomposition(f[i])) primeSet.insert(t);
    for (int t : primeSet) {
        matrix countMatrix(3, 1);
        for (int i = 0; i < 3; i++) {
            for (int k = f[i + 1]; k % t == 0; k /= t)
                countMatrix.num[3 - i - 1][0]++;
            for (int k = c; k % t == 0; k /= t)
                countMatrix.num[3 - i - 1][0] += i + 1;
        }
        countMatrix = baseMatrix * countMatrix;
        answer = 1ll * answer * power(t, countMatrix.num[0][0]) % mod;
    }
    answer = 1ll * answer * power(power(c, mod - 2), n) % mod;
    printf("%d\n", answer);
    return 0;
}
```

**Notes:**
- Checkers are inserted right after the input is read, as this is the most effective placement that does not interfere with the main computational flow.
- These checkers use conditions based on the potential for slowdown as discussed, leveraging thresholds where necessary to ensure they capture likely performance bottlenecks.

