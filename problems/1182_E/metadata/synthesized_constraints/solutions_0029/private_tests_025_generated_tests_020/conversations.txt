system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const long long mod1 = 1e9 + 6;
const long long mod = 1e9 + 7;
using namespace std;
long long ar[4], mul[4][4][62], ax[4][4], ax1[4][4], ar1[4];
map<long long, long long> lis, lis1[4], xd;
long long binpow(long long x, long long y) {
  long long tich = 1;
  while (y) {
    if ((y & 1)) {
      tich *= x;
      tich %= mod;
    }
    x *= x;
    x %= mod;
    y >>= 1;
  }
  return tich;
}
signed main() {
  long long a, b, c, d, num, i, j, k, l, tich = 1, wow, cac;
  cin >> num >> ar[1] >> ar[2] >> ar[3] >> c;
  cac = c;
  mul[1][3][0] = 1;
  mul[2][3][0] = 1;
  mul[3][3][0] = 1;
  mul[3][2][0] = 1;
  mul[2][1][0] = 1;
  for (i = 1; i <= 60; i++) {
    for (j = 1; j <= 3; j++) {
      for (k = 1; k <= 3; k++) {
        for (l = 1; l <= 3; l++) {
          mul[j][k][i] += mul[j][l][i - 1] * mul[l][k][i - 1];
          mul[j][k][i] %= mod1;
        }
      }
    }
  }
  for (i = 2; i * i <= cac; i++) {
    if (cac % i == 0) {
      lis[i]++;
      while (cac % i == 0) {
        cac /= i;
        xd[i]++;
      }
    }
  }
  if (cac > 1) {
    xd[cac]++;
    lis[cac]++;
  }
  for (i = 1; i <= 3; i++) {
    for (j = 2; j * j <= ar[i]; j++) {
      if (ar[i] % j == 0) {
        lis[j]++;
        while (ar[i] % j == 0) {
          ar[i] /= j;
          lis1[i][j]++;
        }
      }
    }
    if (ar[i] != 1) {
      lis1[i][ar[i]]++;
      lis[ar[i]]++;
    }
  }
  ax[1][1] = 1;
  ax[2][2] = 1;
  ax[3][3] = 1;
  wow = num - 3;
  for (i = 60; i >= 0; i--) {
    if (wow >= (1ll << i)) {
      wow -= (1ll << i);
      for (j = 1; j <= 3; j++) {
        for (k = 1; k <= 3; k++) {
          ax1[j][k] = ax[j][k];
          ax[j][k] = 0;
        }
      }
      for (j = 1; j <= 3; j++) {
        for (k = 1; k <= 3; k++) {
          for (l = 1; l <= 3; l++) {
            ax[j][k] += ax1[j][l] * mul[l][k][i];
            ax[j][k] %= mod1;
          }
        }
      }
    }
  }
  map<long long, long long>::iterator ite = lis.begin();
  while (ite != lis.end()) {
    for (i = 1; i <= 3; i++) {
      ar1[i] = xd[ite->first] * i + lis1[i][ite->first];
      ar[i] = 0;
    }
    for (i = 1; i <= 3; i++) {
      for (j = 1; j <= 3; j++) {
        ar[i] += ar1[j] * ax[j][i];
        ar[i] %= mod1;
      }
    }
    tich *= binpow(ite->first, ar[3]);
    tich %= mod;
    ite++;
  }
  cout << (tich * binpow(binpow(c, num), mod - 2)) % mod;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

142310071407520708 617832726 668567895 297892739 643574075


(G.2) Fast Input

142310071407520708 617832726 668567895 25523540 643574075


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod1 = 1e9 + 6; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long ar[4], mul[4][4][62], ax[4][4], ax1[4][4], ar1[4]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
map<long long, long long> lis, lis1[4], xd; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long binpow(long long x, long long y) { /* line 7 slow_hit_count: 12, fast_hit_count: 13 */
  long long tich = 1; /* line 8 slow_hit_count: 12, fast_hit_count: 13 */
  while (y) { /* line 9 slow_hit_count: 392, fast_hit_count: 419 */
    if ((y & 1)) { /* line 10 slow_hit_count: 380, fast_hit_count: 406 */
      tich *= x; /* line 11 slow_hit_count: 198, fast_hit_count: 211 */
      tich %= mod; /* line 12 slow_hit_count: 198, fast_hit_count: 211 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    x *= x; /* line 14 slow_hit_count: 380, fast_hit_count: 406 */
    x %= mod; /* line 15 slow_hit_count: 380, fast_hit_count: 406 */
    y >>= 1; /* line 16 slow_hit_count: 380, fast_hit_count: 406 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  return tich; /* line 18 slow_hit_count: 12, fast_hit_count: 13 */
} /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  long long a, b, c, d, num, i, j, k, l, tich = 1, wow, cac; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> num >> ar[1] >> ar[2] >> ar[3] >> c; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  cac = c; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  mul[1][3][0] = 1; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  mul[2][3][0] = 1; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  mul[3][3][0] = 1; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  mul[3][2][0] = 1; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  mul[2][1][0] = 1; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 1; i <= 60; i++) { /* line 29 slow_hit_count: 61, fast_hit_count: 61 */
    for (j = 1; j <= 3; j++) { /* line 30 slow_hit_count: 240, fast_hit_count: 240 */
      for (k = 1; k <= 3; k++) { /* line 31 slow_hit_count: 720, fast_hit_count: 720 */
        for (l = 1; l <= 3; l++) { /* line 32 slow_hit_count: 2160, fast_hit_count: 2160 */
          mul[j][k][i] += mul[j][l][i - 1] * mul[l][k][i - 1]; /* line 33 slow_hit_count: 1620, fast_hit_count: 1620 */
          mul[j][k][i] %= mod1; /* line 34 slow_hit_count: 1620, fast_hit_count: 1620 */
        } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 2; i * i <= cac; i++) { /* line 39 slow_hit_count: 5073, fast_hit_count: 5073 */
    if (cac % i == 0) { /* line 40 slow_hit_count: 5072, fast_hit_count: 5072 */
      lis[i]++; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
      while (cac % i == 0) { /* line 42 slow_hit_count: 3, fast_hit_count: 3 */
        cac /= i; /* line 43 slow_hit_count: 2, fast_hit_count: 2 */
        xd[i]++; /* line 44 slow_hit_count: 2, fast_hit_count: 2 */
      } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  if (cac > 1) { /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
    xd[cac]++; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
    lis[cac]++; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 1; i <= 3; i++) { /* line 52 slow_hit_count: 4, fast_hit_count: 4 */
    for (j = 2; j * j <= ar[i]; j++) { /* line 53 slow_hit_count: 21434, fast_hit_count: 4251 */
      if (ar[i] % j == 0) { /* line 54 slow_hit_count: 21431, fast_hit_count: 4248 */
        lis[j]++; /* line 55 slow_hit_count: 7, fast_hit_count: 11 */
        while (ar[i] % j == 0) { /* line 56 slow_hit_count: 14, fast_hit_count: 23 */
          ar[i] /= j; /* line 57 slow_hit_count: 7, fast_hit_count: 12 */
          lis1[i][j]++; /* line 58 slow_hit_count: 7, fast_hit_count: 12 */
        } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    if (ar[i] != 1) { /* line 62 slow_hit_count: 3, fast_hit_count: 3 */
      lis1[i][ar[i]]++; /* line 63 slow_hit_count: 3, fast_hit_count: 3 */
      lis[ar[i]]++; /* line 64 slow_hit_count: 3, fast_hit_count: 3 */
    } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  ax[1][1] = 1; /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  ax[2][2] = 1; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  ax[3][3] = 1; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  wow = num - 3; /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 60; i >= 0; i--) { /* line 71 slow_hit_count: 62, fast_hit_count: 62 */
    if (wow >= (1ll << i)) { /* line 72 slow_hit_count: 61, fast_hit_count: 61 */
      wow -= (1ll << i); /* line 73 slow_hit_count: 27, fast_hit_count: 27 */
      for (j = 1; j <= 3; j++) { /* line 74 slow_hit_count: 108, fast_hit_count: 108 */
        for (k = 1; k <= 3; k++) { /* line 75 slow_hit_count: 324, fast_hit_count: 324 */
          ax1[j][k] = ax[j][k]; /* line 76 slow_hit_count: 243, fast_hit_count: 243 */
          ax[j][k] = 0; /* line 77 slow_hit_count: 243, fast_hit_count: 243 */
        } /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
      for (j = 1; j <= 3; j++) { /* line 80 slow_hit_count: 108, fast_hit_count: 108 */
        for (k = 1; k <= 3; k++) { /* line 81 slow_hit_count: 324, fast_hit_count: 324 */
          for (l = 1; l <= 3; l++) { /* line 82 slow_hit_count: 972, fast_hit_count: 972 */
            ax[j][k] += ax1[j][l] * mul[l][k][i]; /* line 83 slow_hit_count: 729, fast_hit_count: 729 */
            ax[j][k] %= mod1; /* line 84 slow_hit_count: 729, fast_hit_count: 729 */
          } /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
  map<long long, long long>::iterator ite = lis.begin(); /* line 90 slow_hit_count: 1, fast_hit_count: 1 */
  while (ite != lis.end()) { /* line 91 slow_hit_count: 11, fast_hit_count: 12 */
    for (i = 1; i <= 3; i++) { /* line 92 slow_hit_count: 40, fast_hit_count: 44 */
      ar1[i] = xd[ite->first] * i + lis1[i][ite->first]; /* line 93 slow_hit_count: 30, fast_hit_count: 33 */
      ar[i] = 0; /* line 94 slow_hit_count: 30, fast_hit_count: 33 */
    } /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
    for (i = 1; i <= 3; i++) { /* line 96 slow_hit_count: 40, fast_hit_count: 44 */
      for (j = 1; j <= 3; j++) { /* line 97 slow_hit_count: 120, fast_hit_count: 132 */
        ar[i] += ar1[j] * ax[j][i]; /* line 98 slow_hit_count: 90, fast_hit_count: 99 */
        ar[i] %= mod1; /* line 99 slow_hit_count: 90, fast_hit_count: 99 */
      } /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
    tich *= binpow(ite->first, ar[3]); /* line 102 slow_hit_count: 10, fast_hit_count: 11 */
    tich %= mod; /* line 103 slow_hit_count: 10, fast_hit_count: 11 */
    ite++; /* line 104 slow_hit_count: 10, fast_hit_count: 11 */
  } /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
  cout << (tich * binpow(binpow(c, num), mod - 2)) % mod; /* line 106 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 107 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottleneck of the given C program when run with the provided slow input, we need to compare the line-level hit counts between the fast and slow inputs. Then, we'll derive natural language performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line 53 (`for (j = 2; j * j <= ar[i]; j++)`):** This line exhibits a substantial increase in hit count for the slow input compared to the fast input (21434 vs. 4251). This suggests that the loop iterates significantly more times with the slow input, likely due to the properties of `ar[i]` values.

2. **Lines 54-58:** These lines are within the nested loop that checks divisibility and factors of `ar[i]`. The high hit counts indicate that the factorization process for `ar[i]` is much more complex in the slow input, indicating numbers with more or larger prime factors.

3. **Function `binpow` (lines 9-18):** The `binpow` function is called multiple times, but the difference in hit counts is not as pronounced here (392 vs. 419). However, its call from line 102 inside the iterative process suggests it is part of a multiplication and modulus process that could be expensive if invoked with large powers.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following natural language performance-characterizing invariants capture conditions under which the program is likely to slow down:

1. **Invariant 1: Complex Factorization**
   - **Description:** If the initial values of `f_1`, `f_2`, or `f_3` contain large prime factors or are themselves large primes, the program spends excessive time in factorization loops. This complexity is due to increased iterations in the factorization process.
   - **Implementation Insight:** This invariant indicates a potential slowdown when input numbers require lengthy divisibility checks by small factors.

2. **Invariant 2: Expensive Modulus Operations**
   - **Description:** If the intermediate values produced during computation (like powers of `c` and products of `f_i` values) become very large, the repeated application of modulus operations during those computations may slow down execution. This is especially true when `n` is very large, necessitating multiple recursive calculations.
   - **Implementation Insight:** The modulus operations (`x % mod`) are frequently invoked and can become more expensive when dealing with larger numbers, impacting performance.

3. **Invariant 3: Repeated Exponentiation**
   - **Description:** Frequent invocation of the `binpow` function with high exponent values, particularly when calculating large powers of factors, can significantly impact performance. This is exacerbated when `n` approaches its upper limit (close to \(10^{18}\)), leading to deeper exponentiation trees.
   - **Implementation Insight:** The recursive power calculation increases computational cost, especially with large inputs requiring multiple layers of recursion.

These invariants reveal that slowdowns occur primarily due to complex factorization and repeated arithmetic operations involving large numbers, compounded by the recursive nature inherent in the calculation process with large exponents. Addressing these concerns, such as optimizing factorization or using more efficient modulus operations, could help mitigate the identified performance issues.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Invariants in C++

Below are C++ snippets that implement the performance-characterizing invariants derived from the given program.

```cpp
#include <iostream>
#include <cmath>
#include <vector>

void check_factorization_invariant(long long num) {
    // Check for large prime factors or the number itself being a large prime
    for (long long i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            int factor_count = 0;
            while (num % i == 0) {
                num /= i;
                factor_count++;
            }
            if (factor_count > 10) { // Arbitrary threshold for "complex" factorization
                std::cerr << "Warning: Factorization invariant triggered - too many factors for a number!" << std::endl;
                abort();
            }
        }
    }
    if (num > 1) { // num is a prime greater than sqrt of the original number
        if (num > 1e9) { // Arbitrary threshold for large primes
            std::cerr << "Warning: Factorization invariant triggered - number has large prime factor!" << std::endl;
            abort();
        }
    }
}

void check_exponentiation_invariant(long long x, long long y) {
    // Check if exponentiation could be costly due to large y
    if (y > 1000000) { // Arbitrary large threshold for exponent
        std::cerr << "Warning: Exponentiation invariant triggered - large exponent value!" << std::endl;
        abort();
    }
}

void check_large_modulus_operations(long long value) {
    // Check if modulus operations are on excessively large numbers
    if (value > 1e15) { // Arbitrary large threshold for modulus base value
        std::cerr << "Warning: Modulus invariant triggered - large number in modulus operations!" << std::endl;
        abort();
    }
}
```

### Phase 4: Instrument the Original C++ Code

Let's integrate these checks into the C++ program that solves the given problem.

```cpp
#include <bits/stdc++.h>
const long long mod1 = 1e9 + 6;
const long long mod = 1e9 + 7;
using namespace std;

long long ar[4], mul[4][4][62], ax[4][4], ax1[4][4], ar1[4];
map<long long, long long> lis, lis1[4], xd;

long long binpow(long long x, long long y) {
    check_exponentiation_invariant(x, y); // Check for expensive exponentiation
    long long tich = 1;
    while (y) {
        if ((y & 1)) {
            tich *= x;
            tich %= mod;
        }
        x *= x;
        x %= mod;
        y >>= 1;
    }
    return tich;
}

void check_factorization_invariant(long long num) {
    // Check for large prime factors or the number itself being a large prime
    for (long long i = 2; i * i <= num; i++) {
        if (num % i == 0) {
            int factor_count = 0;
            while (num % i == 0) {
                num /= i;
                factor_count++;
            }
            if (factor_count > 10) { // Arbitrary threshold for "complex" factorization
                std::cerr << "Warning: Factorization invariant triggered - too many factors for a number!" << std::endl;
                abort();
            }
        }
    }
    if (num > 1) { // num is a prime greater than sqrt of the original number
        if (num > 1e9) { // Arbitrary threshold for large primes
            std::cerr << "Warning: Factorization invariant triggered - number has large prime factor!" << std::endl;
            abort();
        }
    }
}

void check_large_modulus_operations(long long value) {
    // Check if modulus operations are on excessively large numbers
    if (value > 1e15) { // Arbitrary large threshold for modulus base value
        std::cerr << "Warning: Modulus invariant triggered - large number in modulus operations!" << std::endl;
        abort();
    }
}

signed main() {
    long long a, b, c, d, num, i, j, k, l, tich = 1, wow, cac;
    cin >> num >> ar[1] >> ar[2] >> ar[3] >> c;
    cac = c;

    check_factorization_invariant(ar[1]);
    check_factorization_invariant(ar[2]);
    check_factorization_invariant(ar[3]);

    mul[1][3][0] = 1;
    mul[2][3][0] = 1;
    mul[3][3][0] = 1;
    mul[3][2][0] = 1;
    mul[2][1][0] = 1;
    
    for (i = 1; i <= 60; i++) {
        for (j = 1; j <= 3; j++) {
            for (k = 1; k <= 3; k++) {
                for (l = 1; l <= 3; l++) {
                    mul[j][k][i] += mul[j][l][i - 1] * mul[l][k][i - 1];
                    mul[j][k][i] %= mod1;
                }
            }
        }
    }

    check_large_modulus_operations(cac);

    for (i = 2; i * i <= cac; i++) {
        if (cac % i == 0) {
            lis[i]++;
            while (cac % i == 0) {
                cac /= i;
                xd[i]++;
            }
        }
    }

    if (cac > 1) {
        xd[cac]++;
        lis[cac]++;
    }

    for (i = 1; i <= 3; i++) {
        for (j = 2; j * j <= ar[i]; j++) {
            if (ar[i] % j == 0) {
                lis[j]++;
                while (ar[i] % j == 0) {
                    ar[i] /= j;
                    lis1[i][j]++;
                }
            }
        }
        if (ar[i] != 1) {
            lis1[i][ar[i]]++;
            lis[ar[i]]++;
        }
    }

    ax[1][1] = 1;
    ax[2][2] = 1;
    ax[3][3] = 1;
    wow = num - 3;

    for (i = 60; i >= 0; i--) {
        if (wow >= (1ll << i)) {
            wow -= (1ll << i);
            for (j = 1; j <= 3; j++) {
                for (k = 1; k <= 3; k++) {
                    ax1[j][k] = ax[j][k];
                    ax[j][k] = 0;
                }
            }
            for (j = 1; j <= 3; j++) {
                for (k = 1; k <= 3; k++) {
                    for (l = 1; l <= 3; l++) {
                        ax[j][k] += ax1[j][l] * mul[l][k][i];
                        ax[j][k] %= mod1;
                    }
                }
            }
        }
    }

    map<long long, long long>::iterator ite = lis.begin();

    while (ite != lis.end()) {
        for (i = 1; i <= 3; i++) {
            ar1[i] = xd[ite->first] * i + lis1[i][ite->first];
            ar[i] = 0;
        }
        for (i = 1; i <= 3; i++) {
            for (j = 1; j <= 3; j++) {
                ar[i] += ar1[j] * ax[j][i];
                ar[i] %= mod1;
            }
        }
        tich *= binpow(ite->first, ar[3]);
        tich %= mod;
        ite++;
    }

    cout << (tich * binpow(binpow(c, num), mod - 2)) % mod;
}
```

### Comments on Check Placement
- **`check_factorization_invariant`** is called to detect if initial values involve complex factorization.
- **`check_exponentiation_invariant`** is called within `binpow` to ensure exponents aren't excessively large.
- **`check_large_modulus_operations`** checks if values become too large during modulus operations, potentially slowing down the program. 

These checks help detect conditions that may lead to slowdowns, providing warnings for further investigation if triggered.

