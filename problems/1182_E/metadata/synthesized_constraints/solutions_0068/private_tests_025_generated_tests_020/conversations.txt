system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using ull = unsigned long long;
using ll = long long;
const int C = 3, MOD = 1e9 + 7;
ll n;
int f1, f2, f3, c;
void fct(vector<pair<int, int> > &ans, int x) {
  for (int i = 2; i * i <= x; ++i) {
    if (x % i == 0) {
      int c = 0;
      while (x % i == 0) x /= i, ++c;
      ans.push_back({i, c});
    }
  }
  if (x > 1) {
    ans.push_back({x, 1});
  }
}
void mrg(vector<pair<int, int> > &a, vector<pair<int, int> > &b) {
  map<int, int> c;
  for (auto x : a) c[x.first] += x.second;
  for (auto x : b) c[x.first] += x.second;
  a.clear();
  for (auto x : c) a.push_back(x);
}
inline int add(int a, int b) {
  a += b;
  if (a >= MOD - 1) a -= MOD - 1;
  return a;
}
inline int mul(int a, int b) { return ((ll)a * b) % (MOD - 1); }
int a[3][C][C], rsv = 2;
void mul(int r, int f, int s) {
  for (int i = 0; i < C; ++i) {
    for (int k = 0; k < C; ++k) {
      for (int j = 0; j < C; ++j) {
        a[rsv][i][j] = add(a[rsv][i][j], mul(a[f][i][k], a[s][k][j]));
      }
    }
  }
  for (int i = 0; i < C; ++i) {
    for (int j = 0; j < C; ++j) {
      a[r][i][j] = a[rsv][i][j];
      a[rsv][i][j] = 0;
    }
  }
}
int bpow(int a, int b) {
  int ans = 1;
  while (b != 0) {
    if (b & 1) {
      ans = ((ll)ans * a) % MOD;
    }
    b >>= 1;
    a = ((ll)a * a) % MOD;
  }
  return ans;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0), cout.tie(0);
  cin >> n >> f1 >> f2 >> f3 >> c;
  vector<pair<int, int> > ff1, ff2, ff3, fc;
  fct(ff1, f1), fct(ff2, f2), fct(ff3, f3), fct(fc, c);
  mrg(ff1, fc), mrg(ff2, fc), mrg(ff2, fc), mrg(ff3, fc), mrg(ff3, fc),
      mrg(ff3, fc);
  int dv = bpow(c, mul(n % (MOD - 1), MOD - 2));
  set<int> s;
  for (auto x : ff1) s.insert(x.first);
  for (auto x : ff2) s.insert(x.first);
  for (auto x : ff3) s.insert(x.first);
  a[0][0][1] = a[0][1][2] = a[0][2][0] = a[0][2][1] = a[0][2][2] = 1;
  a[1][0][0] = a[1][1][1] = a[1][2][2] = 1;
  n -= 3;
  while (n != 0) {
    if (n & 1) {
      mul(1, 1, 0);
    }
    n >>= 1;
    mul(0, 0, 0);
  }
  int ans = 1;
  for (auto x : s) {
    int a0 = 0, a1 = 0, a2 = 0;
    for (auto y : ff1) {
      if (x == y.first) a0 = y.second;
    }
    for (auto y : ff2) {
      if (x == y.first) a1 = y.second;
    }
    for (auto y : ff3) {
      if (x == y.first) a2 = y.second;
    }
    int xx = mul(a0, a[1][2][0]), yy = mul(a1, a[1][2][1]),
        zz = mul(a2, a[1][2][2]);
    ans = ((ll)ans * bpow(x, add(xx, add(yy, zz))) % MOD);
  }
  ans = ((ll)ans * dv) % MOD;
  cout << ans << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

142310071407520708 617832726 668567895 297892739 643574075


(G.2) Fast Input

142310071407520708 617832726 668567895 25523540 643574075


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ull = unsigned long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int C = 3, MOD = 1e9 + 7; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
ll n; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int f1, f2, f3, c; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void fct(vector<pair<int, int> > &ans, int x) { /* line 8 slow_hit_count: 4, fast_hit_count: 4 */
  for (int i = 2; i * i <= x; ++i) { /* line 9 slow_hit_count: 26507, fast_hit_count: 9324 */
    if (x % i == 0) { /* line 10 slow_hit_count: 26503, fast_hit_count: 9320 */
      int c = 0; /* line 11 slow_hit_count: 8, fast_hit_count: 12 */
      while (x % i == 0) x /= i, ++c; /* line 12 slow_hit_count: 17, fast_hit_count: 26 */
      ans.push_back({i, c}); /* line 13 slow_hit_count: 8, fast_hit_count: 12 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  if (x > 1) { /* line 16 slow_hit_count: 4, fast_hit_count: 4 */
    ans.push_back({x, 1}); /* line 17 slow_hit_count: 4, fast_hit_count: 4 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 19 slow_hit_count: 4, fast_hit_count: 4 */
void mrg(vector<pair<int, int> > &a, vector<pair<int, int> > &b) { /* line 20 slow_hit_count: 6, fast_hit_count: 6 */
  map<int, int> c; /* line 21 slow_hit_count: 12, fast_hit_count: 12 */
  for (auto x : a) c[x.first] += x.second; /* line 22 slow_hit_count: 27, fast_hit_count: 37 */
  for (auto x : b) c[x.first] += x.second; /* line 23 slow_hit_count: 18, fast_hit_count: 18 */
  a.clear(); /* line 24 slow_hit_count: 6, fast_hit_count: 6 */
  for (auto x : c) a.push_back(x); /* line 25 slow_hit_count: 32, fast_hit_count: 41 */
} /* line 26 slow_hit_count: 6, fast_hit_count: 6 */
inline int add(int a, int b) { /* line 27 slow_hit_count: 2288, fast_hit_count: 2290 */
  a += b; /* line 28 slow_hit_count: 2288, fast_hit_count: 2290 */
  if (a >= MOD - 1) a -= MOD - 1; /* line 29 slow_hit_count: 2288, fast_hit_count: 2290 */
  return a; /* line 30 slow_hit_count: 2288, fast_hit_count: 2290 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
inline int mul(int a, int b) { return ((ll)a * b) % (MOD - 1); } /* line 32 slow_hit_count: 2299, fast_hit_count: 2302 */
int a[3][C][C], rsv = 2; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
void mul(int r, int f, int s) { /* line 34 slow_hit_count: 84, fast_hit_count: 84 */
  for (int i = 0; i < C; ++i) { /* line 35 slow_hit_count: 336, fast_hit_count: 336 */
    for (int k = 0; k < C; ++k) { /* line 36 slow_hit_count: 1008, fast_hit_count: 1008 */
      for (int j = 0; j < C; ++j) { /* line 37 slow_hit_count: 3024, fast_hit_count: 3024 */
        a[rsv][i][j] = add(a[rsv][i][j], mul(a[f][i][k], a[s][k][j])); /* line 38 slow_hit_count: 2268, fast_hit_count: 2268 */
      } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < C; ++i) { /* line 42 slow_hit_count: 336, fast_hit_count: 336 */
    for (int j = 0; j < C; ++j) { /* line 43 slow_hit_count: 1008, fast_hit_count: 1008 */
      a[r][i][j] = a[rsv][i][j]; /* line 44 slow_hit_count: 756, fast_hit_count: 756 */
      a[rsv][i][j] = 0; /* line 45 slow_hit_count: 756, fast_hit_count: 756 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 48 slow_hit_count: 84, fast_hit_count: 84 */
int bpow(int a, int b) { /* line 49 slow_hit_count: 11, fast_hit_count: 12 */
  int ans = 1; /* line 50 slow_hit_count: 11, fast_hit_count: 12 */
  while (b != 0) { /* line 51 slow_hit_count: 333, fast_hit_count: 360 */
    if (b & 1) { /* line 52 slow_hit_count: 322, fast_hit_count: 348 */
      ans = ((ll)ans * a) % MOD; /* line 53 slow_hit_count: 170, fast_hit_count: 183 */
    } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
    b >>= 1; /* line 55 slow_hit_count: 322, fast_hit_count: 348 */
    a = ((ll)a * a) % MOD; /* line 56 slow_hit_count: 322, fast_hit_count: 348 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 58 slow_hit_count: 11, fast_hit_count: 12 */
} /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0), cout.tie(0); /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> f1 >> f2 >> f3 >> c; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<int, int> > ff1, ff2, ff3, fc; /* line 64 slow_hit_count: 2, fast_hit_count: 2 */
  fct(ff1, f1), fct(ff2, f2), fct(ff3, f3), fct(fc, c); /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  mrg(ff1, fc), mrg(ff2, fc), mrg(ff2, fc), mrg(ff3, fc), mrg(ff3, fc), /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
      mrg(ff3, fc); /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  int dv = bpow(c, mul(n % (MOD - 1), MOD - 2)); /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  set<int> s; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto x : ff1) s.insert(x.first); /* line 70 slow_hit_count: 8, fast_hit_count: 8 */
  for (auto x : ff2) s.insert(x.first); /* line 71 slow_hit_count: 6, fast_hit_count: 6 */
  for (auto x : ff3) s.insert(x.first); /* line 72 slow_hit_count: 4, fast_hit_count: 7 */
  a[0][0][1] = a[0][1][2] = a[0][2][0] = a[0][2][1] = a[0][2][2] = 1; /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  a[1][0][0] = a[1][1][1] = a[1][2][2] = 1; /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  n -= 3; /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  while (n != 0) { /* line 76 slow_hit_count: 58, fast_hit_count: 58 */
    if (n & 1) { /* line 77 slow_hit_count: 57, fast_hit_count: 57 */
      mul(1, 1, 0); /* line 78 slow_hit_count: 27, fast_hit_count: 27 */
    } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
    n >>= 1; /* line 80 slow_hit_count: 57, fast_hit_count: 57 */
    mul(0, 0, 0); /* line 81 slow_hit_count: 57, fast_hit_count: 57 */
  } /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 1; /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto x : s) { /* line 84 slow_hit_count: 11, fast_hit_count: 12 */
    int a0 = 0, a1 = 0, a2 = 0; /* line 85 slow_hit_count: 10, fast_hit_count: 11 */
    for (auto y : ff1) { /* line 86 slow_hit_count: 80, fast_hit_count: 88 */
      if (x == y.first) a0 = y.second; /* line 87 slow_hit_count: 70, fast_hit_count: 77 */
    } /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto y : ff2) { /* line 89 slow_hit_count: 60, fast_hit_count: 66 */
      if (x == y.first) a1 = y.second; /* line 90 slow_hit_count: 50, fast_hit_count: 55 */
    } /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto y : ff3) { /* line 92 slow_hit_count: 40, fast_hit_count: 77 */
      if (x == y.first) a2 = y.second; /* line 93 slow_hit_count: 30, fast_hit_count: 66 */
    } /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
    int xx = mul(a0, a[1][2][0]), yy = mul(a1, a[1][2][1]), /* line 95 slow_hit_count: 10, fast_hit_count: 11 */
        zz = mul(a2, a[1][2][2]); /* line 96 slow_hit_count: 10, fast_hit_count: 11 */
    ans = ((ll)ans * bpow(x, add(xx, add(yy, zz))) % MOD); /* line 97 slow_hit_count: 10, fast_hit_count: 11 */
  } /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
  ans = ((ll)ans * dv) % MOD; /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
  cout << ans << '\n'; /* line 100 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 101 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 102 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Hit Count Comparison**:
   - The `fct` function, particularly the loop starting at line 9, has significantly higher hit counts for the slow input compared to the fast input. The loop at line 9 iterates over potential divisors of `x`, and the number of iterations is proportional to the size or structure of the numbers involved.
   - The `bpow` function (lines 49-58) and its usage in line 97 also show a disparity, indicating that the power calculations are heavily utilized, which can be computationally expensive if the exponent is large.

2. **Expensive Operations**:
   - **Prime Factorization**: The `fct` function performs prime factorization, which is computationally expensive, especially for larger numbers with more divisors.
   - **Modular Exponentiation**: The `bpow` function is used for calculating powers under modulo, which can become costly if `b` is large. This is particularly noticeable in line 97, where it is used within a loop iterating over a set of factors.

3. **Interaction with Data Structures**:
   - The `vector<pair<int, int>>` data structure is used to store factors and their counts, which are then combined using the `mrg` function. The merging process is repeated multiple times, potentially leading to increased complexity if the vectors are large or numerous.
   - The `set<int> s` collects unique prime factors, and then iterates over them to compute the final result, indicating heavy usage of set operations which could also add overhead depending on the number of elements.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Prime Factorization Complexity**:
   - **Invariant**: "When the integers `f1`, `f2`, `f3`, or `c` have a large number of small prime factors, the computation may slow down due to repeated and extensive factorization operations."
   - **Explanation**: The `fct` function iterates over potential divisors up to the square root of `x`. If the number is composed of many small factors, this results in increased iterations and thus higher computational cost.

2. **Modular Exponentiation Overhead**:
   - **Invariant**: "When the input leads to large exponents in the power operation, the computation may slow down due to the time complexity of repeated squaring methods."
   - **Explanation**: The `bpow` function has a time complexity of \(O(\log b)\). If the value of `b` (in line 97) is large, this can introduce significant delays.

3. **Repeated Merging of Factors**:
   - **Invariant**: "Frequent merging of factor lists for large numbers can degrade performance, especially when there are many common factors that increase the size of the lists."
   - **Explanation**: The `mrg` function combines factor counts, and its performance depends on the size of input vectors and the number of unique factors, which can be exacerbated if numbers share many factors.

4. **Set Operations on Large Factor Lists**:
   - **Invariant**: "When the set of unique prime factors (across all inputs) is large, operations over this set can become a performance bottleneck."
   - **Explanation**: The final computation iterates over all unique factors, meaning the performance depends on the cardinality of `s`, which grows with the number of distinct factors.

By addressing these potential bottlenecks, the program's performance can be optimized, especially for inputs that maximize complexity within given constraints. These invariants provide guidelines on where to focus optimizations or refactorings to handle future slow scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Performance-Characterizing Invariants in C++

Here are the C++ implementations for the performance-characterizing invariants we derived:

1. **Prime Factorization Complexity**:
   ```cpp
   void check_factorization_invariant(int value) {
       int factor_count = 0;
       for (int i = 2; i * i <= value; ++i) {
           while (value % i == 0) {
               value /= i;
               ++factor_count;
           }
       }
       if (value > 1) {
           ++factor_count;
       }
       if (factor_count > 100) { // Arbitrary threshold based on expected factor counts
           cerr << "Warning: factorization_invariant triggered - high number of prime factors" << endl;
           abort();
       }
   }
   ```

2. **Modular Exponentiation Overhead**:
   ```cpp
   void check_exponentiation_invariant(int base, int exponent) {
       if (exponent > 100000) { // Threshold based on expected range for efficient computation
           cerr << "Warning: exponentiation_invariant triggered - large exponent" << endl;
           abort();
       }
   }
   ```

3. **Repeated Merging of Factors**:
   ```cpp
   void check_merging_invariant(const vector<pair<int, int>>& factors) {
       if (factors.size() > 100) { // Threshold based on typical factor list sizes
           cerr << "Warning: merging_invariant triggered - large number of factors" << endl;
           abort();
       }
   }
   ```

4. **Set Operations on Large Factor Lists**:
   ```cpp
   void check_set_invariant(const set<int>& factor_set) {
       if (factor_set.size() > 100) { // Threshold for set size
           cerr << "Warning: set_invariant triggered - large set of factors" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checker Code into the Original Program

Now let's integrate these checks into the given C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;
using ull = unsigned long long;
using ll = long long;
const int C = 3, MOD = 1e9 + 7;
ll n;
int f1, f2, f3, c;

void check_factorization_invariant(int value) {
    int factor_count = 0;
    for (int i = 2; i * i <= value; ++i) {
        while (value % i == 0) {
            value /= i;
            ++factor_count;
        }
    }
    if (value > 1) {
        ++factor_count;
    }
    if (factor_count > 100) {
        cerr << "Warning: factorization_invariant triggered - high number of prime factors" << endl;
        abort();
    }
}

void check_exponentiation_invariant(int base, int exponent) {
    if (exponent > 100000) {
        cerr << "Warning: exponentiation_invariant triggered - large exponent" << endl;
        abort();
    }
}

void check_merging_invariant(const vector<pair<int, int>>& factors) {
    if (factors.size() > 100) {
        cerr << "Warning: merging_invariant triggered - large number of factors" << endl;
        abort();
    }
}

void check_set_invariant(const set<int>& factor_set) {
    if (factor_set.size() > 100) {
        cerr << "Warning: set_invariant triggered - large set of factors" << endl;
        abort();
    }
}

void fct(vector<pair<int, int> > &ans, int x) {
    for (int i = 2; i * i <= x; ++i) {
        if (x % i == 0) {
            int c = 0;
            while (x % i == 0) x /= i, ++c;
            ans.push_back({i, c});
        }
    }
    if (x > 1) {
        ans.push_back({x, 1});
    }
    check_factorization_invariant(x); // Check factorization complexity
}

void mrg(vector<pair<int, int> > &a, vector<pair<int, int> > &b) {
    map<int, int> c;
    for (auto x : a) c[x.first] += x.second;
    for (auto x : b) c[x.first] += x.second;
    a.clear();
    for (auto x : c) a.push_back(x);
    check_merging_invariant(a); // Check merging complexity
}

inline int add(int a, int b) {
    a += b;
    if (a >= MOD - 1) a -= MOD - 1;
    return a;
}

inline int mul(int a, int b) { return ((ll)a * b) % (MOD - 1); }

int a[3][C][C], rsv = 2;

void mul(int r, int f, int s) {
    for (int i = 0; i < C; ++i) {
        for (int k = 0; k < C; ++k) {
            for (int j = 0; j < C; ++j) {
                a[rsv][i][j] = add(a[rsv][i][j], mul(a[f][i][k], a[s][k][j]));
            }
        }
    }
    for (int i = 0; i < C; ++i) {
        for (int j = 0; j < C; ++j) {
            a[r][i][j] = a[rsv][i][j];
            a[rsv][i][j] = 0;
        }
    }
}

int bpow(int a, int b) {
    int ans = 1;
    check_exponentiation_invariant(a, b); // Check exponentiation overhead
    while (b != 0) {
        if (b & 1) {
            ans = ((ll)ans * a) % MOD;
        }
        b >>= 1;
        a = ((ll)a * a) % MOD;
    }
    return ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0), cout.tie(0);
    cin >> n >> f1 >> f2 >> f3 >> c;
    vector<pair<int, int> > ff1, ff2, ff3, fc;
    fct(ff1, f1), fct(ff2, f2), fct(ff3, f3), fct(fc, c);
    mrg(ff1, fc), mrg(ff2, fc), mrg(ff2, fc), mrg(ff3, fc), mrg(ff3, fc),
        mrg(ff3, fc);
    int dv = bpow(c, mul(n % (MOD - 1), MOD - 2));
    set<int> s;
    for (auto x : ff1) s.insert(x.first);
    for (auto x : ff2) s.insert(x.first);
    for (auto x : ff3) s.insert(x.first);
    check_set_invariant(s); // Check set operations complexity
    a[0][0][1] = a[0][1][2] = a[0][2][0] = a[0][2][1] = a[0][2][2] = 1;
    a[1][0][0] = a[1][1][1] = a[1][2][2] = 1;
    n -= 3;
    while (n != 0) {
        if (n & 1) {
            mul(1, 1, 0);
        }
        n >>= 1;
        mul(0, 0, 0);
    }
    int ans = 1;
    for (auto x : s) {
        int a0 = 0, a1 = 0, a2 = 0;
        for (auto y : ff1) {
            if (x == y.first) a0 = y.second;
        }
        for (auto y : ff2) {
            if (x == y.first) a1 = y.second;
        }
        for (auto y : ff3) {
            if (x == y.first) a2 = y.second;
        }
        int xx = mul(a0, a[1][2][0]), yy = mul(a1, a[1][2][1]),
            zz = mul(a2, a[1][2][2]);
        ans = ((ll)ans * bpow(x, add(xx, add(yy, zz))) % MOD);
    }
    ans = ((ll)ans * dv) % MOD;
    cout << ans << '\n';
    return 0;
}
```

### Explanation

- **Factorization Complexity Check**: Integrated just after `fct` function to check the complexity based on the number of prime factors.
- **Exponentiation Overhead Check**: Embedded in the `bpow` function before starting modular exponentiation.
- **Merging Complexity Check**: Added after merging factor lists to ensure the resulting size doesn’t degrade performance.
- **Set Operations Complexity Check**: Placed after all factors have been inserted into the `set`. 

These checks will help to identify potential performance issues at runtime by triggering aborts when the specified conditions are met.

