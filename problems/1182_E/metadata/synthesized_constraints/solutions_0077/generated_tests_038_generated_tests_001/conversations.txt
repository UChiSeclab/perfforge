system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long power(long long a, long long p) {
  if (a == 0) return (a);
  long long t = 1;
  while (p > 0) {
    if (p & 1) t = (a * t) % 1000000007;
    a = (a * a) % 1000000007;
    p >>= 1;
  }
  return (t);
}
void mul(unsigned long long a[3][3], unsigned long long b[3][3]) {
  unsigned long long temp[3][3];
  int i, j, k;
  for (i = 0; i < 3; ++i) {
    for (j = 0; j < 3; ++j) {
      unsigned long long val = 0;
      for (k = 0; k < 3; ++k) {
        val += (a[i][k] * b[k][j]) % (1000000007 - 1);
        val %= (1000000007 - 1);
      }
      temp[i][j] = val;
    }
  }
  for (i = 0; i < 3; ++i) {
    for (j = 0; j < 3; ++j) {
      a[i][j] = temp[i][j];
    }
  }
}
void powmat(unsigned long long a[3][3], long long p) {
  unsigned long long t[3][3] = {1, 0, 0, 0, 1, 0, 0, 0, 1};
  while (p > 0) {
    if (p & 1) mul(t, a);
    mul(a, a);
    p >>= 1;
  }
  for (int i = 0; i < 3; ++i) {
    for (int j = 0; j < 3; ++j) a[i][j] = t[i][j];
  }
}
set<long long> s;
void mwork(map<long long, long long>& m, long long n) {
  long long i;
  long long c = 0, f = 1, k;
  k = n;
  while ((!(n & 1)) && n > 1) {
    n = n / 2;
    c++;
  }
  m[2] = c;
  s.insert(2);
  for (i = 3; n > 1 && i <= n; ++i) {
    c = 0;
    while (n % i == 0 && n > 1) {
      n /= i;
      c++;
    }
    m[i] = c;
    s.insert(i);
    if (c == 0 && i * i >= n) {
      m[n] = 1;
      s.insert(n);
      break;
    }
  }
  if (k == n && k != 1) {
    m[n] = 1;
    s.insert(n);
  }
}
int main() {
  long long n, f1, f2, f3, c;
  cin >> n >> f1 >> f2 >> f3 >> c;
  unsigned long long mat[3][3] = {0, 1, 0, 0, 0, 1, 1, 1, 1};
  powmat(mat, n - 3);
  map<long long, long long> p1, p2, p3, pc;
  mwork(p1, f1);
  mwork(p2, f2);
  mwork(p3, f3);
  mwork(pc, c);
  long long ans = 1, i;
  for (auto p : s) {
    long long c1 = (p1[p] + pc[p]);
    long long c2 = (p2[p] + 2 * pc[p]);
    long long c3 = (p3[p] + 3 * pc[p]);
    ans *= ((power(power(p, mat[2][0]), c1) * power(power(p, mat[2][1]), c2)) %
            1000000007 * power(power(p, mat[2][2]), c3)) %
           1000000007;
    ans %= 1000000007;
  }
  ans = (ans * power(power(c, n), 1000000007 - 2)) % 1000000007;
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1440135023384277212 298741808 716838873 730243936 632306255


(G.2) Fast Input

1440135023384277212 298741808 401572465 730243936 632306255


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long power(long long a, long long p) { /* line 3 slow_hit_count: 92762, fast_hit_count: 25946 */
  if (a == 0) return (a); /* line 4 slow_hit_count: 92762, fast_hit_count: 25946 */
  long long t = 1; /* line 5 slow_hit_count: 92762, fast_hit_count: 25946 */
  while (p > 0) { /* line 6 slow_hit_count: 1468825, fast_hit_count: 410906 */
    if (p & 1) t = (a * t) % 1000000007; /* line 7 slow_hit_count: 1376063, fast_hit_count: 384960 */
    a = (a * a) % 1000000007; /* line 8 slow_hit_count: 1376063, fast_hit_count: 384960 */
    p >>= 1; /* line 9 slow_hit_count: 1376063, fast_hit_count: 384960 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  return (t); /* line 11 slow_hit_count: 92762, fast_hit_count: 25946 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
void mul(unsigned long long a[3][3], unsigned long long b[3][3]) { /* line 13 slow_hit_count: 93, fast_hit_count: 93 */
  unsigned long long temp[3][3]; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  int i, j, k; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < 3; ++i) { /* line 16 slow_hit_count: 372, fast_hit_count: 372 */
    for (j = 0; j < 3; ++j) { /* line 17 slow_hit_count: 1116, fast_hit_count: 1116 */
      unsigned long long val = 0; /* line 18 slow_hit_count: 837, fast_hit_count: 837 */
      for (k = 0; k < 3; ++k) { /* line 19 slow_hit_count: 3348, fast_hit_count: 3348 */
        val += (a[i][k] * b[k][j]) % (1000000007 - 1); /* line 20 slow_hit_count: 2511, fast_hit_count: 2511 */
        val %= (1000000007 - 1); /* line 21 slow_hit_count: 2511, fast_hit_count: 2511 */
      } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      temp[i][j] = val; /* line 23 slow_hit_count: 837, fast_hit_count: 837 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < 3; ++i) { /* line 26 slow_hit_count: 372, fast_hit_count: 372 */
    for (j = 0; j < 3; ++j) { /* line 27 slow_hit_count: 1116, fast_hit_count: 1116 */
      a[i][j] = temp[i][j]; /* line 28 slow_hit_count: 837, fast_hit_count: 837 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 31 slow_hit_count: 93, fast_hit_count: 93 */
void powmat(unsigned long long a[3][3], long long p) { /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  unsigned long long t[3][3] = {1, 0, 0, 0, 1, 0, 0, 0, 1}; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  while (p > 0) { /* line 34 slow_hit_count: 62, fast_hit_count: 62 */
    if (p & 1) mul(t, a); /* line 35 slow_hit_count: 61, fast_hit_count: 61 */
    mul(a, a); /* line 36 slow_hit_count: 61, fast_hit_count: 61 */
    p >>= 1; /* line 37 slow_hit_count: 61, fast_hit_count: 61 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < 3; ++i) { /* line 39 slow_hit_count: 4, fast_hit_count: 4 */
    for (int j = 0; j < 3; ++j) a[i][j] = t[i][j]; /* line 40 slow_hit_count: 12, fast_hit_count: 12 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
set<long long> s; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
void mwork(map<long long, long long>& m, long long n) { /* line 44 slow_hit_count: 4, fast_hit_count: 4 */
  long long i; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  long long c = 0, f = 1, k; /* line 46 slow_hit_count: 4, fast_hit_count: 4 */
  k = n; /* line 47 slow_hit_count: 4, fast_hit_count: 4 */
  while ((!(n & 1)) && n > 1) { /* line 48 slow_hit_count: 13, fast_hit_count: 13 */
    n = n / 2; /* line 49 slow_hit_count: 9, fast_hit_count: 9 */
    c++; /* line 50 slow_hit_count: 9, fast_hit_count: 9 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  m[2] = c; /* line 52 slow_hit_count: 4, fast_hit_count: 4 */
  s.insert(2); /* line 53 slow_hit_count: 4, fast_hit_count: 4 */
  for (i = 3; n > 1 && i <= n; ++i) { /* line 54 slow_hit_count: 20199, fast_hit_count: 4843 */
    c = 0; /* line 55 slow_hit_count: 20199, fast_hit_count: 4843 */
    while (n % i == 0 && n > 1) { /* line 56 slow_hit_count: 20205, fast_hit_count: 4852 */
      n /= i; /* line 57 slow_hit_count: 6, fast_hit_count: 9 */
      c++; /* line 58 slow_hit_count: 6, fast_hit_count: 9 */
    } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    m[i] = c; /* line 60 slow_hit_count: 20199, fast_hit_count: 4843 */
    s.insert(i); /* line 61 slow_hit_count: 20199, fast_hit_count: 4843 */
    if (c == 0 && i * i >= n) { /* line 62 slow_hit_count: 20199, fast_hit_count: 4843 */
      m[n] = 1; /* line 63 slow_hit_count: 4, fast_hit_count: 4 */
      s.insert(n); /* line 64 slow_hit_count: 4, fast_hit_count: 4 */
      break; /* line 65 slow_hit_count: 4, fast_hit_count: 4 */
    } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  if (k == n && k != 1) { /* line 68 slow_hit_count: 4, fast_hit_count: 4 */
    m[n] = 1; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    s.insert(n); /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 72 slow_hit_count: 4, fast_hit_count: 4 */
int main() { /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, f1, f2, f3, c; /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> f1 >> f2 >> f3 >> c; /* line 75 slow_hit_count: 1, fast_hit_count: 1 */
  unsigned long long mat[3][3] = {0, 1, 0, 0, 0, 1, 1, 1, 1}; /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  powmat(mat, n - 3); /* line 77 slow_hit_count: 1, fast_hit_count: 1 */
  map<long long, long long> p1, p2, p3, pc; /* line 78 slow_hit_count: 2, fast_hit_count: 2 */
  mwork(p1, f1); /* line 79 slow_hit_count: 1, fast_hit_count: 1 */
  mwork(p2, f2); /* line 80 slow_hit_count: 1, fast_hit_count: 1 */
  mwork(p3, f3); /* line 81 slow_hit_count: 1, fast_hit_count: 1 */
  mwork(pc, c); /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 1, i; /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto p : s) { /* line 84 slow_hit_count: 15461, fast_hit_count: 4325 */
    long long c1 = (p1[p] + pc[p]); /* line 85 slow_hit_count: 15460, fast_hit_count: 4324 */
    long long c2 = (p2[p] + 2 * pc[p]); /* line 86 slow_hit_count: 15460, fast_hit_count: 4324 */
    long long c3 = (p3[p] + 3 * pc[p]); /* line 87 slow_hit_count: 15460, fast_hit_count: 4324 */
    ans *= ((power(power(p, mat[2][0]), c1) * power(power(p, mat[2][1]), c2)) % /* line 88 slow_hit_count: 15460, fast_hit_count: 4324 */
            1000000007 * power(power(p, mat[2][2]), c3)) % /* line 89 slow_hit_count: 15460, fast_hit_count: 4324 */
           1000000007; /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
    ans %= 1000000007; /* line 91 slow_hit_count: 15460, fast_hit_count: 4324 */
  } /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  ans = (ans * power(power(c, n), 1000000007 - 2)) % 1000000007; /* line 93 slow_hit_count: 1, fast_hit_count: 1 */
  cout << ans; /* line 94 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 95 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information provided, we can see the following patterns:

1. **Line 3 to 11 (Function `power`)**: The `power` function is invoked significantly more often in the slow input compared to the fast input. The line 6 (`while (p > 0)`) and the lines inside this loop (lines 7, 8, and 9) have high iteration counts, indicating that the function is a computational hotspot, especially for high values of the exponent `p`.

2. **Line 54 to 67 (Inside `mwork` Function Loop)**: The loop iterating over prime factors (starting at line 54) is hit substantially more times in the slow input, suggesting a difference in the number of iterations or divisions being performed on the input numbers `f1`, `f2`, `f3`, or `c`.

3. **Line 84 to 91 (Main Loop Processing with `s`)**: This loop iterates over the set `s`, which likely contains the prime factors or relevant numbers generated by `mwork`. The high number of iterations in the slow input suggests a larger set `s`, leading to more calls to the `power` function.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are natural language performance-characterizing invariants that describe conditions under which the code may slow down:

1. **Exponentiation Overhead**:
   - **Invariant**: "If the values of `f1`, `f2`, `f3`, or `c` have many large prime factors, leading to high exponents in the power function, the computation may significantly slow down."
   - **Explanation**: The `power` function's execution time is heavily influenced by the size of the exponent. More large prime factors in the input values result in higher exponents, increasing the number of operations.

2. **Prime Factorization Load**:
   - **Invariant**: "When input values like `f1`, `f2`, `f3`, or `c` are composed of numbers with many distinct prime factors, the operations in the `mwork` function can become a bottleneck."
   - **Explanation**: The `mwork` function iterates over potential factors, and more distinct factors mean more iterations and calculations, particularly for large numbers.

3. **Repeated Matrix Exponentiation**:
   - **Invariant**: "If the transformation matrix requires frequent multiplication due to a high value of `n`, the resulting complexity might cause delays."
   - **Explanation**: The matrix exponentiation step (`powmat`) involves repeated multiplication operations, which can result in overhead when `n` is large.

4. **Heavy use of Set Operations**:
   - **Invariant**: "If the set `s`, which collects prime factors across all input values, grows large, the multiplicative combinations processed in the main loop can become computationally expensive."
   - **Explanation**: Larger sets imply more combinations to process in the main loop, leading to repeated complex calculations, especially involving exponentiation.

These invariants highlight potential performance bottlenecks that could be triggered by specific characteristics of the input values, without relying on exact numbers, allowing these rules to generalize to future scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the invariant checks implemented as C++ code:

1. **Exponentiation Overhead**:

```cpp
void check_exponentiation_condition(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to high exponentiation overhead!" << endl;
        abort();
    }
}
```

2. **Prime Factorization Load**:

```cpp
void check_prime_factorization_condition(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to extensive prime factorization!" << endl;
        abort();
    }
}
```

3. **Repeated Matrix Exponentiation**:

```cpp
void check_matrix_exponentiation_condition(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to repeated matrix exponentiation!" << endl;
        abort();
    }
}
```

4. **Heavy Use of Set Operations**:

```cpp
void check_set_operation_condition(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck triggered due to heavy use of set operations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Here is the instrumented C++ code with the integrated runtime checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

long long power(long long a, long long p) {
    if (a == 0) return (a);
    long long t = 1;
    while (p > 0) {
        if (p & 1) t = (a * t) % 1000000007;
        a = (a * a) % 1000000007;
        p >>= 1;
    }
    return (t);
}

void mul(unsigned long long a[3][3], unsigned long long b[3][3]) {
    unsigned long long temp[3][3];
    int i, j, k;
    for (i = 0; i < 3; ++i) {
        for (j = 0; j < 3; ++j) {
            unsigned long long val = 0;
            for (k = 0; k < 3; ++k) {
                val += (a[i][k] * b[k][j]) % (1000000007 - 1);
                val %= (1000000007 - 1);
            }
            temp[i][j] = val;
        }
    }
    for (i = 0; i < 3; ++i) {
        for (j = 0; j < 3; ++j) {
            a[i][j] = temp[i][j];
        }
    }
}

void powmat(unsigned long long a[3][3], long long p) {
    unsigned long long t[3][3] = {1, 0, 0, 0, 1, 0, 0, 0, 1};
    while (p > 0) {
        if (p & 1) mul(t, a);
        mul(a, a);
        p >>= 1;
    }
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) a[i][j] = t[i][j];
    }
}

void mwork(map<long long, long long>& m, long long n) {
    long long i;
    long long c = 0, f = 1, k;
    k = n;
    while ((!(n & 1)) && n > 1) {
        n = n / 2;
        c++;
    }
    m[2] = c;
    for (i = 3; n > 1 && i <= n; ++i) {
        c = 0;
        while (n % i == 0 && n > 1) {
            n /= i;
            c++;
        }
        m[i] = c;
    }
    if (k == n && k != 1) {
        m[n] = 1;
    }
}

set<long long> s;

int main() {
    long long n, f1, f2, f3, c;
    cin >> n >> f1 >> f2 >> f3 >> c;
    
    // Check for matrix exponentiation condition (example threshold, adjust based on profiling)
    check_matrix_exponentiation_condition(n > 1e9);

    unsigned long long mat[3][3] = {0, 1, 0, 0, 0, 1, 1, 1, 1};
    powmat(mat, n - 3);
    
    map<long long, long long> p1, p2, p3, pc;
    mwork(p1, f1);
    mwork(p2, f2);
    mwork(p3, f3);
    mwork(pc, c);

    // Check for prime factorization condition (example threshold)
    check_prime_factorization_condition(p1.size() + p2.size() + p3.size() + pc.size() > 50);

    long long ans = 1, i;
    for (auto p : s) {
        long long c1 = (p1[p] + pc[p]);
        long long c2 = (p2[p] + 2 * pc[p]);
        long long c3 = (p3[p] + 3 * pc[p]);
        
        // Check for exponentiation overhead condition
        check_exponentiation_condition(c1 > 1e5 || c2 > 1e5 || c3 > 1e5);
        
        ans *= ((power(power(p, mat[2][0]), c1) * power(power(p, mat[2][1]), c2)) %
                1000000007 * power(power(p, mat[2][2]), c3)) %
               1000000007;
        ans %= 1000000007;
    }
    ans = (ans * power(power(c, n), 1000000007 - 2)) % 1000000007;
    cout << ans;
}
```

**Explanation of Integration:**

- **`check_matrix_exponentiation_condition`:** Placed after reading input to avoid excessive matrix exponentiation for large `n`.
- **`check_prime_factorization_condition`:** Positioned after prime factorization calculations to detect extensive factorization.
- **`check_exponentiation_condition`:** Integrated within the loop where exponentiation operations are performed to catch high exponent values.

These checks aim to catch scenarios where the program may slow down due to the described conditions, assisting in diagnosis during testing and fuzzing.

