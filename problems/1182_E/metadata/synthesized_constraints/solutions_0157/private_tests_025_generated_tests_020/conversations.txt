system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int BASE = 1e9 + 7;
struct Matrix {
  long long a[3][3];
  Matrix() { memset(a, 0, sizeof a); }
  friend Matrix operator*(Matrix u, Matrix v) {
    Matrix res;
    for (int i = 0; i < 3; i++)
      for (int j = 0; j < 3; j++)
        for (int k = 0; k < 3; k++)
          res.a[i][j] = (res.a[i][j] + u.a[i][k] * v.a[k][j]) % (BASE - 1);
    return res;
  }
};
Matrix power(const Matrix u, long long k) {
  if (k == 1) return u;
  Matrix res = power(u, k / 2);
  res = res * res;
  if (k % 2) res = res * u;
  return res;
}
long long power(long long x, long long y) {
  if (!y) return 1;
  long long res = power(x, y / 2);
  res = res * res % BASE;
  if (y % 2) res = res * x % BASE;
  return res;
}
set<int> primes;
map<int, int> factorize(int n) {
  map<int, int> res;
  for (int i = 2; i * i <= n; i++)
    if (n % i == 0) {
      res[i] = 0;
      while (n % i == 0) {
        res[i]++;
        n /= i;
      }
    }
  if (n > 1) res[n] = 1;
  for (auto u : res) primes.insert(u.first);
  return res;
}
int main() {
  long long n, c;
  map<int, int> fPrimes[3];
  cin >> n;
  for (int i = 0; i < 3; i++) {
    int f;
    cin >> f;
    fPrimes[i] = factorize(f);
  }
  cin >> c;
  auto cPrimes = factorize(c);
  Matrix matrix;
  matrix.a[0][2] = matrix.a[1][0] = matrix.a[1][2] = matrix.a[2][1] =
      matrix.a[2][2] = 1;
  matrix = power(matrix, n - 3);
  long long ans = 1;
  for (int prime : primes) {
    long long k = 0;
    for (int i = 0; i < 3; i++)
      k += (fPrimes[i][prime] + cPrimes[prime] * (i + 1)) * matrix.a[i][2];
    ans = ans * power(prime, k) % BASE;
  }
  ans = ans * power(power(c, n), BASE - 2) % BASE;
  cout << ans << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

142310071407520708 617832726 668567895 297892739 643574075


(G.2) Fast Input

142310071407520708 617832726 668567895 25523540 643574075


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int BASE = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
struct Matrix { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  long long a[3][3]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  Matrix() { memset(a, 0, sizeof a); } /* line 6 slow_hit_count: 83, fast_hit_count: 83 */
  friend Matrix operator*(Matrix u, Matrix v) { /* line 7 slow_hit_count: 82, fast_hit_count: 82 */
    Matrix res; /* line 8 slow_hit_count: 82, fast_hit_count: 82 */
    for (int i = 0; i < 3; i++) /* line 9 slow_hit_count: 328, fast_hit_count: 328 */
      for (int j = 0; j < 3; j++) /* line 10 slow_hit_count: 984, fast_hit_count: 984 */
        for (int k = 0; k < 3; k++) /* line 11 slow_hit_count: 2952, fast_hit_count: 2952 */
          res.a[i][j] = (res.a[i][j] + u.a[i][k] * v.a[k][j]) % (BASE - 1); /* line 12 slow_hit_count: 2214, fast_hit_count: 2214 */
    return res; /* line 13 slow_hit_count: 82, fast_hit_count: 82 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
Matrix power(const Matrix u, long long k) { /* line 16 slow_hit_count: 57, fast_hit_count: 57 */
  if (k == 1) return u; /* line 17 slow_hit_count: 57, fast_hit_count: 57 */
  Matrix res = power(u, k / 2); /* line 18 slow_hit_count: 56, fast_hit_count: 56 */
  res = res * res; /* line 19 slow_hit_count: 56, fast_hit_count: 56 */
  if (k % 2) res = res * u; /* line 20 slow_hit_count: 56, fast_hit_count: 56 */
  return res; /* line 21 slow_hit_count: 56, fast_hit_count: 56 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
long long power(long long x, long long y) { /* line 23 slow_hit_count: 403, fast_hit_count: 438 */
  if (!y) return 1; /* line 24 slow_hit_count: 403, fast_hit_count: 438 */
  long long res = power(x, y / 2); /* line 25 slow_hit_count: 391, fast_hit_count: 425 */
  res = res * res % BASE; /* line 26 slow_hit_count: 391, fast_hit_count: 425 */
  if (y % 2) res = res * x % BASE; /* line 27 slow_hit_count: 391, fast_hit_count: 425 */
  return res; /* line 28 slow_hit_count: 391, fast_hit_count: 425 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
set<int> primes; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
map<int, int> factorize(int n) { /* line 31 slow_hit_count: 4, fast_hit_count: 4 */
  map<int, int> res; /* line 32 slow_hit_count: 4, fast_hit_count: 4 */
  for (int i = 2; i * i <= n; i++) /* line 33 slow_hit_count: 26507, fast_hit_count: 9324 */
    if (n % i == 0) { /* line 34 slow_hit_count: 26503, fast_hit_count: 9320 */
      res[i] = 0; /* line 35 slow_hit_count: 8, fast_hit_count: 12 */
      while (n % i == 0) { /* line 36 slow_hit_count: 17, fast_hit_count: 26 */
        res[i]++; /* line 37 slow_hit_count: 9, fast_hit_count: 14 */
        n /= i; /* line 38 slow_hit_count: 9, fast_hit_count: 14 */
      } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  if (n > 1) res[n] = 1; /* line 41 slow_hit_count: 4, fast_hit_count: 4 */
  for (auto u : res) primes.insert(u.first); /* line 42 slow_hit_count: 16, fast_hit_count: 20 */
  return res; /* line 43 slow_hit_count: 4, fast_hit_count: 4 */
} /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, c; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  map<int, int> fPrimes[3]; /* line 47 slow_hit_count: 8, fast_hit_count: 8 */
  cin >> n; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 3; i++) { /* line 49 slow_hit_count: 4, fast_hit_count: 4 */
    int f; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> f; /* line 51 slow_hit_count: 3, fast_hit_count: 3 */
    fPrimes[i] = factorize(f); /* line 52 slow_hit_count: 3, fast_hit_count: 3 */
  } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> c; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  auto cPrimes = factorize(c); /* line 55 slow_hit_count: 2, fast_hit_count: 2 */
  Matrix matrix; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
  matrix.a[0][2] = matrix.a[1][0] = matrix.a[1][2] = matrix.a[2][1] = /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
      matrix.a[2][2] = 1; /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  matrix = power(matrix, n - 3); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 1; /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  for (int prime : primes) { /* line 61 slow_hit_count: 11, fast_hit_count: 12 */
    long long k = 0; /* line 62 slow_hit_count: 10, fast_hit_count: 11 */
    for (int i = 0; i < 3; i++) /* line 63 slow_hit_count: 40, fast_hit_count: 44 */
      k += (fPrimes[i][prime] + cPrimes[prime] * (i + 1)) * matrix.a[i][2]; /* line 64 slow_hit_count: 30, fast_hit_count: 33 */
    ans = ans * power(prime, k) % BASE; /* line 65 slow_hit_count: 10, fast_hit_count: 11 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  ans = ans * power(power(c, n), BASE - 2) % BASE; /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  cout << ans << endl; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 69 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Based on the analysis of the provided C code and the hit count information, let's identify the expensive or inefficient code segments and derive performance-characterizing invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Prime Factorization Loop:** 
   - Line 33: The loop to factorize numbers is hit significantly more often in the slow input compared to the fast input (`slow_hit_count: 26507`, `fast_hit_count: 9324`). This suggests that the slow input involves numbers with more or larger factors.
   - Lines 34-38: These lines, which handle the division and counting of factors, also show increased hits for the slow input.

2. **Prime Power Calculation:**
   - Line 25-28: The recursive power calculation function is called more frequently for the slow input (`slow_hit_count: 391`, `fast_hit_count: 425`).
   - Line 65: This line, which involves calculating powers of primes, is also hit more frequently for the slow input.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Prime Factorization Complexity:**
   - **Natural language description**: "When the input numbers for factorization (e.g., `f_1`, `f_2`, `f_3`, and `c`) have a higher number of distinct prime factors or larger prime factors, the program may slow down due to increased computational complexity in the factorization process."
   - **Explanation**: The loop for factorization can become expensive if the input numbers have a large number of smaller factors or a few very large prime factors, leading to more iterations and divisions.

2. **Exponentiation Cost:**
   - **Natural language description**: "If the program frequently calculates high powers of prime numbers, the recursive power function may cause a slowdown, particularly when combined with more complex numbers in the input."
   - **Explanation**: The recursive computation of powers in line 23 can become costly if repeatedly computing high powers, leading to more recursive calls.

3. **Matrix Exponentiation:**
   - **Natural language description**: "When calculating large powers of the transformation matrix, especially for high `n` values, the matrix exponentiation may contribute to slowdowns."
   - **Explanation**: Although the matrix power function does not show a significant difference in hit counts, the complexity of matrix exponentiation could become a bottleneck as `n` increases.

These invariants focus on the prime factorization and power calculations, which are crucial to the performance of this algorithm, especially given the constraints where `n` can be very large (up to \(10^{18}\)), but the individual numbers for factorization and exponentiation (e.g., `f_1`, `f_2`, `f_3`, and `c`) are relatively large within the range \(1 \leq f_{1}, f_{2}, f_{3}, c \leq 10^9\).

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let f_{x} = c^{2x-6} ⋅ f_{x-1} ⋅ f_{x-2} ⋅ f_{x-3} for x ≥ 4.

You have given integers n, f_{1}, f_{2}, f_{3}, and c. Find f_{n} mod (10^{9}+7).

Input

The only line contains five integers n, f_{1}, f_{2}, f_{3}, and c (4 ≤ n ≤ 10^{18}, 1 ≤ f_{1}, f_{2}, f_{3}, c ≤ 10^{9}).

Output

Print f_{n} mod (10^{9} + 7).

Examples

Input


5 1 2 5 3


Output


72900


Input


17 97 41 37 11


Output


317451037

Note

In the first example, f_{4} = 90, f_{5} = 72900.

In the second example, f_{17} ≈ 2.28 × 10^{29587}.

Solution (C++ code):
{solution}


assistant: Let's implement the performance-characterizing invariants as runtime checks in C++.

### Phase 3: Implementing the Natural Language Invariants

1. **Prime Factorization Complexity Check:**
   - **Checker code**: This checks if a number has a high number of distinct prime factors. We'll assume a threshold for the number of distinct prime factors, like 10, considering typical constraints.

```cpp
void check_factorization_invariant(int primeCount) {
    if (primeCount > 10) { // Arbitrary threshold for the number of distinct primes
        cerr << "Warning: Performance bottleneck condition triggered in factorization!" << endl;
        abort();
    }
}
```

2. **Exponentiation Complexity Check:**
   - **Checker code**: This checks if repeated exponentiation is being performed on large numbers or frequently.

```cpp
void check_exponentiation_invariant(long long base, long long exponent) {
    if (base > 1000000 || exponent > 1000000) { // Arbitrary large threshold
        cerr << "Warning: Performance bottleneck condition triggered in exponentiation!" << endl;
        abort();
    }
}
```

3. **Matrix Exponentiation Check:**
   - **Checker code**: This ensures matrix exponentiation is not too frequent or involves excessively large powers.

```cpp
void check_matrix_exponentiation_invariant(long long n) {
    if (n > 1e9) { // Arbitrary threshold for matrix power size
        cerr << "Warning: Performance bottleneck condition triggered in matrix exponentiation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checker Code

We'll now integrate these checks into the original C++ program at appropriate points.

```cpp
#include <bits/stdc++.h>
using namespace std;
const int BASE = 1e9 + 7;

struct Matrix {
    long long a[3][3];
    Matrix() { memset(a, 0, sizeof a); }
    friend Matrix operator*(Matrix u, Matrix v) {
        Matrix res;
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                for (int k = 0; k < 3; k++)
                    res.a[i][j] = (res.a[i][j] + u.a[i][k] * v.a[k][j]) % (BASE - 1);
        return res;
    }
};

Matrix power(const Matrix u, long long k) {
    check_matrix_exponentiation_invariant(k); // Check matrix exponentiation invariant
    if (k == 1) return u;
    Matrix res = power(u, k / 2);
    res = res * res;
    if (k % 2) res = res * u;
    return res;
}

long long power(long long x, long long y) {
    check_exponentiation_invariant(x, y); // Check exponentiation invariant
    if (!y) return 1;
    long long res = power(x, y / 2);
    res = res * res % BASE;
    if (y % 2) res = res * x % BASE;
    return res;
}

set<int> primes;
map<int, int> factorize(int n) {
    map<int, int> res;
    int primeCount = 0;
    for (int i = 2; i * i <= n; i++)
        if (n % i == 0) {
            res[i] = 0;
            while (n % i == 0) {
                res[i]++;
                n /= i;
            }
        }
    if (n > 1) res[n] = 1;
    
    for (auto u : res) {
        primes.insert(u.first);
        primeCount++;
    }
    check_factorization_invariant(primeCount); // Check factorization invariant
    return res;
}

int main() {
    long long n, c;
    map<int, int> fPrimes[3];
    cin >> n;
    for (int i = 0; i < 3; i++) {
        int f;
        cin >> f;
        fPrimes[i] = factorize(f);
    }
    cin >> c;
    auto cPrimes = factorize(c);
    Matrix matrix;
    matrix.a[0][2] = matrix.a[1][0] = matrix.a[1][2] = matrix.a[2][1] =
    matrix.a[2][2] = 1;
    matrix = power(matrix, n - 3);
    long long ans = 1;
    for (int prime : primes) {
        long long k = 0;
        for (int i = 0; i < 3; i++)
            k += (fPrimes[i][prime] + cPrimes[prime] * (i + 1)) * matrix.a[i][2];
        ans = ans * power(prime, k) % BASE;
    }
    ans = ans * power(power(c, n), BASE - 2) % BASE;
    cout << ans << endl;
}
```

### Explanation of Integration:

- **Factorization Check:** Placed after each factorization to ensure we don't have too many distinct prime factors.
- **Exponentiation Check:** Inserted at the beginning of the power function to ensure base or exponent isn't excessively large.
- **Matrix Exponentiation Check:** Done before matrix exponentiation to ensure the power isn't too high. 

These checks are strategically placed to alert for potential performance slowdowns without adding significant overhead in performance-critical loops.

