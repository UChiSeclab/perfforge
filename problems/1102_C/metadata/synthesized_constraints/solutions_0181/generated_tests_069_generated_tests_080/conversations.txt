system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are policeman and you are playing a game with Slavik. The game is turn-based and each turn consists of two phases. During the first phase you make your move and during the second phase Slavik makes his move.

There are n doors, the i-th door initially has durability equal to a_i.

During your move you can try to break one of the doors. If you choose door i and its current durability is b_i then you reduce its durability to max(0, b_i - x) (the value x is given).

During Slavik's move he tries to repair one of the doors. If he chooses door i and its current durability is b_i then he increases its durability to b_i + y (the value y is given). Slavik cannot repair doors with current durability equal to 0.

The game lasts 10^{100} turns. If some player cannot make his move then he has to skip it.

Your goal is to maximize the number of doors with durability equal to 0 at the end of the game. You can assume that Slavik wants to minimize the number of such doors. What is the number of such doors in the end if you both play optimally?

Input

The first line of the input contains three integers n, x and y (1 ≤ n ≤ 100, 1 ≤ x, y ≤ 10^5) — the number of doors, value x and value y, respectively.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5), where a_i is the initial durability of the i-th door.

Output

Print one integer — the number of doors with durability equal to 0 at the end of the game, if you and Slavik both play optimally.

Examples

Input


6 3 2
2 3 1 3 4 2


Output


6


Input


5 3 3
1 2 4 2 3


Output


2


Input


5 5 6
1 2 6 10 3


Output


2

Note

Clarifications about the optimal strategy will be ignored.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const double PI = acos(-1);
const double EPS = 1e-6;
const long long MOD = 1000000007;
const long long INF = 0x3F3F3F3F;
template <typename T>
inline T Abs(T x) {
  return x < 0 ? x * -1 : x;
}
template <typename T>
inline T Max(T x, T y, T z) {
  return std::max(std::max(x, y), z);
}
template <typename T>
inline T Min(T x, T y, T z) {
  return std::min(std::min(x, y), z);
}
template <typename T>
inline T Ckmax(T &x, T y) {
  return x = std::max(x, y);
}
template <typename T>
inline T Ckmin(T &x, T y) {
  return x = std::min(x, y);
}
template <typename T>
inline T Sqr(T x) {
  return x * x;
}
template <typename T>
inline T Pow(T x, T y) {
  T r = 1;
  while (y > 0) {
    if (y % 2 > 0) (r *= x) %= MOD;
    (x *= x) %= MOD;
    y /= 2;
  }
  return r % MOD;
}
template <typename T>
T Pow(T x, T y, T z) {
  T r = 1;
  while (y > 0) {
    if (y % 2 > 0) (r *= x) %= z;
    (x *= x) %= z;
    y /= 2;
  }
  return r % z;
}
template <typename T>
inline T gcd(T x, T y) {
  return y > 0 ? gcd(y, x % y) : x;
}
template <typename T>
inline T lcm(T x, T y) {
  return x / gcd(x, y) * y;
}
inline void cinspu(void) {
  std::ios::sync_with_stdio(0);
  std::cin.tie(0);
}
inline long long read(void) {
  char x;
  while (x = getchar(), x != '-' && !isdigit(x))
    ;
  char flg = x == '-';
  long long num = (flg ? getchar() : x) - '0';
  while (isdigit(x = getchar())) (num *= 10) += x - '0';
  return flg ? -num : num;
}
const int N = 5000 + 10;
int a[N];
int main() {
  cinspu();
  int n, x, y;
  std::cin >> n >> x >> y;
  for (int i = 1; i <= n; ++i) std::cin >> a[i];
  if (x > y) {
    std::cout << n << std::endl;
    return 0;
  }
  for (int ans = 0;;) {
    std::sort(a + 1, a + n + 1);
    int p = 1;
    for (; p <= n && a[p] <= x; ++p)
      ;
    --p;
    if (!a[p] || a[p] > x) {
      std::cout << ans << std::endl;
      return 0;
    }
    ++ans;
    a[p] = 0;
    for (p = 1; p <= n && !a[p]; ++p)
      ;
    if (p <= n)
      a[p] += y;
    else {
      std::cout << ans << std::endl;
      return 0;
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 1 2
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1


(G.2) Fast Input

1 2 2
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const double PI = acos(-1); /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const double EPS = 1e-6; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long long MOD = 1000000007; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = 0x3F3F3F3F; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
inline T Abs(T x) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  return x < 0 ? x * -1 : x; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
inline T Max(T x, T y, T z) { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return std::max(std::max(x, y), z); /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
inline T Min(T x, T y, T z) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return std::min(std::min(x, y), z); /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
inline T Ckmax(T &x, T y) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return x = std::max(x, y); /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
inline T Ckmin(T &x, T y) { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return x = std::min(x, y); /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
inline T Sqr(T x) { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  return x * x; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
inline T Pow(T x, T y) { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  T r = 1; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  while (y > 0) { /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    if (y % 2 > 0) (r *= x) %= MOD; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    (x *= x) %= MOD; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    y /= 2; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  return r % MOD; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
T Pow(T x, T y, T z) { /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  T r = 1; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  while (y > 0) { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    if (y % 2 > 0) (r *= x) %= z; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    (x *= x) %= z; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    y /= 2; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  return r % z; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
inline T gcd(T x, T y) { /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  return y > 0 ? gcd(y, x % y) : x; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
inline T lcm(T x, T y) { /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  return x / gcd(x, y) * y; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
inline void cinspu(void) { /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  std::ios::sync_with_stdio(0); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  std::cin.tie(0); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
inline long long read(void) { /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  char x; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  while (x = getchar(), x != '-' && !isdigit(x)) /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
    ; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  char flg = x == '-'; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  long long num = (flg ? getchar() : x) - '0'; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  while (isdigit(x = getchar())) (num *= 10) += x - '0'; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  return flg ? -num : num; /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 5000 + 10; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
int a[N]; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  cinspu(); /* line 74 slow_hit_count: 1, fast_hit_count: 1 */
  int n, x, y; /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
  std::cin >> n >> x >> y; /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; ++i) std::cin >> a[i]; /* line 77 slow_hit_count: 101, fast_hit_count: 2 */
  if (x > y) { /* line 78 slow_hit_count: 1, fast_hit_count: 1 */
    std::cout << n << std::endl; /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
  for (int ans = 0;;) { /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
    std::sort(a + 1, a + n + 1); /* line 83 slow_hit_count: 51, fast_hit_count: 1 */
    int p = 1; /* line 84 slow_hit_count: 51, fast_hit_count: 1 */
    for (; p <= n && a[p] <= x; ++p) /* line 85 slow_hit_count: 3826, fast_hit_count: 2 */
      ; /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
    --p; /* line 87 slow_hit_count: 51, fast_hit_count: 1 */
    if (!a[p] || a[p] > x) { /* line 88 slow_hit_count: 51, fast_hit_count: 1 */
      std::cout << ans << std::endl; /* line 89 slow_hit_count: 1, fast_hit_count: 0 */
      return 0; /* line 90 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
    ++ans; /* line 92 slow_hit_count: 50, fast_hit_count: 1 */
    a[p] = 0; /* line 93 slow_hit_count: 50, fast_hit_count: 1 */
    for (p = 1; p <= n && !a[p]; ++p) /* line 94 slow_hit_count: 1276, fast_hit_count: 2 */
      ; /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
    if (p <= n) /* line 96 slow_hit_count: 50, fast_hit_count: 1 */
      a[p] += y; /* line 97 slow_hit_count: 50, fast_hit_count: 0 */
    else { /* line 98 slow_hit_count: 0, fast_hit_count: 0 */
      std::cout << ans << std::endl; /* line 99 slow_hit_count: 0, fast_hit_count: 1 */
      return 0; /* line 100 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 102 slow_hit_count: 50, fast_hit_count: 0 */
  return 0; /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 104 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the line-level hit counts, we can observe the following:

1. **Line 83 (`std::sort(a + 1, a + n + 1);`)**: This line is executed 51 times during the slow input run and only once during the fast input run. The sorting operation is expensive, particularly when executed multiple times within a loop, which is happening in the scenario of the slow input.

2. **Lines 85 (`for (; p <= n && a[p] <= x; ++p);`)**: This line is executed 3826 times during the slow input, which indicates that this loop is extensively iterating over the doors, possibly due to most doors frequently having a durability lower than or equal to `x`.

3. **Lines 94 (`for (p = 1; p <= n && !a[p]; ++p);`)**: This line is executed 1276 times during the slow input, indicating that many doors often have durability equal to zero. This suggests Slavik's repairs might not be keeping up with the reductions in durability.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations from Phase 1, here are the natural language performance invariants:

1. **Frequent Sorting**: "If the array representing door durabilities is sorted frequently due to frequent transitions of door states around the threshold value `x`, performance may degrade significantly. This condition becomes prominent when the durability adjustments keep the doors just around the values that require frequent recalibration (sorting)."

2. **Loop Iterations on Doors**: "The program may experience slow performance if the doors' durabilities are such that they frequently cross the threshold `x`, necessitating repeated checks or updates over all doors. The repeated iteration to find a door with the exact conditions for optimal play contributes to the slowdown."

3. **Excessive Zero Durability Check**: "Performance may degrade when there is a substantial number of doors with zero durability, leading to repetitive checks or adjustments without meaningful progress. This scenario occurs when the repair actions (`y`) are not substantial enough to raise durabilities above zero after each cycle."

These invariants consider scenarios that lead to inefficiencies and not just the maximum input size. The focus is on how the combination of input values and game mechanics can cause repeated costly operations, especially sorting and iteration, which are more intensive when `n` is large and values of `x`, `y`, and initial `a_i` create frequent state changes around critical thresholds.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are policeman and you are playing a game with Slavik. The game is turn-based and each turn consists of two phases. During the first phase you make your move and during the second phase Slavik makes his move.

There are n doors, the i-th door initially has durability equal to a_i.

During your move you can try to break one of the doors. If you choose door i and its current durability is b_i then you reduce its durability to max(0, b_i - x) (the value x is given).

During Slavik's move he tries to repair one of the doors. If he chooses door i and its current durability is b_i then he increases its durability to b_i + y (the value y is given). Slavik cannot repair doors with current durability equal to 0.

The game lasts 10^{100} turns. If some player cannot make his move then he has to skip it.

Your goal is to maximize the number of doors with durability equal to 0 at the end of the game. You can assume that Slavik wants to minimize the number of such doors. What is the number of such doors in the end if you both play optimally?

Input

The first line of the input contains three integers n, x and y (1 ≤ n ≤ 100, 1 ≤ x, y ≤ 10^5) — the number of doors, value x and value y, respectively.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5), where a_i is the initial durability of the i-th door.

Output

Print one integer — the number of doors with durability equal to 0 at the end of the game, if you and Slavik both play optimally.

Examples

Input


6 3 2
2 3 1 3 4 2


Output


6


Input


5 3 3
1 2 4 2 3


Output


2


Input


5 5 6
1 2 6 10 3


Output


2

Note

Clarifications about the optimal strategy will be ignored.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Translating Invariants into Checker Code in C++

Below are the checker functions based on the natural language invariants identified earlier:

1. **Frequent Sorting Invariant Checker**:  
   This checker verifies if the array `a` is sorted repeatedly in a way that might cause degradation due to frequent recalibration around the threshold value `x`.

```cpp
void check_sort_invariant(int sortCount, int n) {
    if (sortCount > n / 2) {  // Arbitrary threshold: sorting more than half the times
        cerr << "Warning: sort_invariant triggered - frequent sorting operations" << endl;
        abort();
    }
}
```

2. **Loop Iterations on Doors Invariant Checker**:  
   This checker monitors if the condition for iterating over doors is triggered frequently, implying repeated checks or updates.

```cpp
void check_loop_invariant(int loopCount, int n) {
    if (loopCount > n * n) {  // Arbitrary threshold: number of iterations exceeds n squared
        cerr << "Warning: loop_invariant triggered - excessive loop iterations" << endl;
        abort();
    }
}
```

3. **Excessive Zero Durability Check Invariant**:  
   This checker watches over the scenario where many doors are repeatedly found with zero durability.

```cpp
void check_zero_durability_invariant(int zeroDurabilityCount, int n) {
    if (zeroDurabilityCount > n * 2) {  // Arbitrary threshold: zero checks exceed twice the number of doors
        cerr << "Warning: zero_durability_invariant triggered - frequent zero durability checks" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now, incorporating these checks into the original program:

```cpp
#include <bits/stdc++.h>
const double PI = acos(-1);
const double EPS = 1e-6;
const long long MOD = 1000000007;
const long long INF = 0x3F3F3F3F;

// Checker functions for performance invariants
void check_sort_invariant(int sortCount, int n) {
    if (sortCount > n / 2) {
        cerr << "Warning: sort_invariant triggered - frequent sorting operations" << endl;
        abort();
    }
}

void check_loop_invariant(int loopCount, int n) {
    if (loopCount > n * n) {
        cerr << "Warning: loop_invariant triggered - excessive loop iterations" << endl;
        abort();
    }
}

void check_zero_durability_invariant(int zeroDurabilityCount, int n) {
    if (zeroDurabilityCount > n * 2) {
        cerr << "Warning: zero_durability_invariant triggered - frequent zero durability checks" << endl;
        abort();
    }
}

template <typename T>
inline T Abs(T x) {
  return x < 0 ? x * -1 : x;
}
template <typename T>
inline T Max(T x, T y, T z) {
  return std::max(std::max(x, y), z);
}
template <typename T>
inline T Min(T x, T y, T z) {
  return std::min(std::min(x, y), z);
}
template <typename T>
inline T Ckmax(T &x, T y) {
  return x = std::max(x, y);
}
template <typename T>
inline T Ckmin(T &x, T y) {
  return x = std::min(x, y);
}
template <typename T>
inline T Sqr(T x) {
  return x * x;
}
template <typename T>
inline T Pow(T x, T y) {
  T r = 1;
  while (y > 0) {
    if (y % 2 > 0) (r *= x) %= MOD;
    (x *= x) %= MOD;
    y /= 2;
  }
  return r % MOD;
}
template <typename T>
T Pow(T x, T y, T z) {
  T r = 1;
  while (y > 0) {
    if (y % 2 > 0) (r *= x) %= z;
    (x *= x) %= z;
    y /= 2;
  }
  return r % z;
}
template <typename T>
inline T gcd(T x, T y) {
  return y > 0 ? gcd(y, x % y) : x;
}
template <typename T>
inline T lcm(T x, T y) {
  return x / gcd(x, y) * y;
}
inline void cinspu(void) {
  std::ios::sync_with_stdio(0);
  std::cin.tie(0);
}
inline long long read(void) {
  char x;
  while (x = getchar(), x != '-' && !isdigit(x))
    ;
  char flg = x == '-';
  long long num = (flg ? getchar() : x) - '0';
  while (isdigit(x = getchar())) (num *= 10) += x - '0';
  return flg ? -num : num;
}
const int N = 5000 + 10;
int a[N];
int main() {
  cinspu();
  int n, x, y;
  std::cin >> n >> x >> y;
  for (int i = 1; i <= n; ++i) std::cin >> a[i];
  if (x > y) {
    std::cout << n << std::endl;
    return 0;
  }
  
  int sortCount = 0;
  int loopCount = 0;
  int zeroDurabilityCount = 0;
  
  for (int ans = 0;;) {
    std::sort(a + 1, a + n + 1);
    sortCount++;
    check_sort_invariant(sortCount, n); // Check for frequent sorting
    
    int p = 1;
    for (; p <= n && a[p] <= x; ++p) {
      loopCount++;
      check_loop_invariant(loopCount, n); // Check for excessive loop iterations
    }
    --p;
    if (!a[p] || a[p] > x) {
      std::cout << ans << std::endl;
      return 0;
    }
    ++ans;
    a[p] = 0;
    
    for (p = 1; p <= n && !a[p]; ++p) {
      zeroDurabilityCount++;
      check_zero_durability_invariant(zeroDurabilityCount, n); // Check for frequent zero durability checks
    }
    
    if (p <= n)
      a[p] += y;
    else {
      std::cout << ans << std::endl;
      return 0;
    }
  }
  return 0;
}
```

### Explanation

- **`check_sort_invariant`** is called after each sort operation to detect if sorting is done excessively.
- **`check_loop_invariant`** monitors how many times the loop iterating over doors is executed. This should help catch performance issues if the loop runs significantly more times than the size of the array.
- **`check_zero_durability_invariant`** is used to monitor how often a door's durability is checked or reset to zero, preventing excessive operations on zero-durability doors.

These checks help pinpoint and abort execution when the program starts exhibiting patterns that can potentially lead to performance bottlenecks, especially when scaled to larger inputs or different input conditions.

