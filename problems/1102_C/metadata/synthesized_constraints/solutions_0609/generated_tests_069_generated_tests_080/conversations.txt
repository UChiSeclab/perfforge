system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are policeman and you are playing a game with Slavik. The game is turn-based and each turn consists of two phases. During the first phase you make your move and during the second phase Slavik makes his move.

There are n doors, the i-th door initially has durability equal to a_i.

During your move you can try to break one of the doors. If you choose door i and its current durability is b_i then you reduce its durability to max(0, b_i - x) (the value x is given).

During Slavik's move he tries to repair one of the doors. If he chooses door i and its current durability is b_i then he increases its durability to b_i + y (the value y is given). Slavik cannot repair doors with current durability equal to 0.

The game lasts 10^{100} turns. If some player cannot make his move then he has to skip it.

Your goal is to maximize the number of doors with durability equal to 0 at the end of the game. You can assume that Slavik wants to minimize the number of such doors. What is the number of such doors in the end if you both play optimally?

Input

The first line of the input contains three integers n, x and y (1 ≤ n ≤ 100, 1 ≤ x, y ≤ 10^5) — the number of doors, value x and value y, respectively.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5), where a_i is the initial durability of the i-th door.

Output

Print one integer — the number of doors with durability equal to 0 at the end of the game, if you and Slavik both play optimally.

Examples

Input


6 3 2
2 3 1 3 4 2


Output


6


Input


5 3 3
1 2 4 2 3


Output


2


Input


5 5 6
1 2 6 10 3


Output


2

Note

Clarifications about the optimal strategy will be ignored.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, x, y;
  cin >> n >> x >> y;
  vector<int> v;
  int count = 0;
  for (int i = 0; i < n; i++) {
    int p;
    cin >> p;
    v.push_back(p);
  }
  if (x > y) {
    cout << n;
    return 0;
  } else {
    sort(v.begin(), v.end());
    for (int i = 0; i < v.size(); i++) {
      v[0] -= x;
      if (v[0] <= 0) {
        count++;
        v.erase(v.begin() + 0);
      }
      v[0] = v[0] + y;
      sort(v.begin(), v.end());
      if (v[0] > x) {
        cout << count << endl;
        return 0;
      }
    }
    cout << count;
    return 0;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 1 2
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1


(G.2) Fast Input

1 2 2
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, x, y; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> x >> y; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  vector<int> v; /* line 6 slow_hit_count: 2, fast_hit_count: 2 */
  int count = 0; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 8 slow_hit_count: 101, fast_hit_count: 2 */
    int p; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> p; /* line 10 slow_hit_count: 100, fast_hit_count: 1 */
    v.push_back(p); /* line 11 slow_hit_count: 100, fast_hit_count: 1 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  if (x > y) { /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
    cout << n; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    sort(v.begin(), v.end()); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
    for (int i = 0; i < v.size(); i++) { /* line 18 slow_hit_count: 50, fast_hit_count: 2 */
      v[0] -= x; /* line 19 slow_hit_count: 50, fast_hit_count: 1 */
      if (v[0] <= 0) { /* line 20 slow_hit_count: 50, fast_hit_count: 1 */
        count++; /* line 21 slow_hit_count: 50, fast_hit_count: 1 */
        v.erase(v.begin() + 0); /* line 22 slow_hit_count: 50, fast_hit_count: 1 */
      } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      v[0] = v[0] + y; /* line 24 slow_hit_count: 50, fast_hit_count: 1 */
      sort(v.begin(), v.end()); /* line 25 slow_hit_count: 50, fast_hit_count: 1 */
      if (v[0] > x) { /* line 26 slow_hit_count: 50, fast_hit_count: 1 */
        cout << count << endl; /* line 27 slow_hit_count: 1, fast_hit_count: 0 */
        return 0; /* line 28 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    cout << count; /* line 31 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 32 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the problem statement, code analysis, and hit count information, let's proceed with the tasks as outlined.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**:
   - Lines within the main loop (`for (int i = 0; i < v.size(); i++)`) have significantly more hits in the slow input than in the fast input. For example, lines 18 and 19 have 50 hits for the slow input but only 2 hits for the fast one.

2. **Pinpoint Significant Lines**:
   - The most notable lines with significant hit count differences are:
     - **Line 18**: `for (int i = 0; i < v.size(); i++)`: This loop iterates over the vector `v`, and its high frequency indicates repeated operations.
     - **Line 25**: `sort(v.begin(), v.end())`: Sorting the vector each iteration of the loop is computationally expensive, especially if the vector has not changed significantly since the last sort.
     - **Line 22**: `v.erase(v.begin() + 0)`: Frequent erasures from the beginning of a vector can lead to performance issues due to shifting elements.

3. **Infer Interaction with Data Structures**:
   - The vector `v` is being repeatedly sorted, and elements are removed from the front. This combination of operations can heavily increase the time complexity, particularly if the vector is initially large and changes minimally in each iteration.
   - The repeated sorting (Line 25) becomes a bottleneck, especially when combined with repeated adjustments to vector size and elements.

### Phase 2: Derive Performance-Characterizing Invariants

Here are potential natural language invariants that describe under what conditions the program may slow down:

1. **Repeated Sorting and Minimal Change**:
   - **Invariant**: "If the vector of door durabilities is frequently sorted while the changes between consecutive states of the vector are minimal, the program may experience significant slowdowns."
   - **Explanation**: This occurs when the damage and repairs on doors are small compared to their initial durabilities, leading to minimal changes in their order after each iteration.

2. **Frequent Vector Modifications**:
   - **Invariant**: "When the vector undergoes repeated modifications, such as frequent insertions or deletions from the front, especially in a loop, it may lead to inefficiencies."
   - **Explanation**: This is due to the linear cost of shifting elements in a vector when performing operations like `erase` from the beginning.

3. **High Iteration Count with Ineffective Breaks**:
   - **Invariant**: "If the loop iterating over doors continues for many iterations while making little progress in reducing effective door count, performance is likely to degrade."
   - **Explanation**: This situation can arise when the durability reduction (`x`) is insufficient relative to repair (`y`), leading to a slow convergence toward zero durability doors.

4. **Combination of Large n and Small x**:
   - **Invariant**: "When the number of doors is at its maximum and the damage per turn (x) is less than or equal to the repair per turn (y), the process of reducing door durability to zero can become inefficient."
   - **Explanation**: This is because Slavik can almost completely negate any damage you do to the doors in each turn, leading to repeated operations.

These invariants highlight how certain input patterns and operational dynamics can lead to performance issues, especially when interacting with specific data structure operations like sorting and modifying vectors.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are policeman and you are playing a game with Slavik. The game is turn-based and each turn consists of two phases. During the first phase you make your move and during the second phase Slavik makes his move.

There are n doors, the i-th door initially has durability equal to a_i.

During your move you can try to break one of the doors. If you choose door i and its current durability is b_i then you reduce its durability to max(0, b_i - x) (the value x is given).

During Slavik's move he tries to repair one of the doors. If he chooses door i and its current durability is b_i then he increases its durability to b_i + y (the value y is given). Slavik cannot repair doors with current durability equal to 0.

The game lasts 10^{100} turns. If some player cannot make his move then he has to skip it.

Your goal is to maximize the number of doors with durability equal to 0 at the end of the game. You can assume that Slavik wants to minimize the number of such doors. What is the number of such doors in the end if you both play optimally?

Input

The first line of the input contains three integers n, x and y (1 ≤ n ≤ 100, 1 ≤ x, y ≤ 10^5) — the number of doors, value x and value y, respectively.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5), where a_i is the initial durability of the i-th door.

Output

Print one integer — the number of doors with durability equal to 0 at the end of the game, if you and Slavik both play optimally.

Examples

Input


6 3 2
2 3 1 3 4 2


Output


6


Input


5 3 3
1 2 4 2 3


Output


2


Input


5 5 6
1 2 6 10 3


Output


2

Note

Clarifications about the optimal strategy will be ignored.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checkers in C++

Here's how you can implement the checkers in C++ based on the performance-characterizing invariants inferred:

#### Repeated Sorting and Minimal Change

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive sorting with minimal changes!" << endl;
        abort();
    }
}
```

#### Frequent Vector Modifications

```cpp
void check_vector_modification_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent modifications on vector!" << endl;
        abort();
    }
}
```

#### High Iteration Count with Ineffective Breaks

```cpp
void check_iteration_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration with ineffective progress!" << endl;
        abort();
    }
}
```

#### Combination of Large n and Small x

```cpp
void check_input_invariant(int n, int x, int y) {
    if (n == 100 && x <= y) {
        cerr << "Warning: Performance bottleneck condition triggered - maximum doors with insufficient break power!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the C++ Program

Now, let's integrate these checkers into the original C++ program.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Define checkers
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive sorting with minimal changes!" << endl;
        abort();
    }
}

void check_vector_modification_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - frequent modifications on vector!" << endl;
        abort();
    }
}

void check_iteration_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration with ineffective progress!" << endl;
        abort();
    }
}

void check_input_invariant(int n, int x, int y) {
    if (n == 100 && x <= y) {
        cerr << "Warning: Performance bottleneck condition triggered - maximum doors with insufficient break power!" << endl;
        abort();
    }
}

// Main program
int main() {
    int n, x, y;
    cin >> n >> x >> y;
    
    // Check input invariant
    check_input_invariant(n, x, y);
    
    vector<int> v;
    int count = 0;
    for (int i = 0; i < n; i++) {
        int p;
        cin >> p;
        v.push_back(p);
    }
    
    if (x > y) {
        cout << n;
        return 0;
    } else {
        sort(v.begin(), v.end());

        // Check sort invariant initially
        check_sort_invariant(v.size() > 1 && x <= y);

        for (int i = 0; i < v.size(); i++) {
            v[0] -= x;

            if (v[0] <= 0) {
                count++;
                v.erase(v.begin() + 0);

                // Check vector modification invariant
                check_vector_modification_invariant(true);
            }

            v[0] = v[0] + y;
            sort(v.begin(), v.end());

            // Check sort invariant after each modification
            check_sort_invariant(v.size() > 1 && x <= y);

            if (v[0] > x) {
                
                // Check iteration invariant
                check_iteration_invariant(i > 100 && x <= y);
                
                cout << count << endl;
                return 0;
            }
        }
        cout << count;
        return 0;
    }
}
```

### Explanation of Instrumentation

- **`check_input_invariant`**: This check is placed right after reading the inputs to catch the problematic scenario where the number of doors is maximum and the damage per turn is insufficient compared to the repair.
- **`check_sort_invariant`** and **`check_vector_modification_invariant`**: These checks are placed around the sorting and vector modification operations. They help detect excessive operations on the vector.
- **`check_iteration_invariant`**: This check is used to detect if the loop is iterating too much without making effective progress.

This instrumentation aims to identify performance bottlenecks efficiently, avoiding overhead in tight loops and focusing on the conditions likely to cause slow execution.

