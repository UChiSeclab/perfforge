system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are policeman and you are playing a game with Slavik. The game is turn-based and each turn consists of two phases. During the first phase you make your move and during the second phase Slavik makes his move.

There are n doors, the i-th door initially has durability equal to a_i.

During your move you can try to break one of the doors. If you choose door i and its current durability is b_i then you reduce its durability to max(0, b_i - x) (the value x is given).

During Slavik's move he tries to repair one of the doors. If he chooses door i and its current durability is b_i then he increases its durability to b_i + y (the value y is given). Slavik cannot repair doors with current durability equal to 0.

The game lasts 10^{100} turns. If some player cannot make his move then he has to skip it.

Your goal is to maximize the number of doors with durability equal to 0 at the end of the game. You can assume that Slavik wants to minimize the number of such doors. What is the number of such doors in the end if you both play optimally?

Input

The first line of the input contains three integers n, x and y (1 ≤ n ≤ 100, 1 ≤ x, y ≤ 10^5) — the number of doors, value x and value y, respectively.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5), where a_i is the initial durability of the i-th door.

Output

Print one integer — the number of doors with durability equal to 0 at the end of the game, if you and Slavik both play optimally.

Examples

Input


6 3 2
2 3 1 3 4 2


Output


6


Input


5 3 3
1 2 4 2 3


Output


2


Input


5 5 6
1 2 6 10 3


Output


2

Note

Clarifications about the optimal strategy will be ignored.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
signed main() {
  long long n;
  cin >> n;
  long long x, y;
  cin >> x >> y;
  multiset<long long> v;
  for (long long i = 0; i < n; i++) {
    long long xx;
    cin >> xx;
    if (xx <= x) {
      v.insert(xx);
    }
  }
  if (x > y) {
    cout << n;
    return 0;
  }
  long long ans = 0;
  while (v.size() > 0) {
    auto it = v.end();
    it--;
    v.erase(it);
    ans++;
    if (v.size() == 0) {
      break;
    }
    it = v.end();
    it--;
    if (*it + y <= x) {
      long long q = *it;
      v.erase(it);
      v.insert(q + y);
    } else {
      v.erase(it);
    }
  }
  cout << ans;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 1 2
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1


(G.2) Fast Input

1 2 2
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  long long n; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  long long x, y; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> x >> y; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  multiset<long long> v; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; i++) { /* line 9 slow_hit_count: 101, fast_hit_count: 2 */
    long long xx; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> xx; /* line 11 slow_hit_count: 100, fast_hit_count: 1 */
    if (xx <= x) { /* line 12 slow_hit_count: 100, fast_hit_count: 1 */
      v.insert(xx); /* line 13 slow_hit_count: 100, fast_hit_count: 1 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  if (x > y) { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
    cout << n; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  while (v.size() > 0) { /* line 21 slow_hit_count: 51, fast_hit_count: 1 */
    auto it = v.end(); /* line 22 slow_hit_count: 50, fast_hit_count: 1 */
    it--; /* line 23 slow_hit_count: 50, fast_hit_count: 1 */
    v.erase(it); /* line 24 slow_hit_count: 50, fast_hit_count: 1 */
    ans++; /* line 25 slow_hit_count: 50, fast_hit_count: 1 */
    if (v.size() == 0) { /* line 26 slow_hit_count: 50, fast_hit_count: 1 */
      break; /* line 27 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    it = v.end(); /* line 29 slow_hit_count: 50, fast_hit_count: 0 */
    it--; /* line 30 slow_hit_count: 50, fast_hit_count: 0 */
    if (*it + y <= x) { /* line 31 slow_hit_count: 50, fast_hit_count: 0 */
      long long q = *it; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      v.erase(it); /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      v.insert(q + y); /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      v.erase(it); /* line 36 slow_hit_count: 50, fast_hit_count: 0 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 40 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance bottlenecks and derive performance-characterizing invariants for the given C program, let's proceed with the two phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Counts Comparison:**
   - Lines within the loop starting at line 21 are hit significantly more often in the slow input than in the fast input.
   - The loop condition `v.size() > 0` at line 21 is evaluated 51 times for the slow input but only once for the fast input.
   - Lines 22-36, which involve iterating over and modifying the multiset `v`, have hit counts indicating repeated operations.

2. **Pinpointing Problematic Code:**
   - The multiset operations within the loop (find, erase, insert) suggest that the repeated handling of elements in `v` (particularly the largest element) is expensive.
   - The performance bottleneck seems to be in maintaining and updating the multiset and the conditions leading to these operations.

3. **Data Structure Interaction:**
   - The multiset `v` is being manipulated in a way that each iteration of the while loop involves costly operations such as finding and erasing the largest element.
   - This pattern suggests that when the size of `v` is large or when `x` and `y` are such that Slavik's repair action frequently undoes the player's breaking action, performance degrades.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the provided code and analysis, the following performance-characterizing invariants can be formulated:

1. **Invariant #1: High Repair vs. Break Frequency**
   - **Natural Language Description:** "If the repair value `y` is greater than the break value `x`, and the initial durabilities `a_i` are small relative to `x`, the repair actions will frequently restore the doors, causing the game to take significantly longer."
   - **Explanation:** When `y > x`, Slavik can almost always repair the door beyond the point of breakage achieved in the player's turn, causing an extended loop of operations.

2. **Invariant #2: Repeated Multiset Operations**
   - **Natural Language Description:** "If the size of the multiset `v` remains large because the conditions for reducing durability to zero are infrequently met, the multiset operations will lead to performance issues."
   - **Explanation:** Since multiset operations like `erase` and `insert` are costly, especially when repeatedly targeting the largest element, maintaining or frequently modifying a large multiset results in slow performance.

3. **Invariant #3: Balance Between `x` and `y`**
   - **Natural Language Description:** "If `x` is not significantly larger than `y`, then the cycle of breaking and repairing becomes inefficient, particularly if the number of doors `n` leads to many iterations."
   - **Explanation:** The relative sizes of `x` and `y` determine how quickly doors can be broken down to zero. When `x` is only slightly larger than `y`, the game dynamics allow for prolonged repair and breaking cycles.

These invariants outline the conditions under which the game becomes slow, helping to identify and predict future slow scenarios without relying on specific instance values from inputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are policeman and you are playing a game with Slavik. The game is turn-based and each turn consists of two phases. During the first phase you make your move and during the second phase Slavik makes his move.

There are n doors, the i-th door initially has durability equal to a_i.

During your move you can try to break one of the doors. If you choose door i and its current durability is b_i then you reduce its durability to max(0, b_i - x) (the value x is given).

During Slavik's move he tries to repair one of the doors. If he chooses door i and its current durability is b_i then he increases its durability to b_i + y (the value y is given). Slavik cannot repair doors with current durability equal to 0.

The game lasts 10^{100} turns. If some player cannot make his move then he has to skip it.

Your goal is to maximize the number of doors with durability equal to 0 at the end of the game. You can assume that Slavik wants to minimize the number of such doors. What is the number of such doors in the end if you both play optimally?

Input

The first line of the input contains three integers n, x and y (1 ≤ n ≤ 100, 1 ≤ x, y ≤ 10^5) — the number of doors, value x and value y, respectively.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5), where a_i is the initial durability of the i-th door.

Output

Print one integer — the number of doors with durability equal to 0 at the end of the game, if you and Slavik both play optimally.

Examples

Input


6 3 2
2 3 1 3 4 2


Output


6


Input


5 3 3
1 2 4 2 3


Output


2


Input


5 5 6
1 2 6 10 3


Output


2

Note

Clarifications about the optimal strategy will be ignored.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived previously, here are the C++ code snippets for runtime checks:

1. **Invariant #1: High Repair vs. Break Frequency**
   ```cpp
   void check_high_repair_vs_break(long long x, long long y, const multiset<long long>& v) {
       if (y > x && !v.empty()) {
           cerr << "Warning: Performance bottleneck condition triggered - repair value is greater than break value." << endl;
           abort();
       }
   }
   ```

2. **Invariant #2: Repeated Multiset Operations**
   ```cpp
   void check_repeated_multiset_operations(const multiset<long long>& v) {
       if (v.size() > 50) { // Assuming if more than half the doors remain active, it's a bottleneck
           cerr << "Warning: Performance bottleneck condition triggered - large multiset operations." << endl;
           abort();
       }
   }
   ```

3. **Invariant #3: Balance Between `x` and `y`**
   ```cpp
   void check_balance_between_x_and_y(long long x, long long y) {
       if (x <= y) {
           cerr << "Warning: Performance bottleneck condition triggered - inefficient break vs. repair values." << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checks into the Original Program

Below is the original C++ program with the integrated runtime checks for performance bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for Invariant #1
void check_high_repair_vs_break(long long x, long long y, const multiset<long long>& v) {
    if (y > x && !v.empty()) {
        cerr << "Warning: Performance bottleneck condition triggered - repair value is greater than break value." << endl;
        abort();
    }
}

// Checker function for Invariant #2
void check_repeated_multiset_operations(const multiset<long long>& v) {
    if (v.size() > 50) { // Assuming if more than half the doors remain active, it's a bottleneck
        cerr << "Warning: Performance bottleneck condition triggered - large multiset operations." << endl;
        abort();
    }
}

// Checker function for Invariant #3
void check_balance_between_x_and_y(long long x, long long y) {
    if (x <= y) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient break vs. repair values." << endl;
        abort();
    }
}

signed main() {
    long long n;
    cin >> n;
    long long x, y;
    cin >> x >> y;
    multiset<long long> v;
    for (long long i = 0; i < n; i++) {
        long long xx;
        cin >> xx;
        if (xx <= x) {
            v.insert(xx);
        }
    }

    // Insert checks after reading inputs and initial filtering
    check_balance_between_x_and_y(x, y);
    check_high_repair_vs_break(x, y, v);

    if (x > y) {
        cout << n;
        return 0;
    }

    long long ans = 0;
    while (v.size() > 0) {
        auto it = v.end();
        it--;
        v.erase(it);
        ans++;

        // Check for repeated multiset operations
        check_repeated_multiset_operations(v);

        if (v.size() == 0) {
            break;
        }
        it = v.end();
        it--;
        if (*it + y <= x) {
            long long q = *it;
            v.erase(it);
            v.insert(q + y);
        } else {
            v.erase(it);
        }
    }
    cout << ans;
}
```

### Explanation

- **Placement of Checks:** 
  - `check_balance_between_x_and_y()` and `check_high_repair_vs_break()` are placed right after reading inputs and initial setup to ensure they catch conditions that might lead to inefficiencies early on.
  - `check_repeated_multiset_operations()` is placed inside the loop to monitor the multiset size dynamically and prevent excessive operations as the loop proceeds.

- **Thresholds and Conditions:**
  - For `check_repeated_multiset_operations()`, the threshold is set at more than 50 based on the understanding that having more than half of the doors still active can indicate inefficiencies.
  - These checks are designed not only to detect current performance issues but to aid in future inputs that may cause similar slowdowns.

