system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are policeman and you are playing a game with Slavik. The game is turn-based and each turn consists of two phases. During the first phase you make your move and during the second phase Slavik makes his move.

There are n doors, the i-th door initially has durability equal to a_i.

During your move you can try to break one of the doors. If you choose door i and its current durability is b_i then you reduce its durability to max(0, b_i - x) (the value x is given).

During Slavik's move he tries to repair one of the doors. If he chooses door i and its current durability is b_i then he increases its durability to b_i + y (the value y is given). Slavik cannot repair doors with current durability equal to 0.

The game lasts 10^{100} turns. If some player cannot make his move then he has to skip it.

Your goal is to maximize the number of doors with durability equal to 0 at the end of the game. You can assume that Slavik wants to minimize the number of such doors. What is the number of such doors in the end if you both play optimally?

Input

The first line of the input contains three integers n, x and y (1 ≤ n ≤ 100, 1 ≤ x, y ≤ 10^5) — the number of doors, value x and value y, respectively.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5), where a_i is the initial durability of the i-th door.

Output

Print one integer — the number of doors with durability equal to 0 at the end of the game, if you and Slavik both play optimally.

Examples

Input


6 3 2
2 3 1 3 4 2


Output


6


Input


5 3 3
1 2 4 2 3


Output


2


Input


5 5 6
1 2 6 10 3


Output


2

Note

Clarifications about the optimal strategy will be ignored.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int n, x, y;
  cin >> n >> x >> y;
  int a[100];
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }
  if (x > y) {
    cout << n;
    return 0;
  }
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n - 1; j++) {
      if (a[j] > a[j + 1]) {
        int temp = a[j];
        a[j] = a[j + 1];
        a[j + 1] = temp;
      }
    }
  }
  int num = 0;
  for (int i = 0; i < n; i++) {
    if (a[i] > x) break;
    num++;
  }
  if (num % 2 == 1) cout << num / 2 + 1;
  if (num % 2 == 0) cout << num / 2;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 2 2
1 73456 13268 11914 2 1 2 1 1 2 1 1 87480 65464 2 40468 7016 70750 28675 92808 74100 22702 47484 22345 61255 1 104206 62017 89058 61094 55901 1 171051 98876 97451 18228 2 2 1 38979 1 144831 1 43289 73591 2 1 91061 89577 13598 1 2 2 57020 2 82044 24974 1 1 958 8399 1 98709 10870 1 66150 2 79527 2 2 36570 2 36184 49694 10684 1 58367 1 4764 1 69648 27938 30022 81474 79332 3180 58977 12594 25682 40434 22585 35248 1 2 10355 1 64044 1 2 92565


(G.2) Fast Input

1 2 2
1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int n, x, y; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> x >> y; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int a[100]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 7 slow_hit_count: 101, fast_hit_count: 2 */
    cin >> a[i]; /* line 8 slow_hit_count: 100, fast_hit_count: 1 */
  } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  if (x > y) { /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
    cout << n; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 14 slow_hit_count: 101, fast_hit_count: 2 */
    for (int j = 0; j < n - 1; j++) { /* line 15 slow_hit_count: 10000, fast_hit_count: 1 */
      if (a[j] > a[j + 1]) { /* line 16 slow_hit_count: 9900, fast_hit_count: 0 */
        int temp = a[j]; /* line 17 slow_hit_count: 2307, fast_hit_count: 0 */
        a[j] = a[j + 1]; /* line 18 slow_hit_count: 2307, fast_hit_count: 0 */
        a[j + 1] = temp; /* line 19 slow_hit_count: 2307, fast_hit_count: 0 */
      } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  int num = 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 24 slow_hit_count: 40, fast_hit_count: 2 */
    if (a[i] > x) break; /* line 25 slow_hit_count: 40, fast_hit_count: 1 */
    num++; /* line 26 slow_hit_count: 39, fast_hit_count: 1 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  if (num % 2 == 1) cout << num / 2 + 1; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  if (num % 2 == 0) cout << num / 2; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 31 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the given C code and the corresponding hit counts for both the slow and fast inputs, the following observations can be made:

1. **Bubble Sort (Lines 14-22):** The lines within the nested loops (lines 14-19) indicate a bubble sort operation. The inner loop (line 15) alone has a hit count of 10,000 for the slow input, compared to only 1 hit for the fast input. This is a significant increase, showing that the bubble sort is a major contributor to the slowdown.
2. **Condition Check and Swap (Lines 16-19):** The condition check (line 16) and the swap operations (lines 17-19) are also hit a significant number of times for the slow input (9,900 and 2,307 hits respectively), while they are not hit at all for the fast input. This indicates that the sort operation is actively engaging with the data for the slow input.
3. **Initial Door Durability Check (Lines 24-26):** The loop that checks door durability against `x` (lines 24-26) is executed 40 times for the slow input but only twice for the fast input. This suggests that more doors have a durability less than or equal to `x` in the slow input, prompting more iterations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, the following natural language performance invariants can be derived:

1. **Sorting Inefficiently (Bubble Sort):**
   - Natural Language Description: "If there are many doors, and their initial durability values are not sorted, the bubble sort operation will engage in a large number of swaps, significantly slowing down the program."
   - This invariant is triggered when the number of doors (`n`) is high (approaching the upper limit of 100), and the initial sequence of durability values is unordered, leading to an extensive bubble sort operation.

2. **High Number of Low Durability Doors:**
   - Natural Language Description: "If a substantial number of doors have initial durability less than or equal to `x`, the loop checking these conditions will iterate multiple times, contributing to the slowdown."
   - This invariant is observed when a large portion of the doors have their initial durability values less than or equal to the decrement value `x`, leading to multiple iterations in the loop on lines 24-26.

3. **Repeated Door Processing:**
   - Natural Language Description: "When multiple doors have similar durability values, the logic for handling doors (such as reducing durability or swapping) is repeatedly triggered, increasing computation time."
   - This invariant manifests when there are numerous doors with similar durability values, causing repeated engagements with the logic intended to process or order these doors, as seen in the sorting phase.

These performance-characterizing invariants abstract the conditions leading to slow execution while maintaining adherence to the problem constraints (e.g., `n <= 100`). By focusing on unordered inputs or many low durability doors, they highlight potential slow paths without relying on exact numeric values from the slow input.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are policeman and you are playing a game with Slavik. The game is turn-based and each turn consists of two phases. During the first phase you make your move and during the second phase Slavik makes his move.

There are n doors, the i-th door initially has durability equal to a_i.

During your move you can try to break one of the doors. If you choose door i and its current durability is b_i then you reduce its durability to max(0, b_i - x) (the value x is given).

During Slavik's move he tries to repair one of the doors. If he chooses door i and its current durability is b_i then he increases its durability to b_i + y (the value y is given). Slavik cannot repair doors with current durability equal to 0.

The game lasts 10^{100} turns. If some player cannot make his move then he has to skip it.

Your goal is to maximize the number of doors with durability equal to 0 at the end of the game. You can assume that Slavik wants to minimize the number of such doors. What is the number of such doors in the end if you both play optimally?

Input

The first line of the input contains three integers n, x and y (1 ≤ n ≤ 100, 1 ≤ x, y ≤ 10^5) — the number of doors, value x and value y, respectively.

The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5), where a_i is the initial durability of the i-th door.

Output

Print one integer — the number of doors with durability equal to 0 at the end of the game, if you and Slavik both play optimally.

Examples

Input


6 3 2
2 3 1 3 4 2


Output


6


Input


5 3 3
1 2 4 2 3


Output


2


Input


5 5 6
1 2 6 10 3


Output


2

Note

Clarifications about the optimal strategy will be ignored.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Based on the performance-characterizing invariants derived in natural language, we can produce the following C++ code to check each condition at runtime:

1. **Sorting Inefficiently (Bubble Sort):**
   - Check if a large number of swaps is required, indicating inefficient sorting due to unordered input.

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - excessive swaps due to unordered input" << endl;
        abort();
    }
}
```

2. **High Number of Low Durability Doors:**
   - Check if a substantial portion of the doors have initial durability less than or equal to `x`.

```cpp
void check_low_durability_invariant(int count, int n) {
    if (count > n / 2) {
        cerr << "Warning: low_durability_invariant triggered - many doors have low durability" << endl;
        abort();
    }
}
```

3. **Repeated Door Processing:**
   - Not explicitly checked in the given code, as it relates more to the logic of breaking and repairing doors during the game rather than during initial sorting and setup.

### Phase 4: Integrate Checkers into the Original C++ Program

Now, I'll integrate the checkers into the original C++ code at appropriate points to avoid overhead in tight loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for excessive swaps
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - excessive swaps due to unordered input" << endl;
        abort();
    }
}

// Checker function for many low durability doors
void check_low_durability_invariant(int count, int n) {
    if (count > n / 2) {
        cerr << "Warning: low_durability_invariant triggered - many doors have low durability" << endl;
        abort();
    }
}

int main() {
    int n, x, y;
    cin >> n >> x >> y;
    int a[100];
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    
    if (x > y) {
        cout << n;
        return 0;
    }
    
    // Count low durability doors
    int lowDurabilityCount = 0;
    for (int i = 0; i < n; i++) {
        if (a[i] <= x) {
            lowDurabilityCount++;
        }
    }

    // Check for performance bottleneck due to low durability
    check_low_durability_invariant(lowDurabilityCount, n);

    // Bubble sort
    int swapCount = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n - 1; j++) {
            if (a[j] > a[j + 1]) {
                int temp = a[j];
                a[j] = a[j + 1];
                a[j + 1] = temp;
                swapCount++;
            }
        }
    }

    // Check for performance bottleneck due to sorting
    check_sort_invariant(swapCount > n * (n - 1) / 4); // Some threshold for excessive swaps

    int num = 0;
    for (int i = 0; i < n; i++) {
        if (a[i] > x) break;
        num++;
    }

    if (num % 2 == 1) {
        cout << num / 2 + 1;
    }
    if (num % 2 == 0) {
        cout << num / 2;
    }
    
    return 0;
}
```

### Explanation of Integrations

- **Low Durability Checker (Lines 18-23):** This check is placed after reading input and before sorting to identify if a significant portion of doors are low durability.
- **Sort Checker (Lines 30-34):** This check evaluates performance after sorting, looking for excessive swap operations, which indicates initial unsorted conditions. 

These checks will help detect slow execution paths in the program by monitoring for specific conditions that were identified as potential bottlenecks.

