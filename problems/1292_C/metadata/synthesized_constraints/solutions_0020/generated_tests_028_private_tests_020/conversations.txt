system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

[INSPION FullBand Master - INSPION](https://www.youtube.com/watch?v=kwsciXm_7sA)

[INSPION - IOLITE-SUNSTONE](https://www.youtube.com/watch?v=kwsciXm_7sA)

On another floor of the A.R.C. Markland-N, the young man Simon "Xenon" Jackson, takes a break after finishing his project early (as always). Having a lot of free time, he decides to put on his legendary hacker "X" instinct and fight against the gangs of the cyber world.

His target is a network of n small gangs. This network contains exactly n - 1 direct links, each of them connecting two gangs together. The links are placed in such a way that every pair of gangs is connected through a sequence of direct links.

By mining data, Xenon figured out that the gangs used a form of cross-encryption to avoid being busted: every link was assigned an integer from 0 to n - 2 such that all assigned integers are distinct and every integer was assigned to some link. If an intruder tries to access the encrypted data, they will have to surpass S password layers, with S being defined by the following formula:

$$$S = ∑_{1 ≤ u < v ≤ n} mex(u, v)$$$

Here, mex(u, v) denotes the smallest non-negative integer that does not appear on any link on the unique simple path from gang u to gang v.

Xenon doesn't know the way the integers are assigned, but it's not a problem. He decides to let his AI's instances try all the passwords on his behalf, but before that, he needs to know the maximum possible value of S, so that the AIs can be deployed efficiently.

Now, Xenon is out to write the AI scripts, and he is expected to finish them in two hours. Can you find the maximum possible S before he returns?

Input

The first line contains an integer n (2 ≤ n ≤ 3000), the number of gangs in the network.

Each of the next n - 1 lines contains integers u_i and v_i (1 ≤ u_i, v_i ≤ n; u_i ≠ v_i), indicating there's a direct link between gangs u_i and v_i.

It's guaranteed that links are placed in such a way that each pair of gangs will be connected by exactly one simple path.

Output

Print the maximum possible value of S — the number of password layers in the gangs' network.

Examples

Input


3
1 2
2 3


Output


3


Input


5
1 2
1 3
1 4
3 5


Output


10

Note

In the first example, one can achieve the maximum S with the following assignment:

<image>

With this assignment, mex(1, 2) = 0, mex(1, 3) = 2 and mex(2, 3) = 1. Therefore, S = 0 + 2 + 1 = 3.

In the second example, one can achieve the maximum S with the following assignment:

<image>

With this assignment, all non-zero mex value are listed below: 

  * mex(1, 3) = 1 
  * mex(1, 5) = 2 
  * mex(2, 3) = 1 
  * mex(2, 5) = 2 
  * mex(3, 4) = 1 
  * mex(4, 5) = 3 



Therefore, S = 1 + 2 + 1 + 2 + 1 + 3 = 10.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int MN = 3e3 + 7;
long long dp[MN][MN];
int mx = 1, st[MN][MN], par[MN][MN], mark[MN];
vector<int> g[MN];
void dfs(int now, int z) {
  st[now][z] = 1;
  for (int i = 0; i < g[now].size(); i++) {
    if (!st[g[now][i]][z]) {
      dfs(g[now][i], z);
      par[g[now][i]][z] = now;
      st[now][z] += st[g[now][i]][z];
    }
  }
}
void dfs_(int now, int dis) {
  mark[now] = dis;
  for (int i = 0; i < g[now].size(); i++) {
    if (!mark[g[now][i]]) {
      dfs_(g[now][i], dis + 1);
    }
  }
}
signed main() {
  int n;
  cin >> n;
  for (int i = 1; i < n; i++) {
    int x, y;
    cin >> x >> y;
    x--;
    y--;
    g[x].push_back(y);
    g[y].push_back(x);
  }
  for (int i = 0; i < n; i++) {
    dfs(i, i);
  }
  vector<pair<int, pair<int, int> > > v;
  for (int i = 0; i < n; i++) {
    dfs_(i, 1);
    for (int j = 0; j < n; j++) {
      if (i == j) continue;
      v.push_back({mark[j], {i, j}});
    }
    memset(mark, 0, sizeof mark);
  }
  sort(v.begin(), v.end());
  long long mx = 1;
  for (int i = 0; i < v.size(); i++) {
    int s = v[i].second.second, f = v[i].second.first;
    dp[f][s] = dp[s][f] =
        0ll + st[s][f] * st[f][s] + max(dp[s][par[f][s]], dp[f][par[s][f]]);
    mx = max(mx, dp[f][s]);
  }
  cout << mx << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50
21 10
30 22
3 37
37 32
4 27
18 7
2 30
29 19
6 37
12 39
47 25
41 49
45 9
25 48
16 14
9 7
33 28
3 31
34 10
35 37
27 40
45 16
29 44
16 15
26 15
1 12
2 13
15 21
43 14
9 33
44 15
46 1
38 5
15 5
1 32
42 35
20 27
23 8
1 16
15 17
36 50
13 8
49 45
11 2
24 4
36 15
15 30
16 4
25 37


(G.2) Fast Input

10
2 8
5 10
3 4
1 6
3 9
1 7
4 8
10 8
1 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int MN = 3e3 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[MN][MN]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int mx = 1, st[MN][MN], par[MN][MN], mark[MN]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> g[MN]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(int now, int z) { /* line 7 slow_hit_count: 2500, fast_hit_count: 100 */
  st[now][z] = 1; /* line 8 slow_hit_count: 2500, fast_hit_count: 100 */
  for (int i = 0; i < g[now].size(); i++) { /* line 9 slow_hit_count: 7400, fast_hit_count: 280 */
    if (!st[g[now][i]][z]) { /* line 10 slow_hit_count: 4900, fast_hit_count: 180 */
      dfs(g[now][i], z); /* line 11 slow_hit_count: 2450, fast_hit_count: 90 */
      par[g[now][i]][z] = now; /* line 12 slow_hit_count: 2450, fast_hit_count: 90 */
      st[now][z] += st[g[now][i]][z]; /* line 13 slow_hit_count: 2450, fast_hit_count: 90 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 16 slow_hit_count: 2500, fast_hit_count: 100 */
void dfs_(int now, int dis) { /* line 17 slow_hit_count: 2500, fast_hit_count: 100 */
  mark[now] = dis; /* line 18 slow_hit_count: 2500, fast_hit_count: 100 */
  for (int i = 0; i < g[now].size(); i++) { /* line 19 slow_hit_count: 7400, fast_hit_count: 280 */
    if (!mark[g[now][i]]) { /* line 20 slow_hit_count: 4900, fast_hit_count: 180 */
      dfs_(g[now][i], dis + 1); /* line 21 slow_hit_count: 2450, fast_hit_count: 90 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 24 slow_hit_count: 2500, fast_hit_count: 100 */
signed main() { /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i < n; i++) { /* line 28 slow_hit_count: 50, fast_hit_count: 10 */
    int x, y; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> y; /* line 30 slow_hit_count: 49, fast_hit_count: 9 */
    x--; /* line 31 slow_hit_count: 49, fast_hit_count: 9 */
    y--; /* line 32 slow_hit_count: 49, fast_hit_count: 9 */
    g[x].push_back(y); /* line 33 slow_hit_count: 49, fast_hit_count: 9 */
    g[y].push_back(x); /* line 34 slow_hit_count: 49, fast_hit_count: 9 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 36 slow_hit_count: 51, fast_hit_count: 11 */
    dfs(i, i); /* line 37 slow_hit_count: 50, fast_hit_count: 10 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  vector<pair<int, pair<int, int> > > v; /* line 39 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) { /* line 40 slow_hit_count: 51, fast_hit_count: 11 */
    dfs_(i, 1); /* line 41 slow_hit_count: 50, fast_hit_count: 10 */
    for (int j = 0; j < n; j++) { /* line 42 slow_hit_count: 2550, fast_hit_count: 110 */
      if (i == j) continue; /* line 43 slow_hit_count: 2500, fast_hit_count: 100 */
      v.push_back({mark[j], {i, j}}); /* line 44 slow_hit_count: 2450, fast_hit_count: 90 */
    } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    memset(mark, 0, sizeof mark); /* line 46 slow_hit_count: 50, fast_hit_count: 10 */
  } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  sort(v.begin(), v.end()); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  long long mx = 1; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < v.size(); i++) { /* line 50 slow_hit_count: 2451, fast_hit_count: 91 */
    int s = v[i].second.second, f = v[i].second.first; /* line 51 slow_hit_count: 2450, fast_hit_count: 90 */
    dp[f][s] = dp[s][f] = /* line 52 slow_hit_count: 2450, fast_hit_count: 90 */
        0ll + st[s][f] * st[f][s] + max(dp[s][par[f][s]], dp[f][par[s][f]]); /* line 53 slow_hit_count: 2450, fast_hit_count: 90 */
    mx = max(mx, dp[f][s]); /* line 54 slow_hit_count: 2450, fast_hit_count: 90 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  cout << mx << endl; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 57 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Based on the analysis of the provided C code and its line-level hit counts for both the slow and fast inputs, we can identify the following performance bottlenecks:

### Phase 1: Identify Expensive or Inefficient Code Segments
1. **DFS Functions (`dfs` and `dfs_`):**
   - The DFS function (`dfs`) is invoked `n` times, and within each invocation, it potentially explores a significant portion of the graph. The lines within the `dfs` function have a high hit count, particularly lines 9 to 13, indicating extensive traversal during the exploration of the graph's connectivity.
   - Similarly, the `dfs_` function has high hit counts for lines 18, 19, and 21, suggesting that it also performs significant graph traversal.

2. **Nested Loops Over Vertices (`lines 40-46`):**
   - The loops around lines 40-44, particularly the nested loop, result in a high number of operations (as demonstrated by the high hit counts). These operations are performed for each node, iterating over all other nodes, which scales poorly with `n`.

3. **Sorting Operation (`line 48`):**
   - The `sort` operation on line 48 could be significant for larger sizes of `v`, which is populated by the nested loops above. Sorting complexity is generally `O(n log n)`, and for large `n`, this can become a bottleneck.

### Phase 2: Derive Performance-Characterizing Invariants
From the above analysis, we derive the following natural language performance-characterizing invariants:

1. **Increased DFS Traversals:**
   - **Invariant:** "If the graph has a high number of nodes close to the maximum constraint (n close to 3000), extensive depth-first search operations on all nodes can lead to performance degradation due to repeated and lengthy traversals."
   - **Explanation:** The `dfs` and `dfs_` functions are repeatedly called for each node, and their operations scale with the size of the graph.

2. **High Interaction Between Nodes:**
   - **Invariant:** "When the number of nodes is large, iterating over every pair of nodes to calculate paths or metrics results in nested loop operations that can significantly increase computational time."
   - **Explanation:** The loops in lines 40-46, which operate over all pairs of nodes, lead to performance issues as `n` increases, particularly noticeable when `n` is near the upper constraint.

3. **Large Data Handling in Sorting:**
   - **Invariant:** "As the number of pairs stored in the vector increases, the sorting operation may become a bottleneck, especially close to the maximum node constraint."
   - **Explanation:** The `sort` on line 48 is significant when dealing with large datasets, as it processes pairs derived from the nested loops, affected by `n`.

By focusing on these invariants, we can guide improvements or targeted testing to expose and mitigate slow paths in similar problem instances.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
[INSPION FullBand Master - INSPION](https://www.youtube.com/watch?v=kwsciXm_7sA)

[INSPION - IOLITE-SUNSTONE](https://www.youtube.com/watch?v=kwsciXm_7sA)

On another floor of the A.R.C. Markland-N, the young man Simon "Xenon" Jackson, takes a break after finishing his project early (as always). Having a lot of free time, he decides to put on his legendary hacker "X" instinct and fight against the gangs of the cyber world.

His target is a network of n small gangs. This network contains exactly n - 1 direct links, each of them connecting two gangs together. The links are placed in such a way that every pair of gangs is connected through a sequence of direct links.

By mining data, Xenon figured out that the gangs used a form of cross-encryption to avoid being busted: every link was assigned an integer from 0 to n - 2 such that all assigned integers are distinct and every integer was assigned to some link. If an intruder tries to access the encrypted data, they will have to surpass S password layers, with S being defined by the following formula:

$$$S = ∑_{1 ≤ u < v ≤ n} mex(u, v)$$$

Here, mex(u, v) denotes the smallest non-negative integer that does not appear on any link on the unique simple path from gang u to gang v.

Xenon doesn't know the way the integers are assigned, but it's not a problem. He decides to let his AI's instances try all the passwords on his behalf, but before that, he needs to know the maximum possible value of S, so that the AIs can be deployed efficiently.

Now, Xenon is out to write the AI scripts, and he is expected to finish them in two hours. Can you find the maximum possible S before he returns?

Input

The first line contains an integer n (2 ≤ n ≤ 3000), the number of gangs in the network.

Each of the next n - 1 lines contains integers u_i and v_i (1 ≤ u_i, v_i ≤ n; u_i ≠ v_i), indicating there's a direct link between gangs u_i and v_i.

It's guaranteed that links are placed in such a way that each pair of gangs will be connected by exactly one simple path.

Output

Print the maximum possible value of S — the number of password layers in the gangs' network.

Examples

Input


3
1 2
2 3


Output


3


Input


5
1 2
1 3
1 4
3 5


Output


10

Note

In the first example, one can achieve the maximum S with the following assignment:

<image>

With this assignment, mex(1, 2) = 0, mex(1, 3) = 2 and mex(2, 3) = 1. Therefore, S = 0 + 2 + 1 = 3.

In the second example, one can achieve the maximum S with the following assignment:

<image>

With this assignment, all non-zero mex value are listed below: 

  * mex(1, 3) = 1 
  * mex(1, 5) = 2 
  * mex(2, 3) = 1 
  * mex(2, 5) = 2 
  * mex(3, 4) = 1 
  * mex(4, 5) = 3 



Therefore, S = 1 + 2 + 1 + 2 + 1 + 3 = 10.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants in C++

Based on the natural language invariants derived earlier, we will now implement C++ code for each invariant to detect potential performance bottlenecks.

1. **Increased DFS Traversals:**

   - **Invariant:** "If the graph has a high number of nodes close to the maximum constraint (n close to 3000), extensive depth-first search operations on all nodes can lead to performance degradation due to repeated and lengthy traversals."

   ```cpp
   void check_dfs_invariant(int n) {
       if (n > 2500) {  // Arbitrary, but close to the upper limit
           cerr << "Warning: dfs_invariant triggered - high node count may lead to excessive DFS traversals" << endl;
           abort();
       }
   }
   ```

2. **High Interaction Between Nodes:**

   - **Invariant:** "When the number of nodes is large, iterating over every pair of nodes to calculate paths or metrics results in nested loop operations that can significantly increase computational time."

   ```cpp
   void check_interaction_invariant(int n) {
       if (n > 2500) {  // Checking if n is large, close to maximum
           cerr << "Warning: interaction_invariant triggered - high number of nodes may cause excessive nested loops" << endl;
           abort();
       }
   }
   ```

3. **Large Data Handling in Sorting:**

   - **Invariant:** "As the number of pairs stored in the vector increases, the sorting operation may become a bottleneck, especially close to the maximum node constraint."

   ```cpp
   void check_sort_invariant(int n, int pairCount) {
       if (pairCount > n * (n - 1) / 2 * 0.8) {  // Arbitrary threshold, e.g., 80% of maximum pairs
           cerr << "Warning: sort_invariant triggered - large number of pairs being sorted" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checks into the Original Program

Now, we'll integrate these checks into the original C++ program at appropriate points to avoid overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

const int MN = 3e3 + 7;
long long dp[MN][MN];
int mx = 1, st[MN][MN], par[MN][MN], mark[MN];
vector<int> g[MN];

void dfs(int now, int z) {
    st[now][z] = 1;
    for (int i = 0; i < g[now].size(); i++) {
        if (!st[g[now][i]][z]) {
            dfs(g[now][i], z);
            par[g[now][i]][z] = now;
            st[now][z] += st[g[now][i]][z];
        }
    }
}

void dfs_(int now, int dis) {
    mark[now] = dis;
    for (int i = 0; i < g[now].size(); i++) {
        if (!mark[g[now][i]]) {
            dfs_(g[now][i], dis + 1);
        }
    }
}

void check_dfs_invariant(int n) {
    if (n > 2500) {  // Arbitrary, but close to the upper limit
        cerr << "Warning: dfs_invariant triggered - high node count may lead to excessive DFS traversals" << endl;
        abort();
    }
}

void check_interaction_invariant(int n) {
    if (n > 2500) {  // Checking if n is large, close to maximum
        cerr << "Warning: interaction_invariant triggered - high number of nodes may cause excessive nested loops" << endl;
        abort();
    }
}

void check_sort_invariant(int n, int pairCount) {
    if (pairCount > n * (n - 1) / 2 * 0.8) {  // Arbitrary threshold, e.g., 80% of maximum pairs
        cerr << "Warning: sort_invariant triggered - large number of pairs being sorted" << endl;
        abort();
    }
}

signed main() {
    int n;
    cin >> n;

    check_dfs_invariant(n);  // Check for DFS-related bottleneck
    check_interaction_invariant(n);  // Check for interaction-related bottleneck

    for (int i = 1; i < n; i++) {
        int x, y;
        cin >> x >> y;
        x--;
        y--;
        g[x].push_back(y);
        g[y].push_back(x);
    }

    for (int i = 0; i < n; i++) {
        dfs(i, i);
    }

    vector<pair<int, pair<int, int>>> v;
    for (int i = 0; i < n; i++) {
        dfs_(i, 1);
        for (int j = 0; j < n; j++) {
            if (i == j) continue;
            v.push_back({mark[j], {i, j}});
        }
        memset(mark, 0, sizeof mark);
    }

    check_sort_invariant(n, v.size());  // Check before sorting

    sort(v.begin(), v.end());

    long long mx = 1;
    for (int i = 0; i < v.size(); i++) {
        int s = v[i].second.second, f = v[i].second.first;
        dp[f][s] = dp[s][f] =
            0ll + st[s][f] * st[f][s] + max(dp[s][par[f][s]], dp[f][par[s][f]]);
        mx = max(mx, dp[f][s]);
    }
    cout << mx << endl;
}
```

**Explanation of Check Integration:**

- **DFS Check (`check_dfs_invariant`)**: Placed after reading `n` to detect potentially excessive DFS traversal when `n` is high.
- **Interaction Check (`check_interaction_invariant`)**: Also placed after reading `n`, addressing potential issues in nested loops.
- **Sort Check (`check_sort_invariant`)**: Placed before sorting, ensuring that the vector size doesn't lead to performance bottlenecks.

