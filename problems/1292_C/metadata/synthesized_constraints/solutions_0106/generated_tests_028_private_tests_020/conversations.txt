system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

[INSPION FullBand Master - INSPION](https://www.youtube.com/watch?v=kwsciXm_7sA)

[INSPION - IOLITE-SUNSTONE](https://www.youtube.com/watch?v=kwsciXm_7sA)

On another floor of the A.R.C. Markland-N, the young man Simon "Xenon" Jackson, takes a break after finishing his project early (as always). Having a lot of free time, he decides to put on his legendary hacker "X" instinct and fight against the gangs of the cyber world.

His target is a network of n small gangs. This network contains exactly n - 1 direct links, each of them connecting two gangs together. The links are placed in such a way that every pair of gangs is connected through a sequence of direct links.

By mining data, Xenon figured out that the gangs used a form of cross-encryption to avoid being busted: every link was assigned an integer from 0 to n - 2 such that all assigned integers are distinct and every integer was assigned to some link. If an intruder tries to access the encrypted data, they will have to surpass S password layers, with S being defined by the following formula:

$$$S = ∑_{1 ≤ u < v ≤ n} mex(u, v)$$$

Here, mex(u, v) denotes the smallest non-negative integer that does not appear on any link on the unique simple path from gang u to gang v.

Xenon doesn't know the way the integers are assigned, but it's not a problem. He decides to let his AI's instances try all the passwords on his behalf, but before that, he needs to know the maximum possible value of S, so that the AIs can be deployed efficiently.

Now, Xenon is out to write the AI scripts, and he is expected to finish them in two hours. Can you find the maximum possible S before he returns?

Input

The first line contains an integer n (2 ≤ n ≤ 3000), the number of gangs in the network.

Each of the next n - 1 lines contains integers u_i and v_i (1 ≤ u_i, v_i ≤ n; u_i ≠ v_i), indicating there's a direct link between gangs u_i and v_i.

It's guaranteed that links are placed in such a way that each pair of gangs will be connected by exactly one simple path.

Output

Print the maximum possible value of S — the number of password layers in the gangs' network.

Examples

Input


3
1 2
2 3


Output


3


Input


5
1 2
1 3
1 4
3 5


Output


10

Note

In the first example, one can achieve the maximum S with the following assignment:

<image>

With this assignment, mex(1, 2) = 0, mex(1, 3) = 2 and mex(2, 3) = 1. Therefore, S = 0 + 2 + 1 = 3.

In the second example, one can achieve the maximum S with the following assignment:

<image>

With this assignment, all non-zero mex value are listed below: 

  * mex(1, 3) = 1 
  * mex(1, 5) = 2 
  * mex(2, 3) = 1 
  * mex(2, 5) = 2 
  * mex(3, 4) = 1 
  * mex(4, 5) = 3 



Therefore, S = 1 + 2 + 1 + 2 + 1 + 3 = 10.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, root;
vector<vector<int>> tree, par, sub;
vector<vector<long long>> dp;
void dfs(int u) {
  sub[root][u] = 1;
  for (int v : tree[u]) {
    if (v == par[root][u]) continue;
    par[root][v] = u;
    dfs(v);
    sub[root][u] += sub[root][v];
  }
}
long long getDP(int u, int v) {
  if (u == v) return 0;
  if (dp[u][v] != -1) return dp[u][v];
  long long res =
      sub[u][v] * sub[v][u] + max(getDP(par[v][u], v), getDP(u, par[u][v]));
  return dp[u][v] = res;
}
void input() {
  scanf("%d", &n);
  tree.assign(n, vector<int>());
  for (int i = 0; i < n - 1; ++i) {
    int u, v;
    scanf("%d%d", &u, &v);
    --u;
    --v;
    tree[u].push_back(v);
    tree[v].push_back(u);
  }
}
void solve() {
  par.assign(n, vector<int>(n, -1));
  sub.assign(n, vector<int>(n, -1));
  for (int u = 0; u < n; ++u) {
    root = u;
    dfs(u);
  }
  dp.assign(n, vector<long long>(n, -1LL));
  long long ans = 0;
  for (int u = 0; u < n; ++u)
    for (int v = 0; v < n; ++v) ans = max(ans, getDP(u, v));
  cout << ans << endl;
}
int main() {
  input();
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50
21 10
30 22
3 37
37 32
4 27
18 7
2 30
29 19
6 37
12 39
47 25
41 49
45 9
25 48
16 14
9 7
33 28
3 31
34 10
35 37
27 40
45 16
29 44
16 15
26 15
1 12
2 13
15 21
43 14
9 33
44 15
46 1
38 5
15 5
1 32
42 35
20 27
23 8
1 16
15 17
36 50
13 8
49 45
11 2
24 4
36 15
15 30
16 4
25 37


(G.2) Fast Input

10
2 8
5 10
3 4
1 6
3 9
1 7
4 8
10 8
1 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, root; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<int>> tree, par, sub; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<vector<long long>> dp; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
void dfs(int u) { /* line 6 slow_hit_count: 2500, fast_hit_count: 100 */
  sub[root][u] = 1; /* line 7 slow_hit_count: 2500, fast_hit_count: 100 */
  for (int v : tree[u]) { /* line 8 slow_hit_count: 7400, fast_hit_count: 280 */
    if (v == par[root][u]) continue; /* line 9 slow_hit_count: 4900, fast_hit_count: 180 */
    par[root][v] = u; /* line 10 slow_hit_count: 2450, fast_hit_count: 90 */
    dfs(v); /* line 11 slow_hit_count: 2450, fast_hit_count: 90 */
    sub[root][u] += sub[root][v]; /* line 12 slow_hit_count: 2450, fast_hit_count: 90 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 14 slow_hit_count: 2500, fast_hit_count: 100 */
long long getDP(int u, int v) { /* line 15 slow_hit_count: 7400, fast_hit_count: 280 */
  if (u == v) return 0; /* line 16 slow_hit_count: 7400, fast_hit_count: 280 */
  if (dp[u][v] != -1) return dp[u][v]; /* line 17 slow_hit_count: 7154, fast_hit_count: 234 */
  long long res = /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      sub[u][v] * sub[v][u] + max(getDP(par[v][u], v), getDP(u, par[u][v])); /* line 19 slow_hit_count: 2450, fast_hit_count: 90 */
  return dp[u][v] = res; /* line 20 slow_hit_count: 2450, fast_hit_count: 90 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
void input() { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  tree.assign(n, vector<int>()); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n - 1; ++i) { /* line 25 slow_hit_count: 50, fast_hit_count: 10 */
    int u, v; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    scanf("%d%d", &u, &v); /* line 27 slow_hit_count: 49, fast_hit_count: 9 */
    --u; /* line 28 slow_hit_count: 49, fast_hit_count: 9 */
    --v; /* line 29 slow_hit_count: 49, fast_hit_count: 9 */
    tree[u].push_back(v); /* line 30 slow_hit_count: 49, fast_hit_count: 9 */
    tree[v].push_back(u); /* line 31 slow_hit_count: 49, fast_hit_count: 9 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
void solve() { /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
  par.assign(n, vector<int>(n, -1)); /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  sub.assign(n, vector<int>(n, -1)); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  for (int u = 0; u < n; ++u) { /* line 37 slow_hit_count: 51, fast_hit_count: 11 */
    root = u; /* line 38 slow_hit_count: 50, fast_hit_count: 10 */
    dfs(u); /* line 39 slow_hit_count: 50, fast_hit_count: 10 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  dp.assign(n, vector<long long>(n, -1LL)); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  for (int u = 0; u < n; ++u) /* line 43 slow_hit_count: 51, fast_hit_count: 11 */
    for (int v = 0; v < n; ++v) ans = max(ans, getDP(u, v)); /* line 44 slow_hit_count: 2550, fast_hit_count: 110 */
  cout << ans << endl; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  input(); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 51 slow_hit_count: 0, fast_hit_count: 0 */


assistant: Based on the provided inputs, outputs, and the hit count information, let's proceed with the analysis.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The `dfs` function (lines 6-14) is hit significantly more often in the slow input (2,500 times) compared to the fast input (100 times). This indicates that the depth-first search traversal is a hotspot.
   - The `getDP` function (lines 15-21) is also heavily hit in slow input (7,400 times) compared to the fast input (280 times), especially the recursive call on line 19, indicating that calculating the DP values is computationally expensive.
   
2. **Interacting with Data Structures:**
   - The `par` and `sub` matrices are involved in both `dfs` and `getDP`, suggesting that maintaining these matrices and computing based on them is costly.
   - The operations `sub[u][v] * sub[v][u]` in `getDP` and the recursion suggest that the performance is heavily dependent on the size and structure of the tree.

3. **Loops and Recursion:**
   - The nested loops over `u` and `v` in `solve` (lines 43-44) combined with the recursive DP computation (`getDP`) are likely contributing to the slowness. The total number of calls to `getDP` is roughly `n^2`, which can be significant for larger `n`.

### Phase 2: Derive Performance-Characterizing Invariants

Here are the natural language performance invariants derived from the analysis:

1. **Invariant 1: DFS Traversal Complexity**
   - *Natural Language Description:* "If the tree structure results in a high branching factor or depth, the depth-first search will be expensive, as it recursively processes subtrees multiple times."
   - *Explanation:* This invariant captures the cost of deeply nested or wide tree structures, which lead to more recursive calls and increased computation in the `dfs` function.

2. **Invariant 2: DP Computation Cost**
   - *Natural Language Description:* "When the tree has a large number of nodes, the dynamic programming computations become significant, especially if the sub-trees are large due to the `sub[u][v] * sub[v][u]` term being calculated many times."
   - *Explanation:* This invariant highlights the cost associated with DP calculations due to large or uneven tree structures, especially as `n` approaches its maximum limit.

3. **Invariant 3: Recursive DP Calls**
   - *Natural Language Description:* "If recursive calls within `getDP` are triggered excessively due to uninitialized DP values, the program may slow down significantly. This happens when `n` is large and the DP matrix is frequently accessed with uncached states."
   - *Explanation:* The frequent recursive calls due to uninitialized DP states cause redundant computations and slow execution.

4. **Invariant 4: Nested Loop Overhead**
   - *Natural Language Description:* "When the number of gangs `n` is large, the nested loop over all pairs of nodes (`u`, `v`) triggers a quadratic number of DP computations, which exacerbates performance issues."
   - *Explanation:* This invariant is related to the nested loops in `solve`, which cause a quadratic explosion in DP evaluations, impacting performance for large `n`.

These invariants together outline the conditions under which the given C program becomes slow, allowing for targeted optimizations or alerts when such scenarios are detected.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
[INSPION FullBand Master - INSPION](https://www.youtube.com/watch?v=kwsciXm_7sA)

[INSPION - IOLITE-SUNSTONE](https://www.youtube.com/watch?v=kwsciXm_7sA)

On another floor of the A.R.C. Markland-N, the young man Simon "Xenon" Jackson, takes a break after finishing his project early (as always). Having a lot of free time, he decides to put on his legendary hacker "X" instinct and fight against the gangs of the cyber world.

His target is a network of n small gangs. This network contains exactly n - 1 direct links, each of them connecting two gangs together. The links are placed in such a way that every pair of gangs is connected through a sequence of direct links.

By mining data, Xenon figured out that the gangs used a form of cross-encryption to avoid being busted: every link was assigned an integer from 0 to n - 2 such that all assigned integers are distinct and every integer was assigned to some link. If an intruder tries to access the encrypted data, they will have to surpass S password layers, with S being defined by the following formula:

$$$S = ∑_{1 ≤ u < v ≤ n} mex(u, v)$$$

Here, mex(u, v) denotes the smallest non-negative integer that does not appear on any link on the unique simple path from gang u to gang v.

Xenon doesn't know the way the integers are assigned, but it's not a problem. He decides to let his AI's instances try all the passwords on his behalf, but before that, he needs to know the maximum possible value of S, so that the AIs can be deployed efficiently.

Now, Xenon is out to write the AI scripts, and he is expected to finish them in two hours. Can you find the maximum possible S before he returns?

Input

The first line contains an integer n (2 ≤ n ≤ 3000), the number of gangs in the network.

Each of the next n - 1 lines contains integers u_i and v_i (1 ≤ u_i, v_i ≤ n; u_i ≠ v_i), indicating there's a direct link between gangs u_i and v_i.

It's guaranteed that links are placed in such a way that each pair of gangs will be connected by exactly one simple path.

Output

Print the maximum possible value of S — the number of password layers in the gangs' network.

Examples

Input


3
1 2
2 3


Output


3


Input


5
1 2
1 3
1 4
3 5


Output


10

Note

In the first example, one can achieve the maximum S with the following assignment:

<image>

With this assignment, mex(1, 2) = 0, mex(1, 3) = 2 and mex(2, 3) = 1. Therefore, S = 0 + 2 + 1 = 3.

In the second example, one can achieve the maximum S with the following assignment:

<image>

With this assignment, all non-zero mex value are listed below: 

  * mex(1, 3) = 1 
  * mex(1, 5) = 2 
  * mex(2, 3) = 1 
  * mex(2, 5) = 2 
  * mex(3, 4) = 1 
  * mex(4, 5) = 3 



Therefore, S = 1 + 2 + 1 + 2 + 1 + 3 = 10.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

Let's translate the natural language invariants derived previously into C++ code as checkers.

1. **Invariant 1: DFS Traversal Complexity**

   *Natural Language Description:* "If the tree structure results in a high branching factor or depth, the depth-first search will be expensive, as it recursively processes subtrees multiple times."

   ```cpp
   void check_dfs_invariant(int depth, int branchFactor) {
       if (depth > 50 && branchFactor > 10) {
           cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: DP Computation Cost**

   *Natural Language Description:* "When the tree has a large number of nodes, the dynamic programming computations become significant, especially if the sub-trees are large due to the `sub[u][v] * sub[v][u]` term being calculated many times."

   ```cpp
   void check_dp_invariant(int subtreeSizeU, int subtreeSizeV) {
       if (subtreeSizeU * subtreeSizeV > 10000) {
           cerr << "Warning: dp_invariant triggered - large sub-tree product" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Recursive DP Calls**

   *Natural Language Description:* "If recursive calls within `getDP` are triggered excessively due to uninitialized DP values, the program may slow down significantly. This happens when `n` is large and the DP matrix is frequently accessed with uncached states."

   ```cpp
   void check_recursive_calls_invariant(int dpHits) {
       if (dpHits > 5000) {
           cerr << "Warning: recursive_calls_invariant triggered - excessive DP calls" << endl;
           abort();
       }
   }
   ```

4. **Invariant 4: Nested Loop Overhead**

   *Natural Language Description:* "When the number of gangs `n` is large, the nested loop over all pairs of nodes (`u`, `v`) triggers a quadratic number of DP computations, which exacerbates performance issues."

   ```cpp
   void check_nested_loop_invariant(int n) {
       if (n > 1000) {
           cerr << "Warning: nested_loop_invariant triggered - large `n` causing quadratic evaluations" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original C++ Code

Now, these checkers need to be integrated into the original C++ code at strategic points to monitor the conditions.

```cpp
#include <bits/stdc++.h>
using namespace std;
int n, root;
vector<vector<int>> tree, par, sub;
vector<vector<long long>> dp;

void check_dfs_invariant(int depth, int branchFactor) {
    if (depth > 50 && branchFactor > 10) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

void check_dp_invariant(int subtreeSizeU, int subtreeSizeV) {
    if (subtreeSizeU * subtreeSizeV > 10000) {
        cerr << "Warning: dp_invariant triggered - large sub-tree product" << endl;
        abort();
    }
}

void check_recursive_calls_invariant(int dpHits) {
    if (dpHits > 5000) {
        cerr << "Warning: recursive_calls_invariant triggered - excessive DP calls" << endl;
        abort();
    }
}

void check_nested_loop_invariant(int n) {
    if (n > 1000) {
        cerr << "Warning: nested_loop_invariant triggered - large `n` causing quadratic evaluations" << endl;
        abort();
    }
}

void dfs(int u) {
    sub[root][u] = 1;
    int branchFactor = tree[u].size();
    check_dfs_invariant(n, branchFactor); // Check for DFS complexity
    for (int v : tree[u]) {
        if (v == par[root][u]) continue;
        par[root][v] = u;
        dfs(v);
        sub[root][u] += sub[root][v];
    }
}

long long getDP(int u, int v) {
    if (u == v) return 0;
    if (dp[u][v] != -1) return dp[u][v];
    
    // Assumption: depth is represented by number of hits to this function
    static int dpHits = 0;
    dpHits++;
    check_recursive_calls_invariant(dpHits); // Check for excessive recursive DP calls

    long long res = sub[u][v] * sub[v][u] + max(getDP(par[v][u], v), getDP(u, par[u][v]));
    check_dp_invariant(sub[u][v], sub[v][u]); // Check for DP computation cost
    return dp[u][v] = res;
}

void input() {
    scanf("%d", &n);
    tree.assign(n, vector<int>());
    for (int i = 0; i < n - 1; ++i) {
        int u, v;
        scanf("%d%d", &u, &v);
        --u;
        --v;
        tree[u].push_back(v);
        tree[v].push_back(u);
    }
}

void solve() {
    check_nested_loop_invariant(n); // Check for nested loop overhead
    par.assign(n, vector<int>(n, -1));
    sub.assign(n, vector<int>(n, -1));
    for (int u = 0; u < n; ++u) {
        root = u;
        dfs(u);
    }
    dp.assign(n, vector<long long>(n, -1LL));
    long long ans = 0;
    for (int u = 0; u < n; ++u)
        for (int v = 0; v < n; ++v) ans = max(ans, getDP(u, v));
    cout << ans << endl;
}

int main() {
    input();
    solve();
    return 0;
}
```

### Notes:
- **Check Placement:** Each check is placed to intercept inefficient conditions before they have a significant impact on execution time.
- **Avoiding Overhead:** Checks are added outside tight loops wherever possible to avoid additional overhead.
- **Utility:** These checks will help in identifying performance bottlenecks during testing, making it easier to optimize or redesign the algorithm if necessary.

