system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

[INSPION FullBand Master - INSPION](https://www.youtube.com/watch?v=kwsciXm_7sA)

[INSPION - IOLITE-SUNSTONE](https://www.youtube.com/watch?v=kwsciXm_7sA)

On another floor of the A.R.C. Markland-N, the young man Simon "Xenon" Jackson, takes a break after finishing his project early (as always). Having a lot of free time, he decides to put on his legendary hacker "X" instinct and fight against the gangs of the cyber world.

His target is a network of n small gangs. This network contains exactly n - 1 direct links, each of them connecting two gangs together. The links are placed in such a way that every pair of gangs is connected through a sequence of direct links.

By mining data, Xenon figured out that the gangs used a form of cross-encryption to avoid being busted: every link was assigned an integer from 0 to n - 2 such that all assigned integers are distinct and every integer was assigned to some link. If an intruder tries to access the encrypted data, they will have to surpass S password layers, with S being defined by the following formula:

$$$S = ∑_{1 ≤ u < v ≤ n} mex(u, v)$$$

Here, mex(u, v) denotes the smallest non-negative integer that does not appear on any link on the unique simple path from gang u to gang v.

Xenon doesn't know the way the integers are assigned, but it's not a problem. He decides to let his AI's instances try all the passwords on his behalf, but before that, he needs to know the maximum possible value of S, so that the AIs can be deployed efficiently.

Now, Xenon is out to write the AI scripts, and he is expected to finish them in two hours. Can you find the maximum possible S before he returns?

Input

The first line contains an integer n (2 ≤ n ≤ 3000), the number of gangs in the network.

Each of the next n - 1 lines contains integers u_i and v_i (1 ≤ u_i, v_i ≤ n; u_i ≠ v_i), indicating there's a direct link between gangs u_i and v_i.

It's guaranteed that links are placed in such a way that each pair of gangs will be connected by exactly one simple path.

Output

Print the maximum possible value of S — the number of password layers in the gangs' network.

Examples

Input


3
1 2
2 3


Output


3


Input


5
1 2
1 3
1 4
3 5


Output


10

Note

In the first example, one can achieve the maximum S with the following assignment:

<image>

With this assignment, mex(1, 2) = 0, mex(1, 3) = 2 and mex(2, 3) = 1. Therefore, S = 0 + 2 + 1 = 3.

In the second example, one can achieve the maximum S with the following assignment:

<image>

With this assignment, all non-zero mex value are listed below: 

  * mex(1, 3) = 1 
  * mex(1, 5) = 2 
  * mex(2, 3) = 1 
  * mex(2, 5) = 2 
  * mex(3, 4) = 1 
  * mex(4, 5) = 3 



Therefore, S = 1 + 2 + 1 + 2 + 1 + 3 = 10.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const double PI = acos(-1.0);
using namespace std;
int setb(int n, int pos) { return n = n | (1 << pos); }
int resb(int n, int pos) { return n = n & ~(1 << pos); }
bool checkb(int n, int pos) { return (bool)(n & (1 << pos)); }
long long bigmod(long long b, long long p) {
  if (p == 0) return 1;
  long long ret = bigmod(b, p / 2);
  ret = (ret * ret) % 998244353;
  if (p & 1) ret = (ret * b) % 998244353;
  return ret;
}
int n;
vector<int> g[3002];
int d[3002][3002], save[3002][3002];
long long dp[3002][3002];
bool visit[3002][3002];
void go(int root, int u, int p, int cur = 0) {
  d[root][u] = cur;
  save[root][u] = 1;
  for (int i = 0; i < g[u].size(); i++) {
    int v = g[u][i];
    if (v == p) continue;
    go(root, v, u, cur + 1);
    save[root][u] += save[root][v];
  }
}
void prework() {
  for (int u = 1; u <= n; u++) go(u, u, u);
}
long long get_cost(int x, int y) { return (long long)save[x][y] * save[y][x]; }
long long F(int x, int y) {
  if (visit[x][y]) return dp[x][y];
  long long ret = 0;
  for (int i = 0; i < g[x].size(); i++) {
    int nxt = g[x][i];
    if (d[y][nxt] > d[y][x]) ret = max(ret, get_cost(y, nxt) + F(nxt, y));
  }
  for (int i = 0; i < g[y].size(); i++) {
    int nxt = g[y][i];
    if (d[x][nxt] > d[x][y]) ret = max(ret, get_cost(x, nxt) + F(x, nxt));
  }
  visit[x][y] = true;
  return dp[x][y] = ret;
}
long long solve() {
  prework();
  long long ret = 0;
  for (int u = 1; u <= n; u++) {
    for (int i = 0; i < g[u].size(); i++) {
      int v = g[u][i];
      ret = max(ret, get_cost(u, v) + F(u, v));
    }
  }
  return ret;
}
int main() {
  int i, x, y;
  scanf("%d", &n);
  for (i = 1; i <= n - 1; i++) {
    scanf("%d %d", &x, &y);
    g[x].push_back(y);
    g[y].push_back(x);
  }
  long long ret = solve();
  printf("%lld\n", ret);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

50
21 10
30 22
3 37
37 32
4 27
18 7
2 30
29 19
6 37
12 39
47 25
41 49
45 9
25 48
16 14
9 7
33 28
3 31
34 10
35 37
36 40
45 16
29 44
16 15
26 15
1 12
2 13
15 21
43 14
9 33
44 15
46 1
38 5
15 5
1 32
42 35
20 27
23 8
1 16
15 17
36 50
13 8
49 45
11 2
24 4
36 15
15 30
16 4
25 37


(G.2) Fast Input

10
2 8
5 10
3 4
1 6
3 9
1 7
4 8
10 8
1 8


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const double PI = acos(-1.0); /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int setb(int n, int pos) { return n = n | (1 << pos); } /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int resb(int n, int pos) { return n = n & ~(1 << pos); } /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool checkb(int n, int pos) { return (bool)(n & (1 << pos)); } /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long bigmod(long long b, long long p) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  if (p == 0) return 1; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  long long ret = bigmod(b, p / 2); /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  ret = (ret * ret) % 998244353; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  if (p & 1) ret = (ret * b) % 998244353; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> g[3002]; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int d[3002][3002], save[3002][3002]; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
long long dp[3002][3002]; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
bool visit[3002][3002]; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
void go(int root, int u, int p, int cur = 0) { /* line 19 slow_hit_count: 2500, fast_hit_count: 100 */
  d[root][u] = cur; /* line 20 slow_hit_count: 2500, fast_hit_count: 100 */
  save[root][u] = 1; /* line 21 slow_hit_count: 2500, fast_hit_count: 100 */
  for (int i = 0; i < g[u].size(); i++) { /* line 22 slow_hit_count: 7400, fast_hit_count: 280 */
    int v = g[u][i]; /* line 23 slow_hit_count: 4900, fast_hit_count: 180 */
    if (v == p) continue; /* line 24 slow_hit_count: 4900, fast_hit_count: 180 */
    go(root, v, u, cur + 1); /* line 25 slow_hit_count: 2450, fast_hit_count: 90 */
    save[root][u] += save[root][v]; /* line 26 slow_hit_count: 2450, fast_hit_count: 90 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 28 slow_hit_count: 2500, fast_hit_count: 100 */
void prework() { /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  for (int u = 1; u <= n; u++) go(u, u, u); /* line 30 slow_hit_count: 51, fast_hit_count: 11 */
} /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
long long get_cost(int x, int y) { return (long long)save[x][y] * save[y][x]; } /* line 32 slow_hit_count: 4802, fast_hit_count: 162 */
long long F(int x, int y) { /* line 33 slow_hit_count: 4802, fast_hit_count: 162 */
  if (visit[x][y]) return dp[x][y]; /* line 34 slow_hit_count: 4802, fast_hit_count: 162 */
  long long ret = 0; /* line 35 slow_hit_count: 2450, fast_hit_count: 90 */
  for (int i = 0; i < g[x].size(); i++) { /* line 36 slow_hit_count: 7252, fast_hit_count: 252 */
    int nxt = g[x][i]; /* line 37 slow_hit_count: 4802, fast_hit_count: 162 */
    if (d[y][nxt] > d[y][x]) ret = max(ret, get_cost(y, nxt) + F(nxt, y)); /* line 38 slow_hit_count: 4802, fast_hit_count: 162 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < g[y].size(); i++) { /* line 40 slow_hit_count: 7252, fast_hit_count: 252 */
    int nxt = g[y][i]; /* line 41 slow_hit_count: 4802, fast_hit_count: 162 */
    if (d[x][nxt] > d[x][y]) ret = max(ret, get_cost(x, nxt) + F(x, nxt)); /* line 42 slow_hit_count: 4802, fast_hit_count: 162 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  visit[x][y] = true; /* line 44 slow_hit_count: 2450, fast_hit_count: 90 */
  return dp[x][y] = ret; /* line 45 slow_hit_count: 2450, fast_hit_count: 90 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
long long solve() { /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  prework(); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  long long ret = 0; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  for (int u = 1; u <= n; u++) { /* line 50 slow_hit_count: 51, fast_hit_count: 11 */
    for (int i = 0; i < g[u].size(); i++) { /* line 51 slow_hit_count: 148, fast_hit_count: 28 */
      int v = g[u][i]; /* line 52 slow_hit_count: 98, fast_hit_count: 18 */
      ret = max(ret, get_cost(u, v) + F(u, v)); /* line 53 slow_hit_count: 98, fast_hit_count: 18 */
    } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  return ret; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  int i, x, y; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d", &n); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 1; i <= n - 1; i++) { /* line 61 slow_hit_count: 50, fast_hit_count: 10 */
    scanf("%d %d", &x, &y); /* line 62 slow_hit_count: 49, fast_hit_count: 9 */
    g[x].push_back(y); /* line 63 slow_hit_count: 49, fast_hit_count: 9 */
    g[y].push_back(x); /* line 64 slow_hit_count: 49, fast_hit_count: 9 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  long long ret = solve(); /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  printf("%lld\n", ret); /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 69 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit counts, let's analyze the code to identify the potentially expensive or inefficient segments:

1. **Function `go` (Lines 19-28):**
   - The function `go` is called frequently, with 2500 hits on the slow input, compared to 100 on the fast input. This indicates a deeper recursion or a larger traversal space for the slow input.

2. **Function `F` (Lines 33-46):**
   - `F` is called 4802 times for the slow input but only 162 times for the fast input. This suggests that this dynamic programming function is recalculated many more times under the slow condition, implying either a deeper recursion tree or more overlapping subproblems.

3. **Loops within `F` (Lines 36-43):**
   - These loops that iterate over the neighbors (`g[x]` and `g[y]`) have higher hit counts in the slow input, suggesting that they are traversing a much more extensive graph structure.

4. **`get_cost` Function Calls (Line 32):**
   - The `get_cost` function is called 4802 times in the slow scenario, as opposed to 162 times in the fast case, indicating frequent calculation of node costs.

5. **`solve` Function Loop (Lines 50-53):**
   - Although this loop itself is not the main contributor to the slowdown (51 vs. 11 hits), it triggers the expensive operations in `F` and `get_cost`.

### Phase 2: Derive Performance-Characterizing Invariants

With the above observations, we can deduce the following performance-characterizing invariants in natural language:

1. **Complex Tree Structures:**
   - "If the graph reflects a tree with long paths or deep levels, the recursive and dynamic programming functions may traverse numerous paths, increasing computation time significantly."

2. **High Branching Factor:**
   - "When nodes have a high degree, resulting in a high branching factor in the recursive `F` function, the number of subproblems grows, leading to excessive recomputation."

3. **Dense Connectivity:**
   - "If some nodes act as central hubs with many direct connections (high connectivity), they may cause repeated calculations of subproblems, thereby slowing down the execution."

4. **Large Subtree Calculations:**
   - "The performance degrades when large subtrees need to be repeatedly evaluated for cost and mex calculations, indicating a potential blowup in dynamic programming state space."

5. **Dynamic Programming State Explosion:**
   - "When the dynamic programming state space becomes excessively large due to varying depth and connectivity of the nodes, the function `F` recalculates values for many subproblems, leading to prolonged execution times."

These invariants abstract the conditions under which the program exhibits slow behavior, focusing on the structure and properties of the input graph rather than specific numeric values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
[INSPION FullBand Master - INSPION](https://www.youtube.com/watch?v=kwsciXm_7sA)

[INSPION - IOLITE-SUNSTONE](https://www.youtube.com/watch?v=kwsciXm_7sA)

On another floor of the A.R.C. Markland-N, the young man Simon "Xenon" Jackson, takes a break after finishing his project early (as always). Having a lot of free time, he decides to put on his legendary hacker "X" instinct and fight against the gangs of the cyber world.

His target is a network of n small gangs. This network contains exactly n - 1 direct links, each of them connecting two gangs together. The links are placed in such a way that every pair of gangs is connected through a sequence of direct links.

By mining data, Xenon figured out that the gangs used a form of cross-encryption to avoid being busted: every link was assigned an integer from 0 to n - 2 such that all assigned integers are distinct and every integer was assigned to some link. If an intruder tries to access the encrypted data, they will have to surpass S password layers, with S being defined by the following formula:

$$$S = ∑_{1 ≤ u < v ≤ n} mex(u, v)$$$

Here, mex(u, v) denotes the smallest non-negative integer that does not appear on any link on the unique simple path from gang u to gang v.

Xenon doesn't know the way the integers are assigned, but it's not a problem. He decides to let his AI's instances try all the passwords on his behalf, but before that, he needs to know the maximum possible value of S, so that the AIs can be deployed efficiently.

Now, Xenon is out to write the AI scripts, and he is expected to finish them in two hours. Can you find the maximum possible S before he returns?

Input

The first line contains an integer n (2 ≤ n ≤ 3000), the number of gangs in the network.

Each of the next n - 1 lines contains integers u_i and v_i (1 ≤ u_i, v_i ≤ n; u_i ≠ v_i), indicating there's a direct link between gangs u_i and v_i.

It's guaranteed that links are placed in such a way that each pair of gangs will be connected by exactly one simple path.

Output

Print the maximum possible value of S — the number of password layers in the gangs' network.

Examples

Input


3
1 2
2 3


Output


3


Input


5
1 2
1 3
1 4
3 5


Output


10

Note

In the first example, one can achieve the maximum S with the following assignment:

<image>

With this assignment, mex(1, 2) = 0, mex(1, 3) = 2 and mex(2, 3) = 1. Therefore, S = 0 + 2 + 1 = 3.

In the second example, one can achieve the maximum S with the following assignment:

<image>

With this assignment, all non-zero mex value are listed below: 

  * mex(1, 3) = 1 
  * mex(1, 5) = 2 
  * mex(2, 3) = 1 
  * mex(2, 5) = 2 
  * mex(3, 4) = 1 
  * mex(4, 5) = 3 



Therefore, S = 1 + 2 + 1 + 2 + 1 + 3 = 10.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Let's translate the performance-characterizing invariants into checker code:

1. **Complex Tree Structures:**
   - Check if the graph has long paths or deep levels.
   
   ```cpp
   void check_complex_tree_structure(int recursionDepth) {
       if (recursionDepth > 100) {  // Threshold based on possible depth in a tree with n = 3000
           cerr << "Warning: Performance bottleneck condition triggered - complex tree structure with deep recursion!" << endl;
           abort();
       }
   }
   ```

2. **High Branching Factor:**
   - Check for nodes with a high degree.
   
   ```cpp
   void check_high_branching_factor(int nodeDegree) {
       if (nodeDegree > 50) {  // Arbitrary threshold for high degree in a tree with n = 3000
           cerr << "Warning: Performance bottleneck condition triggered - high branching factor!" << endl;
           abort();
       }
   }
   ```

3. **Dense Connectivity:**
   - Check for central nodes with many direct connections.
   
   ```cpp
   void check_dense_connectivity(int connections) {
       if (connections > 100) {  // Arbitrary threshold for dense connectivity
           cerr << "Warning: Performance bottleneck condition triggered - dense connectivity!" << endl;
           abort();
       }
   }
   ```

4. **Large Subtree Calculations:**
   - Ensure subtrees being calculated are not excessively large.
   
   ```cpp
   void check_large_subtree_calculation(int subtreeSize) {
       if (subtreeSize > 1000) {  // Threshold based on possible large subtree size
           cerr << "Warning: Performance bottleneck condition triggered - large subtree calculations!" << endl;
           abort();
       }
   }
   ```

5. **Dynamic Programming State Explosion:**
   - Check for excessive dynamic programming state space.
   
   ```cpp
   void check_dp_state_explosion(int dpStates) {
       if (dpStates > 1000000) {  // Arbitrary large threshold for DP state space
           cerr << "Warning: Performance bottleneck condition triggered - dynamic programming state explosion!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checkers into the Original Program

Now, let's incorporate these checks into the original C++ code. We need to place them in effective points, such as after reading inputs or before entering heavy computation loops:

```cpp
#include <bits/stdc++.h>
using namespace std;

const double PI = acos(-1.0);
int n;
vector<int> g[3002];
int d[3002][3002], save[3002][3002];
long long dp[3002][3002];
bool visit[3002][3002];

// Checkers
void check_complex_tree_structure(int recursionDepth) {
    if (recursionDepth > 100) {
        cerr << "Warning: Performance bottleneck condition triggered - complex tree structure with deep recursion!" << endl;
        abort();
    }
}

void check_high_branching_factor(int nodeDegree) {
    if (nodeDegree > 50) {
        cerr << "Warning: Performance bottleneck condition triggered - high branching factor!" << endl;
        abort();
    }
}

void check_dense_connectivity(int connections) {
    if (connections > 100) {
        cerr << "Warning: Performance bottleneck condition triggered - dense connectivity!" << endl;
        abort();
    }
}

void check_large_subtree_calculation(int subtreeSize) {
    if (subtreeSize > 1000) {
        cerr << "Warning: Performance bottleneck condition triggered - large subtree calculations!" << endl;
        abort();
    }
}

void check_dp_state_explosion(int dpStates) {
    if (dpStates > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - dynamic programming state explosion!" << endl;
        abort();
    }
}

void go(int root, int u, int p, int cur = 0) {
    check_complex_tree_structure(cur);  // Check for recursion depth
    d[root][u] = cur;
    save[root][u] = 1;
    check_high_branching_factor(g[u].size());  // Check for high branching factor
    for (int i = 0; i < g[u].size(); i++) {
        int v = g[u][i];
        if (v == p) continue;
        go(root, v, u, cur + 1);
        save[root][u] += save[root][v];
    }
    check_large_subtree_calculation(save[root][u]);  // Check for large subtree
}

void prework() {
    for (int u = 1; u <= n; u++) go(u, u, u);
}

long long get_cost(int x, int y) { 
    return (long long)save[x][y] * save[y][x]; 
}

long long F(int x, int y) {
    if (visit[x][y]) return dp[x][y];
    long long ret = 0;
    check_dense_connectivity(g[x].size());  // Check for dense connectivity
    for (int i = 0; i < g[x].size(); i++) {
        int nxt = g[x][i];
        if (d[y][nxt] > d[y][x]) ret = max(ret, get_cost(y, nxt) + F(nxt, y));
    }
    for (int i = 0; i < g[y].size(); i++) {
        int nxt = g[y][i];
        if (d[x][nxt] > d[x][y]) ret = max(ret, get_cost(x, nxt) + F(x, nxt));
    }
    visit[x][y] = true;
    return dp[x][y] = ret;
}

long long solve() {
    prework();
    long long ret = 0;
    check_dp_state_explosion(n * n);  // Check for large DP state space
    for (int u = 1; u <= n; u++) {
        for (int i = 0; i < g[u].size(); i++) {
            int v = g[u][i];
            ret = max(ret, get_cost(u, v) + F(u, v));
        }
    }
    return ret;
}

int main() {
    int i, x, y;
    scanf("%d", &n);
    for (i = 1; i <= n - 1; i++) {
        scanf("%d %d", &x, &y);
        g[x].push_back(y);
        g[y].push_back(x);
    }
    long long ret = solve();
    printf("%lld\n", ret);
    return 0;
}
```

### Explanation
- **Recursion Depth:** Checked inside `go` to ensure recursion does not exceed a set depth.
- **Branching Factor:** Checked inside `go` for high degrees of nodes.
- **Connectivity Density:** Checked in `F` to detect nodes with many connections.
- **Subtree Size:** Checked inside `go` to ensure subtrees are not excessively large.
- **DP State Explosion:** Checked in `solve` before iterating over potential function states. 

These checks help identify when the program's performance might degrade due to specific structural attributes of the input graph.

