system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ashishgup and FastestFinger play a game. 

They start with a number n and play in turns. In each turn, a player can make any one of the following moves:

  * Divide n by any of its odd divisors greater than 1. 
  * Subtract 1 from n if n is greater than 1. 



Divisors of a number include the number itself.

The player who is unable to make a move loses the game.

Ashishgup moves first. Determine the winner of the game if both of them play optimally.

Input

The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows.

The only line of each test case contains a single integer — n (1 ≤ n ≤ 10^9).

Output

For each test case, print "Ashishgup" if he wins, and "FastestFinger" otherwise (without quotes).

Example

Input


7
1
2
3
4
5
6
12


Output


FastestFinger
Ashishgup
Ashishgup
FastestFinger
Ashishgup
FastestFinger
Ashishgup

Note

In the first test case, n = 1, Ashishgup cannot make a move. He loses.

In the second test case, n = 2, Ashishgup subtracts 1 on the first move. Now n = 1, FastestFinger cannot make a move, so he loses.

In the third test case, n = 3, Ashishgup divides by 3 on the first move. Now n = 1, FastestFinger cannot make a move, so he loses.

In the last test case, n = 12, Ashishgup divides it by 3. Now n = 4, FastestFinger is forced to subtract 1, and Ashishgup gets 3, so he wins by dividing it by 3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
bool isPrime(long long n) {
  if (n <= 1) return false;
  if (n <= 3) return true;
  if (n % 2 == 0 || n % 3 == 0) return false;
  for (int i = 5; i * i <= n; i = i + 6)
    if (n % i == 0 || n % (i + 2) == 0) return false;
  return true;
}
bool sortbysec(const pair<int, int> &a, const pair<int, int> &b) {
  return (a.second < b.second);
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long t;
  cin >> t;
  while (t--) {
    long long n;
    cin >> n;
    if (n == 1)
      cout << "FastestFinger" << endl;
    else if (n == 2)
      cout << "Ashishgup" << endl;
    else if (n % 2 != 0)
      cout << "Ashishgup" << endl;
    else {
      set<int> s;
      for (int i = 2; i <= sqrt(n); i++) {
        if (n % i == 0) {
          if (i % 2 != 0) s.insert(i);
          if ((n / i) % 2 != 0) s.insert(n / i);
        }
      }
      if (s.size() == 0) {
        cout << "FastestFinger" << endl;
      } else {
        auto it = s.end();
        it--;
        long long k = n / (*it);
        if (k == 2 && isPrime(*it) == true)
          cout << "FastestFinger" << endl;
        else
          cout << "Ashishgup" << endl;
      }
    }
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

31
16777216
1
43
344588996
1024
536870912
131072
8388608
4194304
1048576
16
8
67108864
128
8192
256
16384
262144
126
32768
32
4
2048
33554432
134217728
4096
1000000000
2097152
524288
2
65536


(G.2) Fast Input

7
1
1
3
4
5
11
12


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
bool isPrime(long long n) { /* line 3 slow_hit_count: 1, fast_hit_count: 0 */
  if (n <= 1) return false; /* line 4 slow_hit_count: 1, fast_hit_count: 0 */
  if (n <= 3) return true; /* line 5 slow_hit_count: 1, fast_hit_count: 0 */
  if (n % 2 == 0 || n % 3 == 0) return false; /* line 6 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 5; i * i <= n; i = i + 6) /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    if (n % i == 0 || n % (i + 2) == 0) return false; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
bool sortbysec(const pair<int, int> &a, const pair<int, int> &b) { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return (a.second < b.second); /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  long long t; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> t; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 19 slow_hit_count: 32, fast_hit_count: 8 */
    long long n; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> n; /* line 21 slow_hit_count: 31, fast_hit_count: 7 */
    if (n == 1) /* line 22 slow_hit_count: 31, fast_hit_count: 7 */
      cout << "FastestFinger" << endl; /* line 23 slow_hit_count: 1, fast_hit_count: 2 */
    else if (n == 2) /* line 24 slow_hit_count: 30, fast_hit_count: 5 */
      cout << "Ashishgup" << endl; /* line 25 slow_hit_count: 1, fast_hit_count: 0 */
    else if (n % 2 != 0) /* line 26 slow_hit_count: 29, fast_hit_count: 5 */
      cout << "Ashishgup" << endl; /* line 27 slow_hit_count: 1, fast_hit_count: 3 */
    else { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      set<int> s; /* line 29 slow_hit_count: 56, fast_hit_count: 4 */
      for (int i = 2; i <= sqrt(n); i++) { /* line 30 slow_hit_count: 112881, fast_hit_count: 5 */
        if (n % i == 0) { /* line 31 slow_hit_count: 112853, fast_hit_count: 3 */
          if (i % 2 != 0) s.insert(i); /* line 32 slow_hit_count: 248, fast_hit_count: 3 */
          if ((n / i) % 2 != 0) s.insert(n / i); /* line 33 slow_hit_count: 248, fast_hit_count: 3 */
        } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      if (s.size() == 0) { /* line 36 slow_hit_count: 28, fast_hit_count: 2 */
        cout << "FastestFinger" << endl; /* line 37 slow_hit_count: 25, fast_hit_count: 1 */
      } else { /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
        auto it = s.end(); /* line 39 slow_hit_count: 3, fast_hit_count: 1 */
        it--; /* line 40 slow_hit_count: 3, fast_hit_count: 1 */
        long long k = n / (*it); /* line 41 slow_hit_count: 3, fast_hit_count: 1 */
        if (k == 2 && isPrime(*it) == true) /* line 42 slow_hit_count: 3, fast_hit_count: 1 */
          cout << "FastestFinger" << endl; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
        else /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
          cout << "Ashishgup" << endl; /* line 45 slow_hit_count: 3, fast_hit_count: 1 */
      } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 49 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level Analysis:**
   - The most significant difference in hit counts between the slow and fast inputs occurs in lines 30-33.
   - Line 30: The loop `for (int i = 2; i <= sqrt(n); i++)` is hit 112,881 times for the slow input compared to only 5 times for the fast input. This indicates a nested loop structure tied to the number of divisors.
   - Line 31: Checks for divisibility and hits 112,853 times in the slow input, indicating numerous divisor checks.
   - Lines 32-33: Insert conditionally odd divisors into a set, hit 248 times for the slow input, indicating potential inefficiency related to divisor processing.

2. **Function Interaction:**
   - The function `isPrime()` is called and executed once during the slow run, indicating its role isn't a major contributor to the line count discrepancy.
   - The main bottleneck appears to be the handling of divisors within the loop structure.

3. **Loop and Data Structure Interaction:**
   - The loop iterating over potential divisors up to `sqrt(n)` indicates that large `n` values can lead to a significant number of iterations.
   - The use of a set to store odd divisors shows increased interaction when many divisors are found, especially when `n` is a power of 2 or includes many factors.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: Large Number with Many Divisors**
   - Natural Language: "If `n` is a large number with a dense set of divisors, particularly when `n` is a power of 2 or close to powers of 2, the program enters a slow path due to excessive divisor checking and set operations."

2. **Invariant 2: Power of Two Inputs**
   - Natural Language: "When `n` is a power of 2, the divisor checking loop runs for a large number of iterations, causing significant performance degradation due to repetitive calculations."

3. **Invariant 3: Handling of Large Even Numbers**
   - Natural Language: "For large even numbers, determining the largest odd divisor requires multiple iterations over potential divisors, which can lead to slow execution paths as the divisor set grows in size."

By focusing on these invariants, testers or fuzzers could monitor for inputs that are powers of two or have dense sets of divisors, which are likely to trigger the slow execution paths in the current implementation.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ashishgup and FastestFinger play a game. 

They start with a number n and play in turns. In each turn, a player can make any one of the following moves:

  * Divide n by any of its odd divisors greater than 1. 
  * Subtract 1 from n if n is greater than 1. 



Divisors of a number include the number itself.

The player who is unable to make a move loses the game.

Ashishgup moves first. Determine the winner of the game if both of them play optimally.

Input

The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows.

The only line of each test case contains a single integer — n (1 ≤ n ≤ 10^9).

Output

For each test case, print "Ashishgup" if he wins, and "FastestFinger" otherwise (without quotes).

Example

Input


7
1
2
3
4
5
6
12


Output


FastestFinger
Ashishgup
Ashishgup
FastestFinger
Ashishgup
FastestFinger
Ashishgup

Note

In the first test case, n = 1, Ashishgup cannot make a move. He loses.

In the second test case, n = 2, Ashishgup subtracts 1 on the first move. Now n = 1, FastestFinger cannot make a move, so he loses.

In the third test case, n = 3, Ashishgup divides by 3 on the first move. Now n = 1, FastestFinger cannot make a move, so he loses.

In the last test case, n = 12, Ashishgup divides it by 3. Now n = 4, FastestFinger is forced to subtract 1, and Ashishgup gets 3, so he wins by dividing it by 3.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants identified earlier, we will implement the following checks as C++ functions or inline code:

1. **Invariant 1: Large Number with Many Divisors**
   ```cpp
   void check_large_divisor_count(long long n, const set<int>& s) {
       if (n > 1e9 / 2 && s.size() > 1000) { // Arbitrary threshold for large numbers and divisor count
           cerr << "Warning: Performance bottleneck condition triggered - large number with many divisors!" << endl;
           abort();
       }
   }
   ```

2. **Invariant 2: Power of Two Inputs**
   ```cpp
   void check_power_of_two(long long n) {
       if (n > 1 && (n & (n - 1)) == 0) { // Power of two check
           cerr << "Warning: Performance bottleneck condition triggered - power of two!" << endl;
           abort();
       }
   }
   ```

3. **Invariant 3: Handling of Large Even Numbers**
   ```cpp
   void check_large_even_number(long long n) {
       if (n > 1e8 && n % 2 == 0) { // Arbitrary threshold for large even numbers
           cerr << "Warning: Performance bottleneck condition triggered - large even number!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checks into the Original Program

Below is the modified program with the checks integrated at appropriate points:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check for large number with many divisors
void check_large_divisor_count(long long n, const set<int>& s) {
    if (n > 1e9 / 2 && s.size() > 1000) { // Arbitrary threshold for large numbers and divisor count
        cerr << "Warning: Performance bottleneck condition triggered - large number with many divisors!" << endl;
        abort();
    }
}

// Function to check if n is a power of two
void check_power_of_two(long long n) {
    if (n > 1 && (n & (n - 1)) == 0) { // Power of two check
        cerr << "Warning: Performance bottleneck condition triggered - power of two!" << endl;
        abort();
    }
}

// Function to check for large even numbers
void check_large_even_number(long long n) {
    if (n > 1e8 && n % 2 == 0) { // Arbitrary threshold for large even numbers
        cerr << "Warning: Performance bottleneck condition triggered - large even number!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    long long t;
    cin >> t;
    while (t--) {
        long long n;
        cin >> n;

        // Check for power of two input
        check_power_of_two(n);

        if (n == 1) {
            cout << "FastestFinger" << endl;
        } else if (n == 2) {
            cout << "Ashishgup" << endl;
        } else if (n % 2 != 0) {
            cout << "Ashishgup" << endl;
        } else {
            set<int> s;
            for (int i = 2; i <= sqrt(n); i++) {
                if (n % i == 0) {
                    if (i % 2 != 0) s.insert(i);
                    if ((n / i) % 2 != 0) s.insert(n / i);
                }
            }

            // Check for large number with many divisors
            check_large_divisor_count(n, s);

            // Check for large even numbers
            check_large_even_number(n);

            if (s.size() == 0) {
                cout << "FastestFinger" << endl;
            } else {
                auto it = s.end();
                it--;
                long long k = n / (*it);
                if (k == 2 && isPrime(*it) == true)
                    cout << "FastestFinger" << endl;
                else
                    cout << "Ashishgup" << endl;
            }
        }
    }
}
```

**Explanation:**
- **Power of Two Check:** Added immediately after reading each `n` to quickly abort if `n` is a power of two.
- **Divisor and Even Checks:** Placed after divisor processing to catch potential bottlenecks due to large divisor sets or even numbers. 
- Each check uses an `abort()` to halt execution and output a diagnostic message if the condition is triggered.

