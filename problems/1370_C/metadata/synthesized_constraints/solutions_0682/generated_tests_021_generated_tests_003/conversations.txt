system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ashishgup and FastestFinger play a game. 

They start with a number n and play in turns. In each turn, a player can make any one of the following moves:

  * Divide n by any of its odd divisors greater than 1. 
  * Subtract 1 from n if n is greater than 1. 



Divisors of a number include the number itself.

The player who is unable to make a move loses the game.

Ashishgup moves first. Determine the winner of the game if both of them play optimally.

Input

The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows.

The only line of each test case contains a single integer — n (1 ≤ n ≤ 10^9).

Output

For each test case, print "Ashishgup" if he wins, and "FastestFinger" otherwise (without quotes).

Example

Input


7
1
2
3
4
5
6
12


Output


FastestFinger
Ashishgup
Ashishgup
FastestFinger
Ashishgup
FastestFinger
Ashishgup

Note

In the first test case, n = 1, Ashishgup cannot make a move. He loses.

In the second test case, n = 2, Ashishgup subtracts 1 on the first move. Now n = 1, FastestFinger cannot make a move, so he loses.

In the third test case, n = 3, Ashishgup divides by 3 on the first move. Now n = 1, FastestFinger cannot make a move, so he loses.

In the last test case, n = 12, Ashishgup divides it by 3. Now n = 4, FastestFinger is forced to subtract 1, and Ashishgup gets 3, so he wins by dividing it by 3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long int sum() { return 0; }
template <typename T, typename... Args>
T sum(T a, Args... args) {
  return a + sum(args...);
}
void solve() {
  long long int n;
  cin >> n;
  if (n == 1) {
    cout << "FastestFinger"
         << "\n";
    return;
  }
  if (n % 2) {
    cout << "Ashishgup"
         << "\n";
    return;
  }
  long long int c = 0;
  while (n % 2 == 0) {
    c++;
    n /= 2;
  }
  if (n == 1) {
    if (c == 1) {
      cout << "Ashishgup"
           << "\n";
      return;
    } else {
      cout << "FastestFinger"
           << "\n";
      return;
    }
  } else {
    bool prime = true;
    for (long long int i = 2; i * i <= n; i++) {
      if (n % i == 0) prime = false;
    }
    if (prime) {
      if (c == 1) {
        cout << "FastestFinger"
             << "\n";
        return;
      } else {
        cout << "Ashishgup"
             << "\n";
        return;
      }
    } else {
      cout << "Ashishgup"
           << "\n";
      return;
    }
  }
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  long long int t = 1;
  cin >> t;
  while (t--) {
    solve();
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

31
16777216
1
43
344588996
1024
536870912
18583
8388608
4194304
1048576
16
8
67108864
128
8192
256
16384
262144
126
32768
32
4
2048
33554432
88351748
4096
1000000000
2097152
524288
2
65536


(G.2) Fast Input

31
16777216
1
43
268435456
1024
536870912
131072
8388608
4194304
1048576
16
8
67108864
128
8192
256
16384
262144
512
32768
32
4
2048
33554432
134217728
4096
1000000000
2097152
524288
2
65536


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long int sum() { return 0; } /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename... Args> /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
T sum(T a, Args... args) { /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  return a + sum(args...); /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 8 slow_hit_count: 31, fast_hit_count: 31 */
  long long int n; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 10 slow_hit_count: 31, fast_hit_count: 31 */
  if (n == 1) { /* line 11 slow_hit_count: 31, fast_hit_count: 31 */
    cout << "FastestFinger" /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
         << "\n"; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
    return; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  if (n % 2) { /* line 16 slow_hit_count: 30, fast_hit_count: 30 */
    cout << "Ashishgup" /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
         << "\n"; /* line 18 slow_hit_count: 2, fast_hit_count: 1 */
    return; /* line 19 slow_hit_count: 2, fast_hit_count: 1 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  long long int c = 0; /* line 21 slow_hit_count: 28, fast_hit_count: 29 */
  while (n % 2 == 0) { /* line 22 slow_hit_count: 390, fast_hit_count: 467 */
    c++; /* line 23 slow_hit_count: 362, fast_hit_count: 438 */
    n /= 2; /* line 24 slow_hit_count: 362, fast_hit_count: 438 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  if (n == 1) { /* line 26 slow_hit_count: 28, fast_hit_count: 29 */
    if (c == 1) { /* line 27 slow_hit_count: 24, fast_hit_count: 28 */
      cout << "Ashishgup" /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
           << "\n"; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
      return; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
    } else { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      cout << "FastestFinger" /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
           << "\n"; /* line 33 slow_hit_count: 23, fast_hit_count: 27 */
      return; /* line 34 slow_hit_count: 23, fast_hit_count: 27 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    bool prime = true; /* line 37 slow_hit_count: 4, fast_hit_count: 1 */
    for (long long int i = 2; i * i <= n; i++) { /* line 38 slow_hit_count: 15384, fast_hit_count: 1397 */
      if (n % i == 0) prime = false; /* line 39 slow_hit_count: 15380, fast_hit_count: 1396 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    if (prime) { /* line 41 slow_hit_count: 4, fast_hit_count: 1 */
      if (c == 1) { /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
        cout << "FastestFinger" /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
             << "\n"; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
        return; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
        cout << "Ashishgup" /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
             << "\n"; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
        return; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
      cout << "Ashishgup" /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
           << "\n"; /* line 53 slow_hit_count: 4, fast_hit_count: 1 */
      return; /* line 54 slow_hit_count: 4, fast_hit_count: 1 */
    } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
  long long int t = 1; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> t; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 64 slow_hit_count: 32, fast_hit_count: 32 */
    solve(); /* line 65 slow_hit_count: 31, fast_hit_count: 31 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 67 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Based on the problem statement, the given C code, and the line-level hit counts from the slow and fast inputs, let's analyze the performance characteristics and derive natural language performance invariants.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Prime Checking Loop (Lines 38-39)**:
   - The loop at line 38 (`for (long long int i = 2; i * i <= n; i++)`) is responsible for checking the primality of the number `n`.
   - This loop is significantly more frequently hit in the slow input (`15384` times) compared to the fast input (`1397` times).
   - This suggests that the primality test becomes expensive when `n` is a large odd number or has a small number of factors, requiring numerous iterations to determine its primality.

2. **Division by 2 Loop (Lines 22-24)**:
   - This loop efficiently reduces `n` by repeatedly dividing by 2 until `n` is odd.
   - The hit counts are comparable across slow and fast inputs (`390` vs `467`), indicating that this part of the code is not a primary contributor to the performance difference.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following performance invariants:

1. **Invariant Related to Primality Check**:
   - **Natural Language Description**: "If a large odd number `n` needs to be checked for primality, the code will execute a primality loop that can significantly slow down due to the high number of iterations required."
   - **Context**: This invariant captures the expensive nature of the primality check for large odd numbers, where the number of iterations in the loop `for (long long int i = 2; i * i <= n; i++)` becomes substantial.

2. **Invariant Related to Even Number Reduction**:
   - **Natural Language Description**: "When `n` has a large power of 2 factor, it can be quickly reduced to an odd number, minimizing the impact of the division loop."
   - **Context**: Although not directly causing slowness, it’s important to note that a high power of 2 in `n` leads to faster reduction, as evidenced by the moderate hit count difference in the division loop.

### Example Checker Code for Invariants

You can integrate these checks into your debugging or optimization process:

```cpp
void check_primality_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Primality invariant triggered - expensive primality check" << endl;
        abort();
    }
}

void check_even_reduction_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Even reduction invariant triggered - quick reduction due to large power of 2" << endl;
        abort();
    }
}

// In the code where `n` is processed
if (n % 2 == 1) {
    check_primality_invariant(n > 1e7 && /* additional condition if needed */);
}

int powerOf2Factor = 0;
while (n % 2 == 0) {
    n /= 2;
    powerOf2Factor++;
}

check_even_reduction_invariant(powerOf2Factor > 20); // Example arbitrary threshold
```

These invariants and associated checks help identify situations where the program’s performance may degrade, particularly focusing on the costly primality test loop and the quick reduction potential when dealing with powers of 2.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ashishgup and FastestFinger play a game. 

They start with a number n and play in turns. In each turn, a player can make any one of the following moves:

  * Divide n by any of its odd divisors greater than 1. 
  * Subtract 1 from n if n is greater than 1. 



Divisors of a number include the number itself.

The player who is unable to make a move loses the game.

Ashishgup moves first. Determine the winner of the game if both of them play optimally.

Input

The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows.

The only line of each test case contains a single integer — n (1 ≤ n ≤ 10^9).

Output

For each test case, print "Ashishgup" if he wins, and "FastestFinger" otherwise (without quotes).

Example

Input


7
1
2
3
4
5
6
12


Output


FastestFinger
Ashishgup
Ashishgup
FastestFinger
Ashishgup
FastestFinger
Ashishgup

Note

In the first test case, n = 1, Ashishgup cannot make a move. He loses.

In the second test case, n = 2, Ashishgup subtracts 1 on the first move. Now n = 1, FastestFinger cannot make a move, so he loses.

In the third test case, n = 3, Ashishgup divides by 3 on the first move. Now n = 1, FastestFinger cannot make a move, so he loses.

In the last test case, n = 12, Ashishgup divides it by 3. Now n = 4, FastestFinger is forced to subtract 1, and Ashishgup gets 3, so he wins by dividing it by 3.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Performance-Characterizing Invariants in C++

Based on the invariant descriptions, we will create C++ runtime checks for each identified condition.

#### Invariant 1: Primality Check for Large Odd Numbers
- **Condition**: If a large odd number `n` needs to be checked for primality, the code can slow down significantly due to the intensive loop for primality testing.
- **Checker Code**:
```cpp
void check_primality_invariant(long long n) {
    if (n > 1e7 && n % 2 == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - checking primality for large odd number!" << endl;
        abort();
    }
}
```

#### Invariant 2: Quick Reduction via Division by Powers of Two
- **Condition**: When `n` has a large power of 2 factor, it can be quickly reduced, which is efficient but not a bottleneck.
- **Checker Code**:
```cpp
void check_even_reduction_invariant(int powerOf2Factor) {
    if (powerOf2Factor > 20) {  // Arbitrary threshold for noticing the quick reduction potential
        cerr << "Warning: Quick reduction detected - large power of 2 factor!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checker Code into the Original Program

Here is the original C++ code with the runtime checks integrated at appropriate points.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for the primality invariant
void check_primality_invariant(long long n) {
    if (n > 1e7 && n % 2 == 1) {
        cerr << "Warning: Performance bottleneck condition triggered - checking primality for large odd number!" << endl;
        abort();
    }
}

// Checker for the even reduction invariant
void check_even_reduction_invariant(int powerOf2Factor) {
    if (powerOf2Factor > 20) {  // Threshold for detecting quick reduction
        cerr << "Warning: Quick reduction detected - large power of 2 factor!" << endl;
        abort();
    }
}

void solve() {
    long long int n;
    cin >> n;

    if (n == 1) {
        cout << "FastestFinger" << "\n";
        return;
    }
    if (n % 2) {
        cout << "Ashishgup" << "\n";
        return;
    }

    long long int c = 0;
    while (n % 2 == 0) {
        c++;
        n /= 2;
    }

    // Check for large power of 2 reduction
    check_even_reduction_invariant(c);

    if (n == 1) {
        if (c == 1) {
            cout << "Ashishgup" << "\n";
            return;
        } else {
            cout << "FastestFinger" << "\n";
            return;
        }
    } else {
        // Check for primality of large odd numbers
        check_primality_invariant(n);

        bool prime = true;
        for (long long int i = 2; i * i <= n; i++) {
            if (n % i == 0) prime = false;
        }
        if (prime) {
            if (c == 1) {
                cout << "FastestFinger" << "\n";
                return;
            } else {
                cout << "Ashishgup" << "\n";
                return;
            }
        } else {
            cout << "Ashishgup" << "\n";
            return;
        }
    }
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    long long int t = 1;
    cin >> t;
    while (t--) {
        solve();
    }
}
```

### Explanation of Integration:

- **Primality Check**: The `check_primality_invariant` function is called before entering the primality test loop for large odd numbers. This ensures that if the number is large and odd, we alert the user before engaging in expensive computations.
- **Even Reduction Check**: The `check_even_reduction_invariant` function is invoked after determining the power of 2 factor, ensuring efficient handling is acknowledged before potentially costly steps are evaluated. 
- Both checks are placed outside the tight loops to avoid adding runtime overhead during repeated iterations.

