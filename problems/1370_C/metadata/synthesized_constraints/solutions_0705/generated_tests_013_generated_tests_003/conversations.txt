system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ashishgup and FastestFinger play a game. 

They start with a number n and play in turns. In each turn, a player can make any one of the following moves:

  * Divide n by any of its odd divisors greater than 1. 
  * Subtract 1 from n if n is greater than 1. 



Divisors of a number include the number itself.

The player who is unable to make a move loses the game.

Ashishgup moves first. Determine the winner of the game if both of them play optimally.

Input

The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows.

The only line of each test case contains a single integer — n (1 ≤ n ≤ 10^9).

Output

For each test case, print "Ashishgup" if he wins, and "FastestFinger" otherwise (without quotes).

Example

Input


7
1
2
3
4
5
6
12


Output


FastestFinger
Ashishgup
Ashishgup
FastestFinger
Ashishgup
FastestFinger
Ashishgup

Note

In the first test case, n = 1, Ashishgup cannot make a move. He loses.

In the second test case, n = 2, Ashishgup subtracts 1 on the first move. Now n = 1, FastestFinger cannot make a move, so he loses.

In the third test case, n = 3, Ashishgup divides by 3 on the first move. Now n = 1, FastestFinger cannot make a move, so he loses.

In the last test case, n = 12, Ashishgup divides it by 3. Now n = 4, FastestFinger is forced to subtract 1, and Ashishgup gets 3, so he wins by dividing it by 3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long t, n;
bool solve() {
  if (n == 2) return true;
  int n1 = 0;
  long long t = n;
  for (long long a = 2; a <= sqrt(n) && a <= t; a++) {
    while (t % a == 0) {
      t /= a;
      if (a % 2 == 1) n1++;
    }
  }
  if (t > 1 && t % 2 == 1) {
    n1++;
  }
  if (n % 2 == 0 && (n / 2) % 2 == 1) {
    return n1 > 1;
  }
  return n1 >= 1;
}
int main() {
  cin >> t;
  while (t--) {
    cin >> n;
    if (solve()) {
      cout << "Ashishgup" << endl;
    } else {
      cout << "FastestFinger" << endl;
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

31
16777216
1
43
344588996
1024
536870912
131072
8388608
4194304
1048576
16
8
67108864
128
8192
256
16384
262144
512
32768
32
4
2048
33554432
134217728
4096
1000000000
2097152
524288
2
65536


(G.2) Fast Input

31
16777216
1
43
268435456
1024
536870912
131072
8388608
4194304
1048576
16
8
67108864
128
8192
256
16384
262144
512
32768
32
4
2048
33554432
134217728
4096
1000000000
2097152
524288
2
65536


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long t, n; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
bool solve() { /* line 4 slow_hit_count: 31, fast_hit_count: 31 */
  if (n == 2) return true; /* line 5 slow_hit_count: 31, fast_hit_count: 31 */
  int n1 = 0; /* line 6 slow_hit_count: 30, fast_hit_count: 30 */
  long long t = n; /* line 7 slow_hit_count: 30, fast_hit_count: 30 */
  for (long long a = 2; a <= sqrt(n) && a <= t; a++) { /* line 8 slow_hit_count: 18627, fast_hit_count: 66 */
    while (t % a == 0) { /* line 9 slow_hit_count: 19018, fast_hit_count: 482 */
      t /= a; /* line 10 slow_hit_count: 421, fast_hit_count: 446 */
      if (a % 2 == 1) n1++; /* line 11 slow_hit_count: 421, fast_hit_count: 446 */
    } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  if (t > 1 && t % 2 == 1) { /* line 14 slow_hit_count: 30, fast_hit_count: 30 */
    n1++; /* line 15 slow_hit_count: 2, fast_hit_count: 1 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  if (n % 2 == 0 && (n / 2) % 2 == 1) { /* line 17 slow_hit_count: 30, fast_hit_count: 30 */
    return n1 > 1; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return n1 >= 1; /* line 20 slow_hit_count: 30, fast_hit_count: 30 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> t; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 24 slow_hit_count: 32, fast_hit_count: 32 */
    cin >> n; /* line 25 slow_hit_count: 31, fast_hit_count: 31 */
    if (solve()) { /* line 26 slow_hit_count: 31, fast_hit_count: 31 */
      cout << "Ashishgup" << endl; /* line 27 slow_hit_count: 4, fast_hit_count: 3 */
    } else { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      cout << "FastestFinger" << endl; /* line 29 slow_hit_count: 27, fast_hit_count: 28 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck in the given C program and generate performance-characterizing invariants, we will go through the following phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - **Line 8 (for loop):** In the slow input, this line is hit 18,627 times, compared to only 66 times in the fast input. This indicates that the loop is running significantly more times for the slow input.
   - **Line 9 (while loop):** This line is hit 19,018 times with the slow input, versus 482 times with the fast input. This suggests the inner while loop is a major contributor to the slowdown.
   - **Lines 10 and 11:** These lines are also hit significantly more in the slow input, indicating repeated division and checking of divisors.

2. **Code Interaction with Data Structures:**
   - The nested loop structure is iterating over potential divisors of `n`, with the inner loop dividing `n` by its divisors. When `n` has many divisors or large powers of small primes, this can lead to many iterations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant Descriptions:**

   - **Invariant #1: High Iteration Count in Divisor Loop**
     - **Natural Language Description:** "If the input number `n` has numerous or large powers of odd divisors, the nested loop will iterate excessively, potentially causing a slowdown."
     - This accounts for cases where `n` is a large power of 2 or has many small odd divisors.

   - **Invariant #2: Large Powers of Two**
     - **Natural Language Description:** "If `n` is a large power of two, especially when `n / 2` results in an odd number, the program might experience slow performance due to extensive divisor checks."
     - Numbers like `2^20` or `2^30` with specific odd results from division by 2 can increase the complexity of the loop operations.

2. **Abstracted Thresholds:**
   - Thresholds in the natural language description refer to the number of divisors or the form of `n` (such as `n` being a power of two), which are relevant to the problem constraints without relying on specific numerical values.

3. **Connection to Input Patterns:**
   - These invariants capture the scenarios where `n` is structured in a way that leads to high computational cost, either by having many potential divisors to check or by being a power of two with particular properties.

### Final Performance Invariants

Below are the succinct statements capturing the slow execution triggers:

1. **"If the input number `n` has numerous or large powers of odd divisors, the nested loop will iterate excessively, potentially causing a slowdown."**

2. **"If `n` is a large power of two, especially when `n / 2` results in an odd number, the program might experience slow performance due to extensive divisor checks."**

These performance invariants provide a broad yet realistic framework for understanding the conditions under which the program is likely to slow down, offering insights for future optimization efforts or test case design.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ashishgup and FastestFinger play a game. 

They start with a number n and play in turns. In each turn, a player can make any one of the following moves:

  * Divide n by any of its odd divisors greater than 1. 
  * Subtract 1 from n if n is greater than 1. 



Divisors of a number include the number itself.

The player who is unable to make a move loses the game.

Ashishgup moves first. Determine the winner of the game if both of them play optimally.

Input

The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows.

The only line of each test case contains a single integer — n (1 ≤ n ≤ 10^9).

Output

For each test case, print "Ashishgup" if he wins, and "FastestFinger" otherwise (without quotes).

Example

Input


7
1
2
3
4
5
6
12


Output


FastestFinger
Ashishgup
Ashishgup
FastestFinger
Ashishgup
FastestFinger
Ashishgup

Note

In the first test case, n = 1, Ashishgup cannot make a move. He loses.

In the second test case, n = 2, Ashishgup subtracts 1 on the first move. Now n = 1, FastestFinger cannot make a move, so he loses.

In the third test case, n = 3, Ashishgup divides by 3 on the first move. Now n = 1, FastestFinger cannot make a move, so he loses.

In the last test case, n = 12, Ashishgup divides it by 3. Now n = 4, FastestFinger is forced to subtract 1, and Ashishgup gets 3, so he wins by dividing it by 3.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ checks for the performance-characterizing invariants derived earlier:

1. **Invariant #1: High Iteration Count in Divisor Loop**
   - This invariant suggests checking for numerous or large powers of odd divisors, which lead to excessive iterations in the nested loop.

```cpp
void check_odd_divisors_invariant(long long n, long long divisorCount) {
    if (divisorCount > 100) { // Assuming a threshold indicating excessive divisor iterations
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations due to numerous or large powers of odd divisors!" << endl;
        abort();
    }
}
```

2. **Invariant #2: Large Powers of Two**
   - This invariant checks if `n` is a power of two, particularly when `n/2` is odd, which leads to extensive divisor checks.

```cpp
void check_large_power_of_two_invariant(long long n) {
    if ((n & (n - 1)) == 0 && ((n / 2) % 2 == 1)) { // Check if n is a power of two and n/2 is odd
        cerr << "Warning: Performance bottleneck condition triggered - large power of two with odd n/2!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Program

Now, let's integrate these checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

long long t, n;

void check_odd_divisors_invariant(long long n, long long divisorCount) {
    if (divisorCount > 100) { // Assuming a threshold indicating excessive divisor iterations
        cerr << "Warning: Performance bottleneck condition triggered - excessive iterations due to numerous or large powers of odd divisors!" << endl;
        abort();
    }
}

void check_large_power_of_two_invariant(long long n) {
    if ((n & (n - 1)) == 0 && ((n / 2) % 2 == 1)) { // Check if n is a power of two and n/2 is odd
        cerr << "Warning: Performance bottleneck condition triggered - large power of two with odd n/2!" << endl;
        abort();
    }
}

bool solve() {
    if (n == 2) return true;
    int n1 = 0;
    long long t = n;
    long long divisorCount = 0;
    for (long long a = 2; a <= sqrt(n) && a <= t; a++) {
        while (t % a == 0) {
            t /= a;
            if (a % 2 == 1) n1++;
            divisorCount++;
        }
    }

    check_odd_divisors_invariant(n, divisorCount); // Check the first performance invariant

    if (t > 1 && t % 2 == 1) {
        n1++;
    }
    if (n % 2 == 0 && (n / 2) % 2 == 1) {
        return n1 > 1;
    }
    return n1 >= 1;
}

int main() {
    cin >> t;
    while (t--) {
        cin >> n;
        check_large_power_of_two_invariant(n); // Check the second performance invariant
        if (solve()) {
            cout << "Ashishgup" << endl;
        } else {
            cout << "FastestFinger" << endl;
        }
    }
    return 0;
}
```

### Explanation of Integration

- **Placement of Checks:**
  - **`check_odd_divisors_invariant`** is placed after the divisor loop in the `solve()` function to monitor the number of divisor iterations.
  - **`check_large_power_of_two_invariant`** is placed after reading `n` to immediately catch configurations that can cause slow performance.

- **Reason for Placement:**
  - Both checks are placed strategically to ensure they do not incur unnecessary runtime costs, acting only when critical conditions are met.
  
This integration helps identify slow execution paths dynamically and aborts execution when detected, facilitating easier debugging and optimization.

