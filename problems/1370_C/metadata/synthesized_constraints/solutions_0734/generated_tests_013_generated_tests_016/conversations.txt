system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Ashishgup and FastestFinger play a game. 

They start with a number n and play in turns. In each turn, a player can make any one of the following moves:

  * Divide n by any of its odd divisors greater than 1. 
  * Subtract 1 from n if n is greater than 1. 



Divisors of a number include the number itself.

The player who is unable to make a move loses the game.

Ashishgup moves first. Determine the winner of the game if both of them play optimally.

Input

The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows.

The only line of each test case contains a single integer — n (1 ≤ n ≤ 10^9).

Output

For each test case, print "Ashishgup" if he wins, and "FastestFinger" otherwise (without quotes).

Example

Input


7
1
2
3
4
5
6
12


Output


FastestFinger
Ashishgup
Ashishgup
FastestFinger
Ashishgup
FastestFinger
Ashishgup

Note

In the first test case, n = 1, Ashishgup cannot make a move. He loses.

In the second test case, n = 2, Ashishgup subtracts 1 on the first move. Now n = 1, FastestFinger cannot make a move, so he loses.

In the third test case, n = 3, Ashishgup divides by 3 on the first move. Now n = 1, FastestFinger cannot make a move, so he loses.

In the last test case, n = 12, Ashishgup divides it by 3. Now n = 4, FastestFinger is forced to subtract 1, and Ashishgup gets 3, so he wins by dividing it by 3.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int t;
  cin >> t;
  while (t--) {
    long long int n;
    cin >> n;
    if (n == 1) {
      cout << "FastestFinger" << endl;
    } else if (n == 2) {
      cout << "Ashishgup" << endl;
    } else {
      if (n % 2 != 0)
        cout << "Ashishgup" << endl;
      else {
        int flag = 0;
        for (int i = 2; i <= sqrtl(n); i++) {
          if (n % i == 0) {
            if (i % 2 != 0) {
              if (n / i != 2) flag = 1;
            } else {
              if (i != 2 && (n / i) % 2 != 0) flag = 1;
            }
          }
        }
        if (flag == 0)
          cout << "FastestFinger" << endl;
        else {
          cout << "Ashishgup" << endl;
        }
      }
    }
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

31
16777216
1
43
344588996
1024
536870912
131072
8388608
4194304
1048576
16
8
67108864
128
8192
256
16384
262144
512
32768
32
4
2048
33554432
134217728
4096
1000000000
2097152
524288
2
65536


(G.2) Fast Input

7
1
1
3
4
5
11
12


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int t; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> t; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 8 slow_hit_count: 32, fast_hit_count: 8 */
    long long int n; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> n; /* line 10 slow_hit_count: 31, fast_hit_count: 7 */
    if (n == 1) { /* line 11 slow_hit_count: 31, fast_hit_count: 7 */
      cout << "FastestFinger" << endl; /* line 12 slow_hit_count: 1, fast_hit_count: 2 */
    } else if (n == 2) { /* line 13 slow_hit_count: 30, fast_hit_count: 5 */
      cout << "Ashishgup" << endl; /* line 14 slow_hit_count: 1, fast_hit_count: 0 */
    } else { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
      if (n % 2 != 0) /* line 16 slow_hit_count: 29, fast_hit_count: 5 */
        cout << "Ashishgup" << endl; /* line 17 slow_hit_count: 1, fast_hit_count: 3 */
      else { /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
        int flag = 0; /* line 19 slow_hit_count: 28, fast_hit_count: 2 */
        for (int i = 2; i <= sqrtl(n); i++) { /* line 20 slow_hit_count: 112892, fast_hit_count: 5 */
          if (n % i == 0) { /* line 21 slow_hit_count: 112864, fast_hit_count: 3 */
            if (i % 2 != 0) { /* line 22 slow_hit_count: 247, fast_hit_count: 3 */
              if (n / i != 2) flag = 1; /* line 23 slow_hit_count: 7, fast_hit_count: 1 */
            } else { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
              if (i != 2 && (n / i) % 2 != 0) flag = 1; /* line 25 slow_hit_count: 240, fast_hit_count: 2 */
            } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
        if (flag == 0) /* line 29 slow_hit_count: 28, fast_hit_count: 2 */
          cout << "FastestFinger" << endl; /* line 30 slow_hit_count: 26, fast_hit_count: 1 */
        else { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
          cout << "Ashishgup" << endl; /* line 32 slow_hit_count: 2, fast_hit_count: 1 */
        } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis of Hit Counts
Based on the line-level hit counts for both the fast and slow inputs, we observe the following:

1. **Line 20 (`for (int i = 2; i <= sqrtl(n); i++)`):** This line has a significantly higher hit count for the slow input (112,892) compared to the fast input (5). This indicates that the loop iterating through potential divisors runs excessively in slow scenarios.

2. **Line 21 (`if (n % i == 0)`):** This condition is evaluated many more times in the slow input, suggesting that `n` has many divisors or that this loop runs with a large `n`.

3. **Lines 22-25:** These lines include checks for odd divisors and certain conditions for `n`, which are hit significantly more under slow input. Specifically, the checks within these conditions indicate that the presence of many divisors impacts performance.

### Interaction with Data Structures and Input Constraints
- The loop iterating over all divisors up to `sqrt(n)` can become costly, especially when `n` is large or has specific properties that make the divisor-checking loop run longer (e.g., `n` being a large power of 2).
- Since `n` can be as large as \(10^9\), the number of iterations in the loop can be substantial when `n` is a large power of 2, potentially leading to excessive computation.

## Phase 2: Derive Performance-Characterizing Invariants

### Natural Language Performance Invariants

1. **Power of Two Input:**
   - Natural Language: "When the input `n` is a large power of 2, the loop iterates unnecessarily over many potential divisors, where `n` lacks odd divisors until certain conditions are met."
   - This describes a scenario where `n`'s form (a power of 2) causes the loop to perform redundant checks before reaching a conclusion, leading to inefficiency.

2. **Large Prime Factors or Near Prime Numbers:**
   - Natural Language: "If `n` is a large number with few divisors, such as a large prime or near-prime, the loop's divisor-checking becomes intensive, causing a slowdown."
   - This captures scenarios where `n`'s divisor structure leads to exhaustive iteration, as finding a suitable divisor may take many iterations.

3. **Divisor Density:**
   - Natural Language: "Inputs where `n` has a dense set of divisors close to `sqrt(n)` lead to increased loop iterations, impacting performance."
   - This invariant addresses cases where the divisor-checking loop processes many potential divisors due to a high density of divisors around the loop's limit.

### Suggestions for Thresholds
Given the constraints \( n \leq 10^9 \), the approach should consider divisor structures and specific forms of `n` that cause excessive looping:

- Consider the form of `n` when assessing loop break conditions, especially when `n` is a power of 2 or large primes.
- Implement checks to detect when `n` can be reduced more efficiently without iterating over all potential divisors.

These performance-characterizing invariants guard against potential slowdowns when similar input patterns are encountered in the future. They help identify and mitigate scenarios where the current logic may fall into inefficient computation paths.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Ashishgup and FastestFinger play a game. 

They start with a number n and play in turns. In each turn, a player can make any one of the following moves:

  * Divide n by any of its odd divisors greater than 1. 
  * Subtract 1 from n if n is greater than 1. 



Divisors of a number include the number itself.

The player who is unable to make a move loses the game.

Ashishgup moves first. Determine the winner of the game if both of them play optimally.

Input

The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows.

The only line of each test case contains a single integer — n (1 ≤ n ≤ 10^9).

Output

For each test case, print "Ashishgup" if he wins, and "FastestFinger" otherwise (without quotes).

Example

Input


7
1
2
3
4
5
6
12


Output


FastestFinger
Ashishgup
Ashishgup
FastestFinger
Ashishgup
FastestFinger
Ashishgup

Note

In the first test case, n = 1, Ashishgup cannot make a move. He loses.

In the second test case, n = 2, Ashishgup subtracts 1 on the first move. Now n = 1, FastestFinger cannot make a move, so he loses.

In the third test case, n = 3, Ashishgup divides by 3 on the first move. Now n = 1, FastestFinger cannot make a move, so he loses.

In the last test case, n = 12, Ashishgup divides it by 3. Now n = 4, FastestFinger is forced to subtract 1, and Ashishgup gets 3, so he wins by dividing it by 3.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement Checker Code

Here, we translate the derived performance-characterizing invariants into C++ checker code.

### Checker Code Implementations

1. **Power of Two Input:**

```cpp
void check_power_of_two_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large power of two detected!" << endl;
        abort();
    }
}
```

2. **Large Prime Factors or Near Prime Numbers:**

```cpp
void check_large_prime_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large number with few divisors!" << endl;
        abort();
    }
}
```

3. **Divisor Density:**

```cpp
void check_divisor_density_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - dense divisor set detected near sqrt(n)!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checkers into the Original Program

Now, we integrate these checks into the given C++ program at appropriate locations:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_power_of_two_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large power of two detected!" << endl;
        abort();
    }
}

void check_large_prime_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large number with few divisors!" << endl;
        abort();
    }
}

void check_divisor_density_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - dense divisor set detected near sqrt(n)!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int t;
    cin >> t;
    while (t--) {
        long long int n;
        cin >> n;

        // Check if n is a large power of two
        check_power_of_two_invariant((n & (n - 1)) == 0 && n > 2);

        if (n == 1) {
            cout << "FastestFinger" << endl;
        } else if (n == 2) {
            cout << "Ashishgup" << endl;
        } else {
            if (n % 2 != 0) {
                cout << "Ashishgup" << endl;
            } else {
                int flag = 0;
                int oddDivisorCount = 0;
                for (int i = 2; i <= sqrtl(n); i++) {
                    if (n % i == 0) {
                        if (i % 2 != 0) {
                            if (n / i != 2) flag = 1;
                        } else {
                            if (i != 2 && (n / i) % 2 != 0) flag = 1;
                        }
                        if (i % 2 != 0 || (n / i) % 2 != 0)
                            oddDivisorCount++;
                    }
                }
                
                // Check if n is a large number with few divisors (prime or near-prime)
                check_large_prime_invariant(oddDivisorCount == 0 && n > 2);
                
                // Check for dense divisor set near sqrt(n)
                check_divisor_density_invariant(oddDivisorCount > sqrt(n) / 2);

                if (flag == 0)
                    cout << "FastestFinger" << endl;
                else {
                    cout << "Ashishgup" << endl;
                }
            }
        }
    }
    return 0;
}
```

### Explanation of Integration Points

- **Power of Two Check:** Right after reading `n`, we check if `n` is a power of two greater than 2, as this could lead to inefficient divisor iterations.
  
- **Large Prime Factors Check:** After iterating potential divisors, we check if there are very few odd divisors. This identifies large primes or near-prime numbers that could cause excessive loop iterations.

- **Divisor Density Check:** After processing divisors, we evaluate if there's a dense set near `sqrt(n)`, leading to frequent loop iterations.

These checks, while ensuring minimal performance impact, help detect scenarios leading to bottlenecks and alert developers for potential optimizations.

