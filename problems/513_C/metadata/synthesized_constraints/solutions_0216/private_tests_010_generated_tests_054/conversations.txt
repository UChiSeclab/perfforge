system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Nowadays, most of the internet advertisements are not statically linked to a web page. Instead, what will be shown to the person opening a web page is determined within 100 milliseconds after the web page is opened. Usually, multiple companies compete for each ad slot on the web page in an auction. Each of them receives a request with details about the user, web page and ad slot and they have to respond within those 100 milliseconds with a bid they would pay for putting an advertisement on that ad slot. The company that suggests the highest bid wins the auction and gets to place its advertisement. If there are several companies tied for the highest bid, the winner gets picked at random.

However, the company that won the auction does not have to pay the exact amount of its bid. In most of the cases, a second-price auction is used. This means that the amount paid by the company is equal to the maximum of all the other bids placed for this ad slot.

Let's consider one such bidding. There are n companies competing for placing an ad. The i-th of these companies will bid an integer number of microdollars equiprobably randomly chosen from the range between Li and Ri, inclusive. In the other words, the value of the i-th company bid can be any integer from the range [Li, Ri] with the same probability. 

Determine the expected value that the winner will have to pay in a second-price auction.

Input

The first line of input contains an integer number n (2 ≤ n ≤ 5). n lines follow, the i-th of them containing two numbers Li and Ri (1 ≤ Li ≤ Ri ≤ 10000) describing the i-th company's bid preferences.

This problem doesn't have subproblems. You will get 8 points for the correct submission.

Output

Output the answer with absolute or relative error no more than 1e - 9.

Examples

Input

3
4 7
8 10
5 5


Output

5.7500000000


Input

3
2 5
3 4
1 6


Output

3.5000000000

Note

Consider the first example. The first company bids a random integer number of microdollars in range [4, 7]; the second company bids between 8 and 10, and the third company bids 5 microdollars. The second company will win regardless of the exact value it bids, however the price it will pay depends on the value of first company's bid. With probability 0.5 the first company will bid at most 5 microdollars, and the second-highest price of the whole auction will be 5. With probability 0.25 it will bid 6 microdollars, and with probability 0.25 it will bid 7 microdollars. Thus, the expected value the second company will have to pay is 0.5·5 + 0.25·6 + 0.25·7 = 5.75.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
#pragma comment(linker, "/STACK:134217728")
using namespace std;
int n, l[6], r[6];
vector<int> ll, rr;
int aa, bb;
long double x, y;
void calc(int mm) {
  int nn = n - 1;
  for (int i = 0; i < (nn); i++) {
    if (ll[i] > bb) return;
  }
  long double xx = 0, yy = 0;
  for (int i = int(1); i <= int(aa - 1); i++) {
    bool good = true;
    for (int j = 0; j < (nn); j++)
      if (ll[j] > i) good = false;
    if (!good) continue;
    for (int k = int(1); k <= int((1 << nn) - 1); k++) {
      good = true;
      for (int j = 0; j < (nn); j++) {
        if ((k >> j) % 2 == 1 && i > rr[j]) good = false;
        if ((k >> j) % 2 == 0 && i <= ll[j]) good = false;
      }
      if (!good) continue;
      long long yyy = 1;
      for (int j = 0; j < (nn); j++) {
        if ((k >> j) % 2 == 0) {
          yyy *= min(i - 1, rr[j]) - ll[j] + 1;
        }
      }
      xx += i * yyy;
      yy += yyy;
    }
  }
  for (int i = int(aa); i <= int(bb); i++) {
    long long xx_ = 0, yy_ = 0;
    bool good = true;
    for (int j = 0; j < (nn); j++)
      if (ll[j] > i) good = false;
    if (!good) continue;
    for (int k = int(1); k <= int((1 << nn) - 1); k++) {
      good = true;
      for (int j = 0; j < (nn); j++) {
        if ((k >> j) % 2 == 1 && i > rr[j]) good = false;
        if ((k >> j) % 2 == 0 && i <= ll[j]) good = false;
      }
      if (!good) continue;
      long long yyy = 1;
      for (int j = 0; j < (nn); j++) {
        if ((k >> j) % 2 == 0) {
          yyy *= min(i - 1, rr[j]) - ll[j] + 1;
        }
      }
      for (int j = 0; j < (nn); j++) {
        if ((k >> j) % 2 == 1 && j < mm) good = false;
      }
      xx += i * yyy;
      yy += yyy;
      if (!good) {
        xx_ += i * yyy;
        yy_ += yyy;
      }
    }
    x += xx - xx_;
    y += yy - yy_;
  }
}
void process() {
  cin >> n;
  for (int i = 0; i < (n); i++) cin >> l[i] >> r[i];
  x = 0;
  y = 0;
  for (int i = 0; i < (n); i++) {
    ll.clear();
    rr.clear();
    aa = l[i];
    bb = r[i];
    for (int j = 0; j < (n); j++) {
      if (j != i) {
        ll.push_back(l[j]);
        rr.push_back(r[j]);
      }
    }
    calc(i);
  }
  cout.precision(10);
  cout << fixed << x / y << endl;
}
void make() {
  freopen("in.txt", "wt", stdout);
  int N = 200000, M = 150000, Q = 300000;
  cout << N << endl;
  for (int i = 0; i < N; i++) cout << 1000000 - i << " ";
  exit(0);
}
int main() {
  process();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
2194 6947
2062 8247
4481 8430
3864 9409
3784 5996


(G.2) Fast Input

5
2194 6947
2062 8247
7300 8430
3864 9409
3784 5996


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#pragma comment(linker, "/STACK:134217728") /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int n, l[6], r[6]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> ll, rr; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int aa, bb; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long double x, y; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void calc(int mm) { /* line 8 slow_hit_count: 5, fast_hit_count: 5 */
  int nn = n - 1; /* line 9 slow_hit_count: 5, fast_hit_count: 5 */
  for (int i = 0; i < (nn); i++) { /* line 10 slow_hit_count: 25, fast_hit_count: 20 */
    if (ll[i] > bb) return; /* line 11 slow_hit_count: 20, fast_hit_count: 17 */
  } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  long double xx = 0, yy = 0; /* line 13 slow_hit_count: 5, fast_hit_count: 3 */
  for (int i = int(1); i <= int(aa - 1); i++) { /* line 14 slow_hit_count: 16385, fast_hit_count: 13226 */
    bool good = true; /* line 15 slow_hit_count: 16380, fast_hit_count: 13223 */
    for (int j = 0; j < (nn); j++) /* line 16 slow_hit_count: 81900, fast_hit_count: 66115 */
      if (ll[j] > i) good = false; /* line 17 slow_hit_count: 65520, fast_hit_count: 52892 */
    if (!good) continue; /* line 18 slow_hit_count: 16380, fast_hit_count: 13223 */
    for (int k = int(1); k <= int((1 << nn) - 1); k++) { /* line 19 slow_hit_count: 9872, fast_hit_count: 54976 */
      good = true; /* line 20 slow_hit_count: 9255, fast_hit_count: 51540 */
      for (int j = 0; j < (nn); j++) { /* line 21 slow_hit_count: 46275, fast_hit_count: 257700 */
        if ((k >> j) % 2 == 1 && i > rr[j]) good = false; /* line 22 slow_hit_count: 37020, fast_hit_count: 206160 */
        if ((k >> j) % 2 == 0 && i <= ll[j]) good = false; /* line 23 slow_hit_count: 37020, fast_hit_count: 206160 */
      } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      if (!good) continue; /* line 25 slow_hit_count: 9255, fast_hit_count: 51540 */
      long long yyy = 1; /* line 26 slow_hit_count: 9248, fast_hit_count: 39701 */
      for (int j = 0; j < (nn); j++) { /* line 27 slow_hit_count: 46240, fast_hit_count: 198505 */
        if ((k >> j) % 2 == 0) { /* line 28 slow_hit_count: 36992, fast_hit_count: 158804 */
          yyy *= min(i - 1, rr[j]) - ll[j] + 1; /* line 29 slow_hit_count: 17260, fast_hit_count: 77740 */
        } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      xx += i * yyy; /* line 32 slow_hit_count: 9248, fast_hit_count: 39701 */
      yy += yyy; /* line 33 slow_hit_count: 9248, fast_hit_count: 39701 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = int(aa); i <= int(bb); i++) { /* line 36 slow_hit_count: 22654, fast_hit_count: 12866 */
    long long xx_ = 0, yy_ = 0; /* line 37 slow_hit_count: 22649, fast_hit_count: 12863 */
    bool good = true; /* line 38 slow_hit_count: 22649, fast_hit_count: 12863 */
    for (int j = 0; j < (nn); j++) /* line 39 slow_hit_count: 113245, fast_hit_count: 64315 */
      if (ll[j] > i) good = false; /* line 40 slow_hit_count: 90596, fast_hit_count: 51452 */
    if (!good) continue; /* line 41 slow_hit_count: 22649, fast_hit_count: 12863 */
    for (int k = int(1); k <= int((1 << nn) - 1); k++) { /* line 42 slow_hit_count: 266064, fast_hit_count: 67024 */
      good = true; /* line 43 slow_hit_count: 249435, fast_hit_count: 62835 */
      for (int j = 0; j < (nn); j++) { /* line 44 slow_hit_count: 1247175, fast_hit_count: 314175 */
        if ((k >> j) % 2 == 1 && i > rr[j]) good = false; /* line 45 slow_hit_count: 997740, fast_hit_count: 251340 */
        if ((k >> j) % 2 == 0 && i <= ll[j]) good = false; /* line 46 slow_hit_count: 997740, fast_hit_count: 251340 */
      } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      if (!good) continue; /* line 48 slow_hit_count: 249435, fast_hit_count: 62835 */
      long long yyy = 1; /* line 49 slow_hit_count: 152366, fast_hit_count: 8896 */
      for (int j = 0; j < (nn); j++) { /* line 50 slow_hit_count: 761830, fast_hit_count: 44480 */
        if ((k >> j) % 2 == 0) { /* line 51 slow_hit_count: 609464, fast_hit_count: 35584 */
          yyy *= min(i - 1, rr[j]) - ll[j] + 1; /* line 52 slow_hit_count: 305338, fast_hit_count: 23844 */
        } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      for (int j = 0; j < (nn); j++) { /* line 55 slow_hit_count: 761830, fast_hit_count: 44480 */
        if ((k >> j) % 2 == 1 && j < mm) good = false; /* line 56 slow_hit_count: 609464, fast_hit_count: 35584 */
      } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
      xx += i * yyy; /* line 58 slow_hit_count: 152366, fast_hit_count: 8896 */
      yy += yyy; /* line 59 slow_hit_count: 152366, fast_hit_count: 8896 */
      if (!good) { /* line 60 slow_hit_count: 152366, fast_hit_count: 8896 */
        xx_ += i * yyy; /* line 61 slow_hit_count: 97117, fast_hit_count: 4922 */
        yy_ += yyy; /* line 62 slow_hit_count: 97117, fast_hit_count: 4922 */
      } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
    x += xx - xx_; /* line 65 slow_hit_count: 16629, fast_hit_count: 4189 */
    y += yy - yy_; /* line 66 slow_hit_count: 16629, fast_hit_count: 4189 */
  } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
void process() { /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (n); i++) cin >> l[i] >> r[i]; /* line 71 slow_hit_count: 6, fast_hit_count: 6 */
  x = 0; /* line 72 slow_hit_count: 1, fast_hit_count: 1 */
  y = 0; /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (n); i++) { /* line 74 slow_hit_count: 6, fast_hit_count: 6 */
    ll.clear(); /* line 75 slow_hit_count: 5, fast_hit_count: 5 */
    rr.clear(); /* line 76 slow_hit_count: 5, fast_hit_count: 5 */
    aa = l[i]; /* line 77 slow_hit_count: 5, fast_hit_count: 5 */
    bb = r[i]; /* line 78 slow_hit_count: 5, fast_hit_count: 5 */
    for (int j = 0; j < (n); j++) { /* line 79 slow_hit_count: 30, fast_hit_count: 30 */
      if (j != i) { /* line 80 slow_hit_count: 25, fast_hit_count: 25 */
        ll.push_back(l[j]); /* line 81 slow_hit_count: 20, fast_hit_count: 20 */
        rr.push_back(r[j]); /* line 82 slow_hit_count: 20, fast_hit_count: 20 */
      } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
    calc(i); /* line 85 slow_hit_count: 5, fast_hit_count: 5 */
  } /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
  cout.precision(10); /* line 87 slow_hit_count: 1, fast_hit_count: 1 */
  cout << fixed << x / y << endl; /* line 88 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 89 slow_hit_count: 1, fast_hit_count: 1 */
void make() { /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
  freopen("in.txt", "wt", stdout); /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
  int N = 200000, M = 150000, Q = 300000; /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
  cout << N << endl; /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < N; i++) cout << 1000000 - i << " "; /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
  exit(0); /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 97 slow_hit_count: 1, fast_hit_count: 1 */
  process(); /* line 98 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 99 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 100 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issue in the provided C program, we will analyze the code and the hit counts to derive performance-characterizing invariants. Here's a detailed analysis based on the given data:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line 14 and Line 36**: These lines initiate loops over the range of potential bid values. The high hit counts (16,385 on slow input vs. 13,226 on fast input for Line 14 and 22,654 on slow vs. 12,866 on fast for Line 36) suggest these loops are critical paths that vary significantly between inputs.

2. **Lines 19 and 42**: These lines begin nested loops that iterate over subsets of competitors' bids. The hit counts (9,872 on slow vs. 54,976 on fast for Line 19 and 266,064 on slow vs. 67,024 on fast for Line 42) indicate these loops are more frequently executed in the slow input case.

3. **Lines 21-23 and 44-46**: These checks within nested loops determine whether conditions hold for certain bids. The substantial hit counts (especially in the slow input) suggest inefficiencies in evaluating conditions or processing subsets of potential bids.

4. **Lines 32-33 and 58-59**: Accumulation of terms for expected value calculations. The difference in hit counts (9,248 on slow vs. 39,701 on fast for Lines 32-33 and 152,366 on slow vs. 8,896 on fast for Lines 58-59) indicates that much more computation is done on slow inputs due to the conditions met in previous loops.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following performance-characterizing invariants:

1. **Bid Range and Nested Loops**:
   - *Invariant*: "When the range of possible bids for a company is large, especially when close to or spanning the maximum possible range, the number of iterations in nested loops increases, leading to significant slowdowns."
   - *Explanation*: Greater bid ranges increase the potential states and subsets that need to be evaluated, compounding loop iterations.

2. **Subset Evaluation Complexity**:
   - *Invariant*: "The performance degrades when the evaluation of subsets of competitors' bids involves complex conditions over large bid ranges or numerous subsets."
   - *Explanation*: Complex conditions or numerous subsets increase the computation time per bid evaluation, especially when the differences between competitor ranges are minimal.

3. **High Hit Count Conditions**:
   - *Invariant*: "If the bid evaluation involves high hit count conditions with multiple competitors having overlapping or wide bid ranges, performance is likely compromised."
   - *Explanation*: Overlapping bid ranges or wide ranges increase the logical complexity and number of paths taken in loops.

4. **Expensive Accumulation Operations**:
   - *Invariant*: "Frequent and repeated calculations for expected values, particularly when involving a high number of intermediate steps, result in performance bottlenecks."
   - *Explanation*: The accumulation of intermediate results for a large number of possible bid scenarios leads to excessive computational overhead.

By focusing on these invariants, potential slow paths in the algorithm can be identified and addressed, improving overall performance for problematic input scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Nowadays, most of the internet advertisements are not statically linked to a web page. Instead, what will be shown to the person opening a web page is determined within 100 milliseconds after the web page is opened. Usually, multiple companies compete for each ad slot on the web page in an auction. Each of them receives a request with details about the user, web page and ad slot and they have to respond within those 100 milliseconds with a bid they would pay for putting an advertisement on that ad slot. The company that suggests the highest bid wins the auction and gets to place its advertisement. If there are several companies tied for the highest bid, the winner gets picked at random.

However, the company that won the auction does not have to pay the exact amount of its bid. In most of the cases, a second-price auction is used. This means that the amount paid by the company is equal to the maximum of all the other bids placed for this ad slot.

Let's consider one such bidding. There are n companies competing for placing an ad. The i-th of these companies will bid an integer number of microdollars equiprobably randomly chosen from the range between Li and Ri, inclusive. In the other words, the value of the i-th company bid can be any integer from the range [Li, Ri] with the same probability. 

Determine the expected value that the winner will have to pay in a second-price auction.

Input

The first line of input contains an integer number n (2 ≤ n ≤ 5). n lines follow, the i-th of them containing two numbers Li and Ri (1 ≤ Li ≤ Ri ≤ 10000) describing the i-th company's bid preferences.

This problem doesn't have subproblems. You will get 8 points for the correct submission.

Output

Output the answer with absolute or relative error no more than 1e - 9.

Examples

Input

3
4 7
8 10
5 5


Output

5.7500000000


Input

3
2 5
3 4
1 6


Output

3.5000000000

Note

Consider the first example. The first company bids a random integer number of microdollars in range [4, 7]; the second company bids between 8 and 10, and the third company bids 5 microdollars. The second company will win regardless of the exact value it bids, however the price it will pay depends on the value of first company's bid. With probability 0.5 the first company will bid at most 5 microdollars, and the second-highest price of the whole auction will be 5. With probability 0.25 it will bid 6 microdollars, and with probability 0.25 it will bid 7 microdollars. Thus, the expected value the second company will have to pay is 0.5·5 + 0.25·6 + 0.25·7 = 5.75.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Let's implement the performance-characterizing invariants derived in the previous phase. We will create checker functions that encapsulate the conditions which trigger performance bottlenecks.

1. **Bid Range and Nested Loops:**
   - *Invariant*: "When the range of possible bids for a company is large, especially when close to or spanning the maximum possible range, the number of iterations in nested loops increases, leading to significant slowdowns."

   ```cpp
   void check_bid_range_invariant(int aa, int bb) {
       if (bb - aa > 8000) { // Considerably large range
           cerr << "Warning: Large bid range affecting performance!" << endl;
           abort();
       }
   }
   ```

2. **Subset Evaluation Complexity:**
   - *Invariant*: "The performance degrades when the evaluation of subsets of competitors' bids involves complex conditions over large bid ranges or numerous subsets."

   ```cpp
   void check_subset_invariant(int nn) {
       if ((1 << nn) > 16) { // If the number of subsets is excessively large
           cerr << "Warning: Too many subsets being evaluated!" << endl;
           abort();
       }
   }
   ```

3. **Expensive Accumulation Operations:**
   - *Invariant*: "Frequent and repeated calculations for expected values, particularly when involving a high number of intermediate steps, result in performance bottlenecks."

   ```cpp
   void check_accumulation_invariant(long double xx, long double yy) {
       if (yy > 1000000) { // Arbitrary threshold for excessive accumulation operations
           cerr << "Warning: Excessive accumulation operations detected!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checker Functions into the Original Program

We will integrate the checker functions into the program, placing them at strategic points to catch performance bottlenecks without introducing significant overhead.

```cpp
#include <bits/stdc++.h>
#pragma comment(linker, "/STACK:134217728")
using namespace std;

int n, l[6], r[6];
vector<int> ll, rr;
int aa, bb;
long double x, y;

// Checker function implementations
void check_bid_range_invariant(int aa, int bb) {
    if (bb - aa > 8000) { // Considerably large range
        cerr << "Warning: Large bid range affecting performance!" << endl;
        abort();
    }
}

void check_subset_invariant(int nn) {
    if ((1 << nn) > 16) { // If the number of subsets is excessively large
        cerr << "Warning: Too many subsets being evaluated!" << endl;
        abort();
    }
}

void check_accumulation_invariant(long double xx, long double yy) {
    if (yy > 1000000) { // Arbitrary threshold for excessive accumulation operations
        cerr << "Warning: Excessive accumulation operations detected!" << endl;
        abort();
    }
}

void calc(int mm) {
    int nn = n - 1;
    check_subset_invariant(nn);  // Check for subset complexity

    for (int i = 0; i < (nn); i++) {
        if (ll[i] > bb) return;
    }

    long double xx = 0, yy = 0;
    for (int i = int(1); i <= int(aa - 1); i++) {
        bool good = true;
        for (int j = 0; j < (nn); j++)
            if (ll[j] > i) good = false;
        if (!good) continue;
        for (int k = int(1); k <= int((1 << nn) - 1); k++) {
            good = true;
            for (int j = 0; j < (nn); j++) {
                if ((k >> j) % 2 == 1 && i > rr[j]) good = false;
                if ((k >> j) % 2 == 0 && i <= ll[j]) good = false;
            }
            if (!good) continue;
            long long yyy = 1;
            for (int j = 0; j < (nn); j++) {
                if ((k >> j) % 2 == 0) {
                    yyy *= min(i - 1, rr[j]) - ll[j] + 1;
                }
            }
            xx += i * yyy;
            yy += yyy;
        }
    }
    for (int i = int(aa); i <= int(bb); i++) {
        long long xx_ = 0, yy_ = 0;
        bool good = true;
        for (int j = 0; j < (nn); j++)
            if (ll[j] > i) good = false;
        if (!good) continue;
        for (int k = int(1); k <= int((1 << nn) - 1); k++) {
            good = true;
            for (int j = 0; j < (nn); j++) {
                if ((k >> j) % 2 == 1 && i > rr[j]) good = false;
                if ((k >> j) % 2 == 0 && i <= ll[j]) good = false;
            }
            if (!good) continue;
            long long yyy = 1;
            for (int j = 0; j < (nn); j++) {
                if ((k >> j) % 2 == 0) {
                    yyy *= min(i - 1, rr[j]) - ll[j] + 1;
                }
            }
            for (int j = 0; j < (nn); j++) {
                if ((k >> j) % 2 == 1 && j < mm) good = false;
            }
            xx += i * yyy;
            yy += yyy;
            if (!good) {
                xx_ += i * yyy;
                yy_ += yyy;
            }
        }
        x += xx - xx_;
        y += yy - yy_;
    }
    check_accumulation_invariant(xx, yy);  // Check for excessive accumulation
}

void process() {
    cin >> n;
    for (int i = 0; i < (n); i++) cin >> l[i] >> r[i];
    x = 0;
    y = 0;
    for (int i = 0; i < (n); i++) {
        ll.clear();
        rr.clear();
        aa = l[i];
        bb = r[i];
        check_bid_range_invariant(aa, bb);  // Check for large bid ranges
        for (int j = 0; j < (n); j++) {
            if (j != i) {
                ll.push_back(l[j]);
                rr.push_back(r[j]);
            }
        }
        calc(i);
    }
    cout.precision(10);
    cout << fixed << x / y << endl;
}

int main() {
    process();
    return 0;
}
```

### Explanation of Integration:

- **Bid Range Check**: Before processing calculations for each company, we check if the bid range is excessively large, which could lead to performance issues.
  
- **Subset Complexity Check**: At the start of the `calc` function, we ensure the number of subsets isn't excessively large, which would increase computational complexity.

- **Accumulation Check**: After processing possible bids and accumulating results, we check if the accumulation operations have become excessive, indicating potential bottlenecks.

These checks help identify and mitigate potential performance issues by terminating the program when bottlenecks are detected, thus aiding in debugging and optimization efforts.

