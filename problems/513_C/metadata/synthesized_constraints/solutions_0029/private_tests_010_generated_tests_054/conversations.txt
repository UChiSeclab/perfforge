system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Nowadays, most of the internet advertisements are not statically linked to a web page. Instead, what will be shown to the person opening a web page is determined within 100 milliseconds after the web page is opened. Usually, multiple companies compete for each ad slot on the web page in an auction. Each of them receives a request with details about the user, web page and ad slot and they have to respond within those 100 milliseconds with a bid they would pay for putting an advertisement on that ad slot. The company that suggests the highest bid wins the auction and gets to place its advertisement. If there are several companies tied for the highest bid, the winner gets picked at random.

However, the company that won the auction does not have to pay the exact amount of its bid. In most of the cases, a second-price auction is used. This means that the amount paid by the company is equal to the maximum of all the other bids placed for this ad slot.

Let's consider one such bidding. There are n companies competing for placing an ad. The i-th of these companies will bid an integer number of microdollars equiprobably randomly chosen from the range between Li and Ri, inclusive. In the other words, the value of the i-th company bid can be any integer from the range [Li, Ri] with the same probability. 

Determine the expected value that the winner will have to pay in a second-price auction.

Input

The first line of input contains an integer number n (2 ≤ n ≤ 5). n lines follow, the i-th of them containing two numbers Li and Ri (1 ≤ Li ≤ Ri ≤ 10000) describing the i-th company's bid preferences.

This problem doesn't have subproblems. You will get 8 points for the correct submission.

Output

Output the answer with absolute or relative error no more than 1e - 9.

Examples

Input

3
4 7
8 10
5 5


Output

5.7500000000


Input

3
2 5
3 4
1 6


Output

3.5000000000

Note

Consider the first example. The first company bids a random integer number of microdollars in range [4, 7]; the second company bids between 8 and 10, and the third company bids 5 microdollars. The second company will win regardless of the exact value it bids, however the price it will pay depends on the value of first company's bid. With probability 0.5 the first company will bid at most 5 microdollars, and the second-highest price of the whole auction will be 5. With probability 0.25 it will bid 6 microdollars, and with probability 0.25 it will bid 7 microdollars. Thus, the expected value the second company will have to pay is 0.5·5 + 0.25·6 + 0.25·7 = 5.75.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int v[8], n, L[8], R[8], aux[8];
double soma;
void vai(int num, int u, double chance) {
  if (u == n) {
    for (int i = 0; i < n; i++) {
      if (v[i] == 0)
        aux[i] = num - 16;
      else if (v[i] == 1)
        aux[i] = num + 16;
      else
        aux[i] = num;
    }
    sort(aux, aux + n);
    if (aux[n - 2] == num) soma += chance;
    return;
  }
  if (L[u] < num) {
    v[u] = 0;
    vai(num, u + 1,
        chance * ((double)(min(R[u] - L[u] + 1, num - L[u])) /
                  (double)(R[u] - L[u] + 1)));
  }
  if (num < R[u]) {
    v[u] = 1;
    vai(num, u + 1,
        chance * ((double)(min(R[u] - L[u] + 1, R[u] - num)) /
                  (double)(R[u] - L[u] + 1)));
  }
  if (L[u] <= num and num <= R[u]) {
    v[u] = 2;
    vai(num, u + 1, chance * 1.0 / ((double)(R[u] - L[u] + 1)));
  }
}
int main() {
  scanf("%d", &n);
  for (int i = 0; i < n; i++) scanf("%d %d", L + i, R + i);
  double total = 0.0;
  for (int i = 1; i <= 10003; i++) {
    soma = 0.0;
    vai(i, 0, 1.0);
    total += soma * i;
  }
  printf("%.12lf\n", total);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5
2194 6947
2062 8247
4481 8430
3864 9409
3784 5996


(G.2) Fast Input

5
2194 6947
2062 8247
7300 8430
3864 9409
3784 5996


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int v[8], n, L[8], R[8], aux[8]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
double soma; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
void vai(int num, int u, double chance) { /* line 5 slow_hit_count: 1012378, fast_hit_count: 523216 */
  if (u == n) { /* line 6 slow_hit_count: 1012378, fast_hit_count: 523216 */
    for (int i = 0; i < n; i++) { /* line 7 slow_hit_count: 3326154, fast_hit_count: 1507326 */
      if (v[i] == 0) /* line 8 slow_hit_count: 2771795, fast_hit_count: 1256105 */
        aux[i] = num - 16; /* line 9 slow_hit_count: 998760, fast_hit_count: 400335 */
      else if (v[i] == 1) /* line 10 slow_hit_count: 1773035, fast_hit_count: 855770 */
        aux[i] = num + 16; /* line 11 slow_hit_count: 940986, fast_hit_count: 558192 */
      else /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
        aux[i] = num; /* line 13 slow_hit_count: 832049, fast_hit_count: 297578 */
    } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    sort(aux, aux + n); /* line 15 slow_hit_count: 554359, fast_hit_count: 251221 */
    if (aux[n - 2] == num) soma += chance; /* line 16 slow_hit_count: 554359, fast_hit_count: 251221 */
    return; /* line 17 slow_hit_count: 554359, fast_hit_count: 251221 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  if (L[u] < num) { /* line 19 slow_hit_count: 458019, fast_hit_count: 271995 */
    v[u] = 0; /* line 20 slow_hit_count: 396454, fast_hit_count: 187180 */
    vai(num, u + 1, /* line 21 slow_hit_count: 396454, fast_hit_count: 187180 */
        chance * ((double)(min(R[u] - L[u] + 1, num - L[u])) / /* line 22 slow_hit_count: 792908, fast_hit_count: 374360 */
                  (double)(R[u] - L[u] + 1))); /* line 23 slow_hit_count: 396454, fast_hit_count: 187180 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  if (num < R[u]) { /* line 25 slow_hit_count: 458019, fast_hit_count: 271995 */
    v[u] = 1; /* line 26 slow_hit_count: 333686, fast_hit_count: 205397 */
    vai(num, u + 1, /* line 27 slow_hit_count: 333686, fast_hit_count: 205397 */
        chance * ((double)(min(R[u] - L[u] + 1, R[u] - num)) / /* line 28 slow_hit_count: 667372, fast_hit_count: 410794 */
                  (double)(R[u] - L[u] + 1))); /* line 29 slow_hit_count: 333686, fast_hit_count: 205397 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  if (L[u] <= num and num <= R[u]) { /* line 31 slow_hit_count: 458019, fast_hit_count: 271995 */
    v[u] = 2; /* line 32 slow_hit_count: 272235, fast_hit_count: 120636 */
    vai(num, u + 1, chance * 1.0 / ((double)(R[u] - L[u] + 1))); /* line 33 slow_hit_count: 272235, fast_hit_count: 120636 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d", &n); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) scanf("%d %d", L + i, R + i); /* line 38 slow_hit_count: 6, fast_hit_count: 6 */
  double total = 0.0; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= 10003; i++) { /* line 40 slow_hit_count: 10004, fast_hit_count: 10004 */
    soma = 0.0; /* line 41 slow_hit_count: 10003, fast_hit_count: 10003 */
    vai(i, 0, 1.0); /* line 42 slow_hit_count: 10003, fast_hit_count: 10003 */
    total += soma * i; /* line 43 slow_hit_count: 10003, fast_hit_count: 10003 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%.12lf\n", total); /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the problem of diagnosing the performance bottleneck in the provided C program, we will follow the outlined tasks and create performance-characterizing invariants based on the analysis of the code and execution patterns. Here's how we'll proceed:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts**:
   - The function `vai(int num, int u, double chance)` shows significantly higher hit counts during the slow input execution compared to the fast input.
   - Specifically, the recursive calls within this function (lines 21, 27, 33) are hit far more often when processing the slow input.

2. **Pinpointing Lines**:
   - A main factor contributing to the high execution count is the recursion depth and frequency within the `vai` function. The lines responsible for recursive calls exhibit markedly different hit counts: e.g., line 21 has 396454 hits in the slow input against 187180 in the fast input.
   - Additionally, the sorting operation (line 15) within the base case of recursion is also executed more frequently in the slow input, suggesting repeated sorting operations.

3. **Inference**:
   - The recursive function `vai` is called multiple times with varying values of `num`, which is iterated over a large range (up to 10003). This, coupled with recursion over each combination of bids for each company, results in a combinatorial explosion in the number of recursive calls, especially when bid ranges (i.e., `R[u] - L[u]`) are large.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations, we can derive the following performance-characterizing invariants:

1. **Large Bid Ranges**:
   - **Natural Language Statement**: "If the bid ranges `[Li, Ri]` for each company are wide, the recursive depth and number of recursive calls increase exponentially, potentially causing slow execution."
   - **Explanation**: Large bid ranges imply a larger number of potential bid combinations to evaluate. This leads to a higher branching factor in recursion, significantly increasing the number of function calls and computational overhead.

2. **High Recursion with Sorting**:
   - **Natural Language Statement**: "If the program frequently sorts bid combinations in a deeply nested recursive call, performance may degrade significantly, especially when the recursion involves large bid ranges."
   - **Explanation**: Sorting within a recursive context where the function is called frequently exacerbates performance issues, as sorting operations are computationally expensive when repeated many times.

3. **Bid Range Interactions**:
   - **Natural Language Statement**: "When multiple companies have overlapping or adjacent bid ranges, the number of combinations to evaluate grows, leading to increased computation time in recursive calls."
   - **Explanation**: Overlapping bid ranges result in a combinatorial increase in the number of possible outcomes to consider, thus increasing the execution time of the recursive function.

### Conclusion

The main factors contributing to the slowdown are large bid ranges and frequent sorting within recursive calls. By characterizing these conditions, we can better understand and predict slow execution paths, enabling targeted optimizations or restructuring of the algorithm. These invariants provide guidelines for identifying performance bottlenecks in similar scenarios or future modifications of the code.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Nowadays, most of the internet advertisements are not statically linked to a web page. Instead, what will be shown to the person opening a web page is determined within 100 milliseconds after the web page is opened. Usually, multiple companies compete for each ad slot on the web page in an auction. Each of them receives a request with details about the user, web page and ad slot and they have to respond within those 100 milliseconds with a bid they would pay for putting an advertisement on that ad slot. The company that suggests the highest bid wins the auction and gets to place its advertisement. If there are several companies tied for the highest bid, the winner gets picked at random.

However, the company that won the auction does not have to pay the exact amount of its bid. In most of the cases, a second-price auction is used. This means that the amount paid by the company is equal to the maximum of all the other bids placed for this ad slot.

Let's consider one such bidding. There are n companies competing for placing an ad. The i-th of these companies will bid an integer number of microdollars equiprobably randomly chosen from the range between Li and Ri, inclusive. In the other words, the value of the i-th company bid can be any integer from the range [Li, Ri] with the same probability. 

Determine the expected value that the winner will have to pay in a second-price auction.

Input

The first line of input contains an integer number n (2 ≤ n ≤ 5). n lines follow, the i-th of them containing two numbers Li and Ri (1 ≤ Li ≤ Ri ≤ 10000) describing the i-th company's bid preferences.

This problem doesn't have subproblems. You will get 8 points for the correct submission.

Output

Output the answer with absolute or relative error no more than 1e - 9.

Examples

Input

3
4 7
8 10
5 5


Output

5.7500000000


Input

3
2 5
3 4
1 6


Output

3.5000000000

Note

Consider the first example. The first company bids a random integer number of microdollars in range [4, 7]; the second company bids between 8 and 10, and the third company bids 5 microdollars. The second company will win regardless of the exact value it bids, however the price it will pay depends on the value of first company's bid. With probability 0.5 the first company will bid at most 5 microdollars, and the second-highest price of the whole auction will be 5. With probability 0.25 it will bid 6 microdollars, and with probability 0.25 it will bid 7 microdollars. Thus, the expected value the second company will have to pay is 0.5·5 + 0.25·6 + 0.25·7 = 5.75.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Natural Language Invariants in C++

Based on the performance-characterizing invariants inferred previously, we will now translate them into runtime checks in C++.

#### Check 1: Large Bid Ranges
```cpp
void check_large_bid_ranges(int *L, int *R, int n) {
    for (int i = 0; i < n; i++) {
        if (R[i] - L[i] > 8000) { // threshold chosen to indicate "wide" range
            cerr << "Warning: Performance bottleneck condition triggered - large bid range!" << endl;
            abort();
        }
    }
}
```

#### Check 2: High Recursion with Sorting
```cpp
void check_recursion_with_sorting(int currentRecursionLevel, int threshold) {
    if (currentRecursionLevel > threshold) { // threshold for recursion depth
        cerr << "Warning: Performance bottleneck condition triggered - deep recursion with sorting!" << endl;
        abort();
    }
}
```

#### Check 3: Bid Range Interactions
```cpp
void check_bid_range_overlap(int *L, int *R, int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (!(R[i] < L[j] || R[j] < L[i])) { // checks for overlap
                cerr << "Warning: Performance bottleneck condition triggered - overlapping bid ranges!" << endl;
                abort();
            }
        }
    }
}
```

### Phase 4: Integrating Checkers into the Original Program

Here, we integrate the above checks into the original C++ program at strategic points to ensure they do not add unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

int v[8], n, L[8], R[8], aux[8];
double soma;

void check_large_bid_ranges(int *L, int *R, int n) {
    for (int i = 0; i < n; i++) {
        if (R[i] - L[i] > 8000) { // threshold chosen to indicate "wide" range
            cerr << "Warning: Performance bottleneck condition triggered - large bid range!" << endl;
            abort();
        }
    }
}

void check_recursion_with_sorting(int currentRecursionLevel, int threshold) {
    if (currentRecursionLevel > threshold) { // threshold for recursion depth
        cerr << "Warning: Performance bottleneck condition triggered - deep recursion with sorting!" << endl;
        abort();
    }
}

void check_bid_range_overlap(int *L, int *R, int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (!(R[i] < L[j] || R[j] < L[i])) { // checks for overlap
                cerr << "Warning: Performance bottleneck condition triggered - overlapping bid ranges!" << endl;
                abort();
            }
        }
    }
}

void vai(int num, int u, double chance, int depth) {
    check_recursion_with_sorting(depth, 10); // check recursion depth

    if (u == n) {
        for (int i = 0; i < n; i++) {
            if (v[i] == 0)
                aux[i] = num - 16;
            else if (v[i] == 1)
                aux[i] = num + 16;
            else
                aux[i] = num;
        }
        sort(aux, aux + n);
        if (aux[n - 2] == num) soma += chance;
        return;
    }
    if (L[u] < num) {
        v[u] = 0;
        vai(num, u + 1,
            chance * ((double)(min(R[u] - L[u] + 1, num - L[u])) /
                      (double)(R[u] - L[u] + 1)), depth + 1);
    }
    if (num < R[u]) {
        v[u] = 1;
        vai(num, u + 1,
            chance * ((double)(min(R[u] - L[u] + 1, R[u] - num)) /
                      (double)(R[u] - L[u] + 1)), depth + 1);
    }
    if (L[u] <= num && num <= R[u]) {
        v[u] = 2;
        vai(num, u + 1, chance * 1.0 / ((double)(R[u] - L[u] + 1)), depth + 1);
    }
}

int main() {
    scanf("%d", &n);
    for (int i = 0; i < n; i++) scanf("%d %d", L + i, R + i);

    // Insert performance checkers
    check_large_bid_ranges(L, R, n);
    check_bid_range_overlap(L, R, n);

    double total = 0.0;
    for (int i = 1; i <= 10003; i++) {
        soma = 0.0;
        vai(i, 0, 1.0, 0); // start recursion with depth 0
        total += soma * i;
    }
    printf("%.12lf\n", total);
    return 0;
}
```

**Explanation of Integration:**

1. **Check for Large Bid Ranges**: This check is done after reading input, ensuring bid ranges are not excessively large.
2. **Check for Overlapping Bid Ranges**: Placed after input to detect if any two companies have overlapping bid ranges.
3. **Recursion Depth Check**: Integrated within the `vai` function to monitor the recursion depth dynamically. This helps catch deep recursion that could lead to performance degradation.

These checks are designed to help a fuzzer identify scenarios that lead to performance bottlenecks.

