system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's call an integer array a_1, a_2, ..., a_n good if a_i ≠ i for each i.

Let F(a) be the number of pairs (i, j) (1 ≤ i < j ≤ n) such that a_i + a_j = i + j.

Let's say that an array a_1, a_2, ..., a_n is excellent if: 

  * a is good; 
  * l ≤ a_i ≤ r for each i; 
  * F(a) is the maximum possible among all good arrays of size n. 



Given n, l and r, calculate the number of excellent arrays modulo 10^9 + 7.

Input

The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. 

The first and only line of each test case contains three integers n, l, and r (2 ≤ n ≤ 2 ⋅ 10^5; -10^9 ≤ l ≤ 1; n ≤ r ≤ 10^9).

It's guaranteed that the sum of n doesn't exceed 2 ⋅ 10^5.

Output

For each test case, print the number of excellent arrays modulo 10^9 + 7.

Example

Input


4
3 0 3
4 -3 5
42 -33 55
69 -42 146


Output


4
10
143922563
698570404

Note

In the first test case, it can be proven that the maximum F(a) among all good arrays a is equal to 2. The excellent arrays are: 

  1. [2, 1, 2]; 
  2. [0, 3, 2]; 
  3. [2, 3, 2]; 
  4. [3, 0, 1]. 

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;

#define watch(x) cerr << (#x) << ": " << (x) << endl

typedef long long LL;

template<unsigned _MOD_> struct modint {
    
    static const int MOD = _MOD_;
    int v;
 
    modint(int _v = 0) {
        v = _v % MOD;
        if(v < 0) v += MOD;
    }

    explicit operator int() const { return v; }
    
    static int mod_inv(int a) {
        int g = MOD, r = a, x = 0, y = 1;
 
        while (r != 0) {
            int q = g / r;
            g %= r; swap(g, r);
            x -= q * y; swap(x, y);
        }
 
        return x < 0 ? x + MOD : x;
    }
 
    modint& operator+=(const modint &other) { v += other.v; if (v >= MOD) v -= MOD; return *this; }
    modint& operator-=(const modint &other) { v -= other.v; if (v < 0) v += MOD; return *this; }
    modint& operator*=(const modint &other) { v = (int)(((uint64_t) v*other.v)%MOD); return *this; }
    modint& operator/=(const modint &other) { return *this *= other.inv(); }
    friend modint operator+(const modint &a, const modint &b) { return modint(a) += b; }
    friend modint operator-(const modint &a, const modint &b) { return modint(a) -= b; }
    friend modint operator*(const modint &a, const modint &b) { return modint(a) *= b; }
    friend modint operator/(const modint &a, const modint &b) { return modint(a) /= b; }
    modint& operator++() { v = v == MOD - 1 ? 0 : v + 1; return *this; } 
    modint& operator--() { v = v == 0 ? MOD - 1 : v - 1; return *this; }
    modint operator++(int32_t) { modint before = *this; ++*this; return before; }
    modint operator--(int32_t) { modint before = *this; --*this; return before; }
    modint operator-() const { return v == 0 ? 0 : MOD - v; }
    bool operator==(const modint &other) const { return v == other.v; }
    bool operator!=(const modint &other) const { return v != other.v; }
    modint inv() const { return mod_inv(v); }
 
    modint pow(int p) const {
        modint a = *this, result = 1;
 
        while (p > 0) {
            if (p & 1)
                result *= a;
 
            a *= a;
            p >>= 1;
        }
 
        return result;
    }
 
    friend ostream& operator<<(ostream &out, const modint &m) { return out << m.v; }
};
const int MOD = 1000000007;
using mint = modint<MOD>;

void solve() {
    int n, l, r; cin >> n >> l >> r;

    vector<mint> f;
    f.emplace_back(mint(1));
    int sz = 1;
    auto fac = [&](int i) -> mint {
        while(i >= sz) {
            mint nxt = f[sz-1]*sz;
            f.emplace_back(nxt);
            sz++;
        }
        return f[i];
    };
    auto choose = [&](int n, int k) -> mint {
        if(n < k || k < 0) return 0;
        return fac(n)/fac(k)/fac(n-k);
    };

    int hf = n/2;
    
    mint ans = 0;

    int both_all = min(1-l, r-n);
    ans += choose(n, hf)*both_all;
    if(n & 1) {
        ans += choose(n, hf+1)*both_all;
    }

    for(int k = both_all+1; ; ++k) {
        int tp = max(0, k-(1-l));
        int bt = max(0, k-(r-n));

        if(tp+bt > n) {
            break;
        }

        ans += choose(n-tp-bt, hf-tp);
        if(n & 1) {
            ans += choose(n-tp-bt, hf+1-tp);
        }
    }
    
    cout << ans << '\n';
}

int main() {

    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int t; cin >> t;
    while(t--) {
        solve();
    }
    
    return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
34651 -93862270 597469643
20000 -13928452 414987414
20000 -472808872 367983694
20000 -84913058 517394906
20000 -949029500 8329318
20000 -720971736 526102810
20000 -416160739 748291750
20000 -665939649 743938438
20000 -80741314 634025883
20000 -824743396 43172618


(G.2) Fast Input

10
20000 -431912570 597469643
20000 -13928452 414987414
20000 -472808872 367983694
20000 -84913058 517394906
20000 -949029500 8329318
20000 -720971736 526102810
20000 -416160739 748291750
20000 -665939649 743938438
1242 -80741314 634025883
20000 -824743396 138091345


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
#define watch(x) cerr << (#x) << ": " << (x) << endl /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
typedef long long LL; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
template<unsigned _MOD_> struct modint { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
     /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    static const int MOD = _MOD_; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    int v; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    modint(int _v = 0) { /* line 13 slow_hit_count: 588657, fast_hit_count: 453155 */
        v = _v % MOD; /* line 14 slow_hit_count: 588657, fast_hit_count: 453155 */
        if(v < 0) v += MOD; /* line 15 slow_hit_count: 588657, fast_hit_count: 453155 */
    } /* line 16 slow_hit_count: 588657, fast_hit_count: 453155 */
 /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    explicit operator int() const { return v; } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
     /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    static int mod_inv(int a) { /* line 20 slow_hit_count: 249324, fast_hit_count: 181262 */
        int g = MOD, r = a, x = 0, y = 1; /* line 21 slow_hit_count: 249324, fast_hit_count: 181262 */
  /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
        while (r != 0) { /* line 23 slow_hit_count: 4952198, fast_hit_count: 3439771 */
            int q = g / r; /* line 24 slow_hit_count: 4702874, fast_hit_count: 3258509 */
            g %= r; swap(g, r); /* line 25 slow_hit_count: 4702874, fast_hit_count: 3258509 */
            x -= q * y; swap(x, y); /* line 26 slow_hit_count: 4702874, fast_hit_count: 3258509 */
        } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
        return x < 0 ? x + MOD : x; /* line 29 slow_hit_count: 249324, fast_hit_count: 181262 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    modint& operator+=(const modint &other) { v += other.v; if (v >= MOD) v -= MOD; return *this; } /* line 32 slow_hit_count: 249313, fast_hit_count: 181252 */
    modint& operator-=(const modint &other) { v -= other.v; if (v < 0) v += MOD; return *this; } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    modint& operator*=(const modint &other) { v = (int)(((uint64_t) v*other.v)%MOD); return *this; } /* line 34 slow_hit_count: 463986, fast_hit_count: 362514 */
    modint& operator/=(const modint &other) { return *this *= other.inv(); } /* line 35 slow_hit_count: 249324, fast_hit_count: 181262 */
    friend modint operator+(const modint &a, const modint &b) { return modint(a) += b; } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    friend modint operator-(const modint &a, const modint &b) { return modint(a) -= b; } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    friend modint operator*(const modint &a, const modint &b) { return modint(a) *= b; } /* line 38 slow_hit_count: 214662, fast_hit_count: 181252 */
    friend modint operator/(const modint &a, const modint &b) { return modint(a) /= b; } /* line 39 slow_hit_count: 249324, fast_hit_count: 181262 */
    modint& operator++() { v = v == MOD - 1 ? 0 : v + 1; return *this; }  /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    modint& operator--() { v = v == 0 ? MOD - 1 : v - 1; return *this; } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    modint operator++(int32_t) { modint before = *this; ++*this; return before; } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    modint operator--(int32_t) { modint before = *this; --*this; return before; } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    modint operator-() const { return v == 0 ? 0 : MOD - v; } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
    bool operator==(const modint &other) const { return v == other.v; } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    bool operator!=(const modint &other) const { return v != other.v; } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    modint inv() const { return mod_inv(v); } /* line 47 slow_hit_count: 249324, fast_hit_count: 181262 */
  /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    modint pow(int p) const { /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
        modint a = *this, result = 1; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
        while (p > 0) { /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
            if (p & 1) /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
                result *= a; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
  /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
            a *= a; /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
            p >>= 1; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
        return result; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
    friend ostream& operator<<(ostream &out, const modint &m) { return out << m.v; } /* line 63 slow_hit_count: 10, fast_hit_count: 10 */
}; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 1000000007; /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
using mint = modint<MOD>; /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 68 slow_hit_count: 10, fast_hit_count: 10 */
    int n, l, r; cin >> n >> l >> r; /* line 69 slow_hit_count: 10, fast_hit_count: 10 */
 /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    vector<mint> f; /* line 71 slow_hit_count: 20, fast_hit_count: 20 */
    f.emplace_back(mint(1)); /* line 72 slow_hit_count: 10, fast_hit_count: 10 */
    int sz = 1; /* line 73 slow_hit_count: 10, fast_hit_count: 10 */
    auto fac = [&](int i) -> mint { /* line 74 slow_hit_count: 588637, fast_hit_count: 453135 */
        while(i >= sz) { /* line 75 slow_hit_count: 588637, fast_hit_count: 453135 */
            mint nxt = f[sz-1]*sz; /* line 76 slow_hit_count: 214651, fast_hit_count: 181242 */
            f.emplace_back(nxt); /* line 77 slow_hit_count: 214651, fast_hit_count: 181242 */
            sz++; /* line 78 slow_hit_count: 214651, fast_hit_count: 181242 */
        } /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
        return f[i]; /* line 80 slow_hit_count: 373986, fast_hit_count: 271893 */
    }; /* line 81 slow_hit_count: 10, fast_hit_count: 10 */
    auto choose = [&](int n, int k) -> mint { /* line 82 slow_hit_count: 249313, fast_hit_count: 181252 */
        if(n < k || k < 0) return 0; /* line 83 slow_hit_count: 249313, fast_hit_count: 181252 */
        return fac(n)/fac(k)/fac(n-k); /* line 84 slow_hit_count: 249324, fast_hit_count: 181262 */
    }; /* line 85 slow_hit_count: 10, fast_hit_count: 10 */
 /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
    int hf = n/2; /* line 87 slow_hit_count: 10, fast_hit_count: 10 */
     /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
    mint ans = 0; /* line 89 slow_hit_count: 10, fast_hit_count: 10 */
 /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
    int both_all = min(1-l, r-n); /* line 91 slow_hit_count: 10, fast_hit_count: 10 */
    ans += choose(n, hf)*both_all; /* line 92 slow_hit_count: 10, fast_hit_count: 10 */
    if(n & 1) { /* line 93 slow_hit_count: 10, fast_hit_count: 10 */
        ans += choose(n, hf+1)*both_all; /* line 94 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
    for(int k = both_all+1; ; ++k) { /* line 97 slow_hit_count: 10, fast_hit_count: 10 */
        int tp = max(0, k-(1-l)); /* line 98 slow_hit_count: 214661, fast_hit_count: 181252 */
        int bt = max(0, k-(r-n)); /* line 99 slow_hit_count: 214661, fast_hit_count: 181252 */
 /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
        if(tp+bt > n) { /* line 101 slow_hit_count: 214661, fast_hit_count: 181252 */
            break; /* line 102 slow_hit_count: 10, fast_hit_count: 10 */
        } /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 104 slow_hit_count: 0, fast_hit_count: 0 */
        ans += choose(n-tp-bt, hf-tp); /* line 105 slow_hit_count: 214651, fast_hit_count: 181242 */
        if(n & 1) { /* line 106 slow_hit_count: 214651, fast_hit_count: 181242 */
            ans += choose(n-tp-bt, hf+1-tp); /* line 107 slow_hit_count: 34651, fast_hit_count: 0 */
        } /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 109 slow_hit_count: 214651, fast_hit_count: 181242 */
     /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans << '\n'; /* line 111 slow_hit_count: 10, fast_hit_count: 10 */
} /* line 112 slow_hit_count: 10, fast_hit_count: 10 */
 /* line 113 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 114 slow_hit_count: 1, fast_hit_count: 1 */
 /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
    ios_base::sync_with_stdio(false); /* line 116 slow_hit_count: 1, fast_hit_count: 1 */
    cin.tie(NULL); /* line 117 slow_hit_count: 1, fast_hit_count: 1 */
 /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
    int t; cin >> t; /* line 119 slow_hit_count: 1, fast_hit_count: 1 */
    while(t--) { /* line 120 slow_hit_count: 11, fast_hit_count: 11 */
        solve(); /* line 121 slow_hit_count: 10, fast_hit_count: 10 */
    } /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
     /* line 123 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 124 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 125 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

By analyzing the line-level hit counts provided for both the fast and slow inputs, we can identify which parts of the code are contributing to the slowdown:

1. **High Hit Count in `mod_inv` Function:**
   - Lines 23-26 show significantly higher hit counts in the slow input compared to the fast input. This indicates that the modular inversion is called repeatedly during the slow input processing. 
   - This suggests that the calculation involves frequent operations with modular arithmetic, likely triggered by the `choose` function calls.

2. **Factorial Calculation in `fac` Lambda:**
   - Lines 75-78 within the `fac` lambda function have high hit counts. This indicates repeated calculation or caching of factorials, which might be a bottleneck, especially if it’s being calculated for large numbers.

3. **Combination Calculation in `choose` Lambda:**
   - Lines 82-84 see significant use in both input types but more so in the slow input. This suggests that combinatorial calculations are central to the algorithm's complexity and are executed more often for specific inputs.

4. **Loop in the `solve` Function:**
   - The loop starting at line 97 is a critical point of slowdown. The calculations inside the loop, particularly lines 105-107, are performed more frequently in the slow input, suggesting an inefficient handling of the iteration conditions.

## Phase 2: Derive Performance-Characterizing Invariants

Based on the observed hit patterns, the following natural language invariants explain the conditions triggering the slowdown:

1. **Invariant 1: High Combinatorial Calculation Overhead**
   - "The program may slow significantly when the range between `l` and `r` results in many possible combinations to be calculated, especially if both `l` and `r` allow a wide range of values for `a_i` that maximize `F(a)`."

2. **Invariant 2: Repeated Modular Inversions**
   - "A slowdown occurs if there are frequent modular inversions needed, which is likely when many calls to the combinatorial functions are required due to large values of `n` or challenging constraints from `l` and `r`."

3. **Invariant 3: Nested Loop Overhead**
   - "Performance degradation is observed when the loop over potential values of `k` (in the `solve` function) has to cover a wide range, which happens if the constraints on `l` and `r` allow for a large number of potential configurations of the array."

These invariants abstractly describe the algorithmic bottlenecks without tying them to specific input values, instead focusing on structural properties and input relationships that lead to increased computational demand. They provide insight into how input characteristics influence execution time, guiding future optimizations or detection of similar slow scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's call an integer array a_1, a_2, ..., a_n good if a_i ≠ i for each i.

Let F(a) be the number of pairs (i, j) (1 ≤ i < j ≤ n) such that a_i + a_j = i + j.

Let's say that an array a_1, a_2, ..., a_n is excellent if: 

  * a is good; 
  * l ≤ a_i ≤ r for each i; 
  * F(a) is the maximum possible among all good arrays of size n. 



Given n, l and r, calculate the number of excellent arrays modulo 10^9 + 7.

Input

The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. 

The first and only line of each test case contains three integers n, l, and r (2 ≤ n ≤ 2 ⋅ 10^5; -10^9 ≤ l ≤ 1; n ≤ r ≤ 10^9).

It's guaranteed that the sum of n doesn't exceed 2 ⋅ 10^5.

Output

For each test case, print the number of excellent arrays modulo 10^9 + 7.

Example

Input


4
3 0 3
4 -3 5
42 -33 55
69 -42 146


Output


4
10
143922563
698570404

Note

In the first test case, it can be proven that the maximum F(a) among all good arrays a is equal to 2. The excellent arrays are: 

  1. [2, 1, 2]; 
  2. [0, 3, 2]; 
  3. [2, 3, 2]; 
  4. [3, 0, 1]. 

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing Natural Language Invariants in C++

Below are the C++ code snippets implementing the performance-characterizing invariants derived earlier. These snippets include runtime checks that print a warning and abort execution if a potential performance bottleneck is detected.

### Invariant 1: High Combinatorial Calculation Overhead

```cpp
void check_combination_calculation(int range, int n) {
    if (range > n) {
        cerr << "Warning: Performance bottleneck condition triggered - High combinatorial calculation overhead!" << endl;
        abort();
    }
}
```

### Invariant 2: Repeated Modular Inversions

```cpp
void check_modular_inversion_frequency(int inversionCount, int threshold) {
    if (inversionCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - Repeated modular inversions!" << endl;
        abort();
    }
}
```

### Invariant 3: Nested Loop Overhead

```cpp
void check_nested_loop_range(int loopRange, int n) {
    if (loopRange > n) {
        cerr << "Warning: Performance bottleneck condition triggered - Nested loop excessive range!" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checks into the Original Program

Below is the modified C++ code with the integrated performance-checking functions inserted at strategically chosen points to detect potential slowdowns without adding significant overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

typedef long long LL;

// Helper function to check combination calculation overhead
void check_combination_calculation(int range, int n) {
    if (range > n) {
        cerr << "Warning: Performance bottleneck condition triggered - High combinatorial calculation overhead!" << endl;
        abort();
    }
}

// Helper function to check repeated modular inversions
void check_modular_inversion_frequency(int inversionCount, int threshold) {
    if (inversionCount > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - Repeated modular inversions!" << endl;
        abort();
    }
}

// Helper function to check nested loop range
void check_nested_loop_range(int loopRange, int n) {
    if (loopRange > n) {
        cerr << "Warning: Performance bottleneck condition triggered - Nested loop excessive range!" << endl;
        abort();
    }
}

template<unsigned _MOD_> struct modint {
    static const int MOD = _MOD_;
    int v;
 
    modint(int _v = 0) {
        v = _v % MOD;
        if(v < 0) v += MOD;
    }

    explicit operator int() const { return v; }
    
    static int mod_inv(int a) {
        int g = MOD, r = a, x = 0, y = 1;
        int inversionCount = 0; // Track the number of inversions
        while (r != 0) {
            int q = g / r;
            g %= r; swap(g, r);
            x -= q * y; swap(x, y);
            inversionCount++;
        }
        // Check if the number of inversions exceeds a threshold
        check_modular_inversion_frequency(inversionCount, 100000); // Example threshold
        return x < 0 ? x + MOD : x;
    }
 
    modint& operator+=(const modint &other) { v += other.v; if (v >= MOD) v -= MOD; return *this; }
    modint& operator-=(const modint &other) { v -= other.v; if (v < 0) v += MOD; return *this; }
    modint& operator*=(const modint &other) { v = (int)(((uint64_t) v*other.v)%MOD); return *this; }
    modint& operator/=(const modint &other) { return *this *= other.inv(); }
    friend modint operator+(const modint &a, const modint &b) { return modint(a) += b; }
    friend modint operator-(const modint &a, const modint &b) { return modint(a) -= b; }
    friend modint operator*(const modint &a, const modint &b) { return modint(a) *= b; }
    friend modint operator/(const modint &a, const modint &b) { return modint(a) /= b; }
    modint& operator++() { v = v == MOD - 1 ? 0 : v + 1; return *this; } 
    modint& operator--() { v = v == 0 ? MOD - 1 : v - 1; return *this; }
    modint operator++(int32_t) { modint before = *this; ++*this; return before; }
    modint operator--(int32_t) { modint before = *this; --*this; return before; }
    modint operator-() const { return v == 0 ? 0 : MOD - v; }
    bool operator==(const modint &other) const { return v == other.v; }
    bool operator!=(const modint &other) const { return v != other.v; }
    modint inv() const { return mod_inv(v); }
 
    modint pow(int p) const {
        modint a = *this, result = 1;
 
        while (p > 0) {
            if (p & 1)
                result *= a;
 
            a *= a;
            p >>= 1;
        }
 
        return result;
    }
 
    friend ostream& operator<<(ostream &out, const modint &m) { return out << m.v; }
};

const int MOD = 1000000007;
using mint = modint<MOD>;

void solve() {
    int n, l, r; cin >> n >> l >> r;

    vector<mint> f;
    f.emplace_back(mint(1));
    int sz = 1;
    auto fac = [&](int i) -> mint {
        while(i >= sz) {
            mint nxt = f[sz-1]*sz;
            f.emplace_back(nxt);
            sz++;
        }
        return f[i];
    };
    auto choose = [&](int n, int k) -> mint {
        if(n < k || k < 0) return 0;
        return fac(n)/fac(k)/fac(n-k);
    };

    int hf = n/2;
    mint ans = 0;
    int both_all = min(1-l, r-n);
    
    // Check for high combinatorial calculation overhead
    check_combination_calculation(both_all, n);

    ans += choose(n, hf)*both_all;
    if(n & 1) {
        ans += choose(n, hf+1)*both_all;
    }

    for(int k = both_all+1; ; ++k) {
        int tp = max(0, k-(1-l));
        int bt = max(0, k-(r-n));

        // Check for excessive range in the nested loop
        check_nested_loop_range(tp + bt, n);

        if(tp+bt > n) {
            break;
        }

        ans += choose(n-tp-bt, hf-tp);
        if(n & 1) {
            ans += choose(n-tp-bt, hf+1-tp);
        }
    }
    
    cout << ans << '\n';
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int t; cin >> t;
    while(t--) {
        solve();
    }
    
    return 0;
}
```

### Explanation of Inserted Checks:

1. **`check_combination_calculation`:** 
   - Placed before combinatorial calculations to ensure the range doesn't surpass a threshold that implies a heavy computational burden.

2. **`check_modular_inversion_frequency`:**
   - Integrated inside the `mod_inv` function to count inversions and ensure they don't exceed a reasonable threshold, indicating excessive recalculations.

3. **`check_nested_loop_range`:**
   - Added inside the loop where `k` is iterated in the `solve` function, ensuring the loop doesn't cover an excessively large range, which could result in significant performance degradation.

