system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's call an integer array a_1, a_2, ..., a_n good if a_i ≠ i for each i.

Let F(a) be the number of pairs (i, j) (1 ≤ i < j ≤ n) such that a_i + a_j = i + j.

Let's say that an array a_1, a_2, ..., a_n is excellent if: 

  * a is good; 
  * l ≤ a_i ≤ r for each i; 
  * F(a) is the maximum possible among all good arrays of size n. 



Given n, l and r, calculate the number of excellent arrays modulo 10^9 + 7.

Input

The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. 

The first and only line of each test case contains three integers n, l, and r (2 ≤ n ≤ 2 ⋅ 10^5; -10^9 ≤ l ≤ 1; n ≤ r ≤ 10^9).

It's guaranteed that the sum of n doesn't exceed 2 ⋅ 10^5.

Output

For each test case, print the number of excellent arrays modulo 10^9 + 7.

Example

Input


4
3 0 3
4 -3 5
42 -33 55
69 -42 146


Output


4
10
143922563
698570404

Note

In the first test case, it can be proven that the maximum F(a) among all good arrays a is equal to 2. The excellent arrays are: 

  1. [2, 1, 2]; 
  2. [0, 3, 2]; 
  3. [2, 3, 2]; 
  4. [3, 0, 1]. 

(F) Program Solving the Problem Statement

#include<bits/stdc++.h>
using namespace std;
 
#define pb push_back
#define mlp make_pair
#define vi vector<int>
#define vc vector<char>
#define vvi vector<vector<int> >
#define vvc vector<vector<char> >
#define ss second
#define ff first
#define ll long long
#define int ll
#define popcount(x) __builtin_popcountll(x)
#define pii pair<int , int>
#define vpi vector<pii>
#define arr array
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()
#define EACH(x, a) for (auto& x: a)

template<class T> void selfmax(T& a, const T& b) {
    a = max(a , b);
}
template<class T> void selfmin(T& a, const T& b) {
    a = min(a , b);
}

// #define debug(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#define time__(d) \
    for ( \
        auto blockTime = make_pair(chrono::high_resolution_clock::now(), true); \
        blockTime.second; \
        debug("%s: %lld ms\n", d, chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - blockTime.first).count()), blockTime.second = false \
)

template <typename T>inline T gcd(T a, T b) { while (b != 0) swap(b, a %= b); return a; }

void __print(int x) {cerr << x;}
void __print(long x) {cerr << x;}
void __print(unsigned x) {cerr << x;}
void __print(unsigned long x) {cerr << x;}
void __print(unsigned long long x) {cerr << x;}
void __print(float x) {cerr << x;}
void __print(double x) {cerr << x;}
void __print(long double x) {cerr << x;}
void __print(char x) {cerr << '\'' << x << '\'';}
void __print(const char *x) {cerr << '\"' << x << '\"';}
void __print(const string &x) {cerr << '\"' << x << '\"';}
void __print(bool x) {cerr << (x ? "true" : "false");}

template<typename T, typename V>
void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}
template<typename T>
void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "," : ""), __print(i); cerr << "}";}
void _print() {cerr << "]\n";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << ", "; _print(v...);}

#ifndef ONLINE_JUDGE
#define debug(x...) cerr << "[" << #x << "] = ["; _print(x)
#else
#define debug(x...)fprintf(stderr, __VA_ARGS__), fflush(stderr)
#endif

// template<typename... T>
// void read(T&... args) {
// 	((cin >> args), ...);
// }

template<class A> void read(vector<A>& x) {
	EACH(a, x)
		read(a);
}
template<class A> void read(vector<pair<A , A > >& x) {
	EACH(a, x)
		read(a.ff , a.ss);
}

template<typename... T>
void read(vi &a ){
	int n = a.size();
	for (int i = 0 ; i < n ; i++)cin >> a[i];
}

template<class A>void print(vector<A>& a){
    EACH(x , a)cout << x << " ";
    cout << endl;
}

long long prod(long long a, long long b, long long m)
{
    long long res = 1;

    while(b)
    {
        if(b & 1)
            res = (res * a) % m;
        a = (a % m * a % m ) % m;

        b >>= 1;
    }

    return res;
}

long long power(long long a, long long b, long long m)
{
    long long res = 1;

    while(b)
    {
        if(b & 1)
            res = prod(res, a, m);
        a = prod(a, a, m);

        b >>= 1;
    }

    return res;
}

int dx[]={1,0,-1,0};
int dy[]={0,1,0,-1}; //4 Direction
// char dc[] = {'D' , 'R' , 'U' , 'L'};

// int dx[]={1,1,0,-1,-1,-1,0,1};
// int dy[]={0,1,1,1,0,-1,-1,-1};  // 8D

const int MOD = 1e9 + 7;
const int INF = 1000000000;
const int BIGINF = 1e12;

// Returns first i in [l, r] s.t. predicate(i) is true. Never evaluates r.
template <typename I, typename P> I binarysearch(const P &predicate, I l, I r) {
    l--;
    while (r - l > 1) {
        auto mid = l + (r - l) / 2;
        // debug(l , r , mid , predicate(mid) );
        if (predicate(mid))
            r = mid;
        else
            l = mid;
    }
    return r;
}

ll fact[200009];

void pro()
{
    ll i;
    fact[0]=1;
    for(i=1;i<200009;i++)
    {
        fact[i]=(fact[i-1]*i)%MOD;
    }
}

ll ncr(ll n,ll r)
{
    if(n<r||n<0||r<0){return 0;}
    return (fact[n]*(prod(fact[r],MOD-2,MOD)%MOD*prod(fact[n-r],MOD-2,MOD)%MOD)%MOD)%MOD;
}

void solve(){
   ll n,l,r,x,r1,r2,ans=0,i;
   cin>>n>>l>>r;
   ans=(ncr(n,n/2)*min(1-l,r-n))%MOD;
   if(n%2)
   {
       ans=(ans+ncr(n,(n+1)/2)*min(1-l,r-n))%MOD;
   }
   for(i=min(1-l,r-n)+1;i<=min(1-l,r-n)+n+5;i++)
   {
       r1=max(0LL,l+i-1);
       r2=max(0LL,n+i-r);
       x=0;
       if(r1+r2>n||r1>(n+1)/2||r2>(n+1)/2){break;}
       if(n/2>=r1){x=ncr(n-r1-r2,n/2-r1);}
       if((n+1)/2>=r1){x=(x+ncr(n-r1-r2,(n+1)/2-r1))%MOD;}
       if(n%2==0){x=ncr(n-r1-r2,n/2-r1);}
       //cout<<r1<<" "<<r2<<" "<<i<<" "<<x<<"\n";
       ans=(ans%MOD+x%MOD)%MOD;
   }
   cout<<ans<<"\n";
}

int32_t main(){
    pro();
    // #ifndef ONLINE_JUDGE
    // // freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
    // #endif
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int t = 1;
    cin >> t;
    

    for (int tt = 0 ; tt < t ; tt++){
        // cout << "Case #" << (tt+1) <<": ";
        // time__("Solve")
        solve();
    }
}

(G) The Slow & Fast Inputs

(G.1) Slow Input

10
20000 -431912570 597469643
20000 -13928452 414987414
20000 -472808872 367983694
20000 -84913058 517394906
20000 -514402152 597357115
20000 -720971736 526102810
20000 -416160739 748291750
20000 -665939649 743938438
20000 -80741314 634025883
20000 -824743396 138091345


(G.2) Fast Input

10
20000 -431912570 597469643
20000 -13928452 414987414
20000 -472808872 367983694
20000 -84913058 517394906
3641 -514402152 597357115
20000 -720971736 526102810
20000 -416160739 748291750
20000 -665939649 743938438
20000 -80741314 634025883
260 -824743396 138091345


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include<bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
  /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
#define pb push_back /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
#define mlp make_pair /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
#define vi vector<int> /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
#define vc vector<char> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
#define vvi vector<vector<int> > /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
#define vvc vector<vector<char> > /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
#define ss second /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
#define ff first /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
#define ll long long /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
#define int ll /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
#define popcount(x) __builtin_popcountll(x) /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
#define pii pair<int , int> /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
#define vpi vector<pii> /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
#define arr array /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
#define all(c) (c).begin(), (c).end() /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
#define sz(x) (int)(x).size() /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
#define EACH(x, a) for (auto& x: a) /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
template<class T> void selfmax(T& a, const T& b) { /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
    a = max(a , b); /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
template<class T> void selfmin(T& a, const T& b) { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    a = min(a , b); /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
// #define debug(...) fprintf(stderr, __VA_ARGS__), fflush(stderr) /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
#define time__(d) \ /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    for ( \ /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
        auto blockTime = make_pair(chrono::high_resolution_clock::now(), true); \ /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
        blockTime.second; \ /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
        debug("%s: %lld ms\n", d, chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - blockTime.first).count()), blockTime.second = false \ /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
) /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T>inline T gcd(T a, T b) { while (b != 0) swap(b, a %= b); return a; } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
void __print(int x) {cerr << x;} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
void __print(long x) {cerr << x;} /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
void __print(unsigned x) {cerr << x;} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
void __print(unsigned long x) {cerr << x;} /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
void __print(unsigned long long x) {cerr << x;} /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
void __print(float x) {cerr << x;} /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
void __print(double x) {cerr << x;} /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
void __print(long double x) {cerr << x;} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
void __print(char x) {cerr << '\'' << x << '\'';} /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
void __print(const char *x) {cerr << '\"' << x << '\"';} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
void __print(const string &x) {cerr << '\"' << x << '\"';} /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
void __print(bool x) {cerr << (x ? "true" : "false");} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
template<typename T, typename V> /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';} /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
template<typename T> /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "," : ""), __print(i); cerr << "}";} /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
void _print() {cerr << "]\n";} /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename... V> /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << ", "; _print(v...);} /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
#ifndef ONLINE_JUDGE /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
#define debug(x...) cerr << "[" << #x << "] = ["; _print(x) /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
#else /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
#define debug(x...)fprintf(stderr, __VA_ARGS__), fflush(stderr) /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
#endif /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
// template<typename... T> /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
// void read(T&... args) { /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
// 	((cin >> args), ...); /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
// } /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
template<class A> void read(vector<A>& x) { /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
	EACH(a, x) /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
		read(a); /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
template<class A> void read(vector<pair<A , A > >& x) { /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
	EACH(a, x) /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
		read(a.ff , a.ss); /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
template<typename... T> /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
void read(vi &a ){ /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
	int n = a.size(); /* line 82 slow_hit_count: 0, fast_hit_count: 0 */
	for (int i = 0 ; i < n ; i++)cin >> a[i]; /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 85 slow_hit_count: 0, fast_hit_count: 0 */
template<class A>void print(vector<A>& a){ /* line 86 slow_hit_count: 0, fast_hit_count: 0 */
    EACH(x , a)cout << x << " "; /* line 87 slow_hit_count: 0, fast_hit_count: 0 */
    cout << endl; /* line 88 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 89 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 90 slow_hit_count: 0, fast_hit_count: 0 */
long long prod(long long a, long long b, long long m) /* line 91 slow_hit_count: 600020, fast_hit_count: 488084 */
{ /* line 92 slow_hit_count: 0, fast_hit_count: 0 */
    long long res = 1; /* line 93 slow_hit_count: 600020, fast_hit_count: 488084 */
 /* line 94 slow_hit_count: 0, fast_hit_count: 0 */
    while(b) /* line 95 slow_hit_count: 18600620, fast_hit_count: 15130604 */
    { /* line 96 slow_hit_count: 0, fast_hit_count: 0 */
        if(b & 1) /* line 97 slow_hit_count: 18000600, fast_hit_count: 14642520 */
            res = (res * a) % m; /* line 98 slow_hit_count: 9000300, fast_hit_count: 7321260 */
        a = (a % m * a % m ) % m; /* line 99 slow_hit_count: 18000600, fast_hit_count: 14642520 */
 /* line 100 slow_hit_count: 0, fast_hit_count: 0 */
        b >>= 1; /* line 101 slow_hit_count: 18000600, fast_hit_count: 14642520 */
    } /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
    return res; /* line 104 slow_hit_count: 600020, fast_hit_count: 488084 */
} /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 106 slow_hit_count: 0, fast_hit_count: 0 */
long long power(long long a, long long b, long long m) /* line 107 slow_hit_count: 0, fast_hit_count: 0 */
{ /* line 108 slow_hit_count: 0, fast_hit_count: 0 */
    long long res = 1; /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
    while(b) /* line 111 slow_hit_count: 0, fast_hit_count: 0 */
    { /* line 112 slow_hit_count: 0, fast_hit_count: 0 */
        if(b & 1) /* line 113 slow_hit_count: 0, fast_hit_count: 0 */
            res = prod(res, a, m); /* line 114 slow_hit_count: 0, fast_hit_count: 0 */
        a = prod(a, a, m); /* line 115 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
        b >>= 1; /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 119 slow_hit_count: 0, fast_hit_count: 0 */
    return res; /* line 120 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 121 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
int dx[]={1,0,-1,0}; /* line 123 slow_hit_count: 0, fast_hit_count: 0 */
int dy[]={0,1,0,-1}; //4 Direction /* line 124 slow_hit_count: 0, fast_hit_count: 0 */
// char dc[] = {'D' , 'R' , 'U' , 'L'}; /* line 125 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 126 slow_hit_count: 0, fast_hit_count: 0 */
// int dx[]={1,1,0,-1,-1,-1,0,1}; /* line 127 slow_hit_count: 0, fast_hit_count: 0 */
// int dy[]={0,1,1,1,0,-1,-1,-1};  // 8D /* line 128 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 129 slow_hit_count: 0, fast_hit_count: 0 */
const int MOD = 1e9 + 7; /* line 130 slow_hit_count: 0, fast_hit_count: 0 */
const int INF = 1000000000; /* line 131 slow_hit_count: 0, fast_hit_count: 0 */
const int BIGINF = 1e12; /* line 132 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 133 slow_hit_count: 0, fast_hit_count: 0 */
// Returns first i in [l, r] s.t. predicate(i) is true. Never evaluates r. /* line 134 slow_hit_count: 0, fast_hit_count: 0 */
template <typename I, typename P> I binarysearch(const P &predicate, I l, I r) { /* line 135 slow_hit_count: 0, fast_hit_count: 0 */
    l--; /* line 136 slow_hit_count: 0, fast_hit_count: 0 */
    while (r - l > 1) { /* line 137 slow_hit_count: 0, fast_hit_count: 0 */
        auto mid = l + (r - l) / 2; /* line 138 slow_hit_count: 0, fast_hit_count: 0 */
        // debug(l , r , mid , predicate(mid) ); /* line 139 slow_hit_count: 0, fast_hit_count: 0 */
        if (predicate(mid)) /* line 140 slow_hit_count: 0, fast_hit_count: 0 */
            r = mid; /* line 141 slow_hit_count: 0, fast_hit_count: 0 */
        else /* line 142 slow_hit_count: 0, fast_hit_count: 0 */
            l = mid; /* line 143 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 144 slow_hit_count: 0, fast_hit_count: 0 */
    return r; /* line 145 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 146 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 147 slow_hit_count: 0, fast_hit_count: 0 */
ll fact[200009]; /* line 148 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 149 slow_hit_count: 0, fast_hit_count: 0 */
void pro() /* line 150 slow_hit_count: 1, fast_hit_count: 1 */
{ /* line 151 slow_hit_count: 0, fast_hit_count: 0 */
    ll i; /* line 152 slow_hit_count: 0, fast_hit_count: 0 */
    fact[0]=1; /* line 153 slow_hit_count: 1, fast_hit_count: 1 */
    for(i=1;i<200009;i++) /* line 154 slow_hit_count: 200009, fast_hit_count: 200009 */
    { /* line 155 slow_hit_count: 0, fast_hit_count: 0 */
        fact[i]=(fact[i-1]*i)%MOD; /* line 156 slow_hit_count: 200008, fast_hit_count: 200008 */
    } /* line 157 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 158 slow_hit_count: 1, fast_hit_count: 1 */
 /* line 159 slow_hit_count: 0, fast_hit_count: 0 */
ll ncr(ll n,ll r) /* line 160 slow_hit_count: 300010, fast_hit_count: 244042 */
{ /* line 161 slow_hit_count: 0, fast_hit_count: 0 */
    if(n<r||n<0||r<0){return 0;} /* line 162 slow_hit_count: 300010, fast_hit_count: 244042 */
    return (fact[n]*(prod(fact[r],MOD-2,MOD)%MOD*prod(fact[n-r],MOD-2,MOD)%MOD)%MOD)%MOD; /* line 163 slow_hit_count: 300010, fast_hit_count: 244042 */
} /* line 164 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 165 slow_hit_count: 0, fast_hit_count: 0 */
void solve(){ /* line 166 slow_hit_count: 10, fast_hit_count: 10 */
   ll n,l,r,x,r1,r2,ans=0,i; /* line 167 slow_hit_count: 10, fast_hit_count: 10 */
   cin>>n>>l>>r; /* line 168 slow_hit_count: 10, fast_hit_count: 10 */
   ans=(ncr(n,n/2)*min(1-l,r-n))%MOD; /* line 169 slow_hit_count: 10, fast_hit_count: 10 */
   if(n%2) /* line 170 slow_hit_count: 10, fast_hit_count: 10 */
   { /* line 171 slow_hit_count: 0, fast_hit_count: 0 */
       ans=(ans+ncr(n,(n+1)/2)*min(1-l,r-n))%MOD; /* line 172 slow_hit_count: 0, fast_hit_count: 1 */
   } /* line 173 slow_hit_count: 0, fast_hit_count: 0 */
   for(i=min(1-l,r-n)+1;i<=min(1-l,r-n)+n+5;i++) /* line 174 slow_hit_count: 100010, fast_hit_count: 81961 */
   { /* line 175 slow_hit_count: 0, fast_hit_count: 0 */
       r1=max(0LL,l+i-1); /* line 176 slow_hit_count: 100010, fast_hit_count: 81961 */
       r2=max(0LL,n+i-r); /* line 177 slow_hit_count: 100010, fast_hit_count: 81961 */
       x=0; /* line 178 slow_hit_count: 100010, fast_hit_count: 81961 */
       if(r1+r2>n||r1>(n+1)/2||r2>(n+1)/2){break;} /* line 179 slow_hit_count: 100010, fast_hit_count: 81961 */
       if(n/2>=r1){x=ncr(n-r1-r2,n/2-r1);} /* line 180 slow_hit_count: 100000, fast_hit_count: 81951 */
       if((n+1)/2>=r1){x=(x+ncr(n-r1-r2,(n+1)/2-r1))%MOD;} /* line 181 slow_hit_count: 100000, fast_hit_count: 81951 */
       if(n%2==0){x=ncr(n-r1-r2,n/2-r1);} /* line 182 slow_hit_count: 100000, fast_hit_count: 81951 */
       //cout<<r1<<" "<<r2<<" "<<i<<" "<<x<<"\n"; /* line 183 slow_hit_count: 0, fast_hit_count: 0 */
       ans=(ans%MOD+x%MOD)%MOD; /* line 184 slow_hit_count: 100000, fast_hit_count: 81951 */
   } /* line 185 slow_hit_count: 0, fast_hit_count: 0 */
   cout<<ans<<"\n"; /* line 186 slow_hit_count: 10, fast_hit_count: 10 */
} /* line 187 slow_hit_count: 10, fast_hit_count: 10 */
 /* line 188 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main(){ /* line 189 slow_hit_count: 1, fast_hit_count: 1 */
    pro(); /* line 190 slow_hit_count: 1, fast_hit_count: 1 */
    // #ifndef ONLINE_JUDGE /* line 191 slow_hit_count: 0, fast_hit_count: 0 */
    // // freopen("input.txt", "r", stdin); /* line 192 slow_hit_count: 0, fast_hit_count: 0 */
    // freopen("output.txt", "w", stdout); /* line 193 slow_hit_count: 0, fast_hit_count: 0 */
    // #endif /* line 194 slow_hit_count: 0, fast_hit_count: 0 */
    ios::sync_with_stdio(false); /* line 195 slow_hit_count: 1, fast_hit_count: 1 */
    cin.tie(NULL); /* line 196 slow_hit_count: 1, fast_hit_count: 1 */
    int t = 1; /* line 197 slow_hit_count: 1, fast_hit_count: 1 */
    cin >> t; /* line 198 slow_hit_count: 1, fast_hit_count: 1 */
     /* line 199 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 200 slow_hit_count: 0, fast_hit_count: 0 */
    for (int tt = 0 ; tt < t ; tt++){ /* line 201 slow_hit_count: 11, fast_hit_count: 11 */
        // cout << "Case #" << (tt+1) <<": "; /* line 202 slow_hit_count: 0, fast_hit_count: 0 */
        // time__("Solve") /* line 203 slow_hit_count: 0, fast_hit_count: 0 */
        solve(); /* line 204 slow_hit_count: 10, fast_hit_count: 10 */
    } /* line 205 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 206 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the performance characteristics of the provided C++ code, we need to evaluate the differences in line-level hit counts between the "slow" and "fast" inputs. The main areas of focus will be identifying expensive operations and understanding how they relate to the input patterns, especially given the constraints and the problem requirements.

### Phase 1: Identifying Expensive or Inefficient Code Segments

1. **High Hit Counts in Function `prod`:**
   - Lines 91-105, specifically the `prod` function, show a significant difference in hit counts between slow and fast runs. This function is involved in modular arithmetic, often a bottleneck due to its iterative nature.
   - The `while(b)` loop (line 95) and its operations (lines 97-101) are excessively called during slow runs, indicating an intensive computational operation.

2. **Loop within `solve` Function:**
   - Line 174 and its associated code block (lines 175-185) are executed many more times in the slow input. This loop is heavily dependent on the range determined by the minimum and maximum calculations involving `l`, `r`, and `n`, as well as the nested `ncr` calls.
   - The conditions and calculations within this loop (lines 176-184) suggest that the loop's execution varies considerably depending on the input values.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the identified expensive operations, we can formulate the following performance-characterizing invariants in natural language:

1. **Excessive Modular Arithmetic Operations:**
   - **Invariant:** "The program can become slow when the modular arithmetic operations, particularly exponentiation by squaring in the `prod` function, are invoked many times due to large values of `b` (the exponent) in repeated calls. This is likely when `n` is large and the computed ranges for loop iterations are wide."
   
2. **Loop Iterations and Combinatorial Calls (`ncr`):**
   - **Invariant:** "The performance may degrade if the loop within the `solve` function iterates excessively, making numerous combinatorial computations (`ncr`). This scenario occurs when the range derived from `l` and `r` relative to `n` results in a large number of valid pairs (i.e., when `min(1-l, r-n)` is large and close to `n`)."

3. **Input-Driven Conditionals:**
   - **Invariant:** "When the input constraints allow a broad range of possible values for `a_i` (from `l` to `r`), the number of iterations over possible pairings increases, potentially leading to performance bottlenecks. This is more pronounced when such ranges lead to a high number of valid combinations of `i` and `j` for which `a_i + a_j = i + j` holds."

These invariants abstractly describe the conditions under which the code transitions to a slow path, focusing on the combinatorial nature of the operations and how they scale with input size and constraints. They also emphasize that the primary drivers of inefficiency are related to the number of combinatorial calculations and the intensity of modular arithmetic operations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's call an integer array a_1, a_2, ..., a_n good if a_i ≠ i for each i.

Let F(a) be the number of pairs (i, j) (1 ≤ i < j ≤ n) such that a_i + a_j = i + j.

Let's say that an array a_1, a_2, ..., a_n is excellent if: 

  * a is good; 
  * l ≤ a_i ≤ r for each i; 
  * F(a) is the maximum possible among all good arrays of size n. 



Given n, l and r, calculate the number of excellent arrays modulo 10^9 + 7.

Input

The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. 

The first and only line of each test case contains three integers n, l, and r (2 ≤ n ≤ 2 ⋅ 10^5; -10^9 ≤ l ≤ 1; n ≤ r ≤ 10^9).

It's guaranteed that the sum of n doesn't exceed 2 ⋅ 10^5.

Output

For each test case, print the number of excellent arrays modulo 10^9 + 7.

Example

Input


4
3 0 3
4 -3 5
42 -33 55
69 -42 146


Output


4
10
143922563
698570404

Note

In the first test case, it can be proven that the maximum F(a) among all good arrays a is equal to 2. The excellent arrays are: 

  1. [2, 1, 2]; 
  2. [0, 3, 2]; 
  3. [2, 3, 2]; 
  4. [3, 0, 1]. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Inferred Invariants as Checkers in C++

Here, we'll translate the previously inferred natural language performance invariants into C++ code that can check these conditions at runtime.

#### Invariant 1: Excessive Modular Arithmetic Operations

```cpp
void check_modular_operations_invariant(long long a, long long b) {
    if (b > 100000) { // Choose a large number for b as a heuristic
        cerr << "Warning: Performance bottleneck condition triggered due to excessive modular arithmetic operations!" << endl;
        abort();
    }
}
```

#### Invariant 2: Loop Iterations and Combinatorial Calls (`ncr`)

```cpp
void check_loop_invariant(long long loop_range) {
    if (loop_range > 50000) { // Threshold chosen based on heuristic for large loop ranges
        cerr << "Warning: Performance bottleneck condition triggered due to excessive loop iterations!" << endl;
        abort();
    }
}
```

#### Invariant 3: Input-Driven Conditionals

```cpp
void check_input_invariant(long long n, long long l, long long r) {
    // We use some heuristic that when `l` and `r` are very far apart, we might have a potential for excessive calculations
    if (r - l > n * 500) { 
        cerr << "Warning: Performance bottleneck condition triggered due to excessive input range!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into Original C++ Program

Below is the original C++ code instrumented with the performance checkers to help detect slow execution paths:

```cpp
#include<bits/stdc++.h>
using namespace std;

#define pb push_back
#define mlp make_pair
#define vi vector<int>
#define vc vector<char>
#define vvi vector<vector<int> >
#define vvc vector<vector<char> >
#define ss second
#define ff first
#define ll long long
#define int ll
#define popcount(x) __builtin_popcountll(x)
#define pii pair<int , int>
#define vpi vector<pii>
#define arr array
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()
#define EACH(x, a) for (auto& x: a)

template<class T> void selfmax(T& a, const T& b) {
    a = max(a , b);
}
template<class T> void selfmin(T& a, const T& b) {
    a = min(a , b);
}

// #define debug(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#define time__(d) \
    for ( \
        auto blockTime = make_pair(chrono::high_resolution_clock::now(), true); \
        blockTime.second; \
        debug("%s: %lld ms\n", d, chrono::duration_cast<chrono::milliseconds>(chrono::high_resolution_clock::now() - blockTime.first).count()), blockTime.second = false \
)

template <typename T>inline T gcd(T a, T b) { while (b != 0) swap(b, a %= b); return a; }

void __print(int x) {cerr << x;}
void __print(long x) {cerr << x;}
void __print(unsigned x) {cerr << x;}
void __print(unsigned long x) {cerr << x;}
void __print(unsigned long long x) {cerr << x;}
void __print(float x) {cerr << x;}
void __print(double x) {cerr << x;}
void __print(long double x) {cerr << x;}
void __print(char x) {cerr << '\'' << x << '\'';}
void __print(const char *x) {cerr << '\"' << x << '\"';}
void __print(const string &x) {cerr << '\"' << x << '\"';}
void __print(bool x) {cerr << (x ? "true" : "false");}

template<typename T, typename V>
void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}
template<typename T>
void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "," : ""), __print(i); cerr << "}";}
void _print() {cerr << "]\n";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << ", "; _print(v...);}

#ifndef ONLINE_JUDGE
#define debug(x...) cerr << "[" << #x << "] = ["; _print(x)
#else
#define debug(x...)fprintf(stderr, __VA_ARGS__), fflush(stderr)
#endif

// Performance checkers based on inferred invariants
void check_modular_operations_invariant(long long a, long long b) {
    if (b > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive modular arithmetic operations!" << endl;
        abort();
    }
}

void check_loop_invariant(long long loop_range) {
    if (loop_range > 50000) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive loop iterations!" << endl;
        abort();
    }
}

void check_input_invariant(long long n, long long l, long long r) {
    if (r - l > n * 500) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive input range!" << endl;
        abort();
    }
}

template<class A> void read(vector<A>& x) {
	EACH(a, x)
		read(a);
}
template<class A> void read(vector<pair<A , A > >& x) {
	EACH(a, x)
		read(a.ff , a.ss);
}

template<typename... T>
void read(vi &a ){
	int n = a.size();
	for (int i = 0 ; i < n ; i++)cin >> a[i];
}

template<class A>void print(vector<A>& a){
    EACH(x , a)cout << x << " ";
    cout << endl;
}

long long prod(long long a, long long b, long long m)
{
    check_modular_operations_invariant(a, b); // Check for excessive modular arithmetic operations
    long long res = 1;

    while(b)
    {
        if(b & 1)
            res = (res * a) % m;
        a = (a % m * a % m ) % m;

        b >>= 1;
    }

    return res;
}

long long power(long long a, long long b, long long m)
{
    long long res = 1;

    while(b)
    {
        if(b & 1)
            res = prod(res, a, m);
        a = prod(a, a, m);

        b >>= 1;
    }

    return res;
}

int dx[]={1,0,-1,0};
int dy[]={0,1,0,-1}; //4 Direction
// char dc[] = {'D' , 'R' , 'U' , 'L'};

// int dx[]={1,1,0,-1,-1,-1,0,1};
// int dy[]={0,1,1,1,0,-1,-1,-1};  // 8D

const int MOD = 1e9 + 7;
const int INF = 1000000000;
const int BIGINF = 1e12;

// Returns first i in [l, r] s.t. predicate(i) is true. Never evaluates r.
template <typename I, typename P> I binarysearch(const P &predicate, I l, I r) {
    l--;
    while (r - l > 1) {
        auto mid = l + (r - l) / 2;
        // debug(l , r , mid , predicate(mid) );
        if (predicate(mid))
            r = mid;
        else
            l = mid;
    }
    return r;
}

ll fact[200009];

void pro()
{
    ll i;
    fact[0]=1;
    for(i=1;i<200009;i++)
    {
        fact[i]=(fact[i-1]*i)%MOD;
    }
}

ll ncr(ll n,ll r)
{
    if(n<r||n<0||r<0){return 0;}
    return (fact[n]*(prod(fact[r],MOD-2,MOD)%MOD*prod(fact[n-r],MOD-2,MOD)%MOD)%MOD)%MOD;
}

void solve(){
   ll n,l,r,x,r1,r2,ans=0,i;
   cin>>n>>l>>r;

   check_input_invariant(n, l, r); // Check for excessive input range

   ans=(ncr(n,n/2)*min(1-l,r-n))%MOD;
   if(n%2)
   {
       ans=(ans+ncr(n,(n+1)/2)*min(1-l,r-n))%MOD;
   }
   
   // Determine the loop range for the invariant check
   long long loop_range = min(1-l, r-n) + n + 5 - (min(1-l, r-n) + 1);
   check_loop_invariant(loop_range); // Check for excessive loop iterations

   for(i=min(1-l,r-n)+1;i<=min(1-l,r-n)+n+5;i++)
   {
       r1=max(0LL,l+i-1);
       r2=max(0LL,n+i-r);
       x=0;
       if(r1+r2>n||r1>(n+1)/2||r2>(n+1)/2){break;}
       if(n/2>=r1){x=ncr(n-r1-r2,n/2-r1);}
       if((n+1)/2>=r1){x=(x+ncr(n-r1-r2,(n+1)/2-r1))%MOD;}
       if(n%2==0){x=ncr(n-r1-r2,n/2-r1);}
       //cout<<r1<<" "<<r2<<" "<<i<<" "<<x<<"\n";
       ans=(ans%MOD+x%MOD)%MOD;
   }
   cout<<ans<<"\n";
}

int32_t main(){
    pro();
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int t = 1;
    cin >> t;

    for (int tt = 0 ; tt < t ; tt++){
        solve();
    }
}
```

### Explanation of Placement

- The **modular operations** check (`check_modular_operations_invariant`) is placed directly in the `prod` function, where the modular arithmetic occurs, ensuring it captures potential bottlenecks in real-time.
  
- The **input range** check (`check_input_invariant`) is positioned right after reading the inputs in the `solve` function to immediately verify if the inputs could lead to excessive computations.

- The **loop iterations** check (`check_loop_invariant`) is placed after calculating the loop range but before the loop execution, ensuring the invariant is checked once without adding overhead inside the loop. This captures the potential for excessive iterations based on the loop range.

