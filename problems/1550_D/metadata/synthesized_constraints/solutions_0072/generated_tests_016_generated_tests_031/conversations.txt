system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's call an integer array a_1, a_2, ..., a_n good if a_i ≠ i for each i.

Let F(a) be the number of pairs (i, j) (1 ≤ i < j ≤ n) such that a_i + a_j = i + j.

Let's say that an array a_1, a_2, ..., a_n is excellent if: 

  * a is good; 
  * l ≤ a_i ≤ r for each i; 
  * F(a) is the maximum possible among all good arrays of size n. 



Given n, l and r, calculate the number of excellent arrays modulo 10^9 + 7.

Input

The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. 

The first and only line of each test case contains three integers n, l, and r (2 ≤ n ≤ 2 ⋅ 10^5; -10^9 ≤ l ≤ 1; n ≤ r ≤ 10^9).

It's guaranteed that the sum of n doesn't exceed 2 ⋅ 10^5.

Output

For each test case, print the number of excellent arrays modulo 10^9 + 7.

Example

Input


4
3 0 3
4 -3 5
42 -33 55
69 -42 146


Output


4
10
143922563
698570404

Note

In the first test case, it can be proven that the maximum F(a) among all good arrays a is equal to 2. The excellent arrays are: 

  1. [2, 1, 2]; 
  2. [0, 3, 2]; 
  3. [2, 3, 2]; 
  4. [3, 0, 1]. 

(F) Program Solving the Problem Statement

#include<bits/stdc++.h>

using namespace std;
using ll = long long;

class Combination2 {
    using T = unsigned long long;
    T MOD;
    vector<T> fact;
public :
    Combination2(int n, T MOD = 0)
    : MOD(MOD), fact(n+1) {
        fact[0] = 1;
        for(auto i = 1; i <= n; ++i)
            fact[i] = fact[i-1] * i % MOD;
    }

    T pow_mod(long long x, long long y, long long mod) {
        auto ret=1ll;
        while (y) {
                if (y % 2)
                    ret = ret * x % mod;
                x =  x * x % mod;
                y /= 2;
            }
        return ret;
    }

    T nCr(int n, int r) {
        if(n < 0 || r > n || r < 0) return 0; // modified
        return fact[n] * pow_mod(fact[n-r], MOD - 2, MOD) % MOD * pow_mod(fact[r], MOD - 2, MOD) % MOD;
    }
};

constexpr int MOD = 1e9 + 7;
void solve(int TestCase) {
    ll n, l, r;
    cin >> n >> l >> r;

    Combination2 C(n, MOD);

    auto k = min(abs(l - 1), abs(r - n));
    ll ret = k * C.nCr(n, n / 2) % MOD;
    if(n % 2)
        ret = ret * 2 % MOD;

    while(true) {
        ++k;
        auto plus = max(1ll, l + k); //i - k < l [1, plus)
        auto minus = min(n, r - k); // i + k > r (minus, n]
        
        ll add = C.nCr(minus - plus + 1, n / 2 - (plus - 1));
        if(n % 2)
            add += C.nCr(minus - plus + 1, (n + 1) / 2 - (plus - 1));

        if(minus - plus + 1 < 0) break;

        ret = (ret + add) % MOD;
    }

    cout << ret << endl;
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int t = 1;
    cin >> t;
    for(auto i = 1; i <= t; ++i) {
        //cout << "Case #"<< i << ": ";
        solve(i);
    }
}

(G) The Slow & Fast Inputs

(G.1) Slow Input

10
34651 -93862270 597469643
20000 -13928452 414987414
20000 -472808872 367983694
20000 -84913058 517394906
20000 -949029500 8329318
20000 -720971736 526102810
20000 -416160739 748291750
20000 -665939649 743938438
20000 -80741314 634025883
20000 -824743396 43172618


(G.2) Fast Input

10
20000 -431912570 597469643
20000 -13928452 414987414
20000 -472808872 367983694
20000 -84913058 517394906
20000 -949029500 8329318
20000 -720971736 526102810
20000 -416160739 748291750
20000 -665939649 743938438
1242 -80741314 634025883
20000 -824743396 138091345


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include<bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
class Combination2 { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
    using T = unsigned long long; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    T MOD; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
    vector<T> fact; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
public : /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    Combination2(int n, T MOD = 0) /* line 11 slow_hit_count: 10, fast_hit_count: 10 */
    : MOD(MOD), fact(n+1) { /* line 12 slow_hit_count: 10, fast_hit_count: 10 */
        fact[0] = 1; /* line 13 slow_hit_count: 10, fast_hit_count: 10 */
        for(auto i = 1; i <= n; ++i) /* line 14 slow_hit_count: 214661, fast_hit_count: 181252 */
            fact[i] = fact[i-1] * i % MOD; /* line 15 slow_hit_count: 214651, fast_hit_count: 181242 */
    } /* line 16 slow_hit_count: 10, fast_hit_count: 10 */
 /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    T pow_mod(long long x, long long y, long long mod) { /* line 18 slow_hit_count: 249322, fast_hit_count: 181262 */
        auto ret=1ll; /* line 19 slow_hit_count: 249322, fast_hit_count: 181262 */
        while (y) { /* line 20 slow_hit_count: 7728982, fast_hit_count: 5619122 */
                if (y % 2) /* line 21 slow_hit_count: 7479660, fast_hit_count: 5437860 */
                    ret = ret * x % mod; /* line 22 slow_hit_count: 3739830, fast_hit_count: 2718930 */
                x =  x * x % mod; /* line 23 slow_hit_count: 7479660, fast_hit_count: 5437860 */
                y /= 2; /* line 24 slow_hit_count: 7479660, fast_hit_count: 5437860 */
            } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
        return ret; /* line 26 slow_hit_count: 249322, fast_hit_count: 181262 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    T nCr(int n, int r) { /* line 29 slow_hit_count: 249323, fast_hit_count: 181262 */
        if(n < 0 || r > n || r < 0) return 0; // modified /* line 30 slow_hit_count: 249323, fast_hit_count: 181262 */
        return fact[n] * pow_mod(fact[n-r], MOD - 2, MOD) % MOD * pow_mod(fact[r], MOD - 2, MOD) % MOD; /* line 31 slow_hit_count: 124661, fast_hit_count: 90631 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
constexpr int MOD = 1e9 + 7; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
void solve(int TestCase) { /* line 36 slow_hit_count: 10, fast_hit_count: 10 */
    ll n, l, r; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> n >> l >> r; /* line 38 slow_hit_count: 10, fast_hit_count: 10 */
 /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    Combination2 C(n, MOD); /* line 40 slow_hit_count: 20, fast_hit_count: 20 */
 /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
    auto k = min(abs(l - 1), abs(r - n)); /* line 42 slow_hit_count: 10, fast_hit_count: 10 */
    ll ret = k * C.nCr(n, n / 2) % MOD; /* line 43 slow_hit_count: 10, fast_hit_count: 10 */
    if(n % 2) /* line 44 slow_hit_count: 10, fast_hit_count: 10 */
        ret = ret * 2 % MOD; /* line 45 slow_hit_count: 1, fast_hit_count: 0 */
 /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    while(true) { /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
        ++k; /* line 48 slow_hit_count: 214661, fast_hit_count: 181252 */
        auto plus = max(1ll, l + k); //i - k < l [1, plus) /* line 49 slow_hit_count: 214661, fast_hit_count: 181252 */
        auto minus = min(n, r - k); // i + k > r (minus, n] /* line 50 slow_hit_count: 214661, fast_hit_count: 181252 */
         /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
        ll add = C.nCr(minus - plus + 1, n / 2 - (plus - 1)); /* line 52 slow_hit_count: 214661, fast_hit_count: 181252 */
        if(n % 2) /* line 53 slow_hit_count: 214661, fast_hit_count: 181252 */
            add += C.nCr(minus - plus + 1, (n + 1) / 2 - (plus - 1)); /* line 54 slow_hit_count: 34652, fast_hit_count: 0 */
 /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
        if(minus - plus + 1 < 0) break; /* line 56 slow_hit_count: 214661, fast_hit_count: 181252 */
 /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
        ret = (ret + add) % MOD; /* line 58 slow_hit_count: 214651, fast_hit_count: 181242 */
    } /* line 59 slow_hit_count: 214651, fast_hit_count: 181242 */
 /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ret << endl; /* line 61 slow_hit_count: 10, fast_hit_count: 10 */
} /* line 62 slow_hit_count: 10, fast_hit_count: 10 */
 /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
int main(){ /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
    ios_base::sync_with_stdio(false); /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
    cin.tie(NULL); /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
    cout.tie(NULL); /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
 /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
    int t = 1; /* line 69 slow_hit_count: 1, fast_hit_count: 1 */
    cin >> t; /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
    for(auto i = 1; i <= t; ++i) { /* line 71 slow_hit_count: 11, fast_hit_count: 11 */
        //cout << "Case #"<< i << ": "; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
        solve(i); /* line 73 slow_hit_count: 10, fast_hit_count: 10 */
    } /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 75 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count data provided, let's analyze the critical differences between the slow and fast runs:

1. **Line 14 and 15 in `Combination2` Constructor:**
   - **Hit Counts:**
     - Slow: 214,661
     - Fast: 181,252
   - This loop is executed for the factorial computation, which is likely expensive for large `n`.

2. **`pow_mod` Function (Lines 20-24):**
   - **Hit Counts:**
     - Slow: Multiple millions
     - Fast: Fewer millions
   - This function is called multiple times during the factorial and combination calculations, contributing to the expensive computations.

3. **Lines 48-59 in the `solve` function:**
   - **Hit Counts:**
     - Slow: 214,651 times for the loop versus 181,242 times in the fast input.
   - The loop runs to calculate `add` for maintaining the sum condition, indicating potentially more iterations or complex calculations in the slow case.

### Phase 2: Derive Performance-Characterizing Invariants

From the analysis, we can infer the conditions where the code might slow down:

1. **Factorial Computation and Combinations:**
   - Natural Language Description: "When the input size `n` is large, particularly close to its upper limit of 200,000, the computation of factorials and combinations becomes expensive. This is exacerbated by repeated calls to compute combinations, especially when many are close in value to n/2."
   - **Trigger:** High values of `n`, requiring extensive factorial calculations.

2. **Repeated Modular Exponentiation:**
   - Natural Language Description: "If the computation involves frequent modular exponentiation, particularly with large exponents, the operations become costly. This is a major factor when computing large combinations or factorial inversions."
   - **Trigger:** Large factorial or combination calculations due to high `n`, especially when precision inversions are required.

3. **Loop Execution in `solve`:**
   - Natural Language Description: "The main loop in `solve` runs significantly longer when the boundary values `l` and `r` are far apart, particularly when the range size causes `k` to iterate many times. This results in prolonged computation of additional combinations."
   - **Trigger:** Wide range between `l` and `r` leading to a large number of iterations in the while loop.

### Concise Statements about Performance Triggers

1. If `n` is close to its maximum value and factorials are computed, the program may slow significantly due to the heavy computation required for large factorials and combinations.
2. When the function `pow_mod` is repeatedly called with large exponents, arising from frequent combination calculations, the performance might degrade substantially.
3. For a test case where the range `r - l` is large, the loop inside `solve` may iterate many times, leading to significant performance degradation.

These invariants are broad enough to detect potential slowdowns in future test cases and can assist in optimizing or analyzing the code further.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's call an integer array a_1, a_2, ..., a_n good if a_i ≠ i for each i.

Let F(a) be the number of pairs (i, j) (1 ≤ i < j ≤ n) such that a_i + a_j = i + j.

Let's say that an array a_1, a_2, ..., a_n is excellent if: 

  * a is good; 
  * l ≤ a_i ≤ r for each i; 
  * F(a) is the maximum possible among all good arrays of size n. 



Given n, l and r, calculate the number of excellent arrays modulo 10^9 + 7.

Input

The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. 

The first and only line of each test case contains three integers n, l, and r (2 ≤ n ≤ 2 ⋅ 10^5; -10^9 ≤ l ≤ 1; n ≤ r ≤ 10^9).

It's guaranteed that the sum of n doesn't exceed 2 ⋅ 10^5.

Output

For each test case, print the number of excellent arrays modulo 10^9 + 7.

Example

Input


4
3 0 3
4 -3 5
42 -33 55
69 -42 146


Output


4
10
143922563
698570404

Note

In the first test case, it can be proven that the maximum F(a) among all good arrays a is equal to 2. The excellent arrays are: 

  1. [2, 1, 2]; 
  2. [0, 3, 2]; 
  3. [2, 3, 2]; 
  4. [3, 0, 1]. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as C++ Code

Let's translate the previously derived natural language invariants into C++ checker code.

#### Invariant 1: Large `n` leading to expensive factorial and combination computations
```cpp
void check_factorial_invariant(int n) {
    if (n > 180000) {  // A threshold close to the upper limit
        cerr << "Warning: Performance bottleneck condition triggered due to large factorial computations!" << endl;
        abort();
    }
}
```

#### Invariant 2: Repeated modular exponentiation
```cpp
void check_modular_exponentiation_invariant(int exponent) {
    if (exponent > 1000000) {  // Arbitrary large value for the exponent
        cerr << "Warning: Performance bottleneck condition triggered due to repeated large modular exponentiations!" << endl;
        abort();
    }
}
```

#### Invariant 3: Wide range `r - l` causing prolonged loop execution
```cpp
void check_range_invariant(long long l, long long r) {
    if ((r - l) > 500000) {  // Wide range indicating potential slowdown
        cerr << "Warning: Performance bottleneck condition triggered due to wide range between l and r!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now, let's incorporate these checks into the original C++ code at appropriate locations to ensure they do not add significant overhead within tight loops.

```cpp
#include <bits/stdc++.h>

using namespace std;
using ll = long long;

class Combination2 {
    using T = unsigned long long;
    T MOD;
    vector<T> fact;
public :
    Combination2(int n, T MOD = 0)
    : MOD(MOD), fact(n+1) {
        fact[0] = 1;
        for(auto i = 1; i <= n; ++i) {
            fact[i] = fact[i-1] * i % MOD;
        }
    }

    T pow_mod(long long x, long long y, long long mod) {
        auto ret=1ll;
        while (y) {
            if (y % 2)
                ret = ret * x % mod;
            x =  x * x % mod;
            y /= 2;
        }
        return ret;
    }

    T nCr(int n, int r) {
        if (n < 0 || r > n || r < 0) return 0;
        return fact[n] * pow_mod(fact[n-r], MOD - 2, MOD) % MOD * pow_mod(fact[r], MOD - 2, MOD) % MOD;
    }
};

constexpr int MOD = 1e9 + 7;

// Checking invariants
void check_factorial_invariant(int n) {
    if (n > 180000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large factorial computations!" << endl;
        abort();
    }
}

void check_modular_exponentiation_invariant(int exponent) {
    if (exponent > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered due to repeated large modular exponentiations!" << endl;
        abort();
    }
}

void check_range_invariant(long long l, long long r) {
    if ((r - l) > 500000) {
        cerr << "Warning: Performance bottleneck condition triggered due to wide range between l and r!" << endl;
        abort();
    }
}

void solve(int TestCase) {
    ll n, l, r;
    cin >> n >> l >> r;

    // Check invariants before heavy computation
    check_factorial_invariant(n);
    check_range_invariant(l, r);

    Combination2 C(n, MOD);

    auto k = min(abs(l - 1), abs(r - n));
    ll ret = k * C.nCr(n, n / 2) % MOD;
    if(n % 2)
        ret = ret * 2 % MOD;

    while(true) {
        ++k;
        auto plus = max(1ll, l + k);
        auto minus = min(n, r - k);
        
        ll add = C.nCr(minus - plus + 1, n / 2 - (plus - 1));
        if(n % 2)
            add += C.nCr(minus - plus + 1, (n + 1) / 2 - (plus - 1));

        if(minus - plus + 1 < 0) break;

        ret = (ret + add) % MOD;
    }

    cout << ret << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int t = 1;
    cin >> t;
    for(auto i = 1; i <= t; ++i) {
        solve(i);
    }
}
```

**Comments:**
- **Factorial Invariant Check:** Added right after reading `n`, since this value is critical for checking factorial computation cost.
- **Modular Exponentiation Check:** Could be placed in `pow_mod` if needed to check repeatedly large exponents.
- **Range Check Invariant:** Added right after reading `l` and `r`, to avoid unnecessary loop executions if the range is too wide.

