system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's call an integer array a_1, a_2, ..., a_n good if a_i ≠ i for each i.

Let F(a) be the number of pairs (i, j) (1 ≤ i < j ≤ n) such that a_i + a_j = i + j.

Let's say that an array a_1, a_2, ..., a_n is excellent if: 

  * a is good; 
  * l ≤ a_i ≤ r for each i; 
  * F(a) is the maximum possible among all good arrays of size n. 



Given n, l and r, calculate the number of excellent arrays modulo 10^9 + 7.

Input

The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. 

The first and only line of each test case contains three integers n, l, and r (2 ≤ n ≤ 2 ⋅ 10^5; -10^9 ≤ l ≤ 1; n ≤ r ≤ 10^9).

It's guaranteed that the sum of n doesn't exceed 2 ⋅ 10^5.

Output

For each test case, print the number of excellent arrays modulo 10^9 + 7.

Example

Input


4
3 0 3
4 -3 5
42 -33 55
69 -42 146


Output


4
10
143922563
698570404

Note

In the first test case, it can be proven that the maximum F(a) among all good arrays a is equal to 2. The excellent arrays are: 

  1. [2, 1, 2]; 
  2. [0, 3, 2]; 
  3. [2, 3, 2]; 
  4. [3, 0, 1]. 

(F) Program Solving the Problem Statement

#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn=2e5+10;
const int mod=1e9+7;
ll fac[maxn];
void exgcd(ll a,ll b,ll &x,ll &y)
{
	if (!b)x=1,y=0;
	else
	{
		exgcd(b,a%b,x,y);
		ll t=x;
		x=y;
		y=t-a/b*y;
	}
}
ll inv(ll a)
{
	ll x,y;
	exgcd(a,mod,x,y);
	return (x%mod+mod)%mod;
}
void init()
{
    fac[0]=1;
    for(int i=1;i<maxn;i++)
        fac[i]=fac[i-1]*i,fac[i]%=mod;
}
ll C(int n,int m)
{
    return ((fac[n]*inv(fac[n-m]))%mod*inv(fac[m]))%mod;
}
int main()
{
    int t,n,l,r;
    init();
    cin>>t;
    while(t--)
    {
        cin>>n>>l>>r;
        int mi=min(1-l,r-n);
        int mx=max(1-l,r-n);
        ll ans=C(n,n/2)*mi;
        ans%=mod;
        if(n&1) ans=(ans*2)%mod;
        for(int i=1;i<=min(mx-mi,n/2);i++)
        {
            ans+=C(n-i,n/2),ans%=mod;
            if(n&1) ans+=C(n-i,n/2+1),ans%=mod;
        }
        for(int i=mx-mi+1;i<=n/2;i++)
        {
            ans+=C(n-i*2+mx-mi,n/2-i+mx-mi),ans%=mod;
            if(n&1) ans+=C(n-i*2+mx-mi,n/2+1-i+mx-mi),ans%=mod;
        }
        if(n&1)
        {
            int top=n/2+mi;
            int v=min(r-top-n/2,n/2+1-top-l);
            ans=(ans+max(0,v))%mod;
            v=min(r-top-n/2-1,n/2+2-top-l);
            ans=(ans+max(v,0))%mod;
        }
        else
        {
            int top=n/2+mi;
            int v=min(r-top-n/2,n/2+1-top-l);
            ans=(ans+max(0,v))%mod;
        }
        cout<<ans<<endl;
    }
    return 0;   
}

(G) The Slow & Fast Inputs

(G.1) Slow Input

10
34651 -93862270 597469643
20000 -13928452 414987414
20000 -472808872 367983694
20000 -84913058 517394906
20000 -949029500 8329318
20000 -720971736 526102810
20000 -416160739 748291750
20000 -665939649 743938438
20000 -80741314 634025883
20000 -824743396 43172618


(G.2) Fast Input

10
20000 -431912570 597469643
20000 -13928452 414987414
20000 -472808872 367983694
20000 -84913058 517394906
20000 -949029500 8329318
20000 -720971736 526102810
20000 -416160739 748291750
20000 -665939649 743938438
1242 -80741314 634025883
20000 -824743396 138091345


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include<bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
typedef long long ll; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int maxn=2e5+10; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const int mod=1e9+7; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
ll fac[maxn]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void exgcd(ll a,ll b,ll &x,ll &y) /* line 7 slow_hit_count: 5201443, fast_hit_count: 3621033 */
{ /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
	if (!b)x=1,y=0; /* line 9 slow_hit_count: 5201443, fast_hit_count: 3621033 */
	else /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
	{ /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
		exgcd(b,a%b,x,y); /* line 12 slow_hit_count: 4952123, fast_hit_count: 3439771 */
		ll t=x; /* line 13 slow_hit_count: 4952123, fast_hit_count: 3439771 */
		x=y; /* line 14 slow_hit_count: 4952123, fast_hit_count: 3439771 */
		y=t-a/b*y; /* line 15 slow_hit_count: 4952123, fast_hit_count: 3439771 */
	} /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 5201443, fast_hit_count: 3621033 */
ll inv(ll a) /* line 18 slow_hit_count: 249320, fast_hit_count: 181262 */
{ /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
	ll x,y; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
	exgcd(a,mod,x,y); /* line 21 slow_hit_count: 249320, fast_hit_count: 181262 */
	return (x%mod+mod)%mod; /* line 22 slow_hit_count: 249320, fast_hit_count: 181262 */
} /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
void init() /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
{ /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    fac[0]=1; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
    for(int i=1;i<maxn;i++) /* line 27 slow_hit_count: 200010, fast_hit_count: 200010 */
        fac[i]=fac[i-1]*i,fac[i]%=mod; /* line 28 slow_hit_count: 200009, fast_hit_count: 200009 */
} /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
ll C(int n,int m) /* line 30 slow_hit_count: 124660, fast_hit_count: 90631 */
{ /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
    return ((fac[n]*inv(fac[n-m]))%mod*inv(fac[m]))%mod; /* line 32 slow_hit_count: 124660, fast_hit_count: 90631 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
int main() /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
{ /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    int t,n,l,r; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    init(); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
    cin>>t; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
    while(t--) /* line 39 slow_hit_count: 11, fast_hit_count: 11 */
    { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
        cin>>n>>l>>r; /* line 41 slow_hit_count: 10, fast_hit_count: 10 */
        int mi=min(1-l,r-n); /* line 42 slow_hit_count: 10, fast_hit_count: 10 */
        int mx=max(1-l,r-n); /* line 43 slow_hit_count: 10, fast_hit_count: 10 */
        ll ans=C(n,n/2)*mi; /* line 44 slow_hit_count: 10, fast_hit_count: 10 */
        ans%=mod; /* line 45 slow_hit_count: 10, fast_hit_count: 10 */
        if(n&1) ans=(ans*2)%mod; /* line 46 slow_hit_count: 10, fast_hit_count: 10 */
        for(int i=1;i<=min(mx-mi,n/2);i++) /* line 47 slow_hit_count: 107335, fast_hit_count: 90631 */
        { /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
            ans+=C(n-i,n/2),ans%=mod; /* line 49 slow_hit_count: 107325, fast_hit_count: 90621 */
            if(n&1) ans+=C(n-i,n/2+1),ans%=mod; /* line 50 slow_hit_count: 107325, fast_hit_count: 90621 */
        } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
        for(int i=mx-mi+1;i<=n/2;i++) /* line 52 slow_hit_count: 10, fast_hit_count: 10 */
        { /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
            ans+=C(n-i*2+mx-mi,n/2-i+mx-mi),ans%=mod; /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
            if(n&1) ans+=C(n-i*2+mx-mi,n/2+1-i+mx-mi),ans%=mod; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
        if(n&1) /* line 57 slow_hit_count: 10, fast_hit_count: 10 */
        { /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
            int top=n/2+mi; /* line 59 slow_hit_count: 1, fast_hit_count: 0 */
            int v=min(r-top-n/2,n/2+1-top-l); /* line 60 slow_hit_count: 1, fast_hit_count: 0 */
            ans=(ans+max(0,v))%mod; /* line 61 slow_hit_count: 1, fast_hit_count: 0 */
            v=min(r-top-n/2-1,n/2+2-top-l); /* line 62 slow_hit_count: 1, fast_hit_count: 0 */
            ans=(ans+max(v,0))%mod; /* line 63 slow_hit_count: 1, fast_hit_count: 0 */
        } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
        else /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
        { /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
            int top=n/2+mi; /* line 67 slow_hit_count: 9, fast_hit_count: 10 */
            int v=min(r-top-n/2,n/2+1-top-l); /* line 68 slow_hit_count: 9, fast_hit_count: 10 */
            ans=(ans+max(0,v))%mod; /* line 69 slow_hit_count: 9, fast_hit_count: 10 */
        } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
        cout<<ans<<endl; /* line 71 slow_hit_count: 10, fast_hit_count: 10 */
    } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
    return 0;    /* line 73 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 74 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottlenecks and derive performance-characterizing invariants for the given C program, let's analyze the line-level hit counts and the code structure.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **High Hit Count Lines**: 
   - The function `exgcd` (lines 7-17) is hit significantly more often on the slow input compared to the fast input. This suggests that calculating the modular inverse using the extended Euclidean algorithm (`inv` function) is a performance-intensive task.
   - Specifically, line 12, which recursively calls `exgcd`, shows a high number of hits, indicating deep recursion or frequent calls.
   - The `C` function (lines 30-33) is associated with combinatorial calculations and relies on `inv`. This function also demonstrates a significant increase in hit counts for the slow input.

2. **Loop Analysis**:
   - The loop on line 47 is executed many more times on the slow input. This loop iterates up to `min(mx-mi, n/2)`, which suggests a larger range or value for `mx-mi` in the slow input scenario.
   - The combination calculations inside the loop (lines 49-50) are contributing to the performance overhead.

3. **Input Dependency**:
   - The slow input likely results in higher values of `mi` and `mx`, leading to more iterations and calculations.
   - Since the input constraints allow for large ranges between `l` and `r`, `mi` and `mx` can become large, increasing the work done in each test case.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, here are the performance-characterizing invariants:

1. **Combinatorial Explosion**:
   - **Invariant**: "When the difference between the minimum and maximum possible values (`mx - mi`) is large, especially nearing half of `n`, the program performs excessive combinatorial calculations leading to slow execution."
   - **Explanation**: The loop based on `mx-mi` results in many calls to the combination function `C`, which are computationally expensive due to the repeated calculation of modular inverses using `exgcd`.

2. **Modular Inversion Overhead**:
   - **Invariant**: "If the function to compute modular inverses is called a high number of times, especially within loops, the recursive nature of the function may lead to significant slowdowns."
   - **Explanation**: The `inv` function calls `exgcd`, which is recursive and can be costly if the input numbers require many reductions.

3. **Large Range Handling**:
   - **Invariant**: "When the range specified by `l` and `r` is broad compared to `n`, resulting in a high value of `mi`, the increased range results in many calculations to determine excellent arrays."
   - **Explanation**: A large range increases both the potential values for elements in the array and the complexity of ensuring all conditions of an excellent array are met.

These invariants help abstract the slow scenarios and can assist in predicting similar performance issues in future inputs without relying on specific numeric values from given slow inputs. They provide a framework to detect and possibly mitigate performance bottlenecks in related scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's call an integer array a_1, a_2, ..., a_n good if a_i ≠ i for each i.

Let F(a) be the number of pairs (i, j) (1 ≤ i < j ≤ n) such that a_i + a_j = i + j.

Let's say that an array a_1, a_2, ..., a_n is excellent if: 

  * a is good; 
  * l ≤ a_i ≤ r for each i; 
  * F(a) is the maximum possible among all good arrays of size n. 



Given n, l and r, calculate the number of excellent arrays modulo 10^9 + 7.

Input

The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. 

The first and only line of each test case contains three integers n, l, and r (2 ≤ n ≤ 2 ⋅ 10^5; -10^9 ≤ l ≤ 1; n ≤ r ≤ 10^9).

It's guaranteed that the sum of n doesn't exceed 2 ⋅ 10^5.

Output

For each test case, print the number of excellent arrays modulo 10^9 + 7.

Example

Input


4
3 0 3
4 -3 5
42 -33 55
69 -42 146


Output


4
10
143922563
698570404

Note

In the first test case, it can be proven that the maximum F(a) among all good arrays a is equal to 2. The excellent arrays are: 

  1. [2, 1, 2]; 
  2. [0, 3, 2]; 
  3. [2, 3, 2]; 
  4. [3, 0, 1]. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Performance-Characterizing Invariants in C++

Below are the C++ code snippets implementing the performance checks based on the natural language invariants derived earlier.

1. **Combinatorial Explosion Check**:
   ```cpp
   void check_combinatorial_explosion(int mx, int mi, int n) {
       if (mx - mi > n / 2) {
           cerr << "Warning: Combinatorial explosion detected - mx-mi exceeds half of n" << endl;
           abort();
       }
   }
   ```

2. **Modular Inversion Overhead Check**:
   ```cpp
   void check_modular_inversion_overhead(int inversion_call_count, int threshold) {
       if (inversion_call_count > threshold) {
           cerr << "Warning: Modular inversion overhead detected - excessive calls" << endl;
           abort();
       }
   }
   ```

3. **Large Range Handling Check**:
   ```cpp
   void check_large_range_handling(int mi, int n) {
       if (mi > n) {
           cerr << "Warning: Large range handling detected - mi exceeds n" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checks into the Original Program

Next, we integrate these checks into the original program, placing them at strategic points to detect potential performance bottlenecks.

```cpp
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int maxn=2e5+10;
const int mod=1e9+7;
ll fac[maxn];

// Function to check combinatorial explosion
void check_combinatorial_explosion(int mx, int mi, int n) {
    if (mx - mi > n / 2) {
        cerr << "Warning: Combinatorial explosion detected - mx-mi exceeds half of n" << endl;
        abort();
    }
}

// Function to check large range handling
void check_large_range_handling(int mi, int n) {
    if (mi > n) {
        cerr << "Warning: Large range handling detected - mi exceeds n" << endl;
        abort();
    }
}

void exgcd(ll a,ll b,ll &x,ll &y)
{
    if (!b)x=1,y=0;
    else
    {
        exgcd(b,a%b,x,y);
        ll t=x;
        x=y;
        y=t-a/b*y;
    }
}

ll inv(ll a)
{
    ll x,y;
    exgcd(a,mod,x,y);
    return (x%mod+mod)%mod;
}

void init()
{
    fac[0]=1;
    for(int i=1;i<maxn;i++)
        fac[i]=fac[i-1]*i,fac[i]%=mod;
}

ll C(int n,int m)
{
    return ((fac[n]*inv(fac[n-m]))%mod*inv(fac[m]))%mod;
}

int main()
{
    int t,n,l,r;
    init();
    cin>>t;
    while(t--)
    {
        cin>>n>>l>>r;
        int mi=min(1-l,r-n);
        int mx=max(1-l,r-n);

        // Check for large range handling
        check_large_range_handling(mi, n);

        // Check for combinatorial explosion
        check_combinatorial_explosion(mx, mi, n);
        
        ll ans=C(n,n/2)*mi;
        ans%=mod;
        if(n&1) ans=(ans*2)%mod;
        for(int i=1;i<=min(mx-mi,n/2);i++)
        {
            ans+=C(n-i,n/2),ans%=mod;
            if(n&1) ans+=C(n-i,n/2+1),ans%=mod;
        }
        for(int i=mx-mi+1;i<=n/2;i++)
        {
            ans+=C(n-i*2+mx-mi,n/2-i+mx-mi),ans%=mod;
            if(n&1) ans+=C(n-i*2+mx-mi,n/2+1-i+mx-mi),ans%=mod;
        }
        if(n&1)
        {
            int top=n/2+mi;
            int v=min(r-top-n/2,n/2+1-top-l);
            ans=(ans+max(0,v))%mod;
            v=min(r-top-n/2-1,n/2+2-top-l);
            ans=(ans+max(v,0))%mod;
        }
        else
        {
            int top=n/2+mi;
            int v=min(r-top-n/2,n/2+1-top-l);
            ans=(ans+max(0,v))%mod;
        }
        cout<<ans<<endl;
    }
    return 0;   
}
```

### Explanation
- **Combinatorial Explosion Check**: This is placed after calculating `mx` and `mi` to ensure that the loop won't iterate excessively, which could cause performance degradation.
- **Large Range Handling Check**: This verifies that the calculated `mi` does not exceed `n`, which helps prevent excessive computations due to large ranges.
- **Modular Inversion Overhead Check**: The count for modular inversion calls could be tracked, and the check can be placed if needed based on profiling detailed requirements. 

These checks are added at strategic points in the program to catch potential performance issues, without adding significant overhead during normal operations.

