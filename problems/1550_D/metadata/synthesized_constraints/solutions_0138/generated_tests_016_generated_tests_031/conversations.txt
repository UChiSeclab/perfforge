system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Let's call an integer array a_1, a_2, ..., a_n good if a_i ≠ i for each i.

Let F(a) be the number of pairs (i, j) (1 ≤ i < j ≤ n) such that a_i + a_j = i + j.

Let's say that an array a_1, a_2, ..., a_n is excellent if: 

  * a is good; 
  * l ≤ a_i ≤ r for each i; 
  * F(a) is the maximum possible among all good arrays of size n. 



Given n, l and r, calculate the number of excellent arrays modulo 10^9 + 7.

Input

The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. 

The first and only line of each test case contains three integers n, l, and r (2 ≤ n ≤ 2 ⋅ 10^5; -10^9 ≤ l ≤ 1; n ≤ r ≤ 10^9).

It's guaranteed that the sum of n doesn't exceed 2 ⋅ 10^5.

Output

For each test case, print the number of excellent arrays modulo 10^9 + 7.

Example

Input


4
3 0 3
4 -3 5
42 -33 55
69 -42 146


Output


4
10
143922563
698570404

Note

In the first test case, it can be proven that the maximum F(a) among all good arrays a is equal to 2. The excellent arrays are: 

  1. [2, 1, 2]; 
  2. [0, 3, 2]; 
  3. [2, 3, 2]; 
  4. [3, 0, 1]. 

(F) Program Solving the Problem Statement

#include <iostream>
#include <string>
#include <set>
#include <map>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <cmath>
#include <queue>
#include <sstream>
#include <ctime>
#include <iterator>
#include <string.h>
#include <stack>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <fstream>
#include <assert.h>

using namespace std;

long long MOD = 1e9 + 7;
long long fac[200500];

long long mult(long long a, long long b)
{
	return (a * b) % MOD;
}

long long add(long long a, long long b)
{
	return (a + b) % MOD;
}

long long sub(long long a, long long b)
{
	return (a - b + MOD) % MOD;
}

long long binpow(long long a, long long n)
{
	if (n == 0)
		return  1;
	if (n % 2)
		return mult(a, binpow(a, n - 1));
	long long b = binpow(a, n / 2);
	return mult(b, b);
}

long long inv(long long x)
{
	return binpow(x, MOD - 2);
}


void prec()
{
	fac[0] = 1;
	for (size_t i = 1; i < 200400; i++)
	{
		fac[i] = mult(fac[i - 1], i);
	}
}

long long C(int n, int k)
{
	return mult(fac[n], inv(mult(fac[k], fac[n - k])));
}

void solve()
{
	int n, l, r;
	cin >> n >> l >> r;
	long long ans = 0;
	long long f = C(n, n / 2);
	if(n&1)
		f = mult(f, 2);
	int g = min(1-l, r - n);
	int lx = 1 - g, rx = n + g;
	int cnt1 = 0, cnt2 = 0;
	ans += mult(f, g);
	for (long long diff = g + 1; ; diff++)
	{
		long long ma = n + diff;
		long long mi = 1 - diff;
		long long badl = max(0ll, diff - (1-l));
		long long badr = max(0ll, diff - (r-n));
		int h = n - badl - badr;
		if (n%2==0 && (badr > n / 2 || badl > n / 2))
			break;
		if (n & 1 && (badr > n / 2 || badl > n / 2))
		{
			if (badr == badl)
				break;
			badr = max(badr, badl);
			if (badr - 1 != n / 2)
				break;
		}
		if (h < 0)
			break;
		else
		{
			if (n % 2 == 0)
			{
				int q = n / 2;
				q -= badr;
				ans = add(ans, C(h, q));
			}
			else
			{
				int q = n / 2;
				q -= badr;
				ans = add(ans, C(h, q));
				ans = add(ans, C(h, q+1));
			}
		}

	}
	cout << ans << endl;
}


int main()
{
	prec();
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	int t = 1;
	cin >> t;
	while (t--)
	{
		solve();
	}
}

(G) The Slow & Fast Inputs

(G.1) Slow Input

10
34651 -93862270 597469643
20000 -13928452 414987414
20000 -472808872 367983694
20000 -84913058 517394906
20000 -949029500 8329318
20000 -720971736 526102810
20000 -416160739 748291750
20000 -665939649 743938438
20000 -80741314 634025883
20000 -824743396 43172618


(G.2) Fast Input

10
20000 -431912570 597469643
20000 -13928452 414987414
20000 -472808872 367983694
20000 -84913058 517394906
20000 -949029500 8329318
20000 -720971736 526102810
20000 -416160739 748291750
20000 -665939649 743938438
1242 -80741314 634025883
20000 -824743396 138091345


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <iostream> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
#include <string> /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
#include <set> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
#include <map> /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
#include <algorithm> /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
#include <iomanip> /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
#include <vector> /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
#include <cmath> /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
#include <queue> /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
#include <sstream> /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
#include <ctime> /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
#include <iterator> /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
#include <string.h> /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
#include <stack> /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
#include <unordered_set> /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
#include <unordered_map> /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
#include <bitset> /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
#include <fstream> /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
#include <assert.h> /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
long long MOD = 1e9 + 7; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
long long fac[200500]; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
long long mult(long long a, long long b) /* line 26 slow_hit_count: 5934862, fast_hit_count: 4369435 */
{ /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
	return (a * b) % MOD; /* line 28 slow_hit_count: 5934862, fast_hit_count: 4369435 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
long long add(long long a, long long b) /* line 31 slow_hit_count: 124652, fast_hit_count: 90621 */
{ /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
	return (a + b) % MOD; /* line 33 slow_hit_count: 124652, fast_hit_count: 90621 */
} /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
long long sub(long long a, long long b) /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
{ /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
	return (a - b + MOD) % MOD; /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
long long binpow(long long a, long long n) /* line 41 slow_hit_count: 5609790, fast_hit_count: 4078395 */
{ /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
	if (n == 0) /* line 43 slow_hit_count: 5609790, fast_hit_count: 4078395 */
		return  1; /* line 44 slow_hit_count: 124662, fast_hit_count: 90631 */
	if (n % 2) /* line 45 slow_hit_count: 5485128, fast_hit_count: 3987764 */
		return mult(a, binpow(a, n - 1)); /* line 46 slow_hit_count: 1869930, fast_hit_count: 1359465 */
	long long b = binpow(a, n / 2); /* line 47 slow_hit_count: 3615198, fast_hit_count: 2628299 */
	return mult(b, b); /* line 48 slow_hit_count: 3615198, fast_hit_count: 2628299 */
} /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
long long inv(long long x) /* line 51 slow_hit_count: 124662, fast_hit_count: 90631 */
{ /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
	return binpow(x, MOD - 2); /* line 53 slow_hit_count: 124662, fast_hit_count: 90631 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
void prec() /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
{ /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
	fac[0] = 1; /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
	for (size_t i = 1; i < 200400; i++) /* line 60 slow_hit_count: 200400, fast_hit_count: 200400 */
	{ /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
		fac[i] = mult(fac[i - 1], i); /* line 62 slow_hit_count: 200399, fast_hit_count: 200399 */
	} /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
 /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
long long C(int n, int k) /* line 66 slow_hit_count: 124662, fast_hit_count: 90631 */
{ /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
	return mult(fac[n], inv(mult(fac[k], fac[n - k]))); /* line 68 slow_hit_count: 124662, fast_hit_count: 90631 */
} /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
void solve() /* line 71 slow_hit_count: 10, fast_hit_count: 10 */
{ /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
	int n, l, r; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
	cin >> n >> l >> r; /* line 74 slow_hit_count: 10, fast_hit_count: 10 */
	long long ans = 0; /* line 75 slow_hit_count: 10, fast_hit_count: 10 */
	long long f = C(n, n / 2); /* line 76 slow_hit_count: 10, fast_hit_count: 10 */
	if(n&1) /* line 77 slow_hit_count: 10, fast_hit_count: 10 */
		f = mult(f, 2); /* line 78 slow_hit_count: 1, fast_hit_count: 0 */
	int g = min(1-l, r - n); /* line 79 slow_hit_count: 10, fast_hit_count: 10 */
	int lx = 1 - g, rx = n + g; /* line 80 slow_hit_count: 10, fast_hit_count: 10 */
	int cnt1 = 0, cnt2 = 0; /* line 81 slow_hit_count: 10, fast_hit_count: 10 */
	ans += mult(f, g); /* line 82 slow_hit_count: 10, fast_hit_count: 10 */
	for (long long diff = g + 1; ; diff++) /* line 83 slow_hit_count: 10, fast_hit_count: 10 */
	{ /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
		long long ma = n + diff; /* line 85 slow_hit_count: 107336, fast_hit_count: 90631 */
		long long mi = 1 - diff; /* line 86 slow_hit_count: 107336, fast_hit_count: 90631 */
		long long badl = max(0ll, diff - (1-l)); /* line 87 slow_hit_count: 107336, fast_hit_count: 90631 */
		long long badr = max(0ll, diff - (r-n)); /* line 88 slow_hit_count: 107336, fast_hit_count: 90631 */
		int h = n - badl - badr; /* line 89 slow_hit_count: 107336, fast_hit_count: 90631 */
		if (n%2==0 && (badr > n / 2 || badl > n / 2)) /* line 90 slow_hit_count: 107336, fast_hit_count: 90631 */
			break; /* line 91 slow_hit_count: 0, fast_hit_count: 0 */
		if (n & 1 && (badr > n / 2 || badl > n / 2)) /* line 92 slow_hit_count: 107327, fast_hit_count: 90621 */
		{ /* line 93 slow_hit_count: 0, fast_hit_count: 0 */
			if (badr == badl) /* line 94 slow_hit_count: 2, fast_hit_count: 0 */
				break; /* line 95 slow_hit_count: 0, fast_hit_count: 0 */
			badr = max(badr, badl); /* line 96 slow_hit_count: 2, fast_hit_count: 0 */
			if (badr - 1 != n / 2) /* line 97 slow_hit_count: 2, fast_hit_count: 0 */
				break; /* line 98 slow_hit_count: 1, fast_hit_count: 0 */
		} /* line 99 slow_hit_count: 0, fast_hit_count: 0 */
		if (h < 0) /* line 100 slow_hit_count: 107326, fast_hit_count: 90621 */
			break; /* line 101 slow_hit_count: 0, fast_hit_count: 0 */
		else /* line 102 slow_hit_count: 0, fast_hit_count: 0 */
		{ /* line 103 slow_hit_count: 0, fast_hit_count: 0 */
			if (n % 2 == 0) /* line 104 slow_hit_count: 107326, fast_hit_count: 90621 */
			{ /* line 105 slow_hit_count: 0, fast_hit_count: 0 */
				int q = n / 2; /* line 106 slow_hit_count: 90000, fast_hit_count: 90621 */
				q -= badr; /* line 107 slow_hit_count: 90000, fast_hit_count: 90621 */
				ans = add(ans, C(h, q)); /* line 108 slow_hit_count: 90000, fast_hit_count: 90621 */
			} /* line 109 slow_hit_count: 0, fast_hit_count: 0 */
			else /* line 110 slow_hit_count: 0, fast_hit_count: 0 */
			{ /* line 111 slow_hit_count: 0, fast_hit_count: 0 */
				int q = n / 2; /* line 112 slow_hit_count: 17326, fast_hit_count: 0 */
				q -= badr; /* line 113 slow_hit_count: 17326, fast_hit_count: 0 */
				ans = add(ans, C(h, q)); /* line 114 slow_hit_count: 17326, fast_hit_count: 0 */
				ans = add(ans, C(h, q+1)); /* line 115 slow_hit_count: 17326, fast_hit_count: 0 */
			} /* line 116 slow_hit_count: 0, fast_hit_count: 0 */
		} /* line 117 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 118 slow_hit_count: 0, fast_hit_count: 0 */
	} /* line 119 slow_hit_count: 107326, fast_hit_count: 90621 */
	cout << ans << endl; /* line 120 slow_hit_count: 10, fast_hit_count: 10 */
} /* line 121 slow_hit_count: 10, fast_hit_count: 10 */
 /* line 122 slow_hit_count: 0, fast_hit_count: 0 */
 /* line 123 slow_hit_count: 0, fast_hit_count: 0 */
int main() /* line 124 slow_hit_count: 1, fast_hit_count: 1 */
{ /* line 125 slow_hit_count: 0, fast_hit_count: 0 */
	prec(); /* line 126 slow_hit_count: 1, fast_hit_count: 1 */
	ios_base::sync_with_stdio(0); /* line 127 slow_hit_count: 1, fast_hit_count: 1 */
	cin.tie(0); /* line 128 slow_hit_count: 1, fast_hit_count: 1 */
	int t = 1; /* line 129 slow_hit_count: 1, fast_hit_count: 1 */
	cin >> t; /* line 130 slow_hit_count: 1, fast_hit_count: 1 */
	while (t--) /* line 131 slow_hit_count: 11, fast_hit_count: 11 */
	{ /* line 132 slow_hit_count: 0, fast_hit_count: 0 */
		solve(); /* line 133 slow_hit_count: 10, fast_hit_count: 10 */
	} /* line 134 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 135 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze and diagnose the performance bottlenecks in the given C program for the problem statement described, let's break it down into two phases as per your requirements.

### Phase 1: Identifying Inefficient Code Segments

1. **Compare Line-Level Hit Counts**:
   - The `mult()` function (lines 26-28) is hit significantly more often in the slow run (5,934,862 hits) compared to the fast run (4,369,435 hits).
   - The function `binpow()` (lines 41-49) is also more frequently hit in the slow input (5,609,790 hits) than the fast input (4,078,395 hits).
   - The loop starting at line 83 has a higher number of iterations for the slow input, with checks at lines 85-89 being hit significantly more often.
   - The condition checks and updates within this loop at lines 104-115 are also subject to higher hit counts in the slow run.

2. **Inferring Interactions**:
   - The excessive hits in `mult()` and `binpow()` suggest repeated calculations, likely exacerbated by the recursive nature of `binpow()`.
   - The loop starting at line 83 potentially processes a larger range of `diff` values under certain conditions, leading to more operations.
   - The condition checks within the loop play a crucial role in determining when to break, indicating that certain input configurations lead to prolonged looping.

### Phase 2: Deriving Performance-Characterizing Invariants

Based on the analysis, here are some natural language performance invariants:

1. **Invariant 1: Recursive Power Calculation**
   - **Description**: "If the recursion depth for calculating power in `binpow()` becomes large due to the size of the exponent, the program performance is significantly affected. This is likely when `n` approaches its upper constraint and specific configurations of `l` and `r` lead to extensive calculations."
   - **Potential Check**: Monitor the size of the exponent in `binpow()` and the frequency of its calls.

2. **Invariant 2: Extensive Loop Iterations**
   - **Description**: "When the loop that calculates potential excellent arrays `diff` spans a wide range due to the imposed limits and configurations of `l` and `r`, the program may slow down considerably. This is particularly noticeable if both `badl` and `badr` are minimized through specific input patterns."
   - **Potential Check**: Observe the range of `diff` and conditions where `badl` and `badr` allow maximum iterations.

3. **Invariant 3: Combinatorial Explosion**
   - **Description**: "The performance is affected when the number of combinations (`C(h, q)`) to evaluate becomes large, especially when `h` is minimized by input constraints, leading to more complex calculations within the loop."
   - **Potential Check**: Evaluate the values of `h` and how they influence the number of combinations calculated.

These invariants reflect conditions inducing slow performance without using specific numeric values from the slow input, ensuring broader applicability for detecting potential slow scenarios in the future.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Let's call an integer array a_1, a_2, ..., a_n good if a_i ≠ i for each i.

Let F(a) be the number of pairs (i, j) (1 ≤ i < j ≤ n) such that a_i + a_j = i + j.

Let's say that an array a_1, a_2, ..., a_n is excellent if: 

  * a is good; 
  * l ≤ a_i ≤ r for each i; 
  * F(a) is the maximum possible among all good arrays of size n. 



Given n, l and r, calculate the number of excellent arrays modulo 10^9 + 7.

Input

The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. 

The first and only line of each test case contains three integers n, l, and r (2 ≤ n ≤ 2 ⋅ 10^5; -10^9 ≤ l ≤ 1; n ≤ r ≤ 10^9).

It's guaranteed that the sum of n doesn't exceed 2 ⋅ 10^5.

Output

For each test case, print the number of excellent arrays modulo 10^9 + 7.

Example

Input


4
3 0 3
4 -3 5
42 -33 55
69 -42 146


Output


4
10
143922563
698570404

Note

In the first test case, it can be proven that the maximum F(a) among all good arrays a is equal to 2. The excellent arrays are: 

  1. [2, 1, 2]; 
  2. [0, 3, 2]; 
  3. [2, 3, 2]; 
  4. [3, 0, 1]. 

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariants as Checker Code

Based on the natural language invariants derived earlier, here are the C++ code snippets to check these conditions at runtime:

#### Invariant 1: Recursive Power Calculation
```cpp
void check_binpow_invariant(long long n) {
    if (n > /* some threshold, e.g., */ 100000) {
        cerr << "Warning: binpow_invariant triggered - large exponent affecting recursion depth" << endl;
        abort();
    }
}
```

#### Invariant 2: Extensive Loop Iterations
```cpp
void check_diff_invariant(long long g, long long n) {
    if ((n - (g + 1)) > /* some threshold, e.g., */ 100000) {
        cerr << "Warning: diff_invariant triggered - extensive loop iterations due to large g" << endl;
        abort();
    }
}
```

#### Invariant 3: Combinatorial Explosion
```cpp
void check_combinatorial_invariant(long long h) {
    if (h > /* some threshold, e.g., */ 100000) {
        cerr << "Warning: combinatorial_invariant triggered - excessive number of combinations" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now, we will integrate these checkers into the provided C++ solution. Each checker will be placed at a suitable location in the code such that it monitors conditions without adding overhead to tight loops:

```cpp
#include <iostream>
#include <string>
#include <set>
#include <map>
#include <algorithm>
#include <iomanip>
#include <vector>
#include <cmath>
#include <queue>
#include <sstream>
#include <ctime>
#include <iterator>
#include <string.h>
#include <stack>
#include <unordered_set>
#include <unordered_map>
#include <bitset>
#include <fstream>
#include <assert.h>

using namespace std;

long long MOD = 1e9 + 7;
long long fac[200500];

long long mult(long long a, long long b)
{
    return (a * b) % MOD;
}

long long add(long long a, long long b)
{
    return (a + b) % MOD;
}

long long sub(long long a, long long b)
{
    return (a - b + MOD) % MOD;
}

long long binpow(long long a, long long n)
{
    // Check for recursive power calculation bottleneck
    check_binpow_invariant(n);

    if (n == 0)
        return  1;
    if (n % 2)
        return mult(a, binpow(a, n - 1));
    long long b = binpow(a, n / 2);
    return mult(b, b);
}

long long inv(long long x)
{
    return binpow(x, MOD - 2);
}

void prec()
{
    fac[0] = 1;
    for (size_t i = 1; i < 200400; i++)
    {
        fac[i] = mult(fac[i - 1], i);
    }
}

long long C(int n, int k)
{
    return mult(fac[n], inv(mult(fac[k], fac[n - k])));
}

void solve()
{
    int n, l, r;
    cin >> n >> l >> r;
    long long ans = 0;
    long long f = C(n, n / 2);
    if(n&1)
        f = mult(f, 2);
    int g = min(1-l, r - n);
    int lx = 1 - g, rx = n + g;
    int cnt1 = 0, cnt2 = 0;
    ans += mult(f, g);

    // Check for extensive loop iterations
    check_diff_invariant(g, n);

    for (long long diff = g + 1; ; diff++)
    {
        long long ma = n + diff;
        long long mi = 1 - diff;
        long long badl = max(0ll, diff - (1-l));
        long long badr = max(0ll, diff - (r-n));
        int h = n - badl - badr;

        // Check for combinatorial explosion
        check_combinatorial_invariant(h);

        if (n%2==0 && (badr > n / 2 || badl > n / 2))
            break;
        if (n & 1 && (badr > n / 2 || badl > n / 2))
        {
            if (badr == badl)
                break;
            badr = max(badr, badl);
            if (badr - 1 != n / 2)
                break;
        }
        if (h < 0)
            break;
        else
        {
            if (n % 2 == 0)
            {
                int q = n / 2;
                q -= badr;
                ans = add(ans, C(h, q));
            }
            else
            {
                int q = n / 2;
                q -= badr;
                ans = add(ans, C(h, q));
                ans = add(ans, C(h, q+1));
            }
        }
    }
    cout << ans << endl;
}

int main()
{
    prec();
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t = 1;
    cin >> t;
    while (t--)
    {
        solve();
    }
}
```

### Explanation

- **`check_binpow_invariant`**: Ensures that recursion depth in `binpow()` does not exceed an acceptable level.
- **`check_diff_invariant`**: Monitors the potential extent of the loop controlled by `diff`, triggering a warning if too many iterations are possible.
- **`check_combinatorial_invariant`**: Ensures that the number of combinations to be evaluated does not grow too large, leading to performance issues. 

These checks are strategically placed to capture bottleneck conditions without unnecessary overhead in tight loops.

