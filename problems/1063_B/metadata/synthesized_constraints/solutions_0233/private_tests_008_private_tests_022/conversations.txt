system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You are playing some computer game. One of its levels puts you in a maze consisting of n lines, each of which contains m cells. Each cell either is free or is occupied by an obstacle. The starting cell is in the row r and column c. In one step you can move one square up, left, down or right, if the target cell is not occupied by an obstacle. You can't move beyond the boundaries of the labyrinth.

Unfortunately, your keyboard is about to break, so you can move left no more than x times and move right no more than y times. There are no restrictions on the number of moves up and down since the keys used to move up and down are in perfect condition.

Now you would like to determine for each cell whether there exists a sequence of moves that will put you from the starting cell to this particular one. How many cells of the board have this property?

Input

The first line contains two integers n, m (1 ≤ n, m ≤ 2000) — the number of rows and the number columns in the labyrinth respectively.

The second line contains two integers r, c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — index of the row and index of the column that define the starting cell.

The third line contains two integers x, y (0 ≤ x, y ≤ 109) — the maximum allowed number of movements to the left and to the right respectively.

The next n lines describe the labyrinth. Each of them has length of m and consists only of symbols '.' and '*'. The j-th character of the i-th line corresponds to the cell of labyrinth at row i and column j. Symbol '.' denotes the free cell, while symbol '*' denotes the cell with an obstacle.

It is guaranteed, that the starting cell contains no obstacles.

Output

Print exactly one integer — the number of cells in the labyrinth, which are reachable from starting cell, including the starting cell itself.

Examples

Input

4 5
3 2
1 2
.....
.***.
...**
*....


Output

10


Input

4 4
2 2
0 1
....
..*.
....
....


Output

7

Note

Cells, reachable in the corresponding example, are marked with '+'.

First example: 
    
    
      
    +++..  
    +***.  
    +++**  
    *+++.  
    

Second example: 
    
    
      
    .++.  
    .+*.  
    .++.  
    .++.  
    

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
const double PI =
    3.141592653589793238462643383279502884197169399375105820974944;
using namespace std;
char a[2001][2001];
vector<pair<long long, long long> > dp[2001];
int x, y, r, c, n, m;
bool visited[2001][2001];
void bfs(int r, int c) {
  deque<pair<long long, long long> > q;
  q.push_front({r, c});
  while (!q.empty()) {
    pair<long long, long long> xx = q[0];
    q.pop_front();
    r = xx.first;
    c = xx.second;
    if (c - 1 >= 0 && a[r][c - 1] == '.' && !visited[r][c - 1] &&
        dp[r][c].first + 1 <= x) {
      dp[r][c - 1].first = dp[r][c].first + 1;
      dp[r][c - 1].second = dp[r][c].second;
      visited[r][c - 1] = true;
      q.push_back({r, c - 1});
    }
    if (c + 1 < m && a[r][c + 1] == '.' && !visited[r][c + 1] &&
        dp[r][c].second + 1 <= y) {
      dp[r][c + 1].first = dp[r][c].first;
      dp[r][c + 1].second = dp[r][c].second + 1;
      visited[r][c + 1] = true;
      q.push_back({r, c + 1});
    }
    if (r - 1 >= 0 && a[r - 1][c] == '.' && !visited[r - 1][c]) {
      dp[r - 1][c] = dp[r][c];
      visited[r - 1][c] = true;
      q.push_front({r - 1, c});
    }
    if (r + 1 < n && a[r + 1][c] == '.' && !visited[r + 1][c]) {
      dp[r + 1][c] = dp[r][c];
      visited[r + 1][c] = true;
      q.push_front({r + 1, c});
    }
  }
}
void solve() {
  cin >> n >> m;
  cin >> r >> c;
  cin >> x >> y;
  for (long long i = 0; i < n; ++i) {
    for (long long j = 0; j < m; ++j) {
      dp[i].resize(2001);
      cin >> a[i][j];
    }
  }
  visited[r - 1][c - 1] = true;
  bfs(r - 1, c - 1);
  int ans = 0;
  for (long long i = 0; i < n; ++i) {
    for (long long j = 0; j < m; ++j) {
      ans += (visited[i][j] == true);
    }
  }
  cout << ans << "\n";
}
int main() {
  bool testing = false;
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  if (testing) {
    freopen("test.txt", "rt", stdin);
    int start = clock();
    solve();
    int end = clock();
    cout << "time: " << (end - start) / (double)(CLOCKS_PER_SEC)*1000
         << " milliseconds\n";
  } else {
    solve();
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

15 8
1 1
4 7
........
.******.
.*......
.**.****
.**.****
.**.****
.**.****
.**.****
.**.****
.**.****
.**.****
.**.****
.**.****
.**.****
....****


(G.2) Fast Input

1 7
1 1
0 3
.......


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
const double PI = /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
    3.141592653589793238462643383279502884197169399375105820974944; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
char a[2001][2001]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<long long, long long> > dp[2001]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int x, y, r, c, n, m; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
bool visited[2001][2001]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
void bfs(int r, int c) { /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  deque<pair<long long, long long> > q; /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
  q.push_front({r, c}); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  while (!q.empty()) { /* line 12 slow_hit_count: 44, fast_hit_count: 5 */
    pair<long long, long long> xx = q[0]; /* line 13 slow_hit_count: 43, fast_hit_count: 4 */
    q.pop_front(); /* line 14 slow_hit_count: 43, fast_hit_count: 4 */
    r = xx.first; /* line 15 slow_hit_count: 43, fast_hit_count: 4 */
    c = xx.second; /* line 16 slow_hit_count: 43, fast_hit_count: 4 */
    if (c - 1 >= 0 && a[r][c - 1] == '.' && !visited[r][c - 1] && /* line 17 slow_hit_count: 44, fast_hit_count: 4 */
        dp[r][c].first + 1 <= x) { /* line 18 slow_hit_count: 1, fast_hit_count: 0 */
      dp[r][c - 1].first = dp[r][c].first + 1; /* line 19 slow_hit_count: 1, fast_hit_count: 0 */
      dp[r][c - 1].second = dp[r][c].second; /* line 20 slow_hit_count: 1, fast_hit_count: 0 */
      visited[r][c - 1] = true; /* line 21 slow_hit_count: 1, fast_hit_count: 0 */
      q.push_back({r, c - 1}); /* line 22 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    if (c + 1 < m && a[r][c + 1] == '.' && !visited[r][c + 1] && /* line 24 slow_hit_count: 57, fast_hit_count: 8 */
        dp[r][c].second + 1 <= y) { /* line 25 slow_hit_count: 14, fast_hit_count: 4 */
      dp[r][c + 1].first = dp[r][c].first; /* line 26 slow_hit_count: 14, fast_hit_count: 3 */
      dp[r][c + 1].second = dp[r][c].second + 1; /* line 27 slow_hit_count: 14, fast_hit_count: 3 */
      visited[r][c + 1] = true; /* line 28 slow_hit_count: 14, fast_hit_count: 3 */
      q.push_back({r, c + 1}); /* line 29 slow_hit_count: 14, fast_hit_count: 3 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    if (r - 1 >= 0 && a[r - 1][c] == '.' && !visited[r - 1][c]) { /* line 31 slow_hit_count: 43, fast_hit_count: 4 */
      dp[r - 1][c] = dp[r][c]; /* line 32 slow_hit_count: 12, fast_hit_count: 0 */
      visited[r - 1][c] = true; /* line 33 slow_hit_count: 12, fast_hit_count: 0 */
      q.push_front({r - 1, c}); /* line 34 slow_hit_count: 12, fast_hit_count: 0 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    if (r + 1 < n && a[r + 1][c] == '.' && !visited[r + 1][c]) { /* line 36 slow_hit_count: 43, fast_hit_count: 4 */
      dp[r + 1][c] = dp[r][c]; /* line 37 slow_hit_count: 15, fast_hit_count: 0 */
      visited[r + 1][c] = true; /* line 38 slow_hit_count: 15, fast_hit_count: 0 */
      q.push_front({r + 1, c}); /* line 39 slow_hit_count: 15, fast_hit_count: 0 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
void solve() { /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> r >> c; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> x >> y; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; ++i) { /* line 47 slow_hit_count: 16, fast_hit_count: 2 */
    for (long long j = 0; j < m; ++j) { /* line 48 slow_hit_count: 135, fast_hit_count: 8 */
      dp[i].resize(2001); /* line 49 slow_hit_count: 120, fast_hit_count: 7 */
      cin >> a[i][j]; /* line 50 slow_hit_count: 120, fast_hit_count: 7 */
    } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  visited[r - 1][c - 1] = true; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  bfs(r - 1, c - 1); /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 0; /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 0; i < n; ++i) { /* line 56 slow_hit_count: 16, fast_hit_count: 2 */
    for (long long j = 0; j < m; ++j) { /* line 57 slow_hit_count: 135, fast_hit_count: 8 */
      ans += (visited[i][j] == true); /* line 58 slow_hit_count: 120, fast_hit_count: 7 */
    } /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << "\n"; /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  bool testing = false; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  if (testing) { /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
    freopen("test.txt", "rt", stdin); /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    int start = clock(); /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    solve(); /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
    int end = clock(); /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "time: " << (end - start) / (double)(CLOCKS_PER_SEC)*1000 /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
         << " milliseconds\n"; /* line 74 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
    solve(); /* line 76 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 78 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the provided hit count information, we can make the following observations:

1. **Line 12 (`while (!q.empty())`)**: This line, which marks the start of the BFS loop, is hit significantly more often in the slow input (44 times) compared to the fast input (5 times). This indicates that the BFS process is iterating substantially more times for the slow input.

2. **Lines 17 (`if (c - 1 >= 0 && a[r][c - 1] == '.' && !visited[r][c - 1] && dp[r][c].first + 1 <= x)`) and 24 (`if (c + 1 < m && a[r][c + 1] == '.' && !visited[r][c + 1] && dp[r][c].second + 1 <= y)`)**: These lines check the conditions for moving left and right, respectively. The line 24 check is hit more frequently, which suggests more exploration in the right direction compared to other directions, given the constraints.

3. **Lines 31 (`if (r - 1 >= 0 && a[r - 1][c] == '.' && !visited[r - 1][c])`) and 36 (`if (r + 1 < n && a[r + 1][c] == '.' && !visited[r + 1][c])`)**: These lines handle upward and downward movements, which occur more frequently due to the lack of restrictions on these moves.

4. The BFS exploration appears to be slowed down due to particular configurations of obstacles and the constraints on lateral moves (left and right).

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, here are performance-characterizing invariants:

1. **Obstacle Configuration and Path Exploration**:
   - Natural Language Invariant: "If the maze contains narrow passages or paths with numerous obstacles that force repeated expansions in the BFS queue, the program's performance may degrade. This is especially true if such passages cause the BFS to revisit many nodes to explore alternative routes around obstacles."

2. **Movement Constraints and Direction Bias**:
   - Natural Language Invariant: "The program may slow down significantly if the number of cells that can be reached with the given left (`x`) and right (`y`) constraints requires many exploratory steps in the BFS. This is particularly evident when the starting position is near a maze boundary or surrounded by obstacles, forcing extensive traversal to find valid paths."

3. **Queue Management and BFS Depth**:
   - Natural Language Invariant: "When the BFS algorithm requires processing a large number of nodes due to limited lateral movement combined with high vertical mobility, it results in a deeper and broader search. This can dramatically slow down the program, especially when the BFS queue frequently expands and retracts due to obstacles."

Overall, these invariants suggest that the configuration of obstacles, the BFS search pattern, and the constraints on horizontal movement critically affect performance. Adjusting how the BFS handles these scenarios, possibly by prioritizing certain paths or optimizing queue operations, could improve efficiency.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You are playing some computer game. One of its levels puts you in a maze consisting of n lines, each of which contains m cells. Each cell either is free or is occupied by an obstacle. The starting cell is in the row r and column c. In one step you can move one square up, left, down or right, if the target cell is not occupied by an obstacle. You can't move beyond the boundaries of the labyrinth.

Unfortunately, your keyboard is about to break, so you can move left no more than x times and move right no more than y times. There are no restrictions on the number of moves up and down since the keys used to move up and down are in perfect condition.

Now you would like to determine for each cell whether there exists a sequence of moves that will put you from the starting cell to this particular one. How many cells of the board have this property?

Input

The first line contains two integers n, m (1 ≤ n, m ≤ 2000) — the number of rows and the number columns in the labyrinth respectively.

The second line contains two integers r, c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — index of the row and index of the column that define the starting cell.

The third line contains two integers x, y (0 ≤ x, y ≤ 109) — the maximum allowed number of movements to the left and to the right respectively.

The next n lines describe the labyrinth. Each of them has length of m and consists only of symbols '.' and '*'. The j-th character of the i-th line corresponds to the cell of labyrinth at row i and column j. Symbol '.' denotes the free cell, while symbol '*' denotes the cell with an obstacle.

It is guaranteed, that the starting cell contains no obstacles.

Output

Print exactly one integer — the number of cells in the labyrinth, which are reachable from starting cell, including the starting cell itself.

Examples

Input

4 5
3 2
1 2
.....
.***.
...**
*....


Output

10


Input

4 4
2 2
0 1
....
..*.
....
....


Output

7

Note

Cells, reachable in the corresponding example, are marked with '+'.

First example: 
    
    
      
    +++..  
    +***.  
    +++**  
    *+++.  
    

Second example: 
    
    
      
    .++.  
    .+*.  
    .++.  
    .++.  
    

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the runtime checks implemented in C++ for the natural language invariants identified in Phase 2.

1. **Obstacle Configuration and Path Exploration**:
   ```cpp
   void check_obstacle_configuration(const deque<pair<long long, long long>>& q, int threshold) {
       if (q.size() > threshold) {
           cerr << "Warning: Performance bottleneck triggered due to narrow passage or many obstacles!" << endl;
           abort();
       }
   }
   ```

2. **Movement Constraints and Direction Bias**:
   ```cpp
   void check_movement_constraints(int leftMoves, int rightMoves, int x, int y) {
       if (leftMoves > x || rightMoves > y) {
           cerr << "Warning: Performance bottleneck triggered due to movement constraint violations!" << endl;
           abort();
       }
   }
   ```

3. **Queue Management and BFS Depth**:
   ```cpp
   void check_bfs_depth(int currentDepth, int maxDepth) {
       if (currentDepth > maxDepth) {
           cerr << "Warning: Performance bottleneck triggered due to deep BFS exploration!" << endl;
           abort();
       }
   }
   ```

These functions act as checks in the BFS function to ensure the conditions described in the invariants are met and provide insight into potential slowdowns when violated.

### Phase 4: Integrate the Checks into the C++ Program

Now, let's integrate these runtime checks into the original C++ solution to monitor the potential performance bottlenecks identified:

```cpp
#include <bits/stdc++.h>
const double PI = 3.141592653589793238462643383279502884197169399375105820974944;
using namespace std;

// Function declarations for performance checks
void check_obstacle_configuration(const deque<pair<long long, long long>>& q, int threshold);
void check_movement_constraints(int leftMoves, int rightMoves, int x, int y);
void check_bfs_depth(int currentDepth, int maxDepth);

char a[2001][2001];
vector<pair<long long, long long>> dp[2001];
int x, y, r, c, n, m;
bool visited[2001][2001];

void bfs(int r, int c) {
    deque<pair<long long, long long>> q;
    q.push_front({r, c});
    while (!q.empty()) {
        // Check for excessive queue size indicating potential performance bottleneck
        check_obstacle_configuration(q, 1000);  // Example threshold for queue size

        pair<long long, long long> xx = q[0];
        q.pop_front();
        r = xx.first;
        c = xx.second;

        // Check for depth in BFS
        check_bfs_depth(q.size(), 2000); // Example threshold for BFS depth

        if (c - 1 >= 0 && a[r][c - 1] == '.' && !visited[r][c - 1] && dp[r][c].first + 1 <= x) {
            dp[r][c - 1].first = dp[r][c].first + 1;
            dp[r][c - 1].second = dp[r][c].second;
            visited[r][c - 1] = true;
            q.push_back({r, c - 1});
        }
        if (c + 1 < m && a[r][c + 1] == '.' && !visited[r][c + 1] && dp[r][c].second + 1 <= y) {
            dp[r][c + 1].first = dp[r][c].first;
            dp[r][c + 1].second = dp[r][c].second + 1;
            visited[r][c + 1] = true;
            q.push_back({r, c + 1});
        }
        if (r - 1 >= 0 && a[r - 1][c] == '.' && !visited[r - 1][c]) {
            dp[r - 1][c] = dp[r][c];
            visited[r - 1][c] = true;
            q.push_front({r - 1, c});
        }
        if (r + 1 < n && a[r + 1][c] == '.' && !visited[r + 1][c]) {
            dp[r + 1][c] = dp[r][c];
            visited[r + 1][c] = true;
            q.push_front({r + 1, c});
        }
    }
}

void solve() {
    cin >> n >> m;
    cin >> r >> c;
    cin >> x >> y;

    for (long long i = 0; i < n; ++i) {
        for (long long j = 0; j < m; ++j) {
            dp[i].resize(2001);
            cin >> a[i][j];
        }
    }
    visited[r - 1][c - 1] = true;
    bfs(r - 1, c - 1);

    int ans = 0;
    for (long long i = 0; i < n; ++i) {
        for (long long j = 0; j < m; ++j) {
            ans += (visited[i][j] == true);
        }
    }
    cout << ans << "\n";
}

int main() {
    bool testing = false;
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    if (testing) {
        freopen("test.txt", "rt", stdin);
        int start = clock();
        solve();
        int end = clock();
        cout << "time: " << (end - start) / (double)(CLOCKS_PER_SEC) * 1000
             << " milliseconds\n";
    } else {
        solve();
    }
}

// Function implementations for performance checks
void check_obstacle_configuration(const deque<pair<long long, long long>>& q, int threshold) {
    if (q.size() > threshold) {
        cerr << "Warning: Performance bottleneck triggered due to narrow passage or many obstacles!" << endl;
        abort();
    }
}

void check_movement_constraints(int leftMoves, int rightMoves, int x, int y) {
    if (leftMoves > x || rightMoves > y) {
        cerr << "Warning: Performance bottleneck triggered due to movement constraint violations!" << endl;
        abort();
    }
}

void check_bfs_depth(int currentDepth, int maxDepth) {
    if (currentDepth > maxDepth) {
        cerr << "Warning: Performance bottleneck triggered due to deep BFS exploration!" << endl;
        abort();
    }
}
```

### Explanation:

- **`check_obstacle_configuration`**: This function checks if the BFS queue (`q`) size exceeds a threshold, suggesting narrow paths or many obstacles.
  
- **`check_movement_constraints`**: This function can be integrated when tracking the number of left and right moves to ensure constraints are not violated.

- **`check_bfs_depth`**: This function monitors the depth of BFS exploration to detect excessive searching due to maze layout or constraints.

These checks help detect and abort execution when potential performance bottlenecks are encountered, allowing for performance profiling and debugging.

