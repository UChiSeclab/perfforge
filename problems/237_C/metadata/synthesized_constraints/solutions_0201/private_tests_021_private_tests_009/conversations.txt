system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a[1000] = {2,   3,   5,   7,   11,  13,  17,  19,  23,  29,  31,  37,  41,
               43,  47,  53,  59,  61,  67,  71,  73,  79,  83,  89,  97,  101,
               103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,
               173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239,
               241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,
               317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,
               401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467,
               479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569,
               571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,
               647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733,
               739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,
               827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,
               919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997};
int n, m, k;
int b[100000];
bool jie(int t) {
  if (t == 1) return 0;
  for (int i = 0; i < 168; i++)
    if (t == a[i])
      return 1;
    else if (t % a[i] == 0)
      return 0;
  return 1;
}
int main(int argc, char *argv[]) {
  cin >> n >> m >> k;
  int u = -1;
  int l = 0;
  int y = 0;
  int h = 0;
  bool pan = 0;
  for (int i = n; i <= m; i++) {
    if (jie(i)) {
      b[h] = i;
      h++;
      if (h - l == k) {
        y = b[h - 1] - b[l] + 1;
        pan = 1;
        u = max(b[h - 1] - b[l] + 1, u);
        l++;
      }
    } else {
      y++;
      u = max(y, u);
    }
  }
  l = 0;
  y = 0;
  h = 0;
  for (int i = m; i >= n; i--) {
    if (jie(i)) {
      b[h] = i;
      h++;
      if (h - l == k) {
        y = b[l] - b[h - 1] + 1;
        pan = 1;
        u = max(b[l] - b[h - 1] + 1, u);
        l++;
      }
    } else {
      y++;
      u = max(y, u);
    }
  }
  if (pan)
    cout << u << endl;
  else
    cout << -1 << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1000000 1000000


(G.2) Fast Input

1 1 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a[1000] = {2,   3,   5,   7,   11,  13,  17,  19,  23,  29,  31,  37,  41, /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
               43,  47,  53,  59,  61,  67,  71,  73,  79,  83,  89,  97,  101, /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
               103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
               173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
               241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
               317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
               401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
               479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
               571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
               647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
               739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
               827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
               919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997}; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, k; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
int b[100000]; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
bool jie(int t) { /* line 18 slow_hit_count: 2000000, fast_hit_count: 2 */
  if (t == 1) return 0; /* line 19 slow_hit_count: 2000000, fast_hit_count: 2 */
  for (int i = 0; i < 168; i++) /* line 20 slow_hit_count: 36219852, fast_hit_count: 0 */
    if (t == a[i]) /* line 21 slow_hit_count: 36063192, fast_hit_count: 0 */
      return 1; /* line 22 slow_hit_count: 336, fast_hit_count: 0 */
    else if (t % a[i] == 0) /* line 23 slow_hit_count: 36062856, fast_hit_count: 0 */
      return 0; /* line 24 slow_hit_count: 1843002, fast_hit_count: 0 */
  return 1; /* line 25 slow_hit_count: 156660, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
int main(int argc, char *argv[]) { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m >> k; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  int u = -1; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  int l = 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  int y = 0; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  int h = 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  bool pan = 0; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = n; i <= m; i++) { /* line 34 slow_hit_count: 1000001, fast_hit_count: 2 */
    if (jie(i)) { /* line 35 slow_hit_count: 1000000, fast_hit_count: 1 */
      b[h] = i; /* line 36 slow_hit_count: 78498, fast_hit_count: 0 */
      h++; /* line 37 slow_hit_count: 78498, fast_hit_count: 0 */
      if (h - l == k) { /* line 38 slow_hit_count: 78498, fast_hit_count: 0 */
        y = b[h - 1] - b[l] + 1; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
        pan = 1; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
        u = max(b[h - 1] - b[l] + 1, u); /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
        l++; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      y++; /* line 45 slow_hit_count: 921502, fast_hit_count: 1 */
      u = max(y, u); /* line 46 slow_hit_count: 921502, fast_hit_count: 1 */
    } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  l = 0; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  y = 0; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  h = 0; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = m; i >= n; i--) { /* line 52 slow_hit_count: 1000001, fast_hit_count: 2 */
    if (jie(i)) { /* line 53 slow_hit_count: 1000000, fast_hit_count: 1 */
      b[h] = i; /* line 54 slow_hit_count: 78498, fast_hit_count: 0 */
      h++; /* line 55 slow_hit_count: 78498, fast_hit_count: 0 */
      if (h - l == k) { /* line 56 slow_hit_count: 78498, fast_hit_count: 0 */
        y = b[l] - b[h - 1] + 1; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
        pan = 1; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
        u = max(b[l] - b[h - 1] + 1, u); /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
        l++; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
      y++; /* line 63 slow_hit_count: 921502, fast_hit_count: 1 */
      u = max(y, u); /* line 64 slow_hit_count: 921502, fast_hit_count: 1 */
    } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 66 slow_hit_count: 0, fast_hit_count: 0 */
  if (pan) /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
    cout << u << endl; /* line 68 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 69 slow_hit_count: 0, fast_hit_count: 0 */
    cout << -1 << endl; /* line 70 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 71 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 72 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance bottlenecks in the given C program and derive performance-characterizing invariants, we'll first go through the provided information, focusing on Phase 1 and Phase 2.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - The `jie(int t)` function is hit 2,000,000 times for the slow input, but only twice for the fast input. This indicates that this function is likely a significant source of inefficiency.
   - Within `jie(int t)`, the loop iterating over the prime numbers array is executed a massive 36,219,852 times for the slow input but is not executed at all for the fast input. This strongly suggests that prime checking is a culprit for the slowdown.
   - The two primary loops in the `main` function (lines 34-48 and 52-66) are also executed 1,000,001 times each for the slow input, indicating extensive iteration over the large input range.

2. **Interaction with Data Structures and Loops:**
   - The loops iterate over a wide range from `n` to `m` (in both forward and reverse order), performing a primality check for each number in this range, which is computationally expensive given the sheer size of the range (up to 1,000,000).
   - The `b` array is populated with indices where numbers are prime, involving additional logic that contributes to the lengthy execution time due to repeated access and updates.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, we can derive the following natural language performance invariants:

1. **Invariant: Expensive Prime Checking**
   - **Description:** "If the range between `a` and `b` is large, and there are many numbers to check for primality, the execution time will increase. This is because each number is checked against a list of known primes, which is computationally expensive."
   - **Explanation:** The inefficiency arises mainly from repeated primality tests over a large range, especially when `b - a + 1` is close to the maximum limit (1,000,000).

2. **Invariant: Large Input Range Overhead**
   - **Description:** "When the difference between `b` and `a` (i.e., the range of numbers to be processed) is large, the program slows down significantly due to increased iterations and operations over this extensive range."
   - **Explanation:** The loops iterate over the entire range twice, and repeated computations over large ranges contribute to the slowdown.

3. **Invariant: High Primality Verification Load**
   - **Description:** "If `k` is large relative to the number of primes available in the range `[a, b]`, the program may need to check most numbers for primality, resulting in repetitive and costly primality tests."
   - **Explanation:** High values of `k` require the algorithm to find many primes in subranges, necessitating frequent and costly calls to the primality check function.

These invariants abstract away from specific numeric inputs and instead focus on the broader conditions that cause slow execution. They consider the interaction between the input size constraints and the nature of the operations (like primality testing and extensive looping) that degrade performance.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Translating the Invariants into C++ Checker Code

Based on the performance-characterizing invariants derived earlier, we will implement C++ code snippets to check these conditions at runtime.

#### Invariant 1: Expensive Prime Checking
```cpp
void check_prime_range_invariant(int b, int a) {
    if (b - a + 1 > 100000) {  // Considerably large range for checking primes
        cerr << "Warning: Performance bottleneck condition triggered - large range for prime checking!" << endl;
        abort();
    }
}
```

#### Invariant 2: Large Input Range Overhead
```cpp
void check_large_input_range(int b, int a) {
    if (b - a + 1 > 500000) {  // Threshold for large input range
        cerr << "Warning: Performance bottleneck condition triggered - processing over large input range!" << endl;
        abort();
    }
}
```

#### Invariant 3: High Primality Verification Load
```cpp
void check_high_primality_load(int k, int numPrimesInRange) {
    if (k > numPrimesInRange * 0.8) {  // Arbitrarily chosen threshold, 80% of available primes
        cerr << "Warning: Performance bottleneck condition triggered - high demand for primes relative to range!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now, let's integrate these checker functions into the original C++ program at strategic points.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check for prime range invariant
void check_prime_range_invariant(int b, int a) {
    if (b - a + 1 > 100000) {
        cerr << "Warning: Performance bottleneck condition triggered - large range for prime checking!" << endl;
        abort();
    }
}

// Function to check for large input range overhead
void check_large_input_range(int b, int a) {
    if (b - a + 1 > 500000) {
        cerr << "Warning: Performance bottleneck condition triggered - processing over large input range!" << endl;
        abort();
    }
}

// Function to check for high primality verification load
void check_high_primality_load(int k, int numPrimesInRange) {
    if (k > numPrimesInRange * 0.8) {
        cerr << "Warning: Performance bottleneck condition triggered - high demand for primes relative to range!" << endl;
        abort();
    }
}

int a[1000] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,
               43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,
               103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,
               173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239,
               241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,
               317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,
               401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467,
               479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569,
               571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,
               647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733,
               739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,
               827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,
               919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997};

bool jie(int t) {
  if (t == 1) return 0;
  for (int i = 0; i < 168; i++)
    if (t == a[i])
      return 1;
    else if (t % a[i] == 0)
      return 0;
  return 1;
}

int main() {
  int n, m, k;
  cin >> n >> m >> k;

  // Check for large input range before processing
  check_large_input_range(m, n);
  
  // Estimate the number of primes in the range for the primality load check
  int approxNumPrimesInRange = (m - n + 1) / log(m);
  check_high_primality_load(k, approxNumPrimesInRange);

  // Check for prime range invariant
  check_prime_range_invariant(m, n);

  int u = -1;
  int l = 0;
  int y = 0;
  int h = 0;
  bool pan = 0;
  int b[100000];
  
  for (int i = n; i <= m; i++) {
    if (jie(i)) {
      b[h] = i;
      h++;
      if (h - l == k) {
        y = b[h - 1] - b[l] + 1;
        pan = 1;
        u = max(b[h - 1] - b[l] + 1, u);
        l++;
      }
    } else {
      y++;
      u = max(y, u);
    }
  }

  l = 0;
  y = 0;
  h = 0;
  for (int i = m; i >= n; i--) {
    if (jie(i)) {
      b[h] = i;
      h++;
      if (h - l == k) {
        y = b[l] - b[h - 1] + 1;
        pan = 1;
        u = max(b[l] - b[h - 1] + 1, u);
        l++;
      }
    } else {
      y++;
      u = max(y, u);
    }
  }
  if (pan)
    cout << u << endl;
  else
    cout << -1 << endl;
  
  return 0;
}
```
### Explanation
- **Invariant 1 & 2:** Placed immediately after reading input to check if the range between `a` and `b` is too large, potentially triggering a performance bottleneck.
- **Invariant 3:** Estimated the number of primes in the range and checked if `k` is a high demand relative to the available primes, potentially causing a slowdown.

These checkers will abort the program if the specified conditions are met, helping a fuzzer detect performance bottlenecks.

