system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a, b, k;
bool prime[1000001];
int main() {
  int i, j;
  cin >> a >> b >> k;
  int cnt = 0, leng = 0;
  for (i = a; i <= b; i++) {
    prime[i] = true;
    int s = (int)(sqrt((double)i));
    for (j = 2; j <= s; j++) {
      if (i % j == 0) {
        prime[i] = false;
        break;
      }
    }
    if (i == 1) prime[i] = false;
    if (prime[i]) cnt++;
  }
  if (cnt < k) {
    cout << -1;
    return 0;
  }
  int s = a, e = a, max = 0, cprime = 0;
  while (1) {
    if (e > b) break;
    if (prime[e] != true) {
      if (cprime == k) {
        if (prime[s] != true) {
          s++;
        } else {
          e++;
        }
      } else {
        e++;
      }
    } else if (prime[e] == true) {
      if (cprime < k) {
        cprime++;
        if (max < e - s + 1) max = e - s + 1;
        e++;
      } else if (cprime == k) {
        if (max < e - s) max = e - s;
        if (prime[s] != true) {
          s++;
        } else {
          if (s == e)
            e++;
          else {
            if (prime[s] == true) cprime--;
            s++;
          }
        }
      }
    }
  }
  if (max < e - s) max = e - s;
  cout << max;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1000000 1000000


(G.2) Fast Input

1 1 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a, b, k; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
bool prime[1000001]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  int i, j; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> a >> b >> k; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int cnt = 0, leng = 0; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = a; i <= b; i++) { /* line 9 slow_hit_count: 1000001, fast_hit_count: 2 */
    prime[i] = true; /* line 10 slow_hit_count: 1000000, fast_hit_count: 1 */
    int s = (int)(sqrt((double)i)); /* line 11 slow_hit_count: 1000000, fast_hit_count: 1 */
    for (j = 2; j <= s; j++) { /* line 12 slow_hit_count: 67818903, fast_hit_count: 1 */
      if (i % j == 0) { /* line 13 slow_hit_count: 67740404, fast_hit_count: 0 */
        prime[i] = false; /* line 14 slow_hit_count: 921501, fast_hit_count: 0 */
        break; /* line 15 slow_hit_count: 921501, fast_hit_count: 0 */
      } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
    if (i == 1) prime[i] = false; /* line 18 slow_hit_count: 1000000, fast_hit_count: 1 */
    if (prime[i]) cnt++; /* line 19 slow_hit_count: 1000000, fast_hit_count: 1 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  if (cnt < k) { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
    cout << -1; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
    return 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  int s = a, e = a, max = 0, cprime = 0; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  while (1) { /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    if (e > b) break; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    if (prime[e] != true) { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      if (cprime == k) { /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
        if (prime[s] != true) { /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
          s++; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
        } else { /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
          e++; /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
      } else { /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
        e++; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    } else if (prime[e] == true) { /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
      if (cprime < k) { /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
        cprime++; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
        if (max < e - s + 1) max = e - s + 1; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
        e++; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      } else if (cprime == k) { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
        if (max < e - s) max = e - s; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
        if (prime[s] != true) { /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
          s++; /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
        } else { /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
          if (s == e) /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
            e++; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
          else { /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
            if (prime[s] == true) cprime--; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
            s++; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
  if (max < e - s) max = e - s; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
  cout << max; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 61 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issues in the given C program, we will analyze the line-level hit counts and the logic that contributes to the slow path. Here's a structured breakdown:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Hit Count Comparison**:
   - The `for` loop starting at line 9 is hit 1,000,001 times in the slow run, but only 2 times in the fast run. This loop iterates over the range from `a` to `b`, which is significantly larger in the slow input.
   - The nested loop within line 12 is executed 67,818,903 times in the slow run versus just once in the fast run. This indicates substantial computation for checking prime numbers.

2. **Critical Lines**:
   - The expensive nested loop at line 12 iterates over potential divisors to check primality, causing the performance bottleneck. This is compounded by the large range size (`b - a + 1`).
   - Line 13 and 14 are also highly active due to the primality test—nearly 92% of the iterations identify a divisor.

3. **Data and Algorithm Analysis**:
   - The primality test is performed for every integer in the range, making it O(n * sqrt(m)) where `n` is the number of integers and `m` is the maximum integer in the range. This becomes inefficient for large ranges.

### Phase 2: Derive Performance-Characterizing Invariants

Here are natural language statements that describe conditions under which the program likely enters a slow path:

1. **Prime Checking Over Large Ranges**:
   - When the range of numbers (`b - a + 1`) is large, the repeated primality checks for each number in this range lead to significant computational overhead. This is particularly evident when the range approaches the maximum constraint size.

   Natural language description: "When the range size between `a` and `b` is very large, the program spends excessive time checking for prime numbers, slowing down significantly."

2. **High Primality Requirement**:
   - If the number of required primes `k` is large relative to the total number of primes available between `a` and `b`, the algorithm may need to perform several iterations of the outer loop, contributing to slow execution.

   Natural language description: "If the required number of primes `k` is close to the total number of available primes in the range, the program must iterate extensively, leading to a slowdown."

3. **Inefficient Prime Check Implementation**:
   - The current method of checking primality is inefficient over a large dataset due to its nested loop nature, which is computationally intensive for each integer in the range.

   Natural language description: "The naive primality testing logic becomes a performance bottleneck when applied to a large range of integers, particularly when the range is near the upper constraint limit."

### Summary of Performance Invariants

- **Invariant 1**: "If the range size between `a` and `b` is very large, the program's performance deteriorates due to extensive prime checking."
- **Invariant 2**: "The program slows down significantly when the requirement `k` for primes is near the total number of primes available in the range."
- **Invariant 3**: "The nested loop for primality testing induces high computational overhead when applied to large ranges, slowing the execution."

These invariants capture the conditions leading to slow performance and can serve as a guide for potential optimizations or checks during a code review or a fuzzer analysis.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ checks that capture the performance-characterizing invariants derived previously:

1. **Large Range Size Causing Inefficiency**:
   - Condition: If the range between `a` and `b` is large, excessive primality checks will slow down the program.

```cpp
void check_large_range_invariant(int a, int b) {
    if ((b - a + 1) > 100000) {  // Arbitrary threshold for demonstration.
        cerr << "Warning: Performance bottleneck condition triggered due to large range size." << endl;
        abort();
    }
}
```

2. **High Primality Requirement**:
   - Condition: If the required number of primes `k` is close to or exceeds the number of primes expected in the range, the program slows down.

```cpp
void check_high_primality_requirement(int cnt, int k) {
    if (cnt < k) {
        cerr << "Warning: Performance bottleneck condition triggered due to high primality requirement." << endl;
        abort();
    }
}
```

3. **Inefficient Prime Checking**:
   - Condition: If the loop for checking primes is executed too many times, it indicates inefficiency.

```cpp
void check_prime_check_efficiency(int rangeSize, long long primeChecks) {
    if (primeChecks > rangeSize * 50) {  // Arbitrary multiplier based on expected operations.
        cerr << "Warning: Performance bottleneck condition triggered due to inefficient prime checks." << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

Here's the original C++ program with the integrated invariant checks:

```cpp
#include <bits/stdc++.h>
using namespace std;
int a, b, k;
bool prime[1000001];

void check_large_range_invariant(int a, int b) {
    if ((b - a + 1) > 100000) {  // Arbitrary threshold for demonstration.
        cerr << "Warning: Performance bottleneck condition triggered due to large range size." << endl;
        abort();
    }
}

void check_high_primality_requirement(int cnt, int k) {
    if (cnt < k) {
        cerr << "Warning: Performance bottleneck condition triggered due to high primality requirement." << endl;
        abort();
    }
}

void check_prime_check_efficiency(int rangeSize, long long primeChecks) {
    if (primeChecks > rangeSize * 50) {  // Arbitrary multiplier based on expected operations.
        cerr << "Warning: Performance bottleneck condition triggered due to inefficient prime checks." << endl;
        abort();
    }
}

int main() {
    int i, j;
    cin >> a >> b >> k;
    int cnt = 0, leng = 0;
    long long primeChecks = 0;  // Counter for prime check efficiency.
    
    check_large_range_invariant(a, b);  // Check 1: Large range size.

    for (i = a; i <= b; i++) {
        prime[i] = true;
        int s = (int)(sqrt((double)i));
        for (j = 2; j <= s; j++) {
            primeChecks++;  // Increment for each divisor check.
            if (i % j == 0) {
                prime[i] = false;
                break;
            }
        }
        if (i == 1) prime[i] = false;
        if (prime[i]) cnt++;
    }
    
    check_high_primality_requirement(cnt, k);  // Check 2: High primality requirement.
    check_prime_check_efficiency(b - a + 1, primeChecks);  // Check 3: Prime check efficiency.

    if (cnt < k) {
        cout << -1;
        return 0;
    }

    int s = a, e = a, max = 0, cprime = 0;
    while (1) {
        if (e > b) break;
        if (prime[e] != true) {
            if (cprime == k) {
                if (prime[s] != true) {
                    s++;
                } else {
                    e++;
                }
            } else {
                e++;
            }
        } else if (prime[e] == true) {
            if (cprime < k) {
                cprime++;
                if (max < e - s + 1) max = e - s + 1;
                e++;
            } else if (cprime == k) {
                if (max < e - s) max = e - s;
                if (prime[s] != true) {
                    s++;
                } else {
                    if (s == e)
                        e++;
                    else {
                        if (prime[s] == true) cprime--;
                        s++;
                    }
                }
            }
        }
    }
    if (max < e - s) max = e - s;
    cout << max;
    return 0;
}
```

### Notes
- Each check is strategically inserted to catch potential slowdowns based on the previously identified conditions.
- The chosen thresholds and multipliers are illustrative and may need adjustments based on empirical testing and further analysis.
- The checks are outside tight loops to avoid introducing additional performance overhead.

