system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long gcd(long long x, long long y) {
  if (y == 0) return x;
  return gcd(y, x % y);
}
long long lcm(long long a, long long b) { return a / gcd(a, b) * b; }
void HoH() {
  ios::sync_with_stdio(0);
  ios_base::sync_with_stdio(0);
  cin.tie(0), cout.tie(0);
}
long long f_p(long long x, int y) {
  if (y == 0)
    return 1;
  else if (y % 2 == 0)
    return f_p(x * x, y / 2);
  else
    return x * f_p(x * x, y / 2);
}
long long l_p(long long n) {
  n = n | (n >> 1);
  n = n | (n >> 2);
  n = n | (n >> 4);
  n = n | (n >> 8);
  return (n + 1) >> 1;
}
const int maxnum = 1000000, geps = 1;
bool not_prime[1000000];
int prime[1000001], pi = 0;
int sum[maxnum];
void getprime(int top) {
  not_prime[1] = true;
  for (int i = 2; i <= top; i++) {
    if (!not_prime[i]) prime[++pi] = i;
    for (int j = i * 2; j <= top; j += i) {
      not_prime[j] = true;
    }
  }
}
int a, b, k;
bool check(int l) {
  for (int i = a + l - 1; i <= b; i++)
    if (sum[i] - sum[i - l] < k) return false;
  return true;
}
int main() {
  HoH();
  cin >> a >> b >> k;
  if (b < a) swap(a, b);
  getprime(b);
  for (int i = 1; i <= b; i++) sum[i] = sum[i - 1] + (!not_prime[i]);
  int lo = 1, hi = b - a + 1, mid;
  while (lo <= hi) {
    mid = lo + (hi - lo) / 2;
    if (check(mid))
      hi = mid - 1;
    else
      lo = mid + 1;
  }
  if (lo == b - a + 2)
    cout << -1;
  else
    cout << lo;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1000000 1000000


(G.2) Fast Input

1 1 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long gcd(long long x, long long y) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  if (y == 0) return x; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  return gcd(y, x % y); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
long long lcm(long long a, long long b) { return a / gcd(a, b) * b; } /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
void HoH() { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0), cout.tie(0); /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
long long f_p(long long x, int y) { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  if (y == 0) /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    return 1; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  else if (y % 2 == 0) /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    return f_p(x * x, y / 2); /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  else /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    return x * f_p(x * x, y / 2); /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
long long l_p(long long n) { /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
  n = n | (n >> 1); /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  n = n | (n >> 2); /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  n = n | (n >> 4); /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  n = n | (n >> 8); /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  return (n + 1) >> 1; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
const int maxnum = 1000000, geps = 1; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
bool not_prime[1000000]; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
int prime[1000001], pi = 0; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
int sum[maxnum]; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
void getprime(int top) { /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  not_prime[1] = true; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i <= top; i++) { /* line 34 slow_hit_count: 1000000, fast_hit_count: 1 */
    if (!not_prime[i]) prime[++pi] = i; /* line 35 slow_hit_count: 999999, fast_hit_count: 0 */
    for (int j = i * 2; j <= top; j += i) { /* line 36 slow_hit_count: 12970034, fast_hit_count: 0 */
      not_prime[j] = true; /* line 37 slow_hit_count: 11970035, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
int a, b, k; /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
bool check(int l) { /* line 42 slow_hit_count: 20, fast_hit_count: 1 */
  for (int i = a + l - 1; i <= b; i++) /* line 43 slow_hit_count: 20, fast_hit_count: 1 */
    if (sum[i] - sum[i - l] < k) return false; /* line 44 slow_hit_count: 20, fast_hit_count: 1 */
  return true; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  HoH(); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> a >> b >> k; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  if (b < a) swap(a, b); /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  getprime(b); /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= b; i++) sum[i] = sum[i - 1] + (!not_prime[i]); /* line 52 slow_hit_count: 1000001, fast_hit_count: 2 */
  int lo = 1, hi = b - a + 1, mid; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  while (lo <= hi) { /* line 54 slow_hit_count: 21, fast_hit_count: 2 */
    mid = lo + (hi - lo) / 2; /* line 55 slow_hit_count: 20, fast_hit_count: 1 */
    if (check(mid)) /* line 56 slow_hit_count: 20, fast_hit_count: 1 */
      hi = mid - 1; /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
      lo = mid + 1; /* line 59 slow_hit_count: 20, fast_hit_count: 1 */
  } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  if (lo == b - a + 2) /* line 61 slow_hit_count: 1, fast_hit_count: 1 */
    cout << -1; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  else /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
    cout << lo; /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 65 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 66 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis of Hit Counts
- The `getprime` function, particularly the loop at line 34 and the nested loop at line 36, has very high hit counts in the slow input, indicating it is executed many times.
- Another loop that shows a considerable difference is the one inside the `check` function at line 43.
- In the function `main`, the loop at line 52 is executed a significantly higher number of times for the slow input.

### Observations
1. **Prime Calculation (Lines 34-37 in `getprime`)**: The loop to determine prime numbers up to `b` is expensive. When `b` is large, like 1,000,000, this causes a lot of computation. The nested loop marking non-prime numbers results in many iterations, especially when `b` is maximal.
2. **Sum Calculation (Line 52 in `main`)**: This loop computes the cumulative sum of primes, and for large `b`, this becomes expensive.
3. **Check Function (Lines 42-44)**: The loop iterates over potential segments to verify if they contain the required number of primes. The binary search in the main function repeatedly calls this function, particularly affecting performance when the range `b - a` is large.

## Phase 2: Derive Performance-Characterizing Invariants

### Natural Language Performance Invariants

1. **Prime Calculation Inefficiency**: 
   - "When the upper bound `b` is significantly large, the program spends excessive time calculating primes up to `b`. This results in a slowdown due to the high computational cost of sieving primes for large numbers."
   - **Threshold for Consideration**: When `b` approaches the maximum constraint (1,000,000).

2. **Cumulative Sum Computation**:
   - "If the range between `a` and `b` is large, especially near the constraint maximum, the cumulative sum calculation for prime counts becomes expensive, iterating over the entire range."
   - **Threshold for Consideration**: When `b - a` is large, particularly closer to 1,000,000.

3. **Binary Search and Check Function Interaction**:
   - "As the required number of primes `k` increases and approaches the total number of primes in the range, the binary search invokes the `check` function repeatedly to verify segments, which can be computationally intensive."
   - **Threshold for Consideration**: When `k` is nearly equal to the number of primes in the range from `a` to `b`.

### Conclusion

The primary slowdowns in the program are linked to the computation of primes up to a large `b`, the cumulative sum of detected primes in a broad range, and the repeated checks during binary searching for large `k`. Ensuring efficient handling of these operations is crucial when these parameters approach their constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ code snippets that implement the natural language performance-characterizing invariants as runtime checks:

### Invariant 1: Prime Calculation Inefficiency

```cpp
void check_prime_calculation_invariant(int b) {
    if (b >= 1000000) {  // Using the upper constraint limit as the threshold.
        cerr << "Warning: Performance bottleneck condition triggered - extensive prime calculation due to large `b` value!" << endl;
        abort();
    }
}
```

### Invariant 2: Cumulative Sum Computation

```cpp
void check_cumulative_sum_invariant(int a, int b) {
    if ((b - a) >= 1000000) {  // Using a broad threshold approaching the constraint.
        cerr << "Warning: Performance bottleneck condition triggered - expensive cumulative sum calculation due to large range `a` to `b`!" << endl;
        abort();
    }
}
```

### Invariant 3: Binary Search and Check Function Interaction

```cpp
void check_binary_search_invariant(int a, int b, int k, int totalPrimes) {
    if (k >= totalPrimes) {  // When k is close to or exceeds the number of primes in range.
        cerr << "Warning: Performance bottleneck condition triggered - excessive binary search checks due to large `k` value relative to primes!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate the Checks into the Original Program

Below is the original C++ program with the integrated performance-checking code. The checks are placed at strategic points to avoid introducing additional overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Performance-checking functions
void check_prime_calculation_invariant(int b) {
    if (b >= 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - extensive prime calculation due to large `b` value!" << endl;
        abort();
    }
}

void check_cumulative_sum_invariant(int a, int b) {
    if ((b - a) >= 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered - expensive cumulative sum calculation due to large range `a` to `b`!" << endl;
        abort();
    }
}

void check_binary_search_invariant(int a, int b, int k, int totalPrimes) {
    if (k >= totalPrimes) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive binary search checks due to large `k` value relative to primes!" << endl;
        abort();
    }
}

long long gcd(long long x, long long y) {
    if (y == 0) return x;
    return gcd(y, x % y);
}
long long lcm(long long a, long long b) { return a / gcd(a, b) * b; }
void HoH() {
    ios::sync_with_stdio(0);
    ios_base::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);
}
long long f_p(long long x, int y) {
    if (y == 0)
        return 1;
    else if (y % 2 == 0)
        return f_p(x * x, y / 2);
    else
        return x * f_p(x * x, y / 2);
}
long long l_p(long long n) {
    n = n | (n >> 1);
    n = n | (n >> 2);
    n = n | (n >> 4);
    n = n | (n >> 8);
    return (n + 1) >> 1;
}
const int maxnum = 1000000, geps = 1;
bool not_prime[1000000];
int prime[1000001], pi = 0;
int sum[maxnum];
void getprime(int top) {
    not_prime[1] = true;
    for (int i = 2; i <= top; i++) {
        if (!not_prime[i]) prime[++pi] = i;
        for (int j = i * 2; j <= top; j += i) {
            not_prime[j] = true;
        }
    }
}
int a, b, k;
bool check(int l) {
    for (int i = a + l - 1; i <= b; i++)
        if (sum[i] - sum[i - l] < k) return false;
    return true;
}
int main() {
    HoH();
    cin >> a >> b >> k;
    if (b < a) swap(a, b);

    // Place the checks at appropriate locations
    check_prime_calculation_invariant(b);
    check_cumulative_sum_invariant(a, b);

    getprime(b);
    for (int i = 1; i <= b; i++) sum[i] = sum[i - 1] + (!not_prime[i]);

    int totalPrimes = sum[b];
    check_binary_search_invariant(a, b, k, totalPrimes);

    int lo = 1, hi = b - a + 1, mid;
    while (lo <= hi) {
        mid = lo + (hi - lo) / 2;
        if (check(mid))
            hi = mid - 1;
        else
            lo = mid + 1;
    }
    if (lo == b - a + 2)
        cout << -1;
    else
        cout << lo;
    return 0;
}
```

### Explanation:
- **Prime Calculation Inefficiency**: Checked after input reading to confirm `b` is not too large.
- **Cumulative Sum Computation**: Checked after input reading to ensure the range is not too broad.
- **Binary Search Interaction**: Checked after calculating the total number of primes to ensure `k` is not too large compared to available primes. 

These checks help identify and abort execution under performance-bottleneck conditions, effectively aiding in detecting scenarios that cause slow execution.

