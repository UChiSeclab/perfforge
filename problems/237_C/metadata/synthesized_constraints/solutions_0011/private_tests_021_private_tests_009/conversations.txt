system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
int A[2000009], B[2000009], C[2000009];
int a, b, k, i, j, max, last, res, cnt;
int main() {
  while (scanf("%d %d %d", &a, &b, &k) == 3) {
    A[0] = 1;
    A[1] = 1;
    for (i = 3;; i = i + 2) {
      if (i * i > 2 * b) break;
      if (A[i] == 0)
        for (j = i * i; j <= 2 * b; j = j + i + i) A[j] = 1;
    }
    for (i = 2 * b; i >= 0; i--) B[i] = 0;
    cnt = 0;
    last = 2 * b;
    for (i = 2 * b; i >= 0; i--) {
      if ((i % 2 != 0 && A[i] == 0) || i == 2) {
        if (cnt == 0) last = i;
        cnt++;
      }
      if (cnt > k) {
        cnt--;
        for (j = last - 1;; j--)
          if ((j % 2 != 0 && A[j] == 0) || j == 2) {
            last = j;
            break;
          }
      }
      if (cnt >= k) B[i] = last;
    }
    for (i = a; i <= b; i++) C[i] = 0;
    max = -1;
    for (i = a; i <= b; i++) {
      if (B[i] != 0) {
        if (max == -1 || B[i] - i > max) max = B[i] - i;
      }
      C[i] = max;
    }
    res = -1;
    for (i = 1; i <= b - a + 1; i++) {
      if (b - i + 1 >= a) {
        if (C[b - i + 1] != -1 && C[b - i + 1] < i) {
          res = i;
          break;
        }
      }
    }
    printf("%d\n", res);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1000000 1000000


(G.2) Fast Input

1 1 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
int A[2000009], B[2000009], C[2000009]; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a, b, k, i, j, max, last, res, cnt; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 2, fast_hit_count: 2 */
  while (scanf("%d %d %d", &a, &b, &k) == 3) { /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
    A[0] = 1; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
    A[1] = 1; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
    for (i = 3;; i = i + 2) { /* line 8 slow_hit_count: 707, fast_hit_count: 1 */
      if (i * i > 2 * b) break; /* line 9 slow_hit_count: 707, fast_hit_count: 1 */
      if (A[i] == 0) /* line 10 slow_hit_count: 706, fast_hit_count: 0 */
        for (j = i * i; j <= 2 * b; j = j + i + i) A[j] = 1; /* line 11 slow_hit_count: 1674160, fast_hit_count: 0 */
    } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    for (i = 2 * b; i >= 0; i--) B[i] = 0; /* line 13 slow_hit_count: 2000002, fast_hit_count: 4 */
    cnt = 0; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    last = 2 * b; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
    for (i = 2 * b; i >= 0; i--) { /* line 16 slow_hit_count: 2000002, fast_hit_count: 4 */
      if ((i % 2 != 0 && A[i] == 0) || i == 2) { /* line 17 slow_hit_count: 2000001, fast_hit_count: 3 */
        if (cnt == 0) last = i; /* line 18 slow_hit_count: 148933, fast_hit_count: 1 */
        cnt++; /* line 19 slow_hit_count: 148933, fast_hit_count: 1 */
      } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
      if (cnt > k) { /* line 21 slow_hit_count: 2000001, fast_hit_count: 3 */
        cnt--; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
        for (j = last - 1;; j--) /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
          if ((j % 2 != 0 && A[j] == 0) || j == 2) { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
            last = j; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
            break; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
          } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      if (cnt >= k) B[i] = last; /* line 29 slow_hit_count: 2000001, fast_hit_count: 3 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    for (i = a; i <= b; i++) C[i] = 0; /* line 31 slow_hit_count: 1000001, fast_hit_count: 2 */
    max = -1; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
    for (i = a; i <= b; i++) { /* line 33 slow_hit_count: 1000001, fast_hit_count: 2 */
      if (B[i] != 0) { /* line 34 slow_hit_count: 1000000, fast_hit_count: 1 */
        if (max == -1 || B[i] - i > max) max = B[i] - i; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      C[i] = max; /* line 37 slow_hit_count: 1000000, fast_hit_count: 1 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    res = -1; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
    for (i = 1; i <= b - a + 1; i++) { /* line 40 slow_hit_count: 1000001, fast_hit_count: 2 */
      if (b - i + 1 >= a) { /* line 41 slow_hit_count: 1000000, fast_hit_count: 1 */
        if (C[b - i + 1] != -1 && C[b - i + 1] < i) { /* line 42 slow_hit_count: 1000000, fast_hit_count: 1 */
          res = i; /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
          break; /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%d\n", res); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 51 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Prime Sieve Loop (Lines 8-11):**  
   - The loop starting at line 8 continues until `i * i > 2 * b`. For slow input, this loop iterates many times (`707` times on the slow input vs `1` time on the fast input).
   - Line 11 involves marking non-prime numbers, which is costly when `b` is large. The sieve of Eratosthenes is implemented poorly as it operates up to `2*b`, which is unnecessary for this problem.

2. **Prime Counting Loop (Lines 16-29):**  
   - The nested loop structure starting at line 16 iterates over a large range (`2 * b`), making it hit counts of `2,000,002` on the slow input.
   - Within this loop, there is a costly checking mechanism for primes leading to `cnt` updates and adjustments, which are inefficient.

3. **Result Computing Loop (Lines 33-37 and 40-42):**  
   - The loops at lines 33 and 40 iterate over the range `[a, b]`, hitting lines `1,000,001` times for the slow input. 
   - These loops perform checks and updates that cumulatively add to the execution time.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Prime Sieve Inefficiency:**
   - **Natural Language Description:** "If the algorithm attempts to sieve primes up to a number much larger than necessary, especially twice the maximum range `b` of interest, performance degrades significantly."
   - **Implementation Suggestion:** The sieve should be limited to just `b`, not `2*b`, as the problem only requires primes up to `b`.

2. **Repeated Large Range Checks:**
   - **Natural Language Description:** "If the range `[a, b]` is large, exceeding a critical threshold, and the code performs repeated prime checks over this large range, this can lead to a significant slowdown."
   - **Implementation Suggestion:** Optimizing the range over which checks are performed could reduce unnecessary operations.

3. **High Prime Count Requirement:**
   - **Natural Language Description:** "If the required number of primes `k` is very high relative to the size of the range `[a, b]`, the program might enter a slow path due to extensive iteration and checks."
   - **Implementation Suggestion:** Early exits or shortcuts might be used when `k` is proportionally large compared to `b - a + 1` to handle cases where the solution is clearly not possible.

4. **Inefficient Prime Counting:**
   - **Natural Language Description:** "When the algorithm processes potential prime numbers inefficiently due to excessive conditional checks and updates, especially within large loops, it can cause performance degradation."
   - **Implementation Suggestion:** Streamlining or restructuring these checks could significantly improve execution times.

By understanding these patterns and applying appropriate thresholds or constraints, programmers can detect and preemptively handle potential slowdowns without over-relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants as C++ Checkers

Below are the implementations of the performance-characterizing invariants using C++ code.

1. **Prime Sieve Inefficiency:**
   ```cpp
   void check_prime_sieve_invariant(int b) {
       if (b > 500000) { // Arbitrary threshold, assuming performance degrades for high b
           cerr << "Warning: prime_sieve_invariant triggered - unnecessary sieving range!" << endl;
           abort();
       }
   }
   ```

2. **Repeated Large Range Checks:**
   ```cpp
   void check_large_range_invariant(int a, int b) {
       if (b - a > 800000) { // Arbitrary threshold, assumes slowdown for large range
           cerr << "Warning: large_range_invariant triggered - large range processing!" << endl;
           abort();
       }
   }
   ```

3. **High Prime Count Requirement:**
   ```cpp
   void check_high_prime_count_invariant(int a, int b, int k) {
       if (k > (b - a) / 2) { // Assumes slowdown when k is disproportionately large
           cerr << "Warning: high_prime_count_invariant triggered - high k relative to range!" << endl;
           abort();
       }
   }
   ```

4. **Inefficient Prime Counting:**
   ```cpp
   void check_prime_counting_invariant(int a, int b) {
       if (b - a > 800000) { // Similar threshold to capture inefficient counting range
           cerr << "Warning: prime_counting_invariant triggered - inefficient range processing!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checkers into the Original Program

Here is the instrumented version of the C++ code with the checks integrated at effective points:

```cpp
#include <bits/stdc++.h>

int A[2000009], B[2000009], C[2000009];
int a, b, k, i, j, max, last, res, cnt;

// Checker functions to monitor potential bottlenecks
void check_prime_sieve_invariant(int b) {
    if (b > 500000) {
        cerr << "Warning: prime_sieve_invariant triggered - unnecessary sieving range!" << endl;
        abort();
    }
}

void check_large_range_invariant(int a, int b) {
    if (b - a > 800000) {
        cerr << "Warning: large_range_invariant triggered - large range processing!" << endl;
        abort();
    }
}

void check_high_prime_count_invariant(int a, int b, int k) {
    if (k > (b - a) / 2) {
        cerr << "Warning: high_prime_count_invariant triggered - high k relative to range!" << endl;
        abort();
    }
}

void check_prime_counting_invariant(int a, int b) {
    if (b - a > 800000) {
        cerr << "Warning: prime_counting_invariant triggered - inefficient range processing!" << endl;
        abort();
    }
}

int main() {
    while (scanf("%d %d %d", &a, &b, &k) == 3) {
        // Apply checkers after input has been read
        check_prime_sieve_invariant(b);
        check_large_range_invariant(a, b);
        check_high_prime_count_invariant(a, b, k);
        check_prime_counting_invariant(a, b);

        A[0] = 1;
        A[1] = 1;
        for (i = 3;; i = i + 2) {
            if (i * i > 2 * b) break;
            if (A[i] == 0)
                for (j = i * i; j <= 2 * b; j = j + i + i) A[j] = 1;
        }
        for (i = 2 * b; i >= 0; i--) B[i] = 0;
        cnt = 0;
        last = 2 * b;
        for (i = 2 * b; i >= 0; i--) {
            if ((i % 2 != 0 && A[i] == 0) || i == 2) {
                if (cnt == 0) last = i;
                cnt++;
            }
            if (cnt > k) {
                cnt--;
                for (j = last - 1;; j--)
                    if ((j % 2 != 0 && A[j] == 0) || j == 2) {
                        last = j;
                        break;
                    }
            }
            if (cnt >= k) B[i] = last;
        }
        for (i = a; i <= b; i++) C[i] = 0;
        max = -1;
        for (i = a; i <= b; i++) {
            if (B[i] != 0) {
                if (max == -1 || B[i] - i > max) max = B[i] - i;
            }
            C[i] = max;
        }
        res = -1;
        for (i = 1; i <= b - a + 1; i++) {
            if (b - i + 1 >= a) {
                if (C[b - i + 1] != -1 && C[b - i + 1] < i) {
                    res = i;
                    break;
                }
            }
        }
        printf("%d\n", res);
    }
    return 0;
}
```

### Explanation

- **Checker Functions:** Are defined at the beginning of the program before `main()` to ensure they are easily accessible and maintainable.
- **Check Integration:** The checkers are called right after input is parsed to ensure that they evaluate the conditions based on the input constraints. This placement avoids adding overhead within critical loops.

