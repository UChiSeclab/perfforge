system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a, b, k;
int sum[1000050];
bool isPrime(int x) {
  if (x < 2) return 0;
  for (int i = 2; i * i <= x; i++)
    if (x % i == 0) return 0;
  return 1;
}
bool check(int x) {
  for (int i = a + x - 1; i <= b; i++)
    if (sum[i] - sum[i - x] < k) return 0;
  return 1;
}
int main() {
  scanf("%d%d%d", &a, &b, &k);
  sum[a - 1] = 0;
  for (int i = a; i <= b; i++)
    if (isPrime(i))
      sum[i] = sum[i - 1] + 1;
    else
      sum[i] = sum[i - 1];
  if (sum[b] - sum[a - 1] < k) {
    printf("-1\n");
    return 0;
  }
  int l = 0, r = b - a + 1, m;
  while (r - l > 1) {
    m = (l + r) >> 1;
    if (check(m))
      r = m;
    else
      l = m;
  }
  printf("%d\n", r);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1000000 1000000


(G.2) Fast Input

1 1 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a, b, k; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int sum[1000050]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
bool isPrime(int x) { /* line 5 slow_hit_count: 1000000, fast_hit_count: 1 */
  if (x < 2) return 0; /* line 6 slow_hit_count: 1000000, fast_hit_count: 1 */
  for (int i = 2; i * i <= x; i++) /* line 7 slow_hit_count: 67818902, fast_hit_count: 0 */
    if (x % i == 0) return 0; /* line 8 slow_hit_count: 67740404, fast_hit_count: 0 */
  return 1; /* line 9 slow_hit_count: 78498, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
bool check(int x) { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = a + x - 1; i <= b; i++) /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    if (sum[i] - sum[i - x] < k) return 0; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  return 1; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d%d", &a, &b, &k); /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  sum[a - 1] = 0; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = a; i <= b; i++) /* line 19 slow_hit_count: 1000001, fast_hit_count: 2 */
    if (isPrime(i)) /* line 20 slow_hit_count: 1000000, fast_hit_count: 1 */
      sum[i] = sum[i - 1] + 1; /* line 21 slow_hit_count: 78498, fast_hit_count: 0 */
    else /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      sum[i] = sum[i - 1]; /* line 23 slow_hit_count: 921502, fast_hit_count: 1 */
  if (sum[b] - sum[a - 1] < k) { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
    printf("-1\n"); /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    return 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  int l = 0, r = b - a + 1, m; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  while (r - l > 1) { /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    m = (l + r) >> 1; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    if (check(m)) /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      r = m; /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      l = m; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", r); /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 38 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To address the performance bottlenecks in the provided C program, let's go through the two phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line 5-9 (`isPrime` function):** The `isPrime` function is called 1,000,000 times during the slow input run. This function checks for primality by iterating up to the square root of the number (`x`), which means it performs many checks, particularly for large numbers.

2. **Line 19-23 (Prime count calculation):** The loop from `a` to `b` runs 1,000,001 times, and within this loop, the `isPrime` function is called. This results in a significant number of operations, especially when the range is large (like 1 to 1,000,000 in the slow input).

3. **High Iteration Count in `isPrime` (Line 7-8):** These lines inside the `isPrime` function have very high hit counts (67,818,902 and 67,740,404, respectively), indicating that a substantial amount of time is spent in this loop, checking for divisors.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above insights, we can generate natural language performance invariants to describe conditions that lead to the slow path:

1. **Prime Checking Overhead:**
   - Natural language description: "When the range from `a` to `b` is large, and the number of prime checks is substantial, the program performs excessive calculations, leading to slow execution."
   - This invariant captures the idea that the primality test becomes a bottleneck due to its frequent execution over a large range.

2. **Large Ranges and Computational Complexity:**
   - Natural language description: "If the difference `b - a` approaches its maximum allowable value under input constraints, the program may experience significant slowdowns due to repeated iterations in prime calculations."
   - This reflects the scenario where the loop iterates over a large range, increasing computational demands.

3. **High Density of Prime Numbers:**
   - Natural language description: "When the required number of primes `k` is very high relative to the range size, and there is a dense concentration of primes, the program may perform extensive calculations to find valid segments, potentially slowing performance."
   - This invariant is based on the idea that high `k` values relative to the possible prime numbers in a range can lead to increased checking and computation.

These invariants are broad enough to capture potential slowdowns and suggest threshold conditions for triggering slow code paths, given the problem's constraints.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, here are the C++ snippets to check each condition:

1. **Prime Checking Overhead**
   - Natural language description: "When the range from `a` to `b` is large, and the number of prime checks is substantial, the program performs excessive calculations, leading to slow execution."

   ```cpp
   void check_prime_range_invariant(int a, int b) {
       if (b - a > 100000) { // Arbitrary threshold indicating a large range
           cerr << "Warning: Performance bottleneck triggered due to a large range of numbers being checked for primality!" << endl;
           abort();
       }
   }
   ```

2. **Large Ranges and Computational Complexity**
   - Natural language description: "If the difference `b - a` approaches its maximum allowable value under input constraints, the program may experience significant slowdowns due to repeated iterations in prime calculations."

   ```cpp
   void check_large_range_invariant(int a, int b) {
       if (b - a == 1000000) { // Maximum allowable range in constraints
           cerr << "Warning: Performance bottleneck triggered due to maximum allowable range!" << endl;
           abort();
       }
   }
   ```

3. **High Density of Prime Numbers**
   - Natural language description: "When the required number of primes `k` is very high relative to the range size, and there is a dense concentration of primes, the program may perform extensive calculations to find valid segments, potentially slowing performance."

   ```cpp
   void check_high_prime_density_invariant(int k, int primeCount) {
       if (k > primeCount / 10) { // Arbitrary condition signifying a high density
           cerr << "Warning: Performance bottleneck triggered due to high requirement of prime numbers!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Original Program

Now, we will integrate these checker functions into the existing C++ solution, ensuring they are placed appropriately to detect performance bottlenecks without adding significant overhead to the main loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

int a, b, k;
int sum[1000050];

// Prime check function
bool isPrime(int x) {
    if (x < 2) return 0;
    for (int i = 2; i * i <= x; i++)
        if (x % i == 0) return 0;
    return 1;
}

// Checker functions
void check_prime_range_invariant(int a, int b) {
    if (b - a > 100000) {
        cerr << "Warning: Performance bottleneck triggered due to a large range of numbers being checked for primality!" << endl;
        abort();
    }
}

void check_large_range_invariant(int a, int b) {
    if (b - a == 1000000) {
        cerr << "Warning: Performance bottleneck triggered due to maximum allowable range!" << endl;
        abort();
    }
}

void check_high_prime_density_invariant(int k, int primeCount) {
    if (k > primeCount / 10) {
        cerr << "Warning: Performance bottleneck triggered due to high requirement of prime numbers!" << endl;
        abort();
    }
}

bool check(int x) {
    for (int i = a + x - 1; i <= b; i++)
        if (sum[i] - sum[i - x] < k) return 0;
    return 1;
}

int main() {
    scanf("%d%d%d", &a, &b, &k);

    // Insert invariant checks after input
    check_prime_range_invariant(a, b);
    check_large_range_invariant(a, b);

    sum[a - 1] = 0;
    for (int i = a; i <= b; i++) {
        if (isPrime(i))
            sum[i] = sum[i - 1] + 1;
        else
            sum[i] = sum[i - 1];
    }

    // Check for prime density after counting primes
    check_high_prime_density_invariant(k, sum[b] - sum[a - 1]);

    if (sum[b] - sum[a - 1] < k) {
        printf("-1\n");
        return 0;
    }

    int l = 0, r = b - a + 1, m;
    while (r - l > 1) {
        m = (l + r) >> 1;
        if (check(m))
            r = m;
        else
            l = m;
    }

    printf("%d\n", r);
    return 0;
}
```

**Explanations for Checker Placement:**

- **`check_prime_range_invariant` and `check_large_range_invariant`** are placed right after reading input values to immediately catch problematic ranges.
- **`check_high_prime_density_invariant`** is placed after calculating the prime counts to ensure it checks conditions based on derived data (total number of primes in the range).

