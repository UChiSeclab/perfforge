system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int isPrime(int n) {
  int md = (int)(pow((float)n, 0.5)) + 1;
  int i;
  if (n < 2) return 0;
  if (n == 2) return 1;
  for (i = 2; i <= md; i++) {
    if (n % i == 0) return 0;
  }
  return 1;
}
int cq[1000005];
int main() {
  int i;
  int a, b, k;
  cin >> a;
  cin >> b;
  cin >> k;
  int l = -1;
  cq[0] = a - 1;
  int ind = 1;
  for (i = a; i <= b; i++) {
    if (isPrime(i) == 1) {
      cq[ind % (k + 1)] = i;
      if (ind >= k) {
        int interv = cq[ind % (k + 1)] - cq[(ind - k) % (k + 1)];
        if (l < interv) {
          l = interv;
        }
      }
      ind++;
    }
  }
  if (ind >= k && b + 1 - cq[(ind - k) % (k + 1)] > l) {
    l = b + 1 - cq[(ind - k) % (k + 1)];
  }
  if (l > b - a + 1) {
    cout << "-1\n";
    return 0;
  }
  cout << l;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1000000 1000000


(G.2) Fast Input

1 1 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int isPrime(int n) { /* line 3 slow_hit_count: 1000000, fast_hit_count: 1 */
  int md = (int)(pow((float)n, 0.5)) + 1; /* line 4 slow_hit_count: 1000000, fast_hit_count: 1 */
  int i; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  if (n < 2) return 0; /* line 6 slow_hit_count: 1000000, fast_hit_count: 1 */
  if (n == 2) return 1; /* line 7 slow_hit_count: 999999, fast_hit_count: 0 */
  for (i = 2; i <= md; i++) { /* line 8 slow_hit_count: 67897398, fast_hit_count: 0 */
    if (n % i == 0) return 0; /* line 9 slow_hit_count: 67818901, fast_hit_count: 0 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  return 1; /* line 11 slow_hit_count: 78497, fast_hit_count: 0 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
int cq[1000005]; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  int i; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  int a, b, k; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> a; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> b; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> k; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  int l = -1; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  cq[0] = a - 1; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  int ind = 1; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = a; i <= b; i++) { /* line 23 slow_hit_count: 1000001, fast_hit_count: 2 */
    if (isPrime(i) == 1) { /* line 24 slow_hit_count: 1000000, fast_hit_count: 1 */
      cq[ind % (k + 1)] = i; /* line 25 slow_hit_count: 78498, fast_hit_count: 0 */
      if (ind >= k) { /* line 26 slow_hit_count: 78498, fast_hit_count: 0 */
        int interv = cq[ind % (k + 1)] - cq[(ind - k) % (k + 1)]; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
        if (l < interv) { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
          l = interv; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
        } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
      ind++; /* line 32 slow_hit_count: 78498, fast_hit_count: 0 */
    } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  if (ind >= k && b + 1 - cq[(ind - k) % (k + 1)] > l) { /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
    l = b + 1 - cq[(ind - k) % (k + 1)]; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
  if (l > b - a + 1) { /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
    cout << "-1\n"; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  cout << l; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 44 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis of Hit Counts

1. **Function `isPrime` (lines 3-11)**: 
   - This function is called significantly more times in the slow input (1,000,000 calls) compared to the fast input (1 call). 
   - The loop inside `isPrime` (line 8) is executed an enormous number of times (67,897,398 times for the slow input), which suggests that checking for primality is a major performance bottleneck.
   - The high hit count on line 9 (67,818,901 times) indicates frequent iterations over possible divisors, which is computationally expensive.

2. **Loop over range `[a, b]` (line 23)**:
   - This loop runs 1,000,001 times for the slow input and 2 times for the fast input. The loop is coupled with the costly `isPrime` function call.
   - The loop's execution time heavily depends on the range size `(b - a + 1)` and the density of prime numbers in that range.

3. **Index operations and condition checks (lines 24-32)**:
   - The index manipulation and condition checks are infrequently executed compared to prime checking, indicating that the majority of slow execution time is spent inside the primality test.

### Summary

The main performance issue comes from the `isPrime` function, which is repeatedly called on a vast range of numbers. The loop in `isPrime` iterates over potential divisors for each number, resulting in a high computational cost, especially when `a` and `b` are large.

## Phase 2: Derive Performance-Characterizing Invariants

### Natural Language Performance Invariants

1. **Primality Testing Over Large Ranges**:
   - "When the range `[a, b]` is large, with many numbers to check for primality, the cost of repeatedly determining if each number is prime can significantly slow the program."
   - **Threshold Suggestion**: When `b - a + 1` approaches its upper limit (e.g., 10^6), the primality test becomes a bottleneck.

2. **High Prime Density**:
   - "If there is a high density of prime numbers within the range `[a, b]`, the frequent primality checks and subsequent operations on indices could lead to performance degradation."
   - **Threshold Suggestion**: When dealing with a range that may contain a high proportion of prime numbers, the operations become more intensive.

3. **High `k` Value**:
   - "When `k` is large relative to the number of potential prime numbers in `[a, b]`, the algorithm may exhaustively search large ranges and iterate deeply to find the required number of primes, leading to slow performance."
   - **Threshold Suggestion**: High `k` values, especially close to `b - a + 1`, can exacerbate the inefficiency of finding sufficient primes.

### Implementation Considerations

These invariants can guide optimizations, such as:
- Using a more efficient primality testing algorithm (like the Sieve of Eratosthenes) for precomputation.
- Early exits or estimates when the number of needed primes (`k`) is unlikely to be met within a given range, reducing unnecessary iterations.
- Profiling to understand input characteristics that commonly lead to high prime density, allowing early adjustments to strategy or outputs.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement Checker Code for the Invariants

Below are the C++ code snippets that implement the performance-characterizing invariants derived during Phase 2. These snippets check for potential performance bottlenecks at runtime.

### Invariant 1: Primality Testing Over Large Ranges
```cpp
void check_large_range(int a, int b) {
    if (b - a + 1 > 1e6) {
        cerr << "Warning: Performance bottleneck condition triggered - large range for primality testing!" << endl;
        abort();
    }
}
```

### Invariant 2: High Prime Density
```cpp
void check_high_prime_density(int possiblePrimes, int rangeLength) {
    if (possiblePrimes > 0.5 * rangeLength) {
        cerr << "Warning: Performance bottleneck condition triggered - high prime density in range!" << endl;
        abort();
    }
}
```

### Invariant 3: High `k` Value
```cpp
void check_high_k_value(int k, int rangeLength) {
    if (k > 0.9 * rangeLength) {
        cerr << "Warning: Performance bottleneck condition triggered - high k value relative to range length!" << endl;
        abort();
    }
}
```

## Phase 4: Instrument the Original Code with Checkers

Here's the original C++ program instrumented with the above runtime checks. The checks are placed at strategic points to minimize performance overhead while still catching potential slowdowns.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for large ranges
void check_large_range(int a, int b) {
    if (b - a + 1 > 1e6) {
        cerr << "Warning: Performance bottleneck condition triggered - large range for primality testing!" << endl;
        abort();
    }
}

// Checker function for high prime density
void check_high_prime_density(int possiblePrimes, int rangeLength) {
    if (possiblePrimes > 0.5 * rangeLength) {
        cerr << "Warning: Performance bottleneck condition triggered - high prime density in range!" << endl;
        abort();
    }
}

// Checker function for high k value
void check_high_k_value(int k, int rangeLength) {
    if (k > 0.9 * rangeLength) {
        cerr << "Warning: Performance bottleneck condition triggered - high k value relative to range length!" << endl;
        abort();
    }
}

int isPrime(int n) {
    int md = (int)(pow((float)n, 0.5)) + 1;
    int i;
    if (n < 2) return 0;
    if (n == 2) return 1;
    for (i = 2; i <= md; i++) {
        if (n % i == 0) return 0;
    }
    return 1;
}

int cq[1000005];

int main() {
    int i;
    int a, b, k;
    cin >> a;
    cin >> b;
    cin >> k;
    
    // Run performance checkers
    check_large_range(a, b);
    
    int l = -1;
    cq[0] = a - 1;
    int ind = 1;
    int primeCount = 0; // Track the number of primes in the range

    for (i = a; i <= b; i++) {
        if (isPrime(i) == 1) {
            primeCount++;
            cq[ind % (k + 1)] = i;
            if (ind >= k) {
                int interv = cq[ind % (k + 1)] - cq[(ind - k) % (k + 1)];
                if (l < interv) {
                    l = interv;
                }
            }
            ind++;
        }
    }

    // Run additional performance checkers
    check_high_prime_density(primeCount, b - a + 1);
    check_high_k_value(k, b - a + 1);

    if (ind >= k && b + 1 - cq[(ind - k) % (k + 1)] > l) {
        l = b + 1 - cq[(ind - k) % (k + 1)];
    }
    if (l > b - a + 1) {
        cout << "-1\n";
        return 0;
    }
    cout << l;
    return 0;
}
```

### Explanation

- **`check_large_range`**: This function is called after reading inputs `a` and `b` to ensure the range isn't excessively large.
- **`check_high_prime_density`**: This is calculated after the loop to check if too many numbers in the range are prime.
- **`check_high_k_value`**: Checks if `k` is disproportionately large compared to the range length, which could lead to inefficiencies.

These checks help identify conditions that are likely to cause performance issues, based on the analysis of the problem and code structure.

