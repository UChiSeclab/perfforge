system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
vector<int> v;
bool isPrime(int x) {
  if (x == 1) return false;
  for (int j = 2; j * j <= x; j++) {
    if (x % j == 0) return false;
  }
  return true;
}
bool x(int i) {}
int main() {
  int a, b, k;
  cin >> a >> b >> k;
  v.push_back(a - 1);
  for (int i = a; i <= b; i++) {
    if (isPrime(i)) v.push_back(i);
  }
  int ans = 0;
  v.push_back(b + 1);
  if (k > v.size() - 2) {
    cout << -1;
    return 0;
  }
  for (int i = 0; i + k < v.size(); i++) {
    ans = max(ans, v[i + k] - v[i]);
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1000000 1000000


(G.2) Fast Input

1 1 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> v; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
bool isPrime(int x) { /* line 4 slow_hit_count: 1000000, fast_hit_count: 1 */
  if (x == 1) return false; /* line 5 slow_hit_count: 1000000, fast_hit_count: 1 */
  for (int j = 2; j * j <= x; j++) { /* line 6 slow_hit_count: 67818902, fast_hit_count: 0 */
    if (x % j == 0) return false; /* line 7 slow_hit_count: 67740404, fast_hit_count: 0 */
  } /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 9 slow_hit_count: 78498, fast_hit_count: 0 */
} /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
bool x(int i) {} /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  int a, b, k; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> a >> b >> k; /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
  v.push_back(a - 1); /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = a; i <= b; i++) { /* line 16 slow_hit_count: 1000001, fast_hit_count: 2 */
    if (isPrime(i)) v.push_back(i); /* line 17 slow_hit_count: 1000000, fast_hit_count: 1 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  int ans = 0; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  v.push_back(b + 1); /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  if (k > v.size() - 2) { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
    cout << -1; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
    return 0; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i + k < v.size(); i++) { /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    ans = max(ans, v[i + k] - v[i]); /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - The `isPrime` function is called for every integer in the range from `a` to `b`. For the slow input (1 to 1,000,000), this results in 1,000,000 calls to the `isPrime` function (lines 4, 5, and 17).
   - Within `isPrime`, the loop on line 6 is particularly costly, with 67,818,902 iterations. This line is responsible for checking each number for primality, which requires iterating up to the square root of the number each time.
   - The line `if (x % j == 0) return false;` on line 7 is executed 67,740,404 times, which indicates many checks for divisibility, demonstrating the inefficiency in primality testing.

2. **Interaction with Data Structures and Loops:**
   - The vector `v` is used to store prime numbers, but the inefficiency lies in the process of populating `v` by checking each number in the given range for primality.
   - The primary bottleneck here is the nested loop within `isPrime`, which has a complexity of approximately O(n * sqrt(n)), where n is the number of integers in the range.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant on Prime Checking:**
   - Natural Language Description: "A significant slowdown occurs when the input range [a, b] is large, causing the isPrime function to be called a vast number of times, each with a nested loop up to the square root of the number being checked. This results in excessive computational effort when `b - a` approaches 1,000,000."
   
2. **Invariant on Large Prime List:**
   - Natural Language Description: "If the number of integers in the input range significantly exceeds the number of primes needed (k), the program will spend unnecessary time determining primality and collecting primes, especially when k is small relative to the size of the range."

3. **Invariant on Input Range Size:**
   - Natural Language Description: "The execution speed degrades when processing a large contiguous range of integers up to a high value (e.g., 1,000,000), due to the inefficiency of detecting primes within each sub-range."

4. **Invariant on Large k Relative to Range:**
   - Natural Language Description: "If k is equal to or greater than the number of integers in the input range, the computation will be inefficient as it processes a large input set to eventually determine an obvious result (-1), placing unnecessary load on the isPrime function."

### Conclusion

These invariants highlight the inefficient aspects of the program, particularly how the primality testing scales poorly with larger input sizes. This analysis can guide optimizations, such as implementing a more efficient prime-checking algorithm or using precomputed prime lists to avoid redundant calculations. By identifying these performance bottlenecks, improvements can be targeted to handle large input ranges more effectively.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Here are the performance checkers implemented in C++ for each of the natural language invariants derived earlier:

1. **Invariant on Prime Checking:**
   - Checks if the range `[a, b]` is large, which leads to excessive calls to the `isPrime` function.
   
   ```cpp
   void check_prime_call_invariant(int a, int b) {
       if (b - a > 100000) {  // Assume large ranges are problematic
           cerr << "Warning: Performance bottleneck - large range causing excessive prime checks!" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Large Prime List:**
   - Checks if the number of integers in the input range significantly exceeds the number of primes needed (k).
   
   ```cpp
   void check_large_range_vs_k_invariant(int a, int b, int k) {
       if ((b - a) > 100000 && k < 10) {  // Example threshold
           cerr << "Warning: Performance bottleneck - large range with small k!" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Input Range Size:**
   - Checks inefficiency when processing a large contiguous range of integers.
   
   ```cpp
   void check_large_input_range_invariant(int a, int b) {
       if (b > 1000000) {
           cerr << "Warning: Performance bottleneck - large input range!" << endl;
           abort();
       }
   }
   ```

4. **Invariant on Large k Relative to Range:**
   - Checks if `k` is equal to or greater than the number of integers in the input range.
   
   ```cpp
   void check_large_k_invariant(int a, int b, int k) {
       if (k >= (b - a + 1)) {
           cerr << "Warning: Performance bottleneck - k larger than the range!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checkers into the Program

Below is the instrumented C++ code with the performance checkers integrated at effective points:

```cpp
#include <bits/stdc++.h>
using namespace std;

vector<int> v;

bool isPrime(int x) {
    if (x == 1) return false;
    for (int j = 2; j * j <= x; j++) {
        if (x % j == 0) return false;
    }
    return true;
}

// Performance checkers
void check_prime_call_invariant(int a, int b) {
    if (b - a > 100000) {  // Assume large ranges are problematic
        cerr << "Warning: Performance bottleneck - large range causing excessive prime checks!" << endl;
        abort();
    }
}

void check_large_range_vs_k_invariant(int a, int b, int k) {
    if ((b - a) > 100000 && k < 10) {  // Example threshold
        cerr << "Warning: Performance bottleneck - large range with small k!" << endl;
        abort();
    }
}

void check_large_input_range_invariant(int a, int b) {
    if (b > 1000000) {
        cerr << "Warning: Performance bottleneck - large input range!" << endl;
        abort();
    }
}

void check_large_k_invariant(int a, int b, int k) {
    if (k >= (b - a + 1)) {
        cerr << "Warning: Performance bottleneck - k larger than the range!" << endl;
        abort();
    }
}

int main() {
    int a, b, k;
    cin >> a >> b >> k;
    
    // Integrate performance checkers
    check_prime_call_invariant(a, b);
    check_large_range_vs_k_invariant(a, b, k);
    check_large_input_range_invariant(a, b);
    check_large_k_invariant(a, b, k);

    v.push_back(a - 1);
    for (int i = a; i <= b; i++) {
        if (isPrime(i)) v.push_back(i);
    }
    int ans = 0;
    v.push_back(b + 1);
    if (k > v.size() - 2) {
        cout << -1;
        return 0;
    }
    for (int i = 0; i + k < v.size(); i++) {
        ans = max(ans, v[i + k] - v[i]);
    }
    cout << ans;
    return 0;
}
```

### Explanation

- Each checker is placed right after reading the inputs to ensure we avoid unnecessary computations if a performance bottleneck condition is identified early.
- The thresholds used in the checkers are based on assumptions informed by the potential inefficiencies identified in the analysis.
- These checks will help in detecting and aborting scenarios that might lead to performance issues, assisting in further optimization or debugging efforts.

