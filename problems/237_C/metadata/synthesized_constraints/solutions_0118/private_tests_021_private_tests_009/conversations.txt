system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
string binary(long long n) {
  string result;
  do result += '0' + (n & 1);
  while (n >>= 1);
  reverse(result.begin(), result.end());
  return result;
}
int countSubstr(const string& str, const string& sub) {
  if (sub.length() == 0) return 0;
  int count = 0;
  for (size_t offset = str.find(sub); offset != string::npos;
       offset = str.find(sub, offset + sub.length())) {
    ++count;
  }
  return count;
}
vector<bool> primes;
vector<int> primesCnt;
void seive(int a, int b) {
  primes = vector<bool>(b + 1, true);
  primesCnt = vector<int>(b, true);
  primes[0] = primes[1] = false;
  for (int i = 2; i * i <= b; i++) {
    for (int j = i; j * i <= b; j++) {
      primes[i * j] = false;
    }
  }
  primesCnt[0] = 0;
  for (decltype(b + 1)(i) = (1); (i) < (b + 1); (i)++) {
    primesCnt[i] = primesCnt[i - 1] + primes[i];
  }
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int a, b, k, ans = -1;
  cin >> a >> b >> k;
  seive(a, b);
  if (primesCnt[b] - primesCnt[a - 1] < k) {
    cout << ans;
    return 0;
  }
  int left = 0, right = b - a + 1, med;
  while (right > left + 1) {
    med = (right + left) / 2;
    bool can = true;
    int j = a + med - 1;
    while (j <= b) {
      if (primesCnt[j] - primesCnt[j - med] < k) {
        can = false;
        break;
      }
      j++;
    }
    if (can)
      right = med;
    else
      left = med;
  }
  cout << right;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1000000 1000000


(G.2) Fast Input

1 1 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
string binary(long long n) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  string result; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  do result += '0' + (n & 1); /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  while (n >>= 1); /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  reverse(result.begin(), result.end()); /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  return result; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int countSubstr(const string& str, const string& sub) { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  if (sub.length() == 0) return 0; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  int count = 0; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  for (size_t offset = str.find(sub); offset != string::npos; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
       offset = str.find(sub, offset + sub.length())) { /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
    ++count; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  return count; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
vector<bool> primes; /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> primesCnt; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
void seive(int a, int b) { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  primes = vector<bool>(b + 1, true); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  primesCnt = vector<int>(b, true); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  primes[0] = primes[1] = false; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i * i <= b; i++) { /* line 25 slow_hit_count: 1000, fast_hit_count: 1 */
    for (int j = i; j * i <= b; j++) { /* line 26 slow_hit_count: 5986516, fast_hit_count: 0 */
      primes[i * j] = false; /* line 27 slow_hit_count: 5985517, fast_hit_count: 0 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  primesCnt[0] = 0; /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  for (decltype(b + 1)(i) = (1); (i) < (b + 1); (i)++) { /* line 31 slow_hit_count: 1000001, fast_hit_count: 2 */
    primesCnt[i] = primesCnt[i - 1] + primes[i]; /* line 32 slow_hit_count: 1000000, fast_hit_count: 1 */
  } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(nullptr); /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  int a, b, k, ans = -1; /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> a >> b >> k; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  seive(a, b); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  if (primesCnt[b] - primesCnt[a - 1] < k) { /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
    cout << ans; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
    return 0; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  int left = 0, right = b - a + 1, med; /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  while (right > left + 1) { /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    med = (right + left) / 2; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    bool can = true; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    int j = a + med - 1; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
    while (j <= b) { /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      if (primesCnt[j] - primesCnt[j - med] < k) { /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
        can = false; /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
        break; /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 54 slow_hit_count: 0, fast_hit_count: 0 */
      j++; /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
    if (can) /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
      right = med; /* line 58 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
      left = med; /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  cout << right; /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 64 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Seive Function:**
   - The `seive` function, particularly the nested loops at lines 25-27, has significantly higher hit counts during the slow input run. Notably, line 26 and line 27 are executed 5,986,516 and 5,985,517 times, respectively.
   - This indicates the prime number sieve is computationally expensive, especially when dealing with the range from 1 to 1,000,000.

2. **Prime Count Calculation:**
   - The loop from line 31 to 32 is executed 1,000,001 times during the slow input run. This loop updates the cumulative prime counts for the range, and it is not hit significantly during the fast input due to the smaller input size.

3. **Overall Complexity:**
   - The complexity of the sieve algorithm is roughly O(n log log n), but given the input constraints (a ≤ b ≤ 10^6), it becomes a bottleneck for large ranges.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Prime Number Sieve Complexity:**
   - Natural Language Invariant: "When the range between a and b is large, the sieve of Eratosthenes becomes computationally intensive, slowing down the program due to the increased number of operations required to calculate prime numbers."

2. **Prime Count Computation:**
   - Natural Language Invariant: "If the difference between b and a approaches the upper limit of the input constraint, the cumulative calculation of prime counts across this range is repeated many times, contributing to the slowdown."

3. **Overall Input Size Impact:**
   - Natural Language Invariant: "The program's performance degrades significantly when the input range is vast, close to the maximum constraint, leading to extensive memory usage and increased computational effort for both prime sieving and prime count calculations."

### Summary

The primary performance bottleneck in the program is the computational intensity of the sieve function and the subsequent prime counting mechanism when the range between `a` and `b` is large. This results in massive hit counts in the nested loops of the sieve function. The inefficiency is amplified when `b - a` approaches 10^6, leading to slow execution due to the lengthy operations required to process such a range.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checker Code in C++

Based on the performance-characterizing invariants we identified, here's the C++ checker code for each invariant:

1. **Prime Number Sieve Complexity Checker:**
   ```cpp
   void check_sieve_invariant(int a, int b, int threshold) {
       if (b - a > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered - large range for sieve!" << endl;
           abort();
       }
   }
   ```

2. **Prime Count Calculation Checker:**
   ```cpp
   void check_prime_count_invariant(int a, int b, int threshold) {
       if (b - a > threshold) {
           cerr << "Warning: Performance bottleneck condition triggered - excessive prime count calculation!" << endl;
           abort();
       }
   }
   ```

3. **Overall Input Size Impact Checker:**
   ```cpp
   void check_input_size_invariant(int a, int b, int maxLimit) {
       if (b - a + 1 > maxLimit) {
           cerr << "Warning: Performance bottleneck condition triggered - input size too large!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checker Code into the Original Program

Here is the original C++ solution with the newly added checker functions:

```cpp
#include <bits/stdc++.h>
using namespace std;

vector<bool> primes;
vector<int> primesCnt;

void check_sieve_invariant(int a, int b, int threshold) {
    if (b - a > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - large range for sieve!" << endl;
        abort();
    }
}

void check_prime_count_invariant(int a, int b, int threshold) {
    if (b - a > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive prime count calculation!" << endl;
        abort();
    }
}

void check_input_size_invariant(int a, int b, int maxLimit) {
    if (b - a + 1 > maxLimit) {
        cerr << "Warning: Performance bottleneck condition triggered - input size too large!" << endl;
        abort();
    }
}

void seive(int a, int b) {
    primes = vector<bool>(b + 1, true);
    primesCnt = vector<int>(b, true);
    primes[0] = primes[1] = false;
    for (int i = 2; i * i <= b; i++) {
        for (int j = i; j * i <= b; j++) {
            primes[i * j] = false;
        }
    }
    primesCnt[0] = 0;
    for (decltype(b + 1)(i) = (1); (i) < (b + 1); (i)++) {
        primesCnt[i] = primesCnt[i - 1] + primes[i];
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int a, b, k, ans = -1;
    cin >> a >> b >> k;

    // Checker invocations
    check_sieve_invariant(a, b, 500000); // Checking sieve complexity
    check_prime_count_invariant(a, b, 500000); // Checking prime count calculation complexity
    check_input_size_invariant(a, b, 1000000); // Checking overall input size

    seive(a, b);
    if (primesCnt[b] - primesCnt[a - 1] < k) {
        cout << ans;
        return 0;
    }

    int left = 0, right = b - a + 1, med;
    while (right > left + 1) {
        med = (right + left) / 2;
        bool can = true;
        int j = a + med - 1;
        while (j <= b) {
            if (primesCnt[j] - primesCnt[j - med] < k) {
                can = false;
                break;
            }
            j++;
        }
        if (can)
            right = med;
        else
            left = med;
    }
    cout << right;
    return 0;
}
```

### Explanation of Inserted Checks

- **check_sieve_invariant**: Before executing the sieve logic, this check ensures that the range is not too large, which would slow down the sieve operation.
- **check_prime_count_invariant**: This check is placed to ensure the subsequent prime counting calculations are not performed on excessively large ranges.
- **check_input_size_invariant**: This is a general safeguard to ensure the inputs do not exceed size constraints that would lead to performance issues. 

These checks help identify the conditions under which the program might slow down significantly, thereby aiding in performance tuning and debugging.

