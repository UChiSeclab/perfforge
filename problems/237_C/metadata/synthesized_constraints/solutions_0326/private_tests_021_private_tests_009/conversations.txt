system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
map<long long, long long> m;
long long a, b, k, ans;
vector<long long> v;
bool ckprm(long long x) {
  if (x < 2)
    return false;
  else if (x == 2 or x == 3)
    return true;
  for (long long j = 2; j * j <= x; j++) {
    if (x % j == 0) return false;
  }
  return true;
}
int main() {
  cin >> a >> b >> k;
  v.push_back(a - 1);
  for (long long i = a; i <= b; i++) {
    if (ckprm(i)) {
      v.push_back(i);
    }
  }
  v.push_back(b + 1);
  if (v.size() - 2 < k)
    cout << -1;
  else {
    for (long long i = 0; i <= v.size() - 1 - k; i++) {
      ans = max(ans, v[i + k] - v[i]);
    }
    cout << ans;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1000000 1000000


(G.2) Fast Input

1 1 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
map<long long, long long> m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long a, b, k, ans; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
vector<long long> v; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool ckprm(long long x) { /* line 6 slow_hit_count: 1000000, fast_hit_count: 1 */
  if (x < 2) /* line 7 slow_hit_count: 1000000, fast_hit_count: 1 */
    return false; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  else if (x == 2 or x == 3) /* line 9 slow_hit_count: 999999, fast_hit_count: 0 */
    return true; /* line 10 slow_hit_count: 2, fast_hit_count: 0 */
  for (long long j = 2; j * j <= x; j++) { /* line 11 slow_hit_count: 67818900, fast_hit_count: 0 */
    if (x % j == 0) return false; /* line 12 slow_hit_count: 67740404, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 14 slow_hit_count: 78496, fast_hit_count: 0 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> a >> b >> k; /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  v.push_back(a - 1); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = a; i <= b; i++) { /* line 19 slow_hit_count: 1000001, fast_hit_count: 2 */
    if (ckprm(i)) { /* line 20 slow_hit_count: 1000000, fast_hit_count: 1 */
      v.push_back(i); /* line 21 slow_hit_count: 78498, fast_hit_count: 0 */
    } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  v.push_back(b + 1); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  if (v.size() - 2 < k) /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    cout << -1; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  else { /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long i = 0; i <= v.size() - 1 - k; i++) { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
      ans = max(ans, v[i + k] - v[i]); /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans; /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

### Analysis:

1. **Hit Count Comparison**:
   - The function `ckprm()` is called **1,000,000 times** during the slow input execution, compared to just once for the fast input. This indicates a significant performance bottleneck.
   - Within `ckprm()`, the loop on line 11 (`for (long long j = 2; j * j <= x; j++)`) is executed **67,818,900 times** during the slow execution, which is substantial.

2. **Code Interaction with Data Structures**:
   - The vector `v` is used to store prime numbers between `a` and `b`. For the slow input, the range is large (`1` to `1,000,000`), leading to frequent calls to `ckprm()` and consequentially many iterations of the inner loop.
   - The loop to fill `v` (lines 19-21) is influenced by the size of the range `[a, b]` and is a significant source of inefficiency because it involves the computationally expensive prime number check.

3. **Loop and Range Analysis**:
   - The outer loop runs from `a` to `b` (lines 19-23), which is a significant size in the slow input case, leading to repeated execution of the `ckprm()` function.
   - The inner loop in `ckprm()` (`for (long long j = 2; j * j <= x; j++)`) increases execution time due to its nature of checking for primality, which is inherently slow for larger numbers.

## Phase 2: Derive Performance-Characterizing Invariants

### Natural Language Statements:

1. **Large Range of Numbers**: 
   - "When the range [a, b] is large, the program spends considerable time checking for prime numbers, particularly when the entire range or most of it needs to be processed."

2. **Prime Number Checking**:
   - "If a large number of elements need to be checked for primality due to a wide range or high value of `k`, the computation becomes expensive due to repeated primality testing."

3. **High Value of `k`**:
   - "For high values of `k`, especially close to or equal to `b - a + 1`, the requirement for `k` primes within a subset increases, causing more iterations and checks within the range, leading to slow execution."

4. **Non-Optimal Early Termination**:
   - "The absence of early termination when a valid `l` is found for large inputs results in unnecessary continued checks which slow down the program."

These statements focus on highlighting the main contributors to slow execution: the size of the range `[a, b]`, the primality checks performed, and the value of `k`. The performance issues arise when these factors align unfavorably, especially with large ranges and `k` values approaching `(b - a + 1)`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

Solution (C++ code):
{solution}


assistant: Let's proceed with implementing and integrating the checks based on the performance-characterizing invariants derived earlier.

## Phase 3: Implement Performance-Characterizing Invariants in C++

### Invariant Checkers:

1. **Large Range of Numbers**:
   - Check if the range `[a, b]` is large, which could trigger unnecessary prime checks.

```cpp
void check_large_range_invariant(long long a, long long b) {
    if (b - a > 1e6) { // Assuming 1e6 is a reasonable threshold for large range
        cerr << "Warning: large_range_invariant triggered - Range [a, b] is too large." << endl;
        abort();
    }
}
```

2. **Prime Number Checking**:
   - Ensure that the number of primality checks does not become excessive.

```cpp
void check_prime_check_invariant(long long range, long long k) {
    if (range > 1e6 && k > 1000) { // Hypothetical threshold, adjust as needed
        cerr << "Warning: prime_check_invariant triggered - Excessive primality checks expected." << endl;
        abort();
    }
}
```

3. **High Value of `k`**:
   - Verify that `k` is not too close to the size of the range, leading to inefficiencies.

```cpp
void check_high_k_invariant(long long a, long long b, long long k) {
    if (k >= (b - a + 1) - 1) { // Adjust threshold if needed
        cerr << "Warning: high_k_invariant triggered - High value of k relative to range size." << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checkers into the Original Program

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_large_range_invariant(long long a, long long b) {
    if (b - a > 1e6) {
        cerr << "Warning: large_range_invariant triggered - Range [a, b] is too large." << endl;
        abort();
    }
}

void check_prime_check_invariant(long long range, long long k) {
    if (range > 1e6 && k > 1000) {
        cerr << "Warning: prime_check_invariant triggered - Excessive primality checks expected." << endl;
        abort();
    }
}

void check_high_k_invariant(long long a, long long b, long long k) {
    if (k >= (b - a + 1) - 1) {
        cerr << "Warning: high_k_invariant triggered - High value of k relative to range size." << endl;
        abort();
    }
}

map<long long, long long> m;
long long a, b, k, ans;
vector<long long> v;

bool ckprm(long long x) {
    if (x < 2)
        return false;
    else if (x == 2 or x == 3)
        return true;
    for (long long j = 2; j * j <= x; j++) {
        if (x % j == 0) return false;
    }
    return true;
}

int main() {
    cin >> a >> b >> k;
    
    // Apply invariants checks
    check_large_range_invariant(a, b);
    check_prime_check_invariant(b - a + 1, k);
    check_high_k_invariant(a, b, k);

    v.push_back(a - 1);
    for (long long i = a; i <= b; i++) {
        if (ckprm(i)) {
            v.push_back(i);
        }
    }
    v.push_back(b + 1);
    if (v.size() - 2 < k)
        cout << -1;
    else {
        for (long long i = 0; i <= v.size() - 1 - k; i++) {
            ans = max(ans, v[i + k] - v[i]);
        }
        cout << ans;
    }
}
```

### Explanation:

- **Check Placement**: Each checker function is called after reading the inputs and before entering the main computational loop. This avoids adding overhead inside performance-critical loops.
- **Checker Functions**: The checkers are designed to detect conditions that cause performance bottlenecks, such as overly large ranges, excessive primality checks, or a high `k` value relative to the range size.
- **Error Handling**: When any check is triggered, an error message is printed, and the program is aborted, which is useful for identifying performance issues during fuzz testing or profiling.

