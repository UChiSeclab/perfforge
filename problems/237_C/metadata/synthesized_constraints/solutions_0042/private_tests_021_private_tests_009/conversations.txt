system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a, b, k, l = 1;
int lEnd, xEnd;
int arr[1000002];
int m = -1;
int start = 1, en;
bool flag;
int srch(int s, int e) { return (s + e) / 2; }
bool check(int p) {
  if (p < 2) return false;
  if (p == 2) return true;
  for (int i = 2; i <= sqrt(p); i++) {
    if ((p % i) == 0) return false;
  }
  return true;
}
int main() {
  scanf("%d%d%d", &a, &b, &k);
  arr[a] = 0;
  lEnd = b - a + 1;
  m = -1;
  int h;
  en = lEnd;
  start = 1;
  l = (start + en) / 2;
  h = en;
  int cnt = 0;
  bool flag;
  while (start <= en || start == (en + 2)) {
    xEnd = b - l + 1;
    for (int i = a + cnt; i <= xEnd + l; i++) {
      if (check(i))
        arr[i + 1] = arr[i] + 1;
      else
        arr[i + 1] = arr[i];
      cnt++;
    }
    en = h;
    for (int i = a; i <= xEnd; i++) {
      if (arr[i + l] - arr[i] >= k)
        flag = true;
      else {
        flag = false;
        break;
      }
    }
    if (flag) {
      m = l;
      en = l - 1;
      l = (l - 1 + start) / 2;
    } else {
      start = l + 1;
      l = (en + l + 1) / 2;
    }
  }
  printf("%d", m);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1000000 1000000


(G.2) Fast Input

1 1 1000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a, b, k, l = 1; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int lEnd, xEnd; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int arr[1000002]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int m = -1; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int start = 1, en; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
bool flag; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
int srch(int s, int e) { return (s + e) / 2; } /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
bool check(int p) { /* line 10 slow_hit_count: 1000001, fast_hit_count: 2 */
  if (p < 2) return false; /* line 11 slow_hit_count: 1000001, fast_hit_count: 2 */
  if (p == 2) return true; /* line 12 slow_hit_count: 1000000, fast_hit_count: 1 */
  for (int i = 2; i <= sqrt(p); i++) { /* line 13 slow_hit_count: 67819001, fast_hit_count: 0 */
    if ((p % i) == 0) return false; /* line 14 slow_hit_count: 67740504, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 16 slow_hit_count: 78497, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d%d", &a, &b, &k); /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
  arr[a] = 0; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  lEnd = b - a + 1; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  m = -1; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  int h; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  en = lEnd; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  start = 1; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  l = (start + en) / 2; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  h = en; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  int cnt = 0; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  bool flag; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  while (start <= en || start == (en + 2)) { /* line 30 slow_hit_count: 21, fast_hit_count: 2 */
    xEnd = b - l + 1; /* line 31 slow_hit_count: 20, fast_hit_count: 1 */
    for (int i = a + cnt; i <= xEnd + l; i++) { /* line 32 slow_hit_count: 1000021, fast_hit_count: 3 */
      if (check(i)) /* line 33 slow_hit_count: 1000001, fast_hit_count: 2 */
        arr[i + 1] = arr[i] + 1; /* line 34 slow_hit_count: 78498, fast_hit_count: 1 */
      else /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
        arr[i + 1] = arr[i]; /* line 36 slow_hit_count: 921503, fast_hit_count: 1 */
      cnt++; /* line 37 slow_hit_count: 1000001, fast_hit_count: 2 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    en = h; /* line 39 slow_hit_count: 20, fast_hit_count: 1 */
    for (int i = a; i <= xEnd; i++) { /* line 40 slow_hit_count: 20, fast_hit_count: 1 */
      if (arr[i + l] - arr[i] >= k) /* line 41 slow_hit_count: 20, fast_hit_count: 1 */
        flag = true; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      else { /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
        flag = false; /* line 44 slow_hit_count: 20, fast_hit_count: 1 */
        break; /* line 45 slow_hit_count: 20, fast_hit_count: 1 */
      } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    if (flag) { /* line 48 slow_hit_count: 20, fast_hit_count: 1 */
      m = l; /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
      en = l - 1; /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      l = (l - 1 + start) / 2; /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
    } else { /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
      start = l + 1; /* line 53 slow_hit_count: 20, fast_hit_count: 1 */
      l = (en + l + 1) / 2; /* line 54 slow_hit_count: 20, fast_hit_count: 1 */
    } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d", m); /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 59 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the performance of the given C code and understand why it runs slowly for certain inputs, we need to first identify the critical code segments that lead to performance bottlenecks. Then, we will derive performance-characterizing invariants in natural language.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-level Hit Counts:**
   - **Line 13:** The `for` loop inside the `check` function has an extraordinarily high hit count (67,819,001 for the slow input and 0 for the fast input). This loop checks if a number is prime by trying to divide it by every number up to its square root.
   - **Line 14:** Similarly, this line, which executes the modulus operation, has a very high hit count (67,740,504 for the slow input and 0 for the fast input).
   - **Line 32:** This `for` loop in `main` is hit 1,000,021 times for the slow input compared to just 3 times for the fast input.
   - **Line 33:** The call to `check(i)` has 1,000,001 hits for the slow input versus 2 for the fast input.

2. **Inefficient Operations:**
   - The main inefficiency arises from the repeated calls to the `check` function to determine if numbers are prime. This is computationally expensive given the constraints, particularly when `b` is large (up to 1,000,000 in this case).

3. **Interaction with Data Structures:**
   - The array `arr` is used to store cumulative counts of primes, which is then utilized to determine if each segment of length `l` contains at least `k` primes. Given the maximum size of `arr` (1,000,002), operations on it can become expensive.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the natural language performance invariants:

1. **Prime Checking Bottleneck:**
   - **Invariant:** "When the range of numbers [a, b] is large, the repeated checks for prime numbers become computationally expensive, causing significant slowdowns."
   - **Explanation:** The performance bottleneck is primarily due to the large number of numbers for which primality is checked, especially since the `check` function involves a loop up to the square root of each number.

2. **Large Range with High Prime Requirement:**
   - **Invariant:** "If the range [a, b] is large and the requirement `k` for primes in each segment is high, the computational effort needed to verify each segment increases significantly."
   - **Explanation:** The algorithm checks each possible segment within [a, b], and if `k` is large, more segments need to be checked thoroughly for prime content.

3. **Inefficient Use of Cumulative Prime Count Array:**
   - **Invariant:** "When the input range [a, b] approaches its upper limit, and the computation involves updating a large cumulative prime count array, it may lead to slow performance."
   - **Explanation:** The cumulative updates to the `arr` array for each number in the range contribute to the computational load.

4. **Binary Search Over Large Domain:**
   - **Invariant:** "If the length of the domain (b - a + 1) is large, the binary search mechanism used to find the minimum segment length may lead to numerous iterations and degrade performance."
   - **Explanation:** The binary search is supposed to optimize the search for the minimum `l`, but in a large domain, each iteration itself involves significant computation.

These invariants help understand potential slow scenarios and can guide optimization efforts. By abstracting performance constraints, we ensure future inputs that hit similar conditions could be identified and addressed.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
You've decided to carry out a survey in the theory of prime numbers. Let us remind you that a prime number is a positive integer that has exactly two distinct positive integer divisors.

Consider positive integers a, a + 1, ..., b (a ≤ b). You want to find the minimum integer l (1 ≤ l ≤ b - a + 1) such that for any integer x (a ≤ x ≤ b - l + 1) among l integers x, x + 1, ..., x + l - 1 there are at least k prime numbers. 

Find and print the required minimum l. If no value l meets the described limitations, print -1.

Input

A single line contains three space-separated integers a, b, k (1 ≤ a, b, k ≤ 106; a ≤ b).

Output

In a single line print a single integer — the required minimum l. If there's no solution, print -1.

Examples

Input

2 4 2


Output

3


Input

6 13 1


Output

4


Input

1 4 3


Output

-1

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Checker Code in C++

Let's convert the performance-characterizing invariants identified earlier into checker functions or statements in C++.

#### Invariant 1: Prime Checking Bottleneck

```cpp
void check_prime_calculation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive prime checking!" << endl;
        abort();
    }
}
```

#### Invariant 2: Large Range with High Prime Requirement

```cpp
void check_large_range_high_prime_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large range with high prime requirement!" << endl;
        abort();
    }
}
```

#### Invariant 3: Inefficient Use of Cumulative Prime Count Array

```cpp
void check_cumulative_prime_count_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient cumulative prime count!" << endl;
        abort();
    }
}
```

#### Invariant 4: Binary Search Over Large Domain

```cpp
void check_large_domain_binary_search_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - binary search over large domain!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original C++ Program

Here is the instrumented version of the original C++ code with performance-characterizing checks integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions for performance characterizations
void check_prime_calculation_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive prime checking!" << endl;
        abort();
    }
}

void check_large_range_high_prime_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - large range with high prime requirement!" << endl;
        abort();
    }
}

void check_cumulative_prime_count_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient cumulative prime count!" << endl;
        abort();
    }
}

void check_large_domain_binary_search_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - binary search over large domain!" << endl;
        abort();
    }
}

// Prime number checker
bool check(int p) {
    if (p < 2) return false;
    if (p == 2) return true;
    for (int i = 2; i <= sqrt(p); i++) {
        if ((p % i) == 0) return false;
    }
    return true;
}

int main() {
    int a, b, k, l = 1;
    scanf("%d%d%d", &a, &b, &k);

    // Performance check: large domain with high prime requirement
    check_large_range_high_prime_invariant((b - a + 1) > 100000 && k > 500);

    // Initialize array and auxiliary variables
    int arr[1000002];
    arr[a] = 0;
    int lEnd = b - a + 1;
    int m = -1;
    int h;
    int en = lEnd;
    int start = 1;
    l = (start + en) / 2;
    h = en;
    int cnt = 0;

    while (start <= en || start == (en + 2)) {
        int xEnd = b - l + 1;
        
        // Performance check: inefficient cumulative prime count
        check_cumulative_prime_count_invariant((xEnd + l) > 1000000);

        for (int i = a + cnt; i <= xEnd + l; i++) {
            // Performance check: prime calculation bottleneck
            check_prime_calculation_invariant((i - a) > 1000000);

            if (check(i))
                arr[i + 1] = arr[i] + 1;
            else
                arr[i + 1] = arr[i];
            cnt++;
        }

        en = h;
        bool flag;
        for (int i = a; i <= xEnd; i++) {
            if (arr[i + l] - arr[i] >= k)
                flag = true;
            else {
                flag = false;
                break;
            }
        }

        if (flag) {
            m = l;
            en = l - 1;
            l = (l - 1 + start) / 2;
        } else {
            start = l + 1;
            l = (en + l + 1) / 2;
        }
    }

    // Performance check: binary search over large domain
    check_large_domain_binary_search_invariant((b - a + 1) > 1000000);

    printf("%d", m);
    return 0;
}
```

### Summary

This instrumented code integrates the performance-characterizing checks at strategic points in the program. Each check is designed to capture and alert for specific performance bottlenecks based on the identified invariants. These checks help in identifying conditions that lead to slow performance, providing valuable information for testing and optimization efforts.

