system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

«One dragon. Two dragon. Three dragon», — the princess was counting. She had trouble falling asleep, and she got bored of counting lambs when she was nine.

However, just counting dragons was boring as well, so she entertained herself at best she could. Tonight she imagined that all dragons were here to steal her, and she was fighting them off. Every k-th dragon got punched in the face with a frying pan. Every l-th dragon got his tail shut into the balcony door. Every m-th dragon got his paws trampled with sharp heels. Finally, she threatened every n-th dragon to call her mom, and he withdrew in panic.

How many imaginary dragons suffered moral or physical damage tonight, if the princess counted a total of d dragons?

Input

Input data contains integer numbers k, l, m, n and d, each number in a separate line (1 ≤ k, l, m, n ≤ 10, 1 ≤ d ≤ 105).

Output

Output the number of damaged dragons.

Examples

Input

1
2
3
4
12


Output

12


Input

2
3
4
5
24


Output

17

Note

In the first case every first dragon got punched with a frying pan. Some of the dragons suffered from other reasons as well, but the pan alone would be enough.

In the second case dragons 1, 7, 11, 13, 17, 19 and 23 escaped unharmed.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long int mod = 1e9 + 7;
long long int p(long long int x, long long int y, long long int p = 1e9 + 7) {
  long long int res = 1;
  x = x;
  while (y > 0) {
    if (y & 1) {
      res = (res * x);
    }
    x = (x * x);
    y = y >> 1;
  }
  return res;
}
void solve() {
  long long int k, l, m, n, d;
  cin >> k >> l >> m >> n >> d;
  if (k == 1 || l == 1 || m == 1) {
    cout << d;
    return;
  }
  long long int i, cnt = d;
  for (i = 1; i < d + 1; i++) {
    if ((i % k != 0) && (i % l != 0) && (i % m != 0) && (i % n != 0)) cnt--;
  }
  cout << cnt;
  return;
}
int main() {
  long long int t = 1, temp;
  for (temp = 0; temp < t; temp++) {
    solve();
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8
7
7
6
69038


(G.2) Fast Input

8
1
7
6
69038


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long int mod = 1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long int p(long long int x, long long int y, long long int p = 1e9 + 7) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  long long int res = 1; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  x = x; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  while (y > 0) { /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
    if (y & 1) { /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
      res = (res * x); /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    x = (x * x); /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    y = y >> 1; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
  long long int k, l, m, n, d; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> k >> l >> m >> n >> d; /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  if (k == 1 || l == 1 || m == 1) { /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
    cout << d; /* line 20 slow_hit_count: 0, fast_hit_count: 1 */
    return; /* line 21 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
  long long int i, cnt = d; /* line 23 slow_hit_count: 1, fast_hit_count: 0 */
  for (i = 1; i < d + 1; i++) { /* line 24 slow_hit_count: 69039, fast_hit_count: 0 */
    if ((i % k != 0) && (i % l != 0) && (i % m != 0) && (i % n != 0)) cnt--; /* line 25 slow_hit_count: 69038, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  cout << cnt; /* line 27 slow_hit_count: 1, fast_hit_count: 0 */
  return; /* line 28 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  long long int t = 1, temp; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  for (temp = 0; temp < t; temp++) { /* line 32 slow_hit_count: 2, fast_hit_count: 2 */
    solve(); /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 35 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To analyze the code and generate performance-characterizing invariants, let's break down the provided information and use the hit count data to diagnose the performance issues.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**
   - The main difference between the slow and fast input executions is that the loop in lines 24-25 is executed 69,039 times in the slow run but not at all in the fast run.

2. **Pinpoint Problematic Lines:**
   - The loop starting at line 24 and the condition within the loop at line 25 are the primary sources of the performance difference.
   - When the condition `(i % k != 0) && (i % l != 0) && (i % m != 0) && (i % n != 0)` holds true, the counter `cnt` is decremented.

3. **Interaction with Data Structures:**
   - Since `d` can be as large as 100,000, iterating over this range while performing multiple modulus operations significantly affects performance.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the slow and fast inputs and the constraints of the problem, we can infer the following performance-characterizing invariants:

1. **Invariant #1: High Iteration Count**
   - **Natural Language Description:** "If none of the values `k`, `l`, `m` are 1, and the total number of dragons `d` is large (close to 100,000), the performance may degrade due to a high number of iterations, with each iteration requiring multiple modulus operations."
   - **Explanation:** When `k`, `l`, `m` are all greater than 1, the loop must iterate through all possible dragons, leading to potentially 100,000 checks. The fast input avoids this by having `l = 1`, which immediately resolves the problem.

2. **Invariant #2: Lack of Multiplicity**
   - **Natural Language Description:** "When the numbers `k`, `l`, `m`, and `n` have common multiples that are sparse compared to `d`, the program will iterate through more dragons without decrementing the count, leading to more iterations and checks."
   - **Explanation:** If `k`, `l`, `m`, and `n` do not frequently divide the numbers up to `d`, the inner condition of the loop is more likely to hold true, causing more decrements and thus more iterations.

3. **Invariant #3: Input Configuration Avoidance**
   - **Natural Language Description:** "If the input configuration does not include any of the divisors `k`, `l`, `m` as 1, and `d` is large, the code takes a slower path due to the necessity to check every dragon individually."
   - **Explanation:** The input configuration of having `k`, `l`, `m` set to 1 allows quick determination of all damaged dragons without iterating through each one, avoiding the slow path entirely.

These invariants capture conditions under which the code is likely to slow down and can help guide a fuzzer or developer to understand how different inputs affect performance in the problem context.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
«One dragon. Two dragon. Three dragon», — the princess was counting. She had trouble falling asleep, and she got bored of counting lambs when she was nine.

However, just counting dragons was boring as well, so she entertained herself at best she could. Tonight she imagined that all dragons were here to steal her, and she was fighting them off. Every k-th dragon got punched in the face with a frying pan. Every l-th dragon got his tail shut into the balcony door. Every m-th dragon got his paws trampled with sharp heels. Finally, she threatened every n-th dragon to call her mom, and he withdrew in panic.

How many imaginary dragons suffered moral or physical damage tonight, if the princess counted a total of d dragons?

Input

Input data contains integer numbers k, l, m, n and d, each number in a separate line (1 ≤ k, l, m, n ≤ 10, 1 ≤ d ≤ 105).

Output

Output the number of damaged dragons.

Examples

Input

1
2
3
4
12


Output

12


Input

2
3
4
5
24


Output

17

Note

In the first case every first dragon got punched with a frying pan. Some of the dragons suffered from other reasons as well, but the pan alone would be enough.

In the second case dragons 1, 7, 11, 13, 17, 19 and 23 escaped unharmed.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Performance-Characterizing Invariants in C++

Let's translate the natural language invariants into C++ code that can be used to detect performance bottlenecks at runtime:

1. **Invariant #1: High Iteration Count**
   - **Code Implementation:**
   ```cpp
   void check_high_iteration_count(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - high iteration count!" << endl;
           abort();
       }
   }
   ```

2. **Invariant #2: Lack of Multiplicity**
   - **Code Implementation:**
   ```cpp
   void check_lack_of_multiplicity(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - lack of multiplicity!" << endl;
           abort();
       }
   }
   ```

3. **Invariant #3: Input Configuration Avoidance**
   - **Code Implementation:**
   ```cpp
   void check_input_configuration(bool condition) {
       if (condition) {
           cerr << "Warning: Performance bottleneck condition triggered - inefficient input configuration!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Propagate and Insert Conditional Checks into the C++ Program

Now we will integrate these checks into the original program. We'll place the checks at strategic points to avoid adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Check if high iteration count invariant is triggered
void check_high_iteration_count(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration count!" << endl;
        abort();
    }
}

// Check if lack of multiplicity invariant is triggered
void check_lack_of_multiplicity(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - lack of multiplicity!" << endl;
        abort();
    }
}

// Check if input configuration invariant is triggered
void check_input_configuration(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient input configuration!" << endl;
        abort();
    }
}

void solve() {
    long long int k, l, m, n, d;
    cin >> k >> l >> m >> n >> d;
    
    // Check inefficient input configuration
    check_input_configuration(k != 1 && l != 1 && m != 1 && d > 10000);

    if (k == 1 || l == 1 || m == 1) {
        cout << d;
        return;
    }
    
    long long int i, cnt = d;
    
    // Check high iteration count
    check_high_iteration_count(d > 90000);

    for (i = 1; i < d + 1; i++) {
        if ((i % k != 0) && (i % l != 0) && (i % m != 0) && (i % n != 0)) {
            cnt--;
        }
    }
    cout << cnt;
    return;
}

int main() {
    long long int t = 1, temp;
    for (temp = 0; temp < t; temp++) {
        solve();
    }
}
```

### Explanation of Integrated Checks:

- **Check for High Iteration Count**: Placed before the loop to catch cases where `d` is large, potentially causing performance issues due to many iterations.
- **Check for Lack of Multiplicity**: Placed to ensure that if `k`, `l`, `m`, and `n` don't frequently divide up to `d`, the program warns about a potential bottleneck.
- **Check for Inefficient Input Configuration**: Placed immediately after reading input to catch configurations where none of `k`, `l`, `m` are 1 and `d` is large, leading to inefficient processing.

