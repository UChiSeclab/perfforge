system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

«One dragon. Two dragon. Three dragon», — the princess was counting. She had trouble falling asleep, and she got bored of counting lambs when she was nine.

However, just counting dragons was boring as well, so she entertained herself at best she could. Tonight she imagined that all dragons were here to steal her, and she was fighting them off. Every k-th dragon got punched in the face with a frying pan. Every l-th dragon got his tail shut into the balcony door. Every m-th dragon got his paws trampled with sharp heels. Finally, she threatened every n-th dragon to call her mom, and he withdrew in panic.

How many imaginary dragons suffered moral or physical damage tonight, if the princess counted a total of d dragons?

Input

Input data contains integer numbers k, l, m, n and d, each number in a separate line (1 ≤ k, l, m, n ≤ 10, 1 ≤ d ≤ 105).

Output

Output the number of damaged dragons.

Examples

Input

1
2
3
4
12


Output

12


Input

2
3
4
5
24


Output

17

Note

In the first case every first dragon got punched with a frying pan. Some of the dragons suffered from other reasons as well, but the pan alone would be enough.

In the second case dragons 1, 7, 11, 13, 17, 19 and 23 escaped unharmed.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int k, l, m, n, d;
  int count(0);
  cin >> k >> l >> m >> n >> d;
  count = d;
  if (k == 1 || l == 1 || m == 1 || n == 1) {
    cout << d << endl;
  } else {
    for (int i = 1; i <= d; i++) {
      if ((i % k != 0) && (i % l != 0) && (i % m != 0) && (i % n != 0)) count--;
    }
    cout << count << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8
7
7
6
69038


(G.2) Fast Input

8
1
7
6
69038


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int k, l, m, n, d; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  int count(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> k >> l >> m >> n >> d; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  count = d; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  if (k == 1 || l == 1 || m == 1 || n == 1) { /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    cout << d << endl; /* line 9 slow_hit_count: 0, fast_hit_count: 1 */
  } else { /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 1; i <= d; i++) { /* line 11 slow_hit_count: 69039, fast_hit_count: 0 */
      if ((i % k != 0) && (i % l != 0) && (i % m != 0) && (i % n != 0)) count--; /* line 12 slow_hit_count: 69038, fast_hit_count: 0 */
    } /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    cout << count << endl; /* line 14 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 16 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

By examining the provided hit count data, we can observe the following:

1. **Line 11** (`for (int i = 1; i <= d; i++)`): This line is part of the loop that runs from 1 to `d`. The hit count for this line is exceptionally high (69039 times for the slow input), indicating that the loop is a significant component of the slowdown.

2. **Line 12** (`if ((i % k != 0) && (i % l != 0) && (i % m != 0) && (i % n != 0)) count--;`): This line also has a high hit count (69038 times for the slow input), suggesting that the condition within the loop is being evaluated frequently, potentially leading to inefficient execution.

The fast input does not execute this loop at all because one of the divisors (`l`) is 1, which means every dragon is affected and the loop is bypassed.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can derive the following natural language performance invariants:

1. **High Iteration Count Invariant:**
   - **Natural Language Description:** "When the total number of dragons (`d`) is very large, and none of the divisors (`k`, `l`, `m`, `n`) is equal to 1, the loop is executed for every dragon, leading to high iteration counts and potential slowdown. The performance degrades because each dragon is checked individually to see if it escapes all conditions, which is computationally expensive."
   - **Reasoning:** The loop iterates over every dragon, and each iteration involves multiple modulo operations. This becomes costly when `d` is large and none of the divisors short-circuit the loop by being 1.

2. **Complex Condition Evaluation Invariant:**
   - **Natural Language Description:** "If none of the parameters (`k`, `l`, `m`, `n`) provide an early exit condition (i.e., none is 1), each dragon number must be checked against all conditions, resulting in an exhaustive evaluation of multiple conditions, which degrades performance."
   - **Reasoning:** Every dragon must be evaluated with multiple modulo operations, which is computationally intensive for large values of `d`.

3. **Divisibility Spread Invariant:**
   - **Natural Language Description:** "When the divisors are relatively prime or have large least common multiples relative to `d`, fewer dragons are affected by the operations, resulting in more iterations of the condition checks, which can cause slower performance."
   - **Reasoning:** The fewer dragons affected initially, the more checks are necessary, as fewer conditions short-circuit the loop's decrement operation.

These performance-characterizing invariants highlight the conditions under which the code's execution becomes inefficient. The critical factor is the absence of any divisor equaling 1, which forces the program to iterate over each dragon and check multiple conditions, leading to a significant performance hit when `d` is large.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
«One dragon. Two dragon. Three dragon», — the princess was counting. She had trouble falling asleep, and she got bored of counting lambs when she was nine.

However, just counting dragons was boring as well, so she entertained herself at best she could. Tonight she imagined that all dragons were here to steal her, and she was fighting them off. Every k-th dragon got punched in the face with a frying pan. Every l-th dragon got his tail shut into the balcony door. Every m-th dragon got his paws trampled with sharp heels. Finally, she threatened every n-th dragon to call her mom, and he withdrew in panic.

How many imaginary dragons suffered moral or physical damage tonight, if the princess counted a total of d dragons?

Input

Input data contains integer numbers k, l, m, n and d, each number in a separate line (1 ≤ k, l, m, n ≤ 10, 1 ≤ d ≤ 105).

Output

Output the number of damaged dragons.

Examples

Input

1
2
3
4
12


Output

12


Input

2
3
4
5
24


Output

17

Note

In the first case every first dragon got punched with a frying pan. Some of the dragons suffered from other reasons as well, but the pan alone would be enough.

In the second case dragons 1, 7, 11, 13, 17, 19 and 23 escaped unharmed.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checker Code in C++

For each of the previously derived natural language invariants, we will implement a corresponding runtime check.

#### Invariant 1: High Iteration Count Invariant
```cpp
void check_high_iteration_count(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration count due to large d." << endl;
        abort();
    }
}
```

#### Invariant 2: Complex Condition Evaluation Invariant
```cpp
void check_complex_condition_evaluation(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - complex condition evaluation due to none of k, l, m, n being 1." << endl;
        abort();
    }
}
```

#### Invariant 3: Divisibility Spread Invariant
```cpp
void check_divisibility_spread(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient divisibility spread causing more condition checks." << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code with the Original Program

Here is the modified C++ code with the runtime checks integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check high iteration count
void check_high_iteration_count(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - high iteration count due to large d." << endl;
        abort();
    }
}

// Function to check complex condition evaluation
void check_complex_condition_evaluation(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - complex condition evaluation due to none of k, l, m, n being 1." << endl;
        abort();
    }
}

// Function to check divisibility spread
void check_divisibility_spread(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered - inefficient divisibility spread causing more condition checks." << endl;
        abort();
    }
}

int main() {
    int k, l, m, n, d;
    int count(0);
    cin >> k >> l >> m >> n >> d;
    count = d;
    
    // Insert checks after input reading and before processing
    check_high_iteration_count(d > 10000); // Check for large d causing high iterations
    check_complex_condition_evaluation((k != 1 && l != 1 && m != 1 && n != 1)); // Check if none of the divisors is 1
    check_divisibility_spread(d > 5000 && k * l * m * n > 200); // Example condition for inefficient spread

    if (k == 1 || l == 1 || m == 1 || n == 1) {
        cout << d << endl;
    } else {
        for (int i = 1; i <= d; i++) {
            if ((i % k != 0) && (i % l != 0) && (i % m != 0) && (i % n != 0)) count--;
        }
        cout << count << endl;
    }
    
    return 0;
}
```

### Explanation of Integration:

- **High Iteration Count Check:** This check is placed after reading input values. It warns when `d` is very large, indicating that the loop will have a high iteration count, which is expensive.

- **Complex Condition Evaluation Check:** The check verifies if none of `k`, `l`, `m`, `n` equals to 1. If true, then each dragon must be checked against all conditions, causing a slowdown.

- **Divisibility Spread Check:** This check is placed to detect inefficient checking conditions, which occur when the divisors do not provide much overlap and thus lead to a high number of condition evaluations.

These checks are designed to catch potential performance pitfalls based on the invariants derived earlier and can aid in identifying slow performance conditions when the program is run with various inputs.

