system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

«One dragon. Two dragon. Three dragon», — the princess was counting. She had trouble falling asleep, and she got bored of counting lambs when she was nine.

However, just counting dragons was boring as well, so she entertained herself at best she could. Tonight she imagined that all dragons were here to steal her, and she was fighting them off. Every k-th dragon got punched in the face with a frying pan. Every l-th dragon got his tail shut into the balcony door. Every m-th dragon got his paws trampled with sharp heels. Finally, she threatened every n-th dragon to call her mom, and he withdrew in panic.

How many imaginary dragons suffered moral or physical damage tonight, if the princess counted a total of d dragons?

Input

Input data contains integer numbers k, l, m, n and d, each number in a separate line (1 ≤ k, l, m, n ≤ 10, 1 ≤ d ≤ 105).

Output

Output the number of damaged dragons.

Examples

Input

1
2
3
4
12


Output

12


Input

2
3
4
5
24


Output

17

Note

In the first case every first dragon got punched with a frying pan. Some of the dragons suffered from other reasons as well, but the pan alone would be enough.

In the second case dragons 1, 7, 11, 13, 17, 19 and 23 escaped unharmed.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int32_t main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  long long d;
  long long arr[4];
  for (long long i = 0; i < 4; i++) cin >> arr[i];
  cin >> d;
  if (arr[0] == 1 || arr[1] == 1 || arr[2] == 1 || arr[3] == 1) {
    cout << d << "\n";
  } else {
    vector<bool> damage(d + 1, 1);
    for (long long i = 0; i < 4; i++) {
      for (long long j = arr[i]; j <= d; j += arr[i]) {
        damage[j] = 0;
      }
    }
    long long ans = 0;
    for (long long i = 1; i <= d; i++) {
      ans += damage[i];
    }
    cout << d - ans << "\n";
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

2
3
10
2
75083


(G.2) Fast Input

2
3
10
1
75083


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  long long d; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  long long arr[4]; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 0; i < 4; i++) cin >> arr[i]; /* line 9 slow_hit_count: 5, fast_hit_count: 5 */
  cin >> d; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  if (arr[0] == 1 || arr[1] == 1 || arr[2] == 1 || arr[3] == 1) { /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
    cout << d << "\n"; /* line 12 slow_hit_count: 0, fast_hit_count: 1 */
  } else { /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
    vector<bool> damage(d + 1, 1); /* line 14 slow_hit_count: 2, fast_hit_count: 0 */
    for (long long i = 0; i < 4; i++) { /* line 15 slow_hit_count: 5, fast_hit_count: 0 */
      for (long long j = arr[i]; j <= d; j += arr[i]) { /* line 16 slow_hit_count: 107621, fast_hit_count: 0 */
        damage[j] = 0; /* line 17 slow_hit_count: 107617, fast_hit_count: 0 */
      } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    long long ans = 0; /* line 20 slow_hit_count: 1, fast_hit_count: 0 */
    for (long long i = 1; i <= d; i++) { /* line 21 slow_hit_count: 75084, fast_hit_count: 0 */
      ans += damage[i]; /* line 22 slow_hit_count: 75083, fast_hit_count: 0 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    cout << d - ans << "\n"; /* line 24 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis**:
   - **Line 16 (`for` loop with `j`)**: This line has a high hit count for the slow input (107,621 hits) but zero hits for the fast input. This indicates a nested loop condition that significantly affects performance.
   - **Line 21 (`for` loop with `i`)**: Similar to line 16, this line is hit 75,084 times in the slow input and not at all in the fast input, suggesting a full scan is being conducted.
   - **Line 14 (`damage` vector initialization)**: This line is hit twice in the slow input. The vector's large size (75083+1 elements) contributes to heavy memory usage.

2. **Data Structure and Loop Interaction**:
   - The `damage` vector is initialized for each dragon, up to `d`, and is marked for damage at indices corresponding to multiples of `k`, `l`, `m`, or `n`.
   - Nested loops (by their nature, and especially with a high number of iterations) can exacerbate performance issues, especially when combined with large memory allocations.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant Related to the Dragon Count (`d`)**:
   - **Natural Language Invariant**: "If the number of dragons (`d`) is very high, particularly close to the upper constraint, and none of the attack intervals (`k`, `l`, `m`, `n`) is 1, there will be a large number of operations required to process each dragon, leading to a slowdown."
   
2. **Invariant Related to Attack Intervals**:
   - **Natural Language Invariant**: "If none of the values `k`, `l`, `m`, or `n` are equal to 1, the program will iterate over each dragon up to `d`, checking for multiple conditions, which can significantly degrade performance. The absence of a `1` in these intervals prevents early termination or shortcuts in processing."

3. **Invariant Related to Memory Usage**:
   - **Natural Language Invariant**: "When `d` is large and a boolean vector of size `d+1` is initialized and iterated over for condition checks, the memory and computational overhead can cause significant slowdowns."

### Conclusion

The primary performance bottleneck arises from the need to handle each dragon individually up to a large number `d`, compounded by the absence of any early-exit conditions when none of the intervals (`k`, `l`, `m`, `n`) is 1. Improving performance would likely require a change to avoid checking each dragon individually or lowering the overhead of these checks, especially under large `d` and complex interval conditions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
«One dragon. Two dragon. Three dragon», — the princess was counting. She had trouble falling asleep, and she got bored of counting lambs when she was nine.

However, just counting dragons was boring as well, so she entertained herself at best she could. Tonight she imagined that all dragons were here to steal her, and she was fighting them off. Every k-th dragon got punched in the face with a frying pan. Every l-th dragon got his tail shut into the balcony door. Every m-th dragon got his paws trampled with sharp heels. Finally, she threatened every n-th dragon to call her mom, and he withdrew in panic.

How many imaginary dragons suffered moral or physical damage tonight, if the princess counted a total of d dragons?

Input

Input data contains integer numbers k, l, m, n and d, each number in a separate line (1 ≤ k, l, m, n ≤ 10, 1 ≤ d ≤ 105).

Output

Output the number of damaged dragons.

Examples

Input

1
2
3
4
12


Output

12


Input

2
3
4
5
24


Output

17

Note

In the first case every first dragon got punched with a frying pan. Some of the dragons suffered from other reasons as well, but the pan alone would be enough.

In the second case dragons 1, 7, 11, 13, 17, 19 and 23 escaped unharmed.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Performance-Characterizing Invariants in C++

Here are the C++ code snippets implementing the natural language invariants derived in Phase 2:

```cpp
void check_dragon_count_invariant(long long d, bool earlyExitPossible) {
    if (d > 50000 && !earlyExitPossible) {
        cerr << "Warning: Performance bottleneck condition triggered due to high dragon count without early exit!" << endl;
        abort();
    }
}

void check_attack_intervals_invariant(long long k, long long l, long long m, long long n) {
    if (!(k == 1 || l == 1 || m == 1 || n == 1)) {
        cerr << "Warning: Performance bottleneck condition triggered due to lack of early termination in attack intervals!" << endl;
        abort();
    }
}

void check_memory_usage_invariant(long long d) {
    if (d > 50000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large memory allocation!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original C++ Program

Below is the instrumented C++ code with the performance-checking logic added at strategic points:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check for performance issues related to large dragon count without early termination
void check_dragon_count_invariant(long long d, bool earlyExitPossible) {
    if (d > 50000 && !earlyExitPossible) {
        cerr << "Warning: Performance bottleneck condition triggered due to high dragon count without early exit!" << endl;
        abort();
    }
}

// Function to check for performance issues related to attack intervals
void check_attack_intervals_invariant(long long k, long long l, long long m, long long n) {
    if (!(k == 1 || l == 1 || m == 1 || n == 1)) {
        cerr << "Warning: Performance bottleneck condition triggered due to lack of early termination in attack intervals!" << endl;
        abort();
    }
}

// Function to check for performance issues related to memory usage
void check_memory_usage_invariant(long long d) {
    if (d > 50000) {
        cerr << "Warning: Performance bottleneck condition triggered due to large memory allocation!" << endl;
        abort();
    }
}

int32_t main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    
    long long d;
    long long arr[4];
    for (long long i = 0; i < 4; i++) cin >> arr[i];
    cin >> d;

    // Check for attack intervals invariant and dragon count invariant
    check_attack_intervals_invariant(arr[0], arr[1], arr[2], arr[3]);
    check_dragon_count_invariant(d, arr[0] == 1 || arr[1] == 1 || arr[2] == 1 || arr[3] == 1);
    
    if (arr[0] == 1 || arr[1] == 1 || arr[2] == 1 || arr[3] == 1) {
        cout << d << "\n";
    } else {
        // Check for memory usage invariant
        check_memory_usage_invariant(d);
        
        vector<bool> damage(d + 1, 1);
        for (long long i = 0; i < 4; i++) {
            for (long long j = arr[i]; j <= d; j += arr[i]) {
                damage[j] = 0;
            }
        }
        long long ans = 0;
        for (long long i = 1; i <= d; i++) {
            ans += damage[i];
        }
        cout << d - ans << "\n";
    }
    return 0;
}
```

### Explanation of the Integrated Checkers

1. **`check_dragon_count_invariant`**: This function is called after reading the inputs to check if the number of dragons `d` is large, and if none of the conditions for early exit (any attack interval being `1`) are met.

2. **`check_attack_intervals_invariant`**: This checker is invoked immediately after input to ensure that at least one attack interval can lead to early termination, avoiding unnecessary iterations.

3. **`check_memory_usage_invariant`**: This function is placed just before the memory-intensive `vector<bool>` initialization to warn if the memory allocation could be excessive.

These checks are strategically placed to identify potential performance bottlenecks without introducing unnecessary overhead in the main computation loops.

