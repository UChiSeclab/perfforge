system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

«One dragon. Two dragon. Three dragon», — the princess was counting. She had trouble falling asleep, and she got bored of counting lambs when she was nine.

However, just counting dragons was boring as well, so she entertained herself at best she could. Tonight she imagined that all dragons were here to steal her, and she was fighting them off. Every k-th dragon got punched in the face with a frying pan. Every l-th dragon got his tail shut into the balcony door. Every m-th dragon got his paws trampled with sharp heels. Finally, she threatened every n-th dragon to call her mom, and he withdrew in panic.

How many imaginary dragons suffered moral or physical damage tonight, if the princess counted a total of d dragons?

Input

Input data contains integer numbers k, l, m, n and d, each number in a separate line (1 ≤ k, l, m, n ≤ 10, 1 ≤ d ≤ 105).

Output

Output the number of damaged dragons.

Examples

Input

1
2
3
4
12


Output

12


Input

2
3
4
5
24


Output

17

Note

In the first case every first dragon got punched with a frying pan. Some of the dragons suffered from other reasons as well, but the pan alone would be enough.

In the second case dragons 1, 7, 11, 13, 17, 19 and 23 escaped unharmed.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int k, l, m, n, d, count = 0;
  cin >> k >> l >> m >> n >> d;
  count = d;
  if (k == 1 || m == 1 || n == 1 || l == 1) {
    cout << d;
  } else {
    for (int i = 0; i <= d; i++) {
      if (i % k != 0 && i % l != 0 && i % m != 0 && i % n != 0) count--;
    }
    cout << count;
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8
7
7
6
69038


(G.2) Fast Input

8
1
7
6
69038


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int k, l, m, n, d, count = 0; /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> k >> l >> m >> n >> d; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  count = d; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  if (k == 1 || m == 1 || n == 1 || l == 1) { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
    cout << d; /* line 8 slow_hit_count: 0, fast_hit_count: 1 */
  } else { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = 0; i <= d; i++) { /* line 10 slow_hit_count: 69040, fast_hit_count: 0 */
      if (i % k != 0 && i % l != 0 && i % m != 0 && i % n != 0) count--; /* line 11 slow_hit_count: 69039, fast_hit_count: 0 */
    } /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    cout << count; /* line 13 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 15 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To diagnose the performance bottlenecks in the given C program, let's proceed with the tasks outlined:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts**: 
   - The slow input results in significantly higher hit counts on line 10 and line 11, suggesting that the `for` loop is executed many times for the slow input, but not for the fast input.
   - The fast input does not execute this loop at all because the condition on line 7 is met (i.e., one of `k`, `l`, `m`, or `n` is 1).

2. **Pinpoint Significant Lines**:
   - **Line 10**: `for (int i = 0; i <= d; i++)` – This loop iterates from 0 to `d`, which can be a large number (up to 100,000 based on constraints), causing the slowdown.
   - **Line 11**: `if (i % k != 0 && i % l != 0 && i % m != 0 && i % n != 0) count--;` – This condition checks if the current index `i` is not divisible by any of `k`, `l`, `m`, or `n`, leading to decrements in `count`.

3. **Inferences**:
   - The loop runs `d + 1` times, and each iteration involves four modulus operations. This can be costly when `d` is large and no shortcut condition reduces the number of iterations.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants in natural language:

1. **Invariant 1**: "When none of the values `k`, `l`, `m`, or `n` equal 1, the program enters an exhaustive loop over all dragons, leading to performance degradation as `d` approaches its maximum constraint."

2. **Invariant 2**: "If `d` is large and each of `k`, `l`, `m`, or `n` are greater than 1, the loop will perform `d + 1` checks, which is computationally expensive due to multiple modulus operations, significantly slowing down the program."

### Explanation

These invariants are tailored to the problem constraints, emphasizing conditions that lead to hitting the slow path. Specifically:

- If any of `k`, `l`, `m`, or `n` is 1, the output is calculated instantly, as every dragon suffers. 
- When all values are greater than 1, each dragon must be checked with multiple modulus operations, which is costly when `d` is large.

This explains why the slow input behaves differently than the fast input and identifies the critical conditions that lead to performance issues.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
«One dragon. Two dragon. Three dragon», — the princess was counting. She had trouble falling asleep, and she got bored of counting lambs when she was nine.

However, just counting dragons was boring as well, so she entertained herself at best she could. Tonight she imagined that all dragons were here to steal her, and she was fighting them off. Every k-th dragon got punched in the face with a frying pan. Every l-th dragon got his tail shut into the balcony door. Every m-th dragon got his paws trampled with sharp heels. Finally, she threatened every n-th dragon to call her mom, and he withdrew in panic.

How many imaginary dragons suffered moral or physical damage tonight, if the princess counted a total of d dragons?

Input

Input data contains integer numbers k, l, m, n and d, each number in a separate line (1 ≤ k, l, m, n ≤ 10, 1 ≤ d ≤ 105).

Output

Output the number of damaged dragons.

Examples

Input

1
2
3
4
12


Output

12


Input

2
3
4
5
24


Output

17

Note

In the first case every first dragon got punched with a frying pan. Some of the dragons suffered from other reasons as well, but the pan alone would be enough.

In the second case dragons 1, 7, 11, 13, 17, 19 and 23 escaped unharmed.

Solution (C++ code):
{solution}


assistant: Here is the implementation of the performance-characterizing invariants as C++ code snippets followed by integration into the original program.

### Phase 3: Implementing the Invariants as Checker Code

1. **Invariant 1**: "When none of the values `k`, `l`, `m`, or `n` equal 1, the program enters an exhaustive loop over all dragons, leading to performance degradation as `d` approaches its maximum constraint."

```cpp
void check_loop_condition(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered! Large loop execution." << endl;
        abort();
    }
}
```

2. **Invariant 2**: "If `d` is large and each of `k`, `l`, `m`, or `n` are greater than 1, the loop will perform `d + 1` checks, which is computationally expensive due to multiple modulus operations, significantly slowing down the program."

```cpp
void check_modulus_operations(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to excessive modulus operations!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original Program

Now, let's integrate these checks into the original C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for large loop execution condition
void check_loop_condition(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck condition triggered! Large loop execution." << endl;
        abort();
    }
}

// Checker function for excessive modulus operations
void check_modulus_operations(bool condition) {
    if (condition) {
        cerr << "Warning: Performance bottleneck due to excessive modulus operations!" << endl;
        abort();
    }
}

int main() {
    int k, l, m, n, d, count = 0;
    cin >> k >> l >> m >> n >> d;
    count = d;
    
    // Insert check for large loop execution
    check_loop_condition(k > 1 && l > 1 && m > 1 && n > 1 && d > 80000); // Example threshold: d > 80000
    
    if (k == 1 || m == 1 || n == 1 || l == 1) {
        cout << d;
    } else {
        // Insert check for excessive modulus operations before the loop
        check_modulus_operations(d > 80000); // Example threshold: d > 80000

        for (int i = 0; i <= d; i++) {
            if (i % k != 0 && i % l != 0 && i % m != 0 && i % n != 0) count--;
        }
        cout << count;
    }
}
```

### Explanation

- **Check Placement**: The checks are placed before the loop to avoid adding runtime overhead within the loop.
- **Thresholds**: The checks for `d` > 80,000 were chosen as example thresholds to catch potential slow scenarios while respecting the constraint `d <= 100,000`.
- **Checker Functionality**: If conditions for potential bottlenecks are met, the program will output a warning and abort, helping identify when the slow path is being triggered.

