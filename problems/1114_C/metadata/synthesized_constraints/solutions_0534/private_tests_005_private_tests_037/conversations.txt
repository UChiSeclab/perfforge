system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The number "zero" is called "love" (or "l'oeuf" to be precise, literally means "egg" in French), for example when denoting the zero score in a game of tennis. 

Aki is fond of numbers, especially those with trailing zeros. For example, the number 9200 has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.

However, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.

Given two integers n and b (in decimal notation), your task is to calculate the number of trailing zero digits in the b-ary (in the base/radix of b) representation of n ! ([factorial](https://en.wikipedia.org/wiki/Factorial) of n). 

Input

The only line of the input contains two integers n and b (1 ≤ n ≤ 10^{18}, 2 ≤ b ≤ 10^{12}).

Output

Print an only integer — the number of trailing zero digits in the b-ary representation of n!

Examples

Input

6 9


Output

1


Input

38 11


Output

3


Input

5 2


Output

3


Input

5 10


Output

1

Note

In the first example, 6!_{(10)} = 720_{(10)} = 880_{(9)}.

In the third and fourth example, 5!_{(10)} = 120_{(10)} = 1111000_{(2)}.

The representation of the number x in the b-ary base is d_1, d_2, …, d_k if x = d_1 b^{k - 1} + d_2 b^{k - 2} + … + d_k b^0, where d_i are integers and 0 ≤ d_i ≤ b - 1. For example, the number 720 from the first example is represented as 880_{(9)} since 720 = 8 ⋅ 9^2 + 8 ⋅ 9 + 0 ⋅ 1.

You can read more about bases [here](https://en.wikipedia.org/wiki/Radix).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using ull = unsigned long long;
using ll = long long;
using ld = long double;
using D = double;
using ii = pair<int, int>;
using vi = vector<int>;
using vii = vector<ii>;
template <typename T>
T sqr(T a) {
  return a * a;
}
template <typename T>
T gcd(T a, T b) {
  return b ? gcd(b, a % b) : a;
}
template <typename T>
T sgn(T a) {
  return a > 0 ? 1 : (a < 0 ? -1 : 0);
}
template <typename T>
T abs(T a) {
  return a > 0 ? a : -a;
}
const int inf = 2e9;
const ld st = 0.000001;
const ld pi = acos((ld)-1);
const ll MAXN = 1000000000 + 100;
ull f1(ull n, ull m) {
  vector<pair<ull, ull>> t;
  ull sr = 0;
  for (int i = 2; i <= sqrt(n); i++) {
    sr = 0;
    while (n % i == 0) {
      n /= i;
      sr++;
    }
    if (sr != 0) {
      t.push_back(make_pair(i, sr));
    }
  }
  if (n != 1) {
    t.push_back(make_pair(n, 1));
  }
  ull ans1 = 18e18;
  for (int i = 0; i < t.size(); i++) {
    ull temp = 0;
    ull s = 1;
    while (s <= m / t[i].first) {
      s *= t[i].first;
      temp += (m / s);
    }
    ans1 = min(ans1, temp / t[i].second);
  }
  return ans1;
}
int main() {
  ios::sync_with_stdio(0);
  cin.tie(NULL), cout.tie(NULL);
  ull n, m;
  cin >> n >> m;
  cout << f1(m, n);
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

72 999999998141


(G.2) Fast Input

72 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using ull = unsigned long long; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using ll = long long; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using ld = long double; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
using D = double; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
using ii = pair<int, int>; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
using vi = vector<int>; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
using vii = vector<ii>; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
T sqr(T a) { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
  return a * a; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
T gcd(T a, T b) { /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return b ? gcd(b, a % b) : a; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
T sgn(T a) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  return a > 0 ? 1 : (a < 0 ? -1 : 0); /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
T abs(T a) { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
  return a > 0 ? a : -a; /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = 2e9; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
const ld st = 0.000001; /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
const ld pi = acos((ld)-1); /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
const ll MAXN = 1000000000 + 100; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
ull f1(ull n, ull m) { /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
  vector<pair<ull, ull>> t; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  ull sr = 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i <= sqrt(n); i++) { /* line 33 slow_hit_count: 999999, fast_hit_count: 1 */
    sr = 0; /* line 34 slow_hit_count: 999998, fast_hit_count: 0 */
    while (n % i == 0) { /* line 35 slow_hit_count: 999998, fast_hit_count: 0 */
      n /= i; /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
      sr++; /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    if (sr != 0) { /* line 39 slow_hit_count: 999998, fast_hit_count: 0 */
      t.push_back(make_pair(i, sr)); /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  if (n != 1) { /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
    t.push_back(make_pair(n, 1)); /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
  ull ans1 = 18e18; /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < t.size(); i++) { /* line 47 slow_hit_count: 2, fast_hit_count: 2 */
    ull temp = 0; /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
    ull s = 1; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
    while (s <= m / t[i].first) { /* line 50 slow_hit_count: 1, fast_hit_count: 7 */
      s *= t[i].first; /* line 51 slow_hit_count: 0, fast_hit_count: 6 */
      temp += (m / s); /* line 52 slow_hit_count: 0, fast_hit_count: 6 */
    } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    ans1 = min(ans1, temp / t[i].second); /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  return ans1; /* line 56 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 57 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 58 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 59 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL), cout.tie(NULL); /* line 60 slow_hit_count: 1, fast_hit_count: 1 */
  ull n, m; /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> m; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
  cout << f1(m, n); /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 65 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The line `for (int i = 2; i <= sqrt(n); i++)` (line 33) is hit significantly more often for the slow input (999,999 times) compared to the fast input (1 time).
   - Lines within this for-loop, such as `sr = 0;` (line 34) and `while (n % i == 0)` (line 35), have similar high hit counts for the slow input.

2. **Pinpointing Lines:**
   - The `for` loop starting at line 33 is likely to be the most expensive part of the function `f1`, due to its high number of iterations and the presence of a nested `while` loop.

3. **Inference:**
   - The loop at line 33 iterates up to the square root of `n`, performing factorization. The nested `while` loop further divides `n` by each factor, which can be a significant source of computational cost, especially if `n` has many small prime factors.
   - The factors of `n` are stored in a vector `t`, which is later used in another loop starting at line 47. This loop's workload depends on the size and complexity of `n`'s factorization.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: High Prime Factorization Cost**
   - **Natural Language Description:** "When `m` has many small prime factors, particularly within a high range (close to `sqrt(m)`), the factorization process becomes expensive. This is due to repeated division operations for each small prime factor."
   - **Reasoning:** The loop at line 33 iterates and divides based on the prime factors, which increases the number of operations significantly when `m` has many such factors.

2. **Invariant 2: Large Base with Complex Factorization**
   - **Natural Language Description:** "If the base `b` is large and its factorization involves many distinct prime factors, especially those close to `sqrt(b)`, the computation may become slower due to increased factorization iterations."
   - **Reasoning:** The number of times the loop executes is closely related to the factorization complexity of `b`, and larger bases with numerous or repeated small factors will exacerbate this cost.

3. **Invariant 3: Large Factor Base Impact on Trailing Zeros Calculation**
   - **Natural Language Description:** "When computing trailing zeros, if the base `b` has a large factor leading to repeated divisions, particularly if the factor is prime or near prime, the calculation can slow significantly."
   - **Reasoning:** The `while` loop at line 50, which repeatedly divides by each factor, will be hot when `b` lends itself to division by a specific factor many times, increasing the number of operations.

These invariants capture the conditions under which the program may experience slowdowns without relying on specific values from the slow input. They focus on the factorization complexity and the structure of the input `m` and its interaction with the computation logic in the function.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The number "zero" is called "love" (or "l'oeuf" to be precise, literally means "egg" in French), for example when denoting the zero score in a game of tennis. 

Aki is fond of numbers, especially those with trailing zeros. For example, the number 9200 has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.

However, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.

Given two integers n and b (in decimal notation), your task is to calculate the number of trailing zero digits in the b-ary (in the base/radix of b) representation of n ! ([factorial](https://en.wikipedia.org/wiki/Factorial) of n). 

Input

The only line of the input contains two integers n and b (1 ≤ n ≤ 10^{18}, 2 ≤ b ≤ 10^{12}).

Output

Print an only integer — the number of trailing zero digits in the b-ary representation of n!

Examples

Input

6 9


Output

1


Input

38 11


Output

3


Input

5 2


Output

3


Input

5 10


Output

1

Note

In the first example, 6!_{(10)} = 720_{(10)} = 880_{(9)}.

In the third and fourth example, 5!_{(10)} = 120_{(10)} = 1111000_{(2)}.

The representation of the number x in the b-ary base is d_1, d_2, …, d_k if x = d_1 b^{k - 1} + d_2 b^{k - 2} + … + d_k b^0, where d_i are integers and 0 ≤ d_i ≤ b - 1. For example, the number 720 from the first example is represented as 880_{(9)} since 720 = 8 ⋅ 9^2 + 8 ⋅ 9 + 0 ⋅ 1.

You can read more about bases [here](https://en.wikipedia.org/wiki/Radix).

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Natural Language Invariants in C++

For each invariant from Phase 2, I've created a checker function or condition in C++ that can be used to detect potential performance bottlenecks during runtime.

#### Invariant 1: High Prime Factorization Cost
```cpp
void check_prime_factorization_cost(ull n, ull b) {
    // Check if b has many small prime factors up to its square root
    int prime_factor_count = 0;
    ull original_b = b;
    for (ull i = 2; i <= sqrt(b); ++i) {
        while (b % i == 0) {
            b /= i;
            prime_factor_count++;
        }
    }
    if (b > 1) { // If there is any factor greater than sqrt(b)
        prime_factor_count++;
    }
    if (prime_factor_count > 10) { // Arbitrary threshold for "many" factors
        cerr << "Warning: High prime factorization cost detected for base " << original_b << endl;
        abort();
    }
}
```

#### Invariant 2: Large Base with Complex Factorization
```cpp
void check_complex_factorization(ull b) {
    // Check if the base b has a complex factorization
    ull factors = 0;
    ull original_b = b;
    for (ull i = 2; i <= sqrt(b); ++i) {
        while (b % i == 0) {
            b /= i;
            factors++;
        }
    }
    if (b > 1) { // Remaining part is a prime number
        factors++;
    }
    if (factors > 20) { // Arbitrary threshold for "complex" factorization
        cerr << "Warning: Complex factorization detected for base " << original_b << endl;
        abort();
    }
}
```

#### Invariant 3: Large Factor Base Impact on Trailing Zeros Calculation
```cpp
void check_large_factor_base(ull b) {
    // Check if b has a large factor that repeatedly divides
    bool large_divisor_detected = false;
    for (ull i = 2; i <= sqrt(b); ++i) {
        if (b % i == 0 && b / i > 10) { // Arbitrary check for large factor
            large_divisor_detected = true;
            break;
        }
    }
    if (large_divisor_detected) {
        cerr << "Warning: Large factor impact detected for base " << b << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into Original Program

The following is the fully instrumented C++ code with the checker functions added at appropriate points in the control flow. Each checker is called before entering significant or potentially expensive computations.

```cpp
#include <bits/stdc++.h>
using namespace std;
using ull = unsigned long long;
using ll = long long;
using ld = long double;
using D = double;
using ii = pair<int, int>;
using vi = vector<int>;
using vii = vector<ii>;

void check_prime_factorization_cost(ull n, ull b) {
    int prime_factor_count = 0;
    ull original_b = b;
    for (ull i = 2; i <= sqrt(b); ++i) {
        while (b % i == 0) {
            b /= i;
            prime_factor_count++;
        }
    }
    if (b > 1) {
        prime_factor_count++;
    }
    if (prime_factor_count > 10) {
        cerr << "Warning: High prime factorization cost detected for base " << original_b << endl;
        abort();
    }
}

void check_complex_factorization(ull b) {
    ull factors = 0;
    ull original_b = b;
    for (ull i = 2; i <= sqrt(b); ++i) {
        while (b % i == 0) {
            b /= i;
            factors++;
        }
    }
    if (b > 1) {
        factors++;
    }
    if (factors > 20) {
        cerr << "Warning: Complex factorization detected for base " << original_b << endl;
        abort();
    }
}

void check_large_factor_base(ull b) {
    bool large_divisor_detected = false;
    for (ull i = 2; i <= sqrt(b); ++i) {
        if (b % i == 0 && b / i > 10) {
            large_divisor_detected = true;
            break;
        }
    }
    if (large_divisor_detected) {
        cerr << "Warning: Large factor impact detected for base " << b << endl;
        abort();
    }
}

ull f1(ull n, ull m) {
    vector<pair<ull, ull>> t;
    ull sr = 0;
    for (int i = 2; i <= sqrt(n); i++) {
        sr = 0;
        while (n % i == 0) {
            n /= i;
            sr++;
        }
        if (sr != 0) {
            t.push_back(make_pair(i, sr));
        }
    }
    if (n != 1) {
        t.push_back(make_pair(n, 1));
    }
    ull ans1 = 18e18;
    for (int i = 0; i < t.size(); i++) {
        ull temp = 0;
        ull s = 1;
        while (s <= m / t[i].first) {
            s *= t[i].first;
            temp += (m / s);
        }
        ans1 = min(ans1, temp / t[i].second);
    }
    return ans1;
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(NULL), cout.tie(NULL);
    ull n, m;
    cin >> n >> m;

    // Insert performance checkers before main computations
    check_prime_factorization_cost(n, m);
    check_complex_factorization(m);
    check_large_factor_base(m);

    cout << f1(m, n);
    return 0;
}
```

### Explanation
- **Insertion Points:** The checker functions are placed immediately after reading the inputs. This ensures they run before any heavy computation, such as the factorization process.
- **Thresholds:** The thresholds used in the checker functions are arbitrary and can be adjusted based on empirical data or further optimization needs.
- **Purpose:** These checks help identify input scenarios that could lead to performance bottlenecks, aiding in debugging and optimization efforts.

