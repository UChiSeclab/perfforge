system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The number "zero" is called "love" (or "l'oeuf" to be precise, literally means "egg" in French), for example when denoting the zero score in a game of tennis. 

Aki is fond of numbers, especially those with trailing zeros. For example, the number 9200 has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.

However, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.

Given two integers n and b (in decimal notation), your task is to calculate the number of trailing zero digits in the b-ary (in the base/radix of b) representation of n ! ([factorial](https://en.wikipedia.org/wiki/Factorial) of n). 

Input

The only line of the input contains two integers n and b (1 ≤ n ≤ 10^{18}, 2 ≤ b ≤ 10^{12}).

Output

Print an only integer — the number of trailing zero digits in the b-ary representation of n!

Examples

Input

6 9


Output

1


Input

38 11


Output

3


Input

5 2


Output

3


Input

5 10


Output

1

Note

In the first example, 6!_{(10)} = 720_{(10)} = 880_{(9)}.

In the third and fourth example, 5!_{(10)} = 120_{(10)} = 1111000_{(2)}.

The representation of the number x in the b-ary base is d_1, d_2, …, d_k if x = d_1 b^{k - 1} + d_2 b^{k - 2} + … + d_k b^0, where d_i are integers and 0 ≤ d_i ≤ b - 1. For example, the number 720 from the first example is represented as 880_{(9)} since 720 = 8 ⋅ 9^2 + 8 ⋅ 9 + 0 ⋅ 1.

You can read more about bases [here](https://en.wikipedia.org/wiki/Radix).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n, m, k;
string s;
long long ans;
bool flag;
void solve() {
  long long n, b;
  cin >> n >> b;
  long long c = 0;
  vector<long long> f;
  vector<long long> freq;
  long long B = b;
  if (b == 1) {
    cout << 0;
    return;
  }
  for (long long i = 2; i <= sqrt(b); i++) {
    int ff = 0;
    while (B % i == 0) {
      B = B / i;
      ff++;
    }
    if (ff > 0) {
      f.push_back(i);
      freq.push_back(ff);
    }
  }
  if (B > 1) {
    f.push_back(B);
    freq.push_back(1);
  }
  long long ans = 1700000000000000000;
  for (int i = 0; i < f.size(); i++) {
    long long N = n;
    c = 0;
    while (N > 0) {
      N = N / f[i];
      c += N;
    }
    c = c / freq[i];
    ans = min(ans, c);
  }
  cout << ans;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int t = 1;
  while (t--) {
    solve();
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

72 1264738917544


(G.2) Fast Input

72 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, k; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
string s; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long ans; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
bool flag; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, b; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> b; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  long long c = 0; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> f; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  vector<long long> freq; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  long long B = b; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  if (b == 1) { /* line 14 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    return; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  for (long long i = 2; i <= sqrt(b); i++) { /* line 18 slow_hit_count: 1124606, fast_hit_count: 1 */
    int ff = 0; /* line 19 slow_hit_count: 1124605, fast_hit_count: 0 */
    while (B % i == 0) { /* line 20 slow_hit_count: 1124608, fast_hit_count: 0 */
      B = B / i; /* line 21 slow_hit_count: 3, fast_hit_count: 0 */
      ff++; /* line 22 slow_hit_count: 3, fast_hit_count: 0 */
    } /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    if (ff > 0) { /* line 24 slow_hit_count: 1124605, fast_hit_count: 0 */
      f.push_back(i); /* line 25 slow_hit_count: 1, fast_hit_count: 0 */
      freq.push_back(ff); /* line 26 slow_hit_count: 1, fast_hit_count: 0 */
    } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  if (B > 1) { /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
    f.push_back(B); /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
    freq.push_back(1); /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
  long long ans = 1700000000000000000; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < f.size(); i++) { /* line 34 slow_hit_count: 3, fast_hit_count: 2 */
    long long N = n; /* line 35 slow_hit_count: 2, fast_hit_count: 1 */
    c = 0; /* line 36 slow_hit_count: 2, fast_hit_count: 1 */
    while (N > 0) { /* line 37 slow_hit_count: 10, fast_hit_count: 8 */
      N = N / f[i]; /* line 38 slow_hit_count: 8, fast_hit_count: 7 */
      c += N; /* line 39 slow_hit_count: 8, fast_hit_count: 7 */
    } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
    c = c / freq[i]; /* line 41 slow_hit_count: 2, fast_hit_count: 1 */
    ans = min(ans, c); /* line 42 slow_hit_count: 2, fast_hit_count: 1 */
  } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 46 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 47 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 48 slow_hit_count: 1, fast_hit_count: 1 */
  int t = 1; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) { /* line 50 slow_hit_count: 2, fast_hit_count: 2 */
    solve(); /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 54 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the given C program and generate performance-characterizing invariants, we need to go through two phases:

### Phase 1: Identify Expensive or Inefficient Code Segments

By comparing the line-level hit counts for both the slow and fast inputs, we can pinpoint areas where the program behaves inefficiently when handling the slow input.

1. **Line 18**: The loop `for (long long i = 2; i <= sqrt(b); i++)` is hit significantly more in the slow case (1,124,606 times) compared to the fast case (1 time). This suggests that the loop is running extensively when `b` is large or when `b` has many factors.
   
2. **Lines 20-22**: The inner `while` loop `while (B % i == 0)` and operations inside it (`B = B / i` and `ff++`) are executed multiple times during the slow input run. This loop divides `B` by its factors, and the number of times it executes depends on the factorization of `b`.

3. **Line 24-26**: Conditional check `if (ff > 0)` and vector operations inside this conditional are executed a significant number of times in the slow run, while they are executed minimally in the fast run. This indicates that the prime factorization process is more complex for the slow input `b`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the observations from Phase 1, we can generate natural language statements that describe the conditions under which the program likely enters a slow path:

1. **Prime Factorization Complexity**: 
   - **Invariant**: "If the base `b` has a high number of distinct prime factors or large primes, the program may slow down significantly due to extensive factorization operations."
   - **Explanation**: When `b` has many factors or large prime factors, the loop iterating up to `sqrt(b)` runs many more times, leading to increased computational effort.

2. **Repeated Division Operations**:
   - **Invariant**: "If the base `b` causes repeated division operations due to its factor structure, particularly when `b` is comprised of higher powers of small primes, this repeated division can contribute to slow performance."
   - **Explanation**: The repeated division within the inner while loop (`while (B % i == 0)`) suggests slowdowns when `b` can be broken down multiple times into smaller factors, which induces more iterations.

3. **Factor Frequency Handling**:
   - **Invariant**: "When `b` contains several prime factors with high exponents, the handling and storage of these factors and their frequencies can result in additional computational overhead."
   - **Explanation**: If the vector operations that store the factors and their frequencies (`f.push_back(i); freq.push_back(ff);`) are triggered extensively, this indicates more complex factor management, slowing down execution.

These invariants abstract the conditions that lead to slow execution and suggest that the structure and composition of the base `b` significantly influence the program's performance. By focusing on the properties of `b` (number of factors, size of factors), these invariants help identify future slow scenarios without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The number "zero" is called "love" (or "l'oeuf" to be precise, literally means "egg" in French), for example when denoting the zero score in a game of tennis. 

Aki is fond of numbers, especially those with trailing zeros. For example, the number 9200 has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.

However, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.

Given two integers n and b (in decimal notation), your task is to calculate the number of trailing zero digits in the b-ary (in the base/radix of b) representation of n ! ([factorial](https://en.wikipedia.org/wiki/Factorial) of n). 

Input

The only line of the input contains two integers n and b (1 ≤ n ≤ 10^{18}, 2 ≤ b ≤ 10^{12}).

Output

Print an only integer — the number of trailing zero digits in the b-ary representation of n!

Examples

Input

6 9


Output

1


Input

38 11


Output

3


Input

5 2


Output

3


Input

5 10


Output

1

Note

In the first example, 6!_{(10)} = 720_{(10)} = 880_{(9)}.

In the third and fourth example, 5!_{(10)} = 120_{(10)} = 1111000_{(2)}.

The representation of the number x in the b-ary base is d_1, d_2, …, d_k if x = d_1 b^{k - 1} + d_2 b^{k - 2} + … + d_k b^0, where d_i are integers and 0 ≤ d_i ≤ b - 1. For example, the number 720 from the first example is represented as 880_{(9)} since 720 = 8 ⋅ 9^2 + 8 ⋅ 9 + 0 ⋅ 1.

You can read more about bases [here](https://en.wikipedia.org/wiki/Radix).

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Performance-Characterizing Invariants in C++

First, we'll implement the checks corresponding to the performance-characterizing invariants we identified in Phase 2. Each invariant will be translated into a C++ code snippet to check the condition at runtime.

1. **Prime Factorization Complexity**:
   ```cpp
   void check_prime_factorization_invariant(long long base, size_t primeFactorCount) {
       // Assume a threshold for the number of distinct prime factors (for illustration, we choose 100 arbitrarily)
       if (primeFactorCount > 100) {
           cerr << "Warning: Performance bottleneck due to many distinct prime factors in base b!" << endl;
           abort();
       }
   }
   ```

2. **Repeated Division Operations**:
   ```cpp
   void check_repeated_division_invariant(long long base, long long factorCount) {
       // Assume a threshold for the number of repeated divisions (for illustration, we choose 500 arbitrarily)
       if (factorCount > 500) {
           cerr << "Warning: Performance bottleneck due to excessive repeated division operations!" << endl;
           abort();
       }
   }
   ```

3. **Factor Frequency Handling**:
   ```cpp
   void check_factor_frequency_invariant(size_t frequencySize) {
       // Assume a threshold for the size of the frequency vector (for illustration, we choose 50 arbitrarily)
       if (frequencySize > 50) {
           cerr << "Warning: Performance bottleneck due to high factor frequency management overhead!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating the Checks into the Original Program

Now, we will integrate these checks into the original program. We'll place each check at an appropriate point in the program to avoid adding overhead in tight loops, but still effectively catch potential performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for many distinct prime factors
void check_prime_factorization_invariant(long long base, size_t primeFactorCount) {
    if (primeFactorCount > 100) {
        cerr << "Warning: Performance bottleneck due to many distinct prime factors in base b!" << endl;
        abort();
    }
}

// Checker for excessive repeated division operations
void check_repeated_division_invariant(long long base, long long factorCount) {
    if (factorCount > 500) {
        cerr << "Warning: Performance bottleneck due to excessive repeated division operations!" << endl;
        abort();
    }
}

// Checker for high factor frequency management overhead
void check_factor_frequency_invariant(size_t frequencySize) {
    if (frequencySize > 50) {
        cerr << "Warning: Performance bottleneck due to high factor frequency management overhead!" << endl;
        abort();
    }
}

void solve() {
    long long n, b;
    cin >> n >> b;
    long long c = 0;
    vector<long long> f;
    vector<long long> freq;
    long long B = b;
    
    if (b == 1) {
        cout << 0;
        return;
    }

    long long factorCount = 0;  // Keep track of number of divisions
    for (long long i = 2; i <= sqrt(b); i++) {
        int ff = 0;
        while (B % i == 0) {
            B = B / i;
            ff++;
            factorCount++;  // Count this division
        }
        if (ff > 0) {
            f.push_back(i);
            freq.push_back(ff);
        }
    }
    if (B > 1) {
        f.push_back(B);
        freq.push_back(1);
    }

    // Place checker after calculating prime factors
    check_prime_factorization_invariant(b, f.size());
    // Place checker for repeated division operations
    check_repeated_division_invariant(b, factorCount);
    // Place checker for factor frequency management
    check_factor_frequency_invariant(freq.size());
    
    long long ans = 1700000000000000000;
    for (int i = 0; i < f.size(); i++) {
        long long N = n;
        c = 0;
        while (N > 0) {
            N = N / f[i];
            c += N;
        }
        c = c / freq[i];
        ans = min(ans, c);
    }
    cout << ans;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int t = 1;
    while (t--) {
        solve();
    }
    return 0;
}
```

### Explanation

- **Prime Factorization Complexity Checker**: Placed after processing the prime factors of `b`. It checks if the number of distinct prime factors exceeds a threshold, indicating potential performance bottlenecks.
  
- **Repeated Division Operations Checker**: Tracks the number of divisions performed in the factorization loop. This checker is placed after the factorization to indicate if the number of divisions is excessive.

- **Factor Frequency Handling Checker**: Checks the size of the `freq` vector to determine if handling the frequency of factors might be a bottleneck.

These checkers are strategically placed after the prime factorization process to ensure they only run once per execution, avoiding any unnecessary performance overhead in tight loops.

