system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The number "zero" is called "love" (or "l'oeuf" to be precise, literally means "egg" in French), for example when denoting the zero score in a game of tennis. 

Aki is fond of numbers, especially those with trailing zeros. For example, the number 9200 has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.

However, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.

Given two integers n and b (in decimal notation), your task is to calculate the number of trailing zero digits in the b-ary (in the base/radix of b) representation of n ! ([factorial](https://en.wikipedia.org/wiki/Factorial) of n). 

Input

The only line of the input contains two integers n and b (1 ≤ n ≤ 10^{18}, 2 ≤ b ≤ 10^{12}).

Output

Print an only integer — the number of trailing zero digits in the b-ary representation of n!

Examples

Input

6 9


Output

1


Input

38 11


Output

3


Input

5 2


Output

3


Input

5 10


Output

1

Note

In the first example, 6!_{(10)} = 720_{(10)} = 880_{(9)}.

In the third and fourth example, 5!_{(10)} = 120_{(10)} = 1111000_{(2)}.

The representation of the number x in the b-ary base is d_1, d_2, …, d_k if x = d_1 b^{k - 1} + d_2 b^{k - 2} + … + d_k b^0, where d_i are integers and 0 ≤ d_i ≤ b - 1. For example, the number 720 from the first example is represented as 880_{(9)} since 720 = 8 ⋅ 9^2 + 8 ⋅ 9 + 0 ⋅ 1.

You can read more about bases [here](https://en.wikipedia.org/wiki/Radix).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  int64_t n, b;
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cin >> n >> b;
  map<int64_t, int64_t> mp;
  int64_t count = 0;
  int64_t tmp = b;
  if (tmp % 2 == 0) {
    while (tmp % 2 == 0) {
      count++;
      tmp = tmp / 2;
    }
    mp[2] = count;
  }
  for (int64_t i = (3); i <= (sqrt(tmp)); i++) {
    count = 0;
    while (tmp % i == 0) {
      count++;
      tmp = tmp / i;
    }
    if (count) mp[i] += count;
  }
  if (tmp > 2) mp[tmp] += 1;
  int64_t miin = 1000000000000000000;
  int64_t t1, one;
  int64_t cnt;
  for (auto kk : mp) {
    if (kk.second == 0) continue;
    one = kk.first;
    t1 = n;
    cnt = 0;
    while (t1 >= one) {
      cnt += (t1 / one);
      t1 = t1 / one;
    }
    miin = min(miin, cnt / kk.second);
  }
  cout << miin << endl;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

72 999999998141


(G.2) Fast Input

72 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  int64_t n, b; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  ios::sync_with_stdio(false); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> b; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  map<int64_t, int64_t> mp; /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
  int64_t count = 0; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  int64_t tmp = b; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  if (tmp % 2 == 0) { /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
    while (tmp % 2 == 0) { /* line 13 slow_hit_count: 0, fast_hit_count: 2 */
      count++; /* line 14 slow_hit_count: 0, fast_hit_count: 1 */
      tmp = tmp / 2; /* line 15 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    mp[2] = count; /* line 17 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  for (int64_t i = (3); i <= (sqrt(tmp)); i++) { /* line 19 slow_hit_count: 999998, fast_hit_count: 1 */
    count = 0; /* line 20 slow_hit_count: 999997, fast_hit_count: 0 */
    while (tmp % i == 0) { /* line 21 slow_hit_count: 999997, fast_hit_count: 0 */
      count++; /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      tmp = tmp / i; /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
    if (count) mp[i] += count; /* line 25 slow_hit_count: 999997, fast_hit_count: 0 */
  } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
  if (tmp > 2) mp[tmp] += 1; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  int64_t miin = 1000000000000000000; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  int64_t t1, one; /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  int64_t cnt; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto kk : mp) { /* line 31 slow_hit_count: 2, fast_hit_count: 2 */
    if (kk.second == 0) continue; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
    one = kk.first; /* line 33 slow_hit_count: 1, fast_hit_count: 1 */
    t1 = n; /* line 34 slow_hit_count: 1, fast_hit_count: 1 */
    cnt = 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
    while (t1 >= one) { /* line 36 slow_hit_count: 1, fast_hit_count: 7 */
      cnt += (t1 / one); /* line 37 slow_hit_count: 0, fast_hit_count: 6 */
      t1 = t1 / one; /* line 38 slow_hit_count: 0, fast_hit_count: 6 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
    miin = min(miin, cnt / kk.second); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 41 slow_hit_count: 0, fast_hit_count: 0 */
  cout << miin << endl; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 43 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

The comparison of line-level hit counts reveals the following:

1. **Line 19 (`for (int64_t i = (3); i <= (sqrt(tmp)); i++)`)**: The line is hit significantly more often in the slow input case (999,998 times) compared to the fast input (1 time). This indicates that the loop iterates many more times when processing the slow input.

2. **Line 21 (`while (tmp % i == 0)`)**: This loop is consistently hit with the slow input (999,997 times), whereas it’s never executed for the fast input. This suggests that the factorization of `b` is causing the loop to execute repeatedly.

3. **General Observation**: The factorization of `b` into its prime components is the main source of inefficiency when `b` is large and composed of many small prime factors, leading to a large number of iterations in the outer loop.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we derive the following natural language invariants:

1. **Invariant 1: Prime Factorization Complexity**
   - **Description**: If the base `b` has a large number of small prime factors, the loop responsible for determining these factors becomes highly iterative, significantly increasing the computation time.
   - **Condition**: This slowdown occurs because the `for` loop iterates up to the square root of `b`, and a high number of iterations are needed when `b` is composed of small factors repeated multiple times.

2. **Invariant 2: Large Prime Bases**
   - **Description**: For large prime values of `b`, the computation in determining trailing zeros remains straightforward, as there are fewer divisors leading to fewer iterations in loops.
   - **Condition**: When `b` is a large prime number, the program remains efficient because the factorization process is simpler, resulting in fewer loop iterations.

3. **Invariant 3: Nested Factorization**
   - **Description**: The performance degrades when the factorization logic is nested within loops which themselves are bounded by large factors, resulting in a high number of repeated operations.
   - **Condition**: Particularly, if `b` has prime factors that are close to each other and numerous, leading to a high `i` iteration count and a nested factorization that becomes computationally expensive.

These performance-characterizing invariants highlight the importance of the base number's factorization properties on the overall efficiency of the algorithm. Adjustments or optimizations that focus on reducing the complexity of factorization for such problematic bases could improve the program's performance on slow input scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The number "zero" is called "love" (or "l'oeuf" to be precise, literally means "egg" in French), for example when denoting the zero score in a game of tennis. 

Aki is fond of numbers, especially those with trailing zeros. For example, the number 9200 has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.

However, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.

Given two integers n and b (in decimal notation), your task is to calculate the number of trailing zero digits in the b-ary (in the base/radix of b) representation of n ! ([factorial](https://en.wikipedia.org/wiki/Factorial) of n). 

Input

The only line of the input contains two integers n and b (1 ≤ n ≤ 10^{18}, 2 ≤ b ≤ 10^{12}).

Output

Print an only integer — the number of trailing zero digits in the b-ary representation of n!

Examples

Input

6 9


Output

1


Input

38 11


Output

3


Input

5 2


Output

3


Input

5 10


Output

1

Note

In the first example, 6!_{(10)} = 720_{(10)} = 880_{(9)}.

In the third and fourth example, 5!_{(10)} = 120_{(10)} = 1111000_{(2)}.

The representation of the number x in the b-ary base is d_1, d_2, …, d_k if x = d_1 b^{k - 1} + d_2 b^{k - 2} + … + d_k b^0, where d_i are integers and 0 ≤ d_i ≤ b - 1. For example, the number 720 from the first example is represented as 880_{(9)} since 720 = 8 ⋅ 9^2 + 8 ⋅ 9 + 0 ⋅ 1.

You can read more about bases [here](https://en.wikipedia.org/wiki/Radix).

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the identified performance-characterizing invariants, here are the C++ code snippets that implement runtime checks for these conditions:

#### Invariant 1: Prime Factorization Complexity

This check ensures that if `b` has a large number of small prime factors, it triggers a warning.

```cpp
void check_prime_factorization_complexity(int64_t tmp, int64_t sqrt_b) {
    int64_t factor_count = 0;
    for (int64_t i = 3; i <= sqrt_b; i++) {
        while (tmp % i == 0) {
            factor_count++;
            tmp = tmp / i;
        }
    }
    if (factor_count > 100000) {  // Arbitrary threshold for illustration
        cerr << "Warning: Performance bottleneck condition triggered due to high factorization complexity!" << endl;
        abort();
    }
}
```

#### Invariant 2: Large Prime Bases

This check is more about documenting the efficient path and does not require specific code, as large primes naturally optimize the path.

#### Invariant 3: Nested Factorization

This check is embedded in the first, as nested factorization typically relates to multiple iterations of the base factorization loop.

### Phase 4: Integrate Checker Code with Original Program

Below is the instrumented C++ code with the integrated checker functions:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Check for prime factorization complexity
void check_prime_factorization_complexity(int64_t tmp, int64_t sqrt_b) {
    int64_t factor_count = 0;
    for (int64_t i = 3; i <= sqrt_b; i++) {
        while (tmp % i == 0) {
            factor_count++;
            tmp = tmp / i;
        }
    }
    if (factor_count > 100000) {  // Arbitrary threshold for illustration
        cerr << "Warning: Performance bottleneck condition triggered due to high factorization complexity!" << endl;
        abort();
    }
}

int main() {
    int64_t n, b;
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> b;
    map<int64_t, int64_t> mp;
    int64_t count = 0;
    int64_t tmp = b;

    if (tmp % 2 == 0) {
        while (tmp % 2 == 0) {
            count++;
            tmp = tmp / 2;
        }
        mp[2] = count;
    }

    int64_t sqrt_b = sqrt(tmp);
    check_prime_factorization_complexity(tmp, sqrt_b);

    for (int64_t i = 3; i <= sqrt_b; i++) {
        count = 0;
        while (tmp % i == 0) {
            count++;
            tmp = tmp / i;
        }
        if (count) mp[i] += count;
    }

    if (tmp > 2) mp[tmp] += 1;

    int64_t miin = 1000000000000000000;
    int64_t t1, one;
    int64_t cnt;

    for (auto kk : mp) {
        if (kk.second == 0) continue;
        one = kk.first;
        t1 = n;
        cnt = 0;
        while (t1 >= one) {
            cnt += (t1 / one);
            t1 = t1 / one;
        }
        miin = min(miin, cnt / kk.second);
    }
    cout << miin << endl;
}
```

### Explanation
- **Invariant Checks**: The `check_prime_factorization_complexity` function is called after initializing `tmp` and `sqrt_b`. This ensures that any complex prime factorization process is identified before the loop starts iterating excessively.
- **Placement**: The check is located right after computing `sqrt_b` and before starting the loop that factors `b`. This ensures that the program will issue a warning if `b`'s factorization results in excessive computations, potentially slowing down the program. This position avoids extra overhead in the main loops where performance is critical.

By implementing these checks, the user will be alerted when they input values that could lead to performance bottlenecks due to excessive factorization operations.

