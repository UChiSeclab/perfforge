system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The number "zero" is called "love" (or "l'oeuf" to be precise, literally means "egg" in French), for example when denoting the zero score in a game of tennis. 

Aki is fond of numbers, especially those with trailing zeros. For example, the number 9200 has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.

However, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.

Given two integers n and b (in decimal notation), your task is to calculate the number of trailing zero digits in the b-ary (in the base/radix of b) representation of n ! ([factorial](https://en.wikipedia.org/wiki/Factorial) of n). 

Input

The only line of the input contains two integers n and b (1 ≤ n ≤ 10^{18}, 2 ≤ b ≤ 10^{12}).

Output

Print an only integer — the number of trailing zero digits in the b-ary representation of n!

Examples

Input

6 9


Output

1


Input

38 11


Output

3


Input

5 2


Output

3


Input

5 10


Output

1

Note

In the first example, 6!_{(10)} = 720_{(10)} = 880_{(9)}.

In the third and fourth example, 5!_{(10)} = 120_{(10)} = 1111000_{(2)}.

The representation of the number x in the b-ary base is d_1, d_2, …, d_k if x = d_1 b^{k - 1} + d_2 b^{k - 2} + … + d_k b^0, where d_i are integers and 0 ≤ d_i ≤ b - 1. For example, the number 720 from the first example is represented as 880_{(9)} since 720 = 8 ⋅ 9^2 + 8 ⋅ 9 + 0 ⋅ 1.

You can read more about bases [here](https://en.wikipedia.org/wiki/Radix).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, b, key, k, num[10005][2], ans, cnt, step;
int main() {
  while (cin >> n >> b) {
    memset(num, 0, sizeof(num));
    key = b;
    k = 0;
    int flag;
    for (long long i = 2; i <= sqrt(b); i++) {
      flag = 0;
      while (key % i == 0) {
        num[k][0] = i;
        num[k][1]++;
        key = key / i;
        flag = 1;
      }
      if (flag) {
        k++;
      }
    }
    if (key != 1) {
      num[k][0] = key;
      num[k][1] = 1;
      k++;
    }
    ans = 1;
    ans = ans << 60;
    for (long long i = 0; i < k; i++) {
      step = n;
      cnt = 0;
      while (step) {
        step = step / num[i][0];
        cnt = cnt + step;
      }
      ans = min(ans, cnt / num[i][1]);
    }
    printf("%lld\n", ans);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

72 1264738917544


(G.2) Fast Input

72 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, b, key, k, num[10005][2], ans, cnt, step; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 4 slow_hit_count: 2, fast_hit_count: 2 */
  while (cin >> n >> b) { /* line 5 slow_hit_count: 2, fast_hit_count: 2 */
    memset(num, 0, sizeof(num)); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
    key = b; /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
    k = 0; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
    int flag; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
    for (long long i = 2; i <= sqrt(b); i++) { /* line 10 slow_hit_count: 1124606, fast_hit_count: 1 */
      flag = 0; /* line 11 slow_hit_count: 1124605, fast_hit_count: 0 */
      while (key % i == 0) { /* line 12 slow_hit_count: 1124608, fast_hit_count: 0 */
        num[k][0] = i; /* line 13 slow_hit_count: 3, fast_hit_count: 0 */
        num[k][1]++; /* line 14 slow_hit_count: 3, fast_hit_count: 0 */
        key = key / i; /* line 15 slow_hit_count: 3, fast_hit_count: 0 */
        flag = 1; /* line 16 slow_hit_count: 3, fast_hit_count: 0 */
      } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
      if (flag) { /* line 18 slow_hit_count: 1124605, fast_hit_count: 0 */
        k++; /* line 19 slow_hit_count: 1, fast_hit_count: 0 */
      } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    if (key != 1) { /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
      num[k][0] = key; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
      num[k][1] = 1; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
      k++; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    ans = 1; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
    ans = ans << 60; /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
    for (long long i = 0; i < k; i++) { /* line 29 slow_hit_count: 3, fast_hit_count: 2 */
      step = n; /* line 30 slow_hit_count: 2, fast_hit_count: 1 */
      cnt = 0; /* line 31 slow_hit_count: 2, fast_hit_count: 1 */
      while (step) { /* line 32 slow_hit_count: 10, fast_hit_count: 8 */
        step = step / num[i][0]; /* line 33 slow_hit_count: 8, fast_hit_count: 7 */
        cnt = cnt + step; /* line 34 slow_hit_count: 8, fast_hit_count: 7 */
      } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      ans = min(ans, cnt / num[i][1]); /* line 36 slow_hit_count: 2, fast_hit_count: 1 */
    } /* line 37 slow_hit_count: 0, fast_hit_count: 0 */
    printf("%lld\n", ans); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 41 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To identify performance bottlenecks in the given C program, we need to analyze the line-level hit counts and understand how different parts of the code behave with the slow input compared to the fast input.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line 10: `for (long long i = 2; i <= sqrt(b); i++)`**
   - **Hit Count Difference**: Slow input has 1,124,606 hits; fast input has 1 hit.
   - **Observation**: The loop iterates over all numbers up to the square root of `b`, which is extremely high for large values of `b`. The number of iterations is directly proportional to the square root of `b`.

2. **Line 12: `while (key % i == 0)`**
   - **Hit Count Difference**: Slow input has 1,124,608 hits; fast input has 0 hits.
   - **Observation**: This inner while loop is responsible for dividing `key` by `i` until `key` is no longer divisible by `i`. Frequent divisibility checks and divisions further amplify the effect of the outer loop when `b` has small prime factors repeatedly dividing it.

3. **Line 18: `if (flag)`**
   - **Hit Count Difference**: Slow input has 1,124,605 hits; fast input has 0 hits.
   - **Observation**: This condition is checked in every iteration of the for loop whenever the inner while loop modifies `key`. The frequent updates to `k` indicate that many small prime factors exist for `b`.

### Phase 2: Derive Performance-Characterizing Invariants

Based on these observations, we can derive the following performance-characterizing invariants in natural language:

1. **Invariant 1: Large Prime Factor Search**
   - **Natural Language Description**: "When the base `b` has a large number of small prime factors, the algorithm will execute many iterations to factorize `b`, leading to increased computational time. This is particularly evident when `b` approaches its upper constraint."

2. **Invariant 2: Expensive Division Operations**
   - **Natural Language Description**: "If `b` has numerous small prime factors, the repeated division to factorize `b` results in a large number of operations, significantly slowing down the execution."

3. **Invariant 3: High Iteration Count due to Base Complexity**
   - **Natural Language Description**: "When the number `b` is large and composed of small prime factors, the for loop tasked with factorizing `b` experiences high iteration counts, causing the computation to slow down."

These invariants focus on the input structure and its impact on performance, particularly the composition and size of the base `b`. They are designed to catch scenarios that could lead to slow execution without relying on specific numeric values from the slow input.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The number "zero" is called "love" (or "l'oeuf" to be precise, literally means "egg" in French), for example when denoting the zero score in a game of tennis. 

Aki is fond of numbers, especially those with trailing zeros. For example, the number 9200 has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.

However, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.

Given two integers n and b (in decimal notation), your task is to calculate the number of trailing zero digits in the b-ary (in the base/radix of b) representation of n ! ([factorial](https://en.wikipedia.org/wiki/Factorial) of n). 

Input

The only line of the input contains two integers n and b (1 ≤ n ≤ 10^{18}, 2 ≤ b ≤ 10^{12}).

Output

Print an only integer — the number of trailing zero digits in the b-ary representation of n!

Examples

Input

6 9


Output

1


Input

38 11


Output

3


Input

5 2


Output

3


Input

5 10


Output

1

Note

In the first example, 6!_{(10)} = 720_{(10)} = 880_{(9)}.

In the third and fourth example, 5!_{(10)} = 120_{(10)} = 1111000_{(2)}.

The representation of the number x in the b-ary base is d_1, d_2, …, d_k if x = d_1 b^{k - 1} + d_2 b^{k - 2} + … + d_k b^0, where d_i are integers and 0 ≤ d_i ≤ b - 1. For example, the number 720 from the first example is represented as 880_{(9)} since 720 = 8 ⋅ 9^2 + 8 ⋅ 9 + 0 ⋅ 1.

You can read more about bases [here](https://en.wikipedia.org/wiki/Radix).

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checker Code in C++

Based on the performance-characterizing invariants we derived, here are the checker implementations in C++:

1. **Checker for Large Prime Factor Search**
   - This checker will warn if `b` is composed of many small prime factors, which can lead to high iteration counts in the factorization loop.

```cpp
void check_large_prime_factor_search(long long b) {
    long long count_iterations = 0;
    long long temp_key = b;
    for (long long i = 2; i <= sqrt(b); i++) {
        while (temp_key % i == 0) {
            temp_key /= i;
            count_iterations++;
        }
    }
    if (temp_key != 1) {
        count_iterations++;
    }
    if (count_iterations > 10000) { // Arbitrary threshold for illustration
        cerr << "Warning: Large prime factor search triggered - high iteration count in factorization" << endl;
        abort();
    }
}
```

2. **Checker for Expensive Division Operations**
   - This checker monitors if the number of divisions to factorize `b` becomes excessive.

```cpp
void check_expensive_division_operations(long long b) {
    long long division_count = 0;
    long long temp_key = b;
    for (long long i = 2; i <= sqrt(b); i++) {
        while (temp_key % i == 0) {
            temp_key /= i;
            division_count++;
        }
    }
    if (division_count > 10000) { // Arbitrary threshold for excessive division
        cerr << "Warning: Expensive division operations triggered - excessive divisions during factorization" << endl;
        abort();
    }
}
```

3. **Checker for High Iteration Count due to Base Complexity**
   - This checker will evaluate if the number of iterations in the main loop exceeds a threshold due to the complexity of `b`.

```cpp
void check_high_iteration_count(long long b) {
    long long iteration_estimate = sqrt(b);
    if (iteration_estimate > 1000000) { // Arbitrary threshold for high loop iteration
        cerr << "Warning: High iteration count triggered due to base complexity" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checker Code into the Original Program

Now we will integrate these checker functions into the original C++ program to detect performance bottlenecks.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long n, b, key, k, num[10005][2], ans, cnt, step;

void check_large_prime_factor_search(long long b) {
    long long count_iterations = 0;
    long long temp_key = b;
    for (long long i = 2; i <= sqrt(b); i++) {
        while (temp_key % i == 0) {
            temp_key /= i;
            count_iterations++;
        }
    }
    if (temp_key != 1) {
        count_iterations++;
    }
    if (count_iterations > 10000) { // Arbitrary threshold for illustration
        cerr << "Warning: Large prime factor search triggered - high iteration count in factorization" << endl;
        abort();
    }
}

void check_expensive_division_operations(long long b) {
    long long division_count = 0;
    long long temp_key = b;
    for (long long i = 2; i <= sqrt(b); i++) {
        while (temp_key % i == 0) {
            temp_key /= i;
            division_count++;
        }
    }
    if (division_count > 10000) { // Arbitrary threshold for excessive division
        cerr << "Warning: Expensive division operations triggered - excessive divisions during factorization" << endl;
        abort();
    }
}

void check_high_iteration_count(long long b) {
    long long iteration_estimate = sqrt(b);
    if (iteration_estimate > 1000000) { // Arbitrary threshold for high loop iteration
        cerr << "Warning: High iteration count triggered due to base complexity" << endl;
        abort();
    }
}

int main() {
    while (cin >> n >> b) {
        check_large_prime_factor_search(b); // Check for large prime factor search
        check_expensive_division_operations(b); // Check for expensive division operations
        check_high_iteration_count(b); // Check for high iteration counts due to base complexity

        memset(num, 0, sizeof(num));
        key = b;
        k = 0;
        int flag;
        for (long long i = 2; i <= sqrt(b); i++) {
            flag = 0;
            while (key % i == 0) {
                num[k][0] = i;
                num[k][1]++;
                key = key / i;
                flag = 1;
            }
            if (flag) {
                k++;
            }
        }
        if (key != 1) {
            num[k][0] = key;
            num[k][1] = 1;
            k++;
        }
        ans = 1;
        ans = ans << 60;
        for (long long i = 0; i < k; i++) {
            step = n;
            cnt = 0;
            while (step) {
                step = step / num[i][0];
                cnt = cnt + step;
            }
            ans = min(ans, cnt / num[i][1]);
        }
        printf("%lld\n", ans);
    }
    return 0;
}
```

**Explanation of Integration:**
- **Before the main computation**: We call the checks after reading the input but before entering the main logic to prevent adding overhead inside the critical loop.
- **Thresholds**: They are set arbitrarily based on the problem constraints and typical behavior observed in the analysis. Adjustments may be needed for real-world usage based on empirical testing.

