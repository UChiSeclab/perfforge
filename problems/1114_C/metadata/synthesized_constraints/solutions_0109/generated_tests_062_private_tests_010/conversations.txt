system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The number "zero" is called "love" (or "l'oeuf" to be precise, literally means "egg" in French), for example when denoting the zero score in a game of tennis. 

Aki is fond of numbers, especially those with trailing zeros. For example, the number 9200 has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.

However, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.

Given two integers n and b (in decimal notation), your task is to calculate the number of trailing zero digits in the b-ary (in the base/radix of b) representation of n ! ([factorial](https://en.wikipedia.org/wiki/Factorial) of n). 

Input

The only line of the input contains two integers n and b (1 ≤ n ≤ 10^{18}, 2 ≤ b ≤ 10^{12}).

Output

Print an only integer — the number of trailing zero digits in the b-ary representation of n!

Examples

Input

6 9


Output

1


Input

38 11


Output

3


Input

5 2


Output

3


Input

5 10


Output

1

Note

In the first example, 6!_{(10)} = 720_{(10)} = 880_{(9)}.

In the third and fourth example, 5!_{(10)} = 120_{(10)} = 1111000_{(2)}.

The representation of the number x in the b-ary base is d_1, d_2, …, d_k if x = d_1 b^{k - 1} + d_2 b^{k - 2} + … + d_k b^0, where d_i are integers and 0 ≤ d_i ≤ b - 1. For example, the number 720 from the first example is represented as 880_{(9)} since 720 = 8 ⋅ 9^2 + 8 ⋅ 9 + 0 ⋅ 1.

You can read more about bases [here](https://en.wikipedia.org/wiki/Radix).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const long long maxn = (long long)1e9 + 7;
const long double EPS = 1e-9;
const long long INF = (long long)1e18 + 18;
const long long mod = (long long)1e9 + 7;
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  long long n, q;
  cin >> n >> q;
  long long ans = n;
  long long b = q;
  for (long long i = 2; i <= sqrt(q); i++) {
    if (b % i == 0) {
      long long p = 0;
      while (b % i == 0) {
        p++;
        b /= i;
      }
      long long c = 0;
      long long k = n;
      while (k / i > 0) {
        c += k / i;
        k /= i;
      }
      ans = min(ans, c / p);
    }
  }
  if (b >= 2) {
    long long c = 0;
    long long k = n;
    while (k / b > 0) {
      c += k / b;
      k /= b;
    }
    ans = min(ans, c);
  }
  cout << ans << '\n';
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

72 1264738917544


(G.2) Fast Input

72 30


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const long long maxn = (long long)1e9 + 7; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const long double EPS = 1e-9; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const long long INF = (long long)1e18 + 18; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const long long mod = (long long)1e9 + 7; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, q; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> q; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = n; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  long long b = q; /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 2; i <= sqrt(q); i++) { /* line 14 slow_hit_count: 1124606, fast_hit_count: 5 */
    if (b % i == 0) { /* line 15 slow_hit_count: 1124605, fast_hit_count: 4 */
      long long p = 0; /* line 16 slow_hit_count: 1, fast_hit_count: 3 */
      while (b % i == 0) { /* line 17 slow_hit_count: 4, fast_hit_count: 6 */
        p++; /* line 18 slow_hit_count: 3, fast_hit_count: 3 */
        b /= i; /* line 19 slow_hit_count: 3, fast_hit_count: 3 */
      } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
      long long c = 0; /* line 21 slow_hit_count: 1, fast_hit_count: 3 */
      long long k = n; /* line 22 slow_hit_count: 1, fast_hit_count: 3 */
      while (k / i > 0) { /* line 23 slow_hit_count: 7, fast_hit_count: 14 */
        c += k / i; /* line 24 slow_hit_count: 6, fast_hit_count: 11 */
        k /= i; /* line 25 slow_hit_count: 6, fast_hit_count: 11 */
      } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      ans = min(ans, c / p); /* line 27 slow_hit_count: 1, fast_hit_count: 3 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  if (b >= 2) { /* line 30 slow_hit_count: 1, fast_hit_count: 1 */
    long long c = 0; /* line 31 slow_hit_count: 1, fast_hit_count: 0 */
    long long k = n; /* line 32 slow_hit_count: 1, fast_hit_count: 0 */
    while (k / b > 0) { /* line 33 slow_hit_count: 1, fast_hit_count: 0 */
      c += k / b; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
      k /= b; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    ans = min(ans, c); /* line 37 slow_hit_count: 1, fast_hit_count: 0 */
  } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans << '\n'; /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 40 slow_hit_count: 1, fast_hit_count: 1 */


assistant: To identify the performance bottleneck in the given code and derive performance-characterizing invariants, we need to analyze the code's behavior on the "fast" and "slow" inputs. Here's a step-by-step breakdown:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**  
   The key difference in line-level hit counts between the fast and slow runs is evident in the `for` loop at `line 14`. Here are the relevant hit counts:
   - Line 14 (loop): Slow input hit count is 1,124,606 times, whereas the fast input hit count is only 5 times.
   - Lines 15 to 19 (inside the loop): These lines are executed significantly more for the slow input compared to the fast input.

2. **Pinpointing Inefficient Code:**
   - The loop iterating from `i = 2` to `sqrt(q)` is excessively hit in the slow input case. The slow input has a much larger `b` value, leading to a high number of iterations.
   - The inefficiency stems from the factorization process of `b` in the inner loop, which has a higher impact when `b` has many prime factors or is a large number.

3. **Inference on Data Structures and Loops:**
   - The `while` loop (lines 17-19) that reduces `b` by dividing it by `i` is executed more when `b` has small prime factors repeated several times, leading to more iterations.
   - The outer loop at line 14 runs for every potential factor up to `sqrt(q)`, which is costly when `q` is large.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Condition for Slow Path:**
   - Slowdown occurs when the base `b` is large and has many small prime factors. This results in a high number of iterations for the loop reducing `b` by its factors.

2. **Natural Language Description:**

   - **Invariant #1:** "If the base `b` has a large prime factor count or is a large number with many small prime factors, the loop iterating over these factors may run excessively, leading to slow performance."

3. **Broad Thresholds:**
   - Since the constraints for `b` are up to `10^{12}`, we focus on the nature of its factorization rather than specific `b` values. A threshold could be the number of significant factors or factorization depth.

### Output: Performance Invariants

1. **Invariant #1: Large Factorization Depth**
   - "If the base `b` has a deep factorization, particularly if it contains many repeated small prime factors, the performance may degrade as the loop processing these factors will execute many times."

By capturing the above invariant, it can help detect potential slow scenarios in similar contexts without relying on exact input values. This invariant highlights the relationship between the number's factorization depth and runtime complexity.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The number "zero" is called "love" (or "l'oeuf" to be precise, literally means "egg" in French), for example when denoting the zero score in a game of tennis. 

Aki is fond of numbers, especially those with trailing zeros. For example, the number 9200 has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.

However, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.

Given two integers n and b (in decimal notation), your task is to calculate the number of trailing zero digits in the b-ary (in the base/radix of b) representation of n ! ([factorial](https://en.wikipedia.org/wiki/Factorial) of n). 

Input

The only line of the input contains two integers n and b (1 ≤ n ≤ 10^{18}, 2 ≤ b ≤ 10^{12}).

Output

Print an only integer — the number of trailing zero digits in the b-ary representation of n!

Examples

Input

6 9


Output

1


Input

38 11


Output

3


Input

5 2


Output

3


Input

5 10


Output

1

Note

In the first example, 6!_{(10)} = 720_{(10)} = 880_{(9)}.

In the third and fourth example, 5!_{(10)} = 120_{(10)} = 1111000_{(2)}.

The representation of the number x in the b-ary base is d_1, d_2, …, d_k if x = d_1 b^{k - 1} + d_2 b^{k - 2} + … + d_k b^0, where d_i are integers and 0 ≤ d_i ≤ b - 1. For example, the number 720 from the first example is represented as 880_{(9)} since 720 = 8 ⋅ 9^2 + 8 ⋅ 9 + 0 ⋅ 1.

You can read more about bases [here](https://en.wikipedia.org/wiki/Radix).

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Invariant Checkers in C++

Based on the previously inferred invariant, we need to implement a check to detect when the program may enter a slow path. The invariant we derived was:

**Invariant:** "If the base `b` has a deep factorization, particularly if it contains many repeated small prime factors, the performance may degrade as the loop processing these factors will execute many times."

To implement this in C++, we can check if the number of prime factors of `b` exceeds a certain threshold. This threshold is semi-arbitrary but should reflect a complexity that leads to significant slowdowns.

Here is a C++ function to implement the checker:

```cpp
void check_factorization_invariant(long long b, int threshold) {
    int factor_count = 0;
    for (long long i = 2; i <= sqrt(b); i++) {
        while (b % i == 0) {
            factor_count++;
            b /= i;
        }
    }
    if (b > 1) {  // if there's any prime factor left
        factor_count++;
    }
    if (factor_count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many factors!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checker into the Original Program

Now we will integrate the checker function into the original program. The check should be performed before the main processing loop to avoid additional overhead in tight loops.

Here is the instrumented code with the invariant checks integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;
const long long maxn = (long long)1e9 + 7;
const long double EPS = 1e-9;
const long long INF = (long long)1e18 + 18;
const long long mod = (long long)1e9 + 7;

// Checker function for performance bottleneck
void check_factorization_invariant(long long b, int threshold) {
    int factor_count = 0;
    for (long long i = 2; i <= sqrt(b); i++) {
        while (b % i == 0) {
            factor_count++;
            b /= i;
        }
    }
    if (b > 1) {  // if there's any prime factor left
        factor_count++;
    }
    if (factor_count > threshold) {
        cerr << "Warning: Performance bottleneck condition triggered - too many factors!" << endl;
        abort();
    }
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    long long n, q;
    cin >> n >> q;
    long long ans = n;
    long long b = q;

    // Insert checker before main loop to avoid overhead in tight loops
    check_factorization_invariant(b, 50);  // Arbitrary threshold, can be tuned based on tests

    for (long long i = 2; i <= sqrt(q); i++) {
        if (b % i == 0) {
            long long p = 0;
            while (b % i == 0) {
                p++;
                b /= i;
            }
            long long c = 0;
            long long k = n;
            while (k / i > 0) {
                c += k / i;
                k /= i;
            }
            ans = min(ans, c / p);
        }
    }
    if (b >= 2) {
        long long c = 0;
        long long k = n;
        while (k / b > 0) {
            c += k / b;
            k /= b;
        }
        ans = min(ans, c);
    }
    cout << ans << '\n';
}
```

### Explanation
- The `check_factorization_invariant` function calculates the number of prime factors of `b`.
- If the factor count exceeds a specified threshold, a warning is printed and the program aborts, indicating a potential performance bottleneck.
- The threshold value is set to `50` in this example, but it may be adjusted based on empirical testing or specific requirements.

This integration will help identify scenarios similar to the slow input case, providing early detection and correction for potential performance degradation.

