system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The number "zero" is called "love" (or "l'oeuf" to be precise, literally means "egg" in French), for example when denoting the zero score in a game of tennis. 

Aki is fond of numbers, especially those with trailing zeros. For example, the number 9200 has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.

However, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.

Given two integers n and b (in decimal notation), your task is to calculate the number of trailing zero digits in the b-ary (in the base/radix of b) representation of n ! ([factorial](https://en.wikipedia.org/wiki/Factorial) of n). 

Input

The only line of the input contains two integers n and b (1 ≤ n ≤ 10^{18}, 2 ≤ b ≤ 10^{12}).

Output

Print an only integer — the number of trailing zero digits in the b-ary representation of n!

Examples

Input

6 9


Output

1


Input

38 11


Output

3


Input

5 2


Output

3


Input

5 10


Output

1

Note

In the first example, 6!_{(10)} = 720_{(10)} = 880_{(9)}.

In the third and fourth example, 5!_{(10)} = 120_{(10)} = 1111000_{(2)}.

The representation of the number x in the b-ary base is d_1, d_2, …, d_k if x = d_1 b^{k - 1} + d_2 b^{k - 2} + … + d_k b^0, where d_i are integers and 0 ≤ d_i ≤ b - 1. For example, the number 720 from the first example is represented as 880_{(9)} since 720 = 8 ⋅ 9^2 + 8 ⋅ 9 + 0 ⋅ 1.

You can read more about bases [here](https://en.wikipedia.org/wiki/Radix).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
long long n, m;
map<long long, long long> p;
long long get(long long n, long long u) {
  long long res = 0;
  while (n >= u) {
    res += n / u;
    n /= u;
  }
  return res;
}
void init(long long n) {
  for (long long i = 2; i <= sqrt(n);)
    if (n % i == 0)
      while (n % i == 0) {
        n /= i;
        p[i]++;
      }
    else
      ++i;
  if (n != 1) p[n]++;
}
int main() {
  cin >> n >> m;
  init(m);
  long long ans = (long long)1000000000000000000;
  for (auto it : p) {
    ans = min(ans, get(n, it.first) / it.second);
  }
  cout << ans;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

72 999999998141


(G.2) Fast Input

72 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
long long n, m; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
map<long long, long long> p; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
long long get(long long n, long long u) { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  long long res = 0; /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  while (n >= u) { /* line 7 slow_hit_count: 1, fast_hit_count: 7 */
    res += n / u; /* line 8 slow_hit_count: 0, fast_hit_count: 6 */
    n /= u; /* line 9 slow_hit_count: 0, fast_hit_count: 6 */
  } /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  return res; /* line 11 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
void init(long long n) { /* line 13 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 2; i <= sqrt(n);) /* line 14 slow_hit_count: 999999, fast_hit_count: 1 */
    if (n % i == 0) /* line 15 slow_hit_count: 999998, fast_hit_count: 0 */
      while (n % i == 0) { /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
        n /= i; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
        p[i]++; /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    else /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
      ++i; /* line 21 slow_hit_count: 999998, fast_hit_count: 0 */
  if (n != 1) p[n]++; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  init(m); /* line 26 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = (long long)1000000000000000000; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto it : p) { /* line 28 slow_hit_count: 2, fast_hit_count: 2 */
    ans = min(ans, get(n, it.first) / it.second); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cout << ans; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 32 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance issue in the given C program and derive performance-characterizing invariants, we will first analyze the code and hit count information, and then generate natural language statements that describe conditions leading to slow execution.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - The hit count information indicates that the `init` function, specifically the loop at line 14, is a significant contributor to the slowdown.
   - For the slow input, line 14 has a hit count of 999,999, whereas for the fast input, it has a hit count of just 1.

2. **Pinpointing Lines or Functions with More Hits:**
   - The `init` function contains a loop that runs from `i = 2` to `i <= sqrt(n)`. For the slow input, this loop iterates almost a million times, indicating that `sqrt(n)` is very large when `n` is the value 999,999,998,141.
   - The condition `if (n % i == 0)` at line 15 and the increment `++i` at line 21 are heavily hit for the slow input, suggesting many iterations where no factors are found early.
   - The line `p[i]++` at line 18 and its surrounding loop are not hit, indicating that `n` is not divisible by any `i` for a significant portion of the loop's execution.

3. **Inference on Data Structures and Loops:**
   - The main performance issue lies in the factorization of the base `m` in the `init` function. When `m` is a large prime or has few small factors, the loop runs extensively without finding factors, thus contributing to the slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Performance Invariants:**

   - **Invariant #1**: "If the base `m` is a large number with few small factors, the factorization process becomes expensive, leading to a slowdown. A high iteration count in the loop checking divisors up to `sqrt(m)` is indicative of this issue."
     - This invariant captures the case where the algorithm iterates over many numbers without finding factors quickly, especially when `m` is large and prime or nearly prime.

   - **Invariant #2**: "If the base `m` is close to its upper constraint (e.g., close to 10^12), and is a prime or has very few divisors below its square root, the program will spend a significant amount of time in the factorization loop."
     - This targets scenarios where `m` is large and complicates factorization, potentially leading to maximum iterations in the divisor loop.

2. **Thresholds and Generalization:**
   - The conditions focus on the structural properties of `m` rather than specific numeric thresholds, recognizing patterns such as largeness and primality within the constraints (2 ≤ m ≤ 10^12).

### Conclusion

The slowdown in execution is primarily due to the expensive factorization process of large numbers with few small factors. By understanding these invariants, we can better anticipate and address performance issues for future inputs that may trigger similar slow paths.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The number "zero" is called "love" (or "l'oeuf" to be precise, literally means "egg" in French), for example when denoting the zero score in a game of tennis. 

Aki is fond of numbers, especially those with trailing zeros. For example, the number 9200 has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.

However, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.

Given two integers n and b (in decimal notation), your task is to calculate the number of trailing zero digits in the b-ary (in the base/radix of b) representation of n ! ([factorial](https://en.wikipedia.org/wiki/Factorial) of n). 

Input

The only line of the input contains two integers n and b (1 ≤ n ≤ 10^{18}, 2 ≤ b ≤ 10^{12}).

Output

Print an only integer — the number of trailing zero digits in the b-ary representation of n!

Examples

Input

6 9


Output

1


Input

38 11


Output

3


Input

5 2


Output

3


Input

5 10


Output

1

Note

In the first example, 6!_{(10)} = 720_{(10)} = 880_{(9)}.

In the third and fourth example, 5!_{(10)} = 120_{(10)} = 1111000_{(2)}.

The representation of the number x in the b-ary base is d_1, d_2, …, d_k if x = d_1 b^{k - 1} + d_2 b^{k - 2} + … + d_k b^0, where d_i are integers and 0 ≤ d_i ≤ b - 1. For example, the number 720 from the first example is represented as 880_{(9)} since 720 = 8 ⋅ 9^2 + 8 ⋅ 9 + 0 ⋅ 1.

You can read more about bases [here](https://en.wikipedia.org/wiki/Radix).

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Natural Language Invariants in C++

Based on the natural language performance invariants derived earlier, we will implement C++ code snippets that check these conditions at runtime. Here are the checker implementations:

### Invariant #1: Large `m` with Few Small Factors

Natural Language Description: "If the base `m` is a large number with few small factors, the factorization process becomes expensive, leading to a slowdown. A high iteration count in the loop checking divisors up to `sqrt(m)` is indicative of this issue."

```cpp
void check_large_prime_invariant(long long m, long long iterationCount) {
    if (m > 1e12 / 2 && iterationCount > sqrt(m) / 10) {
        cerr << "Warning: Performance bottleneck condition triggered - large m with few factors!" << endl;
        abort();
    }
}
```

### Invariant #2: `m` Close to Upper Constraint and Prime

Natural Language Description: "If the base `m` is close to its upper constraint (e.g., close to 10^12), and is a prime or has very few divisors below its square root, the program will spend a significant amount of time in the factorization loop."

```cpp
void check_near_max_prime_invariant(long long m, long long iterationCount) {
    if (m > 1e12 - 1e6 && iterationCount > sqrt(m) / 5) {
        cerr << "Warning: Performance bottleneck condition triggered - near max m and possibly prime!" << endl;
        abort();
    }
}
```

## Phase 4: Integrate the Checker Code into the Original Program

Now, we will integrate these checkers into the existing C++ program at appropriate points in the control flow to detect performance bottlenecks effectively.

```cpp
#include <bits/stdc++.h>
using namespace std;

long long n, m;
map<long long, long long> p;

long long get(long long n, long long u) {
    long long res = 0;
    while (n >= u) {
        res += n / u;
        n /= u;
    }
    return res;
}

void init(long long n) {
    long long iterationCount = 0; // Track the number of iterations in the loop
    for (long long i = 2; i <= sqrt(n);) {
        ++iterationCount; // Increment iteration count
        if (n % i == 0) {
            while (n % i == 0) {
                n /= i;
                p[i]++;
            }
        } else {
            ++i;
        }
    }
    if (n != 1) p[n]++;
    
    // Check for performance bottlenecks
    check_large_prime_invariant(n, iterationCount);
    check_near_max_prime_invariant(n, iterationCount);
}

int main() {
    cin >> n >> m;
    init(m);
    long long ans = (long long)1000000000000000000;
    for (auto it : p) {
        ans = min(ans, get(n, it.first) / it.second);
    }
    cout << ans;
    return 0;
}
```

### Explanation of Integration

- **Placement of Checks:** The checks are placed after the factorization loop in the `init` function since this is where the iteration count is fully determined. This avoids adding overhead within the loop itself.
- **Iteration Count:** We track the number of iterations of the main loop in `init` to assess whether the base `m` seems hard to factor, given the conditions described in the invariants.
- **Threshold Logic:** We use thresholds relative to the constraints and properties of `m` (size and primality characteristics) to trigger the warnings and halt if the conditions are met. This helps ensure that the program remains responsive to inputs that might lead to performance degradation.

