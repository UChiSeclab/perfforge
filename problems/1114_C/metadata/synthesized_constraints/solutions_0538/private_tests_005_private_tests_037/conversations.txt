system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

The number "zero" is called "love" (or "l'oeuf" to be precise, literally means "egg" in French), for example when denoting the zero score in a game of tennis. 

Aki is fond of numbers, especially those with trailing zeros. For example, the number 9200 has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.

However, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.

Given two integers n and b (in decimal notation), your task is to calculate the number of trailing zero digits in the b-ary (in the base/radix of b) representation of n ! ([factorial](https://en.wikipedia.org/wiki/Factorial) of n). 

Input

The only line of the input contains two integers n and b (1 ≤ n ≤ 10^{18}, 2 ≤ b ≤ 10^{12}).

Output

Print an only integer — the number of trailing zero digits in the b-ary representation of n!

Examples

Input

6 9


Output

1


Input

38 11


Output

3


Input

5 2


Output

3


Input

5 10


Output

1

Note

In the first example, 6!_{(10)} = 720_{(10)} = 880_{(9)}.

In the third and fourth example, 5!_{(10)} = 120_{(10)} = 1111000_{(2)}.

The representation of the number x in the b-ary base is d_1, d_2, …, d_k if x = d_1 b^{k - 1} + d_2 b^{k - 2} + … + d_k b^0, where d_i are integers and 0 ≤ d_i ≤ b - 1. For example, the number 720 from the first example is represented as 880_{(9)} since 720 = 8 ⋅ 9^2 + 8 ⋅ 9 + 0 ⋅ 1.

You can read more about bases [here](https://en.wikipedia.org/wiki/Radix).

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <typename t>
t in(t q) {
  cin >> q;
  return q;
}
template <typename T>
ostream& operator<<(ostream& os, const vector<T>& v) {
  os << "[";
  for (int i = 0; i < ((int)(v).size()); ++i) {
    os << v[i];
    if (i != ((int)(v).size()) - 1) os << ",";
  }
  os << "]";
  return os;
}
template <typename T, typename S>
ostream& operator<<(ostream& os, const map<T, S>& v) {
  for (auto it : v) os << "(" << it.first << ":" << it.second << ")";
  return os;
}
template <typename T, typename S>
ostream& operator<<(ostream& os, const pair<T, S>& v) {
  os << "(" << v.first << "," << v.second << ")";
  return os;
}
const long double PI = acosl(-1);
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rng64(chrono::steady_clock::now().time_since_epoch().count());
inline int rand(int l, int r) {
  return uniform_int_distribution<int>(l, r)(rng);
}
inline long long rand(long long l, long long r) {
  return uniform_int_distribution<long long>(l, r)(rng);
}
int main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  cout << setprecision(10);
  long long n, b;
  cin >> n >> b;
  map<long long, long long> pr;
  for (long long i = 2; i <= sqrt(b); ++i) {
    while (b % i == 0) {
      pr[i]++;
      b /= i;
    }
  }
  if (b > 1) pr[b]++;
  long long mi = -1;
  for (auto el : pr) {
    if (el.second == 0) continue;
    long long first = el.first;
    long long c = 0;
    while (first <= n) {
      c += n / first;
      if (first > n / el.first) break;
      first *= el.first;
    }
    c /= el.second;
    if (mi == -1) mi = c;
    mi = min(mi, c);
  }
  cout << mi << '\n';
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

72 999999998141


(G.2) Fast Input

72 2


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <typename t> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
t in(t q) { /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> q; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
  return q; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const vector<T>& v) { /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  os << "["; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < ((int)(v).size()); ++i) { /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    os << v[i]; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    if (i != ((int)(v).size()) - 1) os << ","; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  os << "]"; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename S> /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const map<T, S>& v) { /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto it : v) os << "(" << it.first << ":" << it.second << ")"; /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T, typename S> /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
ostream& operator<<(ostream& os, const pair<T, S>& v) { /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  os << "(" << v.first << "," << v.second << ")"; /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
  return os; /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
const long double PI = acosl(-1); /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
mt19937_64 rng64(chrono::steady_clock::now().time_since_epoch().count()); /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
inline int rand(int l, int r) { /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  return uniform_int_distribution<int>(l, r)(rng); /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
inline long long rand(long long l, long long r) { /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  return uniform_int_distribution<long long>(l, r)(rng); /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  ios::sync_with_stdio(0); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  cout << setprecision(10); /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  long long n, b; /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n >> b; /* line 43 slow_hit_count: 1, fast_hit_count: 1 */
  map<long long, long long> pr; /* line 44 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long i = 2; i <= sqrt(b); ++i) { /* line 45 slow_hit_count: 999999, fast_hit_count: 1 */
    while (b % i == 0) { /* line 46 slow_hit_count: 999998, fast_hit_count: 0 */
      pr[i]++; /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
      b /= i; /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 49 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  if (b > 1) pr[b]++; /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  long long mi = -1; /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  for (auto el : pr) { /* line 53 slow_hit_count: 2, fast_hit_count: 2 */
    if (el.second == 0) continue; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
    long long first = el.first; /* line 55 slow_hit_count: 1, fast_hit_count: 1 */
    long long c = 0; /* line 56 slow_hit_count: 1, fast_hit_count: 1 */
    while (first <= n) { /* line 57 slow_hit_count: 1, fast_hit_count: 6 */
      c += n / first; /* line 58 slow_hit_count: 0, fast_hit_count: 6 */
      if (first > n / el.first) break; /* line 59 slow_hit_count: 0, fast_hit_count: 6 */
      first *= el.first; /* line 60 slow_hit_count: 0, fast_hit_count: 5 */
    } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    c /= el.second; /* line 62 slow_hit_count: 1, fast_hit_count: 1 */
    if (mi == -1) mi = c; /* line 63 slow_hit_count: 1, fast_hit_count: 1 */
    mi = min(mi, c); /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  cout << mi << '\n'; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 68 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Hit Counts:**
   - The line `for (long long i = 2; i <= sqrt(b); ++i) {` (line 45) shows **999,999** hits for the slow input compared to just **1** hit for the fast input.
   - The line `while (b % i == 0) {` (line 46) also shows a high hit count (**999,998** for the slow input) indicating that this inner loop is executed many times for the slow input, leading to a significantly slower runtime.
   - The loop `while (first <= n) {` (line 57) has **1 hit** for the slow input and **6 hits** for the fast input. Although the number of hits is low, this line is part of the critical loop that depends on the results from the previous computation.

2. **Interaction with Data Structures:**
   - The high number of hits for the `for` loop iterating up to `sqrt(b)` indicates that `b` is a large composite number with many small prime factors. This results in many divisions and increments in the map `pr`, which tracks the prime factorization of `b`.

3. **Loop and Calculation Observations:**
   - The inner `while` loop (line 46) is responsible for dividing `b` by its smallest prime factor `i` multiple times until `b` is no longer divisible by `i`. For a large `b` with many small prime factors, this loop executes many times, causing a slowdown.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant on Factorization Complexity:**
   - "If the base `b` has a large number of small prime factors, the time complexity of factorizing `b` increases, leading to slow performance. This is particularly evident when iterating up to `sqrt(b)` involves many repeated divisions."

   ```cpp
   void check_factorization_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: factorization_invariant triggered - excessive factorization divisions" << endl;
           abort();
       }
   }

   // Before starting factorization
   check_factorization_invariant(b > SOME_LARGE_THRESHOLD && /* condition indicating many small divisors */);
   ```

2. **Invariant on Prime Factor Divisions:**
   - "When the number `b` has a substantial number of small prime factors, many divisions are required to completely factorize the number, significantly impacting performance."

   ```cpp
   void check_division_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: division_invariant triggered - many divisions required for factorization" << endl;
           abort();
       }
   }

   // After computing prime factors
   check_division_invariant(pr.size() > SOME_FACTOR_COUNT_THRESHOLD);
   ```

3. **Invariant on Prime Factorization Loop:**
   - "If `b` requires iterating over a considerable range of integers to fully factorize, leading to a high number of loop iterations, it may cause slowdowns in computation."

   ```cpp
   void check_iteration_invariant(bool condition) {
       if (condition) {
           cerr << "Warning: iteration_invariant triggered - excessive loop iterations for factorization" << endl;
           abort();
       }
   }

   // Before starting loop to factorize
   check_iteration_invariant(sqrt(b) > SOME_SQRT_B_THRESHOLD);
   ```

These invariants abstract the conditions under which the code becomes inefficient, focusing on the properties of `b` that lead to many iterations and divisions during factorization. The constants such as `SOME_LARGE_THRESHOLD`, `SOME_FACTOR_COUNT_THRESHOLD`, and `SOME_SQRT_B_THRESHOLD` can be defined based on experimentation to catch these slow conditions within the constraint boundaries of the problem.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
The number "zero" is called "love" (or "l'oeuf" to be precise, literally means "egg" in French), for example when denoting the zero score in a game of tennis. 

Aki is fond of numbers, especially those with trailing zeros. For example, the number 9200 has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.

However, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.

Given two integers n and b (in decimal notation), your task is to calculate the number of trailing zero digits in the b-ary (in the base/radix of b) representation of n ! ([factorial](https://en.wikipedia.org/wiki/Factorial) of n). 

Input

The only line of the input contains two integers n and b (1 ≤ n ≤ 10^{18}, 2 ≤ b ≤ 10^{12}).

Output

Print an only integer — the number of trailing zero digits in the b-ary representation of n!

Examples

Input

6 9


Output

1


Input

38 11


Output

3


Input

5 2


Output

3


Input

5 10


Output

1

Note

In the first example, 6!_{(10)} = 720_{(10)} = 880_{(9)}.

In the third and fourth example, 5!_{(10)} = 120_{(10)} = 1111000_{(2)}.

The representation of the number x in the b-ary base is d_1, d_2, …, d_k if x = d_1 b^{k - 1} + d_2 b^{k - 2} + … + d_k b^0, where d_i are integers and 0 ≤ d_i ≤ b - 1. For example, the number 720 from the first example is represented as 880_{(9)} since 720 = 8 ⋅ 9^2 + 8 ⋅ 9 + 0 ⋅ 1.

You can read more about bases [here](https://en.wikipedia.org/wiki/Radix).

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

To implement the performance invariants derived in Phase 2, we need to write checker functions in C++ that will be triggered when certain conditions indicative of potential slowdowns are met. Below are the C++ snippets for the invariants:

1. **Invariant on Factorization Complexity:**
   - This checks if `b` has many small prime factors, which leads to significant time spent in factorization.

   ```cpp
   void check_factorization_invariant(long long b, long long threshold) {
       long long count = 0;
       for (long long i = 2; i <= sqrt(b); ++i) {
           while (b % i == 0) {
               count++;
               b /= i;
           }
       }
       if (b > 1) count++; // Count the last prime factor if b is still greater than 1
       
       if (count > threshold) {
           cerr << "Warning: factorization_invariant triggered - excessive factorization divisions" << endl;
           abort();
       }
   }
   ```

2. **Invariant on Prime Factor Divisions:**
   - This checks if there are excessive divisions needed to factorize `b`.

   ```cpp
   void check_division_invariant(const map<long long, long long>& pr, long long threshold) {
       if (pr.size() > threshold) {
           cerr << "Warning: division_invariant triggered - many divisions required for factorization" << endl;
           abort();
       }
   }
   ```

3. **Invariant on Prime Factorization Loop:**
   - This checks if the loop for factorizing `b` involves iterating over too large a range.

   ```cpp
   void check_iteration_invariant(long long b, long long threshold) {
       if (sqrt(b) > threshold) {
           cerr << "Warning: iteration_invariant triggered - excessive loop iterations for factorization" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate the Checkers into the Original Program

Now we integrate these checks into the C++ solution provided:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_factorization_invariant(long long b, long long threshold) {
    long long count = 0;
    for (long long i = 2; i <= sqrt(b); ++i) {
        while (b % i == 0) {
            count++;
            b /= i;
        }
    }
    if (b > 1) count++; // Count the last prime factor if b is still greater than 1
    
    if (count > threshold) {
        cerr << "Warning: factorization_invariant triggered - excessive factorization divisions" << endl;
        abort();
    }
}

void check_division_invariant(const map<long long, long long>& pr, long long threshold) {
    if (pr.size() > threshold) {
        cerr << "Warning: division_invariant triggered - many divisions required for factorization" << endl;
        abort();
    }
}

void check_iteration_invariant(long long b, long long threshold) {
    if (sqrt(b) > threshold) {
        cerr << "Warning: iteration_invariant triggered - excessive loop iterations for factorization" << endl;
        abort();
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cout << setprecision(10);

    long long n, b;
    cin >> n >> b;
    
    // Insert invariant checks
    long long factorization_threshold = 1000; // Sample threshold
    long long iteration_threshold = 1000000; // Sample threshold
    check_iteration_invariant(b, iteration_threshold);
    
    map<long long, long long> pr;
    long long b_copy = b;
    
    for (long long i = 2; i <= sqrt(b_copy); ++i) {
        while (b_copy % i == 0) {
            pr[i]++;
            b_copy /= i;
        }
    }
    if (b_copy > 1) pr[b_copy]++;
    
    // Check factorization complexity
    check_factorization_invariant(b, factorization_threshold);
    check_division_invariant(pr, factorization_threshold);

    long long mi = -1;
    for (auto el : pr) {
        if (el.second == 0) continue;
        long long first = el.first;
        long long c = 0;
        while (first <= n) {
            c += n / first;
            if (first > n / el.first) break;
            first *= el.first;
        }
        c /= el.second;
        if (mi == -1) mi = c;
        mi = min(mi, c);
    }
    cout << mi << '\n';
    return 0;
}
```

### Explanation

- **Checker Placement:** The checks are placed before the loops start, using reasonable thresholds that can be adjusted based on further profiling or empirical data. This ensures that they do not add overhead in the tight loops.
- **Adjustable Thresholds:** The thresholds (e.g., `factorization_threshold`, `iteration_threshold`) are placeholders and can be tuned for the specific performance characteristics of the hardware or input patterns observed in practice.
- **Integration:** The checks are seamlessly integrated to ensure that the conditions leading to potential slowdowns are caught early, providing useful feedback for performance tuning.

