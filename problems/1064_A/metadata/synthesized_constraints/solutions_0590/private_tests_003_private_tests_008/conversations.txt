system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Masha has three sticks of length a, b and c centimeters respectively. In one minute Masha can pick one arbitrary stick and increase its length by one centimeter. She is not allowed to break sticks.

What is the minimum number of minutes she needs to spend increasing the stick's length in order to be able to assemble a triangle of positive area. Sticks should be used as triangle's sides (one stick for one side) and their endpoints should be located at triangle's vertices.

Input

The only line contains tree integers a, b and c (1 ≤ a, b, c ≤ 100) — the lengths of sticks Masha possesses.

Output

Print a single integer — the minimum number of minutes that Masha needs to spend in order to be able to make the triangle of positive area from her sticks.

Examples

Input

3 4 5


Output

0


Input

2 5 3


Output

1


Input

100 10 10


Output

81

Note

In the first example, Masha can make a triangle from the sticks without increasing the length of any of them.

In the second example, Masha can't make a triangle of positive area from the sticks she has at the beginning, but she can spend one minute to increase the length 2 centimeter stick by one and after that form a triangle with sides 3, 3 and 5 centimeters.

In the third example, Masha can take 33 minutes to increase one of the 10 centimeters sticks by 33 centimeters, and after that take 48 minutes to increase another 10 centimeters stick by 48 centimeters. This way she can form a triangle with lengths 43, 58 and 100 centimeters in 81 minutes. One can show that it is impossible to get a valid triangle faster.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
static long long gcd(long long x, long long y) {
  return y == 0 ? x : gcd(y, x % y);
}
int solve() {
  int a, b, c;
  scanf("%d%d%d", &a, &b, &c);
  int ans = 1000000009;
  for (int i = 0; i < 256; ++i)
    for (int j = 0; j < 256; ++j)
      for (int k = 0; k < 256; ++k) {
        if ((a + i) < (b + j) + (c + k) && (b + j) < (a + i) + (c + k) &&
            (c + k) < (a + i) + (b + j)) {
          ans = std::min(ans, i + j + k);
        }
      }
  printf("%d\n", ans);
  return 0;
}
int main() {
  ::std::ios::sync_with_stdio(false);
  ::std::cin.tie(0);
  ::std::cout.tie(0);
  int t = 1;
  while (t--) solve();
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

100 100 100


(G.2) Fast Input

100 1 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
static long long gcd(long long x, long long y) { /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
  return y == 0 ? x : gcd(y, x % y); /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int solve() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int a, b, c; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  scanf("%d%d%d", &a, &b, &c); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int ans = 1000000009; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < 256; ++i) /* line 10 slow_hit_count: 257, fast_hit_count: 257 */
    for (int j = 0; j < 256; ++j) /* line 11 slow_hit_count: 65792, fast_hit_count: 65792 */
      for (int k = 0; k < 256; ++k) { /* line 12 slow_hit_count: 16842752, fast_hit_count: 16842752 */
        if ((a + i) < (b + j) + (c + k) && (b + j) < (a + i) + (c + k) && /* line 13 slow_hit_count: 16777216, fast_hit_count: 16777216 */
            (c + k) < (a + i) + (b + j)) { /* line 14 slow_hit_count: 15487304, fast_hit_count: 9160940 */
          ans = std::min(ans, i + j + k); /* line 15 slow_hit_count: 14842348, fast_hit_count: 8515984 */
        } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  printf("%d\n", ans); /* line 18 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  ::std::ios::sync_with_stdio(false); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  ::std::cin.tie(0); /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  ::std::cout.tie(0); /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
  int t = 1; /* line 25 slow_hit_count: 1, fast_hit_count: 1 */
  while (t--) solve(); /* line 26 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 27 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Upon analyzing the hit count information, the main performance bottleneck is identified within the nested loop structure in the `solve()` function:

- **Lines 10, 11, and 12**: These lines represent three nested loops, each iterating 256 times. This results in a total of \(256^3\) iterations, or 16,777,216 iterations in total.
- **Lines 13 and 14**: The conditional check for the triangle inequality is performed in every iteration. For the slow input, the condition is evaluated approximately 15,487,304 times, while for the fast input, it is evaluated 9,160,940 times.

The significant difference in hit counts for lines 14 and 15 between slow and fast inputs indicates that the major slowdown is due to the number of times the condition is satisfied and updates the `ans` variable.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, here's a natural language description of the performance-characterizing invariants:

1. **Invariant 1: Balanced Stick Lengths and Large Values**
   - Natural Language Description: "If the three sticks have lengths that are nearly equal and the length values are large, the program's execution time increases significantly. This is because many combinations satisfy the triangle inequality, resulting in numerous computations."
   - Explanation: When the stick lengths are nearly equal and large, such as (100, 100, 100), the condition in the nested loops is satisfied frequently, leading to a higher number of updates to `ans`.

2. **Invariant 2: High Iteration Count Due to Large Thresholds**
   - Natural Language Description: "When the search space for forming a valid triangle is large due to permissible adjustments up to 256 units for each stick, the computational effort grows exponentially, slowing down the execution."
   - Explanation: The fixed loop limits (256 iterations) irrespective of input specifics lead to a large computational workload, particularly when the stick lengths are large, allowing multiple valid configurations.

3. **Invariant 3: Initial Imbalance and Length Disparity**
   - Natural Language Description: "If there is significant length disparity initially, fewer iterations are needed to adjust the sticks, leading to faster execution."
   - Explanation: When one stick is already much longer compared to the others (e.g., 100, 1, 1), fewer iterations are required to satisfy the triangle inequality, resulting in quicker resolution.

These invariants highlight conditions under which the program's performance deteriorates, guiding optimizations or adjustments to handle slow execution scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Masha has three sticks of length a, b and c centimeters respectively. In one minute Masha can pick one arbitrary stick and increase its length by one centimeter. She is not allowed to break sticks.

What is the minimum number of minutes she needs to spend increasing the stick's length in order to be able to assemble a triangle of positive area. Sticks should be used as triangle's sides (one stick for one side) and their endpoints should be located at triangle's vertices.

Input

The only line contains tree integers a, b and c (1 ≤ a, b, c ≤ 100) — the lengths of sticks Masha possesses.

Output

Print a single integer — the minimum number of minutes that Masha needs to spend in order to be able to make the triangle of positive area from her sticks.

Examples

Input

3 4 5


Output

0


Input

2 5 3


Output

1


Input

100 10 10


Output

81

Note

In the first example, Masha can make a triangle from the sticks without increasing the length of any of them.

In the second example, Masha can't make a triangle of positive area from the sticks she has at the beginning, but she can spend one minute to increase the length 2 centimeter stick by one and after that form a triangle with sides 3, 3 and 5 centimeters.

In the third example, Masha can take 33 minutes to increase one of the 10 centimeters sticks by 33 centimeters, and after that take 48 minutes to increase another 10 centimeters stick by 48 centimeters. This way she can form a triangle with lengths 43, 58 and 100 centimeters in 81 minutes. One can show that it is impossible to get a valid triangle faster.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

We'll implement the performance-characterizing invariants as runtime checks in C++. Each invariant will be translated into a function that checks for the specific condition described in the natural language statements.

```cpp
void check_balanced_stick_lengths_invariant(int a, int b, int c) {
    // Check if the sticks are nearly equal and large
    if (abs(a - b) <= 1 && abs(b - c) <= 1 && abs(c - a) <= 1 && a > 90 && b > 90 && c > 90) {
        cerr << "Warning: Performance bottleneck condition triggered - nearly equal large stick lengths!" << endl;
        abort();
    }
}

void check_large_iteration_space_invariant(int a, int b, int c) {
    // Check if the lengths are large and iteration space is high
    if (a > 90 && b > 90 && c > 90) {
        cerr << "Warning: Performance bottleneck condition triggered - large iteration space due to high stick lengths!" << endl;
        abort();
    }
}

void check_initial_imbalance_invariant(int a, int b, int c) {
    // Check if there is significant length disparity
    int maxLength = max({a, b, c});
    int minLength = min({a, b, c});
    if (maxLength - minLength >= 99) { // Extreme imbalance
        cerr << "Warning: Performance bottleneck condition triggered - significant initial length disparity!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checker Code into the Original Program

We'll integrate the above checker functions into the original C++ program, placing the checks at appropriate points to detect performance bottlenecks without adding overhead in tight loops.

```cpp
#include <bits/stdc++.h>
using namespace std;

void check_balanced_stick_lengths_invariant(int a, int b, int c) {
    if (abs(a - b) <= 1 && abs(b - c) <= 1 && abs(c - a) <= 1 && a > 90 && b > 90 && c > 90) {
        cerr << "Warning: Performance bottleneck condition triggered - nearly equal large stick lengths!" << endl;
        abort();
    }
}

void check_large_iteration_space_invariant(int a, int b, int c) {
    if (a > 90 && b > 90 && c > 90) {
        cerr << "Warning: Performance bottleneck condition triggered - large iteration space due to high stick lengths!" << endl;
        abort();
    }
}

void check_initial_imbalance_invariant(int a, int b, int c) {
    int maxLength = max({a, b, c});
    int minLength = min({a, b, c});
    if (maxLength - minLength >= 99) {
        cerr << "Warning: Performance bottleneck condition triggered - significant initial length disparity!" << endl;
        abort();
    }
}

int solve() {
    int a, b, c;
    scanf("%d%d%d", &a, &c, &b);

    // Check performance invariants after reading inputs
    check_balanced_stick_lengths_invariant(a, b, c);
    check_large_iteration_space_invariant(a, b, c);
    check_initial_imbalance_invariant(a, b, c);

    int ans = 1000000009;
    for (int i = 0; i < 256; ++i)
        for (int j = 0; j < 256; ++j)
            for (int k = 0; k < 256; ++k) {
                if ((a + i) < (b + j) + (c + k) && (b + j) < (a + i) + (c + k) &&
                    (c + k) < (a + i) + (b + j)) {
                    ans = std::min(ans, i + j + k);
                }
            }
    printf("%d\n", ans);
    return 0;
}

int main() {
    ::std::ios::sync_with_stdio(false);
    ::std::cin.tie(0);
    ::std::cout.tie(0);
    int t = 1;
    while (t--) solve();
}
```

### Explanation

- **Checker Placement**: The checks are placed immediately after reading the input values for `a`, `b`, and `c`. This ensures that we catch performance issues right after obtaining the inputs, and before running the expensive nested loops.
- **Invariant Checks**: Each function checks for a specific condition that might cause a performance bottleneck and aborts the program if the condition is met. This alerts developers or testers about potential slowdowns with the input data.

