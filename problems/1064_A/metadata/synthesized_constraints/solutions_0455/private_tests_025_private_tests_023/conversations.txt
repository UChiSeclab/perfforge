system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Masha has three sticks of length a, b and c centimeters respectively. In one minute Masha can pick one arbitrary stick and increase its length by one centimeter. She is not allowed to break sticks.

What is the minimum number of minutes she needs to spend increasing the stick's length in order to be able to assemble a triangle of positive area. Sticks should be used as triangle's sides (one stick for one side) and their endpoints should be located at triangle's vertices.

Input

The only line contains tree integers a, b and c (1 ≤ a, b, c ≤ 100) — the lengths of sticks Masha possesses.

Output

Print a single integer — the minimum number of minutes that Masha needs to spend in order to be able to make the triangle of positive area from her sticks.

Examples

Input

3 4 5


Output

0


Input

2 5 3


Output

1


Input

100 10 10


Output

81

Note

In the first example, Masha can make a triangle from the sticks without increasing the length of any of them.

In the second example, Masha can't make a triangle of positive area from the sticks she has at the beginning, but she can spend one minute to increase the length 2 centimeter stick by one and after that form a triangle with sides 3, 3 and 5 centimeters.

In the third example, Masha can take 33 minutes to increase one of the 10 centimeters sticks by 33 centimeters, and after that take 48 minutes to increase another 10 centimeters stick by 48 centimeters. This way she can form a triangle with lengths 43, 58 and 100 centimeters in 81 minutes. One can show that it is impossible to get a valid triangle faster.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int a, b, c;
int answer = 1e9 + 7;
void read() { cin >> a >> b >> c; }
int main() {
  read();
  if (b > a && b > c) swap(b, c);
  if (c > a && c > b) swap(a, c);
  for (int i = a; i <= 400; i++)
    for (int j = b; j <= i; j++)
      for (int k = c; k <= i; k++) {
        if (i < j + k) answer = min(answer, i - a + j - b + k - c);
      }
  cout << answer;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

1 1 1


(G.2) Fast Input

100 100 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int a, b, c; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int answer = 1e9 + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
void read() { cin >> a >> b >> c; } /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  read(); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  if (b > a && b > c) swap(b, c); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  if (c > a && c > b) swap(a, c); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = a; i <= 400; i++) /* line 10 slow_hit_count: 401, fast_hit_count: 302 */
    for (int j = b; j <= i; j++) /* line 11 slow_hit_count: 80600, fast_hit_count: 45752 */
      for (int k = c; k <= i; k++) { /* line 12 slow_hit_count: 21493600, fast_hit_count: 13680751 */
        if (i < j + k) answer = min(answer, i - a + j - b + k - c); /* line 13 slow_hit_count: 21413400, fast_hit_count: 13635300 */
      } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  cout << answer; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 16 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparison of Line-Level Hit Counts:**
   - The loops at lines 10 to 13 are hit significantly more times on the slow input compared to the fast input:
     - **Line 10 (for-loop over `i`)**: Slow input (401), Fast input (302)
     - **Line 11 (nested for-loop over `j`)**: Slow input (80600), Fast input (45752)
     - **Line 12 (innermost for-loop over `k`)**: Slow input (21493600), Fast input (13680751)
     - **Line 13 (if-condition and minimum calculation)**: Slow input (21413400), Fast input (13635300)

2. **Pinpointing Lines with More Hits:**
   - The nested loops (lines 10-13) see a massive number of hits, especially the innermost loop, indicating significant processing time spent here.

3. **Inference on Interaction with Data Structures and Loops:**
   - The problem involves iterating over possible stick lengths (`i`, `j`, `k`) for which a triangle can be formed. If the initial values of `a`, `b`, and `c` are small, the loops iterate extensively to find a valid solution.
   - The loops incrementally increase the potential triangle side lengths and check for valid triangles until the condition `i < j + k` is satisfied. This can be computationally expensive when starting values are low.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Statements:**

   - **Invariant 1: Small Initial Values and Extensive Iteration:**
     - *Description:* "If the initial lengths of the sticks are small and close to each other, the loops iterate extensively over possible lengths to find a valid triangle configuration, leading to slow execution."
     - *Explanation:* Starting with smaller stick lengths compared to a max possible side of 400 requires more iterations to find a combination satisfying the triangle inequality.

   - **Invariant 2: Uneven Distribution of Initial Stick Lengths:**
     - *Description:* "When the initial stick lengths are quite similar or all small, the innermost loop runs a significant number of times due to the large range of potential values."
     - *Explanation:* The configuration where `a`, `b`, and `c` are initially similar (and small) causes the loops to explore many combinations, increasing computational effort.

2. **Thresholds and Correlations with Input Patterns:**

   - **Thresholds for Iteration:** Given the constraints (e.g., `a`, `b`, `c` ≤ 100), combinations where `a`, `b`, and `c` start small (e.g., close to 1) and similar lead to a large search space, especially when they need to be incremented up to larger values like 400.

   - **Execution Condition:** The slow execution is more likely when the starting stick lengths are such that many increments are necessary to satisfy the triangle inequality. This is especially true when the differences between the stick lengths are minimal, compelling the program to explore numerous configurations.

### Summary
The program's performance bottleneck is primarily due to the nested loop structure, which iterates over a large number of potential side lengths to satisfy the triangle inequality condition. This is exacerbated when the initial stick lengths are small and similar, leading to extensive computations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Masha has three sticks of length a, b and c centimeters respectively. In one minute Masha can pick one arbitrary stick and increase its length by one centimeter. She is not allowed to break sticks.

What is the minimum number of minutes she needs to spend increasing the stick's length in order to be able to assemble a triangle of positive area. Sticks should be used as triangle's sides (one stick for one side) and their endpoints should be located at triangle's vertices.

Input

The only line contains tree integers a, b and c (1 ≤ a, b, c ≤ 100) — the lengths of sticks Masha possesses.

Output

Print a single integer — the minimum number of minutes that Masha needs to spend in order to be able to make the triangle of positive area from her sticks.

Examples

Input

3 4 5


Output

0


Input

2 5 3


Output

1


Input

100 10 10


Output

81

Note

In the first example, Masha can make a triangle from the sticks without increasing the length of any of them.

In the second example, Masha can't make a triangle of positive area from the sticks she has at the beginning, but she can spend one minute to increase the length 2 centimeter stick by one and after that form a triangle with sides 3, 3 and 5 centimeters.

In the third example, Masha can take 33 minutes to increase one of the 10 centimeters sticks by 33 centimeters, and after that take 48 minutes to increase another 10 centimeters stick by 48 centimeters. This way she can form a triangle with lengths 43, 58 and 100 centimeters in 81 minutes. One can show that it is impossible to get a valid triangle faster.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implementing the Natural Language Invariants in C++

Below are C++ code snippets that implement the performance-characterizing invariants derived earlier. These snippets can later be integrated into the original program to help detect conditions leading to slow performance.

### Invariant 1: Small Initial Values and Extensive Iteration

```cpp
void check_small_sticks_invariant(int a, int b, int c) {
    if (a <= 10 && b <= 10 && c <= 10) {
        cerr << "Warning: Performance bottleneck condition triggered - Small initial stick lengths causing extensive iteration!" << endl;
        abort();
    }
}
```

### Invariant 2: Uneven Distribution of Initial Stick Lengths

```cpp
void check_similar_sticks_invariant(int a, int b, int c) {
    if (abs(a - b) <= 5 && abs(b - c) <= 5 && abs(c - a) <= 5) {
        cerr << "Warning: Performance bottleneck condition triggered - Similar stick lengths causing large search space exploration!" << endl;
        abort();
    }
}
```

## Phase 4: Integrating Checkers into the Original Program

Now, let's integrate these checks into the original C++ program, ensuring they are placed in an optimal location to detect the bottlenecks without introducing additional overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

int a, b, c;
int answer = 1e9 + 7;

void read() { 
    cin >> a >> b >> c; 
}

// Performance invariant checkers
void check_small_sticks_invariant(int a, int b, int c) {
    if (a <= 10 && b <= 10 && c <= 10) {
        cerr << "Warning: Performance bottleneck condition triggered - Small initial stick lengths causing extensive iteration!" << endl;
        abort();
    }
}

void check_similar_sticks_invariant(int a, int b, int c) {
    if (abs(a - b) <= 5 && abs(b - c) <= 5 && abs(c - a) <= 5) {
        cerr << "Warning: Performance bottleneck condition triggered - Similar stick lengths causing large search space exploration!" << endl;
        abort();
    }
}

int main() {
    read();
    
    // Place invariant checks after reading inputs
    check_small_sticks_invariant(a, b, c);
    check_similar_sticks_invariant(a, b, c);
    
    if (b > a && b > c) swap(b, c);
    if (c > a && c > b) swap(a, c);
    
    for (int i = a; i <= 400; i++)
        for (int j = b; j <= i; j++)
            for (int k = c; k <= i; k++) {
                if (i < j + k) 
                    answer = min(answer, i - a + j - b + k - c);
            }
    
    cout << answer;
}
```

### Explanation:
- **Invariant Checks:** The checks are added immediately after reading the input. This ensures that the conditions leading to performance bottlenecks are detected early.
- **Check Placement:** The checks are inserted before significant computation (the nested loops), preventing unnecessary computations if a bottleneck condition is detected.
- **Caveat:** The `abort()` function is used to stop execution if a bottleneck condition is met, which is useful in a testing or debugging context but should be handled differently in production code.

