system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Recently Anton found a box with digits in his room. There are k2 digits 2, k3 digits 3, k5 digits 5 and k6 digits 6.

Anton's favorite integers are 32 and 256. He decided to compose this integers from digits he has. He wants to make the sum of these integers as large as possible. Help him solve this task!

Each digit can be used no more than once, i.e. the composed integers should contain no more than k2 digits 2, k3 digits 3 and so on. Of course, unused digits are not counted in the sum.

Input

The only line of the input contains four integers k2, k3, k5 and k6 — the number of digits 2, 3, 5 and 6 respectively (0 ≤ k2, k3, k5, k6 ≤ 5·106).

Output

Print one integer — maximum possible sum of Anton's favorite integers that can be composed using digits from the box.

Examples

Input

5 1 3 4


Output

800


Input

1 1 1 1


Output

256

Note

In the first sample, there are five digits 2, one digit 3, three digits 5 and four digits 6. Anton can compose three integers 256 and one integer 32 to achieve the value 256 + 256 + 256 + 32 = 800. Note, that there is one unused integer 2 and one unused integer 6. They are not counted in the answer.

In the second sample, the optimal answer is to create on integer 256, thus the answer is 256.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  long long int ara[4];
  for (int i = 0; i < 4; i++) cin >> ara[i];
  long long int sum = -1;
  long long minv = min(ara[0], ara[2]);
  minv = min(ara[3], minv);
  for (int i = 0; i <= minv; i++) {
    long long a = 256LL * i + 32LL * min(ara[0] - i, ara[1]);
    sum = max(sum, a);
  }
  cout << sum;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

267467 2632066 450558 450558


(G.2) Fast Input

267467 2632066 42208 450558


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 3 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  long long int ara[4]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < 4; i++) cin >> ara[i]; /* line 7 slow_hit_count: 5, fast_hit_count: 5 */
  long long int sum = -1; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  long long minv = min(ara[0], ara[2]); /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  minv = min(ara[3], minv); /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i <= minv; i++) { /* line 11 slow_hit_count: 267469, fast_hit_count: 42210 */
    long long a = 256LL * i + 32LL * min(ara[0] - i, ara[1]); /* line 12 slow_hit_count: 267468, fast_hit_count: 42209 */
    sum = max(sum, a); /* line 13 slow_hit_count: 267468, fast_hit_count: 42209 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  cout << sum; /* line 15 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 16 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Analysis:**
   - **Line 11:** The loop `for (int i = 0; i <= minv; i++)` is hit 267,469 times for the slow input and 42,210 times for the fast input.
   - **Line 12 and Line 13:** Within this loop, the operations `256LL * i + 32LL * min(ara[0] - i, ara[1])` and `sum = max(sum, a)` are also executed with similar frequency, indicating they are directly tied to the loop iteration count.

2. **Interaction with Data Structures:**
   - The loop iterates over the range determined by `minv`, which is calculated as the minimum of `ara[0]`, `ara[2]`, and `ara[3]`. The high number of iterations suggests `minv` is significantly larger for the slow input compared to the fast input.

3. **Constraints and Loop Behavior:**
   - The problem constraints `(0 ≤ k2, k3, k5, k6 ≤ 5·10^6)` highlight that the input values can be very large, leading to potentially very large values for `minv`, especially when `ara[0]`, `ara[2]`, and `ara[3]` are not well balanced across the input data.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant 1: Large `minv` Value:**
   - **Natural Language Description:** "If the minimum of the number of digits 2, 5, and 6 (`min(k2, k5, k6)`) is large, the loop may execute a high number of iterations, leading to a performance slowdown."
   - **Explanation:** The loop on line 11 iterates `minv` times, where `minv = min(k2, k5, k6)`. A large `minv` directly correlates with more iterations and increased computational work.

2. **Invariant 2: Imbalance in Digit Distribution:**
   - **Natural Language Description:** "If the count of digits 3 (`k3`) is significantly larger relative to the counts of digits 2, 5, or 6, the crafted integers might not maximize the use of available 3s, thereby increasing execution time without improving the outcome."
   - **Explanation:** While the loop primarily focuses on maximizing the number of 256 or 32 using available digits, an imbalance where `k3` is very large does not directly contribute to crafting 256, thus forcing the loop to process unnecessary numbers.

3. **Invariant 3: Inefficient Use of Digits:**
   - **Natural Language Description:** "When `min(k2, k5, k6)` is near the upper constraint limit (i.e., around 5 million), and `k3` is not proportionally balanced, execution time increases significantly."
   - **Explanation:** The loop completes many iterations without effectively using all available digits, particularly when `minv` is large, but `k3` does not proportionally contribute to building integers of form 32 due to being less than `ara[0] - i`.

By focusing on these invariants, it becomes clear that the performance bottleneck is primarily due to the high iteration count driven by large input values and imbalanced distribution of digits, especially affecting the calculation of `minv` and the resulting loop behavior.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Recently Anton found a box with digits in his room. There are k2 digits 2, k3 digits 3, k5 digits 5 and k6 digits 6.

Anton's favorite integers are 32 and 256. He decided to compose this integers from digits he has. He wants to make the sum of these integers as large as possible. Help him solve this task!

Each digit can be used no more than once, i.e. the composed integers should contain no more than k2 digits 2, k3 digits 3 and so on. Of course, unused digits are not counted in the sum.

Input

The only line of the input contains four integers k2, k3, k5 and k6 — the number of digits 2, 3, 5 and 6 respectively (0 ≤ k2, k3, k5, k6 ≤ 5·106).

Output

Print one integer — maximum possible sum of Anton's favorite integers that can be composed using digits from the box.

Examples

Input

5 1 3 4


Output

800


Input

1 1 1 1


Output

256

Note

In the first sample, there are five digits 2, one digit 3, three digits 5 and four digits 6. Anton can compose three integers 256 and one integer 32 to achieve the value 256 + 256 + 256 + 32 = 800. Note, that there is one unused integer 2 and one unused integer 6. They are not counted in the answer.

In the second sample, the optimal answer is to create on integer 256, thus the answer is 256.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Based on the performance-characterizing invariants derived earlier, I will implement the checks in C++.

#### Invariant 1: Large `minv` Value
```cpp
void check_large_minv_invariant(long long minv) {
    if (minv > 1000000) { // Arbitrary threshold for large minv
        cerr << "Warning: Performance bottleneck due to large minv value!" << endl;
        abort();
    }
}
```

#### Invariant 2: Imbalance in Digit Distribution
```cpp
void check_imbalance_invariant(long long k2, long long k3, long long k5, long long k6) {
    if (k3 > max(k2, max(k5, k6)) * 10) { // Arbitrary factor indicating imbalance
        cerr << "Warning: Performance bottleneck due to imbalance in digit distribution!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original Program

Now, I will integrate the previously implemented checkers into the original C++ program at appropriate locations.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for large minv value
void check_large_minv_invariant(long long minv) {
    if (minv > 1000000) { // Arbitrary threshold for large minv
        cerr << "Warning: Performance bottleneck due to large minv value!" << endl;
        abort();
    }
}

// Checker for imbalance in digit distribution
void check_imbalance_invariant(long long k2, long long k3, long long k5, long long k6) {
    if (k3 > max(k2, max(k5, k6)) * 10) { // Arbitrary factor indicating imbalance
        cerr << "Warning: Performance bottleneck due to imbalance in digit distribution!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    long long int ara[4];
    for (int i = 0; i < 4; i++) cin >> ara[i];
    long long int k2 = ara[0];
    long long int k3 = ara[1];
    long long int k5 = ara[2];
    long long int k6 = ara[3];

    // Check for potential performance bottlenecks
    check_imbalance_invariant(k2, k3, k5, k6);

    long long int sum = -1;
    long long minv = min(k2, min(k5, k6));

    // Check after calculating minv
    check_large_minv_invariant(minv);

    for (int i = 0; i <= minv; i++) {
        long long a = 256LL * i + 32LL * min(ara[0] - i, ara[1]);
        sum = max(sum, a);
    }
    cout << sum;
}
```

### Explanation

- **Checker Integration**: 
  - `check_imbalance_invariant` is placed right after reading the inputs to catch any significant imbalance in digit distribution early.
  - `check_large_minv_invariant` is placed right after computing `minv` to check if its value could lead to a performance bottleneck when used in the loop.

These integrations ensure that the potential performance bottlenecks are detected and flagged, without introducing unnecessary overhead during the loop execution. The conditions and thresholds are set to reflect the general problem constraints and expected data patterns, helping capture and diagnose slow execution scenarios effectively.

