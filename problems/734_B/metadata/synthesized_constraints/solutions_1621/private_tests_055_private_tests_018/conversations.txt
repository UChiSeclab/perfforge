system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Recently Anton found a box with digits in his room. There are k2 digits 2, k3 digits 3, k5 digits 5 and k6 digits 6.

Anton's favorite integers are 32 and 256. He decided to compose this integers from digits he has. He wants to make the sum of these integers as large as possible. Help him solve this task!

Each digit can be used no more than once, i.e. the composed integers should contain no more than k2 digits 2, k3 digits 3 and so on. Of course, unused digits are not counted in the sum.

Input

The only line of the input contains four integers k2, k3, k5 and k6 — the number of digits 2, 3, 5 and 6 respectively (0 ≤ k2, k3, k5, k6 ≤ 5·106).

Output

Print one integer — maximum possible sum of Anton's favorite integers that can be composed using digits from the box.

Examples

Input

5 1 3 4


Output

800


Input

1 1 1 1


Output

256

Note

In the first sample, there are five digits 2, one digit 3, three digits 5 and four digits 6. Anton can compose three integers 256 and one integer 32 to achieve the value 256 + 256 + 256 + 32 = 800. Note, that there is one unused integer 2 and one unused integer 6. They are not counted in the answer.

In the second sample, the optimal answer is to create on integer 256, thus the answer is 256.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int cnt[5];
long long Solve() {
  long long ans = 0;
  for (;;) {
    if (cnt[0] && cnt[2] && cnt[3]) {
      ans += 256;
      --cnt[0];
      --cnt[2];
      --cnt[3];
    } else if (cnt[0] && cnt[1]) {
      ans += 32;
      --cnt[0];
      --cnt[1];
    } else
      break;
  }
  return ans;
}
int main() {
  scanf("%d%d%d%d", &cnt[0], &cnt[1], &cnt[2], &cnt[3]);
  cout << Solve() << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

5000000 5000000 5000000 5000000


(G.2) Fast Input

0 5000000 5000000 5000000


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int cnt[5]; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
long long Solve() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  long long ans = 0; /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  for (;;) { /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
    if (cnt[0] && cnt[2] && cnt[3]) { /* line 7 slow_hit_count: 5000001, fast_hit_count: 1 */
      ans += 256; /* line 8 slow_hit_count: 5000000, fast_hit_count: 0 */
      --cnt[0]; /* line 9 slow_hit_count: 5000000, fast_hit_count: 0 */
      --cnt[2]; /* line 10 slow_hit_count: 5000000, fast_hit_count: 0 */
      --cnt[3]; /* line 11 slow_hit_count: 5000000, fast_hit_count: 0 */
    } else if (cnt[0] && cnt[1]) { /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
      ans += 32; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
      --cnt[0]; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
      --cnt[1]; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
    } else /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
      break; /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 19 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  scanf("%d%d%d%d", &cnt[0], &cnt[1], &cnt[2], &cnt[3]); /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  cout << Solve() << endl; /* line 23 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 24 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose the performance bottleneck observed in the given C program, we need to analyze the provided "slow" and "fast" inputs, along with the hit count data. Let's break down the analysis and derive performance-characterizing invariants as described in the task.

### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Hit Counts:**
- The loop in the `Solve()` function executes significantly more times with the slow input (5,000,001 hits on line 7) compared to the fast input (1 hit on line 7). 
- The lines decrementing `cnt[0]`, `cnt[2]`, and `cnt[3]` are executed 5,000,000 times in the slow run but not at all in the fast run.
- This suggests that the subgroup of logic checking for `cnt[0] && cnt[2] && cnt[3]` is a key contributor to the slowdown. 

**Inference:**
- The slowdown is due to the large number of iterations caused by the condition `cnt[0] && cnt[2] && cnt[3]`. When this condition holds true for a significant number of times, the loop executes repeatedly, reducing `cnt[0]`, `cnt[2]`, and `cnt[3]` until at least one of them is zero.

### Phase 2: Derive Performance-Characterizing Invariants

**Invariant 1: Excessive Loop Iterations**
- **Natural Language Description:** "If the number of available digits '2', '5', and '6' are all large, the program may enter a slow path due to repeated composition of the integer 256."
- **Explanation:** When `k2`, `k5`, and `k6` are high, the number of possible 256 compositions is maximized, leading to many iterations of the loop. This is consistent with hit count data showing the loop condition being satisfied 5 million times in the slow run.

**Invariant 2: Imbalance in Digit Counts**
- **Natural Language Description:** "An imbalance where '3' is significantly less than '2', '5', and '6' can trigger the slower path due to the repetitive composition of 256 with leftover imbalance unable to contribute to 32 compositions."
- **Explanation:** If `k3` is small compared to `k2`, `k5`, and `k6`, many digits are consumed in forming 256, but the leftover `k2` might not suffice for forming the integer 32 efficiently, leading to an inefficient consumption pattern.

**Invariant 3: Input Constraints Impact**
- **Natural Language Description:** "When the input values are near the maximum possible (e.g., k2, k3, k5, k6 close to 5 * 10^6), the program's performance might degrade due to excessive iterations."
- **Explanation:** The maximum constraints (0 ≤ k2, k3, k5, k6 ≤ 5,000,000) can influence the loop execution due to the vast numbers involved, resulting in numerous iterations before an exit condition is met.

### Conclusion
These natural language invariants encapsulate the conditions under which the provided C program experiences performance bottlenecks. They reflect how certain patterns of input values, particularly those involving combinations and abundances of specific digits, lead to excessive loop iterations that slow down execution.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Recently Anton found a box with digits in his room. There are k2 digits 2, k3 digits 3, k5 digits 5 and k6 digits 6.

Anton's favorite integers are 32 and 256. He decided to compose this integers from digits he has. He wants to make the sum of these integers as large as possible. Help him solve this task!

Each digit can be used no more than once, i.e. the composed integers should contain no more than k2 digits 2, k3 digits 3 and so on. Of course, unused digits are not counted in the sum.

Input

The only line of the input contains four integers k2, k3, k5 and k6 — the number of digits 2, 3, 5 and 6 respectively (0 ≤ k2, k3, k5, k6 ≤ 5·106).

Output

Print one integer — maximum possible sum of Anton's favorite integers that can be composed using digits from the box.

Examples

Input

5 1 3 4


Output

800


Input

1 1 1 1


Output

256

Note

In the first sample, there are five digits 2, one digit 3, three digits 5 and four digits 6. Anton can compose three integers 256 and one integer 32 to achieve the value 256 + 256 + 256 + 32 = 800. Note, that there is one unused integer 2 and one unused integer 6. They are not counted in the answer.

In the second sample, the optimal answer is to create on integer 256, thus the answer is 256.

Solution (C++ code):
{solution}


assistant: Let's start by implementing the natural language invariants as runtime checks in C++ (Phase 3) and then integrate these checks into the original C++ code (Phase 4).

### Phase 3: Implementing Invariants as C++ Runtime Checks

Here are the runtime checks for each performance-characterizing invariant:

**Invariant 1: Excessive Loop Iterations**
```cpp
void check_excessive_iterations(int k2, int k5, int k6) {
    // Check if k2, k5, and k6 are all large, leading to potential excessive iterations.
    if (k2 > 1000000 && k5 > 1000000 && k6 > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive iterations!" << endl;
        abort();
    }
}
```

**Invariant 2: Imbalance in Digit Counts**
```cpp
void check_imbalance(int k2, int k3, int k5, int k6) {
    // Check if there is a significant imbalance with k3 being much smaller than k2, k5, and k6.
    if ((k2 > 1000000 || k5 > 1000000 || k6 > 1000000) && k3 < k2 / 10) {
        cerr << "Warning: Performance bottleneck condition triggered due to imbalance in digit counts!" << endl;
        abort();
    }
}
```

**Invariant 3: Input Constraints Impact**
```cpp
void check_input_constraints(int k2, int k3, int k5, int k6) {
    // Check if inputs are near their maximum constraints.
    if (k2 > 4000000 && k3 > 4000000 && k5 > 4000000 && k6 > 4000000) {
        cerr << "Warning: Performance bottleneck condition triggered due to maximum input constraints!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checks into the Original C++ Code

Now, we integrate these runtime checks into the given C++ program:

```cpp
#include <bits/stdc++.h>
using namespace std;

int cnt[5];

long long Solve() {
    long long ans = 0;
    for (;;) {
        if (cnt[0] && cnt[2] && cnt[3]) {
            ans += 256;
            --cnt[0];
            --cnt[2];
            --cnt[3];
        } else if (cnt[0] && cnt[1]) {
            ans += 32;
            --cnt[0];
            --cnt[1];
        } else
            break;
    }
    return ans;
}

void check_excessive_iterations(int k2, int k5, int k6) {
    if (k2 > 1000000 && k5 > 1000000 && k6 > 1000000) {
        cerr << "Warning: Performance bottleneck condition triggered due to excessive iterations!" << endl;
        abort();
    }
}

void check_imbalance(int k2, int k3, int k5, int k6) {
    if ((k2 > 1000000 || k5 > 1000000 || k6 > 1000000) && k3 < k2 / 10) {
        cerr << "Warning: Performance bottleneck condition triggered due to imbalance in digit counts!" << endl;
        abort();
    }
}

void check_input_constraints(int k2, int k3, int k5, int k6) {
    if (k2 > 4000000 && k3 > 4000000 && k5 > 4000000 && k6 > 4000000) {
        cerr << "Warning: Performance bottleneck condition triggered due to maximum input constraints!" << endl;
        abort();
    }
}

int main() {
    int k2, k3, k5, k6;
    scanf("%d%d%d%d", &k2, &k3, &k5, &k6);
    // Set the counts
    cnt[0] = k2; cnt[1] = k3; cnt[2] = k5; cnt[3] = k6;
    
    // Perform the checks
    check_excessive_iterations(k2, k5, k6);
    check_imbalance(k2, k3, k5, k6);
    check_input_constraints(k2, k3, k5, k6);

    cout << Solve() << endl;
    return 0;
}
```

### Explanation

- **Excessive Iterations Check:** This is placed after reading input, checking if `k2`, `k5`, and `k6` are all large, which can trigger many loop iterations.
- **Imbalance Check:** This checks for a significant imbalance in digit counts, particularly when `k3` is much smaller than `k2`, `k5`, and `k6`.
- **Input Constraints Check:** This ensures that inputs are not close to their upper limits, which can lead to significant performance degradation due to maximum constraints.

Each check will issue a warning and abort if triggered, helping a fuzzer or tester identify performance bottlenecks.

