system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Two participants are each given a pair of distinct numbers from 1 to 9 such that there's exactly one number that is present in both pairs. They want to figure out the number that matches by using a communication channel you have access to without revealing it to you.

Both participants communicated to each other a set of pairs of numbers, that includes the pair given to them. Each pair in the communicated sets comprises two different numbers.

Determine if you can with certainty deduce the common number, or if you can determine with certainty that both participants know the number but you do not.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 12) — the number of pairs the first participant communicated to the second and vice versa.

The second line contains n pairs of integers, each between 1 and 9, — pairs of numbers communicated from first participant to the second.

The third line contains m pairs of integers, each between 1 and 9, — pairs of numbers communicated from the second participant to the first.

All pairs within each set are distinct (in particular, if there is a pair (1,2), there will be no pair (2,1) within the same set), and no pair contains the same number twice.

It is guaranteed that the two sets do not contradict the statements, in other words, there is pair from the first set and a pair from the second set that share exactly one number.

Output

If you can deduce the shared number with certainty, print that number.

If you can with certainty deduce that both participants know the shared number, but you do not know it, print 0.

Otherwise print -1.

Examples

Input

2 2
1 2 3 4
1 5 3 4


Output

1


Input

2 2
1 2 3 4
1 5 6 4


Output

0


Input

2 3
1 2 4 5
1 2 1 3 2 3


Output

-1

Note

In the first example the first participant communicated pairs (1,2) and (3,4), and the second communicated (1,5), (3,4). Since we know that the actual pairs they received share exactly one number, it can't be that they both have (3,4). Thus, the first participant has (1,2) and the second has (1,5), and at this point you already know the shared number is 1.

In the second example either the first participant has (1,2) and the second has (1,5), or the first has (3,4) and the second has (6,4). In the first case both of them know the shared number is 1, in the second case both of them know the shared number is 4. You don't have enough information to tell 1 and 4 apart.

In the third case if the first participant was given (1,2), they don't know what the shared number is, since from their perspective the second participant might have been given either (1,3), in which case the shared number is 1, or (2,3), in which case the shared number is 2. While the second participant does know the number with certainty, neither you nor the first participant do, so the output is -1.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using lli = long long int;
using pii = pair<int, int>;
using vi = vector<int>;
using vb = vector<bool>;
using vvi = vector<vector<int>>;
using vlli = vector<long long int>;
using vpii = vector<pair<int, int>>;
int n, m, x, y, cnt, ans;
bool check = true;
vpii a, b, A, B;
vi cntA(30, 0), cntB(30, 0);
int get(pii p, pii q) {
  map<int, int> cnt;
  cnt[p.first]++;
  cnt[p.second]++;
  cnt[q.first]++;
  cnt[q.second]++;
  if (cnt.size() == 4)
    return 0;
  else if (cnt.size() == 3)
    return 1;
  return 2;
}
int common(pii p, pii q) {
  map<int, int> cnt;
  cnt[p.first]++;
  cnt[p.second]++;
  cnt[q.first]++;
  cnt[q.second]++;
  if (cnt[p.first] == 2) return p.first;
  if (cnt[p.second] == 2) return p.second;
  if (cnt[q.first] == 2) return q.first;
  if (cnt[q.second] == 2) return q.second;
}
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cin >> n >> m;
  for (int i = 0; i < n; i++) cin >> x >> y, a.push_back(make_pair(x, y));
  for (int i = 0; i < m; i++) cin >> x >> y, b.push_back(make_pair(x, y));
  for (auto p1 : a) {
    map<int, int> temp;
    for (auto p2 : b)
      if (get(p1, p2) == 1) temp[common(p1, p2)]++;
    if (temp.size() == 1)
      A.push_back(p1);
    else if (temp.size() > 1)
      check = false;
  }
  for (auto p1 : b) {
    map<int, int> temp;
    for (auto p2 : a)
      if (get(p1, p2) == 1) temp[common(p1, p2)]++;
    if (temp.size() == 1)
      B.push_back(p1);
    else if (temp.size() > 1)
      check = false;
  }
  set<int> ans;
  for (auto p1 : A)
    for (auto p2 : B)
      if (get(p1, p2) == 1) ans.insert(common(p1, p2));
  if (ans.size() > 1 && check)
    cout << 0;
  else if (ans.size() == 1 && check)
    cout << *(ans.begin());
  else
    cout << -1;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

7 6
6 2 9 2 6 5 2 4 1 2 4 5 6 7
3 9 5 1 9 8 9 5 3 4 2 3


(G.2) Fast Input

2 2
1 2 3 4
1 5 3 4


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using lli = long long int; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using pii = pair<int, int>; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using vi = vector<int>; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
using vb = vector<bool>; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
using vvi = vector<vector<int>>; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
using vlli = vector<long long int>; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
using vpii = vector<pair<int, int>>; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
int n, m, x, y, cnt, ans; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
bool check = true; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
vpii a, b, A, B; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
vi cntA(30, 0), cntB(30, 0); /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
int get(pii p, pii q) { /* line 14 slow_hit_count: 92, fast_hit_count: 9 */
  map<int, int> cnt; /* line 15 slow_hit_count: 184, fast_hit_count: 18 */
  cnt[p.first]++; /* line 16 slow_hit_count: 92, fast_hit_count: 9 */
  cnt[p.second]++; /* line 17 slow_hit_count: 92, fast_hit_count: 9 */
  cnt[q.first]++; /* line 18 slow_hit_count: 92, fast_hit_count: 9 */
  cnt[q.second]++; /* line 19 slow_hit_count: 92, fast_hit_count: 9 */
  if (cnt.size() == 4) /* line 20 slow_hit_count: 92, fast_hit_count: 9 */
    return 0; /* line 21 slow_hit_count: 63, fast_hit_count: 4 */
  else if (cnt.size() == 3) /* line 22 slow_hit_count: 29, fast_hit_count: 5 */
    return 1; /* line 23 slow_hit_count: 29, fast_hit_count: 3 */
  return 2; /* line 24 slow_hit_count: 0, fast_hit_count: 2 */
} /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
int common(pii p, pii q) { /* line 26 slow_hit_count: 29, fast_hit_count: 3 */
  map<int, int> cnt; /* line 27 slow_hit_count: 29, fast_hit_count: 3 */
  cnt[p.first]++; /* line 28 slow_hit_count: 29, fast_hit_count: 3 */
  cnt[p.second]++; /* line 29 slow_hit_count: 29, fast_hit_count: 3 */
  cnt[q.first]++; /* line 30 slow_hit_count: 29, fast_hit_count: 3 */
  cnt[q.second]++; /* line 31 slow_hit_count: 29, fast_hit_count: 3 */
  if (cnt[p.first] == 2) return p.first; /* line 32 slow_hit_count: 29, fast_hit_count: 3 */
  if (cnt[p.second] == 2) return p.second; /* line 33 slow_hit_count: 15, fast_hit_count: 0 */
  if (cnt[q.first] == 2) return q.first; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  if (cnt[q.second] == 2) return q.second; /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 38 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 39 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 40 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) cin >> x >> y, a.push_back(make_pair(x, y)); /* line 42 slow_hit_count: 8, fast_hit_count: 3 */
  for (int i = 0; i < m; i++) cin >> x >> y, b.push_back(make_pair(x, y)); /* line 43 slow_hit_count: 7, fast_hit_count: 3 */
  for (auto p1 : a) { /* line 44 slow_hit_count: 8, fast_hit_count: 3 */
    map<int, int> temp; /* line 45 slow_hit_count: 14, fast_hit_count: 4 */
    for (auto p2 : b) /* line 46 slow_hit_count: 49, fast_hit_count: 6 */
      if (get(p1, p2) == 1) temp[common(p1, p2)]++; /* line 47 slow_hit_count: 42, fast_hit_count: 4 */
    if (temp.size() == 1) /* line 48 slow_hit_count: 7, fast_hit_count: 2 */
      A.push_back(p1); /* line 49 slow_hit_count: 2, fast_hit_count: 1 */
    else if (temp.size() > 1) /* line 50 slow_hit_count: 5, fast_hit_count: 1 */
      check = false; /* line 51 slow_hit_count: 4, fast_hit_count: 0 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  for (auto p1 : b) { /* line 53 slow_hit_count: 7, fast_hit_count: 3 */
    map<int, int> temp; /* line 54 slow_hit_count: 12, fast_hit_count: 4 */
    for (auto p2 : a) /* line 55 slow_hit_count: 48, fast_hit_count: 6 */
      if (get(p1, p2) == 1) temp[common(p1, p2)]++; /* line 56 slow_hit_count: 42, fast_hit_count: 4 */
    if (temp.size() == 1) /* line 57 slow_hit_count: 6, fast_hit_count: 2 */
      B.push_back(p1); /* line 58 slow_hit_count: 4, fast_hit_count: 1 */
    else if (temp.size() > 1) /* line 59 slow_hit_count: 2, fast_hit_count: 1 */
      check = false; /* line 60 slow_hit_count: 2, fast_hit_count: 0 */
  } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
  set<int> ans; /* line 62 slow_hit_count: 2, fast_hit_count: 2 */
  for (auto p1 : A) /* line 63 slow_hit_count: 3, fast_hit_count: 2 */
    for (auto p2 : B) /* line 64 slow_hit_count: 10, fast_hit_count: 2 */
      if (get(p1, p2) == 1) ans.insert(common(p1, p2)); /* line 65 slow_hit_count: 8, fast_hit_count: 1 */
  if (ans.size() > 1 && check) /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
    cout << 0; /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  else if (ans.size() == 1 && check) /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
    cout << *(ans.begin()); /* line 69 slow_hit_count: 0, fast_hit_count: 1 */
  else /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    cout << -1; /* line 71 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 72 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information, the following observations can be made regarding potential performance bottlenecks:

1. **High Hits on `get()` Function:**
   - The `get()` function is called significantly more times during the slow input (`92` times) compared to the fast input (`9` times). This suggests that this function is a critical part of the slow path.
   
2. **Nested Loop Structure:**
   - The nested loops starting from line 44 and line 53 also show a higher number of iterations for the slow input. The nested nature of these loops (each `for` loop iterating over another `for` loop) causes quadratic behavior with respect to the input pairs.
   
3. **Frequent Use of `map` in Loops:**
   - The use of a map data structure in lines 45 and 54 within these loops suggests additional overhead due to frequent insertions and lookups.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the identified hotspots, here are natural language statements describing conditions under which the program likely enters a slow path:

1. **Invariant on Pair Count in Loops:**
   - If the number of pairs communicated by both participants (`n` and `m`) is large (close to the upper constraint of 12), the nested loops (in lines 44-61) may cause increased execution time due to their quadratic nature.
   
   Natural Language Description: “When both participants communicate a large number of pairs, the nested loop operations become expensive, leading to potential slowdowns.”

2. **Invariant on Frequent Calls to `get()` and `common()`:**
   - The `get()` function, which determines the commonality of numbers between pairs, is called multiple times for each pair combination. If each participant communicates many pairs, this function is invoked repeatedly, accumulating overhead.
   
   Natural Language Description: “If the function to check commonality between pair elements is invoked excessively, it can degrade performance due to repeated operations on numerous pairs.”

3. **Invariant on Map Operations:**
   - The construction and frequent update of `map` structures inside the nested loops (lines 45 and 54) can slow down execution, especially if the number of keys (candidate common numbers) becomes large.
   
   Natural Language Description: “When candidate common numbers are stored in maps inside nested loops, performance may degrade due to frequent insertions and lookups, especially with large input sizes.”

These invariants help capture the scenarios under which the program slows down, focusing on the interaction of input size limits (n, m ≤ 12) with nested loops and expensive operations.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Two participants are each given a pair of distinct numbers from 1 to 9 such that there's exactly one number that is present in both pairs. They want to figure out the number that matches by using a communication channel you have access to without revealing it to you.

Both participants communicated to each other a set of pairs of numbers, that includes the pair given to them. Each pair in the communicated sets comprises two different numbers.

Determine if you can with certainty deduce the common number, or if you can determine with certainty that both participants know the number but you do not.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 12) — the number of pairs the first participant communicated to the second and vice versa.

The second line contains n pairs of integers, each between 1 and 9, — pairs of numbers communicated from first participant to the second.

The third line contains m pairs of integers, each between 1 and 9, — pairs of numbers communicated from the second participant to the first.

All pairs within each set are distinct (in particular, if there is a pair (1,2), there will be no pair (2,1) within the same set), and no pair contains the same number twice.

It is guaranteed that the two sets do not contradict the statements, in other words, there is pair from the first set and a pair from the second set that share exactly one number.

Output

If you can deduce the shared number with certainty, print that number.

If you can with certainty deduce that both participants know the shared number, but you do not know it, print 0.

Otherwise print -1.

Examples

Input

2 2
1 2 3 4
1 5 3 4


Output

1


Input

2 2
1 2 3 4
1 5 6 4


Output

0


Input

2 3
1 2 4 5
1 2 1 3 2 3


Output

-1

Note

In the first example the first participant communicated pairs (1,2) and (3,4), and the second communicated (1,5), (3,4). Since we know that the actual pairs they received share exactly one number, it can't be that they both have (3,4). Thus, the first participant has (1,2) and the second has (1,5), and at this point you already know the shared number is 1.

In the second example either the first participant has (1,2) and the second has (1,5), or the first has (3,4) and the second has (6,4). In the first case both of them know the shared number is 1, in the second case both of them know the shared number is 4. You don't have enough information to tell 1 and 4 apart.

In the third case if the first participant was given (1,2), they don't know what the shared number is, since from their perspective the second participant might have been given either (1,3), in which case the shared number is 1, or (2,3), in which case the shared number is 2. While the second participant does know the number with certainty, neither you nor the first participant do, so the output is -1.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement Invariants as C++ Checkers

Here are the C++ code snippets implementing the performance-characterizing invariants derived previously:

1. **Invariant on Pair Count in Loops:**

```cpp
void check_pair_count_invariant(int n, int m) {
    if (n > 10 || m > 10) {
        cerr << "Warning: Performance bottleneck condition triggered - too many pairs!" << endl;
        abort();
    }
}
```

2. **Invariant on Frequent Calls to `get()` and `common()`:**

```cpp
void check_function_call_invariant(int calls) {
    if (calls > 80) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive function calls!" << endl;
        abort();
    }
}
```

3. **Invariant on Map Operations:**

```cpp
void check_map_operations_invariant(int mapSize) {
    if (mapSize > 5) {
        cerr << "Warning: Performance bottleneck condition triggered - map operations too frequent!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checkers into the Original Program

Below is the modified C++ program, integrating these checkers to detect performance bottlenecks:

```cpp
#include <bits/stdc++.h>
using namespace std;
using lli = long long int;
using pii = pair<int, int>;
using vi = vector<int>;
using vb = vector<bool>;
using vvi = vector<vector<int>>;
using vlli = vector<long long int>;
using vpii = vector<pair<int, int>>;

int n, m, x, y, cnt, ans;
bool check = true;
vpii a, b, A, B;
vi cntA(30, 0), cntB(30, 0);

// Checker for number of pairs
void check_pair_count_invariant(int n, int m) {
    if (n > 10 || m > 10) {
        cerr << "Warning: Performance bottleneck condition triggered - too many pairs!" << endl;
        abort();
    }
}

// Checker for excessive function calls
void check_function_call_invariant(int calls) {
    if (calls > 80) {
        cerr << "Warning: Performance bottleneck condition triggered - excessive function calls!" << endl;
        abort();
    }
}

// Checker for excessive map operations
void check_map_operations_invariant(int mapSize) {
    if (mapSize > 5) {
        cerr << "Warning: Performance bottleneck condition triggered - map operations too frequent!" << endl;
        abort();
    }
}

int get(pii p, pii q) {
    map<int, int> cnt;
    cnt[p.first]++;
    cnt[p.second]++;
    cnt[q.first]++;
    cnt[q.second]++;
    if (cnt.size() == 4)
        return 0;
    else if (cnt.size() == 3)
        return 1;
    return 2;
}

int common(pii p, pii q) {
    map<int, int> cnt;
    cnt[p.first]++;
    cnt[p.second]++;
    cnt[q.first]++;
    cnt[q.second]++;
    if (cnt[p.first] == 2) return p.first;
    if (cnt[p.second] == 2) return p.second;
    if (cnt[q.first] == 2) return q.first;
    if (cnt[q.second] == 2) return q.second;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m;

    // Check pair count invariant after input
    check_pair_count_invariant(n, m);

    for (int i = 0; i < n; i++) cin >> x >> y, a.push_back(make_pair(x, y));
    for (int i = 0; i < m; i++) cin >> x >> y, b.push_back(make_pair(x, y));

    int functionCalls = 0;
    for (auto p1 : a) {
        map<int, int> temp;
        for (auto p2 : b) {
            if (get(p1, p2) == 1) {
                temp[common(p1, p2)]++;
                functionCalls++;
            }
        }
        // Check map operations invariant
        check_map_operations_invariant(temp.size());

        if (temp.size() == 1)
            A.push_back(p1);
        else if (temp.size() > 1)
            check = false;
    }

    for (auto p1 : b) {
        map<int, int> temp;
        for (auto p2 : a) {
            if (get(p1, p2) == 1) {
                temp[common(p1, p2)]++;
                functionCalls++;
            }
        }
        // Check map operations invariant
        check_map_operations_invariant(temp.size());

        if (temp.size() == 1)
            B.push_back(p1);
        else if (temp.size() > 1)
            check = false;
    }

    // Check excessive function calls invariant
    check_function_call_invariant(functionCalls);

    set<int> ans;
    for (auto p1 : A)
        for (auto p2 : B)
            if (get(p1, p2) == 1) ans.insert(common(p1, p2));

    if (ans.size() > 1 && check)
        cout << 0;
    else if (ans.size() == 1 && check)
        cout << *(ans.begin());
    else
        cout << -1;
}
```

### Explanation

- **Pair Count Invariant:** The program checks if the number of pairs exceeds a threshold of 10 immediately after reading inputs.
- **Function Call Invariant:** The program tracks the number of times the `get()` and `common()` functions are called and checks if this exceeds 80 after the nested loops.
- **Map Operations Invariant:** A check is inserted in each loop iteration to ensure that the map does not grow beyond 5 keys, preventing excessive operations. 

These checks help identify conditions leading to performance issues without significantly impacting the program's runtime behavior.

