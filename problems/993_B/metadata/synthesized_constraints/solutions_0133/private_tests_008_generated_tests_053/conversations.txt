system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Two participants are each given a pair of distinct numbers from 1 to 9 such that there's exactly one number that is present in both pairs. They want to figure out the number that matches by using a communication channel you have access to without revealing it to you.

Both participants communicated to each other a set of pairs of numbers, that includes the pair given to them. Each pair in the communicated sets comprises two different numbers.

Determine if you can with certainty deduce the common number, or if you can determine with certainty that both participants know the number but you do not.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 12) — the number of pairs the first participant communicated to the second and vice versa.

The second line contains n pairs of integers, each between 1 and 9, — pairs of numbers communicated from first participant to the second.

The third line contains m pairs of integers, each between 1 and 9, — pairs of numbers communicated from the second participant to the first.

All pairs within each set are distinct (in particular, if there is a pair (1,2), there will be no pair (2,1) within the same set), and no pair contains the same number twice.

It is guaranteed that the two sets do not contradict the statements, in other words, there is pair from the first set and a pair from the second set that share exactly one number.

Output

If you can deduce the shared number with certainty, print that number.

If you can with certainty deduce that both participants know the shared number, but you do not know it, print 0.

Otherwise print -1.

Examples

Input

2 2
1 2 3 4
1 5 3 4


Output

1


Input

2 2
1 2 3 4
1 5 6 4


Output

0


Input

2 3
1 2 4 5
1 2 1 3 2 3


Output

-1

Note

In the first example the first participant communicated pairs (1,2) and (3,4), and the second communicated (1,5), (3,4). Since we know that the actual pairs they received share exactly one number, it can't be that they both have (3,4). Thus, the first participant has (1,2) and the second has (1,5), and at this point you already know the shared number is 1.

In the second example either the first participant has (1,2) and the second has (1,5), or the first has (3,4) and the second has (6,4). In the first case both of them know the shared number is 1, in the second case both of them know the shared number is 4. You don't have enough information to tell 1 and 4 apart.

In the third case if the first participant was given (1,2), they don't know what the shared number is, since from their perspective the second participant might have been given either (1,3), in which case the shared number is 1, or (2,3), in which case the shared number is 2. While the second participant does know the number with certainty, neither you nor the first participant do, so the output is -1.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);
int n, m;
vector<pair<int, int> > a, b;
vector<pair<int, int> > read(int n) {
  vector<pair<int, int> > ans;
  for (int i = 0; i < n; i++) {
    int x, y;
    cin >> x >> y;
    if (x > y) swap(x, y);
    ans.push_back(make_pair(x, y));
  }
  return ans;
}
bool contains(vector<pair<int, int> > &v, int x, int y) {
  pair<int, int> p = make_pair(x, y);
  pair<int, int> q = make_pair(y, x);
  for (__typeof(v.begin()) it = v.begin(); it != v.end(); it++) {
    if ((*it) == p || (*it) == q) return true;
  }
  return false;
}
bool ok(vector<pair<int, int> > a, vector<pair<int, int> > b) {
  for (int i = 0; i < (int)a.size(); i++) {
    pair<int, int> p = a[i];
    set<int> same;
    for (int j = 0; j < (int)b.size(); j++) {
      if (a[i] == b[j]) continue;
      set<int> cur;
      cur.insert(a[i].first);
      cur.insert(a[i].second);
      cur.insert(b[j].first);
      cur.insert(b[j].second);
      if (cur.size() != 3) continue;
      if (a[i].first == b[j].first || a[i].first == b[j].second)
        same.insert(a[i].first);
      else if (a[i].second == b[j].first || a[i].second == b[j].second)
        same.insert(a[i].second);
    }
    if (same.size() == 0) continue;
    if (same.size() > 1) return false;
  }
  return true;
}
int main() {
  cin >> n >> m;
  a = read(n);
  b = read(m);
  set<int> ans;
  for (int x = 1; x < 10; x++) {
    for (int y = 1; y < 10; y++) {
      for (int z = 1; z < 10; z++) {
        if (x == y || x == z || y == z) continue;
        if (contains(a, x, y) && contains(b, x, z)) {
          ans.insert(x);
        }
      }
    }
  }
  if (ans.size() == 1) {
    cout << (*ans.begin()) << endl;
    return 0;
  }
  if (ok(a, b) && ok(b, a))
    cout << 0 << endl;
  else
    cout << -1 << endl;
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

8 5
7 9 6 7 4 7 2 1 4 9 2 9 4 2 9 6
8 7 1 8 8 5 3 5 3 8


(G.2) Fast Input

2 1
3 6 6 7
4 7


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int inf = (int)1e9; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
const int mod = inf + 7; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
const double eps = 1e-9; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
const double pi = acos(-1.0); /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int> > a, b; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
vector<pair<int, int> > read(int n) { /* line 9 slow_hit_count: 2, fast_hit_count: 2 */
  vector<pair<int, int> > ans; /* line 10 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) { /* line 11 slow_hit_count: 15, fast_hit_count: 5 */
    int x, y; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> y; /* line 13 slow_hit_count: 13, fast_hit_count: 3 */
    if (x > y) swap(x, y); /* line 14 slow_hit_count: 13, fast_hit_count: 3 */
    ans.push_back(make_pair(x, y)); /* line 15 slow_hit_count: 13, fast_hit_count: 3 */
  } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
  return ans; /* line 17 slow_hit_count: 2, fast_hit_count: 2 */
} /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
bool contains(vector<pair<int, int> > &v, int x, int y) { /* line 19 slow_hit_count: 616, fast_hit_count: 532 */
  pair<int, int> p = make_pair(x, y); /* line 20 slow_hit_count: 616, fast_hit_count: 532 */
  pair<int, int> q = make_pair(y, x); /* line 21 slow_hit_count: 616, fast_hit_count: 532 */
  for (__typeof(v.begin()) it = v.begin(); it != v.end(); it++) { /* line 22 slow_hit_count: 4685, fast_hit_count: 1525 */
    if ((*it) == p || (*it) == q) return true; /* line 23 slow_hit_count: 4185, fast_hit_count: 1022 */
  } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
  return false; /* line 25 slow_hit_count: 500, fast_hit_count: 503 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
bool ok(vector<pair<int, int> > a, vector<pair<int, int> > b) { /* line 27 slow_hit_count: 2, fast_hit_count: 0 */
  for (int i = 0; i < (int)a.size(); i++) { /* line 28 slow_hit_count: 15, fast_hit_count: 0 */
    pair<int, int> p = a[i]; /* line 29 slow_hit_count: 13, fast_hit_count: 0 */
    set<int> same; /* line 30 slow_hit_count: 13, fast_hit_count: 0 */
    for (int j = 0; j < (int)b.size(); j++) { /* line 31 slow_hit_count: 93, fast_hit_count: 0 */
      if (a[i] == b[j]) continue; /* line 32 slow_hit_count: 152, fast_hit_count: 0 */
      set<int> cur; /* line 33 slow_hit_count: 80, fast_hit_count: 0 */
      cur.insert(a[i].first); /* line 34 slow_hit_count: 80, fast_hit_count: 0 */
      cur.insert(a[i].second); /* line 35 slow_hit_count: 80, fast_hit_count: 0 */
      cur.insert(b[j].first); /* line 36 slow_hit_count: 80, fast_hit_count: 0 */
      cur.insert(b[j].second); /* line 37 slow_hit_count: 80, fast_hit_count: 0 */
      if (cur.size() != 3) continue; /* line 38 slow_hit_count: 80, fast_hit_count: 0 */
      if (a[i].first == b[j].first || a[i].first == b[j].second) /* line 39 slow_hit_count: 8, fast_hit_count: 0 */
        same.insert(a[i].first); /* line 40 slow_hit_count: 6, fast_hit_count: 0 */
      else if (a[i].second == b[j].first || a[i].second == b[j].second) /* line 41 slow_hit_count: 2, fast_hit_count: 0 */
        same.insert(a[i].second); /* line 42 slow_hit_count: 2, fast_hit_count: 0 */
    } /* line 43 slow_hit_count: 0, fast_hit_count: 0 */
    if (same.size() == 0) continue; /* line 44 slow_hit_count: 13, fast_hit_count: 0 */
    if (same.size() > 1) return false; /* line 45 slow_hit_count: 6, fast_hit_count: 0 */
  } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
  return true; /* line 47 slow_hit_count: 2, fast_hit_count: 0 */
} /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 50 slow_hit_count: 1, fast_hit_count: 1 */
  a = read(n); /* line 51 slow_hit_count: 1, fast_hit_count: 1 */
  b = read(m); /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
  set<int> ans; /* line 53 slow_hit_count: 2, fast_hit_count: 2 */
  for (int x = 1; x < 10; x++) { /* line 54 slow_hit_count: 10, fast_hit_count: 10 */
    for (int y = 1; y < 10; y++) { /* line 55 slow_hit_count: 90, fast_hit_count: 90 */
      for (int z = 1; z < 10; z++) { /* line 56 slow_hit_count: 810, fast_hit_count: 810 */
        if (x == y || x == z || y == z) continue; /* line 57 slow_hit_count: 729, fast_hit_count: 729 */
        if (contains(a, x, y) && contains(b, x, z)) { /* line 58 slow_hit_count: 504, fast_hit_count: 504 */
          ans.insert(x); /* line 59 slow_hit_count: 4, fast_hit_count: 1 */
        } /* line 60 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 62 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  if (ans.size() == 1) { /* line 64 slow_hit_count: 1, fast_hit_count: 1 */
    cout << (*ans.begin()) << endl; /* line 65 slow_hit_count: 0, fast_hit_count: 1 */
    return 0; /* line 66 slow_hit_count: 0, fast_hit_count: 1 */
  } /* line 67 slow_hit_count: 0, fast_hit_count: 0 */
  if (ok(a, b) && ok(b, a)) /* line 68 slow_hit_count: 1, fast_hit_count: 0 */
    cout << 0 << endl; /* line 69 slow_hit_count: 1, fast_hit_count: 0 */
  else /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    cout << -1 << endl; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 72 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 73 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the given C program and derive performance-characterizing invariants, let's follow the outlined steps.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The `contains` function (lines 19-25) is called very frequently, as seen from the hit counts: `slow_hit_count: 616` vs. `fast_hit_count: 532`.
   - The nested loops in `main` (lines 54-56) have a significant number of iterations: `slow_hit_count: 810` vs. `fast_hit_count: 810`.

2. **Pinpoint Problematic Lines/Functions:**
   - The primary inefficiency seems to be the nested loops combined with the frequent calls to the `contains` function. The `contains` function involves iterating through vectors, which can be costly when repeated many times.
   - The function `ok` is called with a higher frequency in the slow input due to its two calls within `main`.

3. **Inference on Data Structures and Control Flow:**
   - The nested loops are iterating over all possible unique triples from 1 to 9, leading to 504 combinations (as noted by the `slow_hit_count: 504` on line 58), which can be expensive.
   - The slowdown likely occurs due to the number of pairs being checked in the `contains` function and the repeated checks through the nested loops.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are some natural language performance invariants:

1. **Invariant on Nested Loops:**
   - "If the number of pairs communicated (`n` or `m`) is large, the program's nested loops will iterate over many combinations, leading to significant overhead in checking conditions."

2. **Invariant on Pair Checking:**
   - "When the size of the sets of pairs communicated by the participants is relatively large, and each pair needs to be checked against many others, the performance may degrade due to the repeated invocation of the `contains` function."

3. **Invariant on Repeated Operations:**
   - "The program's performance may slow down significantly if the conditions require checking many possible number combinations through nested loops, especially when the input size approaches the upper constraints."

4. **Invariant on Function Calls:**
   - "The `ok` function can become a performance bottleneck if called multiple times, particularly when paired with large input sizes for both participants, as it involves set manipulations and conditional checks in nested loops."

These invariants capture potential slowdowns in the program based on input patterns and structural inefficiencies, without relying on specific values from the slow input. They focus on the size of inputs and the complexity of operations within the program's loops and functions.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Two participants are each given a pair of distinct numbers from 1 to 9 such that there's exactly one number that is present in both pairs. They want to figure out the number that matches by using a communication channel you have access to without revealing it to you.

Both participants communicated to each other a set of pairs of numbers, that includes the pair given to them. Each pair in the communicated sets comprises two different numbers.

Determine if you can with certainty deduce the common number, or if you can determine with certainty that both participants know the number but you do not.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 12) — the number of pairs the first participant communicated to the second and vice versa.

The second line contains n pairs of integers, each between 1 and 9, — pairs of numbers communicated from first participant to the second.

The third line contains m pairs of integers, each between 1 and 9, — pairs of numbers communicated from the second participant to the first.

All pairs within each set are distinct (in particular, if there is a pair (1,2), there will be no pair (2,1) within the same set), and no pair contains the same number twice.

It is guaranteed that the two sets do not contradict the statements, in other words, there is pair from the first set and a pair from the second set that share exactly one number.

Output

If you can deduce the shared number with certainty, print that number.

If you can with certainty deduce that both participants know the shared number, but you do not know it, print 0.

Otherwise print -1.

Examples

Input

2 2
1 2 3 4
1 5 3 4


Output

1


Input

2 2
1 2 3 4
1 5 6 4


Output

0


Input

2 3
1 2 4 5
1 2 1 3 2 3


Output

-1

Note

In the first example the first participant communicated pairs (1,2) and (3,4), and the second communicated (1,5), (3,4). Since we know that the actual pairs they received share exactly one number, it can't be that they both have (3,4). Thus, the first participant has (1,2) and the second has (1,5), and at this point you already know the shared number is 1.

In the second example either the first participant has (1,2) and the second has (1,5), or the first has (3,4) and the second has (6,4). In the first case both of them know the shared number is 1, in the second case both of them know the shared number is 4. You don't have enough information to tell 1 and 4 apart.

In the third case if the first participant was given (1,2), they don't know what the shared number is, since from their perspective the second participant might have been given either (1,3), in which case the shared number is 1, or (2,3), in which case the shared number is 2. While the second participant does know the number with certainty, neither you nor the first participant do, so the output is -1.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants in C++

For each invariant derived in Phase 2, here is the corresponding C++ checker code:

1. **Invariant on Nested Loops:**
   - **Natural Language Invariant:** "If the number of pairs communicated (`n` or `m`) is large, the program's nested loops will iterate over many combinations, leading to significant overhead in checking conditions."
   - **C++ Checker Code:**

```cpp
void check_nested_loops_invariant(int n, int m) {
    if (n * m > 50) {  // Arbitrary threshold based on typical expected upper bounds
        cerr << "Warning: Nested loops invariant triggered - high number of combinations." << endl;
        abort();
    }
}
```

2. **Invariant on Pair Checking:**
   - **Natural Language Invariant:** "When the size of the sets of pairs communicated by the participants is relatively large, and each pair needs to be checked against many others, the performance may degrade due to the repeated invocation of the `contains` function."
   - **C++ Checker Code:**

```cpp
void check_contains_invocation_invariant(int n, int m) {
    if (n + m > 20) {  // Consider high total input size as a rough estimate
        cerr << "Warning: Contains function invocation invariant triggered - excessive calls expected." << endl;
        abort();
    }
}
```

3. **Invariant on Repeated Operations:**
   - **Natural Language Invariant:** "The program's performance may slow down significantly if the conditions require checking many possible number combinations through nested loops, especially when the input size approaches the upper constraints."
   - **C++ Checker Code:**

```cpp
void check_combination_invariant(int n, int m) {
    if (n > 8 || m > 8) {  // Thresholds selected to capture potential performance issues
        cerr << "Warning: Combination invariant triggered - large input sizes." << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checkers into the Original Program

Here is the instrumented C++ program with the integrated performance invariant checkers:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker functions
void check_nested_loops_invariant(int n, int m) {
    if (n * m > 50) {
        cerr << "Warning: Nested loops invariant triggered - high number of combinations." << endl;
        abort();
    }
}

void check_contains_invocation_invariant(int n, int m) {
    if (n + m > 20) {
        cerr << "Warning: Contains function invocation invariant triggered - excessive calls expected." << endl;
        abort();
    }
}

void check_combination_invariant(int n, int m) {
    if (n > 8 || m > 8) {
        cerr << "Warning: Combination invariant triggered - large input sizes." << endl;
        abort();
    }
}

// Original program with integrated checks
const int inf = (int)1e9;
const int mod = inf + 7;
const double eps = 1e-9;
const double pi = acos(-1.0);
int n, m;
vector<pair<int, int> > a, b;
vector<pair<int, int> > read(int n) {
    vector<pair<int, int> > ans;
    for (int i = 0; i < n; i++) {
        int x, y;
        cin >> x >> y;
        if (x > y) swap(x, y);
        ans.push_back(make_pair(x, y));
    }
    return ans;
}
bool contains(vector<pair<int, int> > &v, int x, int y) {
    pair<int, int> p = make_pair(x, y);
    pair<int, int> q = make_pair(y, x);
    for (__typeof(v.begin()) it = v.begin(); it != v.end(); it++) {
        if ((*it) == p || (*it) == q) return true;
    }
    return false;
}
bool ok(vector<pair<int, int> > a, vector<pair<int, int> > b) {
    for (int i = 0; i < (int)a.size(); i++) {
        pair<int, int> p = a[i];
        set<int> same;
        for (int j = 0; j < (int)b.size(); j++) {
            if (a[i] == b[j]) continue;
            set<int> cur;
            cur.insert(a[i].first);
            cur.insert(a[i].second);
            cur.insert(b[j].first);
            cur.insert(b[j].second);
            if (cur.size() != 3) continue;
            if (a[i].first == b[j].first || a[i].first == b[j].second)
                same.insert(a[i].first);
            else if (a[i].second == b[j].first || a[i].second == b[j].second)
                same.insert(a[i].second);
        }
        if (same.size() == 0) continue;
        if (same.size() > 1) return false;
    }
    return true;
}
int main() {
    cin >> n >> m;

    // Perform invariant checks
    check_nested_loops_invariant(n, m);
    check_contains_invocation_invariant(n, m);
    check_combination_invariant(n, m);

    a = read(n);
    b = read(m);
    set<int> ans;
    for (int x = 1; x < 10; x++) {
        for (int y = 1; y < 10; y++) {
            for (int z = 1; z < 10; z++) {
                if (x == y || x == z || y == z) continue;
                if (contains(a, x, y) && contains(b, x, z)) {
                    ans.insert(x);
                }
            }
        }
    }
    if (ans.size() == 1) {
        cout << (*ans.begin()) << endl;
        return 0;
    }
    if (ok(a, b) && ok(b, a))
        cout << 0 << endl;
    else
        cout << -1 << endl;
    return 0;
}
```

**Explanation:**
- The checkers are placed within the `main()` function after reading the inputs `n` and `m`, ensuring they execute before potentially time-consuming operations such as the nested loops and function calls.
- These checks will help identify conditions under which the program might experience performance bottlenecks, providing valuable feedback to prevent slow execution scenarios.

