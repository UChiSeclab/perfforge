system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Two participants are each given a pair of distinct numbers from 1 to 9 such that there's exactly one number that is present in both pairs. They want to figure out the number that matches by using a communication channel you have access to without revealing it to you.

Both participants communicated to each other a set of pairs of numbers, that includes the pair given to them. Each pair in the communicated sets comprises two different numbers.

Determine if you can with certainty deduce the common number, or if you can determine with certainty that both participants know the number but you do not.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 12) — the number of pairs the first participant communicated to the second and vice versa.

The second line contains n pairs of integers, each between 1 and 9, — pairs of numbers communicated from first participant to the second.

The third line contains m pairs of integers, each between 1 and 9, — pairs of numbers communicated from the second participant to the first.

All pairs within each set are distinct (in particular, if there is a pair (1,2), there will be no pair (2,1) within the same set), and no pair contains the same number twice.

It is guaranteed that the two sets do not contradict the statements, in other words, there is pair from the first set and a pair from the second set that share exactly one number.

Output

If you can deduce the shared number with certainty, print that number.

If you can with certainty deduce that both participants know the shared number, but you do not know it, print 0.

Otherwise print -1.

Examples

Input

2 2
1 2 3 4
1 5 3 4


Output

1


Input

2 2
1 2 3 4
1 5 6 4


Output

0


Input

2 3
1 2 4 5
1 2 1 3 2 3


Output

-1

Note

In the first example the first participant communicated pairs (1,2) and (3,4), and the second communicated (1,5), (3,4). Since we know that the actual pairs they received share exactly one number, it can't be that they both have (3,4). Thus, the first participant has (1,2) and the second has (1,5), and at this point you already know the shared number is 1.

In the second example either the first participant has (1,2) and the second has (1,5), or the first has (3,4) and the second has (6,4). In the first case both of them know the shared number is 1, in the second case both of them know the shared number is 4. You don't have enough information to tell 1 and 4 apart.

In the third case if the first participant was given (1,2), they don't know what the shared number is, since from their perspective the second participant might have been given either (1,3), in which case the shared number is 1, or (2,3), in which case the shared number is 2. While the second participant does know the number with certainty, neither you nor the first participant do, so the output is -1.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
const int N = 5e5;
int a[N], b[N], cnt[N], useda[N], usedb[N], c[N], d[N], gooda[N], goodb[N],
    wwa[N], wwb[N];
int n, m;
int main() {
  ios_base::sync_with_stdio(0);
  cin >> n >> m;
  for (int i = 1; i <= n; i++) cin >> a[i] >> b[i];
  for (int i = 1; i <= m; i++) cin >> c[i] >> d[i];
  int it = 0;
  while (n > 0 && m > 0 && it < 100) {
    for (int i = 1; i <= 12; i++)
      useda[i] = usedb[i] = cnt[i] = 0, gooda[i] = 1, goodb[i] = 1, wwa[i] = -1;
    for (int i = 1; i <= n; i++)
      for (int j = 1; j <= m; j++) {
        int t = 0;
        if (a[i] == c[j]) t++;
        if (b[i] == c[j]) t++;
        if (a[i] == d[j]) t++;
        if (b[i] == d[j]) t++;
        if (t == 1) {
          useda[i]++;
          usedb[j]++;
          if (a[i] == c[j]) t = a[i];
          if (b[i] == c[j]) t = b[i];
          if (a[i] == d[j]) t = a[i];
          if (b[i] == d[j]) t = b[i];
          cnt[t]++;
          if (useda[i] >= 2 && t != wwa[i]) gooda[i] = 0;
          if (usedb[j] >= 2 && t != wwb[j]) goodb[j] = 0;
          wwa[i] = t;
          wwb[j] = t;
        }
      }
    int q = 0, last;
    for (int i = 1; i <= 12; i++)
      if (cnt[i] > 0) {
        q++;
        last = i;
      }
    if (q == 1) {
      cout << last << "\n";
      return 0;
    }
    int cn = 0;
    for (int i = 1; i <= n; i++)
      if (useda[i]) {
        cn++;
        a[cn] = a[i];
        b[cn] = b[i];
      }
    n = cn;
    cn = 0;
    for (int i = 1; i <= m; i++)
      if (usedb[i]) {
        cn++;
        c[cn] = c[i];
        d[cn] = d[i];
      }
    m = cn;
    it++;
  }
  int ok = 0;
  for (int i = 1; i <= n; i++)
    if (gooda[i]) ok++;
  for (int i = 1; i <= m; i++)
    if (goodb[i]) ok++;
  if (ok == n + m) {
    cout << "0\n";
    return 0;
  } else
    cout << "-1\n";
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

7 6
6 2 9 2 6 5 2 4 1 2 4 5 6 7
3 9 5 1 9 8 9 5 3 4 2 3


(G.2) Fast Input

4 3
1 2 4 5 6 7 8 9
1 2 8 9 3 1


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
const int N = 5e5; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int a[N], b[N], cnt[N], useda[N], usedb[N], c[N], d[N], gooda[N], goodb[N], /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
    wwa[N], wwb[N]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int n, m; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(0); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n >> m; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 1; i <= n; i++) cin >> a[i] >> b[i]; /* line 10 slow_hit_count: 8, fast_hit_count: 5 */
  for (int i = 1; i <= m; i++) cin >> c[i] >> d[i]; /* line 11 slow_hit_count: 7, fast_hit_count: 4 */
  int it = 0; /* line 12 slow_hit_count: 1, fast_hit_count: 1 */
  while (n > 0 && m > 0 && it < 100) { /* line 13 slow_hit_count: 101, fast_hit_count: 1 */
    for (int i = 1; i <= 12; i++) /* line 14 slow_hit_count: 1300, fast_hit_count: 13 */
      useda[i] = usedb[i] = cnt[i] = 0, gooda[i] = 1, goodb[i] = 1, wwa[i] = -1; /* line 15 slow_hit_count: 1200, fast_hit_count: 12 */
    for (int i = 1; i <= n; i++) /* line 16 slow_hit_count: 701, fast_hit_count: 5 */
      for (int j = 1; j <= m; j++) { /* line 17 slow_hit_count: 4207, fast_hit_count: 16 */
        int t = 0; /* line 18 slow_hit_count: 3606, fast_hit_count: 12 */
        if (a[i] == c[j]) t++; /* line 19 slow_hit_count: 3606, fast_hit_count: 12 */
        if (b[i] == c[j]) t++; /* line 20 slow_hit_count: 3606, fast_hit_count: 12 */
        if (a[i] == d[j]) t++; /* line 21 slow_hit_count: 3606, fast_hit_count: 12 */
        if (b[i] == d[j]) t++; /* line 22 slow_hit_count: 3606, fast_hit_count: 12 */
        if (t == 1) { /* line 23 slow_hit_count: 3606, fast_hit_count: 12 */
          useda[i]++; /* line 24 slow_hit_count: 1400, fast_hit_count: 1 */
          usedb[j]++; /* line 25 slow_hit_count: 1400, fast_hit_count: 1 */
          if (a[i] == c[j]) t = a[i]; /* line 26 slow_hit_count: 1400, fast_hit_count: 1 */
          if (b[i] == c[j]) t = b[i]; /* line 27 slow_hit_count: 1400, fast_hit_count: 1 */
          if (a[i] == d[j]) t = a[i]; /* line 28 slow_hit_count: 1400, fast_hit_count: 1 */
          if (b[i] == d[j]) t = b[i]; /* line 29 slow_hit_count: 1400, fast_hit_count: 1 */
          cnt[t]++; /* line 30 slow_hit_count: 1400, fast_hit_count: 1 */
          if (useda[i] >= 2 && t != wwa[i]) gooda[i] = 0; /* line 31 slow_hit_count: 1400, fast_hit_count: 1 */
          if (usedb[j] >= 2 && t != wwb[j]) goodb[j] = 0; /* line 32 slow_hit_count: 1400, fast_hit_count: 1 */
          wwa[i] = t; /* line 33 slow_hit_count: 1400, fast_hit_count: 1 */
          wwb[j] = t; /* line 34 slow_hit_count: 1400, fast_hit_count: 1 */
        } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
    int q = 0, last; /* line 37 slow_hit_count: 100, fast_hit_count: 1 */
    for (int i = 1; i <= 12; i++) /* line 38 slow_hit_count: 1300, fast_hit_count: 13 */
      if (cnt[i] > 0) { /* line 39 slow_hit_count: 1200, fast_hit_count: 12 */
        q++; /* line 40 slow_hit_count: 500, fast_hit_count: 1 */
        last = i; /* line 41 slow_hit_count: 500, fast_hit_count: 1 */
      } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    if (q == 1) { /* line 43 slow_hit_count: 100, fast_hit_count: 1 */
      cout << last << "\n"; /* line 44 slow_hit_count: 0, fast_hit_count: 1 */
      return 0; /* line 45 slow_hit_count: 0, fast_hit_count: 1 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    int cn = 0; /* line 47 slow_hit_count: 100, fast_hit_count: 0 */
    for (int i = 1; i <= n; i++) /* line 48 slow_hit_count: 701, fast_hit_count: 0 */
      if (useda[i]) { /* line 49 slow_hit_count: 601, fast_hit_count: 0 */
        cn++; /* line 50 slow_hit_count: 600, fast_hit_count: 0 */
        a[cn] = a[i]; /* line 51 slow_hit_count: 600, fast_hit_count: 0 */
        b[cn] = b[i]; /* line 52 slow_hit_count: 600, fast_hit_count: 0 */
      } /* line 53 slow_hit_count: 0, fast_hit_count: 0 */
    n = cn; /* line 54 slow_hit_count: 100, fast_hit_count: 0 */
    cn = 0; /* line 55 slow_hit_count: 100, fast_hit_count: 0 */
    for (int i = 1; i <= m; i++) /* line 56 slow_hit_count: 700, fast_hit_count: 0 */
      if (usedb[i]) { /* line 57 slow_hit_count: 600, fast_hit_count: 0 */
        cn++; /* line 58 slow_hit_count: 600, fast_hit_count: 0 */
        c[cn] = c[i]; /* line 59 slow_hit_count: 600, fast_hit_count: 0 */
        d[cn] = d[i]; /* line 60 slow_hit_count: 600, fast_hit_count: 0 */
      } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    m = cn; /* line 62 slow_hit_count: 100, fast_hit_count: 0 */
    it++; /* line 63 slow_hit_count: 100, fast_hit_count: 0 */
  } /* line 64 slow_hit_count: 0, fast_hit_count: 0 */
  int ok = 0; /* line 65 slow_hit_count: 1, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) /* line 66 slow_hit_count: 7, fast_hit_count: 0 */
    if (gooda[i]) ok++; /* line 67 slow_hit_count: 6, fast_hit_count: 0 */
  for (int i = 1; i <= m; i++) /* line 68 slow_hit_count: 7, fast_hit_count: 0 */
    if (goodb[i]) ok++; /* line 69 slow_hit_count: 6, fast_hit_count: 0 */
  if (ok == n + m) { /* line 70 slow_hit_count: 1, fast_hit_count: 0 */
    cout << "0\n"; /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
    return 0; /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  } else /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
    cout << "-1\n"; /* line 74 slow_hit_count: 1, fast_hit_count: 0 */
  return 0; /* line 75 slow_hit_count: 1, fast_hit_count: 0 */
} /* line 76 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the C program for performance bottlenecks, let's break down the tasks into the specified phases.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Compare Line-Level Hit Counts:**
   - The `while` loop starting at line 13 is hit 101 times for the slow input, but only once for the fast input.
   - The nested loops at lines 16 and 17 are responsible for a large number of hits (701 and 4207 respectively for the slow input vs. only 5 and 16 for the fast input).
   - The operations within these loops, particularly lines 18-22 and lines 24-34, are executed thousands of times for the slow input.

2. **Pinpoint Lines with More Hits:**
   - Lines 17-34 are hit far more frequently with the slow input, indicating that the logic involving comparisons and updates to `useda`, `usedb`, and `cnt` is executed excessively.

3. **Infer Interaction with Data Structures:**
   - The slow input causes more iterations over the nested loops due to the repeated condition checks and updates on arrays `useda`, `usedb`, and `cnt`.
   - This excessive repetition hints at redundant operations likely caused by not reducing `n` and `m` effectively within the loops or an inefficient convergence towards a solution.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, here are some performance-characterizing invariants in natural language:

1. **High Iteration Count:**
   - "When both `n` and `m` are sufficiently large and involve multiple redundant comparisons between pairs, the program may experience significant slowdowns due to excessive iterations in nested loops."

2. **Redundant Conditional Checks:**
   - "If the condition `(a[i] == c[j] || b[i] == c[j] || a[i] == d[j] || b[i] == d[j])` triggers repeatedly across many iterations without effectively reducing the problem size, performance degradation is likely."

3. **Ineffective Pruning Strategy:**
   - "The approach to prune or reduce `n` and `m` by filtering used pairs (lines 47-62) may not effectively decrease iterations if the same subset of pairs is repeatedly processed."

These invariants focus on the high hit count in the nested loops and highlight potential inefficiencies in the logic that determines when to stop or reduce iterations. 

### Recommendations:

- Consider optimizing the logic to quickly converge to a solution or reduce unnecessary iterations.
- Analyze the data structure updates to ensure effective reduction of `n` and `m` within the loop, thus avoiding redundant loops.
- Introduce conditions or checks outside the tight loops to avoid unnecessary computations, leveraging the constraints of `n, m <= 12`.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Two participants are each given a pair of distinct numbers from 1 to 9 such that there's exactly one number that is present in both pairs. They want to figure out the number that matches by using a communication channel you have access to without revealing it to you.

Both participants communicated to each other a set of pairs of numbers, that includes the pair given to them. Each pair in the communicated sets comprises two different numbers.

Determine if you can with certainty deduce the common number, or if you can determine with certainty that both participants know the number but you do not.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 12) — the number of pairs the first participant communicated to the second and vice versa.

The second line contains n pairs of integers, each between 1 and 9, — pairs of numbers communicated from first participant to the second.

The third line contains m pairs of integers, each between 1 and 9, — pairs of numbers communicated from the second participant to the first.

All pairs within each set are distinct (in particular, if there is a pair (1,2), there will be no pair (2,1) within the same set), and no pair contains the same number twice.

It is guaranteed that the two sets do not contradict the statements, in other words, there is pair from the first set and a pair from the second set that share exactly one number.

Output

If you can deduce the shared number with certainty, print that number.

If you can with certainty deduce that both participants know the shared number, but you do not know it, print 0.

Otherwise print -1.

Examples

Input

2 2
1 2 3 4
1 5 3 4


Output

1


Input

2 2
1 2 3 4
1 5 6 4


Output

0


Input

2 3
1 2 4 5
1 2 1 3 2 3


Output

-1

Note

In the first example the first participant communicated pairs (1,2) and (3,4), and the second communicated (1,5), (3,4). Since we know that the actual pairs they received share exactly one number, it can't be that they both have (3,4). Thus, the first participant has (1,2) and the second has (1,5), and at this point you already know the shared number is 1.

In the second example either the first participant has (1,2) and the second has (1,5), or the first has (3,4) and the second has (6,4). In the first case both of them know the shared number is 1, in the second case both of them know the shared number is 4. You don't have enough information to tell 1 and 4 apart.

In the third case if the first participant was given (1,2), they don't know what the shared number is, since from their perspective the second participant might have been given either (1,3), in which case the shared number is 1, or (2,3), in which case the shared number is 2. While the second participant does know the number with certainty, neither you nor the first participant do, so the output is -1.

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Natural Language Invariants in C++

### Invariant 1: High Iteration Count

The first invariant is about excessive iterations when both `n` and `m` are large, leading to significant slowdowns. The check should trigger if the nested loops over `n` and `m` execute extensively without reducing the problem size.

```cpp
void check_iteration_invariant(int n, int m, int it) {
    if (n > 6 && m > 6 && it > 20) { // Adjust thresholds as needed based on typical performance
        cerr << "Warning: iteration_invariant triggered - excessive nested loop iterations" << endl;
        abort();
    }
}
```

### Invariant 2: Redundant Conditional Checks

The second invariant focuses on detecting if the condition `(a[i] == c[j] || b[i] == c[j] || a[i] == d[j] || b[i] == d[j])` is overly triggered without effectively reducing `n` or `m`.

```cpp
void check_redundant_checks_invariant(int condition_count, int threshold) {
    if (condition_count > threshold) { // Threshold based on expected efficiency
        cerr << "Warning: redundant_checks_invariant triggered - redundant condition checks" << endl;
        abort();
    }
}
```

### Invariant 3: Ineffective Pruning Strategy

This invariant checks whether `n` and `m` are not effectively reduced across iterations, leading to repeated processing of the same data.

```cpp
void check_pruning_invariant(int initial_n, int initial_m, int current_n, int current_m) {
    if (current_n == initial_n && current_m == initial_m) {
        cerr << "Warning: pruning_invariant triggered - ineffective reduction of data size" << endl;
        abort();
    }
}
```

## Phase 4: Integrate Checker Code with the Original Program

Here is the instrumented C++ code with the integrated checks:

```cpp
#include <bits/stdc++.h>
using namespace std;
const int N = 5e5;
int a[N], b[N], cnt[N], useda[N], usedb[N], c[N], d[N], gooda[N], goodb[N],
    wwa[N], wwb[N];
int n, m;

// Checker functions based on invariants
void check_iteration_invariant(int n, int m, int it) {
    if (n > 6 && m > 6 && it > 20) { // Update thresholds based on expected performance
        cerr << "Warning: iteration_invariant triggered - excessive nested loop iterations" << endl;
        abort();
    }
}

void check_redundant_checks_invariant(int condition_count, int threshold) {
    if (condition_count > threshold) { // Threshold based on expected efficiency
        cerr << "Warning: redundant_checks_invariant triggered - redundant condition checks" << endl;
        abort();
    }
}

void check_pruning_invariant(int initial_n, int initial_m, int current_n, int current_m) {
    if (current_n == initial_n && current_m == initial_m) {
        cerr << "Warning: pruning_invariant triggered - ineffective reduction of data size" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin >> n >> m;
    int initial_n = n, initial_m = m; // Save initial n and m for pruning check
    for (int i = 1; i <= n; i++) cin >> a[i] >> b[i];
    for (int i = 1; i <= m; i++) cin >> c[i] >> d[i];
    int it = 0;
    int condition_count = 0; // Counter for redundant condition checks
    while (n > 0 && m > 0 && it < 100) {
        for (int i = 1; i <= 12; i++)
            useda[i] = usedb[i] = cnt[i] = 0, gooda[i] = 1, goodb[i] = 1, wwa[i] = -1;
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= m; j++) {
                int t = 0;
                if (a[i] == c[j]) t++;
                if (b[i] == c[j]) t++;
                if (a[i] == d[j]) t++;
                if (b[i] == d[j]) t++;
                if (t == 1) {
                    useda[i]++;
                    usedb[j]++;
                    if (a[i] == c[j]) t = a[i];
                    if (b[i] == c[j]) t = b[i];
                    if (a[i] == d[j]) t = a[i];
                    if (b[i] == d[j]) t = b[i];
                    cnt[t]++;
                    if (useda[i] >= 2 && t != wwa[i]) gooda[i] = 0;
                    if (usedb[j] >= 2 && t != wwb[j]) goodb[j] = 0;
                    wwa[i] = t;
                    wwb[j] = t;
                    condition_count++; // Increment condition checks
                }
            }
        check_redundant_checks_invariant(condition_count, 50); // Check for redundant condition execution

        int q = 0, last;
        for (int i = 1; i <= 12; i++)
            if (cnt[i] > 0) {
                q++;
                last = i;
            }
        if (q == 1) {
            cout << last << "\n";
            return 0;
        }
        int cn = 0;
        for (int i = 1; i <= n; i++)
            if (useda[i]) {
                cn++;
                a[cn] = a[i];
                b[cn] = b[i];
            }
        n = cn;
        cn = 0;
        for (int i = 1; i <= m; i++)
            if (usedb[i]) {
                cn++;
                c[cn] = c[i];
                d[cn] = d[i];
            }
        m = cn;
        check_pruning_invariant(initial_n, initial_m, n, m); // Check effective pruning
        it++;
        check_iteration_invariant(n, m, it); // Check iteration count
    }
    int ok = 0;
    for (int i = 1; i <= n; i++)
        if (gooda[i]) ok++;
    for (int i = 1; i <= m; i++)
        if (goodb[i]) ok++;
    if (ok == n + m) {
        cout << "0\n";
        return 0;
    } else
        cout << "-1\n";
    return 0;
}
```

### Explanation of Checker Placement:

- **`check_iteration_invariant`:** Placed after the iteration variable `it` is incremented to ensure it monitors the loop execution over time.
- **`check_redundant_checks_invariant`:** Placed within the nested loops to track how often the critical condition is triggered.
- **`check_pruning_invariant`:** Placed after attempts to prune `n` and `m` to verify if these operations are reducing the data effectively. 

These checks should help identify performance bottlenecks during execution without significantly impacting the runtime of the code under normal circumstances.

