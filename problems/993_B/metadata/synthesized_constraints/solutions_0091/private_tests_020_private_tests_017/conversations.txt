system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Two participants are each given a pair of distinct numbers from 1 to 9 such that there's exactly one number that is present in both pairs. They want to figure out the number that matches by using a communication channel you have access to without revealing it to you.

Both participants communicated to each other a set of pairs of numbers, that includes the pair given to them. Each pair in the communicated sets comprises two different numbers.

Determine if you can with certainty deduce the common number, or if you can determine with certainty that both participants know the number but you do not.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 12) — the number of pairs the first participant communicated to the second and vice versa.

The second line contains n pairs of integers, each between 1 and 9, — pairs of numbers communicated from first participant to the second.

The third line contains m pairs of integers, each between 1 and 9, — pairs of numbers communicated from the second participant to the first.

All pairs within each set are distinct (in particular, if there is a pair (1,2), there will be no pair (2,1) within the same set), and no pair contains the same number twice.

It is guaranteed that the two sets do not contradict the statements, in other words, there is pair from the first set and a pair from the second set that share exactly one number.

Output

If you can deduce the shared number with certainty, print that number.

If you can with certainty deduce that both participants know the shared number, but you do not know it, print 0.

Otherwise print -1.

Examples

Input

2 2
1 2 3 4
1 5 3 4


Output

1


Input

2 2
1 2 3 4
1 5 6 4


Output

0


Input

2 3
1 2 4 5
1 2 1 3 2 3


Output

-1

Note

In the first example the first participant communicated pairs (1,2) and (3,4), and the second communicated (1,5), (3,4). Since we know that the actual pairs they received share exactly one number, it can't be that they both have (3,4). Thus, the first participant has (1,2) and the second has (1,5), and at this point you already know the shared number is 1.

In the second example either the first participant has (1,2) and the second has (1,5), or the first has (3,4) and the second has (6,4). In the first case both of them know the shared number is 1, in the second case both of them know the shared number is 4. You don't have enough information to tell 1 and 4 apart.

In the third case if the first participant was given (1,2), they don't know what the shared number is, since from their perspective the second participant might have been given either (1,3), in which case the shared number is 1, or (2,3), in which case the shared number is 2. While the second participant does know the number with certainty, neither you nor the first participant do, so the output is -1.

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int N, M;
int A[12], B[12];
int MA[12];
int MB[12];
void solve() {
  int i, j, k, l, r, x, y;
  string s;
  cin >> N >> M;
  for (i = 0; i < (N); i++) {
    cin >> x >> y;
    A[i] = (1 << x) | (1 << y);
  }
  for (i = 0; i < (M); i++) {
    cin >> x >> y;
    B[i] = (1 << x) | (1 << y);
  }
  vector<int> CA[12], CB[12];
  int a[2] = {}, b[2] = {};
  for (i = 0; i < (N); i++) {
    int cand = 0;
    for (j = 0; j < (M); j++) {
      if (A[i] == B[j]) continue;
      if (__builtin_popcount(A[i] & B[j]) == 1) {
        CA[i].push_back(j);
        MA[i] |= 1 << j;
      }
    }
  }
  for (i = 0; i < (M); i++) {
    int cand = 0;
    for (j = 0; j < (N); j++) {
      if (B[i] == A[j]) continue;
      if (__builtin_popcount(B[i] & A[j]) == 1) {
        CB[i].push_back(j);
        MB[i] |= 1 << j;
      }
    }
  }
  int num = 0;
  int ret = 0;
  for (i = 0; i < (1200); i++) {
    for (x = 0; x < (N); x++)
      if (MA[x] == 0) {
        for (y = 0; y < (M); y++) MB[y] &= ~(1 << x);
      }
    for (x = 0; x < (M); x++)
      if (MB[x] == 0) {
        for (y = 0; y < (N); y++) MA[y] &= ~(1 << x);
      }
  }
  int cand = 0;
  int cantsure = 0;
  for (i = 0; i < (N); i++) {
    int mc = 0;
    for (j = 0; j < (M); j++)
      if ((MA[i] & (1 << j)) && (MB[j] & (1 << i))) {
        cand |= A[i] & B[j];
        mc |= A[i] & B[j];
      }
    if (__builtin_popcount(mc) > 1) return (void)printf("-1\n");
  }
  for (j = 0; j < (M); j++) {
    int mc = 0;
    for (i = 0; i < (N); i++)
      if ((MA[i] & (1 << j)) && (MB[j] & (1 << i))) {
        cand |= A[i] & B[j];
        mc |= A[i] & B[j];
      }
    if (__builtin_popcount(mc) > 1) return (void)printf("-1\n");
  }
  if (__builtin_popcount(cand) > 1) {
    (void)printf("0\n");
  } else if (__builtin_popcount(cand) == 1) {
    for (x = 0; x < (10); x++)
      if (cand & (1 << x)) cout << x << endl;
  } else {
    (void)printf("-1\n");
  }
}
int main(int argc, char** argv) {
  string s;
  int i;
  if (argc == 1) ios::sync_with_stdio(false), cin.tie(0);
  for (i = 0; i < (argc - 1); i++) s += argv[i + 1], s += '\n';
  for (i = 0; i < (s.size()); i++) ungetc(s[s.size() - 1 - i], stdin);
  cout.tie(0);
  solve();
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12 12
6 7 5 4 7 8 2 9 8 5 3 5 1 6 7 3 7 9 5 7 1 8 6 8
6 4 2 1 7 8 1 6 8 5 9 8 1 5 7 2 5 9 6 3 9 2 9 4


(G.2) Fast Input

3 3
1 2 5 6 7 8
2 3 4 5 8 9


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int N, M; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int A[12], B[12]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int MA[12]; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int MB[12]; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
void solve() { /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int i, j, k, l, r, x, y; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  string s; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> N >> M; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < (N); i++) { /* line 11 slow_hit_count: 13, fast_hit_count: 4 */
    cin >> x >> y; /* line 12 slow_hit_count: 12, fast_hit_count: 3 */
    A[i] = (1 << x) | (1 << y); /* line 13 slow_hit_count: 12, fast_hit_count: 3 */
  } /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < (M); i++) { /* line 15 slow_hit_count: 13, fast_hit_count: 4 */
    cin >> x >> y; /* line 16 slow_hit_count: 12, fast_hit_count: 3 */
    B[i] = (1 << x) | (1 << y); /* line 17 slow_hit_count: 12, fast_hit_count: 3 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  vector<int> CA[12], CB[12]; /* line 19 slow_hit_count: 49, fast_hit_count: 49 */
  int a[2] = {}, b[2] = {}; /* line 20 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < (N); i++) { /* line 21 slow_hit_count: 13, fast_hit_count: 4 */
    int cand = 0; /* line 22 slow_hit_count: 12, fast_hit_count: 3 */
    for (j = 0; j < (M); j++) { /* line 23 slow_hit_count: 156, fast_hit_count: 12 */
      if (A[i] == B[j]) continue; /* line 24 slow_hit_count: 144, fast_hit_count: 9 */
      if (__builtin_popcount(A[i] & B[j]) == 1) { /* line 25 slow_hit_count: 140, fast_hit_count: 9 */
        CA[i].push_back(j); /* line 26 slow_hit_count: 56, fast_hit_count: 3 */
        MA[i] |= 1 << j; /* line 27 slow_hit_count: 56, fast_hit_count: 3 */
      } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  for (i = 0; i < (M); i++) { /* line 31 slow_hit_count: 13, fast_hit_count: 4 */
    int cand = 0; /* line 32 slow_hit_count: 12, fast_hit_count: 3 */
    for (j = 0; j < (N); j++) { /* line 33 slow_hit_count: 156, fast_hit_count: 12 */
      if (B[i] == A[j]) continue; /* line 34 slow_hit_count: 144, fast_hit_count: 9 */
      if (__builtin_popcount(B[i] & A[j]) == 1) { /* line 35 slow_hit_count: 140, fast_hit_count: 9 */
        CB[i].push_back(j); /* line 36 slow_hit_count: 56, fast_hit_count: 3 */
        MB[i] |= 1 << j; /* line 37 slow_hit_count: 56, fast_hit_count: 3 */
      } /* line 38 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
  int num = 0; /* line 41 slow_hit_count: 1, fast_hit_count: 1 */
  int ret = 0; /* line 42 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < (1200); i++) { /* line 43 slow_hit_count: 1201, fast_hit_count: 1201 */
    for (x = 0; x < (N); x++) /* line 44 slow_hit_count: 15600, fast_hit_count: 4800 */
      if (MA[x] == 0) { /* line 45 slow_hit_count: 14400, fast_hit_count: 3600 */
        for (y = 0; y < (M); y++) MB[y] &= ~(1 << x); /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 47 slow_hit_count: 0, fast_hit_count: 0 */
    for (x = 0; x < (M); x++) /* line 48 slow_hit_count: 15600, fast_hit_count: 4800 */
      if (MB[x] == 0) { /* line 49 slow_hit_count: 14400, fast_hit_count: 3600 */
        for (y = 0; y < (N); y++) MA[y] &= ~(1 << x); /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 52 slow_hit_count: 0, fast_hit_count: 0 */
  int cand = 0; /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  int cantsure = 0; /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < (N); i++) { /* line 55 slow_hit_count: 1, fast_hit_count: 4 */
    int mc = 0; /* line 56 slow_hit_count: 1, fast_hit_count: 3 */
    for (j = 0; j < (M); j++) /* line 57 slow_hit_count: 13, fast_hit_count: 12 */
      if ((MA[i] & (1 << j)) && (MB[j] & (1 << i))) { /* line 58 slow_hit_count: 12, fast_hit_count: 9 */
        cand |= A[i] & B[j]; /* line 59 slow_hit_count: 5, fast_hit_count: 3 */
        mc |= A[i] & B[j]; /* line 60 slow_hit_count: 5, fast_hit_count: 3 */
      } /* line 61 slow_hit_count: 0, fast_hit_count: 0 */
    if (__builtin_popcount(mc) > 1) return (void)printf("-1\n"); /* line 62 slow_hit_count: 1, fast_hit_count: 3 */
  } /* line 63 slow_hit_count: 0, fast_hit_count: 0 */
  for (j = 0; j < (M); j++) { /* line 64 slow_hit_count: 0, fast_hit_count: 4 */
    int mc = 0; /* line 65 slow_hit_count: 0, fast_hit_count: 3 */
    for (i = 0; i < (N); i++) /* line 66 slow_hit_count: 0, fast_hit_count: 12 */
      if ((MA[i] & (1 << j)) && (MB[j] & (1 << i))) { /* line 67 slow_hit_count: 0, fast_hit_count: 9 */
        cand |= A[i] & B[j]; /* line 68 slow_hit_count: 0, fast_hit_count: 3 */
        mc |= A[i] & B[j]; /* line 69 slow_hit_count: 0, fast_hit_count: 3 */
      } /* line 70 slow_hit_count: 0, fast_hit_count: 0 */
    if (__builtin_popcount(mc) > 1) return (void)printf("-1\n"); /* line 71 slow_hit_count: 0, fast_hit_count: 3 */
  } /* line 72 slow_hit_count: 0, fast_hit_count: 0 */
  if (__builtin_popcount(cand) > 1) { /* line 73 slow_hit_count: 0, fast_hit_count: 1 */
    (void)printf("0\n"); /* line 74 slow_hit_count: 0, fast_hit_count: 1 */
  } else if (__builtin_popcount(cand) == 1) { /* line 75 slow_hit_count: 0, fast_hit_count: 0 */
    for (x = 0; x < (10); x++) /* line 76 slow_hit_count: 0, fast_hit_count: 0 */
      if (cand & (1 << x)) cout << x << endl; /* line 77 slow_hit_count: 0, fast_hit_count: 0 */
  } else { /* line 78 slow_hit_count: 0, fast_hit_count: 0 */
    (void)printf("-1\n"); /* line 79 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 80 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
int main(int argc, char** argv) { /* line 82 slow_hit_count: 1, fast_hit_count: 1 */
  string s; /* line 83 slow_hit_count: 1, fast_hit_count: 1 */
  int i; /* line 84 slow_hit_count: 0, fast_hit_count: 0 */
  if (argc == 1) ios::sync_with_stdio(false), cin.tie(0); /* line 85 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < (argc - 1); i++) s += argv[i + 1], s += '\n'; /* line 86 slow_hit_count: 1, fast_hit_count: 1 */
  for (i = 0; i < (s.size()); i++) ungetc(s[s.size() - 1 - i], stdin); /* line 87 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 88 slow_hit_count: 1, fast_hit_count: 1 */
  solve(); /* line 89 slow_hit_count: 1, fast_hit_count: 1 */
  return 0; /* line 90 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 91 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-Level Hit Count Comparison:**
   - **Line 23 and 33:** These lines, which iterate over the nested loops, show a significant increase in hit counts for the slow input (156 hits) compared to the fast input (12 hits). This suggests that the nested loops are a major contributor to the slowdown.
   - **Line 45 and 49:** These conditional checks are hit 14,400 times in the slow input and only 3,600 times in the fast input. This indicates significant overhead in processing these conditions.
   - **Line 43:** The outer loop is executed 1,201 times, indicating that the loop is a hot spot and potentially a significant bottleneck as it processes each iteration of the nested conditions.

2. **Inference on Code Interactions:**
   - The heavy nested loops (lines 23-39) interact with the `CA` and `CB` vectors and manipulate bit masks in `MA` and `MB`. These operations suggest potential inefficiencies, especially since they are contingent upon bitwise operations.
   - The double-loop structure within a fixed outer loop (lines 44-51) suggests that the interaction predominantly stems from repeatedly clearing bits in `MA` and `MB`, driving up execution time when `N` and `M` are large.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Invariant: High Iteration Count in Nested Loops**
   - **Natural Language Description:** "When the number of pairs `n` and `m` is large, close to the maximum allowed (12), and the nested loops are executed extensively, the program may experience degraded performance due to repeated bitwise operations and vector manipulations."
   - **Explanation:** The repeated iterating over `N * M` combinations causes exponential growth in computation time, particularly when both `n` and `m` are at their upper bounds.

2. **Invariant: Extensive Bit Manipulation**
   - **Natural Language Description:** "If the bit masks for pairs, represented by `MA` and `MB`, have many 'active' bits set, this can lead to excessive conditional evaluations, slowing the program. This situation is exacerbated when `n` and `m` are at their maximum."
   - **Explanation:** The bitwise operations and conditional logic heavily depend on the number of bits set in `MA` and `MB`, leading to high iteration counts within nested loops.

3. **Invariant: Redundant Loop Executions**
   - **Natural Language Description:** "If the loop that aims to clear bits in `MA` and `MB` is executed an excessive number of times (e.g., over 1,000 iterations), especially when `n` and `m` are both large, it indicates potential redundancy and inefficiency in processing."
   - **Explanation:** High loop iterations reflect redundant computations due to frequent re-evaluations and bitwise adjustments that don't converge quickly when `n` or `m` is at its maximum.

These invariants reflect the conditions under which the program encounters performance issues, using abstract thresholds based on the constraints of `n` and `m` to highlight potential inefficiencies in processing logic.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Two participants are each given a pair of distinct numbers from 1 to 9 such that there's exactly one number that is present in both pairs. They want to figure out the number that matches by using a communication channel you have access to without revealing it to you.

Both participants communicated to each other a set of pairs of numbers, that includes the pair given to them. Each pair in the communicated sets comprises two different numbers.

Determine if you can with certainty deduce the common number, or if you can determine with certainty that both participants know the number but you do not.

Input

The first line contains two integers n and m (1 ≤ n, m ≤ 12) — the number of pairs the first participant communicated to the second and vice versa.

The second line contains n pairs of integers, each between 1 and 9, — pairs of numbers communicated from first participant to the second.

The third line contains m pairs of integers, each between 1 and 9, — pairs of numbers communicated from the second participant to the first.

All pairs within each set are distinct (in particular, if there is a pair (1,2), there will be no pair (2,1) within the same set), and no pair contains the same number twice.

It is guaranteed that the two sets do not contradict the statements, in other words, there is pair from the first set and a pair from the second set that share exactly one number.

Output

If you can deduce the shared number with certainty, print that number.

If you can with certainty deduce that both participants know the shared number, but you do not know it, print 0.

Otherwise print -1.

Examples

Input

2 2
1 2 3 4
1 5 3 4


Output

1


Input

2 2
1 2 3 4
1 5 6 4


Output

0


Input

2 3
1 2 4 5
1 2 1 3 2 3


Output

-1

Note

In the first example the first participant communicated pairs (1,2) and (3,4), and the second communicated (1,5), (3,4). Since we know that the actual pairs they received share exactly one number, it can't be that they both have (3,4). Thus, the first participant has (1,2) and the second has (1,5), and at this point you already know the shared number is 1.

In the second example either the first participant has (1,2) and the second has (1,5), or the first has (3,4) and the second has (6,4). In the first case both of them know the shared number is 1, in the second case both of them know the shared number is 4. You don't have enough information to tell 1 and 4 apart.

In the third case if the first participant was given (1,2), they don't know what the shared number is, since from their perspective the second participant might have been given either (1,3), in which case the shared number is 1, or (2,3), in which case the shared number is 2. While the second participant does know the number with certainty, neither you nor the first participant do, so the output is -1.

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Below are the C++ code snippets that check the performance-characterizing invariants derived in Phase 2:

1. **Invariant: High Iteration Count in Nested Loops**

```cpp
void check_high_iteration_count(int N, int M) {
    if (N >= 10 && M >= 10) {
        cerr << "Warning: Performance bottleneck due to high iteration count in nested loops!" << endl;
        abort();
    }
}
```

2. **Invariant: Extensive Bit Manipulation**

```cpp
void check_bit_manipulation(int *MA, int *MB, int N, int M) {
    int activeBitsA = 0, activeBitsB = 0;
    for (int i = 0; i < N; ++i) {
        activeBitsA += __builtin_popcount(MA[i]);
    }
    for (int j = 0; j < M; ++j) {
        activeBitsB += __builtin_popcount(MB[j]);
    }
    if (activeBitsA > 10 * N || activeBitsB > 10 * M) {
        cerr << "Warning: Performance bottleneck due to extensive bit manipulation!" << endl;
        abort();
    }
}
```

3. **Invariant: Redundant Loop Executions**

```cpp
void check_redundant_loop_executions(int iterationCount) {
    if (iterationCount > 1000) {
        cerr << "Warning: Performance bottleneck due to redundant loop executions!" << endl;
        abort();
    }
}
```

### Phase 4: Integrate the Checker Code into the Original C++ Program

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function for high iteration count in nested loops
void check_high_iteration_count(int N, int M) {
    if (N >= 10 && M >= 10) {
        cerr << "Warning: Performance bottleneck due to high iteration count in nested loops!" << endl;
        abort();
    }
}

// Checker function for extensive bit manipulation
void check_bit_manipulation(int *MA, int *MB, int N, int M) {
    int activeBitsA = 0, activeBitsB = 0;
    for (int i = 0; i < N; ++i) {
        activeBitsA += __builtin_popcount(MA[i]);
    }
    for (int j = 0; j < M; ++j) {
        activeBitsB += __builtin_popcount(MB[j]);
    }
    if (activeBitsA > 10 * N || activeBitsB > 10 * M) {
        cerr << "Warning: Performance bottleneck due to extensive bit manipulation!" << endl;
        abort();
    }
}

// Checker function for redundant loop executions
void check_redundant_loop_executions(int iterationCount) {
    if (iterationCount > 1000) {
        cerr << "Warning: Performance bottleneck due to redundant loop executions!" << endl;
        abort();
    }
}

int N, M;
int A[12], B[12];
int MA[12];
int MB[12];

void solve() {
    int i, j, k, l, r, x, y;
    string s;
    cin >> N >> M;
    
    // Check for high iteration count in nested loops
    check_high_iteration_count(N, M);
    
    for (i = 0; i < N; i++) {
        cin >> x >> y;
        A[i] = (1 << x) | (1 << y);
    }
    for (i = 0; i < M; i++) {
        cin >> x >> y;
        B[i] = (1 << x) | (1 << y);
    }
    vector<int> CA[12], CB[12];
    int a[2] = {}, b[2] = {};
    
    for (i = 0; i < N; i++) {
        int cand = 0;
        for (j = 0; j < M; j++) {
            if (A[i] == B[j]) continue;
            if (__builtin_popcount(A[i] & B[j]) == 1) {
                CA[i].push_back(j);
                MA[i] |= 1 << j;
            }
        }
    }
    for (i = 0; i < M; i++) {
        int cand = 0;
        for (j = 0; j < N; j++) {
            if (B[i] == A[j]) continue;
            if (__builtin_popcount(B[i] & A[j]) == 1) {
                CB[i].push_back(j);
                MB[i] |= 1 << j;
            }
        }
    }
    
    int num = 0;
    int ret = 0;
    int iterationCount = 0;
    for (i = 0; i < 1200; i++) {
        iterationCount++;
        for (x = 0; x < N; x++)
            if (MA[x] == 0) {
                for (y = 0; y < M; y++) MB[y] &= ~(1 << x);
            }
        for (x = 0; x < M; x++)
            if (MB[x] == 0) {
                for (y = 0; y < N; y++) MA[y] &= ~(1 << x);
            }
    }
    
    // Check for redundant loop executions
    check_redundant_loop_executions(iterationCount);
    
    // Check for extensive bit manipulation
    check_bit_manipulation(MA, MB, N, M);
    
    int cand = 0;
    int cantsure = 0;
    for (i = 0; i < N; i++) {
        int mc = 0;
        for (j = 0; j < M; j++)
            if ((MA[i] & (1 << j)) && (MB[j] & (1 << i))) {
                cand |= A[i] & B[j];
                mc |= A[i] & B[j];
            }
        if (__builtin_popcount(mc) > 1) return (void)printf("-1\n");
    }
    for (j = 0; j < M; j++) {
        int mc = 0;
        for (i = 0; i < N; i++)
            if ((MA[i] & (1 << j)) && (MB[j] & (1 << i))) {
                cand |= A[i] & B[j];
                mc |= A[i] & B[j];
            }
        if (__builtin_popcount(mc) > 1) return (void)printf("-1\n");
    }
    if (__builtin_popcount(cand) > 1) {
        (void)printf("0\n");
    } else if (__builtin_popcount(cand) == 1) {
        for (x = 0; x < 10; x++)
            if (cand & (1 << x)) cout << x << endl;
    } else {
        (void)printf("-1\n");
    }
}

int main(int argc, char** argv) {
    string s;
    int i;
    if (argc == 1) ios::sync_with_stdio(false), cin.tie(0);
    for (i = 0; i < (argc - 1); i++) s += argv[i + 1], s += '\n';
    for (i = 0; i < (s.size()); i++) ungetc(s[s.size() - 1 - i], stdin);
    cout.tie(0);
    solve();
    return 0;
}
```

**Explanation:**
- **High Iteration Count Check:** Placed right after reading inputs to warn if the loop will likely execute a large number of times given the constraints.
- **Extensive Bit Manipulation Check:** Executed after constructing the bitmask arrays `MA` and `MB`, ensuring that the bit operations aren't overly complex.
- **Redundant Loop Execution Check:** Placed after the loop that potentially executes many times, checking for excessive iterations.

