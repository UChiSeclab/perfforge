system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little Petya loves looking for numbers' divisors. One day Petya came across the following problem:

You are given n queries in the form "xi yi". For each query Petya should count how many divisors of number xi divide none of the numbers xi - yi, xi - yi + 1, ..., xi - 1. Help him.

Input

The first line contains an integer n (1 ≤ n ≤ 105). Each of the following n lines contain two space-separated integers xi and yi (1 ≤ xi ≤ 105, 0 ≤ yi ≤ i - 1, where i is the query's ordinal number; the numeration starts with 1). 

If yi = 0 for the query, then the answer to the query will be the number of divisors of the number xi. In this case you do not need to take the previous numbers x into consideration.

Output

For each query print the answer on a single line: the number of positive integers k such that <image>

Examples

Input

6
4 0
3 1
5 2
6 2
18 4
10000 3


Output

3
1
1
2
2
22

Note

Let's write out the divisors that give answers for the first 5 queries:

1) 1, 2, 4 

2) 3

3) 5

4) 2, 6

5) 9, 18

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
unordered_map<int, vector<int>> mp;
int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  int n;
  cin >> n;
  for (int t = 1; t <= n; t++) {
    int x, y;
    cin >> x >> y;
    int cnt = 0;
    for (int j = 1; j * j <= x; j++) {
      if (x % j == 0) {
        int ind =
            lower_bound(mp[j].begin(), mp[j].end(), t - y) - mp[j].begin();
        if (ind == mp[j].size()) cnt++;
        mp[j].push_back(t);
        if (j != x / j) {
          ind = lower_bound(mp[x / j].begin(), mp[x / j].end(), t - y) -
                mp[x / j].begin();
          if (ind == mp[x / j].size()) cnt++;
          mp[x / j].push_back(t);
        }
      }
    }
    cout << cnt << '\n';
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
54972 0
48015 1
7114 1
68273 2
53650 4
1716 1
16165 2
96062 5
57750 1
21071 5


(G.2) Fast Input

6
4 0
3 1
5 1
6 2
5 4
10000 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
unordered_map<int, vector<int>> mp; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int t = 1; t <= n; t++) { /* line 9 slow_hit_count: 11, fast_hit_count: 7 */
    int x, y; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> y; /* line 11 slow_hit_count: 10, fast_hit_count: 6 */
    int cnt = 0; /* line 12 slow_hit_count: 10, fast_hit_count: 6 */
    for (int j = 1; j * j <= x; j++) { /* line 13 slow_hit_count: 1901, fast_hit_count: 115 */
      if (x % j == 0) { /* line 14 slow_hit_count: 1891, fast_hit_count: 109 */
        int ind = /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
            lower_bound(mp[j].begin(), mp[j].end(), t - y) - mp[j].begin(); /* line 16 slow_hit_count: 94, fast_hit_count: 20 */
        if (ind == mp[j].size()) cnt++; /* line 17 slow_hit_count: 94, fast_hit_count: 20 */
        mp[j].push_back(t); /* line 18 slow_hit_count: 94, fast_hit_count: 20 */
        if (j != x / j) { /* line 19 slow_hit_count: 94, fast_hit_count: 20 */
          ind = lower_bound(mp[x / j].begin(), mp[x / j].end(), t - y) - /* line 20 slow_hit_count: 94, fast_hit_count: 18 */
                mp[x / j].begin(); /* line 21 slow_hit_count: 94, fast_hit_count: 18 */
          if (ind == mp[x / j].size()) cnt++; /* line 22 slow_hit_count: 94, fast_hit_count: 18 */
          mp[x / j].push_back(t); /* line 23 slow_hit_count: 94, fast_hit_count: 18 */
        } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    cout << cnt << '\n'; /* line 27 slow_hit_count: 10, fast_hit_count: 6 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To analyze the given C program and derive performance-characterizing invariants, we will go through the steps outlined in the task description. Here's a detailed breakdown of the process:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Comparing Line-level Hit Counts:**
   - **Line 13**: The loop checking divisors (`for (int j = 1; j * j <= x; j++)`) has a hit count of 1901 in the slow input versus 115 in the fast input. This indicates a significant increase in iterations for the slow input.
   - **Line 14**: The conditional inside the divisor loop (`if (x % j == 0)`) is hit 1891 times in the slow input, reflecting more divisor checks.
   - **Lines 16, 17, 18**: The `lower_bound` search and subsequent operations are hit 94 times in the slow input compared to 20 times in the fast input. This suggests frequent operations on vectors in the `unordered_map`.

2. **Inferring Interaction with Data Structures:**
   - The loop on line 13 is heavily influenced by the number of divisors of `x`. A larger number of divisors results in more iterations and more frequent access to the vectors stored in the `unordered_map`, which increases execution time.
   - The use of `lower_bound` indicates that the vectors are likely unsorted or require maintaining sorted order, which can be inefficient if the vectors are large or accessed frequently.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, here are the performance-characterizing invariants:

1. **High Number of Divisors:**
   - **Natural Language Invariant**: "If the number `x` has a high number of divisors, the program may perform many redundant calculations, especially if these divisors frequently divide the numbers in the range defined by `xi - yi` to `xi - 1`."
   - **Explanation**: When `x` has many divisors, the loops and checks for each divisor are performed more frequently, which can slow down the execution, especially if the divisor vectors keep increasing in size.

2. **Frequent Access to Data Structures:**
   - **Natural Language Invariant**: "If the number of previous queries involving a divisor increases, the performance may degrade due to excessive searches and insertions in the `unordered_map` vectors."
   - **Explanation**: As the number of queries increases, each divisor's vector in `mp` grows, leading to more time spent in `lower_bound` searches and insertions.

3. **Large Values for `y`:**
   - **Natural Language Invariant**: "When `y` is large relative to the query count `t`, checks involving previous query results become more computationally expensive, especially if many divisors are involved."
   - **Explanation**: A large `y` results in a broader range of previous query indices to check against, which increases the cost of these operations, particularly in combination with many divisors.
   
By implementing checks or optimizations around these conditions, the program can potentially avoid some slow execution patterns. These invariants capture scenarios where either the number of divisors or the use of previous query data significantly affects performance, without relying on specific input values.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little Petya loves looking for numbers' divisors. One day Petya came across the following problem:

You are given n queries in the form "xi yi". For each query Petya should count how many divisors of number xi divide none of the numbers xi - yi, xi - yi + 1, ..., xi - 1. Help him.

Input

The first line contains an integer n (1 ≤ n ≤ 105). Each of the following n lines contain two space-separated integers xi and yi (1 ≤ xi ≤ 105, 0 ≤ yi ≤ i - 1, where i is the query's ordinal number; the numeration starts with 1). 

If yi = 0 for the query, then the answer to the query will be the number of divisors of the number xi. In this case you do not need to take the previous numbers x into consideration.

Output

For each query print the answer on a single line: the number of positive integers k such that <image>

Examples

Input

6
4 0
3 1
5 2
6 2
18 4
10000 3


Output

3
1
1
2
2
22

Note

Let's write out the divisors that give answers for the first 5 queries:

1) 1, 2, 4 

2) 3

3) 5

4) 2, 6

5) 9, 18

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Checkers Based on Invariants

Here are the checkers for the performance-characterizing invariants that we previously derived:

1. **Checker for a High Number of Divisors:**

   ```cpp
   void check_high_divisor_count(int divisorCount) {
       if (divisorCount > 100) { // Assuming 100 as a broad threshold for high divisor count.
           cerr << "Warning: Performance bottleneck condition triggered due to high number of divisors!" << endl;
           abort();
       }
   }
   ```

2. **Checker for Frequent Access to Data Structures:**

   ```cpp
   void check_frequent_access(int vectorSize) {
       if (vectorSize > 100) { // Assuming 100 as a threshold for large vector size.
           cerr << "Warning: Performance bottleneck condition triggered due to frequent access to large data structures!" << endl;
           abort();
       }
   }
   ```

3. **Checker for Large Values of `y`:**

   ```cpp
   void check_large_y(int y, int queryIndex) {
       if (y > queryIndex / 2) { // Assuming if y is more than half the query index, it's large.
           cerr << "Warning: Performance bottleneck condition triggered due to large 'y' value!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrating Checkers into the Original C++ Code

Now we integrate these checkers into the provided C++ code:

```cpp
#include <bits/stdc++.h>
using namespace std;

unordered_map<int, vector<int>> mp;

void check_high_divisor_count(int divisorCount) {
    if (divisorCount > 100) { // Assuming 100 as a broad threshold for high divisor count.
        cerr << "Warning: Performance bottleneck condition triggered due to high number of divisors!" << endl;
        abort();
    }
}

void check_frequent_access(int vectorSize) {
    if (vectorSize > 100) { // Assuming 100 as a threshold for large vector size.
        cerr << "Warning: Performance bottleneck condition triggered due to frequent access to large data structures!" << endl;
        abort();
    }
}

void check_large_y(int y, int queryIndex) {
    if (y > queryIndex / 2) { // Assuming if y is more than half the query index, it's large.
        cerr << "Warning: Performance bottleneck condition triggered due to large 'y' value!" << endl;
        abort();
    }
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n;
    cin >> n;
    for (int t = 1; t <= n; t++) {
        int x, y;
        cin >> x >> y;

        // Check for large y
        check_large_y(y, t);

        int cnt = 0;
        int divisorCount = 0; // To keep track of the number of divisors

        for (int j = 1; j * j <= x; j++) {
            if (x % j == 0) {
                divisorCount++;
                int ind = lower_bound(mp[j].begin(), mp[j].end(), t - y) - mp[j].begin();
                if (ind == mp[j].size()) cnt++;
                mp[j].push_back(t);

                // Check frequent access
                check_frequent_access(mp[j].size());

                if (j != x / j) {
                    divisorCount++;
                    ind = lower_bound(mp[x / j].begin(), mp[x / j].end(), t - y) - mp[x / j].begin();
                    if (ind == mp[x / j].size()) cnt++;
                    mp[x / j].push_back(t);

                    // Check frequent access
                    check_frequent_access(mp[x / j].size());
                }
            }
        }

        // Check for high number of divisors
        check_high_divisor_count(divisorCount);

        cout << cnt << '\n';
    }
    return 0;
}
```

### Comments on Integration

- **Placement of Checks:**
  - The `check_large_y` function is called right after reading the input values, `x` and `y`, to ensure that the calculation doesn't proceed if `y` is too large.
  - The `check_high_divisor_count` is placed after the divisor counting loop to monitor if the number of divisors becomes unusually high.
  - The `check_frequent_access` function is called every time a vector from the `unordered_map` is accessed, ensuring any performance degradation due to large vector sizes is detected early.
  
- **Assumptions:**
  - Thresholds for checks (`divisorCount > 100`, `vectorSize > 100`, `y > queryIndex / 2`) are chosen based on the potential for performance degradation as described in the invariants.
  
The integrated checks will help a fuzzer or tester identify scenarios where performance bottlenecks could occur, without adding significant overhead to normal operation.

