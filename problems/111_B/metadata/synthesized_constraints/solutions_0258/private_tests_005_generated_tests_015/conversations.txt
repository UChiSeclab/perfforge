system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little Petya loves looking for numbers' divisors. One day Petya came across the following problem:

You are given n queries in the form "xi yi". For each query Petya should count how many divisors of number xi divide none of the numbers xi - yi, xi - yi + 1, ..., xi - 1. Help him.

Input

The first line contains an integer n (1 ≤ n ≤ 105). Each of the following n lines contain two space-separated integers xi and yi (1 ≤ xi ≤ 105, 0 ≤ yi ≤ i - 1, where i is the query's ordinal number; the numeration starts with 1). 

If yi = 0 for the query, then the answer to the query will be the number of divisors of the number xi. In this case you do not need to take the previous numbers x into consideration.

Output

For each query print the answer on a single line: the number of positive integers k such that <image>

Examples

Input

6
4 0
3 1
5 2
6 2
18 4
10000 3


Output

3
1
1
2
2
22

Note

Let's write out the divisors that give answers for the first 5 queries:

1) 1, 2, 4 

2) 3

3) 5

4) 2, 6

5) 9, 18

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
unordered_map<int, set<int> > mm;
int main(int argc, char const *argv[]) {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  int n;
  cin >> n;
  for (int i = 0; i < n; i++) {
    int x, y;
    cin >> x >> y;
    set<int> fact;
    int r = i - y, ans = 0;
    for (int j = 1; j * j <= x; j++) {
      if (x % j == 0) {
        fact.insert(j);
        if (x / j != j) fact.insert(x / j);
      }
    }
    if (y == 0)
      cout << (int)fact.size() << '\n';
    else {
      int ans = 0;
      for (auto m : fact) {
        int r = i - y;
        auto it = mm[m].lower_bound(r);
        if (it != mm[m].end() && *it >= r) continue;
        ans++;
      }
      cout << ans << '\n';
    }
    for (auto m : fact) mm[m].insert(i);
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
54972 0
48015 1
7114 1
68273 2
53650 4
1716 1
16165 2
96062 5
57750 1
21071 5


(G.2) Fast Input

6
4 0
3 1
5 1
6 2
5 4
10000 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
unordered_map<int, set<int> > mm; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int main(int argc, char const *argv[]) { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 9 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 10 slow_hit_count: 11, fast_hit_count: 7 */
    int x, y; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> y; /* line 12 slow_hit_count: 10, fast_hit_count: 6 */
    set<int> fact; /* line 13 slow_hit_count: 20, fast_hit_count: 12 */
    int r = i - y, ans = 0; /* line 14 slow_hit_count: 10, fast_hit_count: 6 */
    for (int j = 1; j * j <= x; j++) { /* line 15 slow_hit_count: 1901, fast_hit_count: 115 */
      if (x % j == 0) { /* line 16 slow_hit_count: 1891, fast_hit_count: 109 */
        fact.insert(j); /* line 17 slow_hit_count: 94, fast_hit_count: 20 */
        if (x / j != j) fact.insert(x / j); /* line 18 slow_hit_count: 94, fast_hit_count: 20 */
      } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    if (y == 0) /* line 21 slow_hit_count: 10, fast_hit_count: 6 */
      cout << (int)fact.size() << '\n'; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
    else { /* line 23 slow_hit_count: 0, fast_hit_count: 0 */
      int ans = 0; /* line 24 slow_hit_count: 9, fast_hit_count: 5 */
      for (auto m : fact) { /* line 25 slow_hit_count: 173, fast_hit_count: 40 */
        int r = i - y; /* line 26 slow_hit_count: 164, fast_hit_count: 35 */
        auto it = mm[m].lower_bound(r); /* line 27 slow_hit_count: 164, fast_hit_count: 35 */
        if (it != mm[m].end() && *it >= r) continue; /* line 28 slow_hit_count: 164, fast_hit_count: 35 */
        ans++; /* line 29 slow_hit_count: 147, fast_hit_count: 26 */
      } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
      cout << ans << '\n'; /* line 31 slow_hit_count: 9, fast_hit_count: 5 */
    } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
    for (auto m : fact) mm[m].insert(i); /* line 33 slow_hit_count: 198, fast_hit_count: 44 */
  } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 35 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 36 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To identify the performance bottlenecks in the provided C code, we need to analyze the line-level hit counts for both fast and slow inputs. Based on the problem statement and the code, here's how we can proceed:

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Line-level hit count analysis**:
   - **Line 15** (`for (int j = 1; j * j <= x; j++)`): This loop is executed 1901 times for the slow input, compared to 115 times for the fast input. This indicates frequent divisor computations for large values of `x`.
   - **Line 25** (`for (auto m : fact) {`): Executed 173 times for the slow input, compared to 40 times for the fast input. This loop iterates over the set of factors and seems to be a bottleneck.
   - **Line 33** (`for (auto m : fact) mm[m].insert(i);`): This line is hit 198 times on the slow input, compared to 44 times on the fast input. It updates a global map, which can become costly if the data structure grows large.

2. **Inference**:
   - The primary slowdown seems to be due to the computation of divisors (lines 15-18) and the frequent updates to the `unordered_map` (line 33).
   - The nested loop on line 25, which iterates over the set of divisors, indicates a combinatorial growth in complexity when more divisors are found.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the above analysis, we can derive the following performance-characterizing invariants in natural language:

1. **Invariant on Divisor Computation**:
   - **Natural Language Description**: "If the number `x` has many divisors, especially large prime factors leading to many iterations in the divisor computation loop, the program may slow down significantly."
   - **Explanation**: The bottleneck is the loop that calculates divisors. When `x` is large or has a high number of divisors, it increases computation cycles, impacting performance.

2. **Invariant on Map Updates**:
   - **Natural Language Description**: "When many factors are found for number `x` and stored in global data structures, the cumulative overhead of updates can degrade performance."
   - **Explanation**: Frequent updates to the `unordered_map` for each divisor result in overhead. If the set of factors is large, this adds significant time complexity.

3. **Invariant on Prior Divisor Checks**:
   - **Natural Language Description**: "If the divisor set for a number `x` is large and used frequently to check against previous divisor existence in the map, it may slow down computation."
   - **Explanation**: The loop checking previous divisors (line 25) can become costly if the number of divisors and entries in the map grow.

### Conclusion

These natural language invariants capture conditions leading to the observed performance degradation without relying on specific input values. They align with the constraints, namely, the size and properties of input numbers, and suggest where computational effort increases disproportionately. By identifying these critical conditions, we can guide optimizations or refactorings to avoid these slow-path scenarios.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little Petya loves looking for numbers' divisors. One day Petya came across the following problem:

You are given n queries in the form "xi yi". For each query Petya should count how many divisors of number xi divide none of the numbers xi - yi, xi - yi + 1, ..., xi - 1. Help him.

Input

The first line contains an integer n (1 ≤ n ≤ 105). Each of the following n lines contain two space-separated integers xi and yi (1 ≤ xi ≤ 105, 0 ≤ yi ≤ i - 1, where i is the query's ordinal number; the numeration starts with 1). 

If yi = 0 for the query, then the answer to the query will be the number of divisors of the number xi. In this case you do not need to take the previous numbers x into consideration.

Output

For each query print the answer on a single line: the number of positive integers k such that <image>

Examples

Input

6
4 0
3 1
5 2
6 2
18 4
10000 3


Output

3
1
1
2
2
22

Note

Let's write out the divisors that give answers for the first 5 queries:

1) 1, 2, 4 

2) 3

3) 5

4) 2, 6

5) 9, 18

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Performance-Characterizing Invariants as C++ Checkers

Based on the previously derived natural language invariants, here are the corresponding C++ checker implementations:

1. **Checker for Divisor Computation**:
   - This checker ensures that we don't have a number with too many divisors, indicating potential slow performance.

```cpp
void check_divisor_count_invariant(int divisorCount) {
    if (divisorCount > 1000) { // Arbitrary threshold based on potential high divisor counts
        cerr << "Warning: Performance bottleneck condition triggered due to high divisor count!" << endl;
        abort();
    }
}
```

2. **Checker for Map Updates**:
   - This checker ensures the map isn't excessively large, which would impact performance.

```cpp
void check_map_size_invariant(const unordered_map<int, set<int>>& mm) {
    if (mm.size() > 50000) { // Arbitrary threshold based on potential growth
        cerr << "Warning: Performance bottleneck condition triggered due to large map size!" << endl;
        abort();
    }
}
```

3. **Checker for Prior Divisor Checks**:
   - This checker ensures the divisor checks don't become too expensive.

```cpp
void check_prior_divisor_checks(size_t factorSize, const set<int>& fact) {
    if (factorSize > 500) { // Arbitrary threshold for factor size
        cerr << "Warning: Performance bottleneck condition triggered due to extensive prior divisor checks!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Code

Now, let's integrate these checkers into the original program:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker for high divisor count
void check_divisor_count_invariant(int divisorCount) {
    if (divisorCount > 1000) { // Arbitrary threshold based on potential high divisor counts
        cerr << "Warning: Performance bottleneck condition triggered due to high divisor count!" << endl;
        abort();
    }
}

// Checker for large map size
void check_map_size_invariant(const unordered_map<int, set<int>>& mm) {
    if (mm.size() > 50000) { // Arbitrary threshold based on potential growth
        cerr << "Warning: Performance bottleneck condition triggered due to large map size!" << endl;
        abort();
    }
}

// Checker for extensive prior divisor checks
void check_prior_divisor_checks(size_t factorSize, const set<int>& fact) {
    if (factorSize > 500) { // Arbitrary threshold for factor size
        cerr << "Warning: Performance bottleneck condition triggered due to extensive prior divisor checks!" << endl;
        abort();
    }
}

unordered_map<int, set<int> > mm;

int main(int argc, char const *argv[]) {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    int n;
    cin >> n;
    for (int i = 0; i < n; i++) {
        int x, y;
        cin >> x >> y;
        set<int> fact;

        int r = i - y, ans = 0;
        
        // Calculate divisors and check the count
        for (int j = 1; j * j <= x; j++) {
            if (x % j == 0) {
                fact.insert(j);
                if (x / j != j) fact.insert(x / j);
            }
        }

        check_divisor_count_invariant(fact.size()); // Check divisor count

        if (y == 0) {
            cout << (int)fact.size() << '\n';
        } else {
            int ans = 0;
            check_prior_divisor_checks(fact.size(), fact); // Check prior divisor usage

            for (auto m : fact) {
                int r = i - y;
                auto it = mm[m].lower_bound(r);
                if (it != mm[m].end() && *it >= r) continue;
                ans++;
            }
            cout << ans << '\n';
        }

        for (auto m : fact) mm[m].insert(i);

        check_map_size_invariant(mm); // Check map size
    }
    return 0;
}
```

### Explanation

- **Divisor Count Check**: This check is placed right after the divisors are calculated to ensure they don't exceed a threshold that would slow down the performance.
- **Map Size Check**: This check is placed after updating the map to avoid excessive memory consumption.
- **Prior Divisor Check**: This check ensures that the set of factors doesn't grow too large, causing lengthy iterations. 

These checkers help identify performance bottlenecks during runtime, allowing a fuzzer or developer to detect problematic input scenarios.

