system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little Petya loves looking for numbers' divisors. One day Petya came across the following problem:

You are given n queries in the form "xi yi". For each query Petya should count how many divisors of number xi divide none of the numbers xi - yi, xi - yi + 1, ..., xi - 1. Help him.

Input

The first line contains an integer n (1 ≤ n ≤ 105). Each of the following n lines contain two space-separated integers xi and yi (1 ≤ xi ≤ 105, 0 ≤ yi ≤ i - 1, where i is the query's ordinal number; the numeration starts with 1). 

If yi = 0 for the query, then the answer to the query will be the number of divisors of the number xi. In this case you do not need to take the previous numbers x into consideration.

Output

For each query print the answer on a single line: the number of positive integers k such that <image>

Examples

Input

6
4 0
3 1
5 2
6 2
18 4
10000 3


Output

3
1
1
2
2
22

Note

Let's write out the divisors that give answers for the first 5 queries:

1) 1, 2, 4 

2) 3

3) 5

4) 2, 6

5) 9, 18

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
int n;
int x[100001], y[100001];
set<pair<int, int> > comp;
int main() {
  comp.clear();
  cin >> n;
  for (int i = 0; i < (int)(n); i++) cin >> x[i + 1] >> y[i + 1];
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j < 318; j++) {
      if (x[i] % j == 0) {
        comp.insert(make_pair(j, i));
        int c = x[i] / j;
        comp.insert(make_pair(c, i));
      }
    }
  }
  for (int i = 1; i <= n; i++) {
    int ans = 0;
    for (int j = 1; j < 318; j++) {
      if (x[i] % j) continue;
      if (x[i] > 1 && j == x[i]) break;
      if ((long long)j * (long long)j > x[i]) break;
      set<pair<int, int> >::iterator it = comp.lower_bound(make_pair(j, i));
      if (it == comp.begin())
        ans++;
      else {
        it--;
        if (it->first != j || it->second < i - y[i]) {
          ans++;
        }
      }
      if ((long long)j * (long long)j >= x[i]) break;
      int c = x[i] / j;
      if (c == j) continue;
      it = comp.lower_bound(make_pair(c, i));
      if (it == comp.begin())
        ans++;
      else {
        it--;
        if (it->first != c || it->second < i - y[i]) {
          ans++;
        }
      }
    }
    cout << ans << endl;
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12
91771 0
75584 1
95355 1
60669 1
92776 0
37793 3
38802 4
14560 0
80296 5
55003 8
91092 3
55782 8


(G.2) Fast Input

6
4 0
3 1
5 1
6 2
18 0
10000 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int x[100001], y[100001]; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
set<pair<int, int> > comp; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  comp.clear(); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cin >> n; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < (int)(n); i++) cin >> x[i + 1] >> y[i + 1]; /* line 9 slow_hit_count: 13, fast_hit_count: 7 */
  for (int i = 1; i <= n; i++) { /* line 10 slow_hit_count: 13, fast_hit_count: 7 */
    for (int j = 1; j < 318; j++) { /* line 11 slow_hit_count: 3816, fast_hit_count: 1908 */
      if (x[i] % j == 0) { /* line 12 slow_hit_count: 3804, fast_hit_count: 1902 */
        comp.insert(make_pair(j, i)); /* line 13 slow_hit_count: 97, fast_hit_count: 33 */
        int c = x[i] / j; /* line 14 slow_hit_count: 97, fast_hit_count: 33 */
        comp.insert(make_pair(c, i)); /* line 15 slow_hit_count: 97, fast_hit_count: 33 */
      } /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 17 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 18 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 1; i <= n; i++) { /* line 19 slow_hit_count: 13, fast_hit_count: 7 */
    int ans = 0; /* line 20 slow_hit_count: 12, fast_hit_count: 6 */
    for (int j = 1; j < 318; j++) { /* line 21 slow_hit_count: 3533, fast_hit_count: 119 */
      if (x[i] % j) continue; /* line 22 slow_hit_count: 3523, fast_hit_count: 119 */
      if (x[i] > 1 && j == x[i]) break; /* line 23 slow_hit_count: 92, fast_hit_count: 30 */
      if ((long long)j * (long long)j > x[i]) break; /* line 24 slow_hit_count: 90, fast_hit_count: 24 */
      set<pair<int, int> >::iterator it = comp.lower_bound(make_pair(j, i)); /* line 25 slow_hit_count: 88, fast_hit_count: 22 */
      if (it == comp.begin()) /* line 26 slow_hit_count: 88, fast_hit_count: 22 */
        ans++; /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
      else { /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
        it--; /* line 29 slow_hit_count: 87, fast_hit_count: 21 */
        if (it->first != j || it->second < i - y[i]) { /* line 30 slow_hit_count: 87, fast_hit_count: 21 */
          ans++; /* line 31 slow_hit_count: 62, fast_hit_count: 15 */
        } /* line 32 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
      if ((long long)j * (long long)j >= x[i]) break; /* line 34 slow_hit_count: 88, fast_hit_count: 22 */
      int c = x[i] / j; /* line 35 slow_hit_count: 88, fast_hit_count: 20 */
      if (c == j) continue; /* line 36 slow_hit_count: 88, fast_hit_count: 20 */
      it = comp.lower_bound(make_pair(c, i)); /* line 37 slow_hit_count: 88, fast_hit_count: 20 */
      if (it == comp.begin()) /* line 38 slow_hit_count: 88, fast_hit_count: 20 */
        ans++; /* line 39 slow_hit_count: 0, fast_hit_count: 0 */
      else { /* line 40 slow_hit_count: 0, fast_hit_count: 0 */
        it--; /* line 41 slow_hit_count: 88, fast_hit_count: 20 */
        if (it->first != c || it->second < i - y[i]) { /* line 42 slow_hit_count: 88, fast_hit_count: 20 */
          ans++; /* line 43 slow_hit_count: 88, fast_hit_count: 19 */
        } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 45 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 46 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans << endl; /* line 47 slow_hit_count: 12, fast_hit_count: 6 */
  } /* line 48 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 49 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 50 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ## Phase 1: Identify Expensive or Inefficient Code Segments

To identify code segments responsible for the slowdown, let's compare the line-level hit counts between the slow and fast runs:

1. **Nested Loop for Compiling Divisors (Lines 11-15)**:
   - Slow input: `3816` hits
   - Fast input: `1908` hits
   - The loop runs up to 318 iterations for each query to find divisors of `x[i]`. This indicates that the divisors are computed for more numbers or more extensively in the slow case.

2. **Checking Divisors Against Previous Queries (Lines 21-43)**:
   - Slow input: `3533` hits (Line 21)
   - Fast input: `119` hits (Line 21)
   - This loop is significantly more active in the slow run, suggesting either more divisors to check or more complex conditions involving previous queries.

3. **Use of `set::lower_bound` and Set Iterations (Lines 25-31, 37-43)**:
   - Hits involving `set::lower_bound` are much higher in the slow input, e.g., Line 25 (`88` vs. `22`) and Line 37 (`88` vs. `20`).
   - These operations imply the slow run is processing more entries or doing more comparisons to determine unique divisors.

## Phase 2: Derive Performance-Characterizing Invariants

From the observations, we can derive performance-characterizing invariants that describe conditions under which the program slows down:

1. **High Number of Divisors**:
   - Natural Language Invariant: "If `x[i]` has many divisors, especially if `x[i]` is a large composite number, the program may slow down due to exhaustive divisor checks."
   - Explanation: Large composite numbers have more divisors leading to more set operations.

2. **Repeated Divisor Checks Against Large Ranges**:
   - Natural Language Invariant: "When `y[i]` is large relative to `i`, the range of numbers (`x[i] - y[i]` to `x[i] - 1`) is extensive, leading to more frequent and redundant divisor checks in previous queries."
   - Explanation: Larger `y[i]` values increase the range size, adding complexity to checks against previous entries.

3. **Frequent Set Operations**:
   - Natural Language Invariant: "If the number of distinct divisor checks is high (due to large `x[i]` values or repeated queries with similar divisor characteristics), the set operations become a bottleneck."
   - Explanation: Set operations grow with the number of entries and complexity of the queries.

These invariants capture the essence of the slow paths in the code, relating specifically to the characteristics of input numbers and how they interact with the algorithm's structure. By focusing on these conditions, you can anticipate and potentially optimize the problematic sections to handle large inputs more efficiently.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little Petya loves looking for numbers' divisors. One day Petya came across the following problem:

You are given n queries in the form "xi yi". For each query Petya should count how many divisors of number xi divide none of the numbers xi - yi, xi - yi + 1, ..., xi - 1. Help him.

Input

The first line contains an integer n (1 ≤ n ≤ 105). Each of the following n lines contain two space-separated integers xi and yi (1 ≤ xi ≤ 105, 0 ≤ yi ≤ i - 1, where i is the query's ordinal number; the numeration starts with 1). 

If yi = 0 for the query, then the answer to the query will be the number of divisors of the number xi. In this case you do not need to take the previous numbers x into consideration.

Output

For each query print the answer on a single line: the number of positive integers k such that <image>

Examples

Input

6
4 0
3 1
5 2
6 2
18 4
10000 3


Output

3
1
1
2
2
22

Note

Let's write out the divisors that give answers for the first 5 queries:

1) 1, 2, 4 

2) 3

3) 5

4) 2, 6

5) 9, 18

Solution (C++ code):
{solution}


assistant: ## Phase 3: Implement the Natural Language Invariants in C++

Here are the checks implemented from the natural language invariants derived previously:

1. **High Number of Divisors**:
   ```cpp
   void check_divisor_invariant(int divisorCount, int threshold = 100) {
       if (divisorCount > threshold) {
           cerr << "Warning: High number of divisors leading to potential slowdown!" << endl;
           abort();
       }
   }
   ```

2. **Repeated Divisor Checks Against Large Ranges**:
   ```cpp
   void check_range_invariant(int yi, int i, int threshold = 50) {
       if (yi > threshold) {
           cerr << "Warning: Large range for divisor checks detected!" << endl;
           abort();
       }
   }
   ```

3. **Frequent Set Operations**:
   ```cpp
   void check_set_invariant(int setOperations, int threshold = 1000) {
       if (setOperations > threshold) {
           cerr << "Warning: Excessive set operations detected - potential bottleneck!" << endl;
           abort();
       }
   }
   ```

## Phase 4: Integrate Checkers into the Original C++ Code

Here is the instrumented version of the given C++ code with the performance checkers integrated:

```cpp
#include <bits/stdc++.h>
using namespace std;

int n;
int x[100001], y[100001];
set<pair<int, int>> comp;

// Checker functions
void check_divisor_invariant(int divisorCount, int threshold = 100) {
    if (divisorCount > threshold) {
        cerr << "Warning: High number of divisors leading to potential slowdown!" << endl;
        abort();
    }
}

void check_range_invariant(int yi, int i, int threshold = 50) {
    if (yi > threshold) {
        cerr << "Warning: Large range for divisor checks detected!" << endl;
        abort();
    }
}

void check_set_invariant(int setOperations, int threshold = 1000) {
    if (setOperations > threshold) {
        cerr << "Warning: Excessive set operations detected - potential bottleneck!" << endl;
        abort();
    }
}

int main() {
    comp.clear();
    cin >> n;
    for (int i = 0; i < (int)(n); i++) {
        cin >> x[i + 1] >> y[i + 1];
        // Check for large range
        check_range_invariant(y[i + 1], i + 1);
    }
    int totalSetOperations = 0; // Track set operations

    for (int i = 1; i <= n; i++) {
        int divisorCount = 0;
        for (int j = 1; j < 318; j++) {
            if (x[i] % j == 0) {
                comp.insert(make_pair(j, i));
                int c = x[i] / j;
                comp.insert(make_pair(c, i));
                divisorCount += 2; // Increment for both divisors j and c
            }
        }
        // Check for high number of divisors
        check_divisor_invariant(divisorCount);

        int ans = 0;
        for (int j = 1; j < 318; j++) {
            if (x[i] % j) continue;
            if (x[i] > 1 && j == x[i]) break;
            if ((long long)j * (long long)j > x[i]) break;
            set<pair<int, int>>::iterator it = comp.lower_bound(make_pair(j, i));
            ++totalSetOperations; // Count the set operation

            if (it == comp.begin())
                ans++;
            else {
                it--;
                if (it->first != j || it->second < i - y[i]) {
                    ans++;
                }
            }
            if ((long long)j * (long long)j >= x[i]) break;
            int c = x[i] / j;
            if (c == j) continue;
            it = comp.lower_bound(make_pair(c, i));
            ++totalSetOperations; // Count the set operation

            if (it == comp.begin())
                ans++;
            else {
                it--;
                if (it->first != c || it->second < i - y[i]) {
                    ans++;
                }
            }
        }
        cout << ans << endl;
    }
    // Check for excessive set operations
    check_set_invariant(totalSetOperations);

    return 0;
}
```

### Explanation

- **Divisor Check**: After computing divisors, the program checks if the number exceeds a threshold (`100` in this case).
- **Range Check**: After reading each input, check if `yi` creates a large range.
- **Set Operations Check**: Keeps track of the number of `set` operations and checks if it exceeds a threshold (`1000`).

These checks are strategically placed to avoid unnecessary overhead and to catch performance bottlenecks effectively.

