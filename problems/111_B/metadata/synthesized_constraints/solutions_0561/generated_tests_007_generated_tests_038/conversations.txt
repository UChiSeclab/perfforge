system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little Petya loves looking for numbers' divisors. One day Petya came across the following problem:

You are given n queries in the form "xi yi". For each query Petya should count how many divisors of number xi divide none of the numbers xi - yi, xi - yi + 1, ..., xi - 1. Help him.

Input

The first line contains an integer n (1 ≤ n ≤ 105). Each of the following n lines contain two space-separated integers xi and yi (1 ≤ xi ≤ 105, 0 ≤ yi ≤ i - 1, where i is the query's ordinal number; the numeration starts with 1). 

If yi = 0 for the query, then the answer to the query will be the number of divisors of the number xi. In this case you do not need to take the previous numbers x into consideration.

Output

For each query print the answer on a single line: the number of positive integers k such that <image>

Examples

Input

6
4 0
3 1
5 2
6 2
18 4
10000 3


Output

3
1
1
2
2
22

Note

Let's write out the divisors that give answers for the first 5 queries:

1) 1, 2, 4 

2) 3

3) 5

4) 2, 6

5) 9, 18

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
using namespace std;
map<int, set<int> > m;
int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  int n;
  cin >> n;
  for (int i = 0; i < n; ++i) {
    int x, y;
    cin >> x >> y;
    int ans = 0;
    for (int j = 1; j * j <= x; ++j) {
      if (x % j == 0 && j * j != x) {
        if (m[j].upper_bound(i - y - 1) == m[j].end()) {
          ++ans;
        }
        if (m[x / j].upper_bound(i - y - 1) == m[x / j].end()) {
          ++ans;
        }
      } else if (x % j == 0) {
        if (m[j].upper_bound(i - y - 1) == m[j].end()) {
          ++ans;
        }
      }
    }
    for (int j = 1; j * j <= x; ++j) {
      if (x % j == 0) {
        m[j].insert(i);
        m[x / j].insert(i);
      }
    }
    cout << ans << '\n';
  }
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

12
91771 0
75584 1
95355 1
60669 1
92776 0
37793 3
38802 4
14560 0
80296 5
55003 8
91092 3
55782 8


(G.2) Fast Input

6
4 0
3 1
5 1
6 2
18 0
10000 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
map<int, set<int> > m; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
int main() { /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 7 slow_hit_count: 1, fast_hit_count: 1 */
  cout.tie(0); /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 10 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; ++i) { /* line 11 slow_hit_count: 13, fast_hit_count: 7 */
    int x, y; /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> y; /* line 13 slow_hit_count: 12, fast_hit_count: 6 */
    int ans = 0; /* line 14 slow_hit_count: 12, fast_hit_count: 6 */
    for (int j = 1; j * j <= x; ++j) { /* line 15 slow_hit_count: 3010, fast_hit_count: 117 */
      if (x % j == 0 && j * j != x) { /* line 16 slow_hit_count: 2998, fast_hit_count: 111 */
        if (m[j].upper_bound(i - y - 1) == m[j].end()) { /* line 17 slow_hit_count: 88, fast_hit_count: 20 */
          ++ans; /* line 18 slow_hit_count: 63, fast_hit_count: 14 */
        } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
        if (m[x / j].upper_bound(i - y - 1) == m[x / j].end()) { /* line 20 slow_hit_count: 88, fast_hit_count: 20 */
          ++ans; /* line 21 slow_hit_count: 88, fast_hit_count: 19 */
        } /* line 22 slow_hit_count: 0, fast_hit_count: 0 */
      } else if (x % j == 0) { /* line 23 slow_hit_count: 2910, fast_hit_count: 91 */
        if (m[j].upper_bound(i - y - 1) == m[j].end()) { /* line 24 slow_hit_count: 0, fast_hit_count: 2 */
          ++ans; /* line 25 slow_hit_count: 0, fast_hit_count: 2 */
        } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 27 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
    for (int j = 1; j * j <= x; ++j) { /* line 29 slow_hit_count: 3010, fast_hit_count: 117 */
      if (x % j == 0) { /* line 30 slow_hit_count: 2998, fast_hit_count: 111 */
        m[j].insert(i); /* line 31 slow_hit_count: 88, fast_hit_count: 22 */
        m[x / j].insert(i); /* line 32 slow_hit_count: 88, fast_hit_count: 22 */
      } /* line 33 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    cout << ans << '\n'; /* line 35 slow_hit_count: 12, fast_hit_count: 6 */
  } /* line 36 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 37 slow_hit_count: 1, fast_hit_count: 1 */


assistant: ### Phase 1: Identify Expensive or Inefficient Code Segments

**Analysis of Hit Counts:**
1. **Loop with High Iteration Count:**
   - Line 15 (`for (int j = 1; j * j <= x; ++j)`) shows a significantly higher hit count for the slow input (3010) compared to the fast input (117). This indicates that computing divisors (based on the value of `x`) is a potential bottleneck.
   
2. **Expensive Conditional Checks:**
   - Lines 17 and 20 (`if (m[j].upper_bound(i - y - 1) == m[j].end())`) have moderately higher hit counts. These lines involve set operations which can be expensive, especially when frequently executed.

3. **Increased Hits in Nested Conditional:**
   - The conditional block at lines 16-18 and lines 20-21 also show more hits in the slow input. This indicates repeated divisor processing which can stack up in execution time.

**Factors Contributing to Slow Execution:**
- The number of divisors of `x` is crucial, as higher divisors lead to more iterations in the loop.
- The map `m` and its set operations are performed frequently, which can become costly as the map grows in size due to multiple queries.

### Phase 2: Derive Performance-Characterizing Invariants

**Natural Language Performance Invariants:**

1. **High Divisor Count Influence:**
   - *Invariant:* "If the number `x` has a high number of divisors, the program might slow down significantly due to increased iterations in the divisor calculation loop."
   - *Explanation:* Since the loop at line 15 iterates up to the square root of `x`, a larger or more composite `x` increases the loop's workload.

2. **Repeated Set Operations:**
   - *Invariant:* "When the divisor count is high, repeated set operations for each divisor can slow down performance, especially if the `upper_bound` checks frequently return non-end iterators."
   - *Explanation:* Each divisor results in a set operation, which becomes costly as the number of operations increases.

3. **Frequent Map Updates:**
   - *Invariant:* "Frequent updates and checks on the map `m` with a growing number of entries can degrade performance, particularly when `i - y` leads to non-trivial set sizes."
   - *Explanation:* As `n` grows, the complexity of managing and querying the map increases due to more stored indices.

**Conclusion:**
The performance issues primarily stem from the loop iterations based on divisors and expensive set operations. The complexity rises with more composite numbers and frequent modifications to the map and its sets. Future inputs with similar characteristics are likely to experience slowdowns if these conditions are met.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little Petya loves looking for numbers' divisors. One day Petya came across the following problem:

You are given n queries in the form "xi yi". For each query Petya should count how many divisors of number xi divide none of the numbers xi - yi, xi - yi + 1, ..., xi - 1. Help him.

Input

The first line contains an integer n (1 ≤ n ≤ 105). Each of the following n lines contain two space-separated integers xi and yi (1 ≤ xi ≤ 105, 0 ≤ yi ≤ i - 1, where i is the query's ordinal number; the numeration starts with 1). 

If yi = 0 for the query, then the answer to the query will be the number of divisors of the number xi. In this case you do not need to take the previous numbers x into consideration.

Output

For each query print the answer on a single line: the number of positive integers k such that <image>

Examples

Input

6
4 0
3 1
5 2
6 2
18 4
10000 3


Output

3
1
1
2
2
22

Note

Let's write out the divisors that give answers for the first 5 queries:

1) 1, 2, 4 

2) 3

3) 5

4) 2, 6

5) 9, 18

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing Invariants as Runtime Checks in C++

Based on the performance-characterizing invariants described earlier, here is how you can implement them as runtime checks in C++. These checks will help identify potential bottlenecks during execution:

1. **High Divisor Count Influence:**
   - We can introduce a check that warns if a number `x` has a large number of divisors, which affects loop execution.

```cpp
void check_divisor_count_invariant(int x, int divisor_count) {
    if (divisor_count > 100) { // Threshold based on reasonable divisor count for large `x`
        cerr << "Warning: High divisor count for x = " << x << ", potential slow execution!" << endl;
        abort();
    }
}
```

2. **Repeated Set Operations:**
   - Check if the set operations are frequently executed for a large number of divisors.

```cpp
void check_set_operation_invariant(int set_operations) {
    if (set_operations > 1000) { // Threshold indicating excessive set operations
        cerr << "Warning: Excessive set operations, potential performance degradation!" << endl;
        abort();
    }
}
```

3. **Frequent Map Updates:**
   - Insert a check to ensure the size of the map `m` doesn’t grow too large, impacting performance.

```cpp
void check_map_size_invariant(const map<int, set<int>>& m) {
    if (m.size() > 1000) { // Sample threshold for map size
        cerr << "Warning: Large map size, potential slowdown!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating the Checks into the Original Program

Here is the instrumented C++ code with the implemented checks:

```cpp
#include <bits/stdc++.h>
using namespace std;

// Function to check high divisor count
void check_divisor_count_invariant(int x, int divisor_count) {
    if (divisor_count > 100) { // Threshold based on reasonable divisor count for large `x`
        cerr << "Warning: High divisor count for x = " << x << ", potential slow execution!" << endl;
        abort();
    }
}

// Function to check excessive set operations
void check_set_operation_invariant(int set_operations) {
    if (set_operations > 1000) { // Threshold indicating excessive set operations
        cerr << "Warning: Excessive set operations, potential performance degradation!" << endl;
        abort();
    }
}

// Function to check large map size
void check_map_size_invariant(const map<int, set<int>>& m) {
    if (m.size() > 1000) { // Sample threshold for map size
        cerr << "Warning: Large map size, potential slowdown!" << endl;
        abort();
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin >> n;
    map<int, set<int>> m;
    for (int i = 0; i < n; ++i) {
        int x, y;
        cin >> x >> y;
        int ans = 0;
        int divisor_count = 0;
        int set_operations = 0;
        for (int j = 1; j * j <= x; ++j) {
            if (x % j == 0) {
                ++divisor_count;
                if (j * j != x) {
                    ++divisor_count;
                }
                if (m[j].upper_bound(i - y - 1) == m[j].end()) {
                    ++ans;
                    ++set_operations;
                }
                if (j * j != x && m[x / j].upper_bound(i - y - 1) == m[x / j].end()) {
                    ++ans;
                    ++set_operations;
                }
            }
        }
        check_divisor_count_invariant(x, divisor_count); // Check for high divisor count
        check_set_operation_invariant(set_operations);   // Check for excessive set operations

        for (int j = 1; j * j <= x; ++j) {
            if (x % j == 0) {
                m[j].insert(i);
                m[x / j].insert(i);
            }
        }
        
        check_map_size_invariant(m); // Check for large map size
        
        cout << ans << '\n';
    }
}
```

### Explanation:
- **Divisor Count Check:** Before executing operations with a divisor, this check identifies if a number has an unusually high divisor count, indicating potential performance issues.
- **Set Operation Check:** After processing possible operations on the set, this check ensures that the number of operations doesn’t become excessive.
- **Map Size Check:** This check is placed after updating the map to ensure that its size doesn’t become a limiting factor in performance. 

These checks are strategically placed to catch performance issues without adding unnecessary overhead in tight loops. They abort execution when potential slow conditions are detected, helping to identify performance bottlenecks during testing or fuzzing.

