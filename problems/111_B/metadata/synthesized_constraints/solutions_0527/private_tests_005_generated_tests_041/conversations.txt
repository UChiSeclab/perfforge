system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little Petya loves looking for numbers' divisors. One day Petya came across the following problem:

You are given n queries in the form "xi yi". For each query Petya should count how many divisors of number xi divide none of the numbers xi - yi, xi - yi + 1, ..., xi - 1. Help him.

Input

The first line contains an integer n (1 ≤ n ≤ 105). Each of the following n lines contain two space-separated integers xi and yi (1 ≤ xi ≤ 105, 0 ≤ yi ≤ i - 1, where i is the query's ordinal number; the numeration starts with 1). 

If yi = 0 for the query, then the answer to the query will be the number of divisors of the number xi. In this case you do not need to take the previous numbers x into consideration.

Output

For each query print the answer on a single line: the number of positive integers k such that <image>

Examples

Input

6
4 0
3 1
5 2
6 2
18 4
10000 3


Output

3
1
1
2
2
22

Note

Let's write out the divisors that give answers for the first 5 queries:

1) 1, 2, 4 

2) 3

3) 5

4) 2, 6

5) 9, 18

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using std::cin;
using std::cout;
using std::set;
using std::vector;
int maxx;
int n;
const int MAXN = 100004;
bool P[MAXN];
vector<int> primes;
set<int> A[MAXN];
struct Node {
  int x, y;
};
vector<Node> xys;
int occur[MAXN];
void init_P() {
  for (int i = 0; i < maxx; i++) {
    P[i] = true;
  }
  P[0] = P[1] = false;
  int i1 = sqrt(maxx) + 1;
  for (int i = 2; i < i1; i++) {
    if (P[i]) {
      int j = i * i;
      while (j < maxx) {
        P[j] = false;
        j += i;
      }
    }
  }
  for (int i = 2; i < maxx; i++)
    if (P[i]) {
      primes.push_back(i);
    }
}
void init_A() {
  for (int i = 2; i < maxx; i++) {
    if (P[i]) {
      A[i].insert(1);
      A[i].insert(i);
    } else {
      int mi = 0;
      while (i % primes[mi] != 0) mi++;
      int m = primes[mi];
      int j = i / m;
      A[i] = A[j];
      for (set<int>::iterator it = A[j].begin(); it != A[j].end(); it++)
        A[i].insert(m * (*it));
    }
  }
}
int main(int argc, char** argv) {
  if (argc > 1) {
    freopen(argv[1], "r", stdin);
  }
  cin >> n;
  for (int i = 0; i < n; i++) {
    int x, y;
    cin >> x >> y;
    if (x > maxx) maxx = x;
    xys.push_back(Node());
    xys.back().x = x;
    xys.back().y = y;
  }
  maxx += 1;
  init_P();
  init_A();
  for (int i = 0; i < maxx; i++) {
    occur[i] = -1;
  }
  for (int i = 0; i < n; i++) {
    int x, y;
    x = xys[i].x;
    y = xys[i].y;
    int dds = 0;
    for (set<int>::iterator it = A[x].begin(); it != A[x].end(); it++) {
      int p = *it;
      if (occur[p] < i - y) dds++;
      occur[p] = i;
    }
    cout << dds << '\n';
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
54972 0
48015 1
7114 1
68273 2
53650 4
1716 1
16165 2
96062 5
57750 1
21071 5


(G.2) Fast Input

6
4 0
6 1
5 1
6 2
5 4
10000 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using std::cin; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
using std::cout; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using std::set; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using std::vector; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
int maxx; /* line 6 slow_hit_count: 0, fast_hit_count: 0 */
int n; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
const int MAXN = 100004; /* line 8 slow_hit_count: 0, fast_hit_count: 0 */
bool P[MAXN]; /* line 9 slow_hit_count: 0, fast_hit_count: 0 */
vector<int> primes; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
set<int> A[MAXN]; /* line 11 slow_hit_count: 0, fast_hit_count: 0 */
struct Node { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
  int x, y; /* line 13 slow_hit_count: 0, fast_hit_count: 0 */
}; /* line 14 slow_hit_count: 0, fast_hit_count: 0 */
vector<Node> xys; /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
int occur[MAXN]; /* line 16 slow_hit_count: 0, fast_hit_count: 0 */
void init_P() { /* line 17 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < maxx; i++) { /* line 18 slow_hit_count: 96064, fast_hit_count: 10002 */
    P[i] = true; /* line 19 slow_hit_count: 96063, fast_hit_count: 10001 */
  } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
  P[0] = P[1] = false; /* line 21 slow_hit_count: 1, fast_hit_count: 1 */
  int i1 = sqrt(maxx) + 1; /* line 22 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i < i1; i++) { /* line 23 slow_hit_count: 309, fast_hit_count: 100 */
    if (P[i]) { /* line 24 slow_hit_count: 308, fast_hit_count: 99 */
      int j = i * i; /* line 25 slow_hit_count: 63, fast_hit_count: 25 */
      while (j < maxx) { /* line 26 slow_hit_count: 185182, fast_hit_count: 17006 */
        P[j] = false; /* line 27 slow_hit_count: 185119, fast_hit_count: 16981 */
        j += i; /* line 28 slow_hit_count: 185119, fast_hit_count: 16981 */
      } /* line 29 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 31 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 2; i < maxx; i++) /* line 32 slow_hit_count: 96062, fast_hit_count: 10000 */
    if (P[i]) { /* line 33 slow_hit_count: 96061, fast_hit_count: 9999 */
      primes.push_back(i); /* line 34 slow_hit_count: 9258, fast_hit_count: 1229 */
    } /* line 35 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 36 slow_hit_count: 1, fast_hit_count: 1 */
void init_A() { /* line 37 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 2; i < maxx; i++) { /* line 38 slow_hit_count: 96062, fast_hit_count: 10000 */
    if (P[i]) { /* line 39 slow_hit_count: 96061, fast_hit_count: 9999 */
      A[i].insert(1); /* line 40 slow_hit_count: 9258, fast_hit_count: 1229 */
      A[i].insert(i); /* line 41 slow_hit_count: 9258, fast_hit_count: 1229 */
    } else { /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
      int mi = 0; /* line 43 slow_hit_count: 86803, fast_hit_count: 8770 */
      while (i % primes[mi] != 0) mi++; /* line 44 slow_hit_count: 301188, fast_hit_count: 22025 */
      int m = primes[mi]; /* line 45 slow_hit_count: 86803, fast_hit_count: 8770 */
      int j = i / m; /* line 46 slow_hit_count: 86803, fast_hit_count: 8770 */
      A[i] = A[j]; /* line 47 slow_hit_count: 86803, fast_hit_count: 8770 */
      for (set<int>::iterator it = A[j].begin(); it != A[j].end(); it++) /* line 48 slow_hit_count: 777080, fast_hit_count: 65846 */
        A[i].insert(m * (*it)); /* line 49 slow_hit_count: 690277, fast_hit_count: 57076 */
    } /* line 50 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 51 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 52 slow_hit_count: 1, fast_hit_count: 1 */
int main(int argc, char** argv) { /* line 53 slow_hit_count: 1, fast_hit_count: 1 */
  if (argc > 1) { /* line 54 slow_hit_count: 1, fast_hit_count: 1 */
    freopen(argv[1], "r", stdin); /* line 55 slow_hit_count: 0, fast_hit_count: 0 */
  } /* line 56 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 57 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < n; i++) { /* line 58 slow_hit_count: 11, fast_hit_count: 7 */
    int x, y; /* line 59 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> y; /* line 60 slow_hit_count: 10, fast_hit_count: 6 */
    if (x > maxx) maxx = x; /* line 61 slow_hit_count: 10, fast_hit_count: 6 */
    xys.push_back(Node()); /* line 62 slow_hit_count: 10, fast_hit_count: 6 */
    xys.back().x = x; /* line 63 slow_hit_count: 10, fast_hit_count: 6 */
    xys.back().y = y; /* line 64 slow_hit_count: 10, fast_hit_count: 6 */
  } /* line 65 slow_hit_count: 0, fast_hit_count: 0 */
  maxx += 1; /* line 66 slow_hit_count: 1, fast_hit_count: 1 */
  init_P(); /* line 67 slow_hit_count: 1, fast_hit_count: 1 */
  init_A(); /* line 68 slow_hit_count: 1, fast_hit_count: 1 */
  for (int i = 0; i < maxx; i++) { /* line 69 slow_hit_count: 96064, fast_hit_count: 10002 */
    occur[i] = -1; /* line 70 slow_hit_count: 96063, fast_hit_count: 10001 */
  } /* line 71 slow_hit_count: 0, fast_hit_count: 0 */
  for (int i = 0; i < n; i++) { /* line 72 slow_hit_count: 11, fast_hit_count: 7 */
    int x, y; /* line 73 slow_hit_count: 0, fast_hit_count: 0 */
    x = xys[i].x; /* line 74 slow_hit_count: 10, fast_hit_count: 6 */
    y = xys[i].y; /* line 75 slow_hit_count: 10, fast_hit_count: 6 */
    int dds = 0; /* line 76 slow_hit_count: 10, fast_hit_count: 6 */
    for (set<int>::iterator it = A[x].begin(); it != A[x].end(); it++) { /* line 77 slow_hit_count: 198, fast_hit_count: 46 */
      int p = *it; /* line 78 slow_hit_count: 188, fast_hit_count: 40 */
      if (occur[p] < i - y) dds++; /* line 79 slow_hit_count: 188, fast_hit_count: 40 */
      occur[p] = i; /* line 80 slow_hit_count: 188, fast_hit_count: 40 */
    } /* line 81 slow_hit_count: 0, fast_hit_count: 0 */
    cout << dds << '\n'; /* line 82 slow_hit_count: 10, fast_hit_count: 6 */
  } /* line 83 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 84 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 85 slow_hit_count: 0, fast_hit_count: 0 */


assistant: ### Phase 1: Identifying Expensive or Inefficient Code Segments

Upon comparing the hit counts between the slow and fast runs, we observe the following:

1. **Initialization Loops (`init_P` and `init_A` Functions):**
   - **Line 18 & 38:** The loops initializing the `P` array and `A` array run `96064` and `96062` times respectively for the slow input, compared to `10002` and `10000` for the fast input. This indicates that these loops scale with `maxx`, which is the maximum `x` value across all queries.
   - **Prime Generation (`init_P`):** The sieve process (lines 23-35) is significantly more expensive for the slow input due to larger `maxx`.

2. **Divisor Processing (`for` loop in `main`):**
   - **Line 77:** The loop iterating over divisors hits `198` times for the slow input compared to `46` times for the fast input. This suggests that larger numbers might have more divisors (`A[x]` being larger).

3. **Prime Factorization (Lines 44-49):**
   - **Line 44:** The operation for finding the prime divisor `mi` is hit `301188` times for the slow input, indicating lots of iterations to find divisors due to possibly larger `x` values having more or larger prime factors.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis, we can generate the following natural language performance invariants:

1. **High `maxx` Values:**
   - **Invariant:** "When the largest `xi` value in the input approaches the upper limit (100,000), the initialization of sieve structures (`P` and `A`) can become very expensive, as it scales directly with this largest value."
   
   - **Usage:** Ensure `maxx` is computed efficiently, and consider optimizations for large scale initializations.

2. **Large Number of Divisors:**
   - **Invariant:** "If a query's `xi` has a large number of divisors, or if it includes large composite numbers, iterating over these divisors can slow down the program significantly."
   
   - **Usage:** Optimize handling of divisor iterations, possibly by caching results for frequently occurring numbers or using more efficient divisor generation methods.

3. **Prime Factorization Overhead:**
   - **Invariant:** "The program may slow down considerably when processing numbers with large or multiple prime factors, as factorization processes are repeated frequently, particularly when `xi` values are large and composite."
   
   - **Usage:** Optimization could involve pre-computing common factorization patterns or ensuring prime lists are efficiently managed.

4. **Use of `occur` Array:**
   - **Invariant:** "The `occur` array usage can become a bottleneck when `xi` values and their divisors iterate frequently in nested loops, leading to increased memory writes and potential cache performance issues."
   
   - **Usage:** Consider alternative data structures that minimize frequent writes or optimize memory access patterns.

These invariants help in identifying potential slowdowns not just for the given inputs, but also for any future input scenarios that might hit similar conditions, even within the constraints provided.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little Petya loves looking for numbers' divisors. One day Petya came across the following problem:

You are given n queries in the form "xi yi". For each query Petya should count how many divisors of number xi divide none of the numbers xi - yi, xi - yi + 1, ..., xi - 1. Help him.

Input

The first line contains an integer n (1 ≤ n ≤ 105). Each of the following n lines contain two space-separated integers xi and yi (1 ≤ xi ≤ 105, 0 ≤ yi ≤ i - 1, where i is the query's ordinal number; the numeration starts with 1). 

If yi = 0 for the query, then the answer to the query will be the number of divisors of the number xi. In this case you do not need to take the previous numbers x into consideration.

Output

For each query print the answer on a single line: the number of positive integers k such that <image>

Examples

Input

6
4 0
3 1
5 2
6 2
18 4
10000 3


Output

3
1
1
2
2
22

Note

Let's write out the divisors that give answers for the first 5 queries:

1) 1, 2, 4 

2) 3

3) 5

4) 2, 6

5) 9, 18

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implementing the Natural Language Invariants as C++ Checkers

Based on the performance-characterizing invariants derived earlier, here are the C++ checker functions for each invariant:

1. **Checker for High `maxx` Values:**

```cpp
void check_maxx_invariant(int maxx) {
    if (maxx >= 100000) {
        cerr << "Warning: Performance bottleneck triggered - maxx value is very high!" << endl;
        abort();
    }
}
```

2. **Checker for Large Number of Divisors:**

```cpp
void check_divisor_count_invariant(int divisorCount) {
    if (divisorCount > 1000) { // Threshold chosen to be reasonable given problem constraints
        cerr << "Warning: Performance bottleneck triggered - large number of divisors!" << endl;
        abort();
    }
}
```

3. **Checker for Prime Factorization Overhead:**

```cpp
void check_prime_factorization_invariant(int primeFactorizationCount) {
    if (primeFactorizationCount > 1000000) { // Arbitrary large threshold
        cerr << "Warning: Performance bottleneck triggered - excessive prime factorization computations!" << endl;
        abort();
    }
}
```

4. **Checker for Use of `occur` Array:**

```cpp
void check_occur_usage_invariant(int occurWrites) {
    if (occurWrites > 100000) { // Arbitrary threshold
        cerr << "Warning: Performance bottleneck triggered - excessive writes to occur array!" << endl;
        abort();
    }
}
```

### Phase 4: Integrating Checkers into the Original C++ Code

Below is the instrumented version of the original C++ program with the added checker functions:

```cpp
#include <bits/stdc++.h>
using std::cin;
using std::cout;
using std::set;
using std::vector;

// Checker functions
void check_maxx_invariant(int maxx) {
    if (maxx >= 100000) {
        cerr << "Warning: Performance bottleneck triggered - maxx value is very high!" << endl;
        abort();
    }
}

void check_divisor_count_invariant(int divisorCount) {
    if (divisorCount > 1000) {
        cerr << "Warning: Performance bottleneck triggered - large number of divisors!" << endl;
        abort();
    }
}

void check_prime_factorization_invariant(int primeFactorizationCount) {
    if (primeFactorizationCount > 1000000) {
        cerr << "Warning: Performance bottleneck triggered - excessive prime factorization computations!" << endl;
        abort();
    }
}

void check_occur_usage_invariant(int occurWrites) {
    if (occurWrites > 100000) {
        cerr << "Warning: Performance bottleneck triggered - excessive writes to occur array!" << endl;
        abort();
    }
}

int maxx;
int n;
const int MAXN = 100004;
bool P[MAXN];
vector<int> primes;
set<int> A[MAXN];
struct Node {
    int x, y;
};
vector<Node> xys;
int occur[MAXN];

void init_P() {
    for (int i = 0; i < maxx; i++) {
        P[i] = true;
    }
    P[0] = P[1] = false;
    int i1 = sqrt(maxx) + 1;
    for (int i = 2; i < i1; i++) {
        if (P[i]) {
            int j = i * i;
            while (j < maxx) {
                P[j] = false;
                j += i;
            }
        }
    }
    for (int i = 2; i < maxx; i++)
        if (P[i]) {
            primes.push_back(i);
        }
}

void init_A() {
    for (int i = 2; i < maxx; i++) {
        if (P[i]) {
            A[i].insert(1);
            A[i].insert(i);
        } else {
            int mi = 0;
            while (i % primes[mi] != 0) mi++;
            int m = primes[mi];
            int j = i / m;
            A[i] = A[j];
            for (set<int>::iterator it = A[j].begin(); it != A[j].end(); it++)
                A[i].insert(m * (*it));
        }
    }
}

int main(int argc, char** argv) {
    if (argc > 1) {
        freopen(argv[1], "r", stdin);
    }
    cin >> n;
    for (int i = 0; i < n; i++) {
        int x, y;
        cin >> x >> y;
        if (x > maxx) maxx = x;
        xys.push_back(Node());
        xys.back().x = x;
        xys.back().y = y;
    }
    maxx += 1;

    // Check for high maxx values
    check_maxx_invariant(maxx);

    init_P();
    init_A();
    for (int i = 0; i < maxx; i++) {
        occur[i] = -1;
    }

    int occurWrites = 0; // To track occur array writes
    for (int i = 0; i < n; i++) {
        int x, y;
        x = xys[i].x;
        y = xys[i].y;
        int dds = 0;
        int divisorCount = 0; // Track number of divisors processed
        for (set<int>::iterator it = A[x].begin(); it != A[x].end(); it++) {
            int p = *it;
            if (occur[p] < i - y) dds++;
            occur[p] = i;
            occurWrites++;
            divisorCount++;
        }

        // Check for large number of divisors
        check_divisor_count_invariant(divisorCount);

        cout << dds << '\n';
    }

    // Check for excessive writes to occur array
    check_occur_usage_invariant(occurWrites);

    return 0;
}
```

This modified program includes runtime checks for each of the performance-characterizing invariants using the described C++ checkers. These checks are placed at strategic locations in the program to detect potential bottlenecks without adding significant overhead to the execution.

