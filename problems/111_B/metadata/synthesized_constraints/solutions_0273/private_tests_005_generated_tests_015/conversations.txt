system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little Petya loves looking for numbers' divisors. One day Petya came across the following problem:

You are given n queries in the form "xi yi". For each query Petya should count how many divisors of number xi divide none of the numbers xi - yi, xi - yi + 1, ..., xi - 1. Help him.

Input

The first line contains an integer n (1 ≤ n ≤ 105). Each of the following n lines contain two space-separated integers xi and yi (1 ≤ xi ≤ 105, 0 ≤ yi ≤ i - 1, where i is the query's ordinal number; the numeration starts with 1). 

If yi = 0 for the query, then the answer to the query will be the number of divisors of the number xi. In this case you do not need to take the previous numbers x into consideration.

Output

For each query print the answer on a single line: the number of positive integers k such that <image>

Examples

Input

6
4 0
3 1
5 2
6 2
18 4
10000 3


Output

3
1
1
2
2
22

Note

Let's write out the divisors that give answers for the first 5 queries:

1) 1, 2, 4 

2) 3

3) 5

4) 2, 6

5) 9, 18

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
template <typename T>
using vc = vector<T>;
using pii = pair<int, int>;
unordered_set<int> divisors(int x, int p) {
  unordered_set<int> second;
  if (x <= p) {
    second.insert(x);
    second.insert(1);
    return second;
  } else {
    for (int i = p; i * i <= x; i++) {
      if (x % i == 0) {
        auto last_s = divisors(x / i, i);
        for (auto next : last_s) {
          second.insert(next);
          second.insert(i * next);
        }
      }
    }
    second.insert(1);
    second.insert(x);
    return second;
  }
}
signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  int n;
  cin >> n;
  vc<int> last(1e5 + 1, -1);
  for (int i = 0; i < n; i++) {
    int x, ind;
    cin >> x >> ind;
    ind = i - ind;
    unordered_set<int> div = divisors(x, 2);
    int anz = 0;
    for (auto d : div) {
      if (last[d] < ind) anz++;
      last[d] = i;
    }
    cout << anz << " ";
  }
  cout << "\n";
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
54972 0
48015 1
7114 1
68273 2
53650 4
1716 1
16165 2
96062 5
57750 1
21071 5


(G.2) Fast Input

6
4 0
3 1
5 1
6 2
5 4
10000 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
template <typename T> /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
using vc = vector<T>; /* line 4 slow_hit_count: 0, fast_hit_count: 0 */
using pii = pair<int, int>; /* line 5 slow_hit_count: 0, fast_hit_count: 0 */
unordered_set<int> divisors(int x, int p) { /* line 6 slow_hit_count: 472, fast_hit_count: 116 */
  unordered_set<int> second; /* line 7 slow_hit_count: 472, fast_hit_count: 116 */
  if (x <= p) { /* line 8 slow_hit_count: 472, fast_hit_count: 116 */
    second.insert(x); /* line 9 slow_hit_count: 0, fast_hit_count: 17 */
    second.insert(1); /* line 10 slow_hit_count: 0, fast_hit_count: 17 */
    return second; /* line 11 slow_hit_count: 0, fast_hit_count: 17 */
  } else { /* line 12 slow_hit_count: 0, fast_hit_count: 0 */
    for (int i = p; i * i <= x; i++) { /* line 13 slow_hit_count: 8100, fast_hit_count: 831 */
      if (x % i == 0) { /* line 14 slow_hit_count: 7628, fast_hit_count: 732 */
        auto last_s = divisors(x / i, i); /* line 15 slow_hit_count: 924, fast_hit_count: 220 */
        for (auto next : last_s) { /* line 16 slow_hit_count: 2142, fast_hit_count: 507 */
          second.insert(next); /* line 17 slow_hit_count: 1680, fast_hit_count: 397 */
          second.insert(i * next); /* line 18 slow_hit_count: 1680, fast_hit_count: 397 */
        } /* line 19 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 20 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 21 slow_hit_count: 0, fast_hit_count: 0 */
    second.insert(1); /* line 22 slow_hit_count: 472, fast_hit_count: 99 */
    second.insert(x); /* line 23 slow_hit_count: 472, fast_hit_count: 99 */
    return second; /* line 24 slow_hit_count: 472, fast_hit_count: 99 */
  } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
} /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
signed main() { /* line 27 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 28 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(0); /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
  int n; /* line 30 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 31 slow_hit_count: 1, fast_hit_count: 1 */
  vc<int> last(1e5 + 1, -1); /* line 32 slow_hit_count: 2, fast_hit_count: 2 */
  for (int i = 0; i < n; i++) { /* line 33 slow_hit_count: 11, fast_hit_count: 7 */
    int x, ind; /* line 34 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> ind; /* line 35 slow_hit_count: 10, fast_hit_count: 6 */
    ind = i - ind; /* line 36 slow_hit_count: 10, fast_hit_count: 6 */
    unordered_set<int> div = divisors(x, 2); /* line 37 slow_hit_count: 20, fast_hit_count: 12 */
    int anz = 0; /* line 38 slow_hit_count: 10, fast_hit_count: 6 */
    for (auto d : div) { /* line 39 slow_hit_count: 198, fast_hit_count: 44 */
      if (last[d] < ind) anz++; /* line 40 slow_hit_count: 188, fast_hit_count: 38 */
      last[d] = i; /* line 41 slow_hit_count: 188, fast_hit_count: 38 */
    } /* line 42 slow_hit_count: 0, fast_hit_count: 0 */
    cout << anz << " "; /* line 43 slow_hit_count: 10, fast_hit_count: 6 */
  } /* line 44 slow_hit_count: 0, fast_hit_count: 0 */
  cout << "\n"; /* line 45 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 46 slow_hit_count: 1, fast_hit_count: 1 */


assistant: Based on the given C program, problem statement, and the hit count information, we need to identify why the program runs more slowly for certain inputs. We can derive performance-characterizing invariants that describe the conditions under which the slowdown occurs.

### Phase 1: Identify Expensive or Inefficient Code Segments

1. **Analysis of Hit Counts**:
   - Lines within the `divisors` function (lines 13-18) have significantly higher hit counts for the slow input compared to the fast input. This indicates that the computation of divisors is a potential bottleneck.
   - In particular, the nested call to `divisors` (line 15) and the loop through `last_s` (line 16) have much higher hits in the slow input.

2. **Code Interaction with Data Structures**:
   - The `divisors` function computes the divisors of a number `x` starting from a factor `p`. When `x` is large and has many divisors, the recursive calls can become deep, and the loop (lines 13-18) can iterate many times.
   - The loop in the main function (lines 39-41) that checks conditions on divisors also has increased hits for the slow input, suggesting that more divisors are being processed.

3. **Potential Causes**:
   - Large values of `x` or numbers with many small divisors can lead to deep recursion and large loops in `divisors`.
   - Situations where `x` is a composite number with many divisors could increase the complexity significantly.

### Phase 2: Derive Performance-Characterizing Invariants

1. **Natural Language Performance Invariants**:

   - **Invariant 1**: "If the number `xi` in a query has a large number of divisors, especially small divisors, the computation may slow down due to recursive calls and loops in the `divisors` function."
     - This is because numbers with many divisors lead to frequent and deep recursive calls, increasing the computational load.

   - **Invariant 2**: "If the number `xi` is large and composite, the execution time may increase due to the extensive divisor calculation."
     - Large composite numbers tend to have many factors, which further complicates the divisor computation.

   - **Invariant 3**: "When the input includes several queries with large values of `xi` and small values of `yi`, the divisor function is called more often, potentially leading to slowdowns."
     - Queries with small `yi` result in examining more divisors that are not factored out by the subtraction from `xi`.

2. **Performance Triggers**:
   - Inputs where `xi` is close to 100,000 and is a highly composite number (e.g., products of many small primes).
   - Situations where several consecutive queries have `xi` values with similar divisor profiles, causing repeated expensive calculations.

By understanding these conditions, we can predict and potentially mitigate performance slowdowns in similar scenarios. The focus should be on minimizing the overhead from recursive divisor calculations and managing the complexity of handling numbers with abundant divisors.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little Petya loves looking for numbers' divisors. One day Petya came across the following problem:

You are given n queries in the form "xi yi". For each query Petya should count how many divisors of number xi divide none of the numbers xi - yi, xi - yi + 1, ..., xi - 1. Help him.

Input

The first line contains an integer n (1 ≤ n ≤ 105). Each of the following n lines contain two space-separated integers xi and yi (1 ≤ xi ≤ 105, 0 ≤ yi ≤ i - 1, where i is the query's ordinal number; the numeration starts with 1). 

If yi = 0 for the query, then the answer to the query will be the number of divisors of the number xi. In this case you do not need to take the previous numbers x into consideration.

Output

For each query print the answer on a single line: the number of positive integers k such that <image>

Examples

Input

6
4 0
3 1
5 2
6 2
18 4
10000 3


Output

3
1
1
2
2
22

Note

Let's write out the divisors that give answers for the first 5 queries:

1) 1, 2, 4 

2) 3

3) 5

4) 2, 6

5) 9, 18

Solution (C++ code):
{solution}


assistant: ### Phase 3: Implement the Natural Language Invariants in C++

Here are the C++ code snippets that check the conditions described in the performance-characterizing invariants:

1. **Invariant 1 Check**: "If the number `xi` in a query has a large number of divisors, especially small divisors, the computation may slow down due to recursive calls and loops in the `divisors` function."

```cpp
void check_large_divisors(int x, int divisor_count_threshold) {
    // Simple heuristic: if x is large and has more than a certain number of divisors
    int divisorCount = 0;
    for (int i = 1; i * i <= x; i++) {
        if (x % i == 0) {
            divisorCount++;
            if (i != x / i) divisorCount++;
        }
    }
    if (divisorCount > divisor_count_threshold) {
        cerr << "Warning: Performance bottleneck condition triggered! Large number of divisors." << endl;
        abort();
    }
}
```

2. **Invariant 2 Check**: "If the number `xi` is large and composite, the execution time may increase due to the extensive divisor calculation."

```cpp
void check_large_composite(int x, int composite_threshold) {
    if (x > composite_threshold) {
        cerr << "Warning: Performance bottleneck condition triggered! Large composite number." << endl;
        abort();
    }
}
```

3. **Invariant 3 Check**: "When the input includes several queries with large values of `xi` and small values of `yi`, the divisor function is called more often, potentially leading to slowdowns."

```cpp
void check_frequent_large_x_yi(int x, int yi, int large_x_threshold) {
    if (x > large_x_threshold && yi < 5) { // arbitrary small yi threshold
        cerr << "Warning: Performance bottleneck condition triggered! Frequent large xi with small yi." << endl;
        abort();
    }
}
```

### Phase 4: Integrate Checks into the Program

Below is the original C++ program with the invariant checks integrated appropriately:

```cpp
#include <bits/stdc++.h>
using namespace std;
template <typename T>
using vc = vector<T>;
using pii = pair<int, int>;

// Check: Large number of divisors
void check_large_divisors(int x, int divisor_count_threshold) {
    int divisorCount = 0;
    for (int i = 1; i * i <= x; i++) {
        if (x % i == 0) {
            divisorCount++;
            if (i != x / i) divisorCount++;
        }
    }
    if (divisorCount > divisor_count_threshold) {
        cerr << "Warning: Performance bottleneck condition triggered! Large number of divisors." << endl;
        abort();
    }
}

// Check: Large composite number
void check_large_composite(int x, int composite_threshold) {
    if (x > composite_threshold) {
        cerr << "Warning: Performance bottleneck condition triggered! Large composite number." << endl;
        abort();
    }
}

// Check: Frequent large xi with small yi
void check_frequent_large_x_yi(int x, int yi, int large_x_threshold) {
    if (x > large_x_threshold && yi < 5) {
        cerr << "Warning: Performance bottleneck condition triggered! Frequent large xi with small yi." << endl;
        abort();
    }
}

unordered_set<int> divisors(int x, int p) {
    unordered_set<int> second;
    if (x <= p) {
        second.insert(x);
        second.insert(1);
        return second;
    } else {
        for (int i = p; i * i <= x; i++) {
            if (x % i == 0) {
                auto last_s = divisors(x / i, i);
                for (auto next : last_s) {
                    second.insert(next);
                    second.insert(i * next);
                }
            }
        }
        second.insert(1);
        second.insert(x);
        return second;
    }
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int n;
    cin >> n;
    vc<int> last(1e5 + 1, -1);
    for (int i = 0; i < n; i++) {
        int x, ind;
        cin >> x >> ind;
        ind = i - ind;

        // Insert checks before computation calls
        check_large_divisors(x, 100); // Assume 100 as a threshold for a large number of divisors
        check_large_composite(x, 50000); // Assume 50000 is a high value for composite numbers
        check_frequent_large_x_yi(x, ind, 75000); // Assume 75000 is a large x threshold

        unordered_set<int> div = divisors(x, 2);
        int anz = 0;
        for (auto d : div) {
            if (last[d] < ind) anz++;
            last[d] = i;
        }
        cout << anz << " ";
    }
    cout << "\n";
}
```

### Explanation:
- **Check Placement**: The checks are placed right after reading the inputs for each query. This is before any heavy computations begin, ensuring that the program can abort early if a bottleneck is detected.
- **Thresholds** are set based on assumptions that reflect realistic limits for `xi`, the divisor count, and the composite number threshold. These values should be adjusted based on performance testing and specific constraints of the problem domain.

