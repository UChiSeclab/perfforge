system: You are a helpful assistant good at coding.

user: (A) Context

You are an experienced C software engineer focusing on performance bottlenecks. You have:
1. A problem statement describing a task or algorithm (with constraints such as n <= 100).
2. A C program that implements a solution to that problem.
3. Two inputs: a “fast” input that completes quickly, and a “slow” input that takes much longer—both inputs have similar size/structure.
4. Line-level hit counts for both runs, showing which lines get hit significantly more often on the slow input.

Your goal is to diagnose why the program runs slowly for the slow input and derive conditions or invariants that capture what triggers this slowdown.

(B) Tasks: Analyze the given code and generate performance-characterizing invariants in natural language

Phase 1: Identify expensive or onefficient code segments. In this phase you are asked to,
1. Compare line-level hit counts between the fast and slow runs.
2. Pinpoint lines or functions that get significantly more hits under the slow input.
3. Infer how these lines might be interacting with data structures, loops, recursion, etc., especially as they relate to the input constraints (e.g., n <= 100).

Phase 2: Derive performance-characterizing invariants (natural language). In this phase you are asked to,
1. Generate natural language statements that describe conditions under which the program likely enters a slow path.
2. Avoid using specific numeric values from the slow input; abstract them into categories or thresholds. However, make sure those thresholds adhere to the input constraints of the problem.
3. Correlate these conditions strongly to input patterns (e.g., “when n is close to 100 and there is a nested loop,” or “when a data structure is repeatedly sorted”).
4. Ensure your statements are broad enough to catch possible future slow scenarios, but still reflect realistic triggers given the constraints (like n <= 100).

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```

(C) Output Requirements
1. Provide a list of natural language performance invariants explaining under what conditions the code slows down.
2. Do not mention or rely on exact values from the provided slow input.
3. Use or suggest threshold values that align with problem constraints (e.g., n <= 100).
4. The output should be a concise, descriptive set of statements about performance triggers.

(D) Important Considerations
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. Avoid checks inside tight loops. Place checks in a way that does not significantly degrade performance.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

(E) Problem Statement

Little Petya loves looking for numbers' divisors. One day Petya came across the following problem:

You are given n queries in the form "xi yi". For each query Petya should count how many divisors of number xi divide none of the numbers xi - yi, xi - yi + 1, ..., xi - 1. Help him.

Input

The first line contains an integer n (1 ≤ n ≤ 105). Each of the following n lines contain two space-separated integers xi and yi (1 ≤ xi ≤ 105, 0 ≤ yi ≤ i - 1, where i is the query's ordinal number; the numeration starts with 1). 

If yi = 0 for the query, then the answer to the query will be the number of divisors of the number xi. In this case you do not need to take the previous numbers x into consideration.

Output

For each query print the answer on a single line: the number of positive integers k such that <image>

Examples

Input

6
4 0
3 1
5 2
6 2
18 4
10000 3


Output

3
1
1
2
2
22

Note

Let's write out the divisors that give answers for the first 5 queries:

1) 1, 2, 4 

2) 3

3) 5

4) 2, 6

5) 9, 18

(F) Program Solving the Problem Statement

#include <bits/stdc++.h>
using namespace std;
unordered_map<long long, vector<long long>> mp;
int32_t main() {
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  long long n;
  cin >> n;
  for (long long t = 1; t <= n; t++) {
    long long x, y;
    cin >> x >> y;
    long long cnt = 0;
    for (long long j = 1; j * j <= x; j++) {
      if (x % j == 0) {
        long long ind =
            lower_bound(mp[j].begin(), mp[j].end(), t - y) - mp[j].begin();
        if (ind == mp[j].size()) cnt++;
        mp[j].push_back(t);
        if (j != x / j) {
          ind = lower_bound(mp[x / j].begin(), mp[x / j].end(), t - y) -
                mp[x / j].begin();
          if (ind == mp[x / j].size()) cnt++;
          mp[x / j].push_back(t);
        }
      }
    }
    cout << cnt << '\n';
  }
  return 0;
}


(G) The Slow & Fast Inputs

(G.1) Slow Input

10
54972 0
48015 1
7114 1
68273 2
53650 4
1716 1
16165 2
96062 5
57750 1
21071 5


(G.2) Fast Input

6
4 0
3 1
5 1
6 2
5 4
10000 3


(H) Hit Count Information of Slow Input and Fast Input (Aggregated):

#include <bits/stdc++.h> /* line 1 slow_hit_count: 0, fast_hit_count: 0 */
using namespace std; /* line 2 slow_hit_count: 0, fast_hit_count: 0 */
unordered_map<long long, vector<long long>> mp; /* line 3 slow_hit_count: 0, fast_hit_count: 0 */
int32_t main() { /* line 4 slow_hit_count: 1, fast_hit_count: 1 */
  ios_base::sync_with_stdio(false); /* line 5 slow_hit_count: 1, fast_hit_count: 1 */
  cin.tie(NULL); /* line 6 slow_hit_count: 1, fast_hit_count: 1 */
  long long n; /* line 7 slow_hit_count: 0, fast_hit_count: 0 */
  cin >> n; /* line 8 slow_hit_count: 1, fast_hit_count: 1 */
  for (long long t = 1; t <= n; t++) { /* line 9 slow_hit_count: 11, fast_hit_count: 7 */
    long long x, y; /* line 10 slow_hit_count: 0, fast_hit_count: 0 */
    cin >> x >> y; /* line 11 slow_hit_count: 10, fast_hit_count: 6 */
    long long cnt = 0; /* line 12 slow_hit_count: 10, fast_hit_count: 6 */
    for (long long j = 1; j * j <= x; j++) { /* line 13 slow_hit_count: 1901, fast_hit_count: 115 */
      if (x % j == 0) { /* line 14 slow_hit_count: 1891, fast_hit_count: 109 */
        long long ind = /* line 15 slow_hit_count: 0, fast_hit_count: 0 */
            lower_bound(mp[j].begin(), mp[j].end(), t - y) - mp[j].begin(); /* line 16 slow_hit_count: 94, fast_hit_count: 20 */
        if (ind == mp[j].size()) cnt++; /* line 17 slow_hit_count: 94, fast_hit_count: 20 */
        mp[j].push_back(t); /* line 18 slow_hit_count: 94, fast_hit_count: 20 */
        if (j != x / j) { /* line 19 slow_hit_count: 94, fast_hit_count: 20 */
          ind = lower_bound(mp[x / j].begin(), mp[x / j].end(), t - y) - /* line 20 slow_hit_count: 94, fast_hit_count: 18 */
                mp[x / j].begin(); /* line 21 slow_hit_count: 94, fast_hit_count: 18 */
          if (ind == mp[x / j].size()) cnt++; /* line 22 slow_hit_count: 94, fast_hit_count: 18 */
          mp[x / j].push_back(t); /* line 23 slow_hit_count: 94, fast_hit_count: 18 */
        } /* line 24 slow_hit_count: 0, fast_hit_count: 0 */
      } /* line 25 slow_hit_count: 0, fast_hit_count: 0 */
    } /* line 26 slow_hit_count: 0, fast_hit_count: 0 */
    cout << cnt << '\n'; /* line 27 slow_hit_count: 10, fast_hit_count: 6 */
  } /* line 28 slow_hit_count: 0, fast_hit_count: 0 */
  return 0; /* line 29 slow_hit_count: 1, fast_hit_count: 1 */
} /* line 30 slow_hit_count: 0, fast_hit_count: 0 */


assistant: To diagnose and characterize the performance bottlenecks in the given C program, let's go through both phases as outlined.

### Phase 1: Identify Expensive or Inefficient Code Segments

Based on the hit count information provided for both the slow and fast inputs, we can pinpoint the following observations:

1. **Line 13 (`for (long long j = 1; j * j <= x; j++)`):** This loop is significantly more frequently executed in the slow input (1,901 times) compared to the fast input (115 times). This suggests that the loop is a major contributor to the slowdown, especially for large values of `x`.

2. **Line 14 (`if (x % j == 0)`):** The condition to check if `j` is a divisor of `x` is almost as frequently hit as the loop itself, indicating that `x` often has many divisors.

3. **Lines 16-23:** These lines handle the computation of index `ind` using `lower_bound`, and conditionally increment `cnt` and update the map. These lines are also executed significantly more in the slow input, reflecting a potential inefficiency in managing and traversing the map vectors.

### Phase 2: Derive Performance-Characterizing Invariants

Based on the analysis above, we can derive the following performance-characterizing invariants in natural language:

1. **High Count of Divisors for Large `x`:**
   - **Condition:** When the number `x` has many divisors (a high divisor count), the inner loop runs more frequently, leading to more hits on map lookups and insertions.
   - **Invariant:** "If `x` is a highly composite number, the inner loop checking for divisors will execute many operations, slowing performance."

2. **Frequent Map Operations:**
   - **Condition:** When the map `mp` is accessed frequently for large numbers due to a high number of divisors, the cost of `lower_bound` operations can accumulate significantly.
   - **Invariant:** "If there are many divisors leading to frequent map lookups and insertions, the program's execution time can increase due to costly search and update operations."

3. **Large Values of `x`:**
   - **Condition:** Large values of `x` result in more iterations of the loop `for (j * j <= x)`, causing increased execution time.
   - **Invariant:** "If `x` is large and not prime, the number of divisor checks grows, consuming more computational resources."

These invariants capture broad conditions under which the provided code may slow down, considering the constraints (e.g., `x` can be as large as 100,000). They help explain slow performance without relying on specific input values but focus instead on the structural properties of `x` related to divisor computation and map usage.

user: (A) Context

You have already:
1. Identified expensive code segments (Phase 1).
2. Derived performance-characterizing invariants in natural language (Phase 2).

Now, you MUST transform these invariants into runtime checks and integrate them into the given C++ program.

(B) Tasks: Revisit the performance-characteristic invariants you inferred in natural langauge and write faithful, error-free C++ code snippets to implement them

You MUST do perform this task in two phases and provide separate answers for both: First, translating the invariants into checker code in C++ (phase 3, below). Second, integrating those checker C++ code snippets with the original program for which you inferred those invariants (phase 4, below).   

Phase 3: Implement the natural language invariants inferred previously, in C++. In this phase you are asked to, 
1. For each natural language invariant from Phase 2, you MUST produce C++ code that checks the condition at runtime.
2. You MUST NOT relax or trivialize the checker code implementing these performance-characterizing invariants. You MUST faithfully implement them as described. 
3. Use the following template for writing checker code in C++ which could also be implemented as a helper function:
```cpp
    if (/* condition based on the NL invariant */) {
        cerr << "Warning: Performance bottleneck condition triggered!" << endl;
        abort();
    }
``` 

Note that not all performance-characterizing invariants are about maximising input size. You may refer to the following examples for inspiration --- some maximising the input size, some not --- but do not simply replicate them exactly. Rather, use them as inspiration to infer and tailor performance-characterizing invariants tailored for the C++ code and problem statement you were asked to analize:

Example Invariant #1:

A potential slowdown arises when certain arrays or lists grow large, causing repeated operations. One way to detect this is to check if the size of a critical array arr (used in a nested loop) exceeds a broad threshold.

Natural language description: “If arr is very large and used in nested loops, the code may repeat operations too many times.”

Code implementing the natural language description:

```cpp
// Sample checker function
void check_size_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: size_invariant triggered - array too large for nested loops" << endl;
        abort();
    }
}

// Usage in main or function
int arrSize = arr.size();
check_size_invariant(arrSize > 50000);
```

Example Invariant #2:

Repeated sorting or searching on a data structure can degrade performance, especially if the data structure is large or if the sorting is called multiple times in a loop.

Natural language description: “If a large portion of the code’s execution time is spent in sorting a data structure repeatedly, performance may degrade. Check if the data structure is frequently resorted or reprocessed when it has many elements.”

Code implementing the natural language description:

```cpp
void check_sort_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: sort_invariant triggered - repeatedly sorting large data" << endl;
        abort();
    }
}

// After reading input or before sorting
int elementCount = someDataStructure.size();
check_sort_invariant(elementCount > 100000 && /* some condition indicating repeated sorts */);
```

Example Invariant #3:

Recursion (e.g., graph traversal or the iterative version of it, recurssive dynamic programming, recurssive computation like computing the next Fibonacci number, etc.) can become expensive if it explores a large search space. A sign of this might be a high branching factor combined with a deep recursion depth.

Natural language description: “If the recursion depth is likely to exceed a certain level or if many branches are processed at each recursive call, the computation may become very expensive.”

```cpp
void check_dfs_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: dfs_invariant triggered - high recursion depth or branching factor" << endl;
        abort();
    }
}

// Before calling dfs or inside setup
check_dfs_invariant((maxDepthEstimate > 50) && (branchFactorEstimate > 10));
```

Example Invariant #4:

Memory usage spikes or large matrix operations can slow down computation if array dimensions become too large. If the program initializes a 2D array based on input dimensions n and m, certain input combinations can trigger large memory footprints or nested loops over the entire matrix.

Natural language description: “If n and m together exceed a threshold that implies large matrix computations, the program may slow significantly.”

```cpp
void check_matrix_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: matrix_invariant triggered - potentially large matrix operations" << endl;
        abort();
    }
}

// After reading n, m
check_matrix_invariant(n * m > 1000000);
```

Example invariant #5:

If a program runs an expensive function or heavy-weight code (e.g. memory allocation) repeatedly within a performance-critical loop or function, the overhead for calling that function can accumulate, slowing the program significantly.

Natural langauge description: "If function foo is an expensive function to execute, and is called a large number of times in a loop or recursive function, the program may slow down significantly"

```cpp
void check_expensive_function_invariant(bool condition) {
    if (condition) {
        cerr << "Warning: expensive function invariant triggered - excessive calls" << endl;
        abort();
    }
}

check_expensive_function_invariant(n > 1000000);  // arbitrary, but large threshold
for (i = 0; i < n; ++i) { 
    foo(); // expensive function
}
```


Phase 4: Propagate and insert conditional checks. In this phase you are asked to,
1. Place each check at an effective point in the control/data flow (e.g., after reading inputs, before heavy loops) so you do not add overhead in tight loops. Note that the checker code could also be implemented as a helper function.
2. If multiple checks overlap, merge or adjust them carefully to avoid redundant warnings.
3. Provide the final, instrumented C++ code in code fences. Ensure it compiles cleanly and runs without errors.
4. For each inserted check, add a short comment explaining which bottleneck it detects.

Note the following important considerations when translating the inferred performance-characterizing invariants into code and propagating the checkers to the most efective program point by instrumenting the original code: 
1. Avoid hardcoding. Don’t rely solely on the exact values from the provided slow input; think in terms of categories or thresholds that lead to slow execution.
2. In addition to the warning message, remember to insert an "abort()" statement at the end of the checker.
3. Focus on fuzzer utility. The checks should help a fuzzer detect slow performance triggers by hitting these conditions.

As a refresher, below you are provided with the same program statement and C++ code for which you already inferred performance-characterizing invariants:

Problem statement:
Little Petya loves looking for numbers' divisors. One day Petya came across the following problem:

You are given n queries in the form "xi yi". For each query Petya should count how many divisors of number xi divide none of the numbers xi - yi, xi - yi + 1, ..., xi - 1. Help him.

Input

The first line contains an integer n (1 ≤ n ≤ 105). Each of the following n lines contain two space-separated integers xi and yi (1 ≤ xi ≤ 105, 0 ≤ yi ≤ i - 1, where i is the query's ordinal number; the numeration starts with 1). 

If yi = 0 for the query, then the answer to the query will be the number of divisors of the number xi. In this case you do not need to take the previous numbers x into consideration.

Output

For each query print the answer on a single line: the number of positive integers k such that <image>

Examples

Input

6
4 0
3 1
5 2
6 2
18 4
10000 3


Output

3
1
1
2
2
22

Note

Let's write out the divisors that give answers for the first 5 queries:

1) 1, 2, 4 

2) 3

3) 5

4) 2, 6

5) 9, 18

Solution (C++ code):
{solution}


assistant: Let's start with Phase 3, where we will translate the performance-characterizing invariants into runtime checks in C++.

### Phase 3: Implement Performance-Characterizing Invariants in C++

Here are C++ code snippets that implement the natural language invariants derived previously:

1. **High Count of Divisors for Large `x`:**
   ```cpp
   // Checker function to detect potential slowdown due to high divisor count
   void check_high_divisor_count(long long x, int divisor_count) {
       if (divisor_count > 50) {  // Arbitrary threshold for high divisor count
           cerr << "Warning: High divisor count for x = " << x << " may slow down performance!" << endl;
           abort();
       }
   }
   ```

2. **Frequent Map Operations:**
   ```cpp
   // Checker function to detect frequent map operations
   void check_frequent_map_operations(const unordered_map<long long, vector<long long>>& mp) {
       for (const auto& entry : mp) {
           if (entry.second.size() > 50) {  // Arbitrary threshold for frequent operations on map
               cerr << "Warning: Frequent map operations for key = " << entry.first << " may slow down performance!" << endl;
               abort();
           }
       }
   }
   ```

3. **Large Values of `x`:**
   ```cpp
   // Checker function for large values of x
   void check_large_value_of_x(long long x) {
       if (x > 100000) {  // Given constraint, but large enough to merit a check
           cerr << "Warning: Large value x = " << x << " may lead to performance issues!" << endl;
           abort();
       }
   }
   ```

### Phase 4: Integrate Checks into the Original Program

Now, let's integrate these checker functions into the original C++ code. We'll place these checks outside of tight loops to avoid unnecessary overhead.

```cpp
#include <bits/stdc++.h>
using namespace std;

// Checker function to detect potential slowdown due to high divisor count
void check_high_divisor_count(long long x, int divisor_count) {
    if (divisor_count > 50) {  // Arbitrary threshold for high divisor count
        cerr << "Warning: High divisor count for x = " << x << " may slow down performance!" << endl;
        abort();
    }
}

// Checker function to detect frequent map operations
void check_frequent_map_operations(const unordered_map<long long, vector<long long>>& mp) {
    for (const auto& entry : mp) {
        if (entry.second.size() > 50) {  // Arbitrary threshold for frequent operations on map
            cerr << "Warning: Frequent map operations for key = " << entry.first << " may slow down performance!" << endl;
            abort();
        }
    }
}

// Checker function for large values of x
void check_large_value_of_x(long long x) {
    if (x > 100000) {  // Given constraint, but large enough to merit a check
        cerr << "Warning: Large value x = " << x << " may lead to performance issues!" << endl;
        abort();
    }
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    long long n;
    cin >> n;

    for (long long t = 1; t <= n; t++) {
        long long x, y;
        cin >> x >> y;

        check_large_value_of_x(x);  // Check for large value of x

        long long cnt = 0;
        int divisor_count = 0;  // Track divisor count

        for (long long j = 1; j * j <= x; j++) {
            if (x % j == 0) {
                long long ind = lower_bound(mp[j].begin(), mp[j].end(), t - y) - mp[j].begin();
                if (ind == mp[j].size()) cnt++;
                mp[j].push_back(t);
                divisor_count++;  // Increment divisor count

                if (j != x / j) {
                    ind = lower_bound(mp[x / j].begin(), mp[x / j].end(), t - y) - mp[x / j].begin();
                    if (ind == mp[x / j].size()) cnt++;
                    mp[x / j].push_back(t);
                    divisor_count++;  // Increment divisor count
                }
            }
        }

        check_high_divisor_count(x, divisor_count);  // Check for high divisor count
        check_frequent_map_operations(mp);  // Check for frequent map operations

        cout << cnt << '\n';
    }

    return 0;
}
```

### Explanation of Changes

- **High Divisor Count Check:** After computing divisors for `x`, check if the divisor count exceeds a threshold.
- **Frequent Map Operations Check:** Periodically check if any vector in the map grows too large, indicating frequent access.
- **Large `x` Check:** Right after reading `x`, ensure it is within a reasonable bound for expected performance.

These checks help identify potential performance bottlenecks without introducing significant overhead.

